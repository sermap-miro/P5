# -*- coding: utf-8 -*-

# import ubinascii
# import socket
import time

import pycom


import machine

from machine import UART

adc= machine.ADC()

#PELLE_TEMPS_s = 10
PELLE_TEMPS_s = 60


V_BATTERIE_FAIBLE = 22.3 # Volt
Conversion_Volt_Lopy = 3.3/4095
Facteur_Pont_Resistance_30V = 9.3


_NOIR = 0x000000
_VERT = 0x007F00
_VERT_CLAIR = 0x001000
_BLEU = 0x00007F
_BLEU_CLAIR = 0x000010
#_ROUGE = 0x7F0000
_ROUGE = 0x400000
_ROUGE_CLAIR = 0x100000
_JAUNE = 0x7F7F00
_JAUNE_CLAIR = 0x101000


from machine import Timer

from pion import Patinage_Detection

class Fin_Action_Programmer:

    def __init__(self, mirobot, temps_action=PELLE_TEMPS_s):
        """Genere une alarme a la frequence passer en parametre"""
        print('Fin d\'action programmer dans {} s'.format(temps_action))
        self.Etat = 1
        self.mirobot = mirobot
        self.alarm = Timer.Alarm(self.action , s=temps_action, periodic=False)

    def stop(self):
        self.Etat = 0
        self.alarm.cancel()
        del(self.alarm)
        #self.__alarm.callaback(None)

    def action(self, alarm):
        #global verification_platine
        #print(globals())
        #print('verification_pion' in globals())
        print("Fin de l'action programmer => stop()")
        self.mirobot.stop()
        self.stop()


class Mirobot:
    #self.CAPTEUR_PION = machine.Pin('P19', mode=machine.Pin.IN, pull=None)
    #self.CAPTEUR_CAPOT = machine.Pin('P20', mode=machine.Pin.IN, pull=None)


    def __init__(self, mir_id = 0, arm_id="00000"):
    #def __init__(self, mir_id = 0, arm_id="00000", communication_socket=s):
    #def __init__(self, mir_id = 0, arm_id="00000", communication_socket=communication_socket):
        self.nom = 'm'
        self.mir_id = mir_id
        self.arm_id = arm_id
        self.TAG_CMD = 0
        self.TAG_RF = 0
        self.Nb_Seconde = 1
        self.vitesse = 'F'
        self.Nb_Pion = 255
        self.STATUT_BRUT = ''
        self.Infinie = 0
        self.Filoguidage = 0
        self.Commande_A_Executer = ""
        self.Etat = 'Attente Instruction'
        self.Etat_Pelle = 'Baissé'
        self.Capteur_Capot_Nb_Evenement = 0
        self.Capteur_Capot_Evenement = 0
        self.Capteur_Pion = ''
        self.Capteur_Pion_Nb_Evenement = 0
        self.Capteur_Pion_Evenement = 0
        #self.Nb_Signal_Pion = 0
        self.Marche_Forcer = 0
        self.PION = 0
        self.PLATINE = 0
        #Valeur du courant moteur
        self.I_Moteur_1 = 0
        self.I_Moteur_2 = 0
        #Consigne moteur
        self.Moteur_Consigne = 14 # Ampères
        self.Moteur_1_Consigne = 14 # Ampères
        self.Moteur_2_Consigne = 14 # Ampères
        #Valeur de la PWM de consigne du moteur
        self.PWM = 0
        self.duty = 0
        self.erreur = 0
        self. erreur_accumulator = 0
        #
        self.Erreur = ''

        #Moteur Avance - Recule
        self.AV_1 = machine.Pin('P9', mode=machine.Pin.OUT)
        self.AV_1(True)
        self.AR_1 = machine.Pin('P10', mode=machine.Pin.OUT)
        self.AR_1(True)
        #Moteur Pelle
        self.AV_2 = machine.Pin('P11', mode=machine.Pin.OUT)
        self.AV_2(True)
        #self.AR_2 = machine.Pin('P12', mode=machine.Pin.OUT)
        self.AR_2 = machine.Pin('P8', mode=machine.Pin.OUT)
        self.AR_2(True)

        #self.BUZZER = machine.Pin('P3', mode=machine.Pin.OUT)
        self.BUZZER = machine.Pin('P21', mode=machine.Pin.OUT)
        self.BUZZER(False)

        self.BATTERIE = adc.channel(pin='P13', attn=machine.ADC.ATTN_11DB)
        #détection du patinage
        self.patinage_detection = Patinage_Detection(self)

        self.uart_PIC = UART(1, baudrate=115200)
        self.uart_PIC.write('\r') #Initialisation du PIC

        self.Mode_List = { 'MANUEL' : '0',
        'FILO' : '1',
        'PILO' : '2',
        'PAUSE': '3',
        'AU' : '5'
        }

        self.Etat_List = { '00' : 'Inactif',
        '01' : 'Alarme',
        '02' : 'Avance',
        '03' : 'Recule',
        '04' : 'Lève la Pelle',
        '05' : 'Baisse la Pelle',
        'FF' : 'Démarrage'
        }

        self.Etat_Pelle_Intitule = { '0' : 'Baissé',
        '1' : 'Levé'
        }

        self.Erreur_List = { '0' : 'NULL',
        '1' : 'I_Moteur_1',
        '2' : 'I_Moteur_2',
        '3' : 'Patinage',
        '4' : 'Sécu'}#,
        # '5' : 'Batterie Faible',
        # '6' : 'Dérapage',
        # '7' : 'Patinage'}

        self.Cause_AU_LIST = { 0 : 'NULL',
        1 : 'Bouton AU',
        2 : 'Mode AU',
        3 : 'MIROBOT CMD AU',
        4 : 'ARMOIRE CMD AU',
        5 : 'Batterie Faible AU'}

        self.FILO_AVAR_LIST = { 0 : 'Av',
        1 : 'Ar'}


# m.PIC_ASK('i')
# m.PIC_ASK('p')

# m.Consigne(8)
# m.Moteur_Consigne=100
# m.PIC_PARAM_UPDATE()
# m.uart_PIC.write('p\r')#statut moteur
# m.uart_PIC.write('s\r')#statut
# m.uart_PIC.write('e\x00\r')
# m.uart_PIC.readall()
    def Consigne(self, consigne=0):
        self.Moteur_Consigne = consigne
        self.PIC_PARAM_UPDATE()

    def PIC_PARAM_UPDATE(self):
        if 0 <= self.Moteur_Consigne  <= 255:
            self.PIC_SEND('c{}'.format(chr(self.Moteur_Consigne)))
        else:
            self.Moteur_Consigne = 0
            self.PIC_SEND('c{}'.format(chr(self.Moteur_Consigne)))

    def PIC_ASK(self, Question=''):
        if Question != '':
            Reponse = self.uart_PIC.readall()
            self.PIC_SEND(Question)
            #self.uart_PIC.write(Question + '\r')
            time.sleep(0.04)
            Reponse = self.uart_PIC.readall()
            return Reponse

    def PIC_SEND(self, Commande=''):
        if Commande != '':
            self.uart_PIC.write(Commande + '\r')

# m.PIC_LED(0)
# m.PIC_LED(1)
    def PIC_LED(self, Etat=1):
        if Etat == 1:
            self.PIC_SEND('L1')
        else:
            self.PIC_SEND('L0')


    def LED_set(self, Couleur=0x000000):
        pycom.rgbled(Couleur)

    def bip(self, temps_s=1):
        self.BUZZER(True)
        time.sleep(temps_s)
        self.BUZZER(False)


    def batterie(self):
        _BATTERIE = self.BATTERIE()
        _BATTERIE *= Conversion_Volt_Lopy
        _BATTERIE *= Facteur_Pont_Resistance_30V
        return('{:05.02f}'.format(_BATTERIE))
        #
        # V_BATTERIE_FAIBLE = 22.3 # Volt
        # Conversion_Volt_Lopy = 3.3/4095
        # Facteur_Pont_Resistance_30V = 9.3

    def get_statut(self):
        self.STATUT_BRUT = m.PIC_ASK('s')[:-1]


    def get_etat(self,Etat):
        return self.Etat_List[Etat]

    # def get_etat_pelle(self,Etat):
    #     return self.Etat_Pelle_Intitule[Etat]

    def get_erreur(self,Erreur):
        return self.Erreur_List[Erreur]


    def get_cause_au(self,Cause):
        return self.Cause_AU_LIST[Cause]

    def libre(self):
        '''renvoi 1 s'il est libre, 0 en cours de fonctionnement, 2 en alerte'''
        print("Vérification de l'état du Mirobot...")
        if self.Etat in {'Arrêt Urgence', 'Patinage', 'Sécu Capot'}:
            print("Mirobot en alerte: " + self.Etat)
            self.LED_set(_ROUGE)
            return 2
        if self.Etat == 'Attente Instruction' or self.Etat == 'Platine':
            print("Mirobot Libre")
            self.Infinie = 0 # pas vraiment nécessaire, surtout en sécurité, mais si bien fait on ne devrait jamais avoir a resetté cette variable
            self.LED_set(_VERT_CLAIR)
            return 1
        else:
            print("Mirobot non Libre, état = " + self.Etat)
            #self.LED_set(_JAUNE_CLAIR)
            self.LED_set(_BLEU_CLAIR)
            return 0


    #def commande_TAG(self, Commande='CDAE000000',TAG=None): # self.TAG_CMD):
    def commande_TAG(self, Commande=None,TAG=None): # self.TAG_CMD):
        Commande = Commande if Commande is not None else self.Commande_A_Executer
        TAG = TAG if TAG is not None else self.TAG_CMD
        self.TAG_CMD = TAG
        Commande = Commande[0] + '{0:02X}'.format(TAG) + Commande [3:]
        self.Commande_A_Executer = Commande
        Commande_ACK = 0
        while(Commande_ACK==0):
            self.command_send(self.arm_id+str(self.mir_id)+'{0:02X}'.format(self.Somme_de_Controle('{:0<10}'.format(Commande)))+'{:0<10}'.format(Commande))
            time.sleep(5)
            Commande_ACK=self.verif_cmd()
            time.sleep(1)

    def Somme_de_Controle(self,String):
        return self.Somme_de_Controle_Mirobot(String[0],String[1],String[2],String[3],String[4],String[5],String[6],String[7],String[8],String[9])

    def Somme_de_Controle_Mirobot(self,A,B,C,D,E,F,G,H,I,J):
        CS = 0
        CS ^= ord(A)
        CS ^= ord(B)
        CS ^= ord(C)
        CS ^= ord(D)
        CS ^= ord(E)
        CS ^= ord(F)
        CS ^= ord(G)
        CS ^= ord(H)
        CS ^= ord(I)
        CS ^= ord(J)
        #CS ^= ord('U')
        return CS

    # def refresh_statut(self, nb_essai_max=5):
    #     nb_essai = 0
    #     #nb_essai_max = 3
    #     while(nb_essai<nb_essai_max):
    #         nb_essai += 1
    #
    #     return 0



    def stat_reset(self):
        self.Capteur_Capot_Nb_Evenement = 0
        self.Capteur_Capot_Evenement = 0
        self.Capteur_Pion_Nb_Evenement = 0
        self.Capteur_Pion_Evenement = 0
        self.PION = 0

    def avance(self, Reset=1, Nb_Seconde=0):
        self.PION = 0
        self.Etat = self.Etat_List['8'] # 'Avance'
        if Reset == 1:
            self.stat_reset()
            # self.Capteur_Capot_Nb_Evenement = 0
            # self.Capteur_Capot_Evenement = 0
            # #self.Nb_Signal_Pion = 0
            # self.Capteur_Pion_Nb_Evenement = 0
        #print("Mirobot avance()")
        self.eteindre(self.AR_1)
        self.allumer(self.AV_1)
        if Nb_Seconde == 0:
            print("Mirobot avance()")
            # if 'patinage_detection' in globals():
            #     print("patinage_detection est dans globals() => .stop()")
            #     self.patinage_detection.stop()
            # elif 'patinage_detection' in locals():
            #     print("patinage_detection est dans locals() => .stop()")
            #     self.patinage_detection.stop()
            # else:
            #     print("patinage_detection n'est pas dans globals() ni locals()")
            #patinage_detection = Patinage_Detection(self)
            self.patinage_detection.start()
        else:
            print('Mirobot avance({})'.format(Nb_Seconde))
            if 'fin_avancement' in globals():
                print("fin_avancement est dans globals() => .stop()")
                self.fin_avancement.stop()
            elif 'fin_avancement' in locals():
                print("fin_avancement est dans locals() => .stop()")
                self.fin_avancement.stop()
            else:
                print("fin_avancement n'est pas dans globals() ni locals()")
            self.fin_avancement = Fin_Action_Programmer(self, temps_action=Nb_Seconde)
        # Nb_Seconde = Nb_Seconde if Nb_Seconde is not None else self.Nb_Seconde
        # if(Nb_Seconde>10):
        #     Nb_Seconde=10
        # #mirobot_send_command(lc,str(MIR_ID)+'C0080'+str(Nb_Seconde))
        # self.commande_TAG(Commande='C0080'+str(Nb_Seconde))

    def recule(self, Reset=1,  Nb_Seconde=0):
        self.PION = 0
        self.Etat = self.Etat_List['9'] # 'Recule'
        if Reset == 1:
            self.stat_reset()
            # self.Capteur_Capot_Nb_Evenement = 0
            # self.Capteur_Capot_Evenement = 0
            # #self.Nb_Signal_Pion = 0
            # self.Capteur_Pion_Nb_Evenement = 0
        #print("Mirobot recule()")
        self.eteindre(self.AV_1)
        self.allumer(self.AR_1)
        if Nb_Seconde == 0:
            print("Mirobot recule()")

            self.patinage_detection.start()
        else:
            print('Mirobot recule({})'.format(Nb_Seconde))
            if 'fin_avancement' in globals():
                print("fin_avancement est dans globals() => .stop()")
                self.fin_avancement.stop()
            elif 'fin_avancement' in locals():
                print("fin_avancement est dans locals() => .stop()")
                self.fin_avancement.stop()
            else:
                print("fin_avancement n'est pas dans globals() ni locals()")
            self.fin_avancement = Fin_Action_Programmer(self, temps_action=Nb_Seconde)


    def baisse_la_pelle(self):
        self.Etat = self.Etat_List['C'] # 'Baisse la Pelle'
        print("Mirobot baisse la pelle()")
        self.eteindre(self.AV_2)
        self.allumer(self.AR_2)
        self.fin_pelle = Fin_Action_Programmer(self)

    def leve_la_pelle(self):
        self.Etat = self.Etat_List['B'] #'Lève la Pelle'
        print("Mirobot leve la pelle()")
        self.eteindre(self.AR_2)
        self.allumer(self.AV_2)
        self.fin_pelle = Fin_Action_Programmer(self)

    def pelle(self, Direction=1):
        if Direction == 1:
            self.leve_la_pelle()
        else:
            self.baisse_la_pelle()

    def allumer(self, Broche):
        Broche(False) # Entré inversé
        #Broche(True)

    def eteindre(self, Broche):
        Broche(True) # Entré inversé
        #Broche(False)

    def etat(self, Broche):
        return Broche.value() == 1

    def start(self):
        print("Mirobot start")

    def coupe_moteur(self):
        self.eteindre(self.AV_1)
        self.eteindre(self.AV_2)
        self.eteindre(self.AR_1)
        self.eteindre(self.AR_2)


    def stop(self, cause=None):
        self.coupe_moteur()
        if cause == None:
            print('mirobot stop()')
        else:
            print('mirobot stop('+ cause +')')

        self.patinage_detection.stop()

        self.Etat = self.Etat_List['3'] if cause is None else cause # 'Attente Instruction'
        #self.commande_TAG(Commande='C0013')

    def temps_anti_patinage(self, Temps=150):
        #mirobot_send_command(lc,str(MIR_ID)+'C009'+'{:05d}'.format(seuil))
        if Temps > 255 : Temps = 255
        self.commande_TAG(Commande='C0092'+'{:03d}'.format(Temps))

    def seuil_anti_derapage(self, Seuil=2176):
        #mirobot_send_command(lc,str(MIR_ID)+'C009'+'{:05d}'.format(seuil))
        #if Temps > 255 : Temps = 255
        self.commande_TAG(Commande='C0093'+'{:05d}'.format(Seuil))

    def TAG_init(self):
        self.TAG_CMD = 1

    def TAG_increment(self):
        self.TAG_CMD += 1 % 255
