# -*- coding: utf-8 -*-
#global m
from mirobot2 import m
import time


class Sortie_Prgm(Exception):#en cas d'alerte sur un programme
    def __init__(self,raison):
        self.raison = raison

    def __str__(self):
        return self.raison


_LIBRE = 0
_OCCUPER = 1
#from machine import Timer


_EXECUTION_IMPOSSIBLE = 2
_EXECUTION_OK = 1
_EXECUTION_ERREUR = 0

def Execution(Commande, Option=''):
    if Commande == 'A':
        if Option!='':
            return Avance(Pion=Option)
        else:
            return Avance()
        # return Avance(Pion=Option) if Option!='' else return Avance()
    elif Commande == 'R':
        if Option!='':
            return Recule(Pion=Option)
        else:
            return Recule()
        # return Recule(Pion=Option) if Option!='' else return Recule()
    elif Commande == 'P':
        if Option!='':
            return Pailleux(Pion=Option)
        else:
            return Pailleux()
        # return Pailleux(Pion=Option) if Option!='' else return Pailleux()
    elif Commande == 'D':
        if Option!='':
            return DVT(Seconde=Option)
        else:
            return DVT()
        # return DVT(Seconde=Option) if Option!='' else return DVT()
    elif Commande == 'M':
        if Option!='':
            return Multitas(Patinage=Option)
        else:
            return Multitas()
        # return Multitas(Patinage=Option) if Option!='' else return Multitas()
    elif Commande == 'B':
        return Pelle_Baisse()
    elif Commande == 'L':
        return Pelle_Leve()
    elif Commande == 'O':
        if Option!='':
            return Orientation(Direction=Option)
        else:
            return Orientation()
        # return Orientation(Direction=Option) if Option!='' else return Orientation()
    elif Commande == 'S':
        return Pause(Seconde=Option)
    else:
        return _EXECUTION_IMPOSSIBLE
    #time.sleep(2)


def Cmd_Execution(Commande):
    if Commande[0] in {'A', 'R', 'P', 'D', 'M', 'S'}:
        try:
            valeur_option = int(Commande[1:])
            return Execution(Commande[0], valeur_option)
            #return Execution(Commande)
            #return Execution('{} {}'.format(Commande[0], valeur_option))
        except:
            return Execution(Commande[0])
            # if Commande[0] == 'A':
            #     return Execution(Commande[0], 0)
            # elif Commande[0] == 'R':
            #     return Execution(Commande[0], 0)
            # elif Commande[0] == 'P':
            #     return Execution(Commande[0], 2)
            # elif Commande[0] == 'D':
            #     return Execution(Commande[0], 4)
            # elif Commande[0] == 'M':
            #     return Execution(Commande[0], 15)
            # elif Commande[0] == 'S':
            #     return Execution(Commande[0], 4)
            # else:
            #     return _EXECUTION_IMPOSSIBLE
    elif (Commande[0] == 'O'):
        if Commande[1:].strip() in {'G', 'D'} :
            return Execution(Commande[0], Commande[1:].strip())
        else:
            return Execution(Commande[0]) # par défault on tourne a gauche
            #return Execution(Commande[0], 'G') # par défault on tourne a gauche
        #return Execution(Commande)
        #return Execution('O {}'.format(Commande[1:].strip()))
    elif Commande[0] in {'B', 'L'}:
        return Execution(Commande[0])
        #return Execution(Commande)
        #return Execution(Commande[0])
    else:
        return _EXECUTION_IMPOSSIBLE

def Read_Prgm(Prgm_Indice):
    try:
        with open('/flash/prgm/{}.txt'.format(Prgm_Indice)) as Fichier:
            try:
                for ligne in Fichier:
                    try:
                        if len(ligne)>0:
                            if Commande[0] in {'A', 'R', 'P', 'D', 'M', 'B', 'L', 'O', 'S'}:
                                Resultat=Cmd_Execution(ligne)
                            else:
                                Resultat=_EXECUTION_IMPOSSIBLE
                        else:
                            Resultat=_EXECUTION_IMPOSSIBLE
                    except:
                        pass
                if Resultat == _EXECUTION_ERREUR:
                    raise MonException("Erreur d'execution du programme on sort de tout")
            except:
                print("Erreur de fonctionnement => lecture du programme abandonné")

    except:
        print("Erreur de lecture du programme")


def Avance(Pion=0):
    m.PIC_PARAM_UPDATE()
    m.avance(Reset=1, Nb_Pion=Pion)
    nb_seconde_max_avant_defaut = 180 * 60 #180 minutes
    while m.check_busy()==_OCCUPER and nb_seconde_max_avant_defaut > 0:
        nb_seconde_max_avant_defaut -= 1
        time.sleep(1)
    #time.sleep(0.4)#on laisse le temps au PIC de démarrer
    #ETAT_AVANCE
    #refresh_statut()
    # while m.Etat in {'Avance', 'Bloquer'}:
    # while(m.libre()==0):
    #while m.Etat in {'Avance'}:
    #refresh_statut()
    if m.libre() == _EXECUTION_OK and nb_seconde_max_avant_defaut > 0:
        return _EXECUTION_OK
    else:
        return _EXECUTION_ERREUR

# def Avance(m, Pion=0):
#     m.avance(Reset=1, Nb_Pion=Pion)
#     pass

def Recule(Pion=0):
    m.PIC_PARAM_UPDATE()
    m.recule(Reset=1, Nb_Pion=Pion)
    #time.sleep(0.4)#on laisse le temps au PIC de démarrer
    #ETAT_AVANCE
    # refresh_statut()
    # while m.Etat == 'Recule':
    #     refresh_statut()

def Pailleux(Pion=2):
    m.PIC_PARAM_UPDATE()
    pass

def DVT(Seconde=4):
    m.PIC_PARAM_UPDATE()
    m.avance(Reset=1, Nb_Seconde=Seconde)
    #pass

def Multitas(Patinage=15):
    m.PIC_PARAM_UPDATE()
    _patinage_temps_s = m.PATINAGE_TEMPS_s
    m.PIC_SEND('P1{:03d}'.format(Patinage))
    m.avance(Reset=1, Nb_Pion=0)
    m.PIC_PARAM_UPDATE() #on remet les paramètres par defaut
    pass

def Pelle_Baisse():
    m.PIC_PARAM_UPDATE()
    m.baisse_la_pelle()
    # time.sleep(0.4)#on laisse le temps au PIC de démarrer
    # refresh_statut()
    # while m.Etat == 'Baisse la Pelle':
    #     refresh_statut()

def Pelle_Leve():
    m.PIC_PARAM_UPDATE()
    m.leve_la_pelle()
    # time.sleep(0.4)#on laisse le temps au PIC de démarrer
    # refresh_statut()
    # while m.Etat == 'Lève la Pelle':
    #     refresh_statut()


def Orientation(Direction='G''):
    m.PIC_PARAM_UPDATE()
    #Gauche = 0, Droite = 1
    if (Direction == 'G') or (Direction == 0):
        Direction = 0
    elif(Direction == 'D') or (Direction == 1):
        Direction = 1
    pass

def Pause(Seconde=4):
    m.PIC_PARAM_UPDATE()
    time.sleep(Seconde)
    return _EXECUTION_OK


# class Commande:
#
#     def __init__(self, m):
#         self.m = m
#
#     def Avance(self, Pion=0):
#         self.m.avance(Reset=1, Nb_Pion=Pion)
#         pass
#
#     def Recule(self, Pion=0):
#         pass
#
#     def Pailleux(self, Pion=2):
#         pass
#
#     def DVT(self, Seconde=4):
#         pass
#
#     def Multitas(self, Patinage=15):
#         pass
#
#     def Pelle_Baisse(self):
#         pass
#
#     def Pelle_Leve(self):
#         pass
#
#     def Orientation(self, Direction=0):
#         pass
#
#     def Pause(self, Seconde=4):
#         pass
