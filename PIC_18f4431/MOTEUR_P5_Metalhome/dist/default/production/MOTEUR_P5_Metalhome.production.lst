

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 18 08:14:22 2018

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   109                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.42
   123                           ; Generated 13/04/2017 GMT
   124                           ; 
   125                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4431 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	mediumconst
   158  003EA4                     __pmediumconst:
   159                           	opt stack 0
   160  003EA4  00                 	db	0
   161  003EA5                     _dpowers:
   162                           	opt stack 0
   163  003EA5  0001               	dw	1
   164  003EA7  000A               	dw	10
   165  003EA9  0064               	dw	100
   166  003EAB  03E8               	dw	1000
   167  003EAD  2710               	dw	10000
   168  003EAF                     __end_of_dpowers:
   169                           	opt stack 0
   170  003EAF                     _hexpowers:
   171                           	opt stack 0
   172  003EAF  0001               	dw	1
   173  003EB1  0010               	dw	16
   174  003EB3  0100               	dw	256
   175  003EB5  1000               	dw	4096
   176  003EB7                     __end_of_hexpowers:
   177                           	opt stack 0
   178  0000                     _SSPCONbits	set	4038
   179  0000                     _SSPSTATbits	set	4039
   180  0000                     _RCREG1	set	4014
   181  0000                     _SSPBUF	set	4041
   182  0000                     _TXREG1	set	4013
   183  0000                     _TXSTA1	set	4012
   184  0000                     _RCSTA1	set	4011
   185  0000                     _BAUDCON	set	4010
   186  0000                     _RCSTA1bits	set	4011
   187  0000                     _SPBRGH	set	4016
   188  0000                     _SPBRG	set	4015
   189  0000                     _TXSTA1bits	set	4012
   190  0000                     _BAUDCONbits	set	4010
   191  0000                     _PR5L	set	3984
   192  0000                     _PR5H	set	3985
   193  0000                     _TMR5H	set	3976
   194  0000                     _TMR5L	set	3975
   195  0000                     _T5CONbits	set	4023
   196  0000                     _PR2	set	4043
   197  0000                     _T2CONbits	set	4042
   198  0000                     _T2CON	set	4042
   199  0000                     _TMR0L	set	4054
   200  0000                     _TMR0H	set	4055
   201  0000                     _T0CONbits	set	4053
   202  0000                     _LATEbits	set	3981
   203  0000                     _SEVTCMPL	set	3953
   204  0000                     _SEVTCMPH	set	3952
   205  0000                     _PWMCON0bits	set	3951
   206  0000                     _PTCON0bits	set	3967
   207  0000                     _PTCON1bits	set	3966
   208  0000                     _OVDCONS	set	3946
   209  0000                     _OVDCOND	set	3947
   210  0000                     _DTCON	set	3949
   211  0000                     _PWMCON1	set	3950
   212  0000                     _PWMCON0	set	3951
   213  0000                     _PTCON1	set	3966
   214  0000                     _PTCON0	set	3967
   215  0000                     _PTPERH	set	3962
   216  0000                     _LATE	set	3981
   217  0000                     _LATD	set	3980
   218  0000                     _LATC	set	3979
   219  0000                     _LATB	set	3978
   220  0000                     _LATA	set	3977
   221  0000                     _TRISEbits	set	3990
   222  0000                     _TRISE	set	3990
   223  0000                     _TRISDbits	set	3989
   224  0000                     _TRISD	set	3989
   225  0000                     _TRISCbits	set	3988
   226  0000                     _TRISC	set	3988
   227  0000                     _TRISBbits	set	3987
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISAbits	set	3986
   230  0000                     _TRISA	set	3986
   231  0000                     _TMR2	set	4044
   232  0000                     _LATCbits	set	3979
   233  0000                     _RCREG	set	4014
   234  0000                     _PIR1bits	set	3998
   235  0000                     _PDC1H	set	3958
   236  0000                     _PDC1L	set	3959
   237  0000                     _PDC0H	set	3960
   238  0000                     _PDC0L	set	3961
   239  0000                     _PTPERL	set	3963
   240  0000                     _PORTAbits	set	3968
   241  0000                     _PORTCbits	set	3970
   242  0000                     _CAP2CONbits	set	3938
   243  0000                     _IPR3bits	set	4005
   244  0000                     _CAP1CONbits	set	3939
   245  0000                     _RCONbits	set	4048
   246  0000                     _INTCON3bits	set	4080
   247  0000                     _INTCON2bits	set	4081
   248  0000                     _LATAbits	set	3977
   249  0000                     _ADRESH	set	4036
   250  0000                     _IPR1bits	set	3999
   251  0000                     _PIE1bits	set	3997
   252  0000                     _ADCON3bits	set	3994
   253  0000                     _ADCON1bits	set	4033
   254  0000                     _ADCON0bits	set	4034
   255  0000                     _ANSEL1	set	4025
   256  0000                     _ANSEL0	set	4024
   257  0000                     _ADCHS	set	3993
   258  0000                     _ADCON3	set	3994
   259  0000                     _ADCON2bits	set	4032
   260  0000                     _ADCON2	set	4032
   261  0000                     _ADCON1	set	4033
   262  0000                     _ADCON0	set	4034
   263  0000                     _OSCCON	set	4051
   264  0000                     _PIE3bits	set	4003
   265  0000                     _PIR3bits	set	4004
   266  0000                     _INTCONbits	set	4082
   267  0000                     _TRMT1	set	32097
   268  0000                     _LATC5	set	31837
   269  0000                     _GIE	set	32663
   270  0000                     _PEIE	set	32662
   271  0000                     _TMR2IF	set	31985
   272  0000                     _LATD7	set	31847
   273  0000                     _LATD6	set	31846
   274  0000                     _LATD5	set	31845
   275  0000                     _LATD4	set	31844
   276  0000                     _SEVTDIR	set	31603
   277  0000                     _INT0IF	set	32657
   278  0000                     _PTIF	set	32036
   279  0000                     _GODONE	set	32273
   280  0000                     _ADIF	set	31990
   281  0000                     _ADON	set	32272
   282  0000                     _IOFS	set	32410
   283  003EB7                     STR_2:
   284  003EB7  63                 	db	99	;'c'
   285  003EB8  6F                 	db	111	;'o'
   286  003EB9  6E                 	db	110	;'n'
   287  003EBA  73                 	db	115	;'s'
   288  003EBB  69                 	db	105	;'i'
   289  003EBC  67                 	db	103	;'g'
   290  003EBD  6E                 	db	110	;'n'
   291  003EBE  65                 	db	101	;'e'
   292  003EBF  3D                 	db	61	;'='
   293  003EC0  25                 	db	37
   294  003EC1  64                 	db	100	;'d'
   295  003EC2  20                 	db	32
   296  003EC3  69                 	db	105	;'i'
   297  003EC4  5F                 	db	95	;'_'
   298  003EC5  31                 	db	49	;'1'
   299  003EC6  3D                 	db	61	;'='
   300  003EC7  25                 	db	37
   301  003EC8  64                 	db	100	;'d'
   302  003EC9  20                 	db	32
   303  003ECA  69                 	db	105	;'i'
   304  003ECB  5F                 	db	95	;'_'
   305  003ECC  32                 	db	50	;'2'
   306  003ECD  3D                 	db	61	;'='
   307  003ECE  25                 	db	37
   308  003ECF  64                 	db	100	;'d'
   309  003ED0  20                 	db	32
   310  003ED1  64                 	db	100	;'d'
   311  003ED2  75                 	db	117	;'u'
   312  003ED3  74                 	db	116	;'t'
   313  003ED4  79                 	db	121	;'y'
   314  003ED5  3D                 	db	61	;'='
   315  003ED6  25                 	db	37
   316  003ED7  64                 	db	100	;'d'
   317  003ED8  20                 	db	32
   318  003ED9  65                 	db	101	;'e'
   319  003EDA  72                 	db	114	;'r'
   320  003EDB  72                 	db	114	;'r'
   321  003EDC  65                 	db	101	;'e'
   322  003EDD  75                 	db	117	;'u'
   323  003EDE  72                 	db	114	;'r'
   324  003EDF  3D                 	db	61	;'='
   325  003EE0  25                 	db	37
   326  003EE1  64                 	db	100	;'d'
   327  003EE2  20                 	db	32
   328  003EE3  50                 	db	80	;'P'
   329  003EE4  61                 	db	97	;'a'
   330  003EE5  74                 	db	116	;'t'
   331  003EE6  69                 	db	105	;'i'
   332  003EE7  6E                 	db	110	;'n'
   333  003EE8  61                 	db	97	;'a'
   334  003EE9  67                 	db	103	;'g'
   335  003EEA  65                 	db	101	;'e'
   336  003EEB  5F                 	db	95	;'_'
   337  003EEC  4E                 	db	78	;'N'
   338  003EED  62                 	db	98	;'b'
   339  003EEE  5F                 	db	95	;'_'
   340  003EEF  45                 	db	69	;'E'
   341  003EF0  73                 	db	115	;'s'
   342  003EF1  73                 	db	115	;'s'
   343  003EF2  61                 	db	97	;'a'
   344  003EF3  69                 	db	105	;'i'
   345  003EF4  3D                 	db	61	;'='
   346  003EF5  25                 	db	37
   347  003EF6  64                 	db	100	;'d'
   348  003EF7  20                 	db	32
   349  003EF8  43                 	db	67	;'C'
   350  003EF9  61                 	db	97	;'a'
   351  003EFA  70                 	db	112	;'p'
   352  003EFB  74                 	db	116	;'t'
   353  003EFC  65                 	db	101	;'e'
   354  003EFD  75                 	db	117	;'u'
   355  003EFE  72                 	db	114	;'r'
   356  003EFF  5F                 	db	95	;'_'
   357  003F00  43                 	db	67	;'C'
   358  003F01  61                 	db	97	;'a'
   359  003F02  70                 	db	112	;'p'
   360  003F03  6F                 	db	111	;'o'
   361  003F04  74                 	db	116	;'t'
   362  003F05  5F                 	db	95	;'_'
   363  003F06  4E                 	db	78	;'N'
   364  003F07  62                 	db	98	;'b'
   365  003F08  5F                 	db	95	;'_'
   366  003F09  45                 	db	69	;'E'
   367  003F0A  76                 	db	118	;'v'
   368  003F0B  65                 	db	101	;'e'
   369  003F0C  6E                 	db	110	;'n'
   370  003F0D  65                 	db	101	;'e'
   371  003F0E  6D                 	db	109	;'m'
   372  003F0F  65                 	db	101	;'e'
   373  003F10  6E                 	db	110	;'n'
   374  003F11  74                 	db	116	;'t'
   375  003F12  3D                 	db	61	;'='
   376  003F13  25                 	db	37
   377  003F14  64                 	db	100	;'d'
   378  003F15  00                 	db	0
   379  003F16                     STR_10:
   380  003F16  25                 	db	37
   381  003F17  30                 	db	48	;'0'
   382  003F18  32                 	db	50	;'2'
   383  003F19  58                 	db	88	;'X'
   384  003F1A  20                 	db	32
   385  003F1B  25                 	db	37
   386  003F1C  30                 	db	48	;'0'
   387  003F1D  32                 	db	50	;'2'
   388  003F1E  58                 	db	88	;'X'
   389  003F1F  20                 	db	32
   390  003F20  25                 	db	37
   391  003F21  30                 	db	48	;'0'
   392  003F22  32                 	db	50	;'2'
   393  003F23  58                 	db	88	;'X'
   394  003F24  20                 	db	32
   395  003F25  25                 	db	37
   396  003F26  30                 	db	48	;'0'
   397  003F27  32                 	db	50	;'2'
   398  003F28  58                 	db	88	;'X'
   399  003F29  20                 	db	32
   400  003F2A  25                 	db	37
   401  003F2B  30                 	db	48	;'0'
   402  003F2C  32                 	db	50	;'2'
   403  003F2D  58                 	db	88	;'X'
   404  003F2E  20                 	db	32
   405  003F2F  25                 	db	37
   406  003F30  30                 	db	48	;'0'
   407  003F31  32                 	db	50	;'2'
   408  003F32  58                 	db	88	;'X'
   409  003F33  20                 	db	32
   410  003F34  25                 	db	37
   411  003F35  30                 	db	48	;'0'
   412  003F36  32                 	db	50	;'2'
   413  003F37  58                 	db	88	;'X'
   414  003F38  20                 	db	32
   415  003F39  25                 	db	37
   416  003F3A  30                 	db	48	;'0'
   417  003F3B  32                 	db	50	;'2'
   418  003F3C  58                 	db	88	;'X'
   419  003F3D  20                 	db	32
   420  003F3E  25                 	db	37
   421  003F3F  30                 	db	48	;'0'
   422  003F40  32                 	db	50	;'2'
   423  003F41  58                 	db	88	;'X'
   424  003F42  20                 	db	32
   425  003F43  25                 	db	37
   426  003F44  30                 	db	48	;'0'
   427  003F45  32                 	db	50	;'2'
   428  003F46  58                 	db	88	;'X'
   429  003F47  20                 	db	32
   430  003F48  25                 	db	37
   431  003F49  30                 	db	48	;'0'
   432  003F4A  32                 	db	50	;'2'
   433  003F4B  58                 	db	88	;'X'
   434  003F4C  20                 	db	32
   435  003F4D  25                 	db	37
   436  003F4E  30                 	db	48	;'0'
   437  003F4F  31                 	db	49	;'1'
   438  003F50  58                 	db	88	;'X'
   439  003F51  20                 	db	32
   440  003F52  25                 	db	37
   441  003F53  30                 	db	48	;'0'
   442  003F54  31                 	db	49	;'1'
   443  003F55  58                 	db	88	;'X'
   444  003F56  20                 	db	32
   445  003F57  25                 	db	37
   446  003F58  30                 	db	48	;'0'
   447  003F59  31                 	db	49	;'1'
   448  003F5A  58                 	db	88	;'X'
   449  003F5B  20                 	db	32
   450  003F5C  25                 	db	37
   451  003F5D  30                 	db	48	;'0'
   452  003F5E  32                 	db	50	;'2'
   453  003F5F  58                 	db	88	;'X'
   454  003F60  25                 	db	37
   455  003F61  30                 	db	48	;'0'
   456  003F62  32                 	db	50	;'2'
   457  003F63  58                 	db	88	;'X'
   458  003F64  20                 	db	32
   459  003F65  25                 	db	37
   460  003F66  30                 	db	48	;'0'
   461  003F67  32                 	db	50	;'2'
   462  003F68  58                 	db	88	;'X'
   463  003F69  00                 	db	0
   464  003F6A                     STR_7:
   465  003F6A  63                 	db	99	;'c'
   466  003F6B  6F                 	db	111	;'o'
   467  003F6C  6E                 	db	110	;'n'
   468  003F6D  73                 	db	115	;'s'
   469  003F6E  69                 	db	105	;'i'
   470  003F6F  67                 	db	103	;'g'
   471  003F70  6E                 	db	110	;'n'
   472  003F71  65                 	db	101	;'e'
   473  003F72  3D                 	db	61	;'='
   474  003F73  25                 	db	37
   475  003F74  64                 	db	100	;'d'
   476  003F75  20                 	db	32
   477  003F76  70                 	db	112	;'p'
   478  003F77  61                 	db	97	;'a'
   479  003F78  74                 	db	116	;'t'
   480  003F79  69                 	db	105	;'i'
   481  003F7A  6E                 	db	110	;'n'
   482  003F7B  3D                 	db	61	;'='
   483  003F7C  25                 	db	37
   484  003F7D  64                 	db	100	;'d'
   485  003F7E  20                 	db	32
   486  003F7F  70                 	db	112	;'p'
   487  003F80  69                 	db	105	;'i'
   488  003F81  6F                 	db	111	;'o'
   489  003F82  6E                 	db	110	;'n'
   490  003F83  3D                 	db	61	;'='
   491  003F84  25                 	db	37
   492  003F85  64                 	db	100	;'d'
   493  003F86  20                 	db	32
   494  003F87  70                 	db	112	;'p'
   495  003F88  6C                 	db	108	;'l'
   496  003F89  61                 	db	97	;'a'
   497  003F8A  74                 	db	116	;'t'
   498  003F8B  69                 	db	105	;'i'
   499  003F8C  6E                 	db	110	;'n'
   500  003F8D  65                 	db	101	;'e'
   501  003F8E  3D                 	db	61	;'='
   502  003F8F  25                 	db	37
   503  003F90  64                 	db	100	;'d'
   504  003F91  20                 	db	32
   505  003F92  70                 	db	112	;'p'
   506  003F93  65                 	db	101	;'e'
   507  003F94  6C                 	db	108	;'l'
   508  003F95  6C                 	db	108	;'l'
   509  003F96  65                 	db	101	;'e'
   510  003F97  3D                 	db	61	;'='
   511  003F98  25                 	db	37
   512  003F99  64                 	db	100	;'d'
   513  003F9A  00                 	db	0
   514  003F9B                     STR_4:
   515  003F9B  6E                 	db	110	;'n'
   516  003F9C  62                 	db	98	;'b'
   517  003F9D  5F                 	db	95	;'_'
   518  003F9E  73                 	db	115	;'s'
   519  003F9F  3D                 	db	61	;'='
   520  003FA0  25                 	db	37
   521  003FA1  64                 	db	100	;'d'
   522  003FA2  20                 	db	32
   523  003FA3  6E                 	db	110	;'n'
   524  003FA4  62                 	db	98	;'b'
   525  003FA5  5F                 	db	95	;'_'
   526  003FA6  50                 	db	80	;'P'
   527  003FA7  69                 	db	105	;'i'
   528  003FA8  6F                 	db	111	;'o'
   529  003FA9  6E                 	db	110	;'n'
   530  003FAA  3D                 	db	61	;'='
   531  003FAB  25                 	db	37
   532  003FAC  64                 	db	100	;'d'
   533  003FAD  20                 	db	32
   534  003FAE  6E                 	db	110	;'n'
   535  003FAF  62                 	db	98	;'b'
   536  003FB0  5F                 	db	95	;'_'
   537  003FB1  54                 	db	84	;'T'
   538  003FB2  69                 	db	105	;'i'
   539  003FB3  6D                 	db	109	;'m'
   540  003FB4  65                 	db	101	;'e'
   541  003FB5  72                 	db	114	;'r'
   542  003FB6  5F                 	db	95	;'_'
   543  003FB7  35                 	db	53	;'5'
   544  003FB8  3D                 	db	61	;'='
   545  003FB9  25                 	db	37
   546  003FBA  64                 	db	100	;'d'
   547  003FBB  00                 	db	0
   548  003FBC                     STR_8:
   549  003FBC  45                 	db	69	;'E'
   550  003FBD  74                 	db	116	;'t'
   551  003FBE  61                 	db	97	;'a'
   552  003FBF  74                 	db	116	;'t'
   553  003FC0  3D                 	db	61	;'='
   554  003FC1  25                 	db	37
   555  003FC2  64                 	db	100	;'d'
   556  003FC3  20                 	db	32
   557  003FC4  6E                 	db	110	;'n'
   558  003FC5  62                 	db	98	;'b'
   559  003FC6  5F                 	db	95	;'_'
   560  003FC7  73                 	db	115	;'s'
   561  003FC8  5F                 	db	95	;'_'
   562  003FC9  66                 	db	102	;'f'
   563  003FCA  6F                 	db	111	;'o'
   564  003FCB  6E                 	db	110	;'n'
   565  003FCC  63                 	db	99	;'c'
   566  003FCD  74                 	db	116	;'t'
   567  003FCE  69                 	db	105	;'i'
   568  003FCF  6F                 	db	111	;'o'
   569  003FD0  6E                 	db	110	;'n'
   570  003FD1  6E                 	db	110	;'n'
   571  003FD2  65                 	db	101	;'e'
   572  003FD3  6D                 	db	109	;'m'
   573  003FD4  65                 	db	101	;'e'
   574  003FD5  6E                 	db	110	;'n'
   575  003FD6  74                 	db	116	;'t'
   576  003FD7  3D                 	db	61	;'='
   577  003FD8  25                 	db	37
   578  003FD9  64                 	db	100	;'d'
   579  003FDA  00                 	db	0
   580  003FDB                     STR_11:
   581  003FDB  30                 	db	48	;'0'
   582  003FDC  31                 	db	49	;'1'
   583  003FDD  32                 	db	50	;'2'
   584  003FDE  33                 	db	51	;'3'
   585  003FDF  34                 	db	52	;'4'
   586  003FE0  35                 	db	53	;'5'
   587  003FE1  36                 	db	54	;'6'
   588  003FE2  37                 	db	55	;'7'
   589  003FE3  38                 	db	56	;'8'
   590  003FE4  39                 	db	57	;'9'
   591  003FE5  41                 	db	65	;'A'
   592  003FE6  42                 	db	66	;'B'
   593  003FE7  43                 	db	67	;'C'
   594  003FE8  44                 	db	68	;'D'
   595  003FE9  45                 	db	69	;'E'
   596  003FEA  46                 	db	70	;'F'
   597  003FEB  00                 	db	0
   598  003FEC                     STR_3:
   599  003FEC  25                 	db	37
   600  003FED  30                 	db	48	;'0'
   601  003FEE  32                 	db	50	;'2'
   602  003FEF  58                 	db	88	;'X'
   603  003FF0  25                 	db	37
   604  003FF1  30                 	db	48	;'0'
   605  003FF2  32                 	db	50	;'2'
   606  003FF3  58                 	db	88	;'X'
   607  003FF4  25                 	db	37
   608  003FF5  30                 	db	48	;'0'
   609  003FF6  32                 	db	50	;'2'
   610  003FF7  58                 	db	88	;'X'
   611  003FF8  00                 	db	0
   612  003FF9                     STR_5:
   613  003FF9  25                 	db	37
   614  003FFA  30                 	db	48	;'0'
   615  003FFB  31                 	db	49	;'1'
   616  003FFC  58                 	db	88	;'X'
   617  003FFD  00                 	db	0
   618  0000                     
   619                           ; #config settings
   620  003FFE  00                 	db	0	; dummy byte at the end
   621  0000                     
   622                           	psect	cinit
   623  001C6A                     __pcinit:
   624                           	opt stack 0
   625  001C6A                     start_initialization:
   626                           	opt stack 0
   627  001C6A                     __initialization:
   628                           	opt stack 0
   629                           
   630                           ; Clear objects allocated to BANK2 (128 bytes)
   631  001C6A  EE02  F000         	lfsr	0,__pbssBANK2
   632  001C6E  0E80               	movlw	128
   633  001C70                     clear_0:
   634  001C70  6AEE               	clrf	postinc0,c
   635  001C72  06E8               	decf	wreg,f,c
   636  001C74  E1FD               	bnz	clear_0
   637                           
   638                           ; Clear objects allocated to BANK1 (256 bytes)
   639  001C76  EE01  F000         	lfsr	0,__pbssBANK1
   640  001C7A  EE11 F000          	lfsr	1,256
   641  001C7E                     clear_1:
   642  001C7E  6AEE               	clrf	postinc0,c
   643  001C80  50E5               	movf	postdec1,w,c
   644  001C82  50E1               	movf	fsr1l,w,c
   645  001C84  E1FC               	bnz	clear_1
   646  001C86  50E2               	movf	fsr1h,w,c
   647  001C88  E1FA               	bnz	clear_1
   648                           
   649                           ; Clear objects allocated to BANK0 (140 bytes)
   650  001C8A  EE00  F060         	lfsr	0,__pbssBANK0
   651  001C8E  0E8C               	movlw	140
   652  001C90                     clear_2:
   653  001C90  6AEE               	clrf	postinc0,c
   654  001C92  06E8               	decf	wreg,f,c
   655  001C94  E1FD               	bnz	clear_2
   656                           
   657                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   658  001C96  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   659  001C98  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   660                           
   661                           ; Clear objects allocated to COMRAM (12 bytes)
   662  001C9A  EE00  F043         	lfsr	0,__pbssCOMRAM
   663  001C9E  0E0C               	movlw	12
   664  001CA0                     clear_3:
   665  001CA0  6AEE               	clrf	postinc0,c
   666  001CA2  06E8               	decf	wreg,f,c
   667  001CA4  E1FD               	bnz	clear_3
   668  001CA6                     end_of_initialization:
   669                           	opt stack 0
   670  001CA6                     __end_of__initialization:
   671                           	opt stack 0
   672  001CA6  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   673  001CA8  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   674  001CAA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   675  001CAC  6EF8               	movwf	tblptru,c
   676  001CAE  0100               	movlb	0
   677  001CB0  EFBF  F00E         	goto	_main	;jump to C main() function
   678                           tblptru	equ	0xFF8
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postdec1	equ	0xFE5
   682                           fsr1h	equ	0xFE2
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	bitbssCOMRAM
   686  000278                     __pbitbssCOMRAM:
   687                           	opt stack 0
   688  000278                     _SPI_MODE:
   689                           	opt stack 0
   690  000278                     	ds	1
   691  000279                     _UART_TEST:
   692                           	opt stack 0
   693  000279                     	ds	1
   694  00027A                     _SPI_full:
   695                           	opt stack 0
   696  00027A                     	ds	1
   697  00027B                     _RX1_full:
   698                           	opt stack 0
   699  00027B                     	ds	1
   700  00027C                     _RX1_ABR:
   701                           	opt stack 0
   702  00027C                     	ds	1
   703  00027D                     _Option_Pailleux:
   704                           	opt stack 0
   705  00027D                     	ds	1
   706  00027E                     _Option_Multitas:
   707                           	opt stack 0
   708  00027E                     	ds	1
   709  00027F                     _Nouvelle_Valeur_ADC:
   710                           	opt stack 0
   711  00027F                     	ds	1
   712  000280                     _Detecteur_Pion:
   713                           	opt stack 0
   714  000280                     	ds	1
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1h	equ	0xFE2
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	bssCOMRAM
   723  000043                     __pbssCOMRAM:
   724                           	opt stack 0
   725  000043                     _spiRxIndex:
   726                           	opt stack 0
   727  000043                     	ds	1
   728  000044                     _spiTxIndex:
   729                           	opt stack 0
   730  000044                     	ds	1
   731  000045                     _eusart1RxIndex:
   732                           	opt stack 0
   733  000045                     	ds	1
   734  000046                     _eusart1TxIndex:
   735                           	opt stack 0
   736  000046                     	ds	1
   737  000047                     _Compteur_IRQ_I_Moteur_2:
   738                           	opt stack 0
   739  000047                     	ds	1
   740  000048                     _Surveillance_Consommation_Moteur_2:
   741                           	opt stack 0
   742  000048                     	ds	1
   743  000049                     _Surveillance_Consommation_Moteur_1:
   744                           	opt stack 0
   745  000049                     	ds	1
   746  00004A                     _Bequille_I_Max:
   747                           	opt stack 0
   748  00004A                     	ds	1
   749  00004B                     _Consigne_en_A:
   750                           	opt stack 0
   751  00004B                     	ds	1
   752  00004C                     _nb_s_bequille:
   753                           	opt stack 0
   754  00004C                     	ds	1
   755  00004D                     _Etat_Precedent_Index:
   756                           	opt stack 0
   757  00004D                     	ds	1
   758  00004E                     _Mouvement_Startup:
   759                           	opt stack 0
   760  00004E                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1h	equ	0xFE2
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssBANK0
   769  000060                     __pbssBANK0:
   770                           	opt stack 0
   771  000060                     _eusart1TxBuffer_Test:
   772                           	opt stack 0
   773  000060                     	ds	10
   774  00006A                     _Etat_Log:
   775                           	opt stack 0
   776  00006A                     	ds	10
   777  000074                     _DVT_Tableau_Pause:
   778                           	opt stack 0
   779  000074                     	ds	6
   780  00007A                     lecture_I_Mot2@Resul:
   781                           	opt stack 0
   782  00007A                     	ds	2
   783  00007C                     lecture_I_Mot1@Resul:
   784                           	opt stack 0
   785  00007C                     	ds	2
   786  00007E                     _erreur_accumulator_max:
   787                           	opt stack 0
   788  00007E                     	ds	2
   789  000080                     _PID_out:
   790                           	opt stack 0
   791  000080                     	ds	2
   792  000082                     _erreur_accumulator:
   793                           	opt stack 0
   794  000082                     	ds	2
   795  000084                     _erreur:
   796                           	opt stack 0
   797  000084                     	ds	2
   798  000086                     _duty:
   799                           	opt stack 0
   800  000086                     	ds	2
   801  000088                     _TIMER0_Etat:
   802                           	opt stack 0
   803  000088                     	ds	1
   804  000089                     _Compteur_IRQ_I_Moteur_1:
   805                           	opt stack 0
   806  000089                     	ds	1
   807  00008A                     _delay_s_counter:
   808                           	opt stack 0
   809  00008A                     	ds	1
   810  00008B                     _consigne_pwm_max:
   811                           	opt stack 0
   812  00008B                     	ds	1
   813  00008C                     _consigne_pwm:
   814                           	opt stack 0
   815  00008C                     	ds	1
   816  00008D                     _direction:
   817                           	opt stack 0
   818  00008D                     	ds	1
   819  00008E                     _mouvement_option:
   820                           	opt stack 0
   821  00008E                     	ds	1
   822  00008F                     _type_consigne:
   823                           	opt stack 0
   824  00008F                     	ds	1
   825  000090                     _Pelle_I_Max:
   826                           	opt stack 0
   827  000090                     	ds	1
   828  000091                     _Consigne_Max_Moteur_Bequille:
   829                           	opt stack 0
   830  000091                     	ds	1
   831  000092                     _Consigne_Max_Moteur_Z:
   832                           	opt stack 0
   833  000092                     	ds	1
   834  000093                     _Consigne_Max_Moteur_X:
   835                           	opt stack 0
   836  000093                     	ds	1
   837  000094                     _Consigne_Max:
   838                           	opt stack 0
   839  000094                     	ds	1
   840  000095                     _consigne:
   841                           	opt stack 0
   842  000095                     	ds	1
   843  000096                     _moteur_indice:
   844                           	opt stack 0
   845  000096                     	ds	1
   846  000097                     _Image_Courant_Moteur_2:
   847                           	opt stack 0
   848  000097                     	ds	1
   849  000098                     _Image_Courant_Moteur_1:
   850                           	opt stack 0
   851  000098                     	ds	1
   852  000099                     _Patinage_Nb_Essai_Autoriser:
   853                           	opt stack 0
   854  000099                     	ds	1
   855  00009A                     _Patinage_Nb_Essai:
   856                           	opt stack 0
   857  00009A                     	ds	1
   858  00009B                     _Capteur_Capot_Compteur_Temps_S:
   859                           	opt stack 0
   860  00009B                     	ds	1
   861  00009C                     _Capteur_Capot_Nb_Evenement_Autoriser:
   862                           	opt stack 0
   863  00009C                     	ds	1
   864  00009D                     _Capteur_Capot_Nb_Evenement:
   865                           	opt stack 0
   866  00009D                     	ds	1
   867  00009E                     _nb_Pion_Objectif:
   868                           	opt stack 0
   869  00009E                     	ds	1
   870  00009F                     _nb_Pion:
   871                           	opt stack 0
   872  00009F                     	ds	1
   873  0000A0                     _nb_s_pelle:
   874                           	opt stack 0
   875  0000A0                     	ds	1
   876  0000A1                     _nb_100ms_platine:
   877                           	opt stack 0
   878  0000A1                     	ds	1
   879  0000A2                     _nb_100ms_pion:
   880                           	opt stack 0
   881  0000A2                     	ds	1
   882  0000A3                     _nb_100ms_Timer_5:
   883                           	opt stack 0
   884  0000A3                     	ds	1
   885  0000A4                     _nb_s_patinage:
   886                           	opt stack 0
   887  0000A4                     	ds	1
   888  0000A5                     _nb_s_fonctionnement:
   889                           	opt stack 0
   890  0000A5                     	ds	1
   891  0000A6                     _nb_s_fonctionnement_souhaiter:
   892                           	opt stack 0
   893  0000A6                     	ds	1
   894  0000A7                     _Alarme:
   895                           	opt stack 0
   896  0000A7                     	ds	1
   897  0000A8                     _Etat:
   898                           	opt stack 0
   899  0000A8                     	ds	1
   900  0000A9                     _Version:
   901                           	opt stack 0
   902  0000A9                     	ds	1
   903  0000AA                     _P4_busy:
   904                           	opt stack 0
   905  0000AA                     	ds	1
   906  0000AB                     _UART_TX_TEXT:
   907                           	opt stack 0
   908  0000AB                     	ds	64
   909  0000EB                     _nb_100ms_platine_backup:
   910                           	opt stack 0
   911  0000EB                     	ds	1
   912                           tblptru	equ	0xFF8
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK1
   920  000100                     __pbssBANK1:
   921                           	opt stack 0
   922  000100                     _SPI_RX_TEXT:
   923                           	opt stack 0
   924  000100                     	ds	64
   925  000140                     _spiTxBuffer:
   926                           	opt stack 0
   927  000140                     	ds	64
   928  000180                     _eusart1TxBuffer:
   929                           	opt stack 0
   930  000180                     	ds	64
   931  0001C0                     _UART_RX_TEXT:
   932                           	opt stack 0
   933  0001C0                     	ds	64
   934                           tblptru	equ	0xFF8
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1h	equ	0xFE2
   939                           fsr1l	equ	0xFE1
   940                           
   941                           	psect	bssBANK2
   942  000200                     __pbssBANK2:
   943                           	opt stack 0
   944  000200                     _spiRxBuffer:
   945                           	opt stack 0
   946  000200                     	ds	64
   947  000240                     _eusart1RxBuffer:
   948                           	opt stack 0
   949  000240                     	ds	64
   950                           tblptru	equ	0xFF8
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1h	equ	0xFE2
   955                           fsr1l	equ	0xFE1
   956                           
   957                           	psect	cstackBANK2
   958  000280                     __pcstackBANK2:
   959                           	opt stack 0
   960  000280                     ??_EUSART1_RX_T3_LOCAL:
   961                           
   962                           ; 1 bytes @ 0x0
   963  000280                     	ds	4
   964  000284                     ??_Check_List_Moteur_Bequille:
   965  000284                     Mouvement_X@type_consigne:
   966                           	opt stack 0
   967  000284                     Mouvement_X_Metalhome@direction:
   968                           	opt stack 0
   969  000284                     delay_s@delay_time:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x4
   973  000284                     	ds	1
   974  000285                     Mouvement_X@option:
   975                           	opt stack 0
   976  000285                     delay_s@Timer_0_Etat_Prealable:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x5
   980  000285                     	ds	1
   981  000286                     Mouvement_Bequille@type_consigne:
   982                           	opt stack 0
   983  000286                     Mouvement_Z@type_consigne:
   984                           	opt stack 0
   985  000286                     Mouvement_X@direction:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x6
   989  000286                     	ds	1
   990  000287                     Mouvement_Bequille@option:
   991                           	opt stack 0
   992  000287                     Mouvement_Z@option:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x7
   996  000287                     	ds	1
   997  000288                     Mouvement_Bequille@direction:
   998                           	opt stack 0
   999  000288                     Mouvement_Z@direction:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x8
  1003  000288                     	ds	1
  1004  000289                     Cycle@i:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x9
  1008  000289                     	ds	1
  1009                           tblptru	equ	0xFF8
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1h	equ	0xFE2
  1014                           fsr1l	equ	0xFE1
  1015                           
  1016                           	psect	cstackBANK0
  1017  0000EC                     __pcstackBANK0:
  1018                           	opt stack 0
  1019  0000EC                     ??_sprintf:
  1020                           
  1021                           ; 1 bytes @ 0x0
  1022  0000EC                     	ds	4
  1023  0000F0                     sprintf@idx:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x4
  1027  0000F0                     	ds	1
  1028  0000F1                     sprintf@ap:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x5
  1032  0000F1                     	ds	1
  1033  0000F2                     sprintf@prec:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x6
  1037  0000F2                     	ds	1
  1038  0000F3                     sprintf@val:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x7
  1042  0000F3                     	ds	2
  1043  0000F5                     sprintf@flag:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x9
  1047  0000F5                     	ds	1
  1048  0000F6                     sprintf@width:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0xA
  1052  0000F6                     	ds	2
  1053  0000F8                     sprintf@c:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0xC
  1057  0000F8                     	ds	1
  1058  0000F9                     EUSART1_RX_T3_LOCAL@Da:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0xD
  1062  0000F9                     	ds	1
  1063  0000FA                     EUSART1_RX_T3_LOCAL@A:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0xE
  1067  0000FA                     	ds	1
  1068  0000FB                     EUSART1_RX_T3_LOCAL@B:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0xF
  1072  0000FB                     	ds	1
  1073  0000FC                     EUSART1_RX_T3_LOCAL@C:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x10
  1077  0000FC                     	ds	1
  1078  0000FD                     EUSART1_RX_T3_LOCAL@D:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x11
  1082  0000FD                     	ds	1
  1083  0000FE                     EUSART1_RX_T3_LOCAL@E:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x12
  1087  0000FE                     	ds	1
  1088  0000FF                     EUSART1_RX_T3_LOCAL@F:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x13
  1092  0000FF                     	ds	1
  1093                           tblptru	equ	0xFF8
  1094                           postinc0	equ	0xFEE
  1095                           wreg	equ	0xFE8
  1096                           postdec1	equ	0xFE5
  1097                           fsr1h	equ	0xFE2
  1098                           fsr1l	equ	0xFE1
  1099                           
  1100                           	psect	cstackCOMRAM
  1101  000001                     __pcstackCOMRAM:
  1102                           	opt stack 0
  1103  000001                     i2Etat_Update@etat_new_value:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x0
  1107  000001                     	ds	1
  1108  000002                     i2Alarme_On@alarme_new_value:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x1
  1112  000002                     	ds	1
  1113  000003                     ??_HIGH_PRIORITY_IRQ:
  1114  000003                     
  1115                           ; 1 bytes @ 0x2
  1116  000003                     	ds	2
  1117  000005                     ??_SPI_ISR:
  1118  000005                     ??_EUSART1_Receive_ISR:
  1119  000005                     ??i1_IRQ_ADC:
  1120  000005                     i1Buzzer_Etat@Activation:
  1121                           	opt stack 0
  1122  000005                     i1Etat_Update@etat_new_value:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x4
  1126  000005                     	ds	1
  1127  000006                     i1Alarme_On@alarme_new_value:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x5
  1131  000006                     	ds	1
  1132  000007                     EUSART1_Receive_ISR@i:
  1133                           	opt stack 0
  1134  000007                     SPI_ISR@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x6
  1138  000007                     	ds	1
  1139  000008                     ??_LOW_PRIORITY_IRQ:
  1140                           
  1141                           ; 1 bytes @ 0x7
  1142  000008                     	ds	7
  1143  00000F                     ??_IRQ_ADC:
  1144  00000F                     ??_delay_100ms:
  1145  00000F                     ??_isdigit:
  1146  00000F                     ?___wmul:
  1147                           	opt stack 0
  1148  00000F                     ?___awmod:
  1149                           	opt stack 0
  1150  00000F                     ?___lwdiv:
  1151                           	opt stack 0
  1152  00000F                     Init_Variable@i:
  1153                           	opt stack 0
  1154  00000F                     Buzzer_Etat@Activation:
  1155                           	opt stack 0
  1156  00000F                     Etat_Intitule@Etat_Number:
  1157                           	opt stack 0
  1158  00000F                     Etat_Update@etat_new_value:
  1159                           	opt stack 0
  1160  00000F                     EUSART1_Buffer_Send@text:
  1161                           	opt stack 0
  1162  00000F                     ___lbdiv@divisor:
  1163                           	opt stack 0
  1164  00000F                     ___wmul@multiplier:
  1165                           	opt stack 0
  1166  00000F                     ___awmod@dividend:
  1167                           	opt stack 0
  1168  00000F                     ___lwdiv@dividend:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0xE
  1172  00000F                     	ds	1
  1173  000010                     delay_n_100ms@nb_100ms:
  1174                           	opt stack 0
  1175  000010                     Alarme_On@alarme_new_value:
  1176                           	opt stack 0
  1177  000010                     _isdigit$3714:
  1178                           	opt stack 0
  1179  000010                     ___lbdiv@dividend:
  1180                           	opt stack 0
  1181  000010                     EUSART1_Buffer_Send@i:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0xF
  1185  000010                     	ds	1
  1186  000011                     delay_n_100ms@i:
  1187                           	opt stack 0
  1188  000011                     isdigit@c:
  1189                           	opt stack 0
  1190  000011                     ___lbdiv@counter:
  1191                           	opt stack 0
  1192  000011                     ___wmul@multiplicand:
  1193                           	opt stack 0
  1194  000011                     ___awmod@divisor:
  1195                           	opt stack 0
  1196  000011                     ___lwdiv@divisor:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x10
  1200  000011                     	ds	1
  1201  000012                     IRQ_Execution@IRQ_Indice:
  1202                           	opt stack 0
  1203  000012                     ___lbdiv@quotient:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x11
  1207  000012                     	ds	1
  1208  000013                     ___awmod@counter:
  1209                           	opt stack 0
  1210  000013                     ___lwdiv@counter:
  1211                           	opt stack 0
  1212  000013                     ___wmul@product:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x12
  1216  000013                     	ds	1
  1217  000014                     ___awmod@sign:
  1218                           	opt stack 0
  1219  000014                     ___lwdiv@quotient:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x13
  1223  000014                     	ds	1
  1224  000015                     ??_Etat_Get:
  1225                           
  1226                           ; 1 bytes @ 0x14
  1227  000015                     	ds	1
  1228  000016                     ?___lwmod:
  1229                           	opt stack 0
  1230  000016                     ___lwmod@dividend:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x15
  1234  000016                     	ds	1
  1235  000017                     Etat_Get@Etat_Indice:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x16
  1239  000017                     	ds	1
  1240  000018                     ___lwmod@divisor:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x17
  1244  000018                     	ds	2
  1245  00001A                     ___lwmod@counter:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x19
  1249  00001A                     	ds	1
  1250  00001B                     ?_sprintf:
  1251                           	opt stack 0
  1252  00001B                     sprintf@sp:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x1A
  1256  00001B                     	ds	1
  1257  00001C                     sprintf@f:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x1B
  1261  00001C                     	ds	36
  1262  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x3F
  1266  000040                     	ds	1
  1267  000041                     EUSART1_RX_T3_LOCAL@i:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x40
  1271  000041                     	ds	2
  1272  000043                     tblptru	equ	0xFF8
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           postdec1	equ	0xFE5
  1276                           fsr1h	equ	0xFE2
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 1 bytes @ 0x42
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 595 in file "MOTEUR.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 3F/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1299 ;;      Params:         0       0       0       0
  1300 ;;      Locals:         0       0       0       0
  1301 ;;      Temps:          0       0       0       0
  1302 ;;      Totals:         0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels required when called:   20
  1305 ;; This function calls:
  1306 ;;		_Cycle
  1307 ;;		_EUSART1_Initialize
  1308 ;;		_Init_ADC
  1309 ;;		_Init_IT
  1310 ;;		_Init_Metalhome
  1311 ;;		_Init_PWM
  1312 ;;		_Init_Port
  1313 ;;		_Init_SPI
  1314 ;;		_Init_TIMER0
  1315 ;;		_Init_TIMER2
  1316 ;;		_Init_TIMER5
  1317 ;;		_Init_Variable
  1318 ;; This function is called by:
  1319 ;;		Startup code after reset
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text0
  1324  001D7E                     __ptext0:
  1325                           	opt stack 0
  1326  001D7E                     _main:
  1327                           	opt stack 11
  1328                           
  1329                           ;MOTEUR.c: 597: OSCCON = 0b01110000;
  1330                           
  1331                           ;incstack = 0
  1332  001D7E  0E70               	movlw	112
  1333  001D80  6ED3               	movwf	4051,c	;volatile
  1334  001D82                     l286:
  1335  001D82  A4D3               	btfss	4051,2,c	;volatile
  1336  001D84  D7FE               	goto	l286
  1337                           
  1338                           ;MOTEUR.c: 608: Init_Variable();
  1339  001D86  EC1C  F00A         	call	_Init_Variable	;wreg free
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;MOTEUR.c: 612: Init_Port();
  1343  001D8A  EC5C  F00C         	call	_Init_Port	;wreg free
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;MOTEUR.c: 647: Init_IT();
  1347  001D8E  ECFA  F00E         	call	_Init_IT	;wreg free
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;MOTEUR.c: 666: EUSART1_Initialize();
  1351  001D92  EC0D  F00E         	call	_EUSART1_Initialize	;wreg free
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;MOTEUR.c: 667: Init_SPI();
  1355  001D96  EC47  F010         	call	_Init_SPI	;wreg free
  1356                           
  1357                           ;MOTEUR.c: 671: Init_ADC();
  1358  001D9A  EC7A  F010         	call	_Init_ADC	;wreg free
  1359                           
  1360                           ;MOTEUR.c: 673: Init_TIMER0();
  1361  001D9E  EC6A  F010         	call	_Init_TIMER0	;wreg free
  1362                           
  1363                           ;MOTEUR.c: 674: Init_TIMER2();
  1364  001DA2  ECD3  F010         	call	_Init_TIMER2	;wreg free
  1365                           
  1366                           ;MOTEUR.c: 675: Init_TIMER5();
  1367  001DA6  ECD2  F00F         	call	_Init_TIMER5	;wreg free
  1368                           
  1369                           ;MOTEUR.c: 678: Init_PWM();
  1370  001DAA  ECB7  F010         	call	_Init_PWM	;wreg free
  1371                           
  1372                           ;MOTEUR.c: 739: Init_Metalhome();
  1373  001DAE  ECDC  F011         	call	_Init_Metalhome	;wreg free
  1374                           
  1375                           ;MOTEUR.c: 740: Cycle();
  1376  001DB2  ECC9  F005         	call	_Cycle	;wreg free
  1377                           
  1378                           ; BSR set to: 0
  1379  001DB6  EF6B  F000         	goto	start
  1380  001DBA                     __end_of_main:
  1381                           	opt stack 0
  1382                           tblptru	equ	0xFF8
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           
  1389 ;; *************** function _Init_Variable *****************
  1390 ;; Defined at:
  1391 ;;		line 143 in file "MOTEUR.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  i               1   14[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 3F/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1405 ;;      Params:         0       0       0       0
  1406 ;;      Locals:         1       0       0       0
  1407 ;;      Temps:          0       0       0       0
  1408 ;;      Totals:         1       0       0       0
  1409 ;;Total ram usage:        1 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:   11
  1412 ;; This function calls:
  1413 ;;		_Detection_Pion_Init
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text1
  1420  001438                     __ptext1:
  1421                           	opt stack 0
  1422  001438                     _Init_Variable:
  1423                           	opt stack 19
  1424                           
  1425                           ;MOTEUR.c: 175: Batterie_mV = 0;
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;incstack = 0
  1429  001438  0E0A               	movlw	10
  1430  00143A  0100               	movlb	0	; () banked
  1431  00143C  6FA9               	movwf	_Version& (0+255),b
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;MOTEUR.c: 178: unsigned char i;
  1435                           ;MOTEUR.c: 180: for (i = 0; i < 10; i++) {
  1436  00143E  6A0F               	clrf	Init_Variable@i,c
  1437  001440                     l8452:
  1438                           
  1439                           ;MOTEUR.c: 181: Etat_Log[i] = 255;
  1440  001440  500F               	movf	Init_Variable@i,w,c
  1441  001442  0F6A               	addlw	low _Etat_Log
  1442  001444  6ED9               	movwf	fsr2l,c
  1443  001446  6ADA               	clrf	fsr2h,c
  1444  001448  68DF               	setf	indf2,c
  1445  00144A  2A0F               	incf	Init_Variable@i,f,c
  1446  00144C  0E09               	movlw	9
  1447  00144E  640F               	cpfsgt	Init_Variable@i,c
  1448  001450  D7F7               	goto	l8452
  1449                           
  1450                           ;MOTEUR.c: 184: }
  1451                           ;MOTEUR.c: 186: Etat_Precedent_Index = 0;
  1452  001452  6A4D               	clrf	_Etat_Precedent_Index,c
  1453                           
  1454                           ;MOTEUR.c: 187: Etat = 255;
  1455  001454  0100               	movlb	0	; () banked
  1456  001456  69A8               	setf	_Etat& (0+255),b	;volatile
  1457                           
  1458                           ;MOTEUR.c: 190: Alarme = 0;
  1459  001458  6BA7               	clrf	_Alarme& (0+255),b	;volatile
  1460                           
  1461                           ;MOTEUR.c: 192: nb_s_fonctionnement_souhaiter = 0;
  1462  00145A  6BA6               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1463                           
  1464                           ;MOTEUR.c: 193: nb_s_fonctionnement = 0;
  1465  00145C  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;MOTEUR.c: 196: nb_s_patinage = 90;
  1469  00145E  0E5A               	movlw	90
  1470  001460  6FA4               	movwf	_nb_s_patinage& (0+255),b
  1471                           
  1472                           ;MOTEUR.c: 197: nb_s_patinage = 45;
  1473  001462  0E2D               	movlw	45
  1474  001464  6FA4               	movwf	_nb_s_patinage& (0+255),b
  1475                           
  1476                           ;MOTEUR.c: 198: nb_s_patinage = 50;
  1477  001466  0E32               	movlw	50
  1478  001468  6FA4               	movwf	_nb_s_patinage& (0+255),b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;MOTEUR.c: 201: nb_100ms_Timer_5 = 0;
  1482  00146A  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1483                           
  1484                           ;MOTEUR.c: 203: nb_100ms_pion = 2;
  1485  00146C  0E02               	movlw	2
  1486  00146E  6FA2               	movwf	_nb_100ms_pion& (0+255),b
  1487                           
  1488                           ;MOTEUR.c: 204: nb_100ms_platine = 30;
  1489  001470  0E1E               	movlw	30
  1490  001472  6FA1               	movwf	_nb_100ms_platine& (0+255),b
  1491                           
  1492                           ;MOTEUR.c: 206: nb_s_pelle = 30;
  1493  001474  6FA0               	movwf	_nb_s_pelle& (0+255),b
  1494                           
  1495                           ;MOTEUR.c: 207: nb_s_bequille = 10;
  1496  001476  0E0A               	movlw	10
  1497  001478  6E4C               	movwf	_nb_s_bequille,c
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;MOTEUR.c: 209: Detecteur_Pion = 0;
  1501  00147A  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;MOTEUR.c: 210: nb_Pion = 0;
  1505  00147C  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;MOTEUR.c: 211: nb_Pion_Objectif = 0;
  1509  00147E  6B9E               	clrf	_nb_Pion_Objectif& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;MOTEUR.c: 212: Mouvement_Startup = 0;
  1513  001480  6A4E               	clrf	_Mouvement_Startup,c
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;MOTEUR.c: 214: delay_s_counter = 0;
  1517  001482  6B8A               	clrf	_delay_s_counter& (0+255),b	;volatile
  1518                           
  1519                           ;MOTEUR.c: 216: moteur_indice = 1;
  1520  001484  0E01               	movlw	1
  1521  001486  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;MOTEUR.c: 217: consigne = 0;
  1525  001488  6B95               	clrf	_consigne& (0+255),b	;volatile
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;MOTEUR.c: 218: direction = 0;
  1529  00148A  6B8D               	clrf	_direction& (0+255),b	;volatile
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;MOTEUR.c: 219: mouvement_option = 0;
  1533  00148C  6B8E               	clrf	_mouvement_option& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;MOTEUR.c: 220: Option_Multitas = 0;
  1537  00148E  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;MOTEUR.c: 221: type_consigne = 0;
  1541  001490  6B8F               	clrf	_type_consigne& (0+255),b
  1542                           
  1543                           ;MOTEUR.c: 222: Consigne_Max = 20 * 5;
  1544  001492  0E64               	movlw	100
  1545  001494  6F94               	movwf	_Consigne_Max& (0+255),b	;volatile
  1546                           
  1547                           ;MOTEUR.c: 223: Consigne_Max_Moteur_X = 20 * 5;
  1548  001496  6F93               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1549                           
  1550                           ;MOTEUR.c: 224: Consigne_Max_Moteur_Z = 20 * 5;
  1551  001498  6F92               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1552                           
  1553                           ;MOTEUR.c: 227: Moteur_I_Max = 100;
  1554  00149A  6F91               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1555                           
  1556                           ;MOTEUR.c: 228: Pelle_I_Max = 45;
  1557  00149C  0E2D               	movlw	45
  1558  00149E  6F90               	movwf	_Pelle_I_Max& (0+255),b
  1559                           
  1560                           ;MOTEUR.c: 229: Bequille_I_Max = 22;
  1561  0014A0  0E16               	movlw	22
  1562  0014A2  6E4A               	movwf	_Bequille_I_Max,c
  1563                           
  1564                           ;MOTEUR.c: 232: Consigne_en_A = 4;
  1565  0014A4  0E04               	movlw	4
  1566  0014A6  6E4B               	movwf	_Consigne_en_A,c
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;MOTEUR.c: 233: consigne = (char) (Consigne_en_A * 5);
  1570  0014A8  504B               	movf	_Consigne_en_A,w,c
  1571  0014AA  0D05               	mullw	5
  1572  0014AC  CFF3 F095          	movff	prodl,_consigne	;volatile
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;MOTEUR.c: 236: Patinage_Nb_Essai_Autoriser = 3;
  1576  0014B0  0E03               	movlw	3
  1577  0014B2  6F99               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;MOTEUR.c: 237: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1581  0014B4  6F9C               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser& (0+255),b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;MOTEUR.c: 238: Capteur_Capot_Compteur_Temps_S = 0;
  1585  0014B6  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;MOTEUR.c: 239: Patinage_Nb_Essai = 0;
  1589  0014B8  6B9A               	clrf	_Patinage_Nb_Essai& (0+255),b
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;MOTEUR.c: 240: Capteur_Capot_Nb_Evenement = 0;
  1593  0014BA  6B9D               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;MOTEUR.c: 246: consigne_moteur_3 = 50;
  1597  0014BC  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;MOTEUR.c: 248: Surveillance_Consommation_Moteur_1 = 0;
  1601  0014BE  6A49               	clrf	_Surveillance_Consommation_Moteur_1,c
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;MOTEUR.c: 249: Surveillance_Consommation_Moteur_2 = 0;
  1605  0014C0  6A48               	clrf	_Surveillance_Consommation_Moteur_2,c
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;MOTEUR.c: 251: Detection_Pion_Init();
  1609  0014C2  EC9D  F011         	call	_Detection_Pion_Init	;wreg free
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;MOTEUR.c: 259: Compteur_IRQ_I_Moteur_1 = 0;
  1613  0014C6  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;MOTEUR.c: 260: Compteur_IRQ_I_Moteur_2 = 0;
  1617  0014C8  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;MOTEUR.c: 277: DVT_Compteur = 0;
  1621  0014CA  6BAA               	clrf	_P4_busy& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;MOTEUR.c: 279: DVT_Tableau_Pause[0] = 9;
  1625  0014CC  0E09               	movlw	9
  1626  0014CE  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;MOTEUR.c: 280: DVT_Tableau_Pause[1] = 7;
  1630  0014D0  0E07               	movlw	7
  1631  0014D2  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;MOTEUR.c: 281: DVT_Tableau_Pause[2] = 6;
  1635  0014D4  0E06               	movlw	6
  1636  0014D6  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;MOTEUR.c: 282: DVT_Tableau_Pause[3] = 5;
  1640  0014D8  0E05               	movlw	5
  1641  0014DA  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;MOTEUR.c: 283: DVT_Tableau_Pause[4] = 4;
  1645  0014DC  0E04               	movlw	4
  1646  0014DE  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;MOTEUR.c: 293: Multitas_Courant_Max = 20 * 5 ;
  1650  0014E0  0E03               	movlw	3
  1651  0014E2  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;MOTEUR.c: 296: UART_TEST = 0;
  1655  0014E4  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;MOTEUR.c: 297: RX1_ABR = 0;
  1659  0014E6  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;MOTEUR.c: 298: RX1_full = 0;
  1663  0014E8  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;MOTEUR.c: 299: SPI_full = 0;
  1667  0014EA  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;MOTEUR.c: 301: spiRxIndex = 0;
  1671  0014EC  6A43               	clrf	_spiRxIndex,c	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;MOTEUR.c: 302: spiTxIndex = 0;
  1675  0014EE  6A44               	clrf	_spiTxIndex,c	;volatile
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;MOTEUR.c: 303: SPI_MODE = 0;
  1679  0014F0  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1680                           
  1681                           ; BSR set to: 0
  1682  0014F2  0012               	return		;funcret
  1683  0014F4                     __end_of_Init_Variable:
  1684                           	opt stack 0
  1685                           tblptru	equ	0xFF8
  1686                           prodl	equ	0xFF3
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1h	equ	0xFE2
  1691                           fsr1l	equ	0xFE1
  1692                           indf2	equ	0xFDF
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           
  1696 ;; *************** function _Init_TIMER5 *****************
  1697 ;; Defined at:
  1698 ;;		line 183 in file "timer.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1712 ;;      Params:         0       0       0       0
  1713 ;;      Locals:         0       0       0       0
  1714 ;;      Temps:          0       0       0       0
  1715 ;;      Totals:         0       0       0       0
  1716 ;;Total ram usage:        0 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:   10
  1719 ;; This function calls:
  1720 ;;		Nothing
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text2
  1727  001FA4                     __ptext2:
  1728                           	opt stack 0
  1729  001FA4                     _Init_TIMER5:
  1730                           	opt stack 20
  1731                           
  1732                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;incstack = 0
  1736  001FA4  9EB7               	bcf	4023,7,c	;volatile
  1737                           
  1738                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1739  001FA6  8CB7               	bsf	4023,6,c	;volatile
  1740                           
  1741                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1742  001FA8  9AB7               	bcf	4023,5,c	;volatile
  1743                           
  1744                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1745  001FAA  0E18               	movlw	24
  1746  001FAC  12B7               	iorwf	4023,f,c	;volatile
  1747                           
  1748                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1749  001FAE  84B7               	bsf	4023,2,c	;volatile
  1750                           
  1751                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1752  001FB0  92B7               	bcf	4023,1,c	;volatile
  1753                           
  1754                           ;timer.c: 218: TMR5L = 0;
  1755  001FB2  6A87               	clrf	3975,c	;volatile
  1756                           
  1757                           ;timer.c: 219: TMR5H = 0;
  1758  001FB4  6A88               	clrf	3976,c	;volatile
  1759                           
  1760                           ;timer.c: 221: PR5H = 0x61;
  1761  001FB6  0E61               	movlw	97
  1762  001FB8  6E91               	movwf	3985,c	;volatile
  1763                           
  1764                           ;timer.c: 222: PR5L = 0xA8;
  1765  001FBA  0EA8               	movlw	168
  1766  001FBC  6E90               	movwf	3984,c	;volatile
  1767                           
  1768                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1769  001FBE  90B7               	bcf	4023,0,c	;volatile
  1770                           
  1771                           ;timer.c: 228: TMR5L = 0;
  1772  001FC0  6A87               	clrf	3975,c	;volatile
  1773                           
  1774                           ;timer.c: 229: TMR5H = 0;
  1775  001FC2  6A88               	clrf	3976,c	;volatile
  1776                           
  1777                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1778  001FC4  90A5               	bcf	4005,0,c	;volatile
  1779                           
  1780                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1781  001FC6  80A3               	bsf	4003,0,c	;volatile
  1782                           
  1783                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1784  001FC8  90A4               	bcf	4004,0,c	;volatile
  1785  001FCA  0012               	return		;funcret
  1786  001FCC                     __end_of_Init_TIMER5:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           prodl	equ	0xFF3
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postdec1	equ	0xFE5
  1793                           fsr1h	equ	0xFE2
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           
  1799 ;; *************** function _Init_TIMER2 *****************
  1800 ;; Defined at:
  1801 ;;		line 133 in file "timer.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1815 ;;      Params:         0       0       0       0
  1816 ;;      Locals:         0       0       0       0
  1817 ;;      Temps:          0       0       0       0
  1818 ;;      Totals:         0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:   10
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text3
  1830  0021A6                     __ptext3:
  1831                           	opt stack 0
  1832  0021A6                     _Init_TIMER2:
  1833                           	opt stack 20
  1834                           
  1835                           ;timer.c: 138: T2CON = 0b00100100;
  1836                           
  1837                           ;incstack = 0
  1838  0021A6  0E24               	movlw	36
  1839  0021A8  6ECA               	movwf	4042,c	;volatile
  1840                           
  1841                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1842  0021AA  50CA               	movf	4042,w,c	;volatile
  1843  0021AC  0B87               	andlw	-121
  1844  0021AE  0940               	iorlw	64
  1845  0021B0  6ECA               	movwf	4042,c	;volatile
  1846                           
  1847                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1848  0021B2  0EFC               	movlw	-4
  1849  0021B4  16CA               	andwf	4042,f,c	;volatile
  1850                           
  1851                           ;timer.c: 149: PR2 = 200;
  1852  0021B6  0EC8               	movlw	200
  1853  0021B8  6ECB               	movwf	4043,c	;volatile
  1854                           
  1855                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1856  0021BA  929F               	bcf	3999,1,c	;volatile
  1857                           
  1858                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1859  0021BC  829F               	bsf	3999,1,c	;volatile
  1860  0021BE  0CC8               	retlw	200	;funcret
  1861  0021C0                     __end_of_Init_TIMER2:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           prodl	equ	0xFF3
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1h	equ	0xFE2
  1869                           fsr1l	equ	0xFE1
  1870                           indf2	equ	0xFDF
  1871                           fsr2h	equ	0xFDA
  1872                           fsr2l	equ	0xFD9
  1873                           
  1874 ;; *************** function _Init_TIMER0 *****************
  1875 ;; Defined at:
  1876 ;;		line 21 in file "timer.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1890 ;;      Params:         0       0       0       0
  1891 ;;      Locals:         0       0       0       0
  1892 ;;      Temps:          0       0       0       0
  1893 ;;      Totals:         0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:   10
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_main
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text4
  1905  0020D4                     __ptext4:
  1906                           	opt stack 0
  1907  0020D4                     _Init_TIMER0:
  1908                           	opt stack 20
  1909                           
  1910                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  1911                           
  1912                           ;incstack = 0
  1913  0020D4  9ED5               	bcf	4053,7,c	;volatile
  1914                           
  1915                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  1916  0020D6  9CD5               	bcf	4053,6,c	;volatile
  1917                           
  1918                           ;timer.c: 33: T0CONbits.T0CS = 0;
  1919  0020D8  9AD5               	bcf	4053,5,c	;volatile
  1920                           
  1921                           ;timer.c: 37: T0CONbits.T0SE = 0;
  1922  0020DA  98D5               	bcf	4053,4,c	;volatile
  1923                           
  1924                           ;timer.c: 41: T0CONbits.PSA = 0;
  1925  0020DC  96D5               	bcf	4053,3,c	;volatile
  1926                           
  1927                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  1928  0020DE  0E07               	movlw	7
  1929  0020E0  12D5               	iorwf	4053,f,c	;volatile
  1930                           
  1931                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  1932  0020E2  12D5               	iorwf	4053,f,c	;volatile
  1933                           
  1934                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  1935  0020E4  50D5               	movf	4053,w,c	;volatile
  1936  0020E6  0BF8               	andlw	-8
  1937  0020E8  0904               	iorlw	4
  1938  0020EA  6ED5               	movwf	4053,c	;volatile
  1939                           
  1940                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  1941  0020EC  94F1               	bcf	intcon2,2,c	;volatile
  1942                           
  1943                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  1944  0020EE  9AF2               	bcf	intcon,5,c	;volatile
  1945                           
  1946                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  1947  0020F0  94F2               	bcf	intcon,2,c	;volatile
  1948  0020F2  0012               	return		;funcret
  1949  0020F4                     __end_of_Init_TIMER0:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           prodl	equ	0xFF3
  1953                           intcon	equ	0xFF2
  1954                           intcon2	equ	0xFF1
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postdec1	equ	0xFE5
  1958                           fsr1h	equ	0xFE2
  1959                           fsr1l	equ	0xFE1
  1960                           indf2	equ	0xFDF
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           
  1964 ;; *************** function _Init_SPI *****************
  1965 ;; Defined at:
  1966 ;;		line 24 in file "spi.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2
  1975 ;; Tracked objects:
  1976 ;;		On entry : 3F/0
  1977 ;;		On exit  : 3F/0
  1978 ;;		Unchanged: 3F/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1980 ;;      Params:         0       0       0       0
  1981 ;;      Locals:         0       0       0       0
  1982 ;;      Temps:          0       0       0       0
  1983 ;;      Totals:         0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:   10
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text5
  1995  00208E                     __ptext5:
  1996                           	opt stack 0
  1997  00208E                     _Init_SPI:
  1998                           	opt stack 20
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  2002                           
  2003                           ;incstack = 0
  2004  00208E  8695               	bsf	3989,3,c	;volatile
  2005                           
  2006                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2007  002090  8495               	bsf	3989,2,c	;volatile
  2008                           
  2009                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2010  002092  9295               	bcf	3989,1,c	;volatile
  2011                           
  2012                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2013  002094  9EC7               	bcf	4039,7,c	;volatile
  2014                           
  2015                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2016  002096  9CC7               	bcf	4039,6,c	;volatile
  2017                           
  2018                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2019  002098  8CC7               	bsf	4039,6,c	;volatile
  2020                           
  2021                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2022  00209A  9EC6               	bcf	4038,7,c	;volatile
  2023                           
  2024                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2025  00209C  9CC6               	bcf	4038,6,c	;volatile
  2026                           
  2027                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2028  00209E  8AC6               	bsf	4038,5,c	;volatile
  2029                           
  2030                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2031  0020A0  88C6               	bsf	4038,4,c	;volatile
  2032                           
  2033                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2034  0020A2  98C6               	bcf	4038,4,c	;volatile
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2038  0020A4  50C6               	movf	4038,w,c	;volatile
  2039  0020A6  0BF0               	andlw	-16
  2040  0020A8  0905               	iorlw	5
  2041  0020AA  6EC6               	movwf	4038,c	;volatile
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2045  0020AC  969E               	bcf	3998,3,c	;volatile
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2049  0020AE  869D               	bsf	3997,3,c	;volatile
  2050                           
  2051                           ; BSR set to: 0
  2052  0020B0  0012               	return		;funcret
  2053  0020B2                     __end_of_Init_SPI:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           prodl	equ	0xFF3
  2057                           intcon	equ	0xFF2
  2058                           intcon2	equ	0xFF1
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           
  2068 ;; *************** function _Init_Port *****************
  2069 ;; Defined at:
  2070 ;;		line 14 in file "init.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2
  2079 ;; Tracked objects:
  2080 ;;		On entry : 3F/0
  2081 ;;		On exit  : 3F/0
  2082 ;;		Unchanged: 3F/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2084 ;;      Params:         0       0       0       0
  2085 ;;      Locals:         0       0       0       0
  2086 ;;      Temps:          0       0       0       0
  2087 ;;      Totals:         0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:   10
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text6
  2099  0018B8                     __ptext6:
  2100                           	opt stack 0
  2101  0018B8                     _Init_Port:
  2102                           	opt stack 20
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;init.c: 24: TRISA = 0b11111111;
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;incstack = 0
  2109  0018B8  6892               	setf	3986,c	;volatile
  2110                           
  2111                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2112  0018BA  8092               	bsf	3986,0,c	;volatile
  2113                           
  2114                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2115  0018BC  8292               	bsf	3986,1,c	;volatile
  2116                           
  2117                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2118  0018BE  8492               	bsf	3986,2,c	;volatile
  2119                           
  2120                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2121  0018C0  8692               	bsf	3986,3,c	;volatile
  2122                           
  2123                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2124  0018C2  8892               	bsf	3986,4,c	;volatile
  2125                           
  2126                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2127  0018C4  8A92               	bsf	3986,5,c	;volatile
  2128                           
  2129                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2130  0018C6  9C92               	bcf	3986,6,c	;volatile
  2131                           
  2132                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2133  0018C8  8E92               	bsf	3986,7,c	;volatile
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;init.c: 33: TRISB = 0b11111010;
  2137  0018CA  0EFA               	movlw	250
  2138  0018CC  6E93               	movwf	3987,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2142  0018CE  9093               	bcf	3987,0,c	;volatile
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2146  0018D0  8293               	bsf	3987,1,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2150  0018D2  9493               	bcf	3987,2,c	;volatile
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2154  0018D4  8693               	bsf	3987,3,c	;volatile
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2158  0018D6  8893               	bsf	3987,4,c	;volatile
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2162  0018D8  8A93               	bsf	3987,5,c	;volatile
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2166  0018DA  8C93               	bsf	3987,6,c	;volatile
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2170  0018DC  8E93               	bsf	3987,7,c	;volatile
  2171                           
  2172                           ;init.c: 42: TRISC = 0b11011100;
  2173  0018DE  0EDC               	movlw	220
  2174  0018E0  6E94               	movwf	3988,c	;volatile
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2178  0018E2  9094               	bcf	3988,0,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2182  0018E4  9294               	bcf	3988,1,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2186  0018E6  9494               	bcf	3988,2,c	;volatile
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2190  0018E8  8694               	bsf	3988,3,c	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2194  0018EA  8894               	bsf	3988,4,c	;volatile
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2198  0018EC  8A94               	bsf	3988,5,c	;volatile
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2202  0018EE  9C94               	bcf	3988,6,c	;volatile
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2206  0018F0  8E94               	bsf	3988,7,c	;volatile
  2207                           
  2208                           ;init.c: 51: TRISD = 0b00001111;
  2209  0018F2  0E0F               	movlw	15
  2210  0018F4  6E95               	movwf	3989,c	;volatile
  2211                           
  2212                           ;init.c: 52: TRISD = 0b00000111;
  2213  0018F6  0E07               	movlw	7
  2214  0018F8  6E95               	movwf	3989,c	;volatile
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2218  0018FA  8095               	bsf	3989,0,c	;volatile
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2222  0018FC  8295               	bsf	3989,1,c	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2226  0018FE  8495               	bsf	3989,2,c	;volatile
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2230  001900  9695               	bcf	3989,3,c	;volatile
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2234  001902  9895               	bcf	3989,4,c	;volatile
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2238  001904  9A95               	bcf	3989,5,c	;volatile
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2242  001906  9C95               	bcf	3989,6,c	;volatile
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2246  001908  9E95               	bcf	3989,7,c	;volatile
  2247                           
  2248                           ;init.c: 62: TRISE = 0b00000111;
  2249  00190A  6E96               	movwf	3990,c	;volatile
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2253  00190C  8096               	bsf	3990,0,c	;volatile
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2257  00190E  8296               	bsf	3990,1,c	;volatile
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2261  001910  9496               	bcf	3990,2,c	;volatile
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;init.c: 78: LATA = 0b00000000;
  2265  001912  6A89               	clrf	3977,c	;volatile
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;init.c: 79: LATB = 0b00000000;
  2269  001914  6A8A               	clrf	3978,c	;volatile
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;init.c: 80: LATC = 0b00000000;
  2273  001916  6A8B               	clrf	3979,c	;volatile
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;init.c: 81: LATD = 0b00000000;
  2277  001918  6A8C               	clrf	3980,c	;volatile
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;init.c: 82: LATE = 0b00000000;
  2281  00191A  6A8D               	clrf	3981,c	;volatile
  2282                           
  2283                           ; BSR set to: 0
  2284  00191C  0012               	return		;funcret
  2285  00191E                     __end_of_Init_Port:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           prodl	equ	0xFF3
  2289                           intcon	equ	0xFF2
  2290                           intcon2	equ	0xFF1
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1h	equ	0xFE2
  2295                           fsr1l	equ	0xFE1
  2296                           indf2	equ	0xFDF
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           
  2300 ;; *************** function _Init_PWM *****************
  2301 ;; Defined at:
  2302 ;;		line 14 in file "pwm.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2316 ;;      Params:         0       0       0       0
  2317 ;;      Locals:         0       0       0       0
  2318 ;;      Temps:          0       0       0       0
  2319 ;;      Totals:         0       0       0       0
  2320 ;;Total ram usage:        0 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:   10
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text7
  2331  00216E                     __ptext7:
  2332                           	opt stack 0
  2333  00216E                     _Init_PWM:
  2334                           	opt stack 20
  2335                           
  2336                           ;pwm.c: 15: PTPERL = 99;
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;incstack = 0
  2340  00216E  0E63               	movlw	99
  2341  002170  6E7B               	movwf	3963,c	;volatile
  2342                           
  2343                           ;pwm.c: 16: PTPERH = 0;
  2344  002172  6A7A               	clrf	3962,c	;volatile
  2345                           
  2346                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2347  002174  6A7F               	clrf	3967,c	;volatile
  2348                           
  2349                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2350  002176  0E80               	movlw	128
  2351  002178  6E7E               	movwf	3966,c	;volatile
  2352                           
  2353                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2354  00217A  0E3F               	movlw	63
  2355  00217C  6E6F               	movwf	3951,c	;volatile
  2356                           
  2357                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2358  00217E  6A6E               	clrf	3950,c	;volatile
  2359                           
  2360                           ;pwm.c: 25: DTCON = 0b00000000;
  2361  002180  6A6D               	clrf	3949,c	;volatile
  2362                           
  2363                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2364  002182  0E05               	movlw	5
  2365  002184  6E6B               	movwf	3947,c	;volatile
  2366                           
  2367                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2368  002186  6A6A               	clrf	3946,c	;volatile
  2369  002188  0012               	return		;funcret
  2370  00218A                     __end_of_Init_PWM:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           prodl	equ	0xFF3
  2374                           intcon	equ	0xFF2
  2375                           intcon2	equ	0xFF1
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           postdec1	equ	0xFE5
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           
  2385 ;; *************** function _Init_Metalhome *****************
  2386 ;; Defined at:
  2387 ;;		line 579 in file "MOTEUR.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		None
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2401 ;;      Params:         0       0       0       0
  2402 ;;      Locals:         0       0       0       0
  2403 ;;      Temps:          0       0       0       0
  2404 ;;      Totals:         0       0       0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:   10
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_main
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text8
  2416  0023B8                     __ptext8:
  2417                           	opt stack 0
  2418  0023B8                     _Init_Metalhome:
  2419                           	opt stack 20
  2420                           
  2421                           ;MOTEUR.c: 581: INTCONbits.INT0IE = 1;
  2422                           
  2423                           ;incstack = 0
  2424  0023B8  88F2               	bsf	intcon,4,c	;volatile
  2425                           
  2426                           ;MOTEUR.c: 582: INTCONbits.INT0IF = 0;
  2427  0023BA  92F2               	bcf	intcon,1,c	;volatile
  2428                           
  2429                           ;MOTEUR.c: 584: PIR3bits.IC1IF = 0;
  2430  0023BC  92A4               	bcf	4004,1,c	;volatile
  2431                           
  2432                           ;MOTEUR.c: 585: PIE3bits.IC1IE = 1;
  2433  0023BE  82A3               	bsf	4003,1,c	;volatile
  2434  0023C0  0012               	return		;funcret
  2435  0023C2                     __end_of_Init_Metalhome:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           prodl	equ	0xFF3
  2439                           intcon	equ	0xFF2
  2440                           intcon2	equ	0xFF1
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           fsr1h	equ	0xFE2
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           
  2450 ;; *************** function _Init_IT *****************
  2451 ;; Defined at:
  2452 ;;		line 70 in file "interrupt.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 3F/0
  2463 ;;		On exit  : 3F/0
  2464 ;;		Unchanged: 3F/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2466 ;;      Params:         0       0       0       0
  2467 ;;      Locals:         0       0       0       0
  2468 ;;      Temps:          0       0       0       0
  2469 ;;      Totals:         0       0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:   11
  2473 ;; This function calls:
  2474 ;;		_Init_Input_Capture_0
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text9
  2481  001DF4                     __ptext9:
  2482                           	opt stack 0
  2483  001DF4                     _Init_IT:
  2484                           	opt stack 19
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2488                           
  2489                           ;incstack = 0
  2490  001DF4  8EF2               	bsf	intcon,7,c	;volatile
  2491                           
  2492                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2493  001DF6  8CF2               	bsf	intcon,6,c	;volatile
  2494                           
  2495                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2496  001DF8  9AF2               	bcf	intcon,5,c	;volatile
  2497                           
  2498                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2499  001DFA  98F2               	bcf	intcon,4,c	;volatile
  2500                           
  2501                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2502  001DFC  96F2               	bcf	intcon,3,c	;volatile
  2503                           
  2504                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2505  001DFE  94F2               	bcf	intcon,2,c	;volatile
  2506                           
  2507                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2508  001E00  92F2               	bcf	intcon,1,c	;volatile
  2509                           
  2510                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2511  001E02  90F2               	bcf	intcon,0,c	;volatile
  2512                           
  2513                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2514  001E04  8EF1               	bsf	intcon2,7,c	;volatile
  2515                           
  2516                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2517  001E06  8CF1               	bsf	intcon2,6,c	;volatile
  2518                           
  2519                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2520  001E08  9CF1               	bcf	intcon2,6,c	;volatile
  2521                           
  2522                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2523  001E0A  8AF1               	bsf	intcon2,5,c	;volatile
  2524                           
  2525                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2526  001E0C  88F1               	bsf	intcon2,4,c	;volatile
  2527                           
  2528                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2529  001E0E  94F1               	bcf	intcon2,2,c	;volatile
  2530                           
  2531                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2532  001E10  90F1               	bcf	intcon2,0,c	;volatile
  2533                           
  2534                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2535  001E12  8EF0               	bsf	intcon3,7,c	;volatile
  2536                           
  2537                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2538  001E14  8CF0               	bsf	intcon3,6,c	;volatile
  2539                           
  2540                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2541  001E16  98F0               	bcf	intcon3,4,c	;volatile
  2542                           
  2543                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2544  001E18  96F0               	bcf	intcon3,3,c	;volatile
  2545                           
  2546                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2547  001E1A  92F0               	bcf	intcon3,1,c	;volatile
  2548                           
  2549                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2550  001E1C  90F0               	bcf	intcon3,0,c	;volatile
  2551                           
  2552                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2553  001E1E  8ED0               	bsf	4048,7,c	;volatile
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;interrupt.c: 125: Init_Input_Capture_0();
  2557  001E20  EC59  F010         	call	_Init_Input_Capture_0	;wreg free
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2561  001E24  969F               	bcf	3999,3,c	;volatile
  2562                           
  2563                           ; BSR set to: 0
  2564  001E26  0012               	return		;funcret
  2565  001E28                     __end_of_Init_IT:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           prodl	equ	0xFF3
  2569                           intcon	equ	0xFF2
  2570                           intcon2	equ	0xFF1
  2571                           intcon3	equ	0xFF0
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postdec1	equ	0xFE5
  2575                           fsr1h	equ	0xFE2
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           
  2581 ;; *************** function _Init_Input_Capture_0 *****************
  2582 ;; Defined at:
  2583 ;;		line 139 in file "interrupt.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2
  2592 ;; Tracked objects:
  2593 ;;		On entry : 3F/0
  2594 ;;		On exit  : 3F/0
  2595 ;;		Unchanged: 3F/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2597 ;;      Params:         0       0       0       0
  2598 ;;      Locals:         0       0       0       0
  2599 ;;      Temps:          0       0       0       0
  2600 ;;      Totals:         0       0       0       0
  2601 ;;Total ram usage:        0 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:   10
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_Init_IT
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text10
  2612  0020B2                     __ptext10:
  2613                           	opt stack 0
  2614  0020B2                     _Init_Input_Capture_0:
  2615                           	opt stack 19
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;incstack = 0
  2622  0020B2  9C63               	bcf	3939,6,c	;volatile
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2626  0020B4  5063               	movf	3939,w,c	;volatile
  2627  0020B6  0BF0               	andlw	-16
  2628  0020B8  0908               	iorlw	8
  2629  0020BA  6E63               	movwf	3939,c	;volatile
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2633  0020BC  92A3               	bcf	4003,1,c	;volatile
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2637  0020BE  92A5               	bcf	4005,1,c	;volatile
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2641  0020C0  92A4               	bcf	4004,1,c	;volatile
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2645  0020C2  9C62               	bcf	3938,6,c	;volatile
  2646                           
  2647                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2648  0020C4  5062               	movf	3938,w,c	;volatile
  2649  0020C6  0BF0               	andlw	-16
  2650  0020C8  0908               	iorlw	8
  2651  0020CA  6E62               	movwf	3938,c	;volatile
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2655  0020CC  94A3               	bcf	4003,2,c	;volatile
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2659  0020CE  94A5               	bcf	4005,2,c	;volatile
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2663  0020D0  94A4               	bcf	4004,2,c	;volatile
  2664                           
  2665                           ; BSR set to: 0
  2666  0020D2  0012               	return		;funcret
  2667  0020D4                     __end_of_Init_Input_Capture_0:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           prodl	equ	0xFF3
  2671                           intcon	equ	0xFF2
  2672                           intcon2	equ	0xFF1
  2673                           intcon3	equ	0xFF0
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           
  2683 ;; *************** function _Init_ADC *****************
  2684 ;; Defined at:
  2685 ;;		line 14 in file "adc.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2699 ;;      Params:         0       0       0       0
  2700 ;;      Locals:         0       0       0       0
  2701 ;;      Temps:          0       0       0       0
  2702 ;;      Totals:         0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:   10
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text11
  2714  0020F4                     __ptext11:
  2715                           	opt stack 0
  2716  0020F4                     _Init_ADC:
  2717                           	opt stack 20
  2718                           
  2719                           ;adc.c: 15: ADCON0 = 0b00000000;
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;incstack = 0
  2723  0020F4  6AC2               	clrf	4034,c	;volatile
  2724                           
  2725                           ;adc.c: 16: ADCON1 = 0b00000000;
  2726  0020F6  6AC1               	clrf	4033,c	;volatile
  2727                           
  2728                           ;adc.c: 17: ADCON2 = 0b10010100;
  2729  0020F8  0E94               	movlw	148
  2730  0020FA  6EC0               	movwf	4032,c	;volatile
  2731                           
  2732                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2733  0020FC  50C0               	movf	4032,w,c	;volatile
  2734  0020FE  0BF8               	andlw	-8
  2735  002100  0901               	iorlw	1
  2736  002102  6EC0               	movwf	4032,c	;volatile
  2737                           
  2738                           ;adc.c: 19: ADCON3 = 0b11000000;
  2739  002104  0EC0               	movlw	192
  2740  002106  6E9A               	movwf	3994,c	;volatile
  2741                           
  2742                           ;adc.c: 20: ADCHS = 0b00000000;
  2743  002108  6A99               	clrf	3993,c	;volatile
  2744                           
  2745                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2746  00210A  0E03               	movlw	3
  2747  00210C  6EB8               	movwf	4024,c	;volatile
  2748                           
  2749                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2750  00210E  6AB9               	clrf	4025,c	;volatile
  2751                           
  2752                           ;adc.c: 24: ADON = 1;
  2753  002110  80C2               	bsf	4034,0,c	;volatile
  2754  002112  0012               	return		;funcret
  2755  002114                     __end_of_Init_ADC:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           prodl	equ	0xFF3
  2759                           intcon	equ	0xFF2
  2760                           intcon2	equ	0xFF1
  2761                           intcon3	equ	0xFF0
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1h	equ	0xFE2
  2766                           fsr1l	equ	0xFE1
  2767                           indf2	equ	0xFDF
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           
  2771 ;; *************** function _EUSART1_Initialize *****************
  2772 ;; Defined at:
  2773 ;;		line 299 in file "eusart.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 3F/0
  2784 ;;		On exit  : 3F/0
  2785 ;;		Unchanged: 3F/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2787 ;;      Params:         0       0       0       0
  2788 ;;      Locals:         0       0       0       0
  2789 ;;      Temps:          0       0       0       0
  2790 ;;      Totals:         0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:   11
  2794 ;; This function calls:
  2795 ;;		_EUSART1_IT_ACTIVATE
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text12
  2802  001C1A                     __ptext12:
  2803                           	opt stack 0
  2804  001C1A                     _EUSART1_Initialize:
  2805                           	opt stack 19
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2809                           
  2810                           ;incstack = 0
  2811  001C1A  9A9D               	bcf	3997,5,c	;volatile
  2812                           
  2813                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2814  001C1C  989D               	bcf	3997,4,c	;volatile
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;eusart.c: 307: BAUDCON = 0x48;
  2818  001C1E  0E48               	movlw	72
  2819  001C20  6EAA               	movwf	4010,c	;volatile
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2823  001C22  86AA               	bsf	4010,3,c	;volatile
  2824                           
  2825                           ;eusart.c: 313: RCSTA1 = 0x80;
  2826  001C24  0E80               	movlw	128
  2827  001C26  6EAB               	movwf	4011,c	;volatile
  2828                           
  2829                           ;eusart.c: 316: TXSTA1 = 0x24;
  2830  001C28  0E24               	movlw	36
  2831  001C2A  6EAC               	movwf	4012,c	;volatile
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2835  001C2C  98AC               	bcf	4012,4,c	;volatile
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2839  001C2E  84AC               	bsf	4012,2,c	;volatile
  2840                           
  2841                           ;eusart.c: 321: SPBRG = 0x22;
  2842  001C30  0E22               	movlw	34
  2843  001C32  6EAF               	movwf	4015,c	;volatile
  2844                           
  2845                           ;eusart.c: 322: SPBRG = 0x11;
  2846  001C34  0E11               	movlw	17
  2847  001C36  6EAF               	movwf	4015,c	;volatile
  2848                           
  2849                           ;eusart.c: 323: SPBRG = 0x12;
  2850  001C38  0E12               	movlw	18
  2851  001C3A  6EAF               	movwf	4015,c	;volatile
  2852                           
  2853                           ;eusart.c: 324: SPBRG = 0x10;
  2854  001C3C  0E10               	movlw	16
  2855  001C3E  6EAF               	movwf	4015,c	;volatile
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;eusart.c: 328: SPBRGH = 0x00;
  2859  001C40  6AB0               	clrf	4016,c	;volatile
  2860                           
  2861                           ;eusart.c: 330: SPBRG = 0x0B;
  2862  001C42  0E0B               	movlw	11
  2863  001C44  6EAF               	movwf	4015,c	;volatile
  2864                           
  2865                           ;eusart.c: 331: SPBRGH = 0x33;
  2866  001C46  0E33               	movlw	51
  2867  001C48  6EB0               	movwf	4016,c	;volatile
  2868                           
  2869                           ;eusart.c: 333: SPBRG = 205;
  2870  001C4A  0ECD               	movlw	205
  2871  001C4C  6EAF               	movwf	4015,c	;volatile
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;eusart.c: 334: SPBRGH = 0x00;
  2875  001C4E  6AB0               	clrf	4016,c	;volatile
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2879  001C50  96AA               	bcf	4010,3,c	;volatile
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2883  001C52  94AC               	bcf	4012,2,c	;volatile
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2887  001C54  98AC               	bcf	4012,4,c	;volatile
  2888                           
  2889                           ;eusart.c: 343: SPBRG = 12;
  2890  001C56  0E0C               	movlw	12
  2891  001C58  6EAF               	movwf	4015,c	;volatile
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;eusart.c: 344: SPBRGH = 0x00;
  2895  001C5A  6AB0               	clrf	4016,c	;volatile
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;eusart.c: 397: eusart1TxIndex = 0;
  2899  001C5C  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;eusart.c: 398: eusart1RxIndex = 0;
  2903  001C5E  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2907  001C60  989F               	bcf	3999,4,c	;volatile
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2911  001C62  9A9F               	bcf	3999,5,c	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;eusart.c: 431: RX1_full = 0;
  2915  001C64  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2919  001C66  EFB2  F011         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2920  001C6A                     __end_of_EUSART1_Initialize:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           intcon2	equ	0xFF1
  2926                           intcon3	equ	0xFF0
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1h	equ	0xFE2
  2931                           fsr1l	equ	0xFE1
  2932                           indf2	equ	0xFDF
  2933                           fsr2h	equ	0xFDA
  2934                           fsr2l	equ	0xFD9
  2935                           
  2936 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2937 ;; Defined at:
  2938 ;;		line 232 in file "eusart.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		None
  2947 ;; Tracked objects:
  2948 ;;		On entry : 3F/0
  2949 ;;		On exit  : 3F/0
  2950 ;;		Unchanged: 3F/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2952 ;;      Params:         0       0       0       0
  2953 ;;      Locals:         0       0       0       0
  2954 ;;      Temps:          0       0       0       0
  2955 ;;      Totals:         0       0       0       0
  2956 ;;Total ram usage:        0 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:   10
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_EUSART1_Initialize
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text13
  2967  002364                     __ptext13:
  2968                           	opt stack 0
  2969  002364                     _EUSART1_IT_ACTIVATE:
  2970                           	opt stack 19
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;incstack = 0
  2977  002364  88AB               	bsf	4011,4,c	;volatile
  2978                           
  2979                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  2980  002366  9A9E               	bcf	3998,5,c	;volatile
  2981                           
  2982                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  2983  002368  8A9D               	bsf	3997,5,c	;volatile
  2984                           
  2985                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  2986  00236A  989E               	bcf	3998,4,c	;volatile
  2987                           
  2988                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  2989  00236C  889D               	bsf	3997,4,c	;volatile
  2990                           
  2991                           ; BSR set to: 0
  2992  00236E  0012               	return		;funcret
  2993  002370                     __end_of_EUSART1_IT_ACTIVATE:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           intcon2	equ	0xFF1
  2999                           intcon3	equ	0xFF0
  3000                           postinc0	equ	0xFEE
  3001                           wreg	equ	0xFE8
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           
  3009 ;; *************** function _Cycle *****************
  3010 ;; Defined at:
  3011 ;;		line 312 in file "MOTEUR.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  i               1    9[BANK2 ] unsigned char 
  3016 ;;  j               1    0        unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 3F/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3026 ;;      Params:         0       0       0       0
  3027 ;;      Locals:         0       0       0       1
  3028 ;;      Temps:          0       0       0       0
  3029 ;;      Totals:         0       0       0       1
  3030 ;;Total ram usage:        1 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:   19
  3033 ;; This function calls:
  3034 ;;		_Buzzer_Etat
  3035 ;;		_EUSART1_Check_Buffer
  3036 ;;		_Etat_Get
  3037 ;;		_Etat_Update
  3038 ;;		_Mouvement_Bequille
  3039 ;;		_Mouvement_X
  3040 ;;		_Mouvement_X_Metalhome
  3041 ;;		_Mouvement_Z
  3042 ;;		_SPI_Check_Buffer
  3043 ;;		_delay_n_100ms
  3044 ;;		_delay_s
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text14
  3051  000B92                     __ptext14:
  3052                           	opt stack 0
  3053  000B92                     _Cycle:
  3054                           	opt stack 11
  3055  000B92                     
  3056                           ;MOTEUR.c: 346: EUSART1_Check_Buffer();
  3057  000B92  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  3058                           
  3059                           ;MOTEUR.c: 348: SPI_Check_Buffer();
  3060  000B96  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  3061                           
  3062                           ;MOTEUR.c: 350: switch (Etat) {
  3063  000B9A  D10C               	goto	l8672
  3064  000B9C                     l8536:
  3065                           
  3066                           ;MOTEUR.c: 359: delay_s(1);
  3067  000B9C  0E01               	movlw	1
  3068  000B9E  EC90  F00F         	call	_delay_s
  3069                           
  3070                           ;MOTEUR.c: 363: if (Option_Multitas == 0) {
  3071  000BA2  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3072  000BA4  D01D               	goto	l8556
  3073                           
  3074                           ;MOTEUR.c: 366: Mouvement_X(0, 1, 0x02 | 0x60);
  3075  000BA6  0E01               	movlw	1
  3076  000BA8  0102               	movlb	2	; () banked
  3077  000BAA  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3078  000BAC  0E62               	movlw	98
  3079  000BAE  6F85               	movwf	Mouvement_X@option& (0+255),b
  3080  000BB0  0E00               	movlw	0
  3081  000BB2  EC91  F008         	call	_Mouvement_X
  3082                           
  3083                           ;MOTEUR.c: 370: Patinage_Nb_Essai -= 1;
  3084  000BB6  0100               	movlb	0	; () banked
  3085  000BB8  079A               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;MOTEUR.c: 371: if (Patinage_Nb_Essai > 0) {
  3089  000BBA  519A               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3090  000BBC  E008               	bz	l8552
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;MOTEUR.c: 372: nb_s_fonctionnement = 0;
  3094  000BBE  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;MOTEUR.c: 377: delay_s(3);
  3098  000BC0  0E03               	movlw	3
  3099  000BC2  EC90  F00F         	call	_delay_s
  3100                           
  3101                           ;MOTEUR.c: 378: Etat_Update(2);
  3102  000BC6  0E02               	movlw	2
  3103  000BC8  EC8A  F010         	call	_Etat_Update
  3104                           
  3105                           ;MOTEUR.c: 379: } else {
  3106  000BCC  D7E2               	goto	l8534
  3107  000BCE                     l8552:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;MOTEUR.c: 380: Etat_Update(2);
  3111  000BCE  0E02               	movlw	2
  3112  000BD0  EC8A  F010         	call	_Etat_Update
  3113                           
  3114                           ;MOTEUR.c: 382: P4_busy = 0;
  3115  000BD4  0100               	movlb	0	; () banked
  3116  000BD6  6BAA               	clrf	_P4_busy& (0+255),b
  3117                           
  3118                           ;MOTEUR.c: 383: Etat_Update(7);
  3119  000BD8  0E07               	movlw	7
  3120  000BDA  EC8A  F010         	call	_Etat_Update
  3121  000BDE  D7D9               	goto	l8534
  3122  000BE0                     l8556:
  3123                           
  3124                           ;MOTEUR.c: 388: Etat_Update(0);
  3125  000BE0  0E00               	movlw	0
  3126  000BE2  EC8A  F010         	call	_Etat_Update
  3127                           
  3128                           ;MOTEUR.c: 390: P4_busy = 0;
  3129  000BE6  0100               	movlb	0	; () banked
  3130  000BE8  6BAA               	clrf	_P4_busy& (0+255),b
  3131  000BEA  D7D3               	goto	l8534
  3132  000BEC                     l8560:
  3133                           
  3134                           ;MOTEUR.c: 398: delay_s(1);
  3135  000BEC  0E01               	movlw	1
  3136  000BEE  EC90  F00F         	call	_delay_s
  3137                           
  3138                           ;MOTEUR.c: 401: Mouvement_X(1, 1, 0x02 | 0x60);
  3139  000BF2  0E01               	movlw	1
  3140  000BF4  0102               	movlb	2	; () banked
  3141  000BF6  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3142  000BF8  0E62               	movlw	98
  3143  000BFA  6F85               	movwf	Mouvement_X@option& (0+255),b
  3144  000BFC  0E01               	movlw	1
  3145  000BFE  EC91  F008         	call	_Mouvement_X
  3146                           
  3147                           ;MOTEUR.c: 402: Patinage_Nb_Essai -= 1;
  3148  000C02  0100               	movlb	0	; () banked
  3149  000C04  079A               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;MOTEUR.c: 403: if (Patinage_Nb_Essai > 0) {
  3153  000C06  519A               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3154  000C08  E008               	bz	l8572
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;MOTEUR.c: 404: nb_s_fonctionnement = 0;
  3158  000C0A  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;MOTEUR.c: 405: delay_s(3);
  3162  000C0C  0E03               	movlw	3
  3163  000C0E  EC90  F00F         	call	_delay_s
  3164                           
  3165                           ;MOTEUR.c: 406: Etat_Update(3);
  3166  000C12  0E03               	movlw	3
  3167  000C14  EC8A  F010         	call	_Etat_Update
  3168                           
  3169                           ;MOTEUR.c: 407: } else {
  3170  000C18  D7BC               	goto	l8534
  3171  000C1A                     l8572:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;MOTEUR.c: 408: Etat_Update(3);
  3175  000C1A  0E03               	movlw	3
  3176  000C1C  EC8A  F010         	call	_Etat_Update
  3177                           
  3178                           ;MOTEUR.c: 410: P4_busy = 0;
  3179  000C20  0100               	movlb	0	; () banked
  3180  000C22  6BAA               	clrf	_P4_busy& (0+255),b
  3181                           
  3182                           ;MOTEUR.c: 411: Etat_Update(7);
  3183  000C24  0E07               	movlw	7
  3184  000C26  EC8A  F010         	call	_Etat_Update
  3185  000C2A  D7B3               	goto	l8534
  3186  000C2C                     l249:
  3187                           
  3188                           ;MOTEUR.c: 415: P4_busy = 0;
  3189  000C2C  0100               	movlb	0	; () banked
  3190  000C2E  6BAA               	clrf	_P4_busy& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;MOTEUR.c: 416: Etat_Update(70);
  3194  000C30  0E46               	movlw	70
  3195  000C32  EC8A  F010         	call	_Etat_Update
  3196                           
  3197                           ;MOTEUR.c: 417: break;
  3198  000C36  D7AD               	goto	l8534
  3199  000C38                     l8580:
  3200                           
  3201                           ; BSR set to: 0
  3202  000C38  0E01               	movlw	1
  3203  000C3A  EC48  F00F         	call	_Etat_Get
  3204                           
  3205                           ; Switch size 1, requested type "speed"
  3206                           ; Number of cases is 2, Range of values is 2 to 3
  3207                           ; switch strategies available:
  3208                           ; Name         Instructions Cycles
  3209                           ; simple_byte            7     4 (average)
  3210                           ;	Chosen strategy is simple_byte
  3211  000C3E  0A02               	xorlw	2	; case 2
  3212  000C40  E0AD               	bz	l8536
  3213  000C42  0A01               	xorlw	1	; case 3
  3214  000C44  E0D3               	bz	l8560
  3215  000C46  D7F2               	goto	l249
  3216  000C48                     l8582:
  3217                           
  3218                           ;MOTEUR.c: 429: delay_s(1);
  3219  000C48  0E01               	movlw	1
  3220  000C4A  EC90  F00F         	call	_delay_s
  3221                           
  3222                           ;MOTEUR.c: 432: Mouvement_X(0, 1, 0x02 | 0x60);
  3223  000C4E  0E01               	movlw	1
  3224  000C50  0102               	movlb	2	; () banked
  3225  000C52  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3226  000C54  0E62               	movlw	98
  3227  000C56  6F85               	movwf	Mouvement_X@option& (0+255),b
  3228  000C58  0E00               	movlw	0
  3229  000C5A  EC91  F008         	call	_Mouvement_X
  3230                           
  3231                           ;MOTEUR.c: 433: Capteur_Capot_Nb_Evenement -= 1;
  3232  000C5E  0100               	movlb	0	; () banked
  3233  000C60  079D               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;MOTEUR.c: 434: if (Capteur_Capot_Nb_Evenement > 0) {
  3237  000C62  519D               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3238  000C64  E008               	bz	l8594
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;MOTEUR.c: 435: Capteur_Capot_Compteur_Temps_S = 0;
  3242  000C66  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;MOTEUR.c: 436: delay_s(3);
  3246  000C68  0E03               	movlw	3
  3247  000C6A  EC90  F00F         	call	_delay_s
  3248                           
  3249                           ;MOTEUR.c: 437: Etat_Update(2);
  3250  000C6E  0E02               	movlw	2
  3251  000C70  EC8A  F010         	call	_Etat_Update
  3252                           
  3253                           ;MOTEUR.c: 438: } else {
  3254  000C74  D78E               	goto	l8534
  3255  000C76                     l8594:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;MOTEUR.c: 439: Etat_Update(2);
  3259  000C76  0E02               	movlw	2
  3260  000C78  EC8A  F010         	call	_Etat_Update
  3261                           
  3262                           ;MOTEUR.c: 442: P4_busy = 0;
  3263  000C7C  0100               	movlb	0	; () banked
  3264  000C7E  6BAA               	clrf	_P4_busy& (0+255),b
  3265                           
  3266                           ;MOTEUR.c: 443: Etat_Update(7);
  3267  000C80  0E07               	movlw	7
  3268  000C82  EC8A  F010         	call	_Etat_Update
  3269  000C86  D785               	goto	l8534
  3270  000C88                     l8598:
  3271                           
  3272                           ;MOTEUR.c: 448: delay_s(1);
  3273  000C88  0E01               	movlw	1
  3274  000C8A  EC90  F00F         	call	_delay_s
  3275                           
  3276                           ;MOTEUR.c: 451: Mouvement_X(1, 1, 0x02 | 0x60);
  3277  000C8E  0E01               	movlw	1
  3278  000C90  0102               	movlb	2	; () banked
  3279  000C92  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3280  000C94  0E62               	movlw	98
  3281  000C96  6F85               	movwf	Mouvement_X@option& (0+255),b
  3282  000C98  0E01               	movlw	1
  3283  000C9A  EC91  F008         	call	_Mouvement_X
  3284                           
  3285                           ;MOTEUR.c: 452: Capteur_Capot_Nb_Evenement -= 1;
  3286  000C9E  0100               	movlb	0	; () banked
  3287  000CA0  079D               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;MOTEUR.c: 453: if (Capteur_Capot_Nb_Evenement > 0) {
  3291  000CA2  519D               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3292  000CA4  E008               	bz	l8610
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;MOTEUR.c: 454: Capteur_Capot_Compteur_Temps_S = 0;
  3296  000CA6  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;MOTEUR.c: 455: delay_s(3);
  3300  000CA8  0E03               	movlw	3
  3301  000CAA  EC90  F00F         	call	_delay_s
  3302                           
  3303                           ;MOTEUR.c: 456: Etat_Update(3);
  3304  000CAE  0E03               	movlw	3
  3305  000CB0  EC8A  F010         	call	_Etat_Update
  3306                           
  3307                           ;MOTEUR.c: 457: } else {
  3308  000CB4  D76E               	goto	l8534
  3309  000CB6                     l8610:
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;MOTEUR.c: 458: Etat_Update(3);
  3313  000CB6  0E03               	movlw	3
  3314  000CB8  EC8A  F010         	call	_Etat_Update
  3315                           
  3316                           ;MOTEUR.c: 460: P4_busy = 0;
  3317  000CBC  0100               	movlb	0	; () banked
  3318  000CBE  6BAA               	clrf	_P4_busy& (0+255),b
  3319                           
  3320                           ;MOTEUR.c: 463: Etat_Update(77);
  3321  000CC0  0E4D               	movlw	77
  3322  000CC2  EC8A  F010         	call	_Etat_Update
  3323  000CC6  D765               	goto	l8534
  3324  000CC8                     l260:
  3325                           
  3326                           ;MOTEUR.c: 468: P4_busy = 0;
  3327  000CC8  0100               	movlb	0	; () banked
  3328  000CCA  6BAA               	clrf	_P4_busy& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;MOTEUR.c: 469: Etat_Update(70);
  3332  000CCC  0E46               	movlw	70
  3333  000CCE  EC8A  F010         	call	_Etat_Update
  3334                           
  3335                           ;MOTEUR.c: 470: break;
  3336  000CD2  D75F               	goto	l8534
  3337  000CD4                     l8618:
  3338                           
  3339                           ; BSR set to: 0
  3340  000CD4  0E01               	movlw	1
  3341  000CD6  EC48  F00F         	call	_Etat_Get
  3342                           
  3343                           ; Switch size 1, requested type "speed"
  3344                           ; Number of cases is 2, Range of values is 2 to 3
  3345                           ; switch strategies available:
  3346                           ; Name         Instructions Cycles
  3347                           ; simple_byte            7     4 (average)
  3348                           ;	Chosen strategy is simple_byte
  3349  000CDA  0A02               	xorlw	2	; case 2
  3350  000CDC  E0B5               	bz	l8582
  3351  000CDE  0A01               	xorlw	1	; case 3
  3352  000CE0  E0D3               	bz	l8598
  3353  000CE2  D7F2               	goto	l260
  3354  000CE4                     l8620:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;MOTEUR.c: 484: P4_busy = 1;
  3358  000CE4  0E01               	movlw	1
  3359  000CE6  6FAA               	movwf	_P4_busy& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;MOTEUR.c: 485: Etat_Update(77);
  3363  000CE8  0E4D               	movlw	77
  3364  000CEA  EC8A  F010         	call	_Etat_Update
  3365                           
  3366                           ;MOTEUR.c: 486: for (i = 0; i < 4; i++) {
  3367  000CEE  0102               	movlb	2	; () banked
  3368  000CF0  6B89               	clrf	Cycle@i& (0+255),b
  3369  000CF2                     l8630:
  3370                           
  3371                           ; BSR set to: 2
  3372                           ;MOTEUR.c: 487: Buzzer_Etat((unsigned char) 1);
  3373  000CF2  0E01               	movlw	1
  3374  000CF4  ECA4  F011         	call	_Buzzer_Etat
  3375                           
  3376                           ;MOTEUR.c: 488: delay_n_100ms(4);
  3377  000CF8  0E04               	movlw	4
  3378  000CFA  EC3A  F011         	call	_delay_n_100ms
  3379                           
  3380                           ;MOTEUR.c: 489: Buzzer_Etat((unsigned char) 0);
  3381  000CFE  0E00               	movlw	0
  3382  000D00  ECA4  F011         	call	_Buzzer_Etat
  3383                           
  3384                           ;MOTEUR.c: 490: delay_n_100ms(2);
  3385  000D04  0E02               	movlw	2
  3386  000D06  EC3A  F011         	call	_delay_n_100ms
  3387  000D0A  0102               	movlb	2	; () banked
  3388  000D0C  2B89               	incf	Cycle@i& (0+255),f,b
  3389                           
  3390                           ; BSR set to: 2
  3391  000D0E  0E03               	movlw	3
  3392  000D10  6589               	cpfsgt	Cycle@i& (0+255),b
  3393  000D12  D7EF               	goto	l8630
  3394  000D14  D73E               	goto	l8534
  3395  000D16                     l8636:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;MOTEUR.c: 495: P4_busy = 1;
  3399  000D16  0E01               	movlw	1
  3400  000D18  6FAA               	movwf	_P4_busy& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;MOTEUR.c: 496: Etat_Update(77);
  3404  000D1A  0E4D               	movlw	77
  3405  000D1C  EC8A  F010         	call	_Etat_Update
  3406                           
  3407                           ;MOTEUR.c: 500: for (i = 0; i < 4; i++) {
  3408  000D20  0102               	movlb	2	; () banked
  3409  000D22  6B89               	clrf	Cycle@i& (0+255),b
  3410  000D24                     l8646:
  3411                           
  3412                           ; BSR set to: 2
  3413                           ;MOTEUR.c: 501: Buzzer_Etat((unsigned char) 1);
  3414  000D24  0E01               	movlw	1
  3415  000D26  ECA4  F011         	call	_Buzzer_Etat
  3416                           
  3417                           ;MOTEUR.c: 502: delay_n_100ms(4);
  3418  000D2A  0E04               	movlw	4
  3419  000D2C  EC3A  F011         	call	_delay_n_100ms
  3420                           
  3421                           ;MOTEUR.c: 503: Buzzer_Etat((unsigned char) 0);
  3422  000D30  0E00               	movlw	0
  3423  000D32  ECA4  F011         	call	_Buzzer_Etat
  3424                           
  3425                           ;MOTEUR.c: 504: delay_n_100ms(2);
  3426  000D36  0E02               	movlw	2
  3427  000D38  EC3A  F011         	call	_delay_n_100ms
  3428  000D3C  0102               	movlb	2	; () banked
  3429  000D3E  2B89               	incf	Cycle@i& (0+255),f,b
  3430                           
  3431                           ; BSR set to: 2
  3432  000D40  0E03               	movlw	3
  3433  000D42  6589               	cpfsgt	Cycle@i& (0+255),b
  3434  000D44  D7EF               	goto	l8646
  3435  000D46  D725               	goto	l8534
  3436  000D48                     l8654:
  3437                           
  3438                           ; BSR set to: 0
  3439  000D48  51A7               	movf	_Alarme& (0+255),w,b	;volatile
  3440                           
  3441                           ; Switch size 1, requested type "speed"
  3442                           ; Number of cases is 4, Range of values is 1 to 4
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte           13     7 (average)
  3446                           ;	Chosen strategy is simple_byte
  3447  000D4A  0A01               	xorlw	1	; case 1
  3448  000D4C  E0CB               	bz	l8620
  3449  000D4E  0A03               	xorlw	3	; case 2
  3450  000D50  E0E2               	bz	l8636
  3451  000D52  0A01               	xorlw	1	; case 3
  3452  000D54  E101 D770          	bz	l8580
  3453  000D58  0A07               	xorlw	7	; case 4
  3454  000D5A  E0BC               	bz	l8618
  3455  000D5C  D71A               	goto	l8534
  3456  000D5E                     l8656:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;MOTEUR.c: 524: direction = 1;
  3460  000D5E  0E01               	movlw	1
  3461  000D60  6F8D               	movwf	_direction& (0+255),b	;volatile
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;MOTEUR.c: 526: Mouvement_X_Metalhome(direction);
  3465  000D62  518D               	movf	_direction& (0+255),w,b	;volatile
  3466  000D64  ECDC  F00B         	call	_Mouvement_X_Metalhome
  3467                           
  3468                           ;MOTEUR.c: 528: break;
  3469  000D68  D714               	goto	l8534
  3470  000D6A                     l270:
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;MOTEUR.c: 533: direction = 0;
  3474  000D6A  6B8D               	clrf	_direction& (0+255),b	;volatile
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;MOTEUR.c: 534: Mouvement_X_Metalhome(direction);
  3478  000D6C  518D               	movf	_direction& (0+255),w,b	;volatile
  3479  000D6E  ECDC  F00B         	call	_Mouvement_X_Metalhome
  3480                           
  3481                           ;MOTEUR.c: 537: break;
  3482  000D72  D70F               	goto	l8534
  3483  000D74                     l8662:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;MOTEUR.c: 541: Mouvement_Z(direction, type_consigne, mouvement_option);
  3487  000D74  C08F  F286         	movff	_type_consigne,Mouvement_Z@type_consigne
  3488  000D78  C08E  F287         	movff	_mouvement_option,Mouvement_Z@option
  3489  000D7C  518D               	movf	_direction& (0+255),w,b	;volatile
  3490  000D7E  EC32  F00B         	call	_Mouvement_Z
  3491                           
  3492                           ;MOTEUR.c: 542: break;
  3493  000D82  D707               	goto	l8534
  3494  000D84                     l8664:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;MOTEUR.c: 547: Mouvement_Z(direction, type_consigne, mouvement_option);
  3498  000D84  C08F  F286         	movff	_type_consigne,Mouvement_Z@type_consigne
  3499  000D88  C08E  F287         	movff	_mouvement_option,Mouvement_Z@option
  3500  000D8C  518D               	movf	_direction& (0+255),w,b	;volatile
  3501  000D8E  EC32  F00B         	call	_Mouvement_Z
  3502                           
  3503                           ;MOTEUR.c: 549: break;
  3504  000D92  D6FF               	goto	l8534
  3505  000D94                     l8666:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;MOTEUR.c: 554: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3509  000D94  C08F  F286         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3510  000D98  C08E  F287         	movff	_mouvement_option,Mouvement_Bequille@option
  3511  000D9C  518D               	movf	_direction& (0+255),w,b	;volatile
  3512  000D9E  EC87  F00B         	call	_Mouvement_Bequille
  3513                           
  3514                           ;MOTEUR.c: 556: break;
  3515  000DA2  D6F7               	goto	l8534
  3516  000DA4                     l8668:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;MOTEUR.c: 562: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3520  000DA4  C08F  F286         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3521  000DA8  C08E  F287         	movff	_mouvement_option,Mouvement_Bequille@option
  3522  000DAC  518D               	movf	_direction& (0+255),w,b	;volatile
  3523  000DAE  EC87  F00B         	call	_Mouvement_Bequille
  3524                           
  3525                           ;MOTEUR.c: 565: break;
  3526  000DB2  D6EF               	goto	l8534
  3527  000DB4                     l8672:
  3528  000DB4  0100               	movlb	0	; () banked
  3529  000DB6  51A8               	movf	_Etat& (0+255),w,b	;volatile
  3530                           
  3531                           ; Switch size 1, requested type "speed"
  3532                           ; Number of cases is 7, Range of values is 1 to 9
  3533                           ; switch strategies available:
  3534                           ; Name         Instructions Cycles
  3535                           ; simple_byte           22    12 (average)
  3536                           ;	Chosen strategy is simple_byte
  3537  000DB8  0A01               	xorlw	1	; case 1
  3538  000DBA  E0C6               	bz	l8654
  3539  000DBC  0A03               	xorlw	3	; case 2
  3540  000DBE  E0CF               	bz	l8656
  3541  000DC0  0A01               	xorlw	1	; case 3
  3542  000DC2  E0D3               	bz	l270
  3543  000DC4  0A07               	xorlw	7	; case 4
  3544  000DC6  E0DE               	bz	l8664
  3545  000DC8  0A01               	xorlw	1	; case 5
  3546  000DCA  E0D4               	bz	l8662
  3547  000DCC  0A0D               	xorlw	13	; case 8
  3548  000DCE  E0EA               	bz	l8668
  3549  000DD0  0A01               	xorlw	1	; case 9
  3550  000DD2  E0E0               	bz	l8666
  3551                           
  3552                           ; BSR set to: 0
  3553  000DD4  D6DE               	goto	l8534
  3554  000DD6                     __end_of_Cycle:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           intcon2	equ	0xFF1
  3560                           intcon3	equ	0xFF0
  3561                           postinc0	equ	0xFEE
  3562                           wreg	equ	0xFE8
  3563                           postdec1	equ	0xFE5
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           
  3570 ;; *************** function _delay_n_100ms *****************
  3571 ;; Defined at:
  3572 ;;		line 61 in file "horloge.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  nb_100ms        1    wreg     unsigned char 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3577 ;;  i               1   16[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  1    wreg      void 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/2
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3587 ;;      Params:         0       0       0       0
  3588 ;;      Locals:         2       0       0       0
  3589 ;;      Temps:          0       0       0       0
  3590 ;;      Totals:         2       0       0       0
  3591 ;;Total ram usage:        2 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:   11
  3594 ;; This function calls:
  3595 ;;		_delay_100ms
  3596 ;; This function is called by:
  3597 ;;		_Cycle
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text15
  3602  002274                     __ptext15:
  3603                           	opt stack 0
  3604  002274                     _delay_n_100ms:
  3605                           	opt stack 18
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;incstack = 0
  3609                           ;delay_n_100ms@nb_100ms stored from wreg
  3610  002274  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3611                           
  3612                           ;horloge.c: 62: unsigned char i;
  3613                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3614  002276  6A11               	clrf	delay_n_100ms@i,c
  3615  002278  D003               	goto	l8246
  3616  00227A                     l8242:
  3617                           
  3618                           ;horloge.c: 64: delay_100ms();
  3619  00227A  ECD7  F00A         	call	_delay_100ms	;wreg free
  3620  00227E  2A11               	incf	delay_n_100ms@i,f,c
  3621  002280                     l8246:
  3622  002280  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3623  002282  5C11               	subwf	delay_n_100ms@i,w,c
  3624  002284  E3FA               	bnc	l8242
  3625  002286  0012               	return		;funcret
  3626  002288                     __end_of_delay_n_100ms:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           intcon2	equ	0xFF1
  3632                           intcon3	equ	0xFF0
  3633                           postinc0	equ	0xFEE
  3634                           wreg	equ	0xFE8
  3635                           postdec1	equ	0xFE5
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           
  3642 ;; *************** function _Mouvement_Z *****************
  3643 ;; Defined at:
  3644 ;;		line 936 in file "action.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  direction       1    wreg     unsigned char 
  3647 ;;  type_consign    1    6[BANK2 ] unsigned char 
  3648 ;;  option          1    7[BANK2 ] unsigned char 
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;  direction       1    8[BANK2 ] unsigned char 
  3651 ;;  index           2    0        unsigned int 
  3652 ;;  Option_Temps    1    0        unsigned char 
  3653 ;;  i_max           1    0        unsigned char 
  3654 ;;  i_min           1    0        unsigned char 
  3655 ;;  i               1    0        unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 3F/0
  3662 ;;		On exit  : 3D/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3665 ;;      Params:         0       0       0       2
  3666 ;;      Locals:         0       0       0       1
  3667 ;;      Temps:          0       0       0       0
  3668 ;;      Totals:         0       0       0       3
  3669 ;;Total ram usage:        3 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:   18
  3672 ;; This function calls:
  3673 ;;		_Check_List_Moteur_2
  3674 ;;		_Coupe_Moteur
  3675 ;;		_Detection_Pion_Off
  3676 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3677 ;;		_Init_Moteur_2
  3678 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3679 ;;		_TIMER2_On
  3680 ;;		_delay_s
  3681 ;;		_u_Init_PWM
  3682 ;; This function is called by:
  3683 ;;		_Cycle
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text16
  3688  001664                     __ptext16:
  3689                           	opt stack 0
  3690  001664                     _Mouvement_Z:
  3691                           	opt stack 11
  3692                           
  3693                           ;incstack = 0
  3694                           ;Mouvement_Z@direction stored from wreg
  3695  001664  0102               	movlb	2	; () banked
  3696  001666  6F88               	movwf	Mouvement_Z@direction& (0+255),b
  3697                           
  3698                           ;action.c: 937: unsigned char i, i_min, i_max;
  3699                           ;action.c: 938: unsigned char Option_Temps_S;
  3700                           ;action.c: 946: Surveillance_Consommation_Moteur_2_Desactiver();
  3701  001668  ECC4  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3702                           
  3703                           ;action.c: 948: Detection_Pion_Off();
  3704  00166C  ECEB  F011         	call	_Detection_Pion_Off	;wreg free
  3705                           
  3706                           ;action.c: 951: nb_s_pelle = option;
  3707  001670  C287  F0A0         	movff	Mouvement_Z@option,_nb_s_pelle
  3708                           
  3709                           ;action.c: 954: consigne = 10;
  3710  001674  0E0A               	movlw	10
  3711  001676  0100               	movlb	0	; () banked
  3712  001678  6F95               	movwf	_consigne& (0+255),b	;volatile
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;action.c: 965: index = 0;
  3716  00167A  ECB5  F00D         	call	_u_Init_PWM	;wreg free
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;action.c: 966: TMR2 = 0;
  3720  00167E  6ACC               	clrf	4044,c	;volatile
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;action.c: 967: TMR2IF = 0;
  3724  001680  929E               	bcf	3998,1,c	;volatile
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;action.c: 973: LATEbits.LATE2 = 0;
  3728  001682  948D               	bcf	3981,2,c	;volatile
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;action.c: 978: moteur_indice = 2;
  3732  001684  0E02               	movlw	2
  3733  001686  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;action.c: 979: Init_ADC_Single_Shoot_I_Moteur_2();
  3737  001688  EC8F  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;action.c: 982: if (direction == 1) {
  3741  00168C  0102               	movlb	2	; () banked
  3742  00168E  0588               	decf	Mouvement_Z@direction& (0+255),w,b
  3743  001690  E103               	bnz	l1019
  3744                           
  3745                           ; BSR set to: 2
  3746                           ;action.c: 983: LATD7 = 0;LATD6 = 1;
  3747  001692  9E8C               	bcf	3980,7,c	;volatile
  3748  001694  8C8C               	bsf	3980,6,c	;volatile
  3749                           
  3750                           ;action.c: 984: } else {
  3751  001696  D002               	goto	l8334
  3752  001698                     l1019:
  3753                           
  3754                           ; BSR set to: 2
  3755                           ;action.c: 985: LATD6 = 0;LATD7 = 1;
  3756  001698  9C8C               	bcf	3980,6,c	;volatile
  3757  00169A  8E8C               	bsf	3980,7,c	;volatile
  3758  00169C                     l8334:
  3759                           
  3760                           ; BSR set to: 2
  3761                           ;action.c: 986: }
  3762                           ;action.c: 987: PDC1L = 1 << 2;
  3763  00169C  0E04               	movlw	4
  3764  00169E  6E77               	movwf	3959,c	;volatile
  3765                           
  3766                           ; BSR set to: 2
  3767                           ;action.c: 988: PDC1H = 0;
  3768  0016A0  6A76               	clrf	3958,c	;volatile
  3769                           
  3770                           ;action.c: 989: OVDCOND = 0b00000100;
  3771  0016A2  0E04               	movlw	4
  3772  0016A4  6E6B               	movwf	3947,c	;volatile
  3773                           
  3774                           ; BSR set to: 2
  3775                           ;action.c: 990: LATCbits.LATC1 = 1;
  3776  0016A6  828B               	bsf	3979,1,c	;volatile
  3777                           
  3778                           ;action.c: 992: erreur = 1;
  3779  0016A8  0100               	movlb	0	; () banked
  3780  0016AA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3781  0016AC  0E01               	movlw	1
  3782  0016AE  6F84               	movwf	_erreur& (0+255),b	;volatile
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;action.c: 993: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3786  0016B0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3787  0016B2  46E8               	rlncf	wreg,f,c
  3788  0016B4  0BFC               	andlw	252
  3789  0016B6  6E77               	movwf	3959,c	;volatile
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;action.c: 994: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3793  0016B8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3794  0016BA  46E8               	rlncf	wreg,f,c
  3795  0016BC  0B03               	andlw	3
  3796  0016BE  6E76               	movwf	3958,c	;volatile
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;action.c: 997: erreur_accumulator = 0;
  3800  0016C0  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3801  0016C2  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;action.c: 1000: Nouvelle_Valeur_ADC = 0;
  3805  0016C4  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;action.c: 1004: PIE3bits.PTIE = 0;
  3809  0016C6  98A3               	bcf	4003,4,c	;volatile
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;action.c: 1005: PIE1bits.ADIE = 1;
  3813  0016C8  8C9D               	bsf	3997,6,c	;volatile
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;action.c: 1006: PIE1bits.ADIE = 1;
  3817  0016CA  8C9D               	bsf	3997,6,c	;volatile
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;action.c: 1008: PEIE = 1;
  3821  0016CC  8CF2               	bsf	intcon,6,c	;volatile
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;action.c: 1009: GIE = 1;
  3825  0016CE  8EF2               	bsf	intcon,7,c	;volatile
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;action.c: 1010: TIMER2_On();
  3829  0016D0  ECF3  F011         	call	_TIMER2_On	;wreg free
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;action.c: 1011: ADIF = 0;
  3833  0016D4  9C9E               	bcf	3998,6,c	;volatile
  3834                           
  3835                           ;action.c: 1028: Init_Moteur_2();
  3836  0016D6  EC4D  F011         	call	_Init_Moteur_2	;wreg free
  3837  0016DA                     l8362:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;action.c: 1032: Check_List_Moteur_2();
  3841  0016DA  EC0E  F010         	call	_Check_List_Moteur_2	;wreg free
  3842                           
  3843                           ;action.c: 1033: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat
      +                           == 4)));
  3844  0016DE  0102               	movlb	2	; () banked
  3845  0016E0  0588               	decf	Mouvement_Z@direction& (0+255),w,b
  3846  0016E2  E104               	bnz	l8368
  3847                           
  3848                           ; BSR set to: 2
  3849  0016E4  0E05               	movlw	5
  3850  0016E6  0100               	movlb	0	; () banked
  3851  0016E8  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  3852  0016EA  E0F7               	bz	l8362
  3853  0016EC                     l8368:
  3854  0016EC  0102               	movlb	2	; () banked
  3855  0016EE  5188               	movf	Mouvement_Z@direction& (0+255),w,b
  3856  0016F0  E104               	bnz	l1026
  3857                           
  3858                           ; BSR set to: 2
  3859  0016F2  0E04               	movlw	4
  3860  0016F4  0100               	movlb	0	; () banked
  3861  0016F6  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  3862  0016F8  E0F0               	bz	l8362
  3863  0016FA                     l1026:
  3864                           
  3865                           ;action.c: 1037: PIE3bits.PTIE = 0;
  3866  0016FA  98A3               	bcf	4003,4,c	;volatile
  3867                           
  3868                           ;action.c: 1038: PIE1bits.ADIE = 0;
  3869  0016FC  9C9D               	bcf	3997,6,c	;volatile
  3870                           
  3871                           ;action.c: 1043: LATEbits.LATE2 = 0;
  3872  0016FE  948D               	bcf	3981,2,c	;volatile
  3873                           
  3874                           ;action.c: 1050: Surveillance_Consommation_Moteur_2_Desactiver();
  3875  001700  ECC4  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3876                           
  3877                           ;action.c: 1052: Coupe_Moteur();
  3878  001704  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  3879                           
  3880                           ;action.c: 1053: delay_s(1);
  3881  001708  0E01               	movlw	1
  3882  00170A  EF90  F00F         	goto	_delay_s
  3883  00170E                     __end_of_Mouvement_Z:
  3884                           	opt stack 0
  3885                           tblptru	equ	0xFF8
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           intcon2	equ	0xFF1
  3889                           intcon3	equ	0xFF0
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1h	equ	0xFE2
  3894                           fsr1l	equ	0xFE1
  3895                           indf2	equ	0xFDF
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           
  3899 ;; *************** function _Init_Moteur_2 *****************
  3900 ;; Defined at:
  3901 ;;		line 174 in file "action.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 3F/0
  3912 ;;		On exit  : 3F/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3915 ;;      Params:         0       0       0       0
  3916 ;;      Locals:         0       0       0       0
  3917 ;;      Temps:          0       0       0       0
  3918 ;;      Totals:         0       0       0       0
  3919 ;;Total ram usage:        0 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:   11
  3922 ;; This function calls:
  3923 ;;		_TIMER0_On
  3924 ;; This function is called by:
  3925 ;;		_Mouvement_Z
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text17
  3930  00229A                     __ptext17:
  3931                           	opt stack 0
  3932  00229A                     _Init_Moteur_2:
  3933                           	opt stack 17
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;action.c: 179: nb_s_fonctionnement = 0;
  3937                           
  3938                           ;incstack = 0
  3939  00229A  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3940                           
  3941                           ;action.c: 180: nb_Pion = 0;
  3942  00229C  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  3943                           
  3944                           ;action.c: 181: nb_100ms_Timer_5 = 0;
  3945  00229E  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;action.c: 182: TIMER0_On();
  3949  0022A0  ECF8  F010         	call	_TIMER0_On	;wreg free
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;action.c: 185: Compteur_IRQ_I_Moteur_2 = 0;
  3953  0022A4  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;action.c: 186: LATCbits.LATC2=0;
  3957  0022A6  948B               	bcf	3979,2,c	;volatile
  3958                           
  3959                           ; BSR set to: 0
  3960  0022A8  0012               	return		;funcret
  3961  0022AA                     __end_of_Init_Moteur_2:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           intcon2	equ	0xFF1
  3967                           intcon3	equ	0xFF0
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           postdec1	equ	0xFE5
  3971                           fsr1h	equ	0xFE2
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           
  3977 ;; *************** function _Check_List_Moteur_2 *****************
  3978 ;; Defined at:
  3979 ;;		line 196 in file "action.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3993 ;;      Params:         0       0       0       0
  3994 ;;      Locals:         0       0       0       0
  3995 ;;      Temps:          0       0       0       0
  3996 ;;      Totals:         0       0       0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:   17
  4000 ;; This function calls:
  4001 ;;		_EUSART1_Check_Buffer
  4002 ;;		_Etat_Update
  4003 ;;		_SPI_Check_Buffer
  4004 ;; This function is called by:
  4005 ;;		_Mouvement_Z
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text18
  4010  00201C                     __ptext18:
  4011                           	opt stack 0
  4012  00201C                     _Check_List_Moteur_2:
  4013                           	opt stack 11
  4014                           
  4015                           ;action.c: 205: EUSART1_Check_Buffer();
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;incstack = 0
  4019  00201C  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4020                           
  4021                           ;action.c: 206: SPI_Check_Buffer();
  4022  002020  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  4023                           
  4024                           ;action.c: 217: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  4025  002024  0100               	movlb	0	; () banked
  4026  002026  51A0               	movf	_nb_s_pelle& (0+255),w,b
  4027  002028  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4028  00202A  E207               	bc	l977
  4029                           
  4030                           ; BSR set to: 0
  4031  00202C  0E02               	movlw	2
  4032  00202E  65A5               	cpfsgt	_nb_s_fonctionnement& (0+255),b	;volatile
  4033  002030  0C02               	retlw	2
  4034                           
  4035                           ; BSR set to: 0
  4036  002032  5190               	movf	_Pelle_I_Max& (0+255),w,b
  4037  002034  5D97               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  4038  002036  A0D8               	btfss	status,0,c
  4039  002038  0012               	return	
  4040  00203A                     l977:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;action.c: 221: P4_busy = 0;
  4044  00203A  6BAA               	clrf	_P4_busy& (0+255),b
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;action.c: 222: Etat_Update(0);
  4048  00203C  0E00               	movlw	0
  4049  00203E  EF8A  F010         	goto	_Etat_Update
  4050  002042                     __end_of_Check_List_Moteur_2:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           intcon2	equ	0xFF1
  4056                           intcon3	equ	0xFF0
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           postdec1	equ	0xFE5
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _Mouvement_X_Metalhome *****************
  4068 ;; Defined at:
  4069 ;;		line 1379 in file "action.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  direction       1    wreg     unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  direction       1    4[BANK2 ] unsigned char 
  4074 ;;  index           2    0        unsigned int 
  4075 ;;  Option_Temps    1    0        unsigned char 
  4076 ;;  i_max           1    0        unsigned char 
  4077 ;;  i_min           1    0        unsigned char 
  4078 ;;  i               1    0        unsigned char 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 3F/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4088 ;;      Params:         0       0       0       0
  4089 ;;      Locals:         0       0       0       1
  4090 ;;      Temps:          0       0       0       0
  4091 ;;      Totals:         0       0       0       1
  4092 ;;Total ram usage:        1 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:   18
  4095 ;; This function calls:
  4096 ;;		_Check_List_Moteur_Metalhome
  4097 ;;		_Coupe_Moteur
  4098 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4099 ;;		_Init_Moteur_1
  4100 ;;		_Stop_Moteur_1
  4101 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4102 ;;		_TIMER2_On
  4103 ;;		_u_Init_PWM
  4104 ;; This function is called by:
  4105 ;;		_Cycle
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text19
  4110  0017B8                     __ptext19:
  4111                           	opt stack 0
  4112  0017B8                     _Mouvement_X_Metalhome:
  4113                           	opt stack 11
  4114                           
  4115                           ;incstack = 0
  4116                           ;Mouvement_X_Metalhome@direction stored from wreg
  4117  0017B8  0102               	movlb	2	; () banked
  4118  0017BA  6F84               	movwf	Mouvement_X_Metalhome@direction& (0+255),b
  4119                           
  4120                           ;action.c: 1381: unsigned char i, i_min, i_max;
  4121                           ;action.c: 1382: unsigned char Option_Temps_S;
  4122                           ;action.c: 1392: consigne = 10;
  4123  0017BC  0E0A               	movlw	10
  4124  0017BE  0100               	movlb	0	; () banked
  4125  0017C0  6F95               	movwf	_consigne& (0+255),b	;volatile
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;action.c: 1399: Surveillance_Consommation_Moteur_1_Desactiver();
  4129  0017C2  ECB8  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4130                           
  4131                           ;action.c: 1410: index = 0;
  4132  0017C6  ECB5  F00D         	call	_u_Init_PWM	;wreg free
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;action.c: 1411: TMR2 = 0;
  4136  0017CA  6ACC               	clrf	4044,c	;volatile
  4137                           
  4138                           ; BSR set to: 0
  4139                           ;action.c: 1412: TMR2IF = 0;
  4140  0017CC  929E               	bcf	3998,1,c	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;action.c: 1432: moteur_indice = 1;
  4144  0017CE  0E01               	movlw	1
  4145  0017D0  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;action.c: 1433: Init_ADC_Single_Shoot_I_Moteur_1();
  4149  0017D2  EC26  F00D         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;action.c: 1436: if (direction == 1) {
  4153  0017D6  0102               	movlb	2	; () banked
  4154  0017D8  0584               	decf	Mouvement_X_Metalhome@direction& (0+255),w,b
  4155  0017DA  E103               	bnz	l1061
  4156                           
  4157                           ; BSR set to: 2
  4158                           ;action.c: 1437: LATD5 = 0;LATD4 = 1;
  4159  0017DC  9A8C               	bcf	3980,5,c	;volatile
  4160  0017DE  888C               	bsf	3980,4,c	;volatile
  4161                           
  4162                           ;action.c: 1438: } else {
  4163  0017E0  D002               	goto	l8266
  4164  0017E2                     l1061:
  4165                           
  4166                           ; BSR set to: 2
  4167                           ;action.c: 1439: LATD4 = 0;LATD5 = 1;
  4168  0017E2  988C               	bcf	3980,4,c	;volatile
  4169  0017E4  8A8C               	bsf	3980,5,c	;volatile
  4170  0017E6                     l8266:
  4171                           
  4172                           ; BSR set to: 2
  4173                           ;action.c: 1440: }
  4174                           ;action.c: 1441: PDC0L = 1 << 2;
  4175  0017E6  0E04               	movlw	4
  4176  0017E8  6E79               	movwf	3961,c	;volatile
  4177                           
  4178                           ; BSR set to: 2
  4179                           ;action.c: 1442: PDC0H = 0;
  4180  0017EA  6A78               	clrf	3960,c	;volatile
  4181                           
  4182                           ;action.c: 1443: OVDCOND = 0b00000001;
  4183  0017EC  0E01               	movlw	1
  4184  0017EE  6E6B               	movwf	3947,c	;volatile
  4185                           
  4186                           ; BSR set to: 2
  4187                           ;action.c: 1444: LATCbits.LATC0 = 1;
  4188  0017F0  808B               	bsf	3979,0,c	;volatile
  4189                           
  4190                           ;action.c: 1447: erreur = 1;
  4191  0017F2  0100               	movlb	0	; () banked
  4192  0017F4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4193  0017F6  6F84               	movwf	_erreur& (0+255),b	;volatile
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;action.c: 1448: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4197  0017F8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4198  0017FA  46E8               	rlncf	wreg,f,c
  4199  0017FC  0BFC               	andlw	252
  4200  0017FE  6E79               	movwf	3961,c	;volatile
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;action.c: 1449: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4204  001800  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4205  001802  46E8               	rlncf	wreg,f,c
  4206  001804  0B03               	andlw	3
  4207  001806  6E78               	movwf	3960,c	;volatile
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;action.c: 1452: erreur_accumulator = 0;
  4211  001808  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4212  00180A  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;action.c: 1455: Nouvelle_Valeur_ADC = 0;
  4216  00180C  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;action.c: 1465: PIE3bits.PTIE = 0;
  4220  00180E  98A3               	bcf	4003,4,c	;volatile
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;action.c: 1466: PIE1bits.ADIE = 1;
  4224  001810  8C9D               	bsf	3997,6,c	;volatile
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;action.c: 1468: PEIE = 1;
  4228  001812  8CF2               	bsf	intcon,6,c	;volatile
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;action.c: 1469: GIE = 1;
  4232  001814  8EF2               	bsf	intcon,7,c	;volatile
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;action.c: 1470: TIMER2_On();
  4236  001816  ECF3  F011         	call	_TIMER2_On	;wreg free
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;action.c: 1471: ADIF = 0;
  4240  00181A  9C9E               	bcf	3998,6,c	;volatile
  4241                           
  4242                           ;action.c: 1475: Init_Moteur_1();
  4243  00181C  EC55  F011         	call	_Init_Moteur_1	;wreg free
  4244  001820                     l8292:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;action.c: 1595: Check_List_Moteur_Metalhome();
  4248  001820  EC61  F00F         	call	_Check_List_Moteur_Metalhome	;wreg free
  4249                           
  4250                           ;action.c: 1596: } while (
  4251                           ;action.c: 1597: ((direction == 1) && (Etat == 2) )
  4252                           ;action.c: 1598: |
  4253                           ;action.c: 1599: ((direction == 0) && (Etat == 3))
  4254                           ;action.c: 1601: );
  4255  001824  0102               	movlb	2	; () banked
  4256  001826  0584               	decf	Mouvement_X_Metalhome@direction& (0+255),w,b
  4257  001828  E104               	bnz	l8298
  4258                           
  4259                           ; BSR set to: 2
  4260  00182A  0E02               	movlw	2
  4261  00182C  0100               	movlb	0	; () banked
  4262  00182E  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4263  001830  E0F7               	bz	l8292
  4264  001832                     l8298:
  4265  001832  0102               	movlb	2	; () banked
  4266  001834  5184               	movf	Mouvement_X_Metalhome@direction& (0+255),w,b
  4267  001836  E104               	bnz	l8302
  4268                           
  4269                           ; BSR set to: 2
  4270  001838  0E03               	movlw	3
  4271  00183A  0100               	movlb	0	; () banked
  4272  00183C  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4273  00183E  E0F0               	bz	l8292
  4274  001840                     l8302:
  4275                           
  4276                           ;action.c: 1612: Stop_Moteur_1();
  4277  001840  EC08  F012         	call	_Stop_Moteur_1	;wreg free
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;action.c: 1662: PIE3bits.PTIE = 0;
  4281  001844  98A3               	bcf	4003,4,c	;volatile
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;action.c: 1663: PIE1bits.ADIE = 0;
  4285  001846  9C9D               	bcf	3997,6,c	;volatile
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;action.c: 1665: Surveillance_Consommation_Moteur_1_Desactiver();
  4289  001848  ECB8  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4290                           
  4291                           ;action.c: 1667: Coupe_Moteur();
  4292  00184C  EF0E  F011         	goto	_Coupe_Moteur	;wreg free
  4293  001850                     __end_of_Mouvement_X_Metalhome:
  4294                           	opt stack 0
  4295                           tblptru	equ	0xFF8
  4296                           prodl	equ	0xFF3
  4297                           intcon	equ	0xFF2
  4298                           intcon2	equ	0xFF1
  4299                           intcon3	equ	0xFF0
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1h	equ	0xFE2
  4304                           fsr1l	equ	0xFE1
  4305                           indf2	equ	0xFDF
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _Check_List_Moteur_Metalhome *****************
  4311 ;; Defined at:
  4312 ;;		line 104 in file "action.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4326 ;;      Params:         0       0       0       0
  4327 ;;      Locals:         0       0       0       0
  4328 ;;      Temps:          0       0       0       0
  4329 ;;      Totals:         0       0       0       0
  4330 ;;Total ram usage:        0 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:   17
  4333 ;; This function calls:
  4334 ;;		_EUSART1_Check_Buffer
  4335 ;;		_Etat_Update
  4336 ;;		_SPI_Check_Buffer
  4337 ;; This function is called by:
  4338 ;;		_Mouvement_X_Metalhome
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text20
  4343  001EC2                     __ptext20:
  4344                           	opt stack 0
  4345  001EC2                     _Check_List_Moteur_Metalhome:
  4346                           	opt stack 11
  4347                           
  4348                           ;action.c: 107: if(PORTCbits.RC4 == 0){
  4349                           
  4350                           ;incstack = 0
  4351  001EC2  B882               	btfsc	3970,4,c	;volatile
  4352  001EC4  D002               	goto	l8052
  4353                           
  4354                           ;action.c: 108: Compteur_IRQ_I_Moteur_1 = 0;
  4355  001EC6  0100               	movlb	0	; () banked
  4356  001EC8  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  4357  001ECA                     l8052:
  4358                           
  4359                           ;action.c: 109: }
  4360                           ;action.c: 112: EUSART1_Check_Buffer();
  4361  001ECA  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4362                           
  4363                           ;action.c: 113: SPI_Check_Buffer();
  4364  001ECE  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  4365                           
  4366                           ;action.c: 130: if ((direction == 1) && (PORTCbits.RC3 == 1)) {
  4367  001ED2  0100               	movlb	0	; () banked
  4368  001ED4  058D               	decf	_direction& (0+255),w,b	;volatile
  4369  001ED6  E105               	bnz	l8060
  4370                           
  4371                           ; BSR set to: 0
  4372  001ED8  A682               	btfss	3970,3,c	;volatile
  4373  001EDA  D003               	goto	l8060
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;action.c: 131: Etat_Update(0);
  4377  001EDC  0E00               	movlw	0
  4378  001EDE  EC8A  F010         	call	_Etat_Update
  4379  001EE2                     l8060:
  4380                           
  4381                           ;action.c: 132: }
  4382                           ;action.c: 133: if ((direction == 0) && (PORTAbits.RA2 == 1)) {
  4383  001EE2  0100               	movlb	0	; () banked
  4384  001EE4  518D               	movf	_direction& (0+255),w,b	;volatile
  4385  001EE6  B4D8               	btfsc	status,2,c
  4386                           
  4387                           ; BSR set to: 0
  4388  001EE8  A480               	btfss	3968,2,c	;volatile
  4389  001EEA  0012               	return	
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;action.c: 134: Etat_Update(0);
  4393  001EEC  0E00               	movlw	0
  4394  001EEE  EF8A  F010         	goto	_Etat_Update
  4395  001EF2                     __end_of_Check_List_Moteur_Metalhome:
  4396                           	opt stack 0
  4397                           tblptru	equ	0xFF8
  4398                           prodl	equ	0xFF3
  4399                           intcon	equ	0xFF2
  4400                           intcon2	equ	0xFF1
  4401                           intcon3	equ	0xFF0
  4402                           postinc0	equ	0xFEE
  4403                           wreg	equ	0xFE8
  4404                           postdec1	equ	0xFE5
  4405                           fsr1h	equ	0xFE2
  4406                           fsr1l	equ	0xFE1
  4407                           indf2	equ	0xFDF
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _Mouvement_X *****************
  4413 ;; Defined at:
  4414 ;;		line 1071 in file "action.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  direction       1    wreg     unsigned char 
  4417 ;;  type_consign    1    4[BANK2 ] unsigned char 
  4418 ;;  option          1    5[BANK2 ] unsigned char 
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  direction       1    6[BANK2 ] unsigned char 
  4421 ;;  index           2    0        unsigned int 
  4422 ;;  Option_Temps    1    0        unsigned char 
  4423 ;;  i_max           1    0        unsigned char 
  4424 ;;  i_min           1    0        unsigned char 
  4425 ;;  i               1    0        unsigned char 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      void 
  4428 ;; Registers used:
  4429 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 3F/2
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4435 ;;      Params:         0       0       0       2
  4436 ;;      Locals:         0       0       0       1
  4437 ;;      Temps:          0       0       0       0
  4438 ;;      Totals:         0       0       0       3
  4439 ;;Total ram usage:        3 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:   18
  4442 ;; This function calls:
  4443 ;;		_Capteur_Capot_Off
  4444 ;;		_Capteur_Capot_On
  4445 ;;		_Check_List_Moteur_1
  4446 ;;		_Coupe_Moteur
  4447 ;;		_Detection_Pion_Init
  4448 ;;		_Detection_Pion_Off
  4449 ;;		_Detection_Pion_On
  4450 ;;		_EUSART1_Check_Buffer
  4451 ;;		_Etat_Update
  4452 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4453 ;;		_Init_Moteur_1
  4454 ;;		_SPI_Check_Buffer
  4455 ;;		_Stop_Moteur_1
  4456 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4457 ;;		_TIMER2_On
  4458 ;;		_u_Init_PWM
  4459 ;; This function is called by:
  4460 ;;		_Cycle
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text21
  4465  001122                     __ptext21:
  4466                           	opt stack 0
  4467  001122                     _Mouvement_X:
  4468                           	opt stack 11
  4469                           
  4470                           ;incstack = 0
  4471                           ;Mouvement_X@direction stored from wreg
  4472  001122  6F86               	movwf	Mouvement_X@direction& (0+255),b
  4473                           
  4474                           ;action.c: 1073: unsigned char i, i_min, i_max;
  4475                           ;action.c: 1074: unsigned char Option_Temps_S;
  4476                           ;action.c: 1084: consigne = 10;
  4477  001124  0E0A               	movlw	10
  4478  001126  0100               	movlb	0	; () banked
  4479  001128  6F95               	movwf	_consigne& (0+255),b	;volatile
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;action.c: 1091: Surveillance_Consommation_Moteur_1_Desactiver();
  4483  00112A  ECB8  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4484                           
  4485                           ;action.c: 1102: index = 0;
  4486  00112E  ECB5  F00D         	call	_u_Init_PWM	;wreg free
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;action.c: 1103: TMR2 = 0;
  4490  001132  6ACC               	clrf	4044,c	;volatile
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;action.c: 1104: TMR2IF = 0;
  4494  001134  929E               	bcf	3998,1,c	;volatile
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;action.c: 1109: if ((!(option & 0x02))
  4498                           ;action.c: 1112: ) {
  4499  001136  0102               	movlb	2	; () banked
  4500  001138  A385               	btfss	Mouvement_X@option& (0+255),1,b
  4501                           
  4502                           ; BSR set to: 2
  4503                           ;action.c: 1114: Capteur_Capot_On();
  4504  00113A  EC44  F011         	call	_Capteur_Capot_On	;wreg free
  4505                           
  4506                           ;action.c: 1116: }
  4507                           ;action.c: 1124: moteur_indice = 1;
  4508  00113E  0E01               	movlw	1
  4509  001140  0100               	movlb	0	; () banked
  4510  001142  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;action.c: 1125: Init_ADC_Single_Shoot_I_Moteur_1();
  4514  001144  EC26  F00D         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;action.c: 1128: if (direction == 1) {
  4518  001148  0102               	movlb	2	; () banked
  4519  00114A  0586               	decf	Mouvement_X@direction& (0+255),w,b
  4520  00114C  E103               	bnz	l1031
  4521                           
  4522                           ; BSR set to: 2
  4523                           ;action.c: 1129: LATD5 = 0;LATD4 = 1;
  4524  00114E  9A8C               	bcf	3980,5,c	;volatile
  4525  001150  888C               	bsf	3980,4,c	;volatile
  4526                           
  4527                           ;action.c: 1130: } else {
  4528  001152  D002               	goto	l8158
  4529  001154                     l1031:
  4530                           
  4531                           ; BSR set to: 2
  4532                           ;action.c: 1131: LATD4 = 0;LATD5 = 1;
  4533  001154  988C               	bcf	3980,4,c	;volatile
  4534  001156  8A8C               	bsf	3980,5,c	;volatile
  4535  001158                     l8158:
  4536                           
  4537                           ; BSR set to: 2
  4538                           ;action.c: 1132: }
  4539                           ;action.c: 1133: PDC0L = 1 << 2;
  4540  001158  0E04               	movlw	4
  4541  00115A  6E79               	movwf	3961,c	;volatile
  4542                           
  4543                           ; BSR set to: 2
  4544                           ;action.c: 1134: PDC0H = 0;
  4545  00115C  6A78               	clrf	3960,c	;volatile
  4546                           
  4547                           ;action.c: 1135: OVDCOND = 0b00000001;
  4548  00115E  0E01               	movlw	1
  4549  001160  6E6B               	movwf	3947,c	;volatile
  4550                           
  4551                           ; BSR set to: 2
  4552                           ;action.c: 1136: LATCbits.LATC0 = 1;
  4553  001162  808B               	bsf	3979,0,c	;volatile
  4554                           
  4555                           ;action.c: 1139: erreur = 1;
  4556  001164  0100               	movlb	0	; () banked
  4557  001166  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4558  001168  6F84               	movwf	_erreur& (0+255),b	;volatile
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;action.c: 1140: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4562  00116A  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4563  00116C  46E8               	rlncf	wreg,f,c
  4564  00116E  0BFC               	andlw	252
  4565  001170  6E79               	movwf	3961,c	;volatile
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;action.c: 1141: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4569  001172  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4570  001174  46E8               	rlncf	wreg,f,c
  4571  001176  0B03               	andlw	3
  4572  001178  6E78               	movwf	3960,c	;volatile
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;action.c: 1144: erreur_accumulator = 0;
  4576  00117A  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4577  00117C  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;action.c: 1147: Nouvelle_Valeur_ADC = 0;
  4581  00117E  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;action.c: 1157: PIE3bits.PTIE = 0;
  4585  001180  98A3               	bcf	4003,4,c	;volatile
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;action.c: 1158: PIE1bits.ADIE = 1;
  4589  001182  8C9D               	bsf	3997,6,c	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;action.c: 1160: PEIE = 1;
  4593  001184  8CF2               	bsf	intcon,6,c	;volatile
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;action.c: 1161: GIE = 1;
  4597  001186  8EF2               	bsf	intcon,7,c	;volatile
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;action.c: 1162: TIMER2_On();
  4601  001188  ECF3  F011         	call	_TIMER2_On	;wreg free
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;action.c: 1163: ADIF = 0;
  4605  00118C  9C9E               	bcf	3998,6,c	;volatile
  4606                           
  4607                           ;action.c: 1167: Init_Moteur_1();
  4608  00118E  EC55  F011         	call	_Init_Moteur_1	;wreg free
  4609                           
  4610                           ;action.c: 1170: switch (type_consigne) {
  4611  001192  D057               	goto	l8234
  4612  001194                     l8184:
  4613                           
  4614                           ; BSR set to: 2
  4615                           ;action.c: 1172: nb_Pion_Objectif = 2;
  4616  001194  0E02               	movlw	2
  4617  001196  0100               	movlb	0	; () banked
  4618  001198  6F9E               	movwf	_nb_Pion_Objectif& (0+255),b
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;action.c: 1174: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4622  00119A  0102               	movlb	2	; () banked
  4623  00119C  3985               	swapf	Mouvement_X@option& (0+255),w,b
  4624  00119E  0B0F               	andlw	15
  4625  0011A0  0100               	movlb	0	; () banked
  4626  0011A2  6FA6               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;action.c: 1178: if (option & 0x04) {
  4630  0011A4  0102               	movlb	2	; () banked
  4631  0011A6  A585               	btfss	Mouvement_X@option& (0+255),2,b
  4632  0011A8  D004               	goto	l8192
  4633                           
  4634                           ; BSR set to: 2
  4635                           ;action.c: 1180: nb_s_fonctionnement_souhaiter *= 3;
  4636  0011AA  0100               	movlb	0	; () banked
  4637  0011AC  90D8               	bcf	status,0,c
  4638  0011AE  35A6               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4639  0011B0  27A6               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4640  0011B2                     l8192:
  4641                           
  4642                           ;action.c: 1182: }
  4643                           ;action.c: 1184: if (Option_Pailleux==1){
  4644  0011B2  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4645  0011B4  D00F               	goto	l8202
  4646  0011B6                     l8194:
  4647                           
  4648                           ;action.c: 1195: EUSART1_Check_Buffer();
  4649  0011B6  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4650                           
  4651                           ;action.c: 1196: SPI_Check_Buffer();
  4652  0011BA  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  4653                           
  4654                           ;action.c: 1207: } while(
  4655                           ;action.c: 1208: ((Etat == 2) | (Etat == 3))
  4656                           ;action.c: 1209: &&
  4657                           ;action.c: 1210: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4658                           ;action.c: 1211: )
  4659  0011BE  0E02               	movlw	2
  4660  0011C0  0100               	movlb	0	; () banked
  4661  0011C2  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4662  0011C4  E003               	bz	l8200
  4663                           
  4664                           ; BSR set to: 0
  4665  0011C6  0E03               	movlw	3
  4666  0011C8  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4667  0011CA  E10C               	bnz	l8206
  4668  0011CC                     l8200:
  4669                           
  4670                           ; BSR set to: 0
  4671  0011CC  51A6               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4672  0011CE  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4673  0011D0  E209               	bc	l8206
  4674  0011D2  D7F1               	goto	l8194
  4675  0011D4                     l8202:
  4676                           
  4677                           ;action.c: 1221: EUSART1_Check_Buffer();
  4678  0011D4  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4679                           
  4680                           ;action.c: 1222: SPI_Check_Buffer();
  4681  0011D8  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  4682                           
  4683                           ;action.c: 1225: } while(nb_s_fonctionnement < nb_s_fonctionnement_souhaiter);
  4684  0011DC  0100               	movlb	0	; () banked
  4685  0011DE  51A6               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4686  0011E0  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4687  0011E2  E3F8               	bnc	l8202
  4688  0011E4                     l8206:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;action.c: 1226: }
  4692                           ;action.c: 1230: Stop_Moteur_1();
  4693  0011E4  EC08  F012         	call	_Stop_Moteur_1	;wreg free
  4694                           
  4695                           ;action.c: 1231: Capteur_Capot_Off();
  4696  0011E8  EC0A  F012         	call	_Capteur_Capot_Off	;wreg free
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;action.c: 1234: if ((Etat == 2) | (Etat == 3)) {
  4700  0011EC  0E02               	movlw	2
  4701  0011EE  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4702  0011F0  E003               	bz	l8212
  4703                           
  4704                           ; BSR set to: 0
  4705  0011F2  0E03               	movlw	3
  4706  0011F4  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4707  0011F6  E12A               	bnz	l1049
  4708  0011F8                     l8212:
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;action.c: 1236: Etat_Update(0);
  4712  0011F8  0E00               	movlw	0
  4713  0011FA  EC8A  F010         	call	_Etat_Update
  4714                           
  4715                           ;action.c: 1237: P4_busy = 0;
  4716  0011FE  0100               	movlb	0	; () banked
  4717  001200  6BAA               	clrf	_P4_busy& (0+255),b
  4718  001202  D024               	goto	l1049
  4719  001204                     l1050:
  4720                           
  4721                           ; BSR set to: 2
  4722                           ;action.c: 1254: nb_Pion_Objectif = option;
  4723  001204  C285  F09E         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4724                           
  4725                           ;action.c: 1255: nb_Pion = 0;
  4726  001208  0100               	movlb	0	; () banked
  4727  00120A  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;action.c: 1263: Detection_Pion_Init();
  4731  00120C  EC9D  F011         	call	_Detection_Pion_Init	;wreg free
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;action.c: 1264: Detection_Pion_On();
  4735  001210  EC21  F010         	call	_Detection_Pion_On	;wreg free
  4736  001214                     l8220:
  4737                           
  4738                           ;action.c: 1287: Check_List_Moteur_1();
  4739  001214  EC79  F00F         	call	_Check_List_Moteur_1	;wreg free
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;action.c: 1288: } while (
  4743                           ;action.c: 1289: ((direction == 1) && (Etat == 2))
  4744                           ;action.c: 1290: |
  4745                           ;action.c: 1291: ((direction == 0) && (Etat == 3))
  4746                           ;action.c: 1293: );
  4747  001218  0102               	movlb	2	; () banked
  4748  00121A  0586               	decf	Mouvement_X@direction& (0+255),w,b
  4749  00121C  E104               	bnz	l8226
  4750                           
  4751                           ; BSR set to: 2
  4752  00121E  0E02               	movlw	2
  4753  001220  0100               	movlb	0	; () banked
  4754  001222  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4755  001224  E0F7               	bz	l8220
  4756  001226                     l8226:
  4757  001226  0102               	movlb	2	; () banked
  4758  001228  5186               	movf	Mouvement_X@direction& (0+255),w,b
  4759  00122A  E104               	bnz	l8230
  4760                           
  4761                           ; BSR set to: 2
  4762  00122C  0E03               	movlw	3
  4763  00122E  0100               	movlb	0	; () banked
  4764  001230  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4765  001232  E0F0               	bz	l8220
  4766  001234                     l8230:
  4767                           
  4768                           ;action.c: 1296: Detection_Pion_Off();
  4769  001234  ECEB  F011         	call	_Detection_Pion_Off	;wreg free
  4770                           
  4771                           ;action.c: 1304: Stop_Moteur_1();
  4772  001238  EC08  F012         	call	_Stop_Moteur_1	;wreg free
  4773                           
  4774                           ;action.c: 1305: Capteur_Capot_Off();
  4775  00123C  EC0A  F012         	call	_Capteur_Capot_Off	;wreg free
  4776                           
  4777                           ;action.c: 1307: break;
  4778  001240  D005               	goto	l1049
  4779  001242                     l8234:
  4780                           
  4781                           ; BSR set to: 0
  4782  001242  0102               	movlb	2	; () banked
  4783  001244  5184               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4784                           
  4785                           ; Switch size 1, requested type "speed"
  4786                           ; Number of cases is 2, Range of values is 0 to 1
  4787                           ; switch strategies available:
  4788                           ; Name         Instructions Cycles
  4789                           ; simple_byte            7     4 (average)
  4790                           ;	Chosen strategy is simple_byte
  4791  001246  E0DE               	bz	l1050
  4792  001248  0A01               	xorlw	1	; case 1
  4793  00124A  E0A4               	bz	l8184
  4794  00124C                     l1049:
  4795                           
  4796                           ;action.c: 1354: PIE3bits.PTIE = 0;
  4797  00124C  98A3               	bcf	4003,4,c	;volatile
  4798                           
  4799                           ;action.c: 1355: PIE1bits.ADIE = 0;
  4800  00124E  9C9D               	bcf	3997,6,c	;volatile
  4801                           
  4802                           ;action.c: 1357: Surveillance_Consommation_Moteur_1_Desactiver();
  4803  001250  ECB8  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4804                           
  4805                           ;action.c: 1359: Coupe_Moteur();
  4806  001254  EF0E  F011         	goto	_Coupe_Moteur	;wreg free
  4807  001258                     __end_of_Mouvement_X:
  4808                           	opt stack 0
  4809                           tblptru	equ	0xFF8
  4810                           prodl	equ	0xFF3
  4811                           intcon	equ	0xFF2
  4812                           intcon2	equ	0xFF1
  4813                           intcon3	equ	0xFF0
  4814                           postinc0	equ	0xFEE
  4815                           wreg	equ	0xFE8
  4816                           postdec1	equ	0xFE5
  4817                           fsr1h	equ	0xFE2
  4818                           fsr1l	equ	0xFE1
  4819                           indf2	equ	0xFDF
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4825 ;; Defined at:
  4826 ;;		line 872 in file "interrupt.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2
  4835 ;; Tracked objects:
  4836 ;;		On entry : 3D/0
  4837 ;;		On exit  : 3D/0
  4838 ;;		Unchanged: 3D/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4840 ;;      Params:         0       0       0       0
  4841 ;;      Locals:         0       0       0       0
  4842 ;;      Temps:          0       0       0       0
  4843 ;;      Totals:         0       0       0       0
  4844 ;;Total ram usage:        0 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:   10
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		_Mouvement_X
  4851 ;;		_Mouvement_X_Metalhome
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text22
  4856  002370                     __ptext22:
  4857                           	opt stack 0
  4858  002370                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4859                           	opt stack 18
  4860                           
  4861                           ;interrupt.c: 874: if (Surveillance_Consommation_Moteur_1 != 0) {
  4862                           
  4863                           ;incstack = 0
  4864  002370  5049               	movf	_Surveillance_Consommation_Moteur_1,w,c
  4865  002372  B4D8               	btfsc	status,2,c
  4866  002374  0012               	return	
  4867                           
  4868                           ;interrupt.c: 875: Surveillance_Consommation_Moteur_1 = 0;
  4869  002376  6A49               	clrf	_Surveillance_Consommation_Moteur_1,c
  4870                           
  4871                           ;interrupt.c: 876: INTCON3bits.INT1IE = 0;
  4872  002378  96F0               	bcf	intcon3,3,c	;volatile
  4873  00237A  0012               	return		;funcret
  4874  00237C                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4875                           	opt stack 0
  4876                           tblptru	equ	0xFF8
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           intcon2	equ	0xFF1
  4880                           intcon3	equ	0xFF0
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           postdec1	equ	0xFE5
  4884                           fsr1h	equ	0xFE2
  4885                           fsr1l	equ	0xFE1
  4886                           indf2	equ	0xFDF
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _Stop_Moteur_1 *****************
  4892 ;; Defined at:
  4893 ;;		line 97 in file "action.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		cstack
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/2
  4904 ;;		On exit  : 3F/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4907 ;;      Params:         0       0       0       0
  4908 ;;      Locals:         0       0       0       0
  4909 ;;      Temps:          0       0       0       0
  4910 ;;      Totals:         0       0       0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:   11
  4914 ;; This function calls:
  4915 ;;		_TIMER0_Off
  4916 ;; This function is called by:
  4917 ;;		_Mouvement_X
  4918 ;;		_Mouvement_X_Metalhome
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text23
  4923  002410                     __ptext23:
  4924                           	opt stack 0
  4925  002410                     _Stop_Moteur_1:
  4926                           	opt stack 17
  4927                           
  4928                           ;action.c: 99: TIMER0_Off();
  4929                           
  4930                           ;incstack = 0
  4931  002410  EFBE  F011         	goto	_TIMER0_Off	;wreg free
  4932  002414                     __end_of_Stop_Moteur_1:
  4933                           	opt stack 0
  4934                           tblptru	equ	0xFF8
  4935                           prodl	equ	0xFF3
  4936                           intcon	equ	0xFF2
  4937                           intcon2	equ	0xFF1
  4938                           intcon3	equ	0xFF0
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           postdec1	equ	0xFE5
  4942                           fsr1h	equ	0xFE2
  4943                           fsr1l	equ	0xFE1
  4944                           indf2	equ	0xFDF
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949 ;; *************** function _Init_Moteur_1 *****************
  4950 ;; Defined at:
  4951 ;;		line 77 in file "action.c"
  4952 ;; Parameters:    Size  Location     Type
  4953 ;;		None
  4954 ;; Auto vars:     Size  Location     Type
  4955 ;;		None
  4956 ;; Return value:  Size  Location     Type
  4957 ;;                  1    wreg      void 
  4958 ;; Registers used:
  4959 ;;		wreg, status,2, cstack
  4960 ;; Tracked objects:
  4961 ;;		On entry : 3F/0
  4962 ;;		On exit  : 3F/0
  4963 ;;		Unchanged: 0/0
  4964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4965 ;;      Params:         0       0       0       0
  4966 ;;      Locals:         0       0       0       0
  4967 ;;      Temps:          0       0       0       0
  4968 ;;      Totals:         0       0       0       0
  4969 ;;Total ram usage:        0 bytes
  4970 ;; Hardware stack levels used:    1
  4971 ;; Hardware stack levels required when called:   11
  4972 ;; This function calls:
  4973 ;;		_TIMER0_On
  4974 ;; This function is called by:
  4975 ;;		_Mouvement_X
  4976 ;;		_Mouvement_X_Metalhome
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           	psect	text24
  4981  0022AA                     __ptext24:
  4982                           	opt stack 0
  4983  0022AA                     _Init_Moteur_1:
  4984                           	opt stack 17
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;action.c: 84: Capteur_Capot_Compteur_Temps_S = 0;
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;incstack = 0
  4991  0022AA  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4992                           
  4993                           ;action.c: 87: nb_s_fonctionnement = 0;
  4994  0022AC  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  4995                           
  4996                           ;action.c: 88: nb_Pion = 0;
  4997  0022AE  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  4998                           
  4999                           ;action.c: 89: nb_100ms_Timer_5 = 0;
  5000  0022B0  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;action.c: 91: TIMER0_On();
  5004  0022B2  ECF8  F010         	call	_TIMER0_On	;wreg free
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;action.c: 94: Compteur_IRQ_I_Moteur_1 = 0;
  5008  0022B6  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  5009                           
  5010                           ; BSR set to: 0
  5011  0022B8  0012               	return		;funcret
  5012  0022BA                     __end_of_Init_Moteur_1:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           prodl	equ	0xFF3
  5016                           intcon	equ	0xFF2
  5017                           intcon2	equ	0xFF1
  5018                           intcon3	equ	0xFF0
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           postdec1	equ	0xFE5
  5022                           fsr1h	equ	0xFE2
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  5030 ;; Defined at:
  5031 ;;		line 110 in file "adc.c"
  5032 ;; Parameters:    Size  Location     Type
  5033 ;;		None
  5034 ;; Auto vars:     Size  Location     Type
  5035 ;;		None
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, status,2
  5040 ;; Tracked objects:
  5041 ;;		On entry : 3F/0
  5042 ;;		On exit  : 3F/0
  5043 ;;		Unchanged: 3F/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5045 ;;      Params:         0       0       0       0
  5046 ;;      Locals:         0       0       0       0
  5047 ;;      Temps:          0       0       0       0
  5048 ;;      Totals:         0       0       0       0
  5049 ;;Total ram usage:        0 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:   10
  5052 ;; This function calls:
  5053 ;;		Nothing
  5054 ;; This function is called by:
  5055 ;;		_Mouvement_X
  5056 ;;		_Mouvement_X_Metalhome
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060                           	psect	text25
  5061  001A4C                     __ptext25:
  5062                           	opt stack 0
  5063  001A4C                     _Init_ADC_Single_Shoot_I_Moteur_1:
  5064                           	opt stack 18
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;incstack = 0
  5071  001A4C  9AC2               	bcf	4034,5,c	;volatile
  5072                           
  5073                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  5074  001A4E  98C2               	bcf	4034,4,c	;volatile
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  5078  001A50  0EF3               	movlw	-13
  5079  001A52  16C2               	andwf	4034,f,c	;volatile
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;adc.c: 117: ADCON0bits.ADON = 0;
  5083  001A54  90C2               	bcf	4034,0,c	;volatile
  5084                           
  5085                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  5086  001A56  0E3F               	movlw	-193
  5087  001A58  16C1               	andwf	4033,f,c	;volatile
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  5091  001A5A  98C1               	bcf	4033,4,c	;volatile
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;adc.c: 130: ADCON1 = 0b00000000;
  5095  001A5C  6AC1               	clrf	4033,c	;volatile
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  5099  001A5E  9EC0               	bcf	4032,7,c	;volatile
  5100                           
  5101                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  5102  001A60  50C0               	movf	4032,w,c	;volatile
  5103  001A62  0B87               	andlw	-121
  5104  001A64  0910               	iorlw	16
  5105  001A66  6EC0               	movwf	4032,c	;volatile
  5106                           
  5107                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  5108  001A68  50C0               	movf	4032,w,c	;volatile
  5109  001A6A  0BF8               	andlw	-8
  5110  001A6C  0904               	iorlw	4
  5111  001A6E  6EC0               	movwf	4032,c	;volatile
  5112                           
  5113                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  5114  001A70  50C0               	movf	4032,w,c	;volatile
  5115  001A72  0BF8               	andlw	-8
  5116  001A74  0901               	iorlw	1
  5117  001A76  6EC0               	movwf	4032,c	;volatile
  5118                           
  5119                           ;adc.c: 137: ADCON2 = 0b00010100;
  5120  001A78  0E14               	movlw	20
  5121  001A7A  6EC0               	movwf	4032,c	;volatile
  5122                           
  5123                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  5124  001A7C  50C0               	movf	4032,w,c	;volatile
  5125  001A7E  0BF8               	andlw	-8
  5126  001A80  0901               	iorlw	1
  5127  001A82  6EC0               	movwf	4032,c	;volatile
  5128                           
  5129                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  5130  001A84  0E3F               	movlw	-193
  5131  001A86  169A               	andwf	3994,f,c	;volatile
  5132                           
  5133                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  5134  001A88  509A               	movf	3994,w,c	;volatile
  5135  001A8A  0BE0               	andlw	-32
  5136  001A8C  0910               	iorlw	16
  5137  001A8E  6E9A               	movwf	3994,c	;volatile
  5138                           
  5139                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  5140  001A90  0EE0               	movlw	-32
  5141  001A92  169A               	andwf	3994,f,c	;volatile
  5142                           
  5143                           ;adc.c: 153: ADCON3 = 0b00010000;
  5144  001A94  0E10               	movlw	16
  5145  001A96  6E9A               	movwf	3994,c	;volatile
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;adc.c: 154: ADCON3 = 0x00;
  5149  001A98  6A9A               	clrf	3994,c	;volatile
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;adc.c: 159: ADCHS = 0b00000000;
  5153  001A9A  6A99               	clrf	3993,c	;volatile
  5154                           
  5155                           ;adc.c: 160: ANSEL0 = 0b00000011;
  5156  001A9C  0E03               	movlw	3
  5157  001A9E  6EB8               	movwf	4024,c	;volatile
  5158                           
  5159                           ; BSR set to: 0
  5160                           ;adc.c: 162: ANSEL1 = 0b00000000;
  5161  001AA0  6AB9               	clrf	4025,c	;volatile
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;adc.c: 171: PIE1bits.ADIE = 1;
  5165  001AA2  8C9D               	bsf	3997,6,c	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;adc.c: 172: ADIF=0;
  5169  001AA4  9C9E               	bcf	3998,6,c	;volatile
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;adc.c: 173: IPR1bits.ADIP = 0;
  5173  001AA6  9C9F               	bcf	3999,6,c	;volatile
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;adc.c: 178: ADON = 1;
  5177  001AA8  80C2               	bsf	4034,0,c	;volatile
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  5181  001AAA  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  5182                           
  5183                           ; BSR set to: 0
  5184  001AAC  0012               	return		;funcret
  5185  001AAE                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  5186                           	opt stack 0
  5187                           tblptru	equ	0xFF8
  5188                           prodl	equ	0xFF3
  5189                           intcon	equ	0xFF2
  5190                           intcon2	equ	0xFF1
  5191                           intcon3	equ	0xFF0
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           postdec1	equ	0xFE5
  5195                           fsr1h	equ	0xFE2
  5196                           fsr1l	equ	0xFE1
  5197                           indf2	equ	0xFDF
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _Detection_Pion_On *****************
  5203 ;; Defined at:
  5204 ;;		line 29 in file "pion.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      void 
  5211 ;; Registers used:
  5212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 3F/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5218 ;;      Params:         0       0       0       0
  5219 ;;      Locals:         0       0       0       0
  5220 ;;      Temps:          0       0       0       0
  5221 ;;      Totals:         0       0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:   12
  5225 ;; This function calls:
  5226 ;;		_IRQ_PION_Metal_Apparait
  5227 ;; This function is called by:
  5228 ;;		_Mouvement_X
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text26
  5233  002042                     __ptext26:
  5234                           	opt stack 0
  5235  002042                     _Detection_Pion_On:
  5236                           	opt stack 16
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;incstack = 0
  5243  002042  92A4               	bcf	4004,1,c	;volatile
  5244                           
  5245                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  5246  002044  82A3               	bsf	4003,1,c	;volatile
  5247                           
  5248                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  5249  002046  92A4               	bcf	4004,1,c	;volatile
  5250                           
  5251                           ;pion.c: 64: Detecteur_Pion = 1;
  5252  002048  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  5253                           
  5254                           ;pion.c: 68: if (Option_Pailleux != 1) {
  5255  00204A  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  5259  00204C  B480               	btfsc	3968,2,c	;volatile
  5260  00204E  0012               	return	
  5261                           
  5262                           ; BSR set to: 0
  5263                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  5264  002050  0E1F               	movlw	31
  5265  002052  65EB               	cpfsgt	_nb_100ms_platine_backup& (0+255),b
  5266  002054  D003               	goto	l8132
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;pion.c: 91: nb_100ms_platine = 255;
  5270  002056  69A1               	setf	_nb_100ms_platine& (0+255),b
  5271                           
  5272                           ;pion.c: 92: }else{
  5273  002058  EFCA  F011         	goto	_IRQ_PION_Metal_Apparait
  5274  00205C                     l8132:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  5278  00205C  51EB               	movf	_nb_100ms_platine_backup& (0+255),w,b
  5279  00205E  0D08               	mullw	8
  5280  002060  CFF3 F0A1          	movff	prodl,_nb_100ms_platine
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;pion.c: 94: }
  5284                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  5285  002064  EFCA  F011         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  5286  002068                     __end_of_Detection_Pion_On:
  5287                           	opt stack 0
  5288                           tblptru	equ	0xFF8
  5289                           prodl	equ	0xFF3
  5290                           intcon	equ	0xFF2
  5291                           intcon2	equ	0xFF1
  5292                           intcon3	equ	0xFF0
  5293                           postinc0	equ	0xFEE
  5294                           wreg	equ	0xFE8
  5295                           postdec1	equ	0xFE5
  5296                           fsr1h	equ	0xFE2
  5297                           fsr1l	equ	0xFE1
  5298                           indf2	equ	0xFDF
  5299                           fsr2h	equ	0xFDA
  5300                           fsr2l	equ	0xFD9
  5301                           status	equ	0xFD8
  5302                           
  5303 ;; *************** function _Detection_Pion_Init *****************
  5304 ;; Defined at:
  5305 ;;		line 13 in file "pion.c"
  5306 ;; Parameters:    Size  Location     Type
  5307 ;;		None
  5308 ;; Auto vars:     Size  Location     Type
  5309 ;;		None
  5310 ;; Return value:  Size  Location     Type
  5311 ;;                  1    wreg      void 
  5312 ;; Registers used:
  5313 ;;		wreg, status,2
  5314 ;; Tracked objects:
  5315 ;;		On entry : 3F/0
  5316 ;;		On exit  : 3F/0
  5317 ;;		Unchanged: 3F/0
  5318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5319 ;;      Params:         0       0       0       0
  5320 ;;      Locals:         0       0       0       0
  5321 ;;      Temps:          0       0       0       0
  5322 ;;      Totals:         0       0       0       0
  5323 ;;Total ram usage:        0 bytes
  5324 ;; Hardware stack levels used:    1
  5325 ;; Hardware stack levels required when called:   10
  5326 ;; This function calls:
  5327 ;;		Nothing
  5328 ;; This function is called by:
  5329 ;;		_Init_Variable
  5330 ;;		_Mouvement_X
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text27
  5335  00233A                     __ptext27:
  5336                           	opt stack 0
  5337  00233A                     _Detection_Pion_Init:
  5338                           	opt stack 19
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  5342                           
  5343                           ;incstack = 0
  5344  00233A  B480               	btfsc	3968,2,c	;volatile
  5345  00233C  D003               	goto	l1589
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;pion.c: 17: Mouvement_Startup = 1;
  5349  00233E  0E01               	movlw	1
  5350  002340  6E4E               	movwf	_Mouvement_Startup,c
  5351                           
  5352                           ;pion.c: 18: } else {
  5353  002342  0C01               	retlw	1
  5354  002344                     l1589:
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;pion.c: 20: Mouvement_Startup = 0;
  5358  002344  6A4E               	clrf	_Mouvement_Startup,c
  5359                           
  5360                           ; BSR set to: 0
  5361  002346  0012               	return		;funcret
  5362  002348                     __end_of_Detection_Pion_Init:
  5363                           	opt stack 0
  5364                           tblptru	equ	0xFF8
  5365                           prodl	equ	0xFF3
  5366                           intcon	equ	0xFF2
  5367                           intcon2	equ	0xFF1
  5368                           intcon3	equ	0xFF0
  5369                           postinc0	equ	0xFEE
  5370                           wreg	equ	0xFE8
  5371                           postdec1	equ	0xFE5
  5372                           fsr1h	equ	0xFE2
  5373                           fsr1l	equ	0xFE1
  5374                           indf2	equ	0xFDF
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _Check_List_Moteur_1 *****************
  5380 ;; Defined at:
  5381 ;;		line 144 in file "action.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 3F/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5395 ;;      Params:         0       0       0       0
  5396 ;;      Locals:         0       0       0       0
  5397 ;;      Temps:          0       0       0       0
  5398 ;;      Totals:         0       0       0       0
  5399 ;;Total ram usage:        0 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:   17
  5402 ;; This function calls:
  5403 ;;		_Alarme_On
  5404 ;;		_EUSART1_Check_Buffer
  5405 ;;		_SPI_Check_Buffer
  5406 ;; This function is called by:
  5407 ;;		_Mouvement_X
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text28
  5412  001EF2                     __ptext28:
  5413                           	opt stack 0
  5414  001EF2                     _Check_List_Moteur_1:
  5415                           	opt stack 11
  5416                           
  5417                           ;action.c: 147: if(PORTCbits.RC4 == 0){
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;incstack = 0
  5421  001EF2  B882               	btfsc	3970,4,c	;volatile
  5422  001EF4  D002               	goto	l8070
  5423                           
  5424                           ;action.c: 148: Compteur_IRQ_I_Moteur_1 = 0;
  5425  001EF6  0100               	movlb	0	; () banked
  5426  001EF8  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  5427  001EFA                     l8070:
  5428                           
  5429                           ;action.c: 149: }
  5430                           ;action.c: 152: EUSART1_Check_Buffer();
  5431  001EFA  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  5432                           
  5433                           ;action.c: 153: SPI_Check_Buffer();
  5434  001EFE  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  5435                           
  5436                           ;action.c: 155: if (nb_s_fonctionnement > nb_s_patinage) {
  5437  001F02  0100               	movlb	0	; () banked
  5438  001F04  51A5               	movf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  5439  001F06  5DA4               	subwf	_nb_s_patinage& (0+255),w,b
  5440  001F08  E203               	bc	l8076
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;action.c: 160: Alarme_On(3);
  5444  001F0A  0E03               	movlw	3
  5445  001F0C  EC75  F011         	call	_Alarme_On
  5446  001F10                     l8076:
  5447                           
  5448                           ;action.c: 162: }
  5449                           ;action.c: 165: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5450  001F10  0EB4               	movlw	180
  5451  001F12  0100               	movlb	0	; () banked
  5452  001F14  659B               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5453  001F16  0CB4               	retlw	180
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;action.c: 166: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5457  001F18  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5458                           
  5459                           ;action.c: 167: Capteur_Capot_Compteur_Temps_S = 0;
  5460  001F1C  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5461                           
  5462                           ; BSR set to: 0
  5463  001F1E  0012               	return		;funcret
  5464  001F20                     __end_of_Check_List_Moteur_1:
  5465                           	opt stack 0
  5466                           tblptru	equ	0xFF8
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           intcon2	equ	0xFF1
  5470                           intcon3	equ	0xFF0
  5471                           postinc0	equ	0xFEE
  5472                           wreg	equ	0xFE8
  5473                           postdec1	equ	0xFE5
  5474                           fsr1h	equ	0xFE2
  5475                           fsr1l	equ	0xFE1
  5476                           indf2	equ	0xFDF
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function _Capteur_Capot_On *****************
  5482 ;; Defined at:
  5483 ;;		line 176 in file "interrupt.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;		None
  5486 ;; Auto vars:     Size  Location     Type
  5487 ;;		None
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      void 
  5490 ;; Registers used:
  5491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5492 ;; Tracked objects:
  5493 ;;		On entry : 3F/2
  5494 ;;		On exit  : 0/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5497 ;;      Params:         0       0       0       0
  5498 ;;      Locals:         0       0       0       0
  5499 ;;      Temps:          0       0       0       0
  5500 ;;      Totals:         0       0       0       0
  5501 ;;Total ram usage:        0 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; Hardware stack levels required when called:   11
  5504 ;; This function calls:
  5505 ;;		_Etat_Update
  5506 ;; This function is called by:
  5507 ;;		_Mouvement_X
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           	psect	text29
  5512  002288                     __ptext29:
  5513                           	opt stack 0
  5514  002288                     _Capteur_Capot_On:
  5515                           	opt stack 17
  5516                           
  5517                           ; BSR set to: 2
  5518                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;incstack = 0
  5522  002288  88F2               	bsf	intcon,4,c	;volatile
  5523                           
  5524                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  5525  00228A  92F2               	bcf	intcon,1,c	;volatile
  5526                           
  5527                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  5528  00228C  B682               	btfsc	3970,3,c	;volatile
  5529  00228E  0012               	return	
  5530                           
  5531                           ; BSR set to: 2
  5532                           ;interrupt.c: 185: P4_busy = 0;
  5533  002290  0100               	movlb	0	; () banked
  5534  002292  6BAA               	clrf	_P4_busy& (0+255),b
  5535                           
  5536                           ; BSR set to: 0
  5537                           ;interrupt.c: 186: Etat_Update(77);
  5538  002294  0E4D               	movlw	77
  5539  002296  EF8A  F010         	goto	_Etat_Update
  5540  00229A                     __end_of_Capteur_Capot_On:
  5541                           	opt stack 0
  5542                           tblptru	equ	0xFF8
  5543                           prodl	equ	0xFF3
  5544                           intcon	equ	0xFF2
  5545                           intcon2	equ	0xFF1
  5546                           intcon3	equ	0xFF0
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           postdec1	equ	0xFE5
  5550                           fsr1h	equ	0xFE2
  5551                           fsr1l	equ	0xFE1
  5552                           indf2	equ	0xFDF
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function _Capteur_Capot_Off *****************
  5558 ;; Defined at:
  5559 ;;		line 194 in file "interrupt.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;		None
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;		None
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		None
  5568 ;; Tracked objects:
  5569 ;;		On entry : 3F/0
  5570 ;;		On exit  : 3F/0
  5571 ;;		Unchanged: 3F/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5573 ;;      Params:         0       0       0       0
  5574 ;;      Locals:         0       0       0       0
  5575 ;;      Temps:          0       0       0       0
  5576 ;;      Totals:         0       0       0       0
  5577 ;;Total ram usage:        0 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:   10
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_Mouvement_X
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text30
  5588  002414                     __ptext30:
  5589                           	opt stack 0
  5590  002414                     _Capteur_Capot_Off:
  5591                           	opt stack 18
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  5595                           
  5596                           ;incstack = 0
  5597  002414  98F2               	bcf	intcon,4,c	;volatile
  5598                           
  5599                           ; BSR set to: 0
  5600  002416  0012               	return		;funcret
  5601  002418                     __end_of_Capteur_Capot_Off:
  5602                           	opt stack 0
  5603                           tblptru	equ	0xFF8
  5604                           prodl	equ	0xFF3
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           intcon3	equ	0xFF0
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           postdec1	equ	0xFE5
  5611                           fsr1h	equ	0xFE2
  5612                           fsr1l	equ	0xFE1
  5613                           indf2	equ	0xFDF
  5614                           fsr2h	equ	0xFDA
  5615                           fsr2l	equ	0xFD9
  5616                           status	equ	0xFD8
  5617                           
  5618 ;; *************** function _Mouvement_Bequille *****************
  5619 ;; Defined at:
  5620 ;;		line 803 in file "action.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  direction       1    wreg     unsigned char 
  5623 ;;  type_consign    1    6[BANK2 ] unsigned char 
  5624 ;;  option          1    7[BANK2 ] unsigned char 
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  direction       1    8[BANK2 ] unsigned char 
  5627 ;;  index           2    0        unsigned int 
  5628 ;;  Option_Temps    1    0        unsigned char 
  5629 ;;  i_max           1    0        unsigned char 
  5630 ;;  i_min           1    0        unsigned char 
  5631 ;;  i               1    0        unsigned char 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  1    wreg      void 
  5634 ;; Registers used:
  5635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 3F/0
  5638 ;;		On exit  : 3D/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5641 ;;      Params:         0       0       0       2
  5642 ;;      Locals:         0       0       0       1
  5643 ;;      Temps:          0       0       0       0
  5644 ;;      Totals:         0       0       0       3
  5645 ;;Total ram usage:        3 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:   18
  5648 ;; This function calls:
  5649 ;;		_Check_List_Moteur_Bequille
  5650 ;;		_Coupe_Moteur
  5651 ;;		_Detection_Pion_Off
  5652 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  5653 ;;		_Init_Moteur_Bequille
  5654 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  5655 ;;		_TIMER2_On
  5656 ;;		_delay_s
  5657 ;;		_u_Init_PWM
  5658 ;; This function is called by:
  5659 ;;		_Cycle
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text31
  5664  00170E                     __ptext31:
  5665                           	opt stack 0
  5666  00170E                     _Mouvement_Bequille:
  5667                           	opt stack 11
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;incstack = 0
  5671                           ;Mouvement_Bequille@direction stored from wreg
  5672  00170E  0102               	movlb	2	; () banked
  5673  001710  6F88               	movwf	Mouvement_Bequille@direction& (0+255),b
  5674                           
  5675                           ;action.c: 804: unsigned char i, i_min, i_max;
  5676                           ;action.c: 805: unsigned char Option_Temps_S;
  5677                           ;action.c: 812: Surveillance_Consommation_Moteur_2_Desactiver();
  5678  001712  ECC4  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  5679                           
  5680                           ;action.c: 814: Detection_Pion_Off();
  5681  001716  ECEB  F011         	call	_Detection_Pion_Off	;wreg free
  5682                           
  5683                           ;action.c: 817: nb_s_bequille = option;
  5684  00171A  C287  F04C         	movff	Mouvement_Bequille@option,_nb_s_bequille
  5685                           
  5686                           ;action.c: 820: consigne = 10;
  5687  00171E  0E0A               	movlw	10
  5688  001720  0100               	movlb	0	; () banked
  5689  001722  6F95               	movwf	_consigne& (0+255),b	;volatile
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;action.c: 831: index = 0;
  5693  001724  ECB5  F00D         	call	_u_Init_PWM	;wreg free
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;action.c: 832: TMR2 = 0;
  5697  001728  6ACC               	clrf	4044,c	;volatile
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;action.c: 833: TMR2IF = 0;
  5701  00172A  929E               	bcf	3998,1,c	;volatile
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;action.c: 838: LATEbits.LATE2 = 1;
  5705  00172C  848D               	bsf	3981,2,c	;volatile
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;action.c: 843: moteur_indice = 3;
  5709  00172E  0E03               	movlw	3
  5710  001730  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;action.c: 844: Init_ADC_Single_Shoot_I_Moteur_2();
  5714  001732  EC8F  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;action.c: 847: if (direction == 0) {
  5718  001736  0102               	movlb	2	; () banked
  5719  001738  5188               	movf	Mouvement_Bequille@direction& (0+255),w,b
  5720  00173A  E103               	bnz	l1008
  5721                           
  5722                           ; BSR set to: 2
  5723                           ;action.c: 848: LATD7 = 0;LATD6 = 1;
  5724  00173C  9E8C               	bcf	3980,7,c	;volatile
  5725  00173E  8C8C               	bsf	3980,6,c	;volatile
  5726                           
  5727                           ;action.c: 849: } else {
  5728  001740  D002               	goto	l8400
  5729  001742                     l1008:
  5730                           
  5731                           ; BSR set to: 2
  5732                           ;action.c: 850: LATD6 = 0;LATD7 = 1;
  5733  001742  9C8C               	bcf	3980,6,c	;volatile
  5734  001744  8E8C               	bsf	3980,7,c	;volatile
  5735  001746                     l8400:
  5736                           
  5737                           ; BSR set to: 2
  5738                           ;action.c: 851: }
  5739                           ;action.c: 852: PDC1L = 1 << 2;
  5740  001746  0E04               	movlw	4
  5741  001748  6E77               	movwf	3959,c	;volatile
  5742                           
  5743                           ; BSR set to: 2
  5744                           ;action.c: 853: PDC1H = 0;
  5745  00174A  6A76               	clrf	3958,c	;volatile
  5746                           
  5747                           ;action.c: 854: OVDCOND = 0b00000100;
  5748  00174C  0E04               	movlw	4
  5749  00174E  6E6B               	movwf	3947,c	;volatile
  5750                           
  5751                           ; BSR set to: 2
  5752                           ;action.c: 855: LATCbits.LATC1 = 1;
  5753  001750  828B               	bsf	3979,1,c	;volatile
  5754                           
  5755                           ;action.c: 857: erreur = 1;
  5756  001752  0100               	movlb	0	; () banked
  5757  001754  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  5758  001756  0E01               	movlw	1
  5759  001758  6F84               	movwf	_erreur& (0+255),b	;volatile
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;action.c: 858: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  5763  00175A  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  5764  00175C  46E8               	rlncf	wreg,f,c
  5765  00175E  0BFC               	andlw	252
  5766  001760  6E77               	movwf	3959,c	;volatile
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;action.c: 859: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  5770  001762  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  5771  001764  46E8               	rlncf	wreg,f,c
  5772  001766  0B03               	andlw	3
  5773  001768  6E76               	movwf	3958,c	;volatile
  5774                           
  5775                           ; BSR set to: 0
  5776                           ;action.c: 862: erreur_accumulator = 0;
  5777  00176A  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  5778  00176C  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;action.c: 865: Nouvelle_Valeur_ADC = 0;
  5782  00176E  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;action.c: 869: PIE3bits.PTIE = 0;
  5786  001770  98A3               	bcf	4003,4,c	;volatile
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;action.c: 870: PIE1bits.ADIE = 1;
  5790  001772  8C9D               	bsf	3997,6,c	;volatile
  5791                           
  5792                           ; BSR set to: 0
  5793                           ;action.c: 871: PIE1bits.ADIE = 1;
  5794  001774  8C9D               	bsf	3997,6,c	;volatile
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;action.c: 873: PEIE = 1;
  5798  001776  8CF2               	bsf	intcon,6,c	;volatile
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;action.c: 874: GIE = 1;
  5802  001778  8EF2               	bsf	intcon,7,c	;volatile
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;action.c: 875: TIMER2_On();
  5806  00177A  ECF3  F011         	call	_TIMER2_On	;wreg free
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;action.c: 876: ADIF = 0;
  5810  00177E  9C9E               	bcf	3998,6,c	;volatile
  5811                           
  5812                           ;action.c: 893: Init_Moteur_Bequille();
  5813  001780  EC5D  F011         	call	_Init_Moteur_Bequille	;wreg free
  5814  001784                     l8428:
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;action.c: 897: Check_List_Moteur_Bequille();
  5818  001784  ECDD  F00E         	call	_Check_List_Moteur_Bequille	;wreg free
  5819                           
  5820                           ;action.c: 898: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  5821  001788  0102               	movlb	2	; () banked
  5822  00178A  5188               	movf	Mouvement_Bequille@direction& (0+255),w,b
  5823  00178C  E104               	bnz	l8434
  5824                           
  5825                           ; BSR set to: 2
  5826  00178E  0E08               	movlw	8
  5827  001790  0100               	movlb	0	; () banked
  5828  001792  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  5829  001794  E0F7               	bz	l8428
  5830  001796                     l8434:
  5831  001796  0102               	movlb	2	; () banked
  5832  001798  0588               	decf	Mouvement_Bequille@direction& (0+255),w,b
  5833  00179A  E104               	bnz	l1015
  5834                           
  5835                           ; BSR set to: 2
  5836  00179C  0E09               	movlw	9
  5837  00179E  0100               	movlb	0	; () banked
  5838  0017A0  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  5839  0017A2  E0F0               	bz	l8428
  5840  0017A4                     l1015:
  5841                           
  5842                           ;action.c: 902: PIE3bits.PTIE = 0;
  5843  0017A4  98A3               	bcf	4003,4,c	;volatile
  5844                           
  5845                           ;action.c: 903: PIE1bits.ADIE = 0;
  5846  0017A6  9C9D               	bcf	3997,6,c	;volatile
  5847                           
  5848                           ;action.c: 909: LATEbits.LATE2 = 0;
  5849  0017A8  948D               	bcf	3981,2,c	;volatile
  5850                           
  5851                           ;action.c: 914: Surveillance_Consommation_Moteur_2_Desactiver();
  5852  0017AA  ECC4  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  5853                           
  5854                           ;action.c: 916: Coupe_Moteur();
  5855  0017AE  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  5856                           
  5857                           ;action.c: 917: delay_s(1);
  5858  0017B2  0E01               	movlw	1
  5859  0017B4  EF90  F00F         	goto	_delay_s
  5860  0017B8                     __end_of_Mouvement_Bequille:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           prodl	equ	0xFF3
  5864                           intcon	equ	0xFF2
  5865                           intcon2	equ	0xFF1
  5866                           intcon3	equ	0xFF0
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           postdec1	equ	0xFE5
  5870                           fsr1h	equ	0xFE2
  5871                           fsr1l	equ	0xFE1
  5872                           indf2	equ	0xFDF
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function _u_Init_PWM *****************
  5878 ;; Defined at:
  5879 ;;		line 56 in file "pwm.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;		None
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;		None
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  1    wreg      void 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0
  5888 ;; Tracked objects:
  5889 ;;		On entry : 3D/0
  5890 ;;		On exit  : 3F/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5893 ;;      Params:         0       0       0       0
  5894 ;;      Locals:         0       0       0       0
  5895 ;;      Temps:          0       0       0       0
  5896 ;;      Totals:         0       0       0       0
  5897 ;;Total ram usage:        0 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:   10
  5900 ;; This function calls:
  5901 ;;		Nothing
  5902 ;; This function is called by:
  5903 ;;		_Mouvement_Bequille
  5904 ;;		_Mouvement_Z
  5905 ;;		_Mouvement_X
  5906 ;;		_Mouvement_X_Metalhome
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text32
  5911  001B6A                     __ptext32:
  5912                           	opt stack 0
  5913  001B6A                     _u_Init_PWM:
  5914                           	opt stack 18
  5915                           
  5916                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  5917                           
  5918                           ;incstack = 0
  5919  001B6A  9E7E               	bcf	3966,7,c	;volatile
  5920                           
  5921                           ;pwm.c: 64: PDC0L = 1 << 2;
  5922  001B6C  0E04               	movlw	4
  5923  001B6E  6E79               	movwf	3961,c	;volatile
  5924                           
  5925                           ;pwm.c: 65: PDC0H = 0;
  5926  001B70  6A78               	clrf	3960,c	;volatile
  5927                           
  5928                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  5929  001B72  0E1F               	movlw	31
  5930  001B74  6E7B               	movwf	3963,c	;volatile
  5931                           
  5932                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  5933  001B76  0E3F               	movlw	63
  5934  001B78  6E7B               	movwf	3963,c	;volatile
  5935                           
  5936                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  5937  001B7A  287B               	incf	3963,w,c	;volatile
  5938  001B7C  0100               	movlb	0	; () banked
  5939  001B7E  6F8B               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  5940                           
  5941                           ; BSR set to: 0
  5942                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  5943  001B80  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  5944  001B82  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;pwm.c: 87: PTPERH = 0;
  5948  001B84  6A7A               	clrf	3962,c	;volatile
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;pwm.c: 94: PTCON0 = 0b00000011;
  5952  001B86  0E03               	movlw	3
  5953  001B88  6E7F               	movwf	3967,c	;volatile
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  5957  001B8A  0E0F               	movlw	-241
  5958  001B8C  167F               	andwf	3967,f,c	;volatile
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  5962  001B8E  0EF3               	movlw	-13
  5963  001B90  167F               	andwf	3967,f,c	;volatile
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  5967  001B92  507F               	movf	3967,w,c	;volatile
  5968  001B94  0BFC               	andlw	-4
  5969  001B96  0902               	iorlw	2
  5970  001B98  6E7F               	movwf	3967,c	;volatile
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;pwm.c: 116: PTCON1 = 0b10000000;
  5974  001B9A  0E80               	movlw	128
  5975  001B9C  6E7E               	movwf	3966,c	;volatile
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  5979  001B9E  506F               	movf	3951,w,c	;volatile
  5980  001BA0  0B8F               	andlw	-113
  5981  001BA2  0910               	iorlw	16
  5982  001BA4  6E6F               	movwf	3951,c	;volatile
  5983                           
  5984                           ; BSR set to: 0
  5985                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  5986  001BA6  0E0F               	movlw	15
  5987  001BA8  126F               	iorwf	3951,f,c	;volatile
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  5991  001BAA  0E3F               	movlw	63
  5992  001BAC  6E6F               	movwf	3951,c	;volatile
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  5996  001BAE  6A6E               	clrf	3950,c	;volatile
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  6000  001BB0  0E01               	movlw	1
  6001  001BB2  6E6E               	movwf	3950,c	;volatile
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;pwm.c: 155: DTCON = 0b00000000;
  6005  001BB4  6A6D               	clrf	3949,c	;volatile
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;pwm.c: 156: OVDCOND = 0b00000101;
  6009  001BB6  0E05               	movlw	5
  6010  001BB8  6E6B               	movwf	3947,c	;volatile
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;pwm.c: 158: OVDCONS = 0b00000000;
  6014  001BBA  6A6A               	clrf	3946,c	;volatile
  6015                           
  6016                           ; BSR set to: 0
  6017                           ;pwm.c: 164: SEVTDIR = 0;
  6018  001BBC  966E               	bcf	3950,3,c	;volatile
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;pwm.c: 166: SEVTCMPH = 0;
  6022  001BBE  6A70               	clrf	3952,c	;volatile
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;pwm.c: 167: SEVTCMPL = 10;
  6026  001BC0  0E0A               	movlw	10
  6027  001BC2  6E71               	movwf	3953,c	;volatile
  6028                           
  6029                           ; BSR set to: 0
  6030  001BC4  0C0A               	retlw	10	;funcret
  6031  001BC6                     __end_of_u_Init_PWM:
  6032                           	opt stack 0
  6033                           tblptru	equ	0xFF8
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           intcon3	equ	0xFF0
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           fsr1h	equ	0xFE2
  6042                           fsr1l	equ	0xFE1
  6043                           indf2	equ	0xFDF
  6044                           fsr2h	equ	0xFDA
  6045                           fsr2l	equ	0xFD9
  6046                           status	equ	0xFD8
  6047                           
  6048 ;; *************** function _delay_s *****************
  6049 ;; Defined at:
  6050 ;;		line 91 in file "horloge.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;  delay_time      1    wreg     unsigned char 
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;  delay_time      1    4[BANK2 ] unsigned char 
  6055 ;;  Timer_0_Etat    1    5[BANK2 ] unsigned char 
  6056 ;; Return value:  Size  Location     Type
  6057 ;;                  1    wreg      void 
  6058 ;; Registers used:
  6059 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 3D/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6065 ;;      Params:         0       0       0       0
  6066 ;;      Locals:         0       0       0       2
  6067 ;;      Temps:          0       0       0       0
  6068 ;;      Totals:         0       0       0       2
  6069 ;;Total ram usage:        2 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:   17
  6072 ;; This function calls:
  6073 ;;		_EUSART1_Check_Buffer
  6074 ;;		_TIMER0_Off
  6075 ;;		_TIMER0_On
  6076 ;; This function is called by:
  6077 ;;		_Cycle
  6078 ;;		_Mouvement_Bequille
  6079 ;;		_Mouvement_Z
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           	psect	text33
  6084  001F20                     __ptext33:
  6085                           	opt stack 0
  6086  001F20                     _delay_s:
  6087                           	opt stack 12
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;incstack = 0
  6091                           ;delay_s@delay_time stored from wreg
  6092  001F20  0102               	movlb	2	; () banked
  6093  001F22  6F84               	movwf	delay_s@delay_time& (0+255),b
  6094                           
  6095                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  6096                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  6097  001F24  C088  F285         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  6098                           
  6099                           ;horloge.c: 95: delay_s_counter = 0;
  6100  001F28  0100               	movlb	0	; () banked
  6101  001F2A  6B8A               	clrf	_delay_s_counter& (0+255),b	;volatile
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;horloge.c: 98: TIMER0_On();
  6105  001F2C  ECF8  F010         	call	_TIMER0_On	;wreg free
  6106                           
  6107                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  6108  001F30  D002               	goto	l7918
  6109  001F32                     l7916:
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;horloge.c: 101: EUSART1_Check_Buffer();
  6113  001F32  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  6114  001F36                     l7918:
  6115  001F36  0102               	movlb	2	; () banked
  6116  001F38  5184               	movf	delay_s@delay_time& (0+255),w,b
  6117  001F3A  0100               	movlb	0	; () banked
  6118  001F3C  5D8A               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  6119  001F3E  E3F9               	bnc	l7916
  6120                           
  6121                           ; BSR set to: 0
  6122                           ;horloge.c: 104: }
  6123                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  6124  001F40  0102               	movlb	2	; () banked
  6125  001F42  5185               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  6126  001F44  B4D8               	btfsc	status,2,c
  6127                           
  6128                           ; BSR set to: 2
  6129  001F46  ECBE  F011         	call	_TIMER0_Off	;wreg free
  6130  001F4A  0012               	return		;funcret
  6131  001F4C                     __end_of_delay_s:
  6132                           	opt stack 0
  6133                           tblptru	equ	0xFF8
  6134                           prodl	equ	0xFF3
  6135                           intcon	equ	0xFF2
  6136                           intcon2	equ	0xFF1
  6137                           intcon3	equ	0xFF0
  6138                           postinc0	equ	0xFEE
  6139                           wreg	equ	0xFE8
  6140                           postdec1	equ	0xFE5
  6141                           fsr1h	equ	0xFE2
  6142                           fsr1l	equ	0xFE1
  6143                           indf2	equ	0xFDF
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _TIMER0_Off *****************
  6149 ;; Defined at:
  6150 ;;		line 111 in file "timer.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;		None
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		None
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/2
  6161 ;;		On exit  : 3F/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6164 ;;      Params:         0       0       0       0
  6165 ;;      Locals:         0       0       0       0
  6166 ;;      Temps:          0       0       0       0
  6167 ;;      Totals:         0       0       0       0
  6168 ;;Total ram usage:        0 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:   10
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_Stop_Moteur_1
  6175 ;;		_delay_s
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           	psect	text34
  6180  00237C                     __ptext34:
  6181                           	opt stack 0
  6182  00237C                     _TIMER0_Off:
  6183                           	opt stack 18
  6184                           
  6185                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  6186                           
  6187                           ;incstack = 0
  6188  00237C  9ED5               	bcf	4053,7,c	;volatile
  6189                           
  6190                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  6191  00237E  9AF2               	bcf	intcon,5,c	;volatile
  6192                           
  6193                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  6194  002380  94F2               	bcf	intcon,2,c	;volatile
  6195                           
  6196                           ;timer.c: 117: TIMER0_Etat = 0;
  6197  002382  0100               	movlb	0	; () banked
  6198  002384  6B88               	clrf	_TIMER0_Etat& (0+255),b
  6199                           
  6200                           ; BSR set to: 0
  6201  002386  0012               	return		;funcret
  6202  002388                     __end_of_TIMER0_Off:
  6203                           	opt stack 0
  6204                           tblptru	equ	0xFF8
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           intcon2	equ	0xFF1
  6208                           intcon3	equ	0xFF0
  6209                           postinc0	equ	0xFEE
  6210                           wreg	equ	0xFE8
  6211                           postdec1	equ	0xFE5
  6212                           fsr1h	equ	0xFE2
  6213                           fsr1l	equ	0xFE1
  6214                           indf2	equ	0xFDF
  6215                           fsr2h	equ	0xFDA
  6216                           fsr2l	equ	0xFD9
  6217                           status	equ	0xFD8
  6218                           
  6219 ;; *************** function _TIMER2_On *****************
  6220 ;; Defined at:
  6221 ;;		line 158 in file "timer.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;		None
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		None
  6230 ;; Tracked objects:
  6231 ;;		On entry : 3F/0
  6232 ;;		On exit  : 3F/0
  6233 ;;		Unchanged: 3F/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6235 ;;      Params:         0       0       0       0
  6236 ;;      Locals:         0       0       0       0
  6237 ;;      Temps:          0       0       0       0
  6238 ;;      Totals:         0       0       0       0
  6239 ;;Total ram usage:        0 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:   10
  6242 ;; This function calls:
  6243 ;;		Nothing
  6244 ;; This function is called by:
  6245 ;;		_Mouvement_Bequille
  6246 ;;		_Mouvement_Z
  6247 ;;		_Mouvement_X
  6248 ;;		_Mouvement_X_Metalhome
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           	psect	text35
  6253  0023E6                     __ptext35:
  6254                           	opt stack 0
  6255  0023E6                     _TIMER2_On:
  6256                           	opt stack 18
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;incstack = 0
  6263  0023E6  829D               	bsf	3997,1,c	;volatile
  6264                           
  6265                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  6266  0023E8  929E               	bcf	3998,1,c	;volatile
  6267                           
  6268                           ; BSR set to: 0
  6269  0023EA  0012               	return		;funcret
  6270  0023EC                     __end_of_TIMER2_On:
  6271                           	opt stack 0
  6272                           tblptru	equ	0xFF8
  6273                           prodl	equ	0xFF3
  6274                           intcon	equ	0xFF2
  6275                           intcon2	equ	0xFF1
  6276                           intcon3	equ	0xFF0
  6277                           postinc0	equ	0xFEE
  6278                           wreg	equ	0xFE8
  6279                           postdec1	equ	0xFE5
  6280                           fsr1h	equ	0xFE2
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  6288 ;; Defined at:
  6289 ;;		line 888 in file "interrupt.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/2
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6303 ;;      Params:         0       0       0       0
  6304 ;;      Locals:         0       0       0       0
  6305 ;;      Temps:          0       0       0       0
  6306 ;;      Totals:         0       0       0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:   10
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_Mouvement_Bequille
  6314 ;;		_Mouvement_Z
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           	psect	text36
  6319  002388                     __ptext36:
  6320                           	opt stack 0
  6321  002388                     _Surveillance_Consommation_Moteur_2_Desactiver:
  6322                           	opt stack 18
  6323                           
  6324                           ;interrupt.c: 889: if (Surveillance_Consommation_Moteur_2 != 0) {
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;incstack = 0
  6328  002388  5048               	movf	_Surveillance_Consommation_Moteur_2,w,c
  6329  00238A  B4D8               	btfsc	status,2,c
  6330  00238C  0012               	return	
  6331                           
  6332                           ;interrupt.c: 890: Surveillance_Consommation_Moteur_2 = 0;
  6333  00238E  6A48               	clrf	_Surveillance_Consommation_Moteur_2,c
  6334                           
  6335                           ;interrupt.c: 891: INTCON3bits.INT2IE = 0;
  6336  002390  98F0               	bcf	intcon3,4,c	;volatile
  6337  002392  0012               	return		;funcret
  6338  002394                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           intcon2	equ	0xFF1
  6344                           intcon3	equ	0xFF0
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           postdec1	equ	0xFE5
  6348                           fsr1h	equ	0xFE2
  6349                           fsr1l	equ	0xFE1
  6350                           indf2	equ	0xFDF
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function _Init_Moteur_Bequille *****************
  6356 ;; Defined at:
  6357 ;;		line 229 in file "action.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 3F/0
  6368 ;;		On exit  : 3F/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6371 ;;      Params:         0       0       0       0
  6372 ;;      Locals:         0       0       0       0
  6373 ;;      Temps:          0       0       0       0
  6374 ;;      Totals:         0       0       0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:   11
  6378 ;; This function calls:
  6379 ;;		_TIMER0_On
  6380 ;; This function is called by:
  6381 ;;		_Mouvement_Bequille
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text37
  6386  0022BA                     __ptext37:
  6387                           	opt stack 0
  6388  0022BA                     _Init_Moteur_Bequille:
  6389                           	opt stack 17
  6390                           
  6391                           ; BSR set to: 0
  6392                           ;action.c: 234: nb_s_fonctionnement = 0;
  6393                           
  6394                           ;incstack = 0
  6395  0022BA  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  6396                           
  6397                           ;action.c: 235: nb_Pion = 0;
  6398  0022BC  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  6399                           
  6400                           ;action.c: 236: nb_100ms_Timer_5 = 0;
  6401  0022BE  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;action.c: 237: TIMER0_On();
  6405  0022C0  ECF8  F010         	call	_TIMER0_On	;wreg free
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;action.c: 239: INTCON3bits.INT2IE = 1;
  6409  0022C4  88F0               	bsf	intcon3,4,c	;volatile
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;action.c: 240: Compteur_IRQ_I_Moteur_2 = 0;
  6413  0022C6  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6414                           
  6415                           ; BSR set to: 0
  6416  0022C8  0012               	return		;funcret
  6417  0022CA                     __end_of_Init_Moteur_Bequille:
  6418                           	opt stack 0
  6419                           tblptru	equ	0xFF8
  6420                           prodl	equ	0xFF3
  6421                           intcon	equ	0xFF2
  6422                           intcon2	equ	0xFF1
  6423                           intcon3	equ	0xFF0
  6424                           postinc0	equ	0xFEE
  6425                           wreg	equ	0xFE8
  6426                           postdec1	equ	0xFE5
  6427                           fsr1h	equ	0xFE2
  6428                           fsr1l	equ	0xFE1
  6429                           indf2	equ	0xFDF
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _TIMER0_On *****************
  6435 ;; Defined at:
  6436 ;;		line 87 in file "timer.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;		None
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      void 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2
  6445 ;; Tracked objects:
  6446 ;;		On entry : 3F/0
  6447 ;;		On exit  : 3F/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6450 ;;      Params:         0       0       0       0
  6451 ;;      Locals:         0       0       0       0
  6452 ;;      Temps:          0       0       0       0
  6453 ;;      Totals:         0       0       0       0
  6454 ;;Total ram usage:        0 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:   10
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_Init_Moteur_1
  6461 ;;		_Init_Moteur_2
  6462 ;;		_Init_Moteur_Bequille
  6463 ;;		_delay_s
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           	psect	text38
  6468  0021F0                     __ptext38:
  6469                           	opt stack 0
  6470  0021F0                     _TIMER0_On:
  6471                           	opt stack 18
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;timer.c: 88: TMR0H=0;
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;incstack = 0
  6478  0021F0  6AD7               	clrf	4055,c	;volatile
  6479                           
  6480                           ;timer.c: 89: TMR0L=0;
  6481  0021F2  6AD6               	clrf	4054,c	;volatile
  6482                           
  6483                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6484  0021F4  BED5               	btfsc	4053,7,c	;volatile
  6485  0021F6  D004               	goto	l7878
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6489  0021F8  8AF2               	bsf	intcon,5,c	;volatile
  6490                           
  6491                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6492  0021FA  94F2               	bcf	intcon,2,c	;volatile
  6493                           
  6494                           ;timer.c: 94: LATC5=1;
  6495  0021FC  8A8B               	bsf	3979,5,c	;volatile
  6496                           
  6497                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  6498  0021FE  8ED5               	bsf	4053,7,c	;volatile
  6499  002200                     l7878:
  6500                           
  6501                           ; BSR set to: 0
  6502                           ;timer.c: 97: }
  6503                           ;timer.c: 98: TIMER0_Etat = 1;
  6504  002200  0E01               	movlw	1
  6505  002202  6F88               	movwf	_TIMER0_Etat& (0+255),b
  6506                           
  6507                           ; BSR set to: 0
  6508  002204  0C01               	retlw	1	;funcret
  6509  002206                     __end_of_TIMER0_On:
  6510                           	opt stack 0
  6511                           tblptru	equ	0xFF8
  6512                           prodl	equ	0xFF3
  6513                           intcon	equ	0xFF2
  6514                           intcon2	equ	0xFF1
  6515                           intcon3	equ	0xFF0
  6516                           postinc0	equ	0xFEE
  6517                           wreg	equ	0xFE8
  6518                           postdec1	equ	0xFE5
  6519                           fsr1h	equ	0xFE2
  6520                           fsr1l	equ	0xFE1
  6521                           indf2	equ	0xFDF
  6522                           fsr2h	equ	0xFDA
  6523                           fsr2l	equ	0xFD9
  6524                           status	equ	0xFD8
  6525                           
  6526 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  6527 ;; Defined at:
  6528 ;;		line 192 in file "adc.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      void 
  6535 ;; Registers used:
  6536 ;;		wreg, status,2
  6537 ;; Tracked objects:
  6538 ;;		On entry : 3F/0
  6539 ;;		On exit  : 3F/0
  6540 ;;		Unchanged: 3F/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6542 ;;      Params:         0       0       0       0
  6543 ;;      Locals:         0       0       0       0
  6544 ;;      Temps:          0       0       0       0
  6545 ;;      Totals:         0       0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:   10
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_Mouvement_Bequille
  6553 ;;		_Mouvement_Z
  6554 ;; This function uses a non-reentrant model
  6555 ;;
  6556                           
  6557                           	psect	text39
  6558  00191E                     __ptext39:
  6559                           	opt stack 0
  6560  00191E                     _Init_ADC_Single_Shoot_I_Moteur_2:
  6561                           	opt stack 18
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;incstack = 0
  6568  00191E  9AC2               	bcf	4034,5,c	;volatile
  6569                           
  6570                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  6571  001920  98C2               	bcf	4034,4,c	;volatile
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  6575  001922  50C2               	movf	4034,w,c	;volatile
  6576  001924  0BF3               	andlw	-13
  6577  001926  0904               	iorlw	4
  6578  001928  6EC2               	movwf	4034,c	;volatile
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;adc.c: 199: ADCON0bits.ADON = 0;
  6582  00192A  90C2               	bcf	4034,0,c	;volatile
  6583                           
  6584                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  6585  00192C  0E3F               	movlw	-193
  6586  00192E  16C1               	andwf	4033,f,c	;volatile
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  6590  001930  98C1               	bcf	4033,4,c	;volatile
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;adc.c: 212: ADCON1 = 0b00000000;
  6594  001932  6AC1               	clrf	4033,c	;volatile
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  6598  001934  9EC0               	bcf	4032,7,c	;volatile
  6599                           
  6600                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  6601  001936  50C0               	movf	4032,w,c	;volatile
  6602  001938  0B87               	andlw	-121
  6603  00193A  0910               	iorlw	16
  6604  00193C  6EC0               	movwf	4032,c	;volatile
  6605                           
  6606                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  6607  00193E  50C0               	movf	4032,w,c	;volatile
  6608  001940  0BF8               	andlw	-8
  6609  001942  0904               	iorlw	4
  6610  001944  6EC0               	movwf	4032,c	;volatile
  6611                           
  6612                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  6613  001946  50C0               	movf	4032,w,c	;volatile
  6614  001948  0BF8               	andlw	-8
  6615  00194A  0901               	iorlw	1
  6616  00194C  6EC0               	movwf	4032,c	;volatile
  6617                           
  6618                           ;adc.c: 219: ADCON2 = 0b00010100;
  6619  00194E  0E14               	movlw	20
  6620  001950  6EC0               	movwf	4032,c	;volatile
  6621                           
  6622                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  6623  001952  50C0               	movf	4032,w,c	;volatile
  6624  001954  0BF8               	andlw	-8
  6625  001956  0901               	iorlw	1
  6626  001958  6EC0               	movwf	4032,c	;volatile
  6627                           
  6628                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  6629  00195A  0E3F               	movlw	-193
  6630  00195C  169A               	andwf	3994,f,c	;volatile
  6631                           
  6632                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  6633  00195E  509A               	movf	3994,w,c	;volatile
  6634  001960  0BE0               	andlw	-32
  6635  001962  0910               	iorlw	16
  6636  001964  6E9A               	movwf	3994,c	;volatile
  6637                           
  6638                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  6639  001966  0EE0               	movlw	-32
  6640  001968  169A               	andwf	3994,f,c	;volatile
  6641                           
  6642                           ;adc.c: 235: ADCON3 = 0b00010000;
  6643  00196A  0E10               	movlw	16
  6644  00196C  6E9A               	movwf	3994,c	;volatile
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;adc.c: 236: ADCON3 = 0x00;
  6648  00196E  6A9A               	clrf	3994,c	;volatile
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;adc.c: 241: ADCHS = 0b00000000;
  6652  001970  6A99               	clrf	3993,c	;volatile
  6653                           
  6654                           ;adc.c: 242: ANSEL0 = 0b00000011;
  6655  001972  0E03               	movlw	3
  6656  001974  6EB8               	movwf	4024,c	;volatile
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;adc.c: 244: ANSEL1 = 0b00000000;
  6660  001976  6AB9               	clrf	4025,c	;volatile
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;adc.c: 253: PIE1bits.ADIE = 1;
  6664  001978  8C9D               	bsf	3997,6,c	;volatile
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;adc.c: 254: ADIF=0;
  6668  00197A  9C9E               	bcf	3998,6,c	;volatile
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;adc.c: 255: IPR1bits.ADIP = 0;
  6672  00197C  9C9F               	bcf	3999,6,c	;volatile
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;adc.c: 260: ADON = 1;
  6676  00197E  80C2               	bsf	4034,0,c	;volatile
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  6680  001980  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6681                           
  6682                           ; BSR set to: 0
  6683  001982  0012               	return		;funcret
  6684  001984                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           prodl	equ	0xFF3
  6688                           intcon	equ	0xFF2
  6689                           intcon2	equ	0xFF1
  6690                           intcon3	equ	0xFF0
  6691                           postinc0	equ	0xFEE
  6692                           wreg	equ	0xFE8
  6693                           postdec1	equ	0xFE5
  6694                           fsr1h	equ	0xFE2
  6695                           fsr1l	equ	0xFE1
  6696                           indf2	equ	0xFDF
  6697                           fsr2h	equ	0xFDA
  6698                           fsr2l	equ	0xFD9
  6699                           status	equ	0xFD8
  6700                           
  6701 ;; *************** function _Detection_Pion_Off *****************
  6702 ;; Defined at:
  6703 ;;		line 126 in file "pion.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;		None
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;		None
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		None
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/2
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6717 ;;      Params:         0       0       0       0
  6718 ;;      Locals:         0       0       0       0
  6719 ;;      Temps:          0       0       0       0
  6720 ;;      Totals:         0       0       0       0
  6721 ;;Total ram usage:        0 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:   10
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_Mouvement_Bequille
  6728 ;;		_Mouvement_Z
  6729 ;;		_Mouvement_X
  6730 ;; This function uses a non-reentrant model
  6731 ;;
  6732                           
  6733                           	psect	text40
  6734  0023D6                     __ptext40:
  6735                           	opt stack 0
  6736  0023D6                     _Detection_Pion_Off:
  6737                           	opt stack 18
  6738                           
  6739                           ;pion.c: 141: Detecteur_Pion = 0;
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;incstack = 0
  6743  0023D6  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  6744                           
  6745                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  6746  0023D8  92A3               	bcf	4003,1,c	;volatile
  6747                           
  6748                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  6749  0023DA  92A4               	bcf	4004,1,c	;volatile
  6750  0023DC  0012               	return		;funcret
  6751  0023DE                     __end_of_Detection_Pion_Off:
  6752                           	opt stack 0
  6753                           tblptru	equ	0xFF8
  6754                           prodl	equ	0xFF3
  6755                           intcon	equ	0xFF2
  6756                           intcon2	equ	0xFF1
  6757                           intcon3	equ	0xFF0
  6758                           postinc0	equ	0xFEE
  6759                           wreg	equ	0xFE8
  6760                           postdec1	equ	0xFE5
  6761                           fsr1h	equ	0xFE2
  6762                           fsr1l	equ	0xFE1
  6763                           indf2	equ	0xFDF
  6764                           fsr2h	equ	0xFDA
  6765                           fsr2l	equ	0xFD9
  6766                           status	equ	0xFD8
  6767                           
  6768 ;; *************** function _Check_List_Moteur_Bequille *****************
  6769 ;; Defined at:
  6770 ;;		line 251 in file "action.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;		None
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      void 
  6777 ;; Registers used:
  6778 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6784 ;;      Params:         0       0       0       0
  6785 ;;      Locals:         0       0       0       0
  6786 ;;      Temps:          0       0       0       1
  6787 ;;      Totals:         0       0       0       1
  6788 ;;Total ram usage:        1 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:   17
  6791 ;; This function calls:
  6792 ;;		_EUSART1_Check_Buffer
  6793 ;;		_Etat_Update
  6794 ;;		_SPI_Check_Buffer
  6795 ;;		___lbdiv
  6796 ;; This function is called by:
  6797 ;;		_Mouvement_Bequille
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           	psect	text41
  6802  001DBA                     __ptext41:
  6803                           	opt stack 0
  6804  001DBA                     _Check_List_Moteur_Bequille:
  6805                           	opt stack 11
  6806                           
  6807                           ;action.c: 255: if(PORTCbits.RC5 == 0){
  6808                           
  6809                           ;incstack = 0
  6810  001DBA  AA82               	btfss	3970,5,c	;volatile
  6811                           
  6812                           ;action.c: 256: Compteur_IRQ_I_Moteur_2 = 0;
  6813  001DBC  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6814                           
  6815                           ;action.c: 257: }
  6816                           ;action.c: 261: EUSART1_Check_Buffer();
  6817  001DBE  ECBC  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  6818                           
  6819                           ;action.c: 262: SPI_Check_Buffer();
  6820  001DC2  ECA6  F00F         	call	_SPI_Check_Buffer	;wreg free
  6821                           
  6822                           ;action.c: 266: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  6823  001DC6  504C               	movf	_nb_s_bequille,w,c
  6824  001DC8  0100               	movlb	0	; () banked
  6825  001DCA  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  6826  001DCC  E20E               	bc	l990
  6827                           
  6828                           ; BSR set to: 0
  6829  001DCE  0E02               	movlw	2
  6830  001DD0  65A5               	cpfsgt	_nb_s_fonctionnement& (0+255),b	;volatile
  6831  001DD2  0C02               	retlw	2
  6832                           
  6833                           ; BSR set to: 0
  6834  001DD4  0E05               	movlw	5
  6835  001DD6  6E0F               	movwf	___lbdiv@divisor,c
  6836  001DD8  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  6837  001DDA  EC14  F00F         	call	___lbdiv
  6838  001DDE  0102               	movlb	2	; () banked
  6839  001DE0  6F84               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  6840  001DE2  504A               	movf	_Bequille_I_Max,w,c
  6841  001DE4  5D84               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  6842  001DE6  A0D8               	btfss	status,0,c
  6843  001DE8  0012               	return	
  6844  001DEA                     l990:
  6845                           
  6846                           ;action.c: 269: P4_busy = 0;
  6847  001DEA  0100               	movlb	0	; () banked
  6848  001DEC  6BAA               	clrf	_P4_busy& (0+255),b
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;action.c: 270: Etat_Update(0);
  6852  001DEE  0E00               	movlw	0
  6853  001DF0  EF8A  F010         	goto	_Etat_Update
  6854  001DF4                     __end_of_Check_List_Moteur_Bequille:
  6855                           	opt stack 0
  6856                           tblptru	equ	0xFF8
  6857                           prodl	equ	0xFF3
  6858                           intcon	equ	0xFF2
  6859                           intcon2	equ	0xFF1
  6860                           intcon3	equ	0xFF0
  6861                           postinc0	equ	0xFEE
  6862                           wreg	equ	0xFE8
  6863                           postdec1	equ	0xFE5
  6864                           fsr1h	equ	0xFE2
  6865                           fsr1l	equ	0xFE1
  6866                           indf2	equ	0xFDF
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function ___lbdiv *****************
  6872 ;; Defined at:
  6873 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  dividend        1    wreg     unsigned char 
  6876 ;;  divisor         1   14[COMRAM] unsigned char 
  6877 ;; Auto vars:     Size  Location     Type
  6878 ;;  dividend        1   15[COMRAM] unsigned char 
  6879 ;;  quotient        1   17[COMRAM] unsigned char 
  6880 ;;  counter         1   16[COMRAM] unsigned char 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      unsigned char 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2, status,0
  6885 ;; Tracked objects:
  6886 ;;		On entry : 3F/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6890 ;;      Params:         1       0       0       0
  6891 ;;      Locals:         3       0       0       0
  6892 ;;      Temps:          0       0       0       0
  6893 ;;      Totals:         4       0       0       0
  6894 ;;Total ram usage:        4 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:   10
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_Check_List_Moteur_Bequille
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text42
  6905  001E28                     __ptext42:
  6906                           	opt stack 0
  6907  001E28                     ___lbdiv:
  6908                           	opt stack 17
  6909                           
  6910                           ;incstack = 0
  6911                           ;___lbdiv@dividend stored from wreg
  6912  001E28  6E10               	movwf	___lbdiv@dividend,c
  6913  001E2A  6A12               	clrf	___lbdiv@quotient,c
  6914  001E2C  500F               	movf	___lbdiv@divisor,w,c
  6915  001E2E  E014               	bz	l7904
  6916  001E30  0E01               	movlw	1
  6917  001E32  6E11               	movwf	___lbdiv@counter,c
  6918  001E34  D003               	goto	l7892
  6919  001E36                     l7888:
  6920  001E36  90D8               	bcf	status,0,c
  6921  001E38  360F               	rlcf	___lbdiv@divisor,f,c
  6922  001E3A  2A11               	incf	___lbdiv@counter,f,c
  6923  001E3C                     l7892:
  6924  001E3C  AE0F               	btfss	___lbdiv@divisor,7,c
  6925  001E3E  D7FB               	goto	l7888
  6926  001E40                     l7894:
  6927  001E40  90D8               	bcf	status,0,c
  6928  001E42  3612               	rlcf	___lbdiv@quotient,f,c
  6929  001E44  500F               	movf	___lbdiv@divisor,w,c
  6930  001E46  5C10               	subwf	___lbdiv@dividend,w,c
  6931  001E48  E303               	bnc	l7900
  6932  001E4A  500F               	movf	___lbdiv@divisor,w,c
  6933  001E4C  5E10               	subwf	___lbdiv@dividend,f,c
  6934  001E4E  8012               	bsf	___lbdiv@quotient,0,c
  6935  001E50                     l7900:
  6936  001E50  90D8               	bcf	status,0,c
  6937  001E52  320F               	rrcf	___lbdiv@divisor,f,c
  6938  001E54  2E11               	decfsz	___lbdiv@counter,f,c
  6939  001E56  D7F4               	goto	l7894
  6940  001E58                     l7904:
  6941  001E58  5012               	movf	___lbdiv@quotient,w,c
  6942  001E5A  0012               	return		;funcret
  6943  001E5C                     __end_of___lbdiv:
  6944                           	opt stack 0
  6945                           tblptru	equ	0xFF8
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           intcon2	equ	0xFF1
  6949                           intcon3	equ	0xFF0
  6950                           postinc0	equ	0xFEE
  6951                           wreg	equ	0xFE8
  6952                           postdec1	equ	0xFE5
  6953                           fsr1h	equ	0xFE2
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _SPI_Check_Buffer *****************
  6961 ;; Defined at:
  6962 ;;		line 348 in file "spi.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6976 ;;      Params:         0       0       0       0
  6977 ;;      Locals:         0       0       0       0
  6978 ;;      Temps:          0       0       0       0
  6979 ;;      Totals:         0       0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:   16
  6983 ;; This function calls:
  6984 ;;		_EUSART1_RX_T3_LOCAL
  6985 ;; This function is called by:
  6986 ;;		_Cycle
  6987 ;;		_Check_List_Moteur_Metalhome
  6988 ;;		_Check_List_Moteur_1
  6989 ;;		_Check_List_Moteur_2
  6990 ;;		_Check_List_Moteur_Bequille
  6991 ;;		_Mouvement_X
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text43
  6996  001F4C                     __ptext43:
  6997                           	opt stack 0
  6998  001F4C                     _SPI_Check_Buffer:
  6999                           	opt stack 13
  7000                           
  7001                           ;spi.c: 396: if (SPI_full == 1) {
  7002                           
  7003                           ;incstack = 0
  7004  001F4C  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7005  001F4E  0012               	return	
  7006                           
  7007                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  7008                           ;spi.c: 400: SPI_RX_TEXT[1],
  7009                           ;spi.c: 401: SPI_RX_TEXT[2],
  7010                           ;spi.c: 402: SPI_RX_TEXT[3],
  7011                           ;spi.c: 403: SPI_RX_TEXT[4],
  7012                           ;spi.c: 404: SPI_RX_TEXT[5],
  7013                           ;spi.c: 405: SPI_RX_TEXT[6],
  7014                           ;spi.c: 406: SPI_RX_TEXT[7]);
  7015  001F50  C101  F0F9         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7016  001F54  C102  F0FA         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7017  001F58  C103  F0FB         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7018  001F5C  C104  F0FC         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7019  001F60  C105  F0FD         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7020  001F64  C106  F0FE         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7021  001F68  C107  F0FF         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7022  001F6C  0101               	movlb	1	; () banked
  7023  001F6E  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  7024  001F70  EC6D  F000         	call	_EUSART1_RX_T3_LOCAL
  7025                           
  7026                           ;spi.c: 408: SPI_full = 0;
  7027  001F74  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7028  001F76  0012               	return		;funcret
  7029  001F78                     __end_of_SPI_Check_Buffer:
  7030                           	opt stack 0
  7031                           tblptru	equ	0xFF8
  7032                           prodl	equ	0xFF3
  7033                           intcon	equ	0xFF2
  7034                           intcon2	equ	0xFF1
  7035                           intcon3	equ	0xFF0
  7036                           postinc0	equ	0xFEE
  7037                           wreg	equ	0xFE8
  7038                           postdec1	equ	0xFE5
  7039                           fsr1h	equ	0xFE2
  7040                           fsr1l	equ	0xFE1
  7041                           indf2	equ	0xFDF
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _EUSART1_Check_Buffer *****************
  7047 ;; Defined at:
  7048 ;;		line 268 in file "eusart.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      void 
  7055 ;; Registers used:
  7056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7062 ;;      Params:         0       0       0       0
  7063 ;;      Locals:         0       0       0       0
  7064 ;;      Temps:          0       0       0       0
  7065 ;;      Totals:         0       0       0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:   16
  7069 ;; This function calls:
  7070 ;;		_EUSART1_RX_T3_LOCAL
  7071 ;; This function is called by:
  7072 ;;		_Cycle
  7073 ;;		_Check_List_Moteur_Metalhome
  7074 ;;		_Check_List_Moteur_1
  7075 ;;		_Check_List_Moteur_2
  7076 ;;		_Check_List_Moteur_Bequille
  7077 ;;		_Mouvement_X
  7078 ;;		_delay_s
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text44
  7083  001F78                     __ptext44:
  7084                           	opt stack 0
  7085  001F78                     _EUSART1_Check_Buffer:
  7086                           	opt stack 12
  7087                           
  7088                           ;eusart.c: 270: if (RX1_full == 1) {
  7089                           
  7090                           ;incstack = 0
  7091  001F78  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7092  001F7A  0012               	return	
  7093                           
  7094                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  7095                           ;eusart.c: 274: UART_RX_TEXT[1],
  7096                           ;eusart.c: 275: UART_RX_TEXT[2],
  7097                           ;eusart.c: 276: UART_RX_TEXT[3],
  7098                           ;eusart.c: 277: UART_RX_TEXT[4],
  7099                           ;eusart.c: 278: UART_RX_TEXT[5],
  7100                           ;eusart.c: 279: UART_RX_TEXT[6],
  7101                           ;eusart.c: 280: UART_RX_TEXT[7]);
  7102  001F7C  C1C1  F0F9         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7103  001F80  C1C2  F0FA         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7104  001F84  C1C3  F0FB         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7105  001F88  C1C4  F0FC         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7106  001F8C  C1C5  F0FD         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7107  001F90  C1C6  F0FE         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7108  001F94  C1C7  F0FF         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7109  001F98  0101               	movlb	1	; () banked
  7110  001F9A  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  7111  001F9C  EC6D  F000         	call	_EUSART1_RX_T3_LOCAL
  7112                           
  7113                           ;eusart.c: 282: RX1_full = 0;
  7114  001FA0  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7115  001FA2  0012               	return		;funcret
  7116  001FA4                     __end_of_EUSART1_Check_Buffer:
  7117                           	opt stack 0
  7118                           tblptru	equ	0xFF8
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           intcon3	equ	0xFF0
  7123                           postinc0	equ	0xFEE
  7124                           wreg	equ	0xFE8
  7125                           postdec1	equ	0xFE5
  7126                           fsr1h	equ	0xFE2
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  7134 ;; Defined at:
  7135 ;;		line 822 in file "eusart.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  Ad              1    wreg     unsigned char 
  7138 ;;  Da              1   13[BANK0 ] unsigned char 
  7139 ;;  A               1   14[BANK0 ] unsigned char 
  7140 ;;  B               1   15[BANK0 ] unsigned char 
  7141 ;;  C               1   16[BANK0 ] unsigned char 
  7142 ;;  D               1   17[BANK0 ] unsigned char 
  7143 ;;  E               1   18[BANK0 ] unsigned char 
  7144 ;;  F               1   19[BANK0 ] unsigned char 
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  Ad              1   63[COMRAM] unsigned char 
  7147 ;;  i               2   64[COMRAM] int 
  7148 ;;  Reponse         1    0        unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      void 
  7151 ;; Registers used:
  7152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7153 ;; Tracked objects:
  7154 ;;		On entry : 3F/1
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7158 ;;      Params:         0       7       0       0
  7159 ;;      Locals:         3       0       0       0
  7160 ;;      Temps:          0       0       0       4
  7161 ;;      Totals:         3       7       0       4
  7162 ;;Total ram usage:       14 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:   15
  7165 ;; This function calls:
  7166 ;;		_Alarme_On
  7167 ;;		_Coupe_Moteur
  7168 ;;		_EUSART1_Buffer_Send
  7169 ;;		_Etat_Get
  7170 ;;		_Etat_Intitule
  7171 ;;		_Etat_Update
  7172 ;;		_IRQ_Execution
  7173 ;;		___awmod
  7174 ;;		_delay_1s
  7175 ;;		_sprintf
  7176 ;; This function is called by:
  7177 ;;		_EUSART1_Check_Buffer
  7178 ;;		_SPI_Check_Buffer
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           	psect	text45
  7183  0000DA                     __ptext45:
  7184                           	opt stack 0
  7185  0000DA                     _EUSART1_RX_T3_LOCAL:
  7186                           	opt stack 12
  7187                           
  7188                           ;incstack = 0
  7189                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  7190  0000DA  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  7191                           
  7192                           ;eusart.c: 823: int i;
  7193                           ;eusart.c: 824: unsigned char Reponse;
  7194                           ;eusart.c: 830: switch (Ad) {
  7195  0000DC  D377               	goto	l7828
  7196  0000DE                     l7538:
  7197                           
  7198                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  7199  0000DE  C0F9  F280         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  7200  0000E2  0ED0               	movlw	208
  7201  0000E4  0102               	movlb	2	; () banked
  7202  0000E6  2780               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7203  0000E8  4780               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7204  0000EA  4780               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7205  0000EC  508B               	movf	3979,w,c	;volatile
  7206  0000EE  1980               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7207  0000F0  0BFB               	andlw	-5
  7208  0000F2  1980               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7209  0000F4  6E8B               	movwf	3979,c	;volatile
  7210                           
  7211                           ;eusart.c: 847: break;
  7212  0000F6  0012               	return	
  7213  0000F8                     l7540:
  7214                           
  7215                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  7216  0000F8  0EAB               	movlw	low _UART_TX_TEXT
  7217  0000FA  6E1B               	movwf	sprintf@sp,c
  7218  0000FC  0EB9               	movlw	low (STR_4+30)
  7219  0000FE  6E1C               	movwf	sprintf@f,c
  7220  000100  0E3F               	movlw	high (STR_4+30)
  7221  000102  6E1D               	movwf	sprintf@f+1,c
  7222  000104  C098  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  7223  000108  6A1F               	clrf	?_sprintf+4,c
  7224  00010A  EC56  F004         	call	_sprintf	;wreg free
  7225  00010E                     l7542:
  7226                           
  7227                           ; BSR set to: 0
  7228                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  7229  00010E  0EAB               	movlw	low _UART_TX_TEXT
  7230  000110  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  7231  000112  EF7A  F00A         	goto	_EUSART1_Buffer_Send	;wreg free
  7232  000116                     l7544:
  7233                           
  7234                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  7235  000116  0EAB               	movlw	low _UART_TX_TEXT
  7236  000118  6E1B               	movwf	sprintf@sp,c
  7237  00011A  0EB7               	movlw	low STR_2
  7238  00011C  6E1C               	movwf	sprintf@f,c
  7239  00011E  0E3E               	movlw	high STR_2
  7240  000120  6E1D               	movwf	sprintf@f+1,c
  7241  000122  C095  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7242  000126  6A1F               	clrf	?_sprintf+4,c
  7243  000128  C098  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  7244  00012C  6A21               	clrf	?_sprintf+6,c
  7245  00012E  C097  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  7246  000132  6A23               	clrf	?_sprintf+8,c
  7247  000134  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  7248  000138  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  7249  00013C  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  7250  000140  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  7251  000144  C09A  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  7252  000148  6A29               	clrf	?_sprintf+14,c
  7253  00014A  C09D  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  7254  00014E  6A2B               	clrf	?_sprintf+16,c
  7255  000150  EC56  F004         	call	_sprintf	;wreg free
  7256  000154  D7DC               	goto	l7542
  7257  000156                     l7548:
  7258                           
  7259                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  7260  000156  0EAB               	movlw	low _UART_TX_TEXT
  7261  000158  6E1B               	movwf	sprintf@sp,c
  7262  00015A  0EEC               	movlw	low STR_3
  7263  00015C  6E1C               	movwf	sprintf@f,c
  7264  00015E  0E3F               	movlw	high STR_3
  7265  000160  6E1D               	movwf	sprintf@f+1,c
  7266  000162  0E00               	movlw	0
  7267  000164  EC48  F00F         	call	_Etat_Get
  7268  000168  6E1E               	movwf	?_sprintf+3,c
  7269  00016A  6A1F               	clrf	?_sprintf+4,c
  7270  00016C  0E01               	movlw	1
  7271  00016E  EC48  F00F         	call	_Etat_Get
  7272  000172  6E20               	movwf	?_sprintf+5,c
  7273  000174  6A21               	clrf	?_sprintf+6,c
  7274  000176  C0A7  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7275  00017A  6A23               	clrf	?_sprintf+8,c
  7276  00017C  EC56  F004         	call	_sprintf	;wreg free
  7277  000180  D7C6               	goto	l7542
  7278  000182                     l1386:
  7279                           
  7280                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  7281  000182  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  7282  000184  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  7283  000186                     l7556:
  7284                           
  7285                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  7286  000186  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  7287  000188  08B4               	sublw	low (_UART_TX_TEXT+9)
  7288  00018A  6ED9               	movwf	fsr2l,c
  7289  00018C  6ADA               	clrf	fsr2h,c
  7290  00018E  504D               	movf	_Etat_Precedent_Index,w,c
  7291  000190  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  7292  000192  6E0F               	movwf	___awmod@dividend,c
  7293  000194  0E00               	movlw	0
  7294  000196  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  7295  000198  6E10               	movwf	___awmod@dividend+1,c
  7296  00019A  6A12               	clrf	___awmod@divisor+1,c
  7297  00019C  0E0A               	movlw	10
  7298  00019E  6E11               	movwf	___awmod@divisor,c
  7299  0001A0  EC28  F00C         	call	___awmod	;wreg free
  7300  0001A4  500F               	movf	?___awmod,w,c
  7301  0001A6  0F6A               	addlw	low _Etat_Log
  7302  0001A8  6EE1               	movwf	fsr1l,c
  7303  0001AA  6AE2               	clrf	fsr1h,c
  7304  0001AC  50E7               	movf	indf1,w,c
  7305  0001AE  EC2E  F00F         	call	_Etat_Intitule
  7306  0001B2  6EDF               	movwf	indf2,c
  7307  0001B4  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  7308  0001B6  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  7309  0001B8  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  7310  0001BA  D7E5               	goto	l7556
  7311  0001BC  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  7312  0001BE  E103               	bnz	u5650
  7313  0001C0  0E0A               	movlw	10
  7314  0001C2  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  7315  0001C4  E3E0               	bnc	l7556
  7316  0001C6                     u5650:
  7317                           
  7318                           ;eusart.c: 882: }
  7319                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  7320  0001C6  0100               	movlb	0	; () banked
  7321  0001C8  6BB5               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  7322  0001CA  D7A1               	goto	l7542
  7323  0001CC                     l7564:
  7324                           
  7325                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  7326  0001CC  0EAB               	movlw	low _UART_TX_TEXT
  7327  0001CE  6E1B               	movwf	sprintf@sp,c
  7328  0001D0  0E9B               	movlw	low STR_4
  7329  0001D2  6E1C               	movwf	sprintf@f,c
  7330  0001D4  0E3F               	movlw	high STR_4
  7331  0001D6  6E1D               	movwf	sprintf@f+1,c
  7332  0001D8  C0A5  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  7333  0001DC  6A1F               	clrf	?_sprintf+4,c
  7334  0001DE  C09F  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  7335  0001E2  6A21               	clrf	?_sprintf+6,c
  7336  0001E4  C0A3  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  7337  0001E8  6A23               	clrf	?_sprintf+8,c
  7338  0001EA  EC56  F004         	call	_sprintf	;wreg free
  7339  0001EE  D78F               	goto	l7542
  7340  0001F0                     l7568:
  7341                           
  7342                           ;eusart.c: 898: consigne = (char) (5 * Da);
  7343  0001F0  0100               	movlb	0	; () banked
  7344  0001F2  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7345  0001F4  0D05               	mullw	5
  7346  0001F6  CFF3 F095          	movff	prodl,_consigne	;volatile
  7347                           
  7348                           ;eusart.c: 900: break;
  7349  0001FA  0012               	return	
  7350  0001FC                     l7570:
  7351                           
  7352                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  7353  0001FC  0EAB               	movlw	low _UART_TX_TEXT
  7354  0001FE  6E1B               	movwf	sprintf@sp,c
  7355  000200  0EF9               	movlw	low STR_5
  7356  000202  6E1C               	movwf	sprintf@f,c
  7357  000204  0E3F               	movlw	high STR_5
  7358  000206  6E1D               	movwf	sprintf@f+1,c
  7359  000208  C0AA  F01E         	movff	_P4_busy,?_sprintf+3
  7360  00020C  6A1F               	clrf	?_sprintf+4,c
  7361  00020E  EC56  F004         	call	_sprintf	;wreg free
  7362  000212  D77D               	goto	l7542
  7363  000214                     l7574:
  7364                           
  7365                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  7366  000214  0EAB               	movlw	low _UART_TX_TEXT
  7367  000216  6E1B               	movwf	sprintf@sp,c
  7368  000218  0EB9               	movlw	low (STR_4+30)
  7369  00021A  6E1C               	movwf	sprintf@f,c
  7370  00021C  0E3F               	movlw	high (STR_4+30)
  7371  00021E  6E1D               	movwf	sprintf@f+1,c
  7372  000220  0100               	movlb	0	; () banked
  7373  000222  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7374  000224  0FD0               	addlw	208
  7375  000226  EC48  F00F         	call	_Etat_Get
  7376  00022A  6E1E               	movwf	?_sprintf+3,c
  7377  00022C  6A1F               	clrf	?_sprintf+4,c
  7378  00022E  EC56  F004         	call	_sprintf	;wreg free
  7379  000232  D76D               	goto	l7542
  7380  000234                     l7578:
  7381                           
  7382                           ;eusart.c: 920: Etat_Update(Da);
  7383  000234  0100               	movlb	0	; () banked
  7384  000236  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7385  000238  EF8A  F010         	goto	_Etat_Update
  7386  00023C                     l7580:
  7387                           
  7388                           ; BSR set to: 2
  7389                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  7390  00023C  0100               	movlb	0	; () banked
  7391  00023E  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7392  000240  0D0A               	mullw	10
  7393  000242  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7394  000246  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7395  000248  0D64               	mullw	100
  7396  00024A  50F3               	movf	prodl,w,c
  7397  00024C  0102               	movlb	2	; () banked
  7398  00024E  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7399  000250  0100               	movlb	0	; () banked
  7400  000252  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7401  000254  0F30               	addlw	48
  7402  000256  6F90               	movwf	_Pelle_I_Max& (0+255),b
  7403                           
  7404                           ;eusart.c: 943: break;
  7405  000258  0012               	return	
  7406  00025A                     l7582:
  7407                           
  7408                           ; BSR set to: 2
  7409                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7410  00025A  0100               	movlb	0	; () banked
  7411  00025C  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7412  00025E  0D0A               	mullw	10
  7413  000260  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7414  000264  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7415  000266  0D64               	mullw	100
  7416  000268  50F3               	movf	prodl,w,c
  7417  00026A  0102               	movlb	2	; () banked
  7418  00026C  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7419  00026E  0100               	movlb	0	; () banked
  7420  000270  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7421  000272  0F30               	addlw	48
  7422  000274  6E4A               	movwf	_Bequille_I_Max,c
  7423                           
  7424                           ;eusart.c: 946: break;
  7425  000276  0012               	return	
  7426  000278                     l7586:
  7427  000278  0ED0               	movlw	208
  7428  00027A  0102               	movlb	2	; () banked
  7429  00027C  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7430  00027E  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7431  000280  0100               	movlb	0	; () banked
  7432  000282  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7433  000284  0102               	movlb	2	; () banked
  7434  000286  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7435  000288  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7436  00028A  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7437  00028C  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7438  00028E  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7439  000290  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7440                           
  7441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7442                           ; Switch size 1, requested type "speed"
  7443                           ; Number of cases is 1, Range of values is 0 to 0
  7444                           ; switch strategies available:
  7445                           ; Name         Instructions Cycles
  7446                           ; simple_byte            4     3 (average)
  7447                           ;	Chosen strategy is simple_byte
  7448  000292  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7449  000294  A4D8               	btfss	status,2,c
  7450  000296  0012               	return	
  7451                           
  7452                           ; BSR set to: 2
  7453                           ; Switch size 1, requested type "speed"
  7454                           ; Number of cases is 3, Range of values is 1 to 3
  7455                           ; switch strategies available:
  7456                           ; Name         Instructions Cycles
  7457                           ; simple_byte           10     6 (average)
  7458                           ;	Chosen strategy is simple_byte
  7459  000298  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7460  00029A  0A01               	xorlw	1	; case 1
  7461  00029C  B4D8               	btfsc	status,2,c
  7462  00029E  0012               	return	
  7463  0002A0  0A03               	xorlw	3	; case 2
  7464  0002A2  E0CC               	bz	l7580
  7465  0002A4  0A01               	xorlw	1	; case 3
  7466  0002A6  E0D9               	bz	l7582
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;eusart.c: 949: break;
  7470  0002A8  0012               	return	
  7471  0002AA                     l7588:
  7472                           
  7473                           ; BSR set to: 2
  7474                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7475  0002AA  0100               	movlb	0	; () banked
  7476  0002AC  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7477  0002AE  0D0A               	mullw	10
  7478  0002B0  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7479  0002B4  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7480  0002B6  0D64               	mullw	100
  7481  0002B8  50F3               	movf	prodl,w,c
  7482  0002BA  0102               	movlb	2	; () banked
  7483  0002BC  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7484  0002BE  0100               	movlb	0	; () banked
  7485  0002C0  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7486  0002C2  0F30               	addlw	48
  7487  0002C4  6E4B               	movwf	_Consigne_en_A,c
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  7491  0002C6  C04B  F095         	movff	_Consigne_en_A,_consigne	;volatile
  7492                           
  7493                           ; BSR set to: 0
  7494                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  7495  0002CA  C095  F094         	movff	_consigne,_Consigne_Max	;volatile
  7496                           
  7497                           ;eusart.c: 968: break;
  7498  0002CE  D0D2               	goto	l7640
  7499  0002D0                     l7594:
  7500                           
  7501                           ; BSR set to: 2
  7502                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7503  0002D0  0100               	movlb	0	; () banked
  7504  0002D2  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7505  0002D4  0D0A               	mullw	10
  7506  0002D6  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7507  0002DA  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7508  0002DC  0D64               	mullw	100
  7509  0002DE  50F3               	movf	prodl,w,c
  7510  0002E0  0102               	movlb	2	; () banked
  7511  0002E2  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7512  0002E4  0100               	movlb	0	; () banked
  7513  0002E6  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7514  0002E8  0F30               	addlw	48
  7515  0002EA  6FA4               	movwf	_nb_s_patinage& (0+255),b
  7516                           
  7517                           ;eusart.c: 971: break;
  7518  0002EC  D0C3               	goto	l7640
  7519  0002EE                     l7596:
  7520                           
  7521                           ; BSR set to: 2
  7522                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7523  0002EE  0100               	movlb	0	; () banked
  7524  0002F0  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7525  0002F2  0D0A               	mullw	10
  7526  0002F4  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7527  0002F8  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7528  0002FA  0D64               	mullw	100
  7529  0002FC  50F3               	movf	prodl,w,c
  7530  0002FE  0102               	movlb	2	; () banked
  7531  000300  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7532  000302  0100               	movlb	0	; () banked
  7533  000304  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7534  000306  0F30               	addlw	48
  7535  000308  6FA2               	movwf	_nb_100ms_pion& (0+255),b
  7536                           
  7537                           ;eusart.c: 974: break;
  7538  00030A  D0B4               	goto	l7640
  7539  00030C                     l7598:
  7540                           
  7541                           ; BSR set to: 2
  7542                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  7543  00030C  0100               	movlb	0	; () banked
  7544  00030E  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7545  000310  0D0A               	mullw	10
  7546  000312  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7547  000316  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7548  000318  0D64               	mullw	100
  7549  00031A  50F3               	movf	prodl,w,c
  7550  00031C  0102               	movlb	2	; () banked
  7551  00031E  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7552  000320  0100               	movlb	0	; () banked
  7553  000322  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7554  000324  0F30               	addlw	48
  7555  000326  6FA1               	movwf	_nb_100ms_platine& (0+255),b
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  7559  000328  C0A1  F0EB         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  7560                           
  7561                           ;eusart.c: 983: break;
  7562  00032C  D0A3               	goto	l7640
  7563  00032E                     l7602:
  7564                           
  7565                           ; BSR set to: 2
  7566                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  7567  00032E  0100               	movlb	0	; () banked
  7568  000330  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7569  000332  0D0A               	mullw	10
  7570  000334  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7571  000338  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7572  00033A  0D64               	mullw	100
  7573  00033C  50F3               	movf	prodl,w,c
  7574  00033E  0102               	movlb	2	; () banked
  7575  000340  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7576  000342  0100               	movlb	0	; () banked
  7577  000344  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7578  000346  0F30               	addlw	48
  7579  000348  6FA0               	movwf	_nb_s_pelle& (0+255),b
  7580                           
  7581                           ;eusart.c: 986: break;
  7582  00034A  D094               	goto	l7640
  7583  00034C                     l7604:
  7584                           
  7585                           ; BSR set to: 2
  7586                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  7587  00034C  0100               	movlb	0	; () banked
  7588  00034E  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7589  000350  0FD0               	addlw	208
  7590  000352  6F9C               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser& (0+255),b
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  7594  000354  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  7595                           
  7596                           ;eusart.c: 990: break;
  7597  000358  D08D               	goto	l7640
  7598  00035A                     l7608:
  7599                           
  7600                           ; BSR set to: 2
  7601                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  7602  00035A  0100               	movlb	0	; () banked
  7603  00035C  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7604  00035E  0FD0               	addlw	208
  7605  000360  6F9A               	movwf	_Patinage_Nb_Essai& (0+255),b
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  7609  000362  C099  F09A         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  7610                           
  7611                           ;eusart.c: 994: break;
  7612  000366  D086               	goto	l7640
  7613  000368                     l7612:
  7614                           
  7615                           ; BSR set to: 2
  7616                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7617  000368  0100               	movlb	0	; () banked
  7618  00036A  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7619  00036C  0D0A               	mullw	10
  7620  00036E  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7621  000372  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7622  000374  0D64               	mullw	100
  7623  000376  50F3               	movf	prodl,w,c
  7624  000378  0102               	movlb	2	; () banked
  7625  00037A  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7626  00037C  0100               	movlb	0	; () banked
  7627  00037E  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7628  000380  0F30               	addlw	48
  7629  000382  6E4B               	movwf	_Consigne_en_A,c
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  7633  000384  C04B  F093         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  7634                           
  7635                           ;eusart.c: 1000: break;
  7636  000388  D075               	goto	l7640
  7637  00038A                     l7616:
  7638                           
  7639                           ; BSR set to: 2
  7640                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7641  00038A  0100               	movlb	0	; () banked
  7642  00038C  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7643  00038E  0D0A               	mullw	10
  7644  000390  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7645  000394  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7646  000396  0D64               	mullw	100
  7647  000398  50F3               	movf	prodl,w,c
  7648  00039A  0102               	movlb	2	; () banked
  7649  00039C  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7650  00039E  0100               	movlb	0	; () banked
  7651  0003A0  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7652  0003A2  0F30               	addlw	48
  7653  0003A4  6E4B               	movwf	_Consigne_en_A,c
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  7657  0003A6  C04B  F092         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  7658                           
  7659                           ;eusart.c: 1006: break;
  7660  0003AA  D064               	goto	l7640
  7661  0003AC                     l7620:
  7662                           
  7663                           ; BSR set to: 2
  7664                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7665  0003AC  0100               	movlb	0	; () banked
  7666  0003AE  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7667  0003B0  0D0A               	mullw	10
  7668  0003B2  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7669  0003B6  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7670  0003B8  0D64               	mullw	100
  7671  0003BA  50F3               	movf	prodl,w,c
  7672  0003BC  0102               	movlb	2	; () banked
  7673  0003BE  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7674  0003C0  0100               	movlb	0	; () banked
  7675  0003C2  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7676  0003C4  0F30               	addlw	48
  7677  0003C6  6E4B               	movwf	_Consigne_en_A,c
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  7681  0003C8  C04B  F091         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  7682                           
  7683                           ;eusart.c: 1012: break;
  7684  0003CC  D053               	goto	l7640
  7685  0003CE                     l7626:
  7686  0003CE  0ED0               	movlw	208
  7687  0003D0  0102               	movlb	2	; () banked
  7688  0003D2  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7689  0003D4  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7690  0003D6  0100               	movlb	0	; () banked
  7691  0003D8  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7692  0003DA  0102               	movlb	2	; () banked
  7693  0003DC  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7694  0003DE  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7695  0003E0  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7696  0003E2  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7697  0003E4  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7698  0003E6  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7699                           
  7700                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7701                           ; Switch size 1, requested type "speed"
  7702                           ; Number of cases is 1, Range of values is 0 to 0
  7703                           ; switch strategies available:
  7704                           ; Name         Instructions Cycles
  7705                           ; simple_byte            4     3 (average)
  7706                           ;	Chosen strategy is simple_byte
  7707  0003E8  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7708  0003EA  E144               	bnz	l7640
  7709                           
  7710                           ; BSR set to: 2
  7711                           ; Switch size 1, requested type "speed"
  7712                           ; Number of cases is 10, Range of values is 0 to 9
  7713                           ; switch strategies available:
  7714                           ; Name         Instructions Cycles
  7715                           ; simple_byte           31    16 (average)
  7716                           ;	Chosen strategy is simple_byte
  7717  0003EC  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7718  0003EE  E101 D75C          	bz	l7588
  7719  0003F2  0A01               	xorlw	1	; case 1
  7720  0003F4  E101 D76C          	bz	l7594
  7721  0003F8  0A03               	xorlw	3	; case 2
  7722  0003FA  E101 D778          	bz	l7596
  7723  0003FE  0A01               	xorlw	1	; case 3
  7724  000400  E085               	bz	l7598
  7725  000402  0A07               	xorlw	7	; case 4
  7726  000404  E094               	bz	l7602
  7727  000406  0A01               	xorlw	1	; case 5
  7728  000408  E0A1               	bz	l7604
  7729  00040A  0A03               	xorlw	3	; case 6
  7730  00040C  E0A6               	bz	l7608
  7731  00040E  0A01               	xorlw	1	; case 7
  7732  000410  E0AB               	bz	l7612
  7733  000412  0A0F               	xorlw	15	; case 8
  7734  000414  E0BA               	bz	l7616
  7735  000416  0A01               	xorlw	1	; case 9
  7736  000418  E0C9               	bz	l7620
  7737                           
  7738                           ; BSR set to: 2
  7739                           ;eusart.c: 1031: switch (Da - 0x30) {
  7740                           
  7741                           ;eusart.c: 1024: case 'V':
  7742  00041A  D02C               	goto	l7640
  7743  00041C                     l7628:
  7744                           
  7745                           ; BSR set to: 2
  7746                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  7747  00041C  0EAB               	movlw	low _UART_TX_TEXT
  7748  00041E  6E1B               	movwf	sprintf@sp,c
  7749  000420  0E6A               	movlw	low STR_7
  7750  000422  6E1C               	movwf	sprintf@f,c
  7751  000424  0E3F               	movlw	high STR_7
  7752  000426  6E1D               	movwf	sprintf@f+1,c
  7753  000428  C095  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7754  00042C  6A1F               	clrf	?_sprintf+4,c
  7755  00042E  C0A4  F020         	movff	_nb_s_patinage,?_sprintf+5
  7756  000432  6A21               	clrf	?_sprintf+6,c
  7757  000434  C0A2  F022         	movff	_nb_100ms_pion,?_sprintf+7
  7758  000438  6A23               	clrf	?_sprintf+8,c
  7759  00043A  C0A1  F024         	movff	_nb_100ms_platine,?_sprintf+9
  7760  00043E  6A25               	clrf	?_sprintf+10,c
  7761  000440  C0A0  F026         	movff	_nb_s_pelle,?_sprintf+11
  7762  000444  6A27               	clrf	?_sprintf+12,c
  7763  000446  EC56  F004         	call	_sprintf	;wreg free
  7764  00044A  D661               	goto	l7542
  7765  00044C                     l7632:
  7766                           
  7767                           ; BSR set to: 2
  7768                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  7769  00044C  0EAB               	movlw	low _UART_TX_TEXT
  7770  00044E  6E1B               	movwf	sprintf@sp,c
  7771  000450  0EBC               	movlw	low STR_8
  7772  000452  6E1C               	movwf	sprintf@f,c
  7773  000454  0E3F               	movlw	high STR_8
  7774  000456  6E1D               	movwf	sprintf@f+1,c
  7775  000458  C0A8  F01E         	movff	_Etat,?_sprintf+3	;volatile
  7776  00045C  6A1F               	clrf	?_sprintf+4,c
  7777  00045E  C0A5  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  7778  000462  6A21               	clrf	?_sprintf+6,c
  7779  000464  EC56  F004         	call	_sprintf	;wreg free
  7780  000468  D652               	goto	l7542
  7781  00046A                     l1420:
  7782                           
  7783                           ; BSR set to: 2
  7784                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  7785  00046A  C0FA  F0AB         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  7786                           
  7787                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  7788  00046E  0100               	movlb	0	; () banked
  7789  000470  6BAC               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  7790  000472  D64D               	goto	l7542
  7791  000474                     l7640:
  7792  000474  0ED0               	movlw	208
  7793  000476  0102               	movlb	2	; () banked
  7794  000478  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7795  00047A  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7796  00047C  0100               	movlb	0	; () banked
  7797  00047E  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7798  000480  0102               	movlb	2	; () banked
  7799  000482  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7800  000484  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7801  000486  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7802  000488  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7803  00048A  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7804  00048C  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7805                           
  7806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7807                           ; Switch size 1, requested type "speed"
  7808                           ; Number of cases is 1, Range of values is 0 to 0
  7809                           ; switch strategies available:
  7810                           ; Name         Instructions Cycles
  7811                           ; simple_byte            4     3 (average)
  7812                           ;	Chosen strategy is simple_byte
  7813  00048E  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7814  000490  A4D8               	btfss	status,2,c
  7815  000492  0012               	return	
  7816                           
  7817                           ; BSR set to: 2
  7818                           ; Switch size 1, requested type "speed"
  7819                           ; Number of cases is 3, Range of values is 0 to 9
  7820                           ; switch strategies available:
  7821                           ; Name         Instructions Cycles
  7822                           ; simple_byte           10     6 (average)
  7823                           ;	Chosen strategy is simple_byte
  7824  000494  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7825  000496  E0C2               	bz	l7628
  7826  000498  0A01               	xorlw	1	; case 1
  7827  00049A  E0D8               	bz	l7632
  7828  00049C  0A08               	xorlw	8	; case 9
  7829  00049E  A4D8               	btfss	status,2,c
  7830  0004A0  0012               	return	
  7831  0004A2  D7E3               	goto	l1420
  7832  0004A4                     l7642:
  7833                           
  7834                           ;eusart.c: 1062: Alarme_On(8);
  7835  0004A4  0E08               	movlw	8
  7836  0004A6  EF75  F011         	goto	_Alarme_On
  7837  0004AA                     l7644:
  7838                           
  7839                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  7840  0004AA  0EAB               	movlw	low _UART_TX_TEXT
  7841  0004AC  6E1B               	movwf	sprintf@sp,c
  7842  0004AE  0EB9               	movlw	low (STR_4+30)
  7843  0004B0  6E1C               	movwf	sprintf@f,c
  7844  0004B2  0E3F               	movlw	high (STR_4+30)
  7845  0004B4  6E1D               	movwf	sprintf@f+1,c
  7846  0004B6  C0A9  F01E         	movff	_Version,?_sprintf+3
  7847  0004BA  6A1F               	clrf	?_sprintf+4,c
  7848  0004BC  EC56  F004         	call	_sprintf	;wreg free
  7849  0004C0  D626               	goto	l7542
  7850  0004C2                     l7648:
  7851                           
  7852                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  7853  0004C2  0EAB               	movlw	low _UART_TX_TEXT
  7854  0004C4  6E1B               	movwf	sprintf@sp,c
  7855  0004C6  0E16               	movlw	low STR_10
  7856  0004C8  6E1C               	movwf	sprintf@f,c
  7857  0004CA  0E3F               	movlw	high STR_10
  7858  0004CC  6E1D               	movwf	sprintf@f+1,c
  7859  0004CE  0E00               	movlw	0
  7860  0004D0  EC48  F00F         	call	_Etat_Get
  7861  0004D4  6E1E               	movwf	?_sprintf+3,c
  7862  0004D6  6A1F               	clrf	?_sprintf+4,c
  7863  0004D8  0E01               	movlw	1
  7864  0004DA  EC48  F00F         	call	_Etat_Get
  7865  0004DE  6E20               	movwf	?_sprintf+5,c
  7866  0004E0  6A21               	clrf	?_sprintf+6,c
  7867  0004E2  C0A7  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7868  0004E6  6A23               	clrf	?_sprintf+8,c
  7869  0004E8  C09F  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  7870  0004EC  6A25               	clrf	?_sprintf+10,c
  7871  0004EE  C098  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  7872  0004F2  6A27               	clrf	?_sprintf+12,c
  7873  0004F4  C097  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  7874  0004F8  6A29               	clrf	?_sprintf+14,c
  7875  0004FA  C095  F02A         	movff	_consigne,?_sprintf+15	;volatile
  7876  0004FE  6A2B               	clrf	?_sprintf+16,c
  7877  000500  C0A4  F02C         	movff	_nb_s_patinage,?_sprintf+17
  7878  000504  6A2D               	clrf	?_sprintf+18,c
  7879  000506  C0A2  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  7880  00050A  6A2F               	clrf	?_sprintf+20,c
  7881  00050C  C0A1  F030         	movff	_nb_100ms_platine,?_sprintf+21
  7882  000510  6A31               	clrf	?_sprintf+22,c
  7883  000512  C0A0  F032         	movff	_nb_s_pelle,?_sprintf+23
  7884  000516  6A33               	clrf	?_sprintf+24,c
  7885  000518  0E01               	movlw	1
  7886  00051A  A480               	btfss	3968,2,c	;volatile
  7887  00051C  0E00               	movlw	0
  7888  00051E  6E34               	movwf	?_sprintf+25,c
  7889  000520  6A35               	clrf	?_sprintf+26,c
  7890  000522  0E01               	movlw	1
  7891  000524  A682               	btfss	3970,3,c	;volatile
  7892  000526  0E00               	movlw	0
  7893  000528  6E36               	movwf	?_sprintf+27,c
  7894  00052A  6A37               	clrf	?_sprintf+28,c
  7895  00052C  0E01               	movlw	1
  7896  00052E  A48D               	btfss	3981,2,c	;volatile
  7897  000530  0E00               	movlw	0
  7898  000532  6E38               	movwf	?_sprintf+29,c
  7899  000534  6A39               	clrf	?_sprintf+30,c
  7900  000536  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  7901  00053A  6A3B               	clrf	?_sprintf+32,c
  7902  00053C  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  7903  000540  6A3D               	clrf	?_sprintf+34,c
  7904  000542  C0A9  F03E         	movff	_Version,?_sprintf+35
  7905  000546  6A3F               	clrf	?_sprintf+36,c
  7906  000548  EC56  F004         	call	_sprintf	;wreg free
  7907  00054C  D5E0               	goto	l7542
  7908  00054E                     l7652:
  7909                           
  7910                           ;eusart.c: 1148: Alarme_On(7);
  7911  00054E  0E07               	movlw	7
  7912  000550  EF75  F011         	goto	_Alarme_On
  7913  000554                     l7654:
  7914                           
  7915                           ;eusart.c: 1155: Etat_Update(0);
  7916  000554  0E00               	movlw	0
  7917  000556  EC8A  F010         	call	_Etat_Update
  7918  00055A                     l7656:
  7919                           
  7920                           ;eusart.c: 1157: P4_busy = 0;
  7921  00055A  0100               	movlb	0	; () banked
  7922  00055C  6BAA               	clrf	_P4_busy& (0+255),b
  7923                           
  7924                           ;eusart.c: 1161: break;
  7925  00055E  0012               	return	
  7926  000560                     l1429:
  7927                           
  7928                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  7929  000560  A682               	btfss	3970,3,c	;volatile
  7930  000562  D0CC               	goto	l7772
  7931                           
  7932                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  7933  000564  0100               	movlb	0	; () banked
  7934  000566  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7935  000568  0FD0               	addlw	208
  7936  00056A  6F8D               	movwf	_direction& (0+255),b	;volatile
  7937                           
  7938                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  7939  00056C  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7940  00056E  0FD0               	addlw	208
  7941  000570  6F8F               	movwf	_type_consigne& (0+255),b
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  7945  000572  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7946  000574  0D0A               	mullw	10
  7947  000576  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7948  00057A  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7949  00057C  0D64               	mullw	100
  7950  00057E  50F3               	movf	prodl,w,c
  7951  000580  0102               	movlb	2	; () banked
  7952  000582  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7953  000584  0100               	movlb	0	; () banked
  7954  000586  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  7955  000588  0F30               	addlw	48
  7956  00058A  6F8E               	movwf	_mouvement_option& (0+255),b
  7957                           
  7958                           ;eusart.c: 1180: switch (E - 0x30) {
  7959  00058C  D008               	goto	l7664
  7960  00058E                     l1432:
  7961                           
  7962                           ; BSR set to: 2
  7963                           ;eusart.c: 1182: Option_Multitas = 1;
  7964  00058E  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7965  000590  D004               	goto	L1
  7966  000592                     l1434:
  7967                           
  7968                           ; BSR set to: 2
  7969                           ;eusart.c: 1186: Option_Multitas = 0;
  7970  000592  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7971                           
  7972                           ;eusart.c: 1187: Option_Pailleux = 1;
  7973  000594  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  7974                           
  7975                           ;eusart.c: 1188: break;
  7976  000596  D018               	goto	l7666
  7977  000598                     l1435:
  7978                           
  7979                           ; BSR set to: 2
  7980                           ;eusart.c: 1192: Option_Multitas = 0;
  7981  000598  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7982  00059A                     L1:
  7983                           
  7984                           ;eusart.c: 1193: Option_Pailleux = 0;
  7985  00059A  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  7986                           
  7987                           ;eusart.c: 1194: }
  7988  00059C  D015               	goto	l7666
  7989  00059E                     l7664:
  7990                           
  7991                           ; BSR set to: 0
  7992  00059E  0ED0               	movlw	208
  7993  0005A0  0102               	movlb	2	; () banked
  7994  0005A2  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7995  0005A4  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7996  0005A6  0100               	movlb	0	; () banked
  7997  0005A8  51FE               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  7998  0005AA  0102               	movlb	2	; () banked
  7999  0005AC  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8000  0005AE  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8001  0005B0  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8002  0005B2  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8003  0005B4  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8004  0005B6  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8005                           
  8006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8007                           ; Switch size 1, requested type "speed"
  8008                           ; Number of cases is 1, Range of values is 0 to 0
  8009                           ; switch strategies available:
  8010                           ; Name         Instructions Cycles
  8011                           ; simple_byte            4     3 (average)
  8012                           ;	Chosen strategy is simple_byte
  8013  0005B8  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8014  0005BA  E1EE               	bnz	l1435
  8015                           
  8016                           ; BSR set to: 2
  8017                           ; Switch size 1, requested type "speed"
  8018                           ; Number of cases is 2, Range of values is 1 to 2
  8019                           ; switch strategies available:
  8020                           ; Name         Instructions Cycles
  8021                           ; simple_byte            7     4 (average)
  8022                           ;	Chosen strategy is simple_byte
  8023  0005BC  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8024  0005BE  0A01               	xorlw	1	; case 1
  8025  0005C0  E0E6               	bz	l1432
  8026  0005C2  0A03               	xorlw	3	; case 2
  8027  0005C4  E0E6               	bz	l1434
  8028  0005C6  D7E8               	goto	l1435
  8029  0005C8                     l7666:
  8030                           
  8031                           ; BSR set to: 2
  8032                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  8033  0005C8  0E31               	movlw	49
  8034  0005CA  0100               	movlb	0	; () banked
  8035  0005CC  19FE               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8036  0005CE  E102               	bnz	l1436
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;eusart.c: 1200: Option_Multitas = 1;
  8040  0005D0  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8041                           
  8042                           ;eusart.c: 1202: } else {
  8043  0005D2  D001               	goto	l1437
  8044  0005D4                     l1436:
  8045                           
  8046                           ; BSR set to: 0
  8047                           ;eusart.c: 1203: Option_Multitas = 0;
  8048  0005D4  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8049  0005D6                     l1437:
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;eusart.c: 1204: }
  8053                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8054  0005D6  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8055                           
  8056                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8057  0005DA  C099  F09A         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;eusart.c: 1214: P4_busy = 1;
  8061  0005DE  0E01               	movlw	1
  8062  0005E0  6FAA               	movwf	_P4_busy& (0+255),b
  8063                           
  8064                           ;eusart.c: 1215: switch (direction) {
  8065  0005E2  D018               	goto	l7698
  8066  0005E4                     l7672:
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;eusart.c: 1218: if (Etat == 0) {
  8070  0005E4  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8071  0005E6  E101               	bnz	l7676
  8072  0005E8  D0A8               	goto	l7782
  8073  0005EA                     l7676:
  8074                           
  8075                           ; BSR set to: 0
  8076                           ;eusart.c: 1223: if (Etat != 2) {
  8077  0005EA  0E02               	movlw	2
  8078  0005EC  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8079  0005EE  B4D8               	btfsc	status,2,c
  8080  0005F0  0012               	return	
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;eusart.c: 1224: Coupe_Moteur();
  8084  0005F2  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  8085                           
  8086                           ;eusart.c: 1225: delay_1s();
  8087  0005F6  ECE6  F00F         	call	_delay_1s	;wreg free
  8088  0005FA  D09F               	goto	l7782
  8089  0005FC                     l7684:
  8090                           
  8091                           ; BSR set to: 0
  8092                           ;eusart.c: 1233: if (Etat == 0) {
  8093  0005FC  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8094  0005FE  E101               	bnz	l7688
  8095  000600  D0A0               	goto	l7788
  8096  000602                     l7688:
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;eusart.c: 1236: if (Etat != 3) {
  8100  000602  0E03               	movlw	3
  8101  000604  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8102  000606  B4D8               	btfsc	status,2,c
  8103  000608  0012               	return	
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;eusart.c: 1237: Coupe_Moteur();
  8107  00060A  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  8108                           
  8109                           ;eusart.c: 1238: delay_1s();
  8110  00060E  ECE6  F00F         	call	_delay_1s	;wreg free
  8111  000612  D097               	goto	l7788
  8112  000614                     l7698:
  8113                           
  8114                           ; BSR set to: 0
  8115  000614  518D               	movf	_direction& (0+255),w,b	;volatile
  8116                           
  8117                           ; Switch size 1, requested type "speed"
  8118                           ; Number of cases is 2, Range of values is 0 to 1
  8119                           ; switch strategies available:
  8120                           ; Name         Instructions Cycles
  8121                           ; simple_byte            7     4 (average)
  8122                           ;	Chosen strategy is simple_byte
  8123  000616  E0F2               	bz	l7684
  8124  000618  0A01               	xorlw	1	; case 1
  8125  00061A  A4D8               	btfss	status,2,c
  8126  00061C  0012               	return	
  8127  00061E  D7E2               	goto	l7672
  8128  000620                     l1450:
  8129                           
  8130                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  8131  000620  A682               	btfss	3970,3,c	;volatile
  8132  000622  D06C               	goto	l7772
  8133                           
  8134                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  8135  000624  0100               	movlb	0	; () banked
  8136  000626  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8137  000628  0FD0               	addlw	208
  8138  00062A  6F8D               	movwf	_direction& (0+255),b	;volatile
  8139                           
  8140                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  8141  00062C  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8142  00062E  0FD0               	addlw	208
  8143  000630  6F8F               	movwf	_type_consigne& (0+255),b
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8147  000632  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8148  000634  0D0A               	mullw	10
  8149  000636  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8150  00063A  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8151  00063C  0D64               	mullw	100
  8152  00063E  50F3               	movf	prodl,w,c
  8153  000640  0102               	movlb	2	; () banked
  8154  000642  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8155  000644  0100               	movlb	0	; () banked
  8156  000646  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8157  000648  0F30               	addlw	48
  8158  00064A  6F8E               	movwf	_mouvement_option& (0+255),b
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;eusart.c: 1269: P4_busy = 1;
  8162  00064C  0E01               	movlw	1
  8163  00064E  6FAA               	movwf	_P4_busy& (0+255),b
  8164                           
  8165                           ;eusart.c: 1270: switch (direction) {
  8166  000650  D018               	goto	l7734
  8167  000652                     l7708:
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;eusart.c: 1274: if (Etat == 0) {
  8171  000652  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8172  000654  E101               	bnz	l7712
  8173  000656  D07E               	goto	l7794
  8174  000658                     l7712:
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;eusart.c: 1277: if (Etat != 5) {
  8178  000658  0E05               	movlw	5
  8179  00065A  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8180  00065C  B4D8               	btfsc	status,2,c
  8181  00065E  0012               	return	
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;eusart.c: 1278: Coupe_Moteur();
  8185  000660  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  8186                           
  8187                           ;eusart.c: 1279: delay_1s();
  8188  000664  ECE6  F00F         	call	_delay_1s	;wreg free
  8189  000668  D075               	goto	l7794
  8190  00066A                     l7720:
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;eusart.c: 1299: if (Etat == 0) {
  8194  00066A  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8195  00066C  E101               	bnz	l7724
  8196  00066E  D075               	goto	l7796
  8197  000670                     l7724:
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;eusart.c: 1302: if (Etat != 4) {
  8201  000670  0E04               	movlw	4
  8202  000672  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8203  000674  B4D8               	btfsc	status,2,c
  8204  000676  0012               	return	
  8205                           
  8206                           ; BSR set to: 0
  8207                           ;eusart.c: 1303: Coupe_Moteur();
  8208  000678  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  8209                           
  8210                           ;eusart.c: 1304: delay_1s();
  8211  00067C  ECE6  F00F         	call	_delay_1s	;wreg free
  8212  000680  D06C               	goto	l7796
  8213  000682                     l7734:
  8214                           
  8215                           ; BSR set to: 0
  8216  000682  518D               	movf	_direction& (0+255),w,b	;volatile
  8217                           
  8218                           ; Switch size 1, requested type "speed"
  8219                           ; Number of cases is 2, Range of values is 0 to 1
  8220                           ; switch strategies available:
  8221                           ; Name         Instructions Cycles
  8222                           ; simple_byte            7     4 (average)
  8223                           ;	Chosen strategy is simple_byte
  8224  000684  E0F2               	bz	l7720
  8225  000686  0A01               	xorlw	1	; case 1
  8226  000688  A4D8               	btfss	status,2,c
  8227  00068A  0012               	return	
  8228  00068C  D7E2               	goto	l7708
  8229  00068E                     l1464:
  8230                           
  8231                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  8232  00068E  A682               	btfss	3970,3,c	;volatile
  8233  000690  D035               	goto	l7772
  8234                           
  8235                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  8236  000692  0100               	movlb	0	; () banked
  8237  000694  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8238  000696  0FD0               	addlw	208
  8239  000698  6F8D               	movwf	_direction& (0+255),b	;volatile
  8240                           
  8241                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  8242  00069A  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8243  00069C  0FD0               	addlw	208
  8244  00069E  6F8F               	movwf	_type_consigne& (0+255),b
  8245                           
  8246                           ; BSR set to: 0
  8247                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8248  0006A0  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8249  0006A2  0D0A               	mullw	10
  8250  0006A4  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8251  0006A8  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8252  0006AA  0D64               	mullw	100
  8253  0006AC  50F3               	movf	prodl,w,c
  8254  0006AE  0102               	movlb	2	; () banked
  8255  0006B0  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8256  0006B2  0100               	movlb	0	; () banked
  8257  0006B4  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8258  0006B6  0F30               	addlw	48
  8259  0006B8  6F8E               	movwf	_mouvement_option& (0+255),b
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;eusart.c: 1341: P4_busy = 1;
  8263  0006BA  0E01               	movlw	1
  8264  0006BC  6FAA               	movwf	_P4_busy& (0+255),b
  8265                           
  8266                           ;eusart.c: 1342: switch (direction) {
  8267  0006BE  D018               	goto	l7770
  8268  0006C0                     l7744:
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;eusart.c: 1348: if (Etat == 0) {
  8272  0006C0  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8273  0006C2  E101               	bnz	l7748
  8274  0006C4  D053               	goto	l7802
  8275  0006C6                     l7748:
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;eusart.c: 1351: if (Etat != 9) {
  8279  0006C6  0E09               	movlw	9
  8280  0006C8  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8281  0006CA  B4D8               	btfsc	status,2,c
  8282  0006CC  0012               	return	
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;eusart.c: 1352: Coupe_Moteur();
  8286  0006CE  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  8287                           
  8288                           ;eusart.c: 1353: delay_1s();
  8289  0006D2  ECE6  F00F         	call	_delay_1s	;wreg free
  8290  0006D6  D04A               	goto	l7802
  8291  0006D8                     l7756:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;eusart.c: 1371: if (Etat == 0) {
  8295  0006D8  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8296  0006DA  E101               	bnz	l7760
  8297  0006DC  D04A               	goto	l7804
  8298  0006DE                     l7760:
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;eusart.c: 1374: if (Etat != 8) {
  8302  0006DE  0E08               	movlw	8
  8303  0006E0  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8304  0006E2  B4D8               	btfsc	status,2,c
  8305  0006E4  0012               	return	
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;eusart.c: 1375: Coupe_Moteur();
  8309  0006E6  EC0E  F011         	call	_Coupe_Moteur	;wreg free
  8310                           
  8311                           ;eusart.c: 1376: delay_1s();
  8312  0006EA  ECE6  F00F         	call	_delay_1s	;wreg free
  8313  0006EE  D041               	goto	l7804
  8314  0006F0                     l7770:
  8315                           
  8316                           ; BSR set to: 0
  8317  0006F0  518D               	movf	_direction& (0+255),w,b	;volatile
  8318                           
  8319                           ; Switch size 1, requested type "speed"
  8320                           ; Number of cases is 2, Range of values is 0 to 1
  8321                           ; switch strategies available:
  8322                           ; Name         Instructions Cycles
  8323                           ; simple_byte            7     4 (average)
  8324                           ;	Chosen strategy is simple_byte
  8325  0006F2  E0F2               	bz	l7756
  8326  0006F4  0A01               	xorlw	1	; case 1
  8327  0006F6  A4D8               	btfss	status,2,c
  8328  0006F8  0012               	return	
  8329  0006FA  D7E2               	goto	l7744
  8330  0006FC                     l7772:
  8331                           
  8332                           ;eusart.c: 1392: Alarme_On(4);
  8333  0006FC  0E04               	movlw	4
  8334  0006FE  EF75  F011         	goto	_Alarme_On
  8335  000702                     l7774:
  8336                           
  8337                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  8338  000702  0100               	movlb	0	; () banked
  8339  000704  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8340  000706  0FD0               	addlw	208
  8341  000708  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  8342                           
  8343                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  8344  00070A  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8345  00070C  0FD0               	addlw	208
  8346  00070E  6F8D               	movwf	_direction& (0+255),b	;volatile
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8350  000710  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8351  000712  0D0A               	mullw	10
  8352  000714  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8353  000718  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8354  00071A  0D64               	mullw	100
  8355  00071C  50F3               	movf	prodl,w,c
  8356  00071E  0102               	movlb	2	; () banked
  8357  000720  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8358  000722  0100               	movlb	0	; () banked
  8359  000724  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8360  000726  0F30               	addlw	48
  8361  000728  6F9E               	movwf	_nb_Pion_Objectif& (0+255),b
  8362                           
  8363                           ;eusart.c: 1410: switch (moteur_indice) {
  8364  00072A  D02C               	goto	l7812
  8365  00072C                     l1480:
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;eusart.c: 1412: Alarme = 0;
  8369  00072C  6BA7               	clrf	_Alarme& (0+255),b	;volatile
  8370                           
  8371                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8372  00072E  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8373                           
  8374                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8375  000732  C099  F09A         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8376                           
  8377                           ;eusart.c: 1416: switch (direction) {
  8378  000736  D008               	goto	l7792
  8379  000738                     l7778:
  8380                           
  8381                           ; BSR set to: 0
  8382                           ;eusart.c: 1419: if (Etat == 0) {
  8383  000738  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8384  00073A                     l7782:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;eusart.c: 1425: Etat_Update(2);
  8388  00073A  0E02               	movlw	2
  8389  00073C  EF8A  F010         	goto	_Etat_Update
  8390  000740                     l7784:
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;eusart.c: 1430: if (Etat == 0) {
  8394  000740  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8395  000742                     l7788:
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;eusart.c: 1434: Etat_Update(3);
  8399  000742  0E03               	movlw	3
  8400  000744  EF8A  F010         	goto	_Etat_Update
  8401  000748                     l7792:
  8402                           
  8403                           ; BSR set to: 0
  8404  000748  518D               	movf	_direction& (0+255),w,b	;volatile
  8405                           
  8406                           ; Switch size 1, requested type "speed"
  8407                           ; Number of cases is 2, Range of values is 0 to 1
  8408                           ; switch strategies available:
  8409                           ; Name         Instructions Cycles
  8410                           ; simple_byte            7     4 (average)
  8411                           ;	Chosen strategy is simple_byte
  8412  00074A  E0FA               	bz	l7784
  8413  00074C  0A01               	xorlw	1	; case 1
  8414  00074E  A4D8               	btfss	status,2,c
  8415  000750  0012               	return	
  8416  000752  D7F2               	goto	l7778
  8417  000754                     l7794:
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;eusart.c: 1451: Etat_Update(5);
  8421  000754  0E05               	movlw	5
  8422  000756  EF8A  F010         	goto	_Etat_Update
  8423  00075A                     l7796:
  8424                           
  8425                           ; BSR set to: 0
  8426                           ;eusart.c: 1456: Etat_Update(4);
  8427  00075A  0E04               	movlw	4
  8428  00075C  EF8A  F010         	goto	_Etat_Update
  8429  000760                     l7800:
  8430                           
  8431                           ; BSR set to: 0
  8432  000760  518D               	movf	_direction& (0+255),w,b	;volatile
  8433                           
  8434                           ; Switch size 1, requested type "speed"
  8435                           ; Number of cases is 2, Range of values is 0 to 1
  8436                           ; switch strategies available:
  8437                           ; Name         Instructions Cycles
  8438                           ; simple_byte            7     4 (average)
  8439                           ;	Chosen strategy is simple_byte
  8440  000762  E0FB               	bz	l7796
  8441  000764  0A01               	xorlw	1	; case 1
  8442  000766  A4D8               	btfss	status,2,c
  8443  000768  0012               	return	
  8444  00076A  D7F4               	goto	l7794
  8445  00076C                     l7802:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;eusart.c: 1473: Etat_Update(9);
  8449  00076C  0E09               	movlw	9
  8450  00076E  EF8A  F010         	goto	_Etat_Update
  8451  000772                     l7804:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;eusart.c: 1478: Etat_Update(8);
  8455  000772  0E08               	movlw	8
  8456  000774  EF8A  F010         	goto	_Etat_Update
  8457  000778                     l7808:
  8458                           
  8459                           ; BSR set to: 0
  8460  000778  518D               	movf	_direction& (0+255),w,b	;volatile
  8461                           
  8462                           ; Switch size 1, requested type "speed"
  8463                           ; Number of cases is 2, Range of values is 0 to 1
  8464                           ; switch strategies available:
  8465                           ; Name         Instructions Cycles
  8466                           ; simple_byte            7     4 (average)
  8467                           ;	Chosen strategy is simple_byte
  8468  00077A  E0FB               	bz	l7804
  8469  00077C  0A01               	xorlw	1	; case 1
  8470  00077E  A4D8               	btfss	status,2,c
  8471  000780  0012               	return	
  8472  000782  D7F4               	goto	l7802
  8473  000784                     l7812:
  8474                           
  8475                           ; BSR set to: 0
  8476  000784  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
  8477                           
  8478                           ; Switch size 1, requested type "speed"
  8479                           ; Number of cases is 3, Range of values is 1 to 3
  8480                           ; switch strategies available:
  8481                           ; Name         Instructions Cycles
  8482                           ; simple_byte           10     6 (average)
  8483                           ;	Chosen strategy is simple_byte
  8484  000786  0A01               	xorlw	1	; case 1
  8485  000788  E0D1               	bz	l1480
  8486  00078A  0A03               	xorlw	3	; case 2
  8487  00078C  E0E9               	bz	l7800
  8488  00078E  0A01               	xorlw	1	; case 3
  8489  000790  A4D8               	btfss	status,2,c
  8490  000792  0012               	return	
  8491  000794  D7F1               	goto	l7808
  8492  000796                     l1504:
  8493                           
  8494                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  8495  000796  0100               	movlb	0	; () banked
  8496  000798  B1F9               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  8497  00079A  D002               	bra	u5875
  8498  00079C  948D               	bcf	3981,2,c	;volatile
  8499  00079E  D001               	bra	u5876
  8500  0007A0                     u5875:
  8501  0007A0  848D               	bsf	3981,2,c	;volatile
  8502  0007A2                     u5876:
  8503                           
  8504                           ;eusart.c: 1507: break;
  8505  0007A2  0012               	return	
  8506  0007A4                     l7814:
  8507                           
  8508                           ;eusart.c: 1510: Etat_Update(0);
  8509  0007A4  0E00               	movlw	0
  8510  0007A6  EC8A  F010         	call	_Etat_Update
  8511  0007AA  D6D7               	goto	l7656
  8512  0007AC                     l1506:
  8513                           
  8514                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  8515  0007AC  C0F9  F0A5         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  8516                           
  8517                           ;eusart.c: 1522: break;
  8518  0007B0  0012               	return	
  8519  0007B2                     l7818:
  8520                           
  8521                           ;eusart.c: 1528: IRQ_Execution(Da);
  8522  0007B2  0100               	movlb	0	; () banked
  8523  0007B4  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8524  0007B6  EFE3  F00D         	goto	_IRQ_Execution
  8525  0007BA                     l7820:
  8526                           
  8527                           ;eusart.c: 1536: Etat_Update(0);
  8528  0007BA  0E00               	movlw	0
  8529  0007BC  EF8A  F010         	goto	_Etat_Update
  8530  0007C0                     l7822:
  8531                           
  8532                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  8533  0007C0  0E0D               	movlw	13
  8534  0007C2  0102               	movlb	2	; () banked
  8535  0007C4  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  8536  0007C6  A4D8               	btfss	status,2,c
  8537                           
  8538                           ; BSR set to: 2
  8539                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  8540  0007C8  848B               	bsf	3979,2,c	;volatile
  8541  0007CA  0012               	return	
  8542  0007CC                     l7828:
  8543  0007CC  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  8544                           
  8545                           ; Switch size 1, requested type "speed"
  8546                           ; Number of cases is 38, Range of values is 48 to 118
  8547                           ; switch strategies available:
  8548                           ; Name         Instructions Cycles
  8549                           ; simple_byte          115    58 (average)
  8550                           ;	Chosen strategy is simple_byte
  8551  0007CE  0A30               	xorlw	48	; case 48
  8552  0007D0  E0F4               	bz	l7820
  8553  0007D2  0A01               	xorlw	1	; case 49
  8554  0007D4  B4D8               	btfsc	status,2,c
  8555  0007D6  0012               	return	
  8556  0007D8  0A03               	xorlw	3	; case 50
  8557  0007DA  B4D8               	btfsc	status,2,c
  8558  0007DC  0012               	return	
  8559  0007DE  0A01               	xorlw	1	; case 51
  8560  0007E0  B4D8               	btfsc	status,2,c
  8561  0007E2  0012               	return	
  8562  0007E4  0A07               	xorlw	7	; case 52
  8563  0007E6  B4D8               	btfsc	status,2,c
  8564  0007E8  0012               	return	
  8565  0007EA  0A01               	xorlw	1	; case 53
  8566  0007EC  B4D8               	btfsc	status,2,c
  8567  0007EE  0012               	return	
  8568  0007F0  0A03               	xorlw	3	; case 54
  8569  0007F2  B4D8               	btfsc	status,2,c
  8570  0007F4  0012               	return	
  8571  0007F6  0A01               	xorlw	1	; case 55
  8572  0007F8  B4D8               	btfsc	status,2,c
  8573  0007FA  0012               	return	
  8574  0007FC  0A76               	xorlw	118	; case 65
  8575  0007FE  E102 EF0E  F011    	bz	_Coupe_Moteur
  8576  000804  0A03               	xorlw	3	; case 66
  8577  000806  E101 D742          	bz	l1464
  8578  00080A  0A06               	xorlw	6	; case 68
  8579  00080C  B4D8               	btfsc	status,2,c
  8580  00080E  0012               	return	
  8581  000810  0A01               	xorlw	1	; case 69
  8582  000812  E101 D4FF          	bz	l7574
  8583  000816  0A03               	xorlw	3	; case 70
  8584  000818  B4D8               	btfsc	status,2,c
  8585  00081A  0012               	return	
  8586  00081C  0A0E               	xorlw	14	; case 72
  8587  00081E  E101 D699          	bz	l7654
  8588  000822  0A01               	xorlw	1	; case 73
  8589  000824  E0C6               	bz	l7818
  8590  000826  0A05               	xorlw	5	; case 76
  8591  000828  E101 D459          	bz	l7538
  8592  00082C  0A01               	xorlw	1	; case 77
  8593  00082E  E101 D768          	bz	l7774
  8594  000832  0A1D               	xorlw	29	; case 80
  8595  000834  E101 D5CB          	bz	l7626
  8596  000838  0A02               	xorlw	2	; case 82
  8597  00083A  E0AD               	bz	l1504
  8598  00083C  0A01               	xorlw	1	; case 83
  8599  00083E  E101 D640          	bz	l7648
  8600  000842  0A07               	xorlw	7	; case 84
  8601  000844  E101 D62E          	bz	l7642
  8602  000848  0A01               	xorlw	1	; case 85
  8603  00084A  B4D8               	btfsc	status,2,c
  8604  00084C  0012               	return	
  8605  00084E  0A03               	xorlw	3	; case 86
  8606  000850  E101 D610          	bz	l7640
  8607  000854  0A01               	xorlw	1	; case 87
  8608  000856  E101 D67A          	bz	l7652
  8609  00085A  0A0F               	xorlw	15	; case 88
  8610  00085C  E101 D680          	bz	l1429
  8611  000860  0A02               	xorlw	2	; case 90
  8612  000862  E101 D6DD          	bz	l1450
  8613  000866  0A38               	xorlw	56	; case 98
  8614  000868  E101 D4C8          	bz	l7570
  8615  00086C  0A01               	xorlw	1	; case 99
  8616  00086E  E101 D4BF          	bz	l7568
  8617  000872  0A06               	xorlw	6	; case 101
  8618  000874  E101 D4DE          	bz	l7578
  8619  000878  0A03               	xorlw	3	; case 102
  8620  00087A  E098               	bz	l1506
  8621  00087C  0A0F               	xorlw	15	; case 105
  8622  00087E  E101 D43B          	bz	l7540
  8623  000882  0A05               	xorlw	5	; case 108
  8624  000884  E101 D47D          	bz	l1386
  8625  000888  0A01               	xorlw	1	; case 109
  8626  00088A  E101 D4F5          	bz	l7586
  8627  00088E  0A1D               	xorlw	29	; case 112
  8628  000890  E101 D441          	bz	l7544
  8629  000894  0A01               	xorlw	1	; case 113
  8630  000896  E101 D499          	bz	l7564
  8631  00089A  0A03               	xorlw	3	; case 114
  8632  00089C  E083               	bz	l7814
  8633  00089E  0A01               	xorlw	1	; case 115
  8634  0008A0  E101 D459          	bz	l7548
  8635  0008A4  0A05               	xorlw	5	; case 118
  8636  0008A6  E101 D600          	bz	l7644
  8637  0008AA  D78A               	goto	l7822
  8638  0008AC                     __end_of_EUSART1_RX_T3_LOCAL:
  8639                           	opt stack 0
  8640                           tblptru	equ	0xFF8
  8641                           prodl	equ	0xFF3
  8642                           intcon	equ	0xFF2
  8643                           intcon2	equ	0xFF1
  8644                           intcon3	equ	0xFF0
  8645                           postinc0	equ	0xFEE
  8646                           wreg	equ	0xFE8
  8647                           indf1	equ	0xFE7
  8648                           postdec1	equ	0xFE5
  8649                           fsr1h	equ	0xFE2
  8650                           fsr1l	equ	0xFE1
  8651                           indf2	equ	0xFDF
  8652                           fsr2h	equ	0xFDA
  8653                           fsr2l	equ	0xFD9
  8654                           status	equ	0xFD8
  8655                           
  8656 ;; *************** function _sprintf *****************
  8657 ;; Defined at:
  8658 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  sp              1   26[COMRAM] PTR unsigned char 
  8661 ;;		 -> UART_TX_TEXT(64), 
  8662 ;;  f               2   27[COMRAM] PTR const unsigned char 
  8663 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  8664 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  8665 ;;		 -> STR_2(95), STR_1(3), 
  8666 ;; Auto vars:     Size  Location     Type
  8667 ;;  idx             1    4[BANK0 ] unsigned char 
  8668 ;;  tmpval          4    0        struct .
  8669 ;;  cp              3    0        PTR const unsigned char 
  8670 ;;  width           2   10[BANK0 ] int 
  8671 ;;  val             2    7[BANK0 ] unsigned int 
  8672 ;;  len             2    0        unsigned int 
  8673 ;;  c               1   12[BANK0 ] char 
  8674 ;;  flag            1    9[BANK0 ] unsigned char 
  8675 ;;  prec            1    6[BANK0 ] char 
  8676 ;;  ap              1    5[BANK0 ] PTR void [1]
  8677 ;;		 -> ?_sprintf(2), 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  2   26[COMRAM] int 
  8680 ;; Registers used:
  8681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/1
  8684 ;;		On exit  : 3F/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8687 ;;      Params:        37       0       0       0
  8688 ;;      Locals:         0       9       0       0
  8689 ;;      Temps:          0       4       0       0
  8690 ;;      Totals:        37      13       0       0
  8691 ;;Total ram usage:       50 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:   11
  8694 ;; This function calls:
  8695 ;;		___lwdiv
  8696 ;;		___lwmod
  8697 ;;		___wmul
  8698 ;;		_isdigit
  8699 ;; This function is called by:
  8700 ;;		_EUSART1_RX_T3_LOCAL
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           	psect	text46
  8705  0008AC                     __ptext46:
  8706                           	opt stack 0
  8707  0008AC                     _sprintf:
  8708                           	opt stack 15
  8709                           
  8710                           ;doprnt.c: 494: va_list ap;
  8711                           ;doprnt.c: 499: signed char c;
  8712                           ;doprnt.c: 501: int width;
  8713                           ;doprnt.c: 506: signed char prec;
  8714                           ;doprnt.c: 508: unsigned char flag;
  8715                           ;doprnt.c: 523: union {
  8716                           ;doprnt.c: 524: unsigned long vd;
  8717                           ;doprnt.c: 525: double integ;
  8718                           ;doprnt.c: 526: } tmpval;
  8719                           ;doprnt.c: 528: unsigned int val;
  8720                           ;doprnt.c: 529: unsigned len;
  8721                           ;doprnt.c: 530: const char * cp;
  8722                           ;doprnt.c: 533: *ap = __va_start();
  8723                           
  8724                           ;incstack = 0
  8725  0008AC  0E1E               	movlw	low (?_sprintf+3)
  8726  0008AE  0100               	movlb	0	; () banked
  8727  0008B0  6FF1               	movwf	sprintf@ap& (0+255),b
  8728                           
  8729                           ;doprnt.c: 536: while(c = *f++) {
  8730  0008B2  D15E               	goto	l7528
  8731  0008B4                     l7396:
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;doprnt.c: 538: if(c != '%')
  8735  0008B4  0E25               	movlw	37
  8736  0008B6  19F8               	xorwf	sprintf@c& (0+255),w,b
  8737  0008B8  E007               	bz	l1720
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;doprnt.c: 540: {
  8741                           ;doprnt.c: 541: ((*sp++ = (c)));
  8742  0008BA  501B               	movf	sprintf@sp,w,c
  8743  0008BC  6ED9               	movwf	fsr2l,c
  8744  0008BE  6ADA               	clrf	fsr2h,c
  8745  0008C0  C0F8  FFDF         	movff	sprintf@c,indf2
  8746                           
  8747                           ; BSR set to: 0
  8748  0008C4  2A1B               	incf	sprintf@sp,f,c
  8749                           
  8750                           ;doprnt.c: 542: continue;
  8751  0008C6  D154               	goto	l7528
  8752  0008C8                     l1720:
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;doprnt.c: 543: }
  8756                           ;doprnt.c: 546: width = 0;
  8757  0008C8  6BF6               	clrf	sprintf@width& (0+255),b
  8758  0008CA  6BF7               	clrf	(sprintf@width+1)& (0+255),b
  8759                           
  8760                           ;doprnt.c: 548: flag = 0;
  8761  0008CC  6BF5               	clrf	sprintf@flag& (0+255),b
  8762  0008CE  D003               	goto	l7406
  8763  0008D0                     l7402:
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;doprnt.c: 580: flag |= 0x04;
  8767  0008D0  85F5               	bsf	sprintf@flag& (0+255),2,b
  8768                           
  8769                           ;doprnt.c: 581: f++;
  8770  0008D2  4A1C               	infsnz	sprintf@f,f,c
  8771  0008D4  2A1D               	incf	sprintf@f+1,f,c
  8772  0008D6                     l7406:
  8773                           
  8774                           ; BSR set to: 0
  8775  0008D6  C01C  FFF6         	movff	sprintf@f,tblptrl
  8776  0008DA  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8777  0008DE                     	if	0	;tblptru may be non-zero
  8778  0008DE                     	endif
  8779  0008DE                     	if	0	;tblptru may be non-zero
  8780  0008DE                     	endif
  8781  0008DE  0008               	tblrd		*
  8782  0008E0  50F5               	movf	tablat,w,c
  8783                           
  8784                           ; Switch size 1, requested type "speed"
  8785                           ; Number of cases is 1, Range of values is 48 to 48
  8786                           ; switch strategies available:
  8787                           ; Name         Instructions Cycles
  8788                           ; simple_byte            4     3 (average)
  8789                           ;	Chosen strategy is simple_byte
  8790  0008E2  0A30               	xorlw	48	; case 48
  8791  0008E4  E0F5               	bz	l7402
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8795  0008E6  C01C  FFF6         	movff	sprintf@f,tblptrl
  8796  0008EA  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8797  0008EE                     	if	0	;tblptru may be non-zero
  8798  0008EE                     	endif
  8799  0008EE                     	if	0	;tblptru may be non-zero
  8800  0008EE                     	endif
  8801  0008EE  0008               	tblrd		*
  8802  0008F0  50F5               	movf	tablat,w,c
  8803  0008F2  ECC5  F010         	call	_isdigit
  8804  0008F6  E332               	bnc	l7424
  8805                           
  8806                           ;doprnt.c: 598: width = 0;
  8807  0008F8  0100               	movlb	0	; () banked
  8808  0008FA  6BF6               	clrf	sprintf@width& (0+255),b
  8809  0008FC  6BF7               	clrf	(sprintf@width+1)& (0+255),b
  8810  0008FE                     l7412:
  8811                           
  8812                           ;doprnt.c: 600: width *= 10;
  8813  0008FE  C0F6  F00F         	movff	sprintf@width,___wmul@multiplier
  8814  000902  C0F7  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  8815  000906  6A12               	clrf	___wmul@multiplicand+1,c
  8816  000908  0E0A               	movlw	10
  8817  00090A  6E11               	movwf	___wmul@multiplicand,c
  8818  00090C  EC34  F010         	call	___wmul	;wreg free
  8819  000910  C00F  F0F6         	movff	?___wmul,sprintf@width
  8820  000914  C010  F0F7         	movff	?___wmul+1,sprintf@width+1
  8821                           
  8822                           ;doprnt.c: 601: width += *f++ - '0';
  8823  000918  0ED0               	movlw	208
  8824  00091A  0100               	movlb	0	; () banked
  8825  00091C  6FEC               	movwf	??_sprintf& (0+255),b
  8826  00091E  69ED               	setf	(??_sprintf+1)& (0+255),b
  8827  000920  C01C  FFF6         	movff	sprintf@f,tblptrl
  8828  000924  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8829  000928                     	if	0	;tblptru may be non-zero
  8830  000928                     	endif
  8831  000928                     	if	0	;tblptru may be non-zero
  8832  000928                     	endif
  8833  000928  0008               	tblrd		*
  8834  00092A  50F5               	movf	tablat,w,c
  8835  00092C  6FEE               	movwf	(??_sprintf+2)& (0+255),b
  8836  00092E  6BEF               	clrf	(??_sprintf+3)& (0+255),b
  8837  000930  51EC               	movf	??_sprintf& (0+255),w,b
  8838  000932  27EE               	addwf	(??_sprintf+2)& (0+255),f,b
  8839  000934  51ED               	movf	(??_sprintf+1)& (0+255),w,b
  8840  000936  23EF               	addwfc	(??_sprintf+3)& (0+255),f,b
  8841  000938  51EE               	movf	(??_sprintf+2)& (0+255),w,b
  8842  00093A  27F6               	addwf	sprintf@width& (0+255),f,b
  8843  00093C  51EF               	movf	(??_sprintf+3)& (0+255),w,b
  8844  00093E  23F7               	addwfc	(sprintf@width+1)& (0+255),f,b
  8845                           
  8846                           ; BSR set to: 0
  8847  000940  4A1C               	infsnz	sprintf@f,f,c
  8848  000942  2A1D               	incf	sprintf@f+1,f,c
  8849                           
  8850                           ; BSR set to: 0
  8851                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8852  000944  C01C  FFF6         	movff	sprintf@f,tblptrl
  8853  000948  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8854  00094C                     	if	0	;tblptru may be non-zero
  8855  00094C                     	endif
  8856  00094C                     	if	0	;tblptru may be non-zero
  8857  00094C                     	endif
  8858  00094C  0008               	tblrd		*
  8859  00094E  50F5               	movf	tablat,w,c
  8860  000950  ECC5  F010         	call	_isdigit
  8861  000954  E303               	bnc	l7424
  8862  000956  D7D3               	goto	l7412
  8863  000958                     l7420:
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;doprnt.c: 718: case 'x':
  8867                           ;doprnt.c: 721: flag |= 0x80;
  8868  000958  8FF5               	bsf	sprintf@flag& (0+255),7,b
  8869                           
  8870                           ;doprnt.c: 723: break;
  8871  00095A  D016               	goto	l1735
  8872  00095C                     l7424:
  8873  00095C  C01C  FFF6         	movff	sprintf@f,tblptrl
  8874  000960  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8875  000964  4A1C               	infsnz	sprintf@f,f,c
  8876  000966  2A1D               	incf	sprintf@f+1,f,c
  8877  000968                     	if	0	;tblptru may be non-zero
  8878  000968                     	endif
  8879  000968                     	if	0	;tblptru may be non-zero
  8880  000968                     	endif
  8881  000968  0008               	tblrd		*
  8882  00096A  CFF5 F0F8          	movff	tablat,sprintf@c
  8883  00096E  0100               	movlb	0	; () banked
  8884  000970  51F8               	movf	sprintf@c& (0+255),w,b
  8885                           
  8886                           ; Switch size 1, requested type "speed"
  8887                           ; Number of cases is 5, Range of values is 0 to 120
  8888                           ; switch strategies available:
  8889                           ; Name         Instructions Cycles
  8890                           ; simple_byte           16     9 (average)
  8891                           ;	Chosen strategy is simple_byte
  8892  000972  E101 D109          	bz	l7530
  8893  000976  0A58               	xorlw	88	; case 88
  8894  000978  E0EF               	bz	l7420
  8895  00097A  0A3C               	xorlw	60	; case 100
  8896  00097C  E005               	bz	l1735
  8897  00097E  0A0D               	xorlw	13	; case 105
  8898  000980  E003               	bz	l1735
  8899  000982  0A11               	xorlw	17	; case 120
  8900  000984  E0E9               	bz	l7420
  8901  000986  D0F4               	goto	l7528
  8902  000988                     l1735:
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8906  000988  BFF5               	btfsc	sprintf@flag& (0+255),7,b
  8907  00098A  D012               	goto	l7436
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;doprnt.c: 1253: {
  8911                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8912  00098C  51F1               	movf	sprintf@ap& (0+255),w,b
  8913  00098E  6ED9               	movwf	fsr2l,c
  8914  000990  6ADA               	clrf	fsr2h,c
  8915  000992  CFDE F0F3          	movff	postinc2,sprintf@val
  8916  000996  CFDD F0F4          	movff	postdec2,sprintf@val+1
  8917                           
  8918                           ; BSR set to: 0
  8919  00099A  0E02               	movlw	2
  8920  00099C  27F1               	addwf	sprintf@ap& (0+255),f,b
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;doprnt.c: 1261: if((int)val < 0) {
  8924  00099E  AFF4               	btfss	(sprintf@val+1)& (0+255),7,b
  8925  0009A0  D03D               	goto	l7470
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;doprnt.c: 1262: flag |= 0x03;
  8929  0009A2  0E03               	movlw	3
  8930  0009A4  13F5               	iorwf	sprintf@flag& (0+255),f,b
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;doprnt.c: 1263: val = -val;
  8934  0009A6  6DF3               	negf	sprintf@val& (0+255),b
  8935  0009A8  1FF4               	comf	(sprintf@val+1)& (0+255),f,b
  8936  0009AA  B0D8               	btfsc	status,0,c
  8937  0009AC  2BF4               	incf	(sprintf@val+1)& (0+255),f,b
  8938  0009AE  D036               	goto	l7470
  8939  0009B0                     l7436:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;doprnt.c: 1268: else
  8943                           ;doprnt.c: 1273: {
  8944                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8945  0009B0  51F1               	movf	sprintf@ap& (0+255),w,b
  8946  0009B2  6ED9               	movwf	fsr2l,c
  8947  0009B4  6ADA               	clrf	fsr2h,c
  8948  0009B6  CFDE F0F3          	movff	postinc2,sprintf@val
  8949  0009BA  CFDD F0F4          	movff	postdec2,sprintf@val+1
  8950                           
  8951                           ; BSR set to: 0
  8952  0009BE  0E02               	movlw	2
  8953  0009C0  27F1               	addwf	sprintf@ap& (0+255),f,b
  8954  0009C2  D02C               	goto	l7470
  8955  0009C4                     l7440:
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8959  0009C4  0E01               	movlw	1
  8960  0009C6  6FF8               	movwf	sprintf@c& (0+255),b
  8961  0009C8                     l7446:
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;doprnt.c: 1306: if(val < dpowers[c])
  8965  0009C8  51F8               	movf	sprintf@c& (0+255),w,b
  8966  0009CA  0D02               	mullw	2
  8967  0009CC  0EA5               	movlw	low _dpowers
  8968  0009CE  24F3               	addwf	prodl,w,c
  8969  0009D0  6EF6               	movwf	tblptrl,c
  8970  0009D2  0E3E               	movlw	high _dpowers
  8971  0009D4  20F4               	addwfc	prodh,w,c
  8972  0009D6  6EF7               	movwf	tblptrh,c
  8973  0009D8                     	if	0	;There are less than 3 active tblptr bytes
  8974  0009D8                     	endif
  8975  0009D8  0009               	tblrd		*+
  8976  0009DA  50F5               	movf	tablat,w,c
  8977  0009DC  5DF3               	subwf	sprintf@val& (0+255),w,b
  8978  0009DE  0009               	tblrd		*+
  8979  0009E0  50F5               	movf	tablat,w,c
  8980  0009E2  59F4               	subwfb	(sprintf@val+1)& (0+255),w,b
  8981  0009E4  E320               	bnc	l7472
  8982                           
  8983                           ; BSR set to: 0
  8984  0009E6  2BF8               	incf	sprintf@c& (0+255),f,b
  8985                           
  8986                           ; BSR set to: 0
  8987  0009E8  0E05               	movlw	5
  8988  0009EA  19F8               	xorwf	sprintf@c& (0+255),w,b
  8989  0009EC  E01C               	bz	l7472
  8990  0009EE  D7EC               	goto	l7446
  8991  0009F0                     l7454:
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8995  0009F0  0E01               	movlw	1
  8996  0009F2  6FF8               	movwf	sprintf@c& (0+255),b
  8997  0009F4                     l7460:
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9001  0009F4  51F8               	movf	sprintf@c& (0+255),w,b
  9002  0009F6  0D02               	mullw	2
  9003  0009F8  0EAF               	movlw	low _hexpowers
  9004  0009FA  24F3               	addwf	prodl,w,c
  9005  0009FC  6EF6               	movwf	tblptrl,c
  9006  0009FE  0E3E               	movlw	high _hexpowers
  9007  000A00  20F4               	addwfc	prodh,w,c
  9008  000A02  6EF7               	movwf	tblptrh,c
  9009  000A04                     	if	0	;There are less than 3 active tblptr bytes
  9010  000A04                     	endif
  9011  000A04  0009               	tblrd		*+
  9012  000A06  50F5               	movf	tablat,w,c
  9013  000A08  5DF3               	subwf	sprintf@val& (0+255),w,b
  9014  000A0A  0009               	tblrd		*+
  9015  000A0C  50F5               	movf	tablat,w,c
  9016  000A0E  59F4               	subwfb	(sprintf@val+1)& (0+255),w,b
  9017  000A10  E30A               	bnc	l7472
  9018                           
  9019                           ; BSR set to: 0
  9020  000A12  2BF8               	incf	sprintf@c& (0+255),f,b
  9021                           
  9022                           ; BSR set to: 0
  9023  000A14  0E04               	movlw	4
  9024  000A16  19F8               	xorwf	sprintf@c& (0+255),w,b
  9025  000A18  E006               	bz	l7472
  9026  000A1A  D7EC               	goto	l7460
  9027  000A1C                     l7470:
  9028                           
  9029                           ; BSR set to: 0
  9030  000A1C  51F5               	movf	sprintf@flag& (0+255),w,b
  9031  000A1E  0B80               	andlw	128
  9032                           
  9033                           ; Switch size 1, requested type "speed"
  9034                           ; Number of cases is 2, Range of values is 0 to 128
  9035                           ; switch strategies available:
  9036                           ; Name         Instructions Cycles
  9037                           ; simple_byte            7     4 (average)
  9038                           ;	Chosen strategy is simple_byte
  9039  000A20  E0D1               	bz	l7440
  9040  000A22  0A80               	xorlw	128	; case 128
  9041  000A24  E0E5               	bz	l7454
  9042  000A26                     l7472:
  9043                           
  9044                           ; BSR set to: 0
  9045                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9046  000A26  51F6               	movf	sprintf@width& (0+255),w,b
  9047  000A28  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9048  000A2A  E008               	bz	l7478
  9049                           
  9050                           ; BSR set to: 0
  9051  000A2C  C0F5  F0EC         	movff	sprintf@flag,??_sprintf
  9052  000A30  0E03               	movlw	3
  9053  000A32  17EC               	andwf	??_sprintf& (0+255),f,b
  9054  000A34  E003               	bz	l7478
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;doprnt.c: 1346: width--;
  9058  000A36  07F6               	decf	sprintf@width& (0+255),f,b
  9059  000A38  A0D8               	btfss	status,0,c
  9060  000A3A  07F7               	decf	(sprintf@width+1)& (0+255),f,b
  9061  000A3C                     l7478:
  9062                           
  9063                           ; BSR set to: 0
  9064                           ;doprnt.c: 1381: if(width > c)
  9065  000A3C  0E80               	movlw	128
  9066  000A3E  BFF8               	btfsc	sprintf@c& (0+255),7,b
  9067  000A40  0E7F               	movlw	127
  9068  000A42  6FEC               	movwf	??_sprintf& (0+255),b
  9069  000A44  51F6               	movf	sprintf@width& (0+255),w,b
  9070  000A46  5DF8               	subwf	sprintf@c& (0+255),w,b
  9071  000A48  51F7               	movf	(sprintf@width+1)& (0+255),w,b
  9072  000A4A  0A80               	xorlw	128
  9073  000A4C  59EC               	subwfb	??_sprintf& (0+255),w,b
  9074  000A4E  E207               	bc	l1753
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;doprnt.c: 1382: width -= c;
  9078  000A50  51F8               	movf	sprintf@c& (0+255),w,b
  9079  000A52  5FF6               	subwf	sprintf@width& (0+255),f,b
  9080  000A54  0E00               	movlw	0
  9081  000A56  BFF8               	btfsc	sprintf@c& (0+255),7,b
  9082  000A58  0EFF               	movlw	255
  9083  000A5A  5BF7               	subwfb	(sprintf@width+1)& (0+255),f,b
  9084  000A5C  D002               	goto	l1754
  9085  000A5E                     l1753:
  9086                           
  9087                           ; BSR set to: 0
  9088                           ;doprnt.c: 1383: else
  9089                           ;doprnt.c: 1384: width = 0;
  9090  000A5E  6BF6               	clrf	sprintf@width& (0+255),b
  9091  000A60  6BF7               	clrf	(sprintf@width+1)& (0+255),b
  9092  000A62                     l1754:
  9093                           
  9094                           ; BSR set to: 0
  9095                           ;doprnt.c: 1387: if(flag & 0x04) {
  9096  000A62  A5F5               	btfss	sprintf@flag& (0+255),2,b
  9097  000A64  D018               	goto	l7496
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;doprnt.c: 1392: if(flag & 0x03)
  9101  000A66  C0F5  F0EC         	movff	sprintf@flag,??_sprintf
  9102  000A6A  0E03               	movlw	3
  9103  000A6C  17EC               	andwf	??_sprintf& (0+255),f,b
  9104  000A6E  E006               	bz	l7488
  9105                           
  9106                           ; BSR set to: 0
  9107                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9108  000A70  501B               	movf	sprintf@sp,w,c
  9109  000A72  6ED9               	movwf	fsr2l,c
  9110  000A74  6ADA               	clrf	fsr2h,c
  9111  000A76  0E2D               	movlw	45
  9112  000A78  6EDF               	movwf	indf2,c
  9113                           
  9114                           ; BSR set to: 0
  9115  000A7A  2A1B               	incf	sprintf@sp,f,c
  9116  000A7C                     l7488:
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;doprnt.c: 1415: if(width)
  9120  000A7C  51F6               	movf	sprintf@width& (0+255),w,b
  9121  000A7E  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9122  000A80  E024               	bz	l7510
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9126  000A82  501B               	movf	sprintf@sp,w,c
  9127  000A84  6ED9               	movwf	fsr2l,c
  9128  000A86  6ADA               	clrf	fsr2h,c
  9129  000A88  0E30               	movlw	48
  9130  000A8A  6EDF               	movwf	indf2,c
  9131                           
  9132                           ; BSR set to: 0
  9133  000A8C  2A1B               	incf	sprintf@sp,f,c
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;doprnt.c: 1418: while(--width);
  9137  000A8E  07F6               	decf	sprintf@width& (0+255),f,b
  9138  000A90  A0D8               	btfss	status,0,c
  9139  000A92  07F7               	decf	(sprintf@width+1)& (0+255),f,b
  9140  000A94  D7F3               	goto	l7488
  9141  000A96                     l7496:
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;doprnt.c: 1422: {
  9145                           ;doprnt.c: 1424: if(width
  9146                           ;doprnt.c: 1428: )
  9147  000A96  51F6               	movf	sprintf@width& (0+255),w,b
  9148  000A98  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9149  000A9A  E00C               	bz	l7504
  9150  000A9C                     l7498:
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9154  000A9C  501B               	movf	sprintf@sp,w,c
  9155  000A9E  6ED9               	movwf	fsr2l,c
  9156  000AA0  6ADA               	clrf	fsr2h,c
  9157  000AA2  0E20               	movlw	32
  9158  000AA4  6EDF               	movwf	indf2,c
  9159                           
  9160                           ; BSR set to: 0
  9161  000AA6  2A1B               	incf	sprintf@sp,f,c
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;doprnt.c: 1431: while(--width);
  9165  000AA8  07F6               	decf	sprintf@width& (0+255),f,b
  9166  000AAA  A0D8               	btfss	status,0,c
  9167  000AAC  07F7               	decf	(sprintf@width+1)& (0+255),f,b
  9168  000AAE  51F6               	movf	sprintf@width& (0+255),w,b
  9169  000AB0  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9170  000AB2  E1F4               	bnz	l7498
  9171  000AB4                     l7504:
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;doprnt.c: 1438: if(flag & 0x03)
  9175  000AB4  C0F5  F0EC         	movff	sprintf@flag,??_sprintf
  9176  000AB8  0E03               	movlw	3
  9177  000ABA  17EC               	andwf	??_sprintf& (0+255),f,b
  9178  000ABC  E006               	bz	l7510
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9182  000ABE  501B               	movf	sprintf@sp,w,c
  9183  000AC0  6ED9               	movwf	fsr2l,c
  9184  000AC2  6ADA               	clrf	fsr2h,c
  9185  000AC4  0E2D               	movlw	45
  9186  000AC6  6EDF               	movwf	indf2,c
  9187                           
  9188                           ; BSR set to: 0
  9189  000AC8  2A1B               	incf	sprintf@sp,f,c
  9190  000ACA                     l7510:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;doprnt.c: 1469: }
  9194                           ;doprnt.c: 1472: prec = c;
  9195  000ACA  C0F8  F0F2         	movff	sprintf@c,sprintf@prec
  9196                           
  9197                           ;doprnt.c: 1474: while(prec--) {
  9198  000ACE  D04D               	goto	l7526
  9199  000AD0                     l7512:
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9203  000AD0  51F2               	movf	sprintf@prec& (0+255),w,b
  9204  000AD2  0D02               	mullw	2
  9205  000AD4  0EA5               	movlw	low _dpowers
  9206  000AD6  24F3               	addwf	prodl,w,c
  9207  000AD8  6EF6               	movwf	tblptrl,c
  9208  000ADA  0E3E               	movlw	high _dpowers
  9209  000ADC  20F4               	addwfc	prodh,w,c
  9210  000ADE  6EF7               	movwf	tblptrh,c
  9211  000AE0                     	if	0	;There are less than 3 active tblptr bytes
  9212  000AE0                     	endif
  9213  000AE0  0009               	tblrd		*+
  9214  000AE2  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9215  000AE6  000A               	tblrd		*-
  9216  000AE8  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9217  000AEC  C0F3  F00F         	movff	sprintf@val,___lwdiv@dividend
  9218  000AF0  C0F4  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9219  000AF4  EC5A  F00E         	call	___lwdiv	;wreg free
  9220  000AF8  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  9221  000AFC  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  9222  000B00  6A19               	clrf	___lwmod@divisor+1,c
  9223  000B02  0E0A               	movlw	10
  9224  000B04  6E18               	movwf	___lwmod@divisor,c
  9225  000B06  ECA0  F00E         	call	___lwmod	;wreg free
  9226  000B0A  5016               	movf	?___lwmod,w,c
  9227  000B0C  0F30               	addlw	48
  9228  000B0E  6FF8               	movwf	sprintf@c& (0+255),b
  9229                           
  9230                           ;doprnt.c: 1491: break;
  9231  000B10  D026               	goto	l7522
  9232  000B12                     l7514:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;doprnt.c: 1499: {
  9236                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9237  000B12  C0F3  F00F         	movff	sprintf@val,___lwdiv@dividend
  9238  000B16  C0F4  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9239  000B1A  51F2               	movf	sprintf@prec& (0+255),w,b
  9240  000B1C  0D02               	mullw	2
  9241  000B1E  0EAF               	movlw	low _hexpowers
  9242  000B20  24F3               	addwf	prodl,w,c
  9243  000B22  6EF6               	movwf	tblptrl,c
  9244  000B24  0E3E               	movlw	high _hexpowers
  9245  000B26  20F4               	addwfc	prodh,w,c
  9246  000B28  6EF7               	movwf	tblptrh,c
  9247  000B2A                     	if	0	;There are less than 3 active tblptr bytes
  9248  000B2A                     	endif
  9249  000B2A  0009               	tblrd		*+
  9250  000B2C  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9251  000B30  000A               	tblrd		*-
  9252  000B32  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9253  000B36  EC5A  F00E         	call	___lwdiv	;wreg free
  9254  000B3A  500F               	movf	?___lwdiv,w,c
  9255  000B3C  0B0F               	andlw	15
  9256  000B3E  6FF0               	movwf	sprintf@idx& (0+255),b
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  9260  000B40  0EDB               	movlw	low STR_11
  9261  000B42  25F0               	addwf	sprintf@idx& (0+255),w,b
  9262  000B44  6EF6               	movwf	tblptrl,c
  9263  000B46  6AF7               	clrf	tblptrh,c
  9264  000B48  0E3F               	movlw	high STR_11
  9265  000B4A  22F7               	addwfc	tblptrh,f,c
  9266  000B4C                     	if	0	;There are less than 3 active tblptr bytes
  9267  000B4C                     	endif
  9268  000B4C  0008               	tblrd		*
  9269  000B4E  CFF5 F0F8          	movff	tablat,sprintf@c
  9270                           
  9271                           ;doprnt.c: 1508: }
  9272                           ;doprnt.c: 1510: break;
  9273  000B52  D005               	goto	l7522
  9274  000B54                     l7520:
  9275                           
  9276                           ; BSR set to: 0
  9277  000B54  51F5               	movf	sprintf@flag& (0+255),w,b
  9278  000B56  0B80               	andlw	128
  9279                           
  9280                           ; Switch size 1, requested type "speed"
  9281                           ; Number of cases is 2, Range of values is 0 to 128
  9282                           ; switch strategies available:
  9283                           ; Name         Instructions Cycles
  9284                           ; simple_byte            7     4 (average)
  9285                           ;	Chosen strategy is simple_byte
  9286  000B58  E0BB               	bz	l7512
  9287  000B5A  0A80               	xorlw	128	; case 128
  9288  000B5C  E0DA               	bz	l7514
  9289  000B5E                     l7522:
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9293  000B5E  501B               	movf	sprintf@sp,w,c
  9294  000B60  6ED9               	movwf	fsr2l,c
  9295  000B62  6ADA               	clrf	fsr2h,c
  9296  000B64  C0F8  FFDF         	movff	sprintf@c,indf2
  9297                           
  9298                           ; BSR set to: 0
  9299  000B68  2A1B               	incf	sprintf@sp,f,c
  9300  000B6A                     l7526:
  9301                           
  9302                           ; BSR set to: 0
  9303  000B6A  07F2               	decf	sprintf@prec& (0+255),f,b
  9304  000B6C  29F2               	incf	sprintf@prec& (0+255),w,b
  9305  000B6E  E1F2               	bnz	l7520
  9306  000B70                     l7528:
  9307                           
  9308                           ; BSR set to: 0
  9309  000B70  C01C  FFF6         	movff	sprintf@f,tblptrl
  9310  000B74  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9311  000B78  4A1C               	infsnz	sprintf@f,f,c
  9312  000B7A  2A1D               	incf	sprintf@f+1,f,c
  9313  000B7C                     	if	0	;tblptru may be non-zero
  9314  000B7C                     	endif
  9315  000B7C                     	if	0	;tblptru may be non-zero
  9316  000B7C                     	endif
  9317  000B7C  0008               	tblrd		*
  9318  000B7E  CFF5 F0F8          	movff	tablat,sprintf@c
  9319  000B82  51F8               	movf	sprintf@c& (0+255),w,b
  9320  000B84  E001 D696          	bnz	l7396
  9321  000B88                     l7530:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;doprnt.c: 1538: *sp = 0;
  9325  000B88  501B               	movf	sprintf@sp,w,c
  9326  000B8A  6ED9               	movwf	fsr2l,c
  9327  000B8C  6ADA               	clrf	fsr2h,c
  9328  000B8E  6ADF               	clrf	indf2,c
  9329                           
  9330                           ; BSR set to: 0
  9331  000B90  0C00               	retlw	0	;funcret
  9332  000B92                     __end_of_sprintf:
  9333                           	opt stack 0
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           intcon	equ	0xFF2
  9341                           intcon2	equ	0xFF1
  9342                           intcon3	equ	0xFF0
  9343                           postinc0	equ	0xFEE
  9344                           wreg	equ	0xFE8
  9345                           indf1	equ	0xFE7
  9346                           postdec1	equ	0xFE5
  9347                           fsr1h	equ	0xFE2
  9348                           fsr1l	equ	0xFE1
  9349                           indf2	equ	0xFDF
  9350                           postinc2	equ	0xFDE
  9351                           postdec2	equ	0xFDD
  9352                           fsr2h	equ	0xFDA
  9353                           fsr2l	equ	0xFD9
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _isdigit *****************
  9357 ;; Defined at:
  9358 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  c               1    wreg     unsigned char 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;  c               1   16[COMRAM] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, status,2, status,0
  9367 ;; Tracked objects:
  9368 ;;		On entry : 3F/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9372 ;;      Params:         0       0       0       0
  9373 ;;      Locals:         2       0       0       0
  9374 ;;      Temps:          1       0       0       0
  9375 ;;      Totals:         3       0       0       0
  9376 ;;Total ram usage:        3 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:   10
  9379 ;; This function calls:
  9380 ;;		Nothing
  9381 ;; This function is called by:
  9382 ;;		_sprintf
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           	psect	text47
  9387  00218A                     __ptext47:
  9388                           	opt stack 0
  9389  00218A                     _isdigit:
  9390                           	opt stack 15
  9391                           
  9392                           ; BSR set to: 0
  9393                           ;incstack = 0
  9394                           ;isdigit@c stored from wreg
  9395  00218A  6E11               	movwf	isdigit@c,c
  9396  00218C  6A10               	clrf	_isdigit$3714,c
  9397  00218E  0E3A               	movlw	58
  9398  002190  6011               	cpfslt	isdigit@c,c
  9399  002192  D005               	goto	l7218
  9400  002194  0E2F               	movlw	47
  9401  002196  6411               	cpfsgt	isdigit@c,c
  9402  002198  D002               	goto	l7218
  9403  00219A  0E01               	movlw	1
  9404  00219C  6E10               	movwf	_isdigit$3714,c
  9405  00219E                     l7218:
  9406  00219E  C010  F00F         	movff	_isdigit$3714,??_isdigit
  9407  0021A2  300F               	rrcf	??_isdigit,w,c
  9408  0021A4  0012               	return		;funcret
  9409  0021A6                     __end_of_isdigit:
  9410                           	opt stack 0
  9411                           tblptru	equ	0xFF8
  9412                           tblptrh	equ	0xFF7
  9413                           tblptrl	equ	0xFF6
  9414                           tablat	equ	0xFF5
  9415                           prodh	equ	0xFF4
  9416                           prodl	equ	0xFF3
  9417                           intcon	equ	0xFF2
  9418                           intcon2	equ	0xFF1
  9419                           intcon3	equ	0xFF0
  9420                           postinc0	equ	0xFEE
  9421                           wreg	equ	0xFE8
  9422                           indf1	equ	0xFE7
  9423                           postdec1	equ	0xFE5
  9424                           fsr1h	equ	0xFE2
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           fsr2h	equ	0xFDA
  9430                           fsr2l	equ	0xFD9
  9431                           status	equ	0xFD8
  9432                           
  9433 ;; *************** function ___wmul *****************
  9434 ;; Defined at:
  9435 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9436 ;; Parameters:    Size  Location     Type
  9437 ;;  multiplier      2   14[COMRAM] unsigned int 
  9438 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;  product         2   18[COMRAM] unsigned int 
  9441 ;; Return value:  Size  Location     Type
  9442 ;;                  2   14[COMRAM] unsigned int 
  9443 ;; Registers used:
  9444 ;;		wreg, status,2, status,0, prodl, prodh
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9450 ;;      Params:         4       0       0       0
  9451 ;;      Locals:         2       0       0       0
  9452 ;;      Temps:          0       0       0       0
  9453 ;;      Totals:         6       0       0       0
  9454 ;;Total ram usage:        6 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:   10
  9457 ;; This function calls:
  9458 ;;		Nothing
  9459 ;; This function is called by:
  9460 ;;		_sprintf
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           	psect	text48
  9465  002068                     __ptext48:
  9466                           	opt stack 0
  9467  002068                     ___wmul:
  9468                           	opt stack 15
  9469                           
  9470                           ;incstack = 0
  9471  002068  500F               	movf	___wmul@multiplier,w,c
  9472  00206A  0211               	mulwf	___wmul@multiplicand,c
  9473  00206C  CFF3 F013          	movff	prodl,___wmul@product
  9474  002070  CFF4 F014          	movff	prodh,___wmul@product+1
  9475  002074  500F               	movf	___wmul@multiplier,w,c
  9476  002076  0212               	mulwf	___wmul@multiplicand+1,c
  9477  002078  50F3               	movf	prodl,w,c
  9478  00207A  2614               	addwf	___wmul@product+1,f,c
  9479  00207C  5010               	movf	___wmul@multiplier+1,w,c
  9480  00207E  0211               	mulwf	___wmul@multiplicand,c
  9481  002080  50F3               	movf	prodl,w,c
  9482  002082  2614               	addwf	___wmul@product+1,f,c
  9483  002084  C013  F00F         	movff	___wmul@product,?___wmul
  9484  002088  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9485  00208C  0012               	return		;funcret
  9486  00208E                     __end_of___wmul:
  9487                           	opt stack 0
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           intcon2	equ	0xFF1
  9496                           intcon3	equ	0xFF0
  9497                           postinc0	equ	0xFEE
  9498                           wreg	equ	0xFE8
  9499                           indf1	equ	0xFE7
  9500                           postdec1	equ	0xFE5
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           fsr2h	equ	0xFDA
  9507                           fsr2l	equ	0xFD9
  9508                           status	equ	0xFD8
  9509                           
  9510 ;; *************** function ___lwmod *****************
  9511 ;; Defined at:
  9512 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;  dividend        2   21[COMRAM] unsigned int 
  9515 ;;  divisor         2   23[COMRAM] unsigned int 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  counter         1   25[COMRAM] unsigned char 
  9518 ;; Return value:  Size  Location     Type
  9519 ;;                  2   21[COMRAM] unsigned int 
  9520 ;; Registers used:
  9521 ;;		wreg, status,2, status,0
  9522 ;; Tracked objects:
  9523 ;;		On entry : 3F/0
  9524 ;;		On exit  : 3F/0
  9525 ;;		Unchanged: 3F/0
  9526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9527 ;;      Params:         4       0       0       0
  9528 ;;      Locals:         1       0       0       0
  9529 ;;      Temps:          0       0       0       0
  9530 ;;      Totals:         5       0       0       0
  9531 ;;Total ram usage:        5 bytes
  9532 ;; Hardware stack levels used:    1
  9533 ;; Hardware stack levels required when called:   10
  9534 ;; This function calls:
  9535 ;;		Nothing
  9536 ;; This function is called by:
  9537 ;;		_sprintf
  9538 ;; This function uses a non-reentrant model
  9539 ;;
  9540                           
  9541                           	psect	text49
  9542  001D40                     __ptext49:
  9543                           	opt stack 0
  9544  001D40                     ___lwmod:
  9545                           	opt stack 15
  9546                           
  9547                           ; BSR set to: 0
  9548                           
  9549                           ;incstack = 0
  9550  001D40  5018               	movf	___lwmod@divisor,w,c
  9551  001D42  1019               	iorwf	___lwmod@divisor+1,w,c
  9552  001D44  E017               	bz	l2185
  9553                           
  9554                           ; BSR set to: 0
  9555  001D46  0E01               	movlw	1
  9556  001D48  6E1A               	movwf	___lwmod@counter,c
  9557  001D4A  D004               	goto	l7292
  9558  001D4C                     l7290:
  9559                           
  9560                           ; BSR set to: 0
  9561  001D4C  90D8               	bcf	status,0,c
  9562  001D4E  3618               	rlcf	___lwmod@divisor,f,c
  9563  001D50  3619               	rlcf	___lwmod@divisor+1,f,c
  9564  001D52  2A1A               	incf	___lwmod@counter,f,c
  9565  001D54                     l7292:
  9566                           
  9567                           ; BSR set to: 0
  9568  001D54  AE19               	btfss	___lwmod@divisor+1,7,c
  9569  001D56  D7FA               	goto	l7290
  9570  001D58                     l7294:
  9571                           
  9572                           ; BSR set to: 0
  9573  001D58  5018               	movf	___lwmod@divisor,w,c
  9574  001D5A  5C16               	subwf	___lwmod@dividend,w,c
  9575  001D5C  5019               	movf	___lwmod@divisor+1,w,c
  9576  001D5E  5817               	subwfb	___lwmod@dividend+1,w,c
  9577  001D60  E304               	bnc	l7298
  9578                           
  9579                           ; BSR set to: 0
  9580  001D62  5018               	movf	___lwmod@divisor,w,c
  9581  001D64  5E16               	subwf	___lwmod@dividend,f,c
  9582  001D66  5019               	movf	___lwmod@divisor+1,w,c
  9583  001D68  5A17               	subwfb	___lwmod@dividend+1,f,c
  9584  001D6A                     l7298:
  9585                           
  9586                           ; BSR set to: 0
  9587  001D6A  90D8               	bcf	status,0,c
  9588  001D6C  3219               	rrcf	___lwmod@divisor+1,f,c
  9589  001D6E  3218               	rrcf	___lwmod@divisor,f,c
  9590                           
  9591                           ; BSR set to: 0
  9592  001D70  2E1A               	decfsz	___lwmod@counter,f,c
  9593  001D72  D7F2               	goto	l7294
  9594  001D74                     l2185:
  9595                           
  9596                           ; BSR set to: 0
  9597  001D74  C016  F016         	movff	___lwmod@dividend,?___lwmod
  9598  001D78  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  9599                           
  9600                           ; BSR set to: 0
  9601  001D7C  0012               	return		;funcret
  9602  001D7E                     __end_of___lwmod:
  9603                           	opt stack 0
  9604                           tblptru	equ	0xFF8
  9605                           tblptrh	equ	0xFF7
  9606                           tblptrl	equ	0xFF6
  9607                           tablat	equ	0xFF5
  9608                           prodh	equ	0xFF4
  9609                           prodl	equ	0xFF3
  9610                           intcon	equ	0xFF2
  9611                           intcon2	equ	0xFF1
  9612                           intcon3	equ	0xFF0
  9613                           postinc0	equ	0xFEE
  9614                           wreg	equ	0xFE8
  9615                           indf1	equ	0xFE7
  9616                           postdec1	equ	0xFE5
  9617                           fsr1h	equ	0xFE2
  9618                           fsr1l	equ	0xFE1
  9619                           indf2	equ	0xFDF
  9620                           postinc2	equ	0xFDE
  9621                           postdec2	equ	0xFDD
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function ___lwdiv *****************
  9627 ;; Defined at:
  9628 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  dividend        2   14[COMRAM] unsigned int 
  9631 ;;  divisor         2   16[COMRAM] unsigned int 
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;  quotient        2   19[COMRAM] unsigned int 
  9634 ;;  counter         1   18[COMRAM] unsigned char 
  9635 ;; Return value:  Size  Location     Type
  9636 ;;                  2   14[COMRAM] unsigned int 
  9637 ;; Registers used:
  9638 ;;		wreg, status,2, status,0
  9639 ;; Tracked objects:
  9640 ;;		On entry : 3F/0
  9641 ;;		On exit  : 3F/0
  9642 ;;		Unchanged: 3F/0
  9643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9644 ;;      Params:         4       0       0       0
  9645 ;;      Locals:         3       0       0       0
  9646 ;;      Temps:          0       0       0       0
  9647 ;;      Totals:         7       0       0       0
  9648 ;;Total ram usage:        7 bytes
  9649 ;; Hardware stack levels used:    1
  9650 ;; Hardware stack levels required when called:   10
  9651 ;; This function calls:
  9652 ;;		Nothing
  9653 ;; This function is called by:
  9654 ;;		_sprintf
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	text50
  9659  001CB4                     __ptext50:
  9660                           	opt stack 0
  9661  001CB4                     ___lwdiv:
  9662                           	opt stack 15
  9663                           
  9664                           ; BSR set to: 0
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;incstack = 0
  9668  001CB4  6A14               	clrf	___lwdiv@quotient,c
  9669  001CB6  6A15               	clrf	___lwdiv@quotient+1,c
  9670                           
  9671                           ; BSR set to: 0
  9672  001CB8  5011               	movf	___lwdiv@divisor,w,c
  9673  001CBA  1012               	iorwf	___lwdiv@divisor+1,w,c
  9674  001CBC  E01B               	bz	l2175
  9675                           
  9676                           ; BSR set to: 0
  9677  001CBE  0E01               	movlw	1
  9678  001CC0  6E13               	movwf	___lwdiv@counter,c
  9679  001CC2  D004               	goto	l7272
  9680  001CC4                     l7270:
  9681                           
  9682                           ; BSR set to: 0
  9683  001CC4  90D8               	bcf	status,0,c
  9684  001CC6  3611               	rlcf	___lwdiv@divisor,f,c
  9685  001CC8  3612               	rlcf	___lwdiv@divisor+1,f,c
  9686  001CCA  2A13               	incf	___lwdiv@counter,f,c
  9687  001CCC                     l7272:
  9688                           
  9689                           ; BSR set to: 0
  9690  001CCC  AE12               	btfss	___lwdiv@divisor+1,7,c
  9691  001CCE  D7FA               	goto	l7270
  9692  001CD0                     l7274:
  9693                           
  9694                           ; BSR set to: 0
  9695  001CD0  90D8               	bcf	status,0,c
  9696  001CD2  3614               	rlcf	___lwdiv@quotient,f,c
  9697  001CD4  3615               	rlcf	___lwdiv@quotient+1,f,c
  9698                           
  9699                           ; BSR set to: 0
  9700  001CD6  5011               	movf	___lwdiv@divisor,w,c
  9701  001CD8  5C0F               	subwf	___lwdiv@dividend,w,c
  9702  001CDA  5012               	movf	___lwdiv@divisor+1,w,c
  9703  001CDC  5810               	subwfb	___lwdiv@dividend+1,w,c
  9704  001CDE  E305               	bnc	l7282
  9705                           
  9706                           ; BSR set to: 0
  9707  001CE0  5011               	movf	___lwdiv@divisor,w,c
  9708  001CE2  5E0F               	subwf	___lwdiv@dividend,f,c
  9709  001CE4  5012               	movf	___lwdiv@divisor+1,w,c
  9710  001CE6  5A10               	subwfb	___lwdiv@dividend+1,f,c
  9711                           
  9712                           ; BSR set to: 0
  9713  001CE8  8014               	bsf	___lwdiv@quotient,0,c
  9714  001CEA                     l7282:
  9715                           
  9716                           ; BSR set to: 0
  9717  001CEA  90D8               	bcf	status,0,c
  9718  001CEC  3212               	rrcf	___lwdiv@divisor+1,f,c
  9719  001CEE  3211               	rrcf	___lwdiv@divisor,f,c
  9720                           
  9721                           ; BSR set to: 0
  9722  001CF0  2E13               	decfsz	___lwdiv@counter,f,c
  9723  001CF2  D7EE               	goto	l7274
  9724  001CF4                     l2175:
  9725                           
  9726                           ; BSR set to: 0
  9727  001CF4  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  9728  001CF8  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9729                           
  9730                           ; BSR set to: 0
  9731  001CFC  0012               	return		;funcret
  9732  001CFE                     __end_of___lwdiv:
  9733                           	opt stack 0
  9734                           tblptru	equ	0xFF8
  9735                           tblptrh	equ	0xFF7
  9736                           tblptrl	equ	0xFF6
  9737                           tablat	equ	0xFF5
  9738                           prodh	equ	0xFF4
  9739                           prodl	equ	0xFF3
  9740                           intcon	equ	0xFF2
  9741                           intcon2	equ	0xFF1
  9742                           intcon3	equ	0xFF0
  9743                           postinc0	equ	0xFEE
  9744                           wreg	equ	0xFE8
  9745                           indf1	equ	0xFE7
  9746                           postdec1	equ	0xFE5
  9747                           fsr1h	equ	0xFE2
  9748                           fsr1l	equ	0xFE1
  9749                           indf2	equ	0xFDF
  9750                           postinc2	equ	0xFDE
  9751                           postdec2	equ	0xFDD
  9752                           fsr2h	equ	0xFDA
  9753                           fsr2l	equ	0xFD9
  9754                           status	equ	0xFD8
  9755                           
  9756 ;; *************** function _delay_1s *****************
  9757 ;; Defined at:
  9758 ;;		line 76 in file "horloge.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;		None
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;		None
  9763 ;; Return value:  Size  Location     Type
  9764 ;;                  1    wreg      void 
  9765 ;; Registers used:
  9766 ;;		wreg, cstack
  9767 ;; Tracked objects:
  9768 ;;		On entry : 0/0
  9769 ;;		On exit  : 0/0
  9770 ;;		Unchanged: 0/0
  9771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9772 ;;      Params:         0       0       0       0
  9773 ;;      Locals:         0       0       0       0
  9774 ;;      Temps:          0       0       0       0
  9775 ;;      Totals:         0       0       0       0
  9776 ;;Total ram usage:        0 bytes
  9777 ;; Hardware stack levels used:    1
  9778 ;; Hardware stack levels required when called:   11
  9779 ;; This function calls:
  9780 ;;		_delay_100ms
  9781 ;; This function is called by:
  9782 ;;		_EUSART1_RX_T3_LOCAL
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text51
  9787  001FCC                     __ptext51:
  9788                           	opt stack 0
  9789  001FCC                     _delay_1s:
  9790                           	opt stack 15
  9791                           
  9792                           ;horloge.c: 77: delay_100ms();
  9793                           
  9794                           ; BSR set to: 0
  9795                           ;incstack = 0
  9796  001FCC  ECD7  F00A         	call	_delay_100ms	;wreg free
  9797                           
  9798                           ;horloge.c: 78: delay_100ms();
  9799  001FD0  ECD7  F00A         	call	_delay_100ms	;wreg free
  9800                           
  9801                           ;horloge.c: 79: delay_100ms();
  9802  001FD4  ECD7  F00A         	call	_delay_100ms	;wreg free
  9803                           
  9804                           ;horloge.c: 80: delay_100ms();
  9805  001FD8  ECD7  F00A         	call	_delay_100ms	;wreg free
  9806                           
  9807                           ;horloge.c: 81: delay_100ms();
  9808  001FDC  ECD7  F00A         	call	_delay_100ms	;wreg free
  9809                           
  9810                           ;horloge.c: 82: delay_100ms();
  9811  001FE0  ECD7  F00A         	call	_delay_100ms	;wreg free
  9812                           
  9813                           ;horloge.c: 83: delay_100ms();
  9814  001FE4  ECD7  F00A         	call	_delay_100ms	;wreg free
  9815                           
  9816                           ;horloge.c: 84: delay_100ms();
  9817  001FE8  ECD7  F00A         	call	_delay_100ms	;wreg free
  9818                           
  9819                           ;horloge.c: 85: delay_100ms();
  9820  001FEC  ECD7  F00A         	call	_delay_100ms	;wreg free
  9821                           
  9822                           ;horloge.c: 86: delay_100ms();
  9823  001FF0  EFD7  F00A         	goto	_delay_100ms	;wreg free
  9824  001FF4                     __end_of_delay_1s:
  9825                           	opt stack 0
  9826                           tblptru	equ	0xFF8
  9827                           tblptrh	equ	0xFF7
  9828                           tblptrl	equ	0xFF6
  9829                           tablat	equ	0xFF5
  9830                           prodh	equ	0xFF4
  9831                           prodl	equ	0xFF3
  9832                           intcon	equ	0xFF2
  9833                           intcon2	equ	0xFF1
  9834                           intcon3	equ	0xFF0
  9835                           postinc0	equ	0xFEE
  9836                           wreg	equ	0xFE8
  9837                           indf1	equ	0xFE7
  9838                           postdec1	equ	0xFE5
  9839                           fsr1h	equ	0xFE2
  9840                           fsr1l	equ	0xFE1
  9841                           indf2	equ	0xFDF
  9842                           postinc2	equ	0xFDE
  9843                           postdec2	equ	0xFDD
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848 ;; *************** function _delay_100ms *****************
  9849 ;; Defined at:
  9850 ;;		line 46 in file "horloge.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  1    wreg      void 
  9857 ;; Registers used:
  9858 ;;		wreg
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/2
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9864 ;;      Params:         0       0       0       0
  9865 ;;      Locals:         0       0       0       0
  9866 ;;      Temps:          1       0       0       0
  9867 ;;      Totals:         1       0       0       0
  9868 ;;Total ram usage:        1 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:   10
  9871 ;; This function calls:
  9872 ;;		Nothing
  9873 ;; This function is called by:
  9874 ;;		_delay_n_100ms
  9875 ;;		_delay_1s
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           	psect	text52
  9880  0015AE                     __ptext52:
  9881                           	opt stack 0
  9882  0015AE                     _delay_100ms:
  9883                           	opt stack 15
  9884                           
  9885                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
  9886                           
  9887                           ;incstack = 0
  9888  0015AE  0E1A               	movlw	26
  9889  0015B0  6E0F               	movwf	??_delay_100ms& (0+255),c
  9890  0015B2  0EF8               	movlw	248
  9891  0015B4                     u6587:
  9892  0015B4  2EE8               	decfsz	wreg,f,c
  9893  0015B6  D7FE               	bra	u6587
  9894  0015B8  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9895  0015BA  D7FC               	bra	u6587
  9896  0015BC  F000 F000          	nop2	
  9897                           
  9898                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
  9899  0015C0  0E1A               	movlw	26
  9900  0015C2  6E0F               	movwf	??_delay_100ms& (0+255),c
  9901  0015C4  0EF8               	movlw	248
  9902  0015C6                     u6597:
  9903  0015C6  2EE8               	decfsz	wreg,f,c
  9904  0015C8  D7FE               	bra	u6597
  9905  0015CA  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9906  0015CC  D7FC               	bra	u6597
  9907  0015CE  F000 F000          	nop2	
  9908                           
  9909                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
  9910  0015D2  0E1A               	movlw	26
  9911  0015D4  6E0F               	movwf	??_delay_100ms& (0+255),c
  9912  0015D6  0EF8               	movlw	248
  9913  0015D8                     u6607:
  9914  0015D8  2EE8               	decfsz	wreg,f,c
  9915  0015DA  D7FE               	bra	u6607
  9916  0015DC  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9917  0015DE  D7FC               	bra	u6607
  9918  0015E0  F000 F000          	nop2	
  9919                           
  9920                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
  9921  0015E4  0E1A               	movlw	26
  9922  0015E6  6E0F               	movwf	??_delay_100ms& (0+255),c
  9923  0015E8  0EF8               	movlw	248
  9924  0015EA                     u6617:
  9925  0015EA  2EE8               	decfsz	wreg,f,c
  9926  0015EC  D7FE               	bra	u6617
  9927  0015EE  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9928  0015F0  D7FC               	bra	u6617
  9929  0015F2  F000 F000          	nop2	
  9930                           
  9931                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
  9932  0015F6  0E1A               	movlw	26
  9933  0015F8  6E0F               	movwf	??_delay_100ms& (0+255),c
  9934  0015FA  0EF8               	movlw	248
  9935  0015FC                     u6627:
  9936  0015FC  2EE8               	decfsz	wreg,f,c
  9937  0015FE  D7FE               	bra	u6627
  9938  001600  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9939  001602  D7FC               	bra	u6627
  9940  001604  F000 F000          	nop2	
  9941                           
  9942                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
  9943  001608  0E1A               	movlw	26
  9944  00160A  6E0F               	movwf	??_delay_100ms& (0+255),c
  9945  00160C  0EF8               	movlw	248
  9946  00160E                     u6637:
  9947  00160E  2EE8               	decfsz	wreg,f,c
  9948  001610  D7FE               	bra	u6637
  9949  001612  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9950  001614  D7FC               	bra	u6637
  9951  001616  F000 F000          	nop2	
  9952                           
  9953                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
  9954  00161A  0E1A               	movlw	26
  9955  00161C  6E0F               	movwf	??_delay_100ms& (0+255),c
  9956  00161E  0EF8               	movlw	248
  9957  001620                     u6647:
  9958  001620  2EE8               	decfsz	wreg,f,c
  9959  001622  D7FE               	bra	u6647
  9960  001624  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9961  001626  D7FC               	bra	u6647
  9962  001628  F000 F000          	nop2	
  9963                           
  9964                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
  9965  00162C  0E1A               	movlw	26
  9966  00162E  6E0F               	movwf	??_delay_100ms& (0+255),c
  9967  001630  0EF8               	movlw	248
  9968  001632                     u6657:
  9969  001632  2EE8               	decfsz	wreg,f,c
  9970  001634  D7FE               	bra	u6657
  9971  001636  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9972  001638  D7FC               	bra	u6657
  9973  00163A  F000 F000          	nop2	
  9974                           
  9975                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
  9976  00163E  0E1A               	movlw	26
  9977  001640  6E0F               	movwf	??_delay_100ms& (0+255),c
  9978  001642  0EF8               	movlw	248
  9979  001644                     u6667:
  9980  001644  2EE8               	decfsz	wreg,f,c
  9981  001646  D7FE               	bra	u6667
  9982  001648  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9983  00164A  D7FC               	bra	u6667
  9984  00164C  F000 F000          	nop2	
  9985                           
  9986                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
  9987  001650  0E1A               	movlw	26
  9988  001652  6E0F               	movwf	??_delay_100ms& (0+255),c
  9989  001654  0EF8               	movlw	248
  9990  001656                     u6677:
  9991  001656  2EE8               	decfsz	wreg,f,c
  9992  001658  D7FE               	bra	u6677
  9993  00165A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9994  00165C  D7FC               	bra	u6677
  9995  00165E  F000 F000          	nop2	
  9996  001662  0012               	return		;funcret
  9997  001664                     __end_of_delay_100ms:
  9998                           	opt stack 0
  9999                           tblptru	equ	0xFF8
 10000                           tblptrh	equ	0xFF7
 10001                           tblptrl	equ	0xFF6
 10002                           tablat	equ	0xFF5
 10003                           prodh	equ	0xFF4
 10004                           prodl	equ	0xFF3
 10005                           intcon	equ	0xFF2
 10006                           intcon2	equ	0xFF1
 10007                           intcon3	equ	0xFF0
 10008                           postinc0	equ	0xFEE
 10009                           wreg	equ	0xFE8
 10010                           indf1	equ	0xFE7
 10011                           postdec1	equ	0xFE5
 10012                           fsr1h	equ	0xFE2
 10013                           fsr1l	equ	0xFE1
 10014                           indf2	equ	0xFDF
 10015                           postinc2	equ	0xFDE
 10016                           postdec2	equ	0xFDD
 10017                           fsr2h	equ	0xFDA
 10018                           fsr2l	equ	0xFD9
 10019                           status	equ	0xFD8
 10020                           
 10021 ;; *************** function _IRQ_Execution *****************
 10022 ;; Defined at:
 10023 ;;		line 40 in file "interrupt.c"
 10024 ;; Parameters:    Size  Location     Type
 10025 ;;  IRQ_Indice      1    wreg     unsigned char 
 10026 ;; Auto vars:     Size  Location     Type
 10027 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
 10028 ;; Return value:  Size  Location     Type
 10029 ;;                  1    wreg      void 
 10030 ;; Registers used:
 10031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 3F/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10037 ;;      Params:         0       0       0       0
 10038 ;;      Locals:         1       0       0       0
 10039 ;;      Temps:          0       0       0       0
 10040 ;;      Totals:         1       0       0       0
 10041 ;;Total ram usage:        1 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:   14
 10044 ;; This function calls:
 10045 ;;		_IRQ_ADC
 10046 ;;		_IRQ_CAPOT
 10047 ;;		_IRQ_I_MOTEUR_1
 10048 ;;		_IRQ_I_MOTEUR_2
 10049 ;;		_IRQ_PION_Metal_Apparait
 10050 ;;		_IRQ_PION_Metal_Disparait
 10051 ;;		_IRQ_PWM
 10052 ;;		_IRQ_TIMER2
 10053 ;;		_IRQ_TIMER_0
 10054 ;;		_IRQ_TIMER_5
 10055 ;; This function is called by:
 10056 ;;		_EUSART1_RX_T3_LOCAL
 10057 ;; This function uses a non-reentrant model
 10058 ;;
 10059                           
 10060                           	psect	text53
 10061  001BC6                     __ptext53:
 10062                           	opt stack 0
 10063  001BC6                     _IRQ_Execution:
 10064                           	opt stack 12
 10065                           
 10066                           ;incstack = 0
 10067                           ;IRQ_Execution@IRQ_Indice stored from wreg
 10068  001BC6  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
 10069                           
 10070                           ;interrupt.c: 62: break;
 10071                           
 10072                           ;interrupt.c: 60: break;
 10073                           
 10074                           ;interrupt.c: 58: break;
 10075                           
 10076                           ;interrupt.c: 56: break;
 10077                           
 10078                           ;interrupt.c: 54: break;
 10079                           
 10080                           ;interrupt.c: 52: break;
 10081                           
 10082                           ;interrupt.c: 50: break;
 10083                           
 10084                           ;interrupt.c: 48: break;
 10085                           
 10086                           ;interrupt.c: 46: break;
 10087                           
 10088                           ;interrupt.c: 44: break;
 10089                           
 10090                           ;interrupt.c: 41: switch (IRQ_Indice) {
 10091  001BC8  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
 10092                           
 10093                           ; Switch size 1, requested type "speed"
 10094                           ; Number of cases is 10, Range of values is 0 to 9
 10095                           ; switch strategies available:
 10096                           ; Name         Instructions Cycles
 10097                           ; simple_byte           31    16 (average)
 10098                           ;	Chosen strategy is simple_byte
 10099  001BCA  E102 EFD0  F011    	bz	_IRQ_CAPOT
 10100  001BD0  0A01               	xorlw	1	; case 1
 10101  001BD2  E102 EFE0  F010    	bz	_IRQ_I_MOTEUR_1
 10102  001BD8  0A03               	xorlw	3	; case 2
 10103  001BDA  E102 EF03  F011    	bz	_IRQ_I_MOTEUR_2
 10104  001BE0  0A01               	xorlw	1	; case 3
 10105  001BE2  E102 EFCA  F011    	bz	_IRQ_PION_Metal_Apparait
 10106  001BE8  0A07               	xorlw	7	; case 4
 10107  001BEA  E102 EFF9  F011    	bz	_IRQ_PION_Metal_Disparait
 10108  001BF0  0A01               	xorlw	1	; case 5
 10109  001BF2  E102 EF57  F00D    	bz	_IRQ_TIMER_0
 10110  001BF8  0A03               	xorlw	3	; case 6
 10111  001BFA  E102 EFF6  F011    	bz	_IRQ_TIMER2
 10112  001C00  0A01               	xorlw	1	; case 7
 10113  001C02  E102 EFC2  F00C    	bz	_IRQ_TIMER_5
 10114  001C08  0A0F               	xorlw	15	; case 8
 10115  001C0A  E102 EFEB  F006    	bz	_IRQ_ADC
 10116  001C10  0A01               	xorlw	1	; case 9
 10117  001C12  E102 EF0C  F012    	bz	_IRQ_PWM
 10118  001C18  0012               	return		;funcret
 10119  001C1A                     __end_of_IRQ_Execution:
 10120                           	opt stack 0
 10121                           tblptru	equ	0xFF8
 10122                           tblptrh	equ	0xFF7
 10123                           tblptrl	equ	0xFF6
 10124                           tablat	equ	0xFF5
 10125                           prodh	equ	0xFF4
 10126                           prodl	equ	0xFF3
 10127                           intcon	equ	0xFF2
 10128                           intcon2	equ	0xFF1
 10129                           intcon3	equ	0xFF0
 10130                           postinc0	equ	0xFEE
 10131                           wreg	equ	0xFE8
 10132                           indf1	equ	0xFE7
 10133                           postdec1	equ	0xFE5
 10134                           fsr1h	equ	0xFE2
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           fsr2h	equ	0xFDA
 10140                           fsr2l	equ	0xFD9
 10141                           status	equ	0xFD8
 10142                           
 10143 ;; *************** function _IRQ_TIMER_5 *****************
 10144 ;; Defined at:
 10145 ;;		line 415 in file "interrupt.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10159 ;;      Params:         0       0       0       0
 10160 ;;      Locals:         0       0       0       0
 10161 ;;      Temps:          0       0       0       0
 10162 ;;      Totals:         0       0       0       0
 10163 ;;Total ram usage:        0 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:   13
 10166 ;; This function calls:
 10167 ;;		_Alarme_On
 10168 ;;		_Buzzer_Etat
 10169 ;;		_Etat_Update
 10170 ;;		_TIMER5_Off
 10171 ;; This function is called by:
 10172 ;;		_IRQ_Execution
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           	psect	text54
 10177  001984                     __ptext54:
 10178                           	opt stack 0
 10179  001984                     _IRQ_TIMER_5:
 10180                           	opt stack 12
 10181                           
 10182                           ;interrupt.c: 416: PIR3bits.TMR5IF = 0;
 10183                           
 10184                           ;incstack = 0
 10185  001984  90A4               	bcf	4004,0,c	;volatile
 10186                           
 10187                           ;interrupt.c: 419: nb_100ms_Timer_5 += 1;
 10188  001986  0100               	movlb	0	; () banked
 10189  001988  2BA3               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 10190                           
 10191                           ; BSR set to: 0
 10192                           ;interrupt.c: 422: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 10193  00198A  51A2               	movf	_nb_100ms_pion& (0+255),w,b
 10194  00198C  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10195  00198E  E115               	bnz	l7132
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;interrupt.c: 423: if (Mouvement_Startup != 1) {
 10199  001990  044E               	decf	_Mouvement_Startup,w,c
 10200  001992  E001               	bz	l7118
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;interrupt.c: 424: nb_Pion += 1;
 10204  001994  2B9F               	incf	_nb_Pion& (0+255),f,b	;volatile
 10205  001996                     l7118:
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;interrupt.c: 425: }
 10209                           ;interrupt.c: 428: nb_s_fonctionnement = 0;
 10210  001996  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;interrupt.c: 432: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 10214  001998  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 10215  00199A  E003               	bz	l607
 10216                           
 10217                           ; BSR set to: 0
 10218  00199C  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 10219  00199E  5D9F               	subwf	_nb_Pion& (0+255),w,b	;volatile
 10220  0019A0  E202               	bc	l7124
 10221  0019A2                     l607:
 10222                           
 10223                           ; BSR set to: 0
 10224  0019A2  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 10225  0019A4  0012               	return	
 10226  0019A6                     l7124:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;interrupt.c: 435: Buzzer_Etat((unsigned char) 0);
 10230  0019A6  0E00               	movlw	0
 10231  0019A8  ECA4  F011         	call	_Buzzer_Etat
 10232                           
 10233                           ;interrupt.c: 436: P4_busy = 0;
 10234  0019AC  0100               	movlb	0	; () banked
 10235  0019AE  6BAA               	clrf	_P4_busy& (0+255),b
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;interrupt.c: 437: TIMER5_Off();
 10239  0019B0  ECE1  F011         	call	_TIMER5_Off	;wreg free
 10240                           
 10241                           ;interrupt.c: 438: Etat_Update(0);
 10242  0019B4  0E00               	movlw	0
 10243  0019B6  EF8A  F010         	goto	_Etat_Update
 10244  0019BA                     l7132:
 10245                           
 10246                           ; BSR set to: 0
 10247  0019BA  51A1               	movf	_nb_100ms_platine& (0+255),w,b
 10248  0019BC  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10249  0019BE  A4D8               	btfss	status,2,c
 10250  0019C0  0012               	return	
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;interrupt.c: 465: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 10254  0019C2  0596               	decf	_moteur_indice& (0+255),w,b	;volatile
 10255  0019C4  E108               	bnz	l610
 10256                           
 10257                           ; BSR set to: 0
 10258  0019C6  B480               	btfsc	3968,2,c	;volatile
 10259  0019C8  D006               	goto	l610
 10260                           
 10261                           ; BSR set to: 0
 10262  0019CA  044E               	decf	_Mouvement_Startup,w,c
 10263  0019CC  E104               	bnz	l610
 10264                           
 10265                           ; BSR set to: 0
 10266                           ;interrupt.c: 466: Alarme_On(6);
 10267  0019CE  0E06               	movlw	6
 10268  0019D0  EC75  F011         	call	_Alarme_On
 10269                           
 10270                           ;interrupt.c: 468: } else {
 10271  0019D4  D004               	goto	l7144
 10272  0019D6                     l610:
 10273                           
 10274                           ; BSR set to: 0
 10275                           ;interrupt.c: 469: P4_busy = 0;
 10276  0019D6  6BAA               	clrf	_P4_busy& (0+255),b
 10277                           
 10278                           ; BSR set to: 0
 10279                           ;interrupt.c: 470: Etat_Update(6);
 10280  0019D8  0E06               	movlw	6
 10281  0019DA  EC8A  F010         	call	_Etat_Update
 10282  0019DE                     l7144:
 10283                           
 10284                           ;interrupt.c: 473: }
 10285                           ;interrupt.c: 475: Buzzer_Etat((unsigned char) 0);
 10286  0019DE  0E00               	movlw	0
 10287  0019E0  ECA4  F011         	call	_Buzzer_Etat
 10288                           
 10289                           ;interrupt.c: 476: TIMER5_Off();
 10290  0019E4  EFE1  F011         	goto	_TIMER5_Off	;wreg free
 10291  0019E8                     __end_of_IRQ_TIMER_5:
 10292                           	opt stack 0
 10293                           tblptru	equ	0xFF8
 10294                           tblptrh	equ	0xFF7
 10295                           tblptrl	equ	0xFF6
 10296                           tablat	equ	0xFF5
 10297                           prodh	equ	0xFF4
 10298                           prodl	equ	0xFF3
 10299                           intcon	equ	0xFF2
 10300                           intcon2	equ	0xFF1
 10301                           intcon3	equ	0xFF0
 10302                           postinc0	equ	0xFEE
 10303                           wreg	equ	0xFE8
 10304                           indf1	equ	0xFE7
 10305                           postdec1	equ	0xFE5
 10306                           fsr1h	equ	0xFE2
 10307                           fsr1l	equ	0xFE1
 10308                           indf2	equ	0xFDF
 10309                           postinc2	equ	0xFDE
 10310                           postdec2	equ	0xFDD
 10311                           fsr2h	equ	0xFDA
 10312                           fsr2l	equ	0xFD9
 10313                           status	equ	0xFD8
 10314                           
 10315 ;; *************** function _TIMER5_Off *****************
 10316 ;; Defined at:
 10317 ;;		line 263 in file "timer.c"
 10318 ;; Parameters:    Size  Location     Type
 10319 ;;		None
 10320 ;; Auto vars:     Size  Location     Type
 10321 ;;		None
 10322 ;; Return value:  Size  Location     Type
 10323 ;;                  1    wreg      void 
 10324 ;; Registers used:
 10325 ;;		None
 10326 ;; Tracked objects:
 10327 ;;		On entry : 0/0
 10328 ;;		On exit  : 0/0
 10329 ;;		Unchanged: 0/0
 10330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10331 ;;      Params:         0       0       0       0
 10332 ;;      Locals:         0       0       0       0
 10333 ;;      Temps:          0       0       0       0
 10334 ;;      Totals:         0       0       0       0
 10335 ;;Total ram usage:        0 bytes
 10336 ;; Hardware stack levels used:    1
 10337 ;; Hardware stack levels required when called:   10
 10338 ;; This function calls:
 10339 ;;		Nothing
 10340 ;; This function is called by:
 10341 ;;		_IRQ_TIMER_5
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           	psect	text55
 10346  0023C2                     __ptext55:
 10347                           	opt stack 0
 10348  0023C2                     _TIMER5_Off:
 10349                           	opt stack 14
 10350                           
 10351                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 10352                           
 10353                           ;incstack = 0
 10354  0023C2  90B7               	bcf	4023,0,c	;volatile
 10355                           
 10356                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 10357  0023C4  90A4               	bcf	4004,0,c	;volatile
 10358                           
 10359                           ;timer.c: 268: TMR5L = 0;
 10360  0023C6  6A87               	clrf	3975,c	;volatile
 10361                           
 10362                           ;timer.c: 269: TMR5H = 0;
 10363  0023C8  6A88               	clrf	3976,c	;volatile
 10364  0023CA  0012               	return		;funcret
 10365  0023CC                     __end_of_TIMER5_Off:
 10366                           	opt stack 0
 10367                           tblptru	equ	0xFF8
 10368                           tblptrh	equ	0xFF7
 10369                           tblptrl	equ	0xFF6
 10370                           tablat	equ	0xFF5
 10371                           prodh	equ	0xFF4
 10372                           prodl	equ	0xFF3
 10373                           intcon	equ	0xFF2
 10374                           intcon2	equ	0xFF1
 10375                           intcon3	equ	0xFF0
 10376                           postinc0	equ	0xFEE
 10377                           wreg	equ	0xFE8
 10378                           indf1	equ	0xFE7
 10379                           postdec1	equ	0xFE5
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389 ;; *************** function _Buzzer_Etat *****************
 10390 ;; Defined at:
 10391 ;;		line 29 in file "interrupt.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  Activation      1    wreg     unsigned char 
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;  Activation      1   14[COMRAM] unsigned char 
 10396 ;; Return value:  Size  Location     Type
 10397 ;;                  1    wreg      void 
 10398 ;; Registers used:
 10399 ;;		wreg, status,2, status,0
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/2
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10405 ;;      Params:         0       0       0       0
 10406 ;;      Locals:         1       0       0       0
 10407 ;;      Temps:          0       0       0       0
 10408 ;;      Totals:         1       0       0       0
 10409 ;;Total ram usage:        1 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:   10
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_Cycle
 10416 ;;		_IRQ_TIMER_5
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           	psect	text56
 10421  002348                     __ptext56:
 10422                           	opt stack 0
 10423  002348                     _Buzzer_Etat:
 10424                           	opt stack 14
 10425                           
 10426                           ;incstack = 0
 10427                           ;Buzzer_Etat@Activation stored from wreg
 10428  002348  6E0F               	movwf	Buzzer_Etat@Activation,c
 10429                           
 10430                           ;interrupt.c: 30: if (Activation == 1) {
 10431  00234A  040F               	decf	Buzzer_Etat@Activation,w,c
 10432  00234C  E102               	bnz	l532
 10433                           
 10434                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 10435  00234E  8C89               	bsf	3977,6,c	;volatile
 10436                           
 10437                           ;interrupt.c: 33: } else {
 10438  002350  0012               	return	
 10439  002352                     l532:
 10440                           
 10441                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 10442  002352  9C89               	bcf	3977,6,c	;volatile
 10443  002354  0012               	return		;funcret
 10444  002356                     __end_of_Buzzer_Etat:
 10445                           	opt stack 0
 10446                           tblptru	equ	0xFF8
 10447                           tblptrh	equ	0xFF7
 10448                           tblptrl	equ	0xFF6
 10449                           tablat	equ	0xFF5
 10450                           prodh	equ	0xFF4
 10451                           prodl	equ	0xFF3
 10452                           intcon	equ	0xFF2
 10453                           intcon2	equ	0xFF1
 10454                           intcon3	equ	0xFF0
 10455                           postinc0	equ	0xFEE
 10456                           wreg	equ	0xFE8
 10457                           indf1	equ	0xFE7
 10458                           postdec1	equ	0xFE5
 10459                           fsr1h	equ	0xFE2
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function _IRQ_TIMER_0 *****************
 10469 ;; Defined at:
 10470 ;;		line 367 in file "interrupt.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;		None
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;		None
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      void 
 10477 ;; Registers used:
 10478 ;;		wreg, status,2, status,0, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 3F/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10484 ;;      Params:         0       0       0       0
 10485 ;;      Locals:         0       0       0       0
 10486 ;;      Temps:          0       0       0       0
 10487 ;;      Totals:         0       0       0       0
 10488 ;;Total ram usage:        0 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:   11
 10491 ;; This function calls:
 10492 ;;		_Surveillance_Consommation_Moteur_1_Activer
 10493 ;;		_Surveillance_Consommation_Moteur_2_Activer
 10494 ;; This function is called by:
 10495 ;;		_IRQ_Execution
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           	psect	text57
 10500  001AAE                     __ptext57:
 10501                           	opt stack 0
 10502  001AAE                     _IRQ_TIMER_0:
 10503                           	opt stack 14
 10504                           
 10505                           ;interrupt.c: 368: INTCONbits.TMR0IF = 0;
 10506                           
 10507                           ;incstack = 0
 10508  001AAE  94F2               	bcf	intcon,2,c	;volatile
 10509                           
 10510                           ;interrupt.c: 370: nb_s_fonctionnement += 1;
 10511  001AB0  0100               	movlb	0	; () banked
 10512  001AB2  2BA5               	incf	_nb_s_fonctionnement& (0+255),f,b	;volatile
 10513                           
 10514                           ;interrupt.c: 371: Capteur_Capot_Compteur_Temps_S += 1;
 10515  001AB4  2B9B               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 10516                           
 10517                           ;interrupt.c: 372: delay_s_counter += 1;
 10518  001AB6  2B8A               	incf	_delay_s_counter& (0+255),f,b	;volatile
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;interrupt.c: 377: if (nb_s_fonctionnement == 2) {
 10522  001AB8  0E02               	movlw	2
 10523  001ABA  19A5               	xorwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
 10524  001ABC  E01F               	bz	l7104
 10525  001ABE  0012               	return	
 10526  001AC0                     l7084:
 10527                           
 10528                           ; BSR set to: 0
 10529                           ;interrupt.c: 385: Surveillance_Consommation_Moteur_1_Activer();
 10530  001AC0  EC6D  F011         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 10531                           
 10532                           ;interrupt.c: 386: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10533  001AC4  0100               	movlb	0	; () banked
 10534  001AC6  5193               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10535  001AC8  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10536  001ACA  E203               	bc	l588
 10537  001ACC                     l7088:
 10538                           
 10539                           ; BSR set to: 0
 10540                           ;interrupt.c: 387: consigne = Consigne_Max;
 10541  001ACC  C094  F095         	movff	_Consigne_Max,_consigne	;volatile
 10542                           
 10543                           ;interrupt.c: 388: } else {
 10544  001AD0  0012               	return	
 10545  001AD2                     l588:
 10546                           
 10547                           ; BSR set to: 0
 10548                           ;interrupt.c: 389: consigne = Consigne_Max_Moteur_X;
 10549  001AD2  C093  F095         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10550  001AD6  0012               	return	
 10551  001AD8                     l7090:
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;interrupt.c: 393: Surveillance_Consommation_Moteur_2_Activer();
 10555  001AD8  EC65  F011         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10556                           
 10557                           ;interrupt.c: 395: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10558  001ADC  0100               	movlb	0	; () banked
 10559  001ADE  5192               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10560  001AE0  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10561  001AE2  E3F4               	bnc	l7088
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;interrupt.c: 398: consigne = Consigne_Max_Moteur_Z;
 10565  001AE4  C092  F095         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10566  001AE8  0012               	return	
 10567  001AEA                     l7096:
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;interrupt.c: 402: Surveillance_Consommation_Moteur_2_Activer();
 10571  001AEA  EC65  F011         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10572                           
 10573                           ;interrupt.c: 403: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10574  001AEE  0100               	movlb	0	; () banked
 10575  001AF0  5191               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10576  001AF2  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10577  001AF4  E3EB               	bnc	l7088
 10578                           
 10579                           ; BSR set to: 0
 10580                           ;interrupt.c: 406: consigne = Consigne_Max_Moteur_Bequille;
 10581  001AF6  C091  F095         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10582  001AFA  0012               	return	
 10583  001AFC                     l7104:
 10584                           
 10585                           ; BSR set to: 0
 10586  001AFC  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 10587                           
 10588                           ; Switch size 1, requested type "speed"
 10589                           ; Number of cases is 3, Range of values is 1 to 3
 10590                           ; switch strategies available:
 10591                           ; Name         Instructions Cycles
 10592                           ; simple_byte           10     6 (average)
 10593                           ;	Chosen strategy is simple_byte
 10594  001AFE  0A01               	xorlw	1	; case 1
 10595  001B00  E0DF               	bz	l7084
 10596  001B02  0A03               	xorlw	3	; case 2
 10597  001B04  E0E9               	bz	l7090
 10598  001B06  0A01               	xorlw	1	; case 3
 10599  001B08  E0F0               	bz	l7096
 10600                           
 10601                           ; BSR set to: 0
 10602  001B0A  0012               	return		;funcret
 10603  001B0C                     __end_of_IRQ_TIMER_0:
 10604                           	opt stack 0
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           intcon2	equ	0xFF1
 10613                           intcon3	equ	0xFF0
 10614                           postinc0	equ	0xFEE
 10615                           wreg	equ	0xFE8
 10616                           indf1	equ	0xFE7
 10617                           postdec1	equ	0xFE5
 10618                           fsr1h	equ	0xFE2
 10619                           fsr1l	equ	0xFE1
 10620                           indf2	equ	0xFDF
 10621                           postinc2	equ	0xFDE
 10622                           postdec2	equ	0xFDD
 10623                           fsr2h	equ	0xFDA
 10624                           fsr2l	equ	0xFD9
 10625                           status	equ	0xFD8
 10626                           
 10627 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 10628 ;; Defined at:
 10629 ;;		line 880 in file "interrupt.c"
 10630 ;; Parameters:    Size  Location     Type
 10631 ;;		None
 10632 ;; Auto vars:     Size  Location     Type
 10633 ;;		None
 10634 ;; Return value:  Size  Location     Type
 10635 ;;                  1    wreg      void 
 10636 ;; Registers used:
 10637 ;;		wreg, status,2, status,0
 10638 ;; Tracked objects:
 10639 ;;		On entry : 0/0
 10640 ;;		On exit  : 0/0
 10641 ;;		Unchanged: 0/0
 10642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10643 ;;      Params:         0       0       0       0
 10644 ;;      Locals:         0       0       0       0
 10645 ;;      Temps:          0       0       0       0
 10646 ;;      Totals:         0       0       0       0
 10647 ;;Total ram usage:        0 bytes
 10648 ;; Hardware stack levels used:    1
 10649 ;; Hardware stack levels required when called:   10
 10650 ;; This function calls:
 10651 ;;		Nothing
 10652 ;; This function is called by:
 10653 ;;		_IRQ_TIMER_0
 10654 ;; This function uses a non-reentrant model
 10655 ;;
 10656                           
 10657                           	psect	text58
 10658  0022CA                     __ptext58:
 10659                           	opt stack 0
 10660  0022CA                     _Surveillance_Consommation_Moteur_2_Activer:
 10661                           	opt stack 14
 10662                           
 10663                           ;interrupt.c: 881: if (Surveillance_Consommation_Moteur_2 != 1) {
 10664                           
 10665                           ; BSR set to: 0
 10666                           ;incstack = 0
 10667  0022CA  0448               	decf	_Surveillance_Consommation_Moteur_2,w,c
 10668  0022CC  B4D8               	btfsc	status,2,c
 10669  0022CE  0012               	return	
 10670                           
 10671                           ;interrupt.c: 882: Surveillance_Consommation_Moteur_2 = 1;
 10672  0022D0  0E01               	movlw	1
 10673  0022D2  6E48               	movwf	_Surveillance_Consommation_Moteur_2,c
 10674                           
 10675                           ;interrupt.c: 883: INTCON3bits.INT2IF = 0;
 10676  0022D4  92F0               	bcf	intcon3,1,c	;volatile
 10677                           
 10678                           ;interrupt.c: 884: INTCON3bits.INT2IE = 1;
 10679  0022D6  88F0               	bsf	intcon3,4,c	;volatile
 10680  0022D8  0C01               	retlw	1	;funcret
 10681  0022DA                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 10682                           	opt stack 0
 10683                           tblptru	equ	0xFF8
 10684                           tblptrh	equ	0xFF7
 10685                           tblptrl	equ	0xFF6
 10686                           tablat	equ	0xFF5
 10687                           prodh	equ	0xFF4
 10688                           prodl	equ	0xFF3
 10689                           intcon	equ	0xFF2
 10690                           intcon2	equ	0xFF1
 10691                           intcon3	equ	0xFF0
 10692                           postinc0	equ	0xFEE
 10693                           wreg	equ	0xFE8
 10694                           indf1	equ	0xFE7
 10695                           postdec1	equ	0xFE5
 10696                           fsr1h	equ	0xFE2
 10697                           fsr1l	equ	0xFE1
 10698                           indf2	equ	0xFDF
 10699                           postinc2	equ	0xFDE
 10700                           postdec2	equ	0xFDD
 10701                           fsr2h	equ	0xFDA
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 10706 ;; Defined at:
 10707 ;;		line 864 in file "interrupt.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg, status,2, status,0
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10721 ;;      Params:         0       0       0       0
 10722 ;;      Locals:         0       0       0       0
 10723 ;;      Temps:          0       0       0       0
 10724 ;;      Totals:         0       0       0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:   10
 10728 ;; This function calls:
 10729 ;;		Nothing
 10730 ;; This function is called by:
 10731 ;;		_IRQ_TIMER_0
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           	psect	text59
 10736  0022DA                     __ptext59:
 10737                           	opt stack 0
 10738  0022DA                     _Surveillance_Consommation_Moteur_1_Activer:
 10739                           	opt stack 14
 10740                           
 10741                           ;interrupt.c: 865: if (Surveillance_Consommation_Moteur_1 != 1) {
 10742                           
 10743                           ;incstack = 0
 10744  0022DA  0449               	decf	_Surveillance_Consommation_Moteur_1,w,c
 10745  0022DC  B4D8               	btfsc	status,2,c
 10746  0022DE  0012               	return	
 10747                           
 10748                           ;interrupt.c: 866: Surveillance_Consommation_Moteur_1 = 1;
 10749  0022E0  0E01               	movlw	1
 10750  0022E2  6E49               	movwf	_Surveillance_Consommation_Moteur_1,c
 10751                           
 10752                           ;interrupt.c: 867: INTCON3bits.INT1IF = 0;
 10753  0022E4  90F0               	bcf	intcon3,0,c	;volatile
 10754                           
 10755                           ;interrupt.c: 868: INTCON3bits.INT1IE = 1;
 10756  0022E6  86F0               	bsf	intcon3,3,c	;volatile
 10757  0022E8  0C01               	retlw	1	;funcret
 10758  0022EA                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 10759                           	opt stack 0
 10760                           tblptru	equ	0xFF8
 10761                           tblptrh	equ	0xFF7
 10762                           tblptrl	equ	0xFF6
 10763                           tablat	equ	0xFF5
 10764                           prodh	equ	0xFF4
 10765                           prodl	equ	0xFF3
 10766                           intcon	equ	0xFF2
 10767                           intcon2	equ	0xFF1
 10768                           intcon3	equ	0xFF0
 10769                           postinc0	equ	0xFEE
 10770                           wreg	equ	0xFE8
 10771                           indf1	equ	0xFE7
 10772                           postdec1	equ	0xFE5
 10773                           fsr1h	equ	0xFE2
 10774                           fsr1l	equ	0xFE1
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           postdec2	equ	0xFDD
 10778                           fsr2h	equ	0xFDA
 10779                           fsr2l	equ	0xFD9
 10780                           status	equ	0xFD8
 10781                           
 10782 ;; *************** function _IRQ_TIMER2 *****************
 10783 ;; Defined at:
 10784 ;;		line 895 in file "interrupt.c"
 10785 ;; Parameters:    Size  Location     Type
 10786 ;;		None
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;		None
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  1    wreg      void 
 10791 ;; Registers used:
 10792 ;;		None
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10798 ;;      Params:         0       0       0       0
 10799 ;;      Locals:         0       0       0       0
 10800 ;;      Temps:          0       0       0       0
 10801 ;;      Totals:         0       0       0       0
 10802 ;;Total ram usage:        0 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:   10
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_IRQ_Execution
 10809 ;; This function uses a non-reentrant model
 10810 ;;
 10811                           
 10812                           	psect	text60
 10813  0023EC                     __ptext60:
 10814                           	opt stack 0
 10815  0023EC                     _IRQ_TIMER2:
 10816                           	opt stack 15
 10817                           
 10818                           ;interrupt.c: 896: PIR1bits.TMR2IF = 0;
 10819                           
 10820                           ;incstack = 0
 10821  0023EC  929E               	bcf	3998,1,c	;volatile
 10822                           
 10823                           ;interrupt.c: 899: GODONE = 1;
 10824  0023EE  82C2               	bsf	4034,1,c	;volatile
 10825  0023F0  0012               	return		;funcret
 10826  0023F2                     __end_of_IRQ_TIMER2:
 10827                           	opt stack 0
 10828                           tblptru	equ	0xFF8
 10829                           tblptrh	equ	0xFF7
 10830                           tblptrl	equ	0xFF6
 10831                           tablat	equ	0xFF5
 10832                           prodh	equ	0xFF4
 10833                           prodl	equ	0xFF3
 10834                           intcon	equ	0xFF2
 10835                           intcon2	equ	0xFF1
 10836                           intcon3	equ	0xFF0
 10837                           postinc0	equ	0xFEE
 10838                           wreg	equ	0xFE8
 10839                           indf1	equ	0xFE7
 10840                           postdec1	equ	0xFE5
 10841                           fsr1h	equ	0xFE2
 10842                           fsr1l	equ	0xFE1
 10843                           indf2	equ	0xFDF
 10844                           postinc2	equ	0xFDE
 10845                           postdec2	equ	0xFDD
 10846                           fsr2h	equ	0xFDA
 10847                           fsr2l	equ	0xFD9
 10848                           status	equ	0xFD8
 10849                           
 10850 ;; *************** function _IRQ_PWM *****************
 10851 ;; Defined at:
 10852 ;;		line 483 in file "interrupt.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;		None
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      void 
 10859 ;; Registers used:
 10860 ;;		None
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10866 ;;      Params:         0       0       0       0
 10867 ;;      Locals:         0       0       0       0
 10868 ;;      Temps:          0       0       0       0
 10869 ;;      Totals:         0       0       0       0
 10870 ;;Total ram usage:        0 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:   10
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		_IRQ_Execution
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text61
 10881  002418                     __ptext61:
 10882                           	opt stack 0
 10883  002418                     _IRQ_PWM:
 10884                           	opt stack 15
 10885                           
 10886                           ;interrupt.c: 485: PTIF = 0;
 10887                           
 10888                           ;incstack = 0
 10889  002418  98A4               	bcf	4004,4,c	;volatile
 10890  00241A  0012               	return		;funcret
 10891  00241C                     __end_of_IRQ_PWM:
 10892                           	opt stack 0
 10893                           tblptru	equ	0xFF8
 10894                           tblptrh	equ	0xFF7
 10895                           tblptrl	equ	0xFF6
 10896                           tablat	equ	0xFF5
 10897                           prodh	equ	0xFF4
 10898                           prodl	equ	0xFF3
 10899                           intcon	equ	0xFF2
 10900                           intcon2	equ	0xFF1
 10901                           intcon3	equ	0xFF0
 10902                           postinc0	equ	0xFEE
 10903                           wreg	equ	0xFE8
 10904                           indf1	equ	0xFE7
 10905                           postdec1	equ	0xFE5
 10906                           fsr1h	equ	0xFE2
 10907                           fsr1l	equ	0xFE1
 10908                           indf2	equ	0xFDF
 10909                           postinc2	equ	0xFDE
 10910                           postdec2	equ	0xFDD
 10911                           fsr2h	equ	0xFDA
 10912                           fsr2l	equ	0xFD9
 10913                           status	equ	0xFD8
 10914                           
 10915 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 10916 ;; Defined at:
 10917 ;;		line 293 in file "interrupt.c"
 10918 ;; Parameters:    Size  Location     Type
 10919 ;;		None
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;		None
 10922 ;; Return value:  Size  Location     Type
 10923 ;;                  1    wreg      void 
 10924 ;; Registers used:
 10925 ;;		None
 10926 ;; Tracked objects:
 10927 ;;		On entry : 0/0
 10928 ;;		On exit  : 0/0
 10929 ;;		Unchanged: 0/0
 10930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10931 ;;      Params:         0       0       0       0
 10932 ;;      Locals:         0       0       0       0
 10933 ;;      Temps:          0       0       0       0
 10934 ;;      Totals:         0       0       0       0
 10935 ;;Total ram usage:        0 bytes
 10936 ;; Hardware stack levels used:    1
 10937 ;; Hardware stack levels required when called:   10
 10938 ;; This function calls:
 10939 ;;		Nothing
 10940 ;; This function is called by:
 10941 ;;		_IRQ_Execution
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           	psect	text62
 10946  0023F2                     __ptext62:
 10947                           	opt stack 0
 10948  0023F2                     _IRQ_PION_Metal_Disparait:
 10949                           	opt stack 15
 10950                           
 10951                           ;interrupt.c: 296: PIE3bits.IC2QEIE = 0;
 10952                           
 10953                           ;incstack = 0
 10954  0023F2  94A3               	bcf	4003,2,c	;volatile
 10955                           
 10956                           ;interrupt.c: 297: PIR3bits.IC2QEIF = 0;
 10957  0023F4  94A4               	bcf	4004,2,c	;volatile
 10958  0023F6  0012               	return		;funcret
 10959  0023F8                     __end_of_IRQ_PION_Metal_Disparait:
 10960                           	opt stack 0
 10961                           tblptru	equ	0xFF8
 10962                           tblptrh	equ	0xFF7
 10963                           tblptrl	equ	0xFF6
 10964                           tablat	equ	0xFF5
 10965                           prodh	equ	0xFF4
 10966                           prodl	equ	0xFF3
 10967                           intcon	equ	0xFF2
 10968                           intcon2	equ	0xFF1
 10969                           intcon3	equ	0xFF0
 10970                           postinc0	equ	0xFEE
 10971                           wreg	equ	0xFE8
 10972                           indf1	equ	0xFE7
 10973                           postdec1	equ	0xFE5
 10974                           fsr1h	equ	0xFE2
 10975                           fsr1l	equ	0xFE1
 10976                           indf2	equ	0xFDF
 10977                           postinc2	equ	0xFDE
 10978                           postdec2	equ	0xFDD
 10979                           fsr2h	equ	0xFDA
 10980                           fsr2l	equ	0xFD9
 10981                           status	equ	0xFD8
 10982                           
 10983 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 10984 ;; Defined at:
 10985 ;;		line 268 in file "interrupt.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;		None
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;		None
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      void 
 10992 ;; Registers used:
 10993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10999 ;;      Params:         0       0       0       0
 11000 ;;      Locals:         0       0       0       0
 11001 ;;      Temps:          0       0       0       0
 11002 ;;      Totals:         0       0       0       0
 11003 ;;Total ram usage:        0 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; Hardware stack levels required when called:   11
 11006 ;; This function calls:
 11007 ;;		_Etat_Update
 11008 ;; This function is called by:
 11009 ;;		_IRQ_Execution
 11010 ;;		_Detection_Pion_On
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           	psect	text63
 11015  002394                     __ptext63:
 11016                           	opt stack 0
 11017  002394                     _IRQ_PION_Metal_Apparait:
 11018                           	opt stack 14
 11019                           
 11020                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 11021                           
 11022                           ;incstack = 0
 11023  002394  92A4               	bcf	4004,1,c	;volatile
 11024                           
 11025                           ;interrupt.c: 273: if(PORTCbits.RC3==0){
 11026  002396  B682               	btfsc	3970,3,c	;volatile
 11027  002398  0012               	return	
 11028                           
 11029                           ;interrupt.c: 274: Etat_Update(3);
 11030  00239A  0E03               	movlw	3
 11031  00239C  EF8A  F010         	goto	_Etat_Update
 11032  0023A0                     __end_of_IRQ_PION_Metal_Apparait:
 11033                           	opt stack 0
 11034                           tblptru	equ	0xFF8
 11035                           tblptrh	equ	0xFF7
 11036                           tblptrl	equ	0xFF6
 11037                           tablat	equ	0xFF5
 11038                           prodh	equ	0xFF4
 11039                           prodl	equ	0xFF3
 11040                           intcon	equ	0xFF2
 11041                           intcon2	equ	0xFF1
 11042                           intcon3	equ	0xFF0
 11043                           postinc0	equ	0xFEE
 11044                           wreg	equ	0xFE8
 11045                           indf1	equ	0xFE7
 11046                           postdec1	equ	0xFE5
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 11057 ;; Defined at:
 11058 ;;		line 924 in file "interrupt.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;		None
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;		None
 11063 ;; Return value:  Size  Location     Type
 11064 ;;                  1    wreg      void 
 11065 ;; Registers used:
 11066 ;;		wreg, status,2, status,0
 11067 ;; Tracked objects:
 11068 ;;		On entry : 0/0
 11069 ;;		On exit  : 0/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11072 ;;      Params:         0       0       0       0
 11073 ;;      Locals:         0       0       0       0
 11074 ;;      Temps:          0       0       0       0
 11075 ;;      Totals:         0       0       0       0
 11076 ;;Total ram usage:        0 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:   10
 11079 ;; This function calls:
 11080 ;;		Nothing
 11081 ;; This function is called by:
 11082 ;;		_IRQ_Execution
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text64
 11087  002206                     __ptext64:
 11088                           	opt stack 0
 11089  002206                     _IRQ_I_MOTEUR_2:
 11090                           	opt stack 15
 11091                           
 11092                           ;interrupt.c: 929: LATCbits.LATC1 = 0;
 11093                           
 11094                           ;incstack = 0
 11095  002206  928B               	bcf	3979,1,c	;volatile
 11096                           
 11097                           ;interrupt.c: 931: while(TMR2 > 0) __nop();
 11098  002208  D001               	goto	l7064
 11099  00220A                     l699:
 11100  00220A  F000               	nop	
 11101  00220C                     l7064:
 11102  00220C  50CC               	movf	4044,w,c	;volatile
 11103  00220E  E1FD               	bnz	l699
 11104                           
 11105                           ;interrupt.c: 933: LATCbits.LATC1 = 1;
 11106  002210  828B               	bsf	3979,1,c	;volatile
 11107                           
 11108                           ;interrupt.c: 947: LATCbits.LATC2^=1;
 11109  002212  748B               	btg	3979,2,c	;volatile
 11110                           
 11111                           ;interrupt.c: 948: INTCON3bits.INT2IF = 0;
 11112  002214  92F0               	bcf	intcon3,1,c	;volatile
 11113                           
 11114                           ;interrupt.c: 952: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 11115  002216  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 11116  002218  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 11117  00221A  0012               	return		;funcret
 11118  00221C                     __end_of_IRQ_I_MOTEUR_2:
 11119                           	opt stack 0
 11120                           tblptru	equ	0xFF8
 11121                           tblptrh	equ	0xFF7
 11122                           tblptrl	equ	0xFF6
 11123                           tablat	equ	0xFF5
 11124                           prodh	equ	0xFF4
 11125                           prodl	equ	0xFF3
 11126                           intcon	equ	0xFF2
 11127                           intcon2	equ	0xFF1
 11128                           intcon3	equ	0xFF0
 11129                           postinc0	equ	0xFEE
 11130                           wreg	equ	0xFE8
 11131                           indf1	equ	0xFE7
 11132                           postdec1	equ	0xFE5
 11133                           fsr1h	equ	0xFE2
 11134                           fsr1l	equ	0xFE1
 11135                           indf2	equ	0xFDF
 11136                           postinc2	equ	0xFDE
 11137                           postdec2	equ	0xFDD
 11138                           fsr2h	equ	0xFDA
 11139                           fsr2l	equ	0xFD9
 11140                           status	equ	0xFD8
 11141                           
 11142 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 11143 ;; Defined at:
 11144 ;;		line 910 in file "interrupt.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;		None
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      void 
 11151 ;; Registers used:
 11152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11158 ;;      Params:         0       0       0       0
 11159 ;;      Locals:         0       0       0       0
 11160 ;;      Temps:          0       0       0       0
 11161 ;;      Totals:         0       0       0       0
 11162 ;;Total ram usage:        0 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:   13
 11165 ;; This function calls:
 11166 ;;		_Alarme_On
 11167 ;; This function is called by:
 11168 ;;		_IRQ_Execution
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text65
 11173  0021C0                     __ptext65:
 11174                           	opt stack 0
 11175  0021C0                     _IRQ_I_MOTEUR_1:
 11176                           	opt stack 12
 11177                           
 11178                           ;interrupt.c: 911: INTCON3bits.INT1IF = 0;
 11179                           
 11180                           ;incstack = 0
 11181  0021C0  90F0               	bcf	intcon3,0,c	;volatile
 11182                           
 11183                           ;interrupt.c: 912: Compteur_IRQ_I_Moteur_1 += 1;
 11184  0021C2  0100               	movlb	0	; () banked
 11185  0021C4  2B89               	incf	_Compteur_IRQ_I_Moteur_1& (0+255),f,b	;volatile
 11186                           
 11187                           ; BSR set to: 0
 11188                           ;interrupt.c: 913: if (Compteur_IRQ_I_Moteur_1 == 0) {
 11189  0021C6  5189               	movf	_Compteur_IRQ_I_Moteur_1& (0+255),w,b	;volatile
 11190  0021C8  A4D8               	btfss	status,2,c
 11191  0021CA  0012               	return	
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;interrupt.c: 914: LATCbits.LATC2 = 1;
 11195  0021CC  848B               	bsf	3979,2,c	;volatile
 11196                           
 11197                           ;interrupt.c: 916: LATCbits.LATC0 = 0;
 11198  0021CE  908B               	bcf	3979,0,c	;volatile
 11199                           
 11200                           ;interrupt.c: 917: LATCbits.LATC1 = 0;
 11201  0021D0  928B               	bcf	3979,1,c	;volatile
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;interrupt.c: 919: Alarme_On(1);
 11205  0021D2  0E01               	movlw	1
 11206  0021D4  EF75  F011         	goto	_Alarme_On
 11207  0021D8                     __end_of_IRQ_I_MOTEUR_1:
 11208                           	opt stack 0
 11209                           tblptru	equ	0xFF8
 11210                           tblptrh	equ	0xFF7
 11211                           tblptrl	equ	0xFF6
 11212                           tablat	equ	0xFF5
 11213                           prodh	equ	0xFF4
 11214                           prodl	equ	0xFF3
 11215                           intcon	equ	0xFF2
 11216                           intcon2	equ	0xFF1
 11217                           intcon3	equ	0xFF0
 11218                           postinc0	equ	0xFEE
 11219                           wreg	equ	0xFE8
 11220                           indf1	equ	0xFE7
 11221                           postdec1	equ	0xFE5
 11222                           fsr1h	equ	0xFE2
 11223                           fsr1l	equ	0xFE1
 11224                           indf2	equ	0xFDF
 11225                           postinc2	equ	0xFDE
 11226                           postdec2	equ	0xFDD
 11227                           fsr2h	equ	0xFDA
 11228                           fsr2l	equ	0xFD9
 11229                           status	equ	0xFD8
 11230                           
 11231 ;; *************** function _Alarme_On *****************
 11232 ;; Defined at:
 11233 ;;		line 18 in file "alarme.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;  alarme_new_v    1    wreg     unsigned char 
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  1    wreg      void 
 11240 ;; Registers used:
 11241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11247 ;;      Params:         0       0       0       0
 11248 ;;      Locals:         1       0       0       0
 11249 ;;      Temps:          0       0       0       0
 11250 ;;      Totals:         1       0       0       0
 11251 ;;Total ram usage:        1 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:   12
 11254 ;; This function calls:
 11255 ;;		_Coupe_Moteur
 11256 ;;		_Etat_Update
 11257 ;; This function is called by:
 11258 ;;		_IRQ_TIMER_5
 11259 ;;		_IRQ_I_MOTEUR_1
 11260 ;;		_Check_List_Moteur_1
 11261 ;;		_EUSART1_RX_T3_LOCAL
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text66
 11266  0022EA                     __ptext66:
 11267                           	opt stack 0
 11268  0022EA                     _Alarme_On:
 11269                           	opt stack 12
 11270                           
 11271                           ;incstack = 0
 11272                           ;Alarme_On@alarme_new_value stored from wreg
 11273  0022EA  6E10               	movwf	Alarme_On@alarme_new_value,c
 11274                           
 11275                           ;alarme.c: 22: Etat_Update(1);
 11276  0022EC  0E01               	movlw	1
 11277  0022EE  EC8A  F010         	call	_Etat_Update
 11278                           
 11279                           ;alarme.c: 23: Alarme = alarme_new_value;
 11280  0022F2  C010  F0A7         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 11281                           
 11282                           ;alarme.c: 24: Coupe_Moteur();
 11283  0022F6  EF0E  F011         	goto	_Coupe_Moteur	;wreg free
 11284  0022FA                     __end_of_Alarme_On:
 11285                           	opt stack 0
 11286                           tblptru	equ	0xFF8
 11287                           tblptrh	equ	0xFF7
 11288                           tblptrl	equ	0xFF6
 11289                           tablat	equ	0xFF5
 11290                           prodh	equ	0xFF4
 11291                           prodl	equ	0xFF3
 11292                           intcon	equ	0xFF2
 11293                           intcon2	equ	0xFF1
 11294                           intcon3	equ	0xFF0
 11295                           postinc0	equ	0xFEE
 11296                           wreg	equ	0xFE8
 11297                           indf1	equ	0xFE7
 11298                           postdec1	equ	0xFE5
 11299                           fsr1h	equ	0xFE2
 11300                           fsr1l	equ	0xFE1
 11301                           indf2	equ	0xFDF
 11302                           postinc2	equ	0xFDE
 11303                           postdec2	equ	0xFDD
 11304                           fsr2h	equ	0xFDA
 11305                           fsr2l	equ	0xFD9
 11306                           status	equ	0xFD8
 11307                           
 11308 ;; *************** function _Coupe_Moteur *****************
 11309 ;; Defined at:
 11310 ;;		line 277 in file "action.c"
 11311 ;; Parameters:    Size  Location     Type
 11312 ;;		None
 11313 ;; Auto vars:     Size  Location     Type
 11314 ;;		None
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      void 
 11317 ;; Registers used:
 11318 ;;		cstack
 11319 ;; Tracked objects:
 11320 ;;		On entry : 0/2
 11321 ;;		On exit  : 0/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11324 ;;      Params:         0       0       0       0
 11325 ;;      Locals:         0       0       0       0
 11326 ;;      Temps:          0       0       0       0
 11327 ;;      Totals:         0       0       0       0
 11328 ;;Total ram usage:        0 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:   11
 11331 ;; This function calls:
 11332 ;;		_TIMER2_Off
 11333 ;; This function is called by:
 11334 ;;		_Mouvement_Bequille
 11335 ;;		_Mouvement_Z
 11336 ;;		_Mouvement_X
 11337 ;;		_Mouvement_X_Metalhome
 11338 ;;		_EUSART1_RX_T3_LOCAL
 11339 ;;		_Alarme_On
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           	psect	text67
 11344  00221C                     __ptext67:
 11345                           	opt stack 0
 11346  00221C                     _Coupe_Moteur:
 11347                           	opt stack 12
 11348                           
 11349                           ;action.c: 278: TIMER2_Off();
 11350                           
 11351                           ;incstack = 0
 11352  00221C  ECFC  F011         	call	_TIMER2_Off	;wreg free
 11353                           
 11354                           ;action.c: 283: LATEbits.LATE2 = 0;
 11355  002220  948D               	bcf	3981,2,c	;volatile
 11356                           
 11357                           ;action.c: 290: LATCbits.LATC0 = 0;
 11358  002222  908B               	bcf	3979,0,c	;volatile
 11359                           
 11360                           ;action.c: 291: LATCbits.LATC1 = 0;
 11361  002224  928B               	bcf	3979,1,c	;volatile
 11362                           
 11363                           ;action.c: 292: OVDCOND = 0b00000000;
 11364  002226  6A6B               	clrf	3947,c	;volatile
 11365                           
 11366                           ;action.c: 293: LATD4 = 0;LATD5 = 0;
 11367  002228  988C               	bcf	3980,4,c	;volatile
 11368  00222A  9A8C               	bcf	3980,5,c	;volatile
 11369                           
 11370                           ;action.c: 294: LATD6 = 0;LATD7 = 0;
 11371  00222C  9C8C               	bcf	3980,6,c	;volatile
 11372  00222E  9E8C               	bcf	3980,7,c	;volatile
 11373  002230  0012               	return		;funcret
 11374  002232                     __end_of_Coupe_Moteur:
 11375                           	opt stack 0
 11376                           tblptru	equ	0xFF8
 11377                           tblptrh	equ	0xFF7
 11378                           tblptrl	equ	0xFF6
 11379                           tablat	equ	0xFF5
 11380                           prodh	equ	0xFF4
 11381                           prodl	equ	0xFF3
 11382                           intcon	equ	0xFF2
 11383                           intcon2	equ	0xFF1
 11384                           intcon3	equ	0xFF0
 11385                           postinc0	equ	0xFEE
 11386                           wreg	equ	0xFE8
 11387                           indf1	equ	0xFE7
 11388                           postdec1	equ	0xFE5
 11389                           fsr1h	equ	0xFE2
 11390                           fsr1l	equ	0xFE1
 11391                           indf2	equ	0xFDF
 11392                           postinc2	equ	0xFDE
 11393                           postdec2	equ	0xFDD
 11394                           fsr2h	equ	0xFDA
 11395                           fsr2l	equ	0xFD9
 11396                           status	equ	0xFD8
 11397                           
 11398 ;; *************** function _TIMER2_Off *****************
 11399 ;; Defined at:
 11400 ;;		line 165 in file "timer.c"
 11401 ;; Parameters:    Size  Location     Type
 11402 ;;		None
 11403 ;; Auto vars:     Size  Location     Type
 11404 ;;		None
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      void 
 11407 ;; Registers used:
 11408 ;;		None
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/2
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11414 ;;      Params:         0       0       0       0
 11415 ;;      Locals:         0       0       0       0
 11416 ;;      Temps:          0       0       0       0
 11417 ;;      Totals:         0       0       0       0
 11418 ;;Total ram usage:        0 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:   10
 11421 ;; This function calls:
 11422 ;;		Nothing
 11423 ;; This function is called by:
 11424 ;;		_Coupe_Moteur
 11425 ;; This function uses a non-reentrant model
 11426 ;;
 11427                           
 11428                           	psect	text68
 11429  0023F8                     __ptext68:
 11430                           	opt stack 0
 11431  0023F8                     _TIMER2_Off:
 11432                           	opt stack 12
 11433                           
 11434                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 11435                           
 11436                           ;incstack = 0
 11437  0023F8  929D               	bcf	3997,1,c	;volatile
 11438                           
 11439                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 11440  0023FA  929E               	bcf	3998,1,c	;volatile
 11441  0023FC  0012               	return		;funcret
 11442  0023FE                     __end_of_TIMER2_Off:
 11443                           	opt stack 0
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon2	equ	0xFF1
 11452                           intcon3	equ	0xFF0
 11453                           postinc0	equ	0xFEE
 11454                           wreg	equ	0xFE8
 11455                           indf1	equ	0xFE7
 11456                           postdec1	equ	0xFE5
 11457                           fsr1h	equ	0xFE2
 11458                           fsr1l	equ	0xFE1
 11459                           indf2	equ	0xFDF
 11460                           postinc2	equ	0xFDE
 11461                           postdec2	equ	0xFDD
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466 ;; *************** function _IRQ_CAPOT *****************
 11467 ;; Defined at:
 11468 ;;		line 902 in file "interrupt.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;		None
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;		None
 11473 ;; Return value:  Size  Location     Type
 11474 ;;                  1    wreg      void 
 11475 ;; Registers used:
 11476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11482 ;;      Params:         0       0       0       0
 11483 ;;      Locals:         0       0       0       0
 11484 ;;      Temps:          0       0       0       0
 11485 ;;      Totals:         0       0       0       0
 11486 ;;Total ram usage:        0 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; Hardware stack levels required when called:   11
 11489 ;; This function calls:
 11490 ;;		_Etat_Update
 11491 ;; This function is called by:
 11492 ;;		_IRQ_Execution
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           	psect	text69
 11497  0023A0                     __ptext69:
 11498                           	opt stack 0
 11499  0023A0                     _IRQ_CAPOT:
 11500                           	opt stack 14
 11501                           
 11502                           ;interrupt.c: 903: INT0IF = 0;
 11503                           
 11504                           ;incstack = 0
 11505  0023A0  92F2               	bcf	intcon,1,c	;volatile
 11506                           
 11507                           ;interrupt.c: 905: if(PORTAbits.RA2==1){
 11508  0023A2  A480               	btfss	3968,2,c	;volatile
 11509  0023A4  0012               	return	
 11510                           
 11511                           ;interrupt.c: 906: Etat_Update(2);
 11512  0023A6  0E02               	movlw	2
 11513  0023A8  EF8A  F010         	goto	_Etat_Update
 11514  0023AC                     __end_of_IRQ_CAPOT:
 11515                           	opt stack 0
 11516                           tblptru	equ	0xFF8
 11517                           tblptrh	equ	0xFF7
 11518                           tblptrl	equ	0xFF6
 11519                           tablat	equ	0xFF5
 11520                           prodh	equ	0xFF4
 11521                           prodl	equ	0xFF3
 11522                           intcon	equ	0xFF2
 11523                           intcon2	equ	0xFF1
 11524                           intcon3	equ	0xFF0
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           indf1	equ	0xFE7
 11528                           postdec1	equ	0xFE5
 11529                           fsr1h	equ	0xFE2
 11530                           fsr1l	equ	0xFE1
 11531                           indf2	equ	0xFDF
 11532                           postinc2	equ	0xFDE
 11533                           postdec2	equ	0xFDD
 11534                           fsr2h	equ	0xFDA
 11535                           fsr2l	equ	0xFD9
 11536                           status	equ	0xFD8
 11537                           
 11538 ;; *************** function _Etat_Update *****************
 11539 ;; Defined at:
 11540 ;;		line 67 in file "action.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  etat_new_val    1    wreg     unsigned char 
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  1    wreg      void 
 11547 ;; Registers used:
 11548 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11554 ;;      Params:         0       0       0       0
 11555 ;;      Locals:         1       0       0       0
 11556 ;;      Temps:          0       0       0       0
 11557 ;;      Totals:         1       0       0       0
 11558 ;;Total ram usage:        1 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:   10
 11561 ;; This function calls:
 11562 ;;		Nothing
 11563 ;; This function is called by:
 11564 ;;		_Cycle
 11565 ;;		_Capteur_Capot_On
 11566 ;;		_IRQ_PION_Metal_Apparait
 11567 ;;		_IRQ_TIMER_5
 11568 ;;		_IRQ_CAPOT
 11569 ;;		_Check_List_Moteur_Metalhome
 11570 ;;		_Check_List_Moteur_2
 11571 ;;		_Check_List_Moteur_Bequille
 11572 ;;		_Mouvement_X
 11573 ;;		_EUSART1_RX_T3_LOCAL
 11574 ;;		_Alarme_On
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text70
 11579  002114                     __ptext70:
 11580                           	opt stack 0
 11581  002114                     _Etat_Update:
 11582                           	opt stack 14
 11583                           
 11584                           ;incstack = 0
 11585                           ;Etat_Update@etat_new_value stored from wreg
 11586  002114  6E0F               	movwf	Etat_Update@etat_new_value,c
 11587                           
 11588                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 11589  002116  504D               	movf	_Etat_Precedent_Index,w,c
 11590  002118  0F6A               	addlw	low _Etat_Log
 11591  00211A  6ED9               	movwf	fsr2l,c
 11592  00211C  6ADA               	clrf	fsr2h,c
 11593  00211E  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 11594                           
 11595                           ;action.c: 69: Etat = etat_new_value;
 11596  002122  C00F  F0A8         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 11597                           
 11598                           ;action.c: 70: Etat_Precedent_Index++;
 11599  002126  2A4D               	incf	_Etat_Precedent_Index,f,c
 11600                           
 11601                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 11602  002128  0E0A               	movlw	10
 11603  00212A  184D               	xorwf	_Etat_Precedent_Index,w,c
 11604  00212C  B4D8               	btfsc	status,2,c
 11605                           
 11606                           ;action.c: 72: Etat_Precedent_Index = 0;
 11607  00212E  6A4D               	clrf	_Etat_Precedent_Index,c
 11608  002130  0012               	return		;funcret
 11609  002132                     __end_of_Etat_Update:
 11610                           	opt stack 0
 11611                           tblptru	equ	0xFF8
 11612                           tblptrh	equ	0xFF7
 11613                           tblptrl	equ	0xFF6
 11614                           tablat	equ	0xFF5
 11615                           prodh	equ	0xFF4
 11616                           prodl	equ	0xFF3
 11617                           intcon	equ	0xFF2
 11618                           intcon2	equ	0xFF1
 11619                           intcon3	equ	0xFF0
 11620                           postinc0	equ	0xFEE
 11621                           wreg	equ	0xFE8
 11622                           indf1	equ	0xFE7
 11623                           postdec1	equ	0xFE5
 11624                           fsr1h	equ	0xFE2
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           fsr2h	equ	0xFDA
 11630                           fsr2l	equ	0xFD9
 11631                           status	equ	0xFD8
 11632                           
 11633 ;; *************** function _IRQ_ADC *****************
 11634 ;; Defined at:
 11635 ;;		line 488 in file "interrupt.c"
 11636 ;; Parameters:    Size  Location     Type
 11637 ;;		None
 11638 ;; Auto vars:     Size  Location     Type
 11639 ;;		None
 11640 ;; Return value:  Size  Location     Type
 11641 ;;                  1    wreg      void 
 11642 ;; Registers used:
 11643 ;;		wreg, status,2, status,0
 11644 ;; Tracked objects:
 11645 ;;		On entry : 0/0
 11646 ;;		On exit  : 3F/0
 11647 ;;		Unchanged: 0/0
 11648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11649 ;;      Params:         0       0       0       0
 11650 ;;      Locals:         0       0       0       0
 11651 ;;      Temps:          3       0       0       0
 11652 ;;      Totals:         3       0       0       0
 11653 ;;Total ram usage:        3 bytes
 11654 ;; Hardware stack levels used:    1
 11655 ;; Hardware stack levels required when called:   10
 11656 ;; This function calls:
 11657 ;;		Nothing
 11658 ;; This function is called by:
 11659 ;;		_IRQ_Execution
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           	psect	text71
 11664  000DD6                     __ptext71:
 11665                           	opt stack 0
 11666  000DD6                     _IRQ_ADC:
 11667                           	opt stack 15
 11668                           
 11669                           ;interrupt.c: 489: switch (moteur_indice) {
 11670                           
 11671                           ;incstack = 0
 11672  000DD6  D0C7               	goto	l7204
 11673  000DD8                     l620:
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;interrupt.c: 491: Image_Courant_Moteur_1 = ADRESH;
 11677  000DD8  CFC4 F098          	movff	4036,_Image_Courant_Moteur_1	;volatile
 11678                           
 11679                           ;interrupt.c: 492: Nouvelle_Valeur_ADC = 1;
 11680  000DDC  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11681                           
 11682                           ;interrupt.c: 494: ADIF = 0;
 11683  000DDE  9C9E               	bcf	3998,6,c	;volatile
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;interrupt.c: 497: erreur = consigne - Image_Courant_Moteur_1;
 11687  000DE0  5198               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 11688  000DE2  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 11689  000DE4  6F84               	movwf	_erreur& (0+255),b	;volatile
 11690  000DE6  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11691  000DE8  A0D8               	btfss	status,0,c
 11692  000DEA  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11693                           
 11694                           ;interrupt.c: 498: if (erreur >= 10) duty++;
 11695  000DEC  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11696  000DEE  D008               	goto	l7154
 11697  000DF0  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11698  000DF2  E103               	bnz	u5150
 11699  000DF4  0E0A               	movlw	10
 11700  000DF6  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11701  000DF8  E303               	bnc	l7154
 11702  000DFA                     u5150:
 11703                           
 11704                           ; BSR set to: 0
 11705  000DFA  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11706  000DFC  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11707  000DFE  D006               	goto	l622
 11708  000E00                     l7154:
 11709                           
 11710                           ; BSR set to: 0
 11711                           ;interrupt.c: 500: else if (erreur < 0) duty += erreur;
 11712  000E00  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11713  000E02  D004               	goto	l622
 11714                           
 11715                           ; BSR set to: 0
 11716  000E04  5184               	movf	_erreur& (0+255),w,b	;volatile
 11717  000E06  2786               	addwf	_duty& (0+255),f,b	;volatile
 11718  000E08  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11719  000E0A  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 11720  000E0C                     l622:
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;interrupt.c: 505: if (duty > PTPERL) duty = PTPERL;
 11724  000E0C  507B               	movf	3963,w,c	;volatile
 11725  000E0E  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11726  000E10  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11727  000E12  5186               	movf	_duty& (0+255),w,b	;volatile
 11728  000E14  5C0F               	subwf	??_IRQ_ADC,w,c
 11729  000E16  5010               	movf	??_IRQ_ADC+1,w,c
 11730  000E18  0A80               	xorlw	128
 11731  000E1A  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11732  000E1C  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11733  000E1E  0A80               	xorlw	128
 11734  000E20  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11735  000E22  E203               	bc	l7160
 11736                           
 11737                           ; BSR set to: 0
 11738  000E24  CF7B F086          	movff	3963,_duty	;volatile
 11739  000E28  D003               	goto	L2
 11740  000E2A                     l7160:
 11741                           
 11742                           ; BSR set to: 0
 11743                           ;interrupt.c: 506: else if (duty < 0) duty = 0;
 11744  000E2A  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11745  000E2C  D002               	goto	l7164
 11746                           
 11747                           ; BSR set to: 0
 11748  000E2E  6B86               	clrf	_duty& (0+255),b	;volatile
 11749  000E30                     L2:
 11750  000E30  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11751  000E32                     l7164:
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;interrupt.c: 507: PDC0L = (char) (duty << 2);
 11755  000E32  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11756  000E34  46E8               	rlncf	wreg,f,c
 11757  000E36  0BFC               	andlw	252
 11758  000E38  6E79               	movwf	3961,c	;volatile
 11759                           
 11760                           ;interrupt.c: 508: PDC0H = (char) ((duty << 2) >> 8);
 11761  000E3A  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11762  000E3E  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11763  000E42  90D8               	bcf	status,0,c
 11764  000E44  360F               	rlcf	??_IRQ_ADC,f,c
 11765  000E46  3610               	rlcf	??_IRQ_ADC+1,f,c
 11766  000E48  90D8               	bcf	status,0,c
 11767  000E4A  360F               	rlcf	??_IRQ_ADC,f,c
 11768  000E4C  3610               	rlcf	??_IRQ_ADC+1,f,c
 11769  000E4E  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11770  000E52  6A10               	clrf	??_IRQ_ADC+1,c
 11771  000E54  BE0F               	btfsc	??_IRQ_ADC,7,c
 11772  000E56  6810               	setf	??_IRQ_ADC+1,c
 11773  000E58  500F               	movf	??_IRQ_ADC,w,c
 11774  000E5A  6E78               	movwf	3960,c	;volatile
 11775                           
 11776                           ;interrupt.c: 510: break;
 11777  000E5C  0012               	return	
 11778  000E5E                     l628:
 11779                           
 11780                           ; BSR set to: 0
 11781                           ;interrupt.c: 517: Image_Courant_Moteur_2 = ADRESH;
 11782  000E5E  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 11783                           
 11784                           ;interrupt.c: 518: Nouvelle_Valeur_ADC = 1;
 11785  000E62  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11786                           
 11787                           ;interrupt.c: 520: ADIF = 0;
 11788  000E64  9C9E               	bcf	3998,6,c	;volatile
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;interrupt.c: 523: erreur = consigne - Image_Courant_Moteur_2;
 11792  000E66  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 11793  000E68  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 11794  000E6A  6F84               	movwf	_erreur& (0+255),b	;volatile
 11795  000E6C  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11796  000E6E  A0D8               	btfss	status,0,c
 11797  000E70  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11798                           
 11799                           ;interrupt.c: 524: if (erreur >= 10) duty++;
 11800  000E72  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11801  000E74  D008               	goto	l7170
 11802  000E76  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11803  000E78  E103               	bnz	u5190
 11804  000E7A  0E0A               	movlw	10
 11805  000E7C  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11806  000E7E  E303               	bnc	l7170
 11807  000E80                     u5190:
 11808                           
 11809                           ; BSR set to: 0
 11810  000E80  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11811  000E82  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11812  000E84  D005               	goto	l7174
 11813  000E86                     l7170:
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;interrupt.c: 525: else if (erreur < 0) duty--;
 11817  000E86  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11818  000E88  D003               	goto	l7174
 11819                           
 11820                           ; BSR set to: 0
 11821  000E8A  0786               	decf	_duty& (0+255),f,b	;volatile
 11822  000E8C  A0D8               	btfss	status,0,c
 11823  000E8E  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 11824  000E90                     l7174:
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;interrupt.c: 529: if (duty > PTPERL) duty = PTPERL;
 11828  000E90  507B               	movf	3963,w,c	;volatile
 11829  000E92  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11830  000E94  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11831  000E96  5186               	movf	_duty& (0+255),w,b	;volatile
 11832  000E98  5C0F               	subwf	??_IRQ_ADC,w,c
 11833  000E9A  5010               	movf	??_IRQ_ADC+1,w,c
 11834  000E9C  0A80               	xorlw	128
 11835  000E9E  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11836  000EA0  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11837  000EA2  0A80               	xorlw	128
 11838  000EA4  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11839  000EA6  E203               	bc	l7178
 11840                           
 11841                           ; BSR set to: 0
 11842  000EA8  CF7B F086          	movff	3963,_duty	;volatile
 11843  000EAC  D003               	goto	L3
 11844  000EAE                     l7178:
 11845                           
 11846                           ; BSR set to: 0
 11847                           ;interrupt.c: 530: else if (duty < 0) duty = 0;
 11848  000EAE  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11849  000EB0  D002               	goto	l7182
 11850                           
 11851                           ; BSR set to: 0
 11852  000EB2  6B86               	clrf	_duty& (0+255),b	;volatile
 11853  000EB4                     L3:
 11854  000EB4  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11855  000EB6                     l7182:
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;interrupt.c: 531: PDC1L = (char) (duty << 2);
 11859  000EB6  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11860  000EB8  46E8               	rlncf	wreg,f,c
 11861  000EBA  0BFC               	andlw	252
 11862  000EBC  6E77               	movwf	3959,c	;volatile
 11863                           
 11864                           ;interrupt.c: 532: PDC1H = (char) ((duty << 2) >> 8);
 11865  000EBE  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11866  000EC2  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11867  000EC6  90D8               	bcf	status,0,c
 11868  000EC8  360F               	rlcf	??_IRQ_ADC,f,c
 11869  000ECA  3610               	rlcf	??_IRQ_ADC+1,f,c
 11870  000ECC  90D8               	bcf	status,0,c
 11871  000ECE  360F               	rlcf	??_IRQ_ADC,f,c
 11872  000ED0  3610               	rlcf	??_IRQ_ADC+1,f,c
 11873  000ED2  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11874  000ED6  6A10               	clrf	??_IRQ_ADC+1,c
 11875  000ED8  BE0F               	btfsc	??_IRQ_ADC,7,c
 11876  000EDA  6810               	setf	??_IRQ_ADC+1,c
 11877  000EDC  500F               	movf	??_IRQ_ADC,w,c
 11878  000EDE  6E76               	movwf	3958,c	;volatile
 11879                           
 11880                           ;interrupt.c: 534: break;
 11881  000EE0  0012               	return	
 11882  000EE2                     l635:
 11883                           
 11884                           ; BSR set to: 0
 11885                           ;interrupt.c: 538: Image_Courant_Moteur_2 = ADRESH;
 11886  000EE2  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 11887                           
 11888                           ;interrupt.c: 539: Nouvelle_Valeur_ADC = 1;
 11889  000EE6  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11890                           
 11891                           ;interrupt.c: 541: ADIF = 0;
 11892  000EE8  9C9E               	bcf	3998,6,c	;volatile
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;interrupt.c: 544: erreur = consigne - Image_Courant_Moteur_2;
 11896  000EEA  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 11897  000EEC  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 11898  000EEE  6F84               	movwf	_erreur& (0+255),b	;volatile
 11899  000EF0  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11900  000EF2  A0D8               	btfss	status,0,c
 11901  000EF4  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11902                           
 11903                           ;interrupt.c: 545: if (erreur >= 10) duty++;
 11904  000EF6  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11905  000EF8  D008               	goto	l7188
 11906  000EFA  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11907  000EFC  E103               	bnz	u5230
 11908  000EFE  0E0A               	movlw	10
 11909  000F00  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11910  000F02  E303               	bnc	l7188
 11911  000F04                     u5230:
 11912                           
 11913                           ; BSR set to: 0
 11914  000F04  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11915  000F06  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11916  000F08  D005               	goto	l7192
 11917  000F0A                     l7188:
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;interrupt.c: 546: else if (erreur < 0) duty--;
 11921  000F0A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11922  000F0C  D003               	goto	l7192
 11923                           
 11924                           ; BSR set to: 0
 11925  000F0E  0786               	decf	_duty& (0+255),f,b	;volatile
 11926  000F10  A0D8               	btfss	status,0,c
 11927  000F12  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 11928  000F14                     l7192:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;interrupt.c: 550: if (duty > PTPERL) duty = PTPERL;
 11932  000F14  507B               	movf	3963,w,c	;volatile
 11933  000F16  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11934  000F18  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11935  000F1A  5186               	movf	_duty& (0+255),w,b	;volatile
 11936  000F1C  5C0F               	subwf	??_IRQ_ADC,w,c
 11937  000F1E  5010               	movf	??_IRQ_ADC+1,w,c
 11938  000F20  0A80               	xorlw	128
 11939  000F22  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11940  000F24  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11941  000F26  0A80               	xorlw	128
 11942  000F28  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11943  000F2A  E203               	bc	l7196
 11944                           
 11945                           ; BSR set to: 0
 11946  000F2C  CF7B F086          	movff	3963,_duty	;volatile
 11947  000F30  D003               	goto	L4
 11948  000F32                     l7196:
 11949                           
 11950                           ; BSR set to: 0
 11951                           ;interrupt.c: 551: else if (duty < 0) duty = 0;
 11952  000F32  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11953  000F34  D002               	goto	l7200
 11954                           
 11955                           ; BSR set to: 0
 11956  000F36  6B86               	clrf	_duty& (0+255),b	;volatile
 11957  000F38                     L4:
 11958  000F38  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11959  000F3A                     l7200:
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;interrupt.c: 552: PDC1L = (char) (duty << 2);
 11963  000F3A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11964  000F3C  46E8               	rlncf	wreg,f,c
 11965  000F3E  0BFC               	andlw	252
 11966  000F40  6E77               	movwf	3959,c	;volatile
 11967                           
 11968                           ;interrupt.c: 553: PDC1H = (char) ((duty << 2) >> 8);
 11969  000F42  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11970  000F46  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11971  000F4A  90D8               	bcf	status,0,c
 11972  000F4C  360F               	rlcf	??_IRQ_ADC,f,c
 11973  000F4E  3610               	rlcf	??_IRQ_ADC+1,f,c
 11974  000F50  90D8               	bcf	status,0,c
 11975  000F52  360F               	rlcf	??_IRQ_ADC,f,c
 11976  000F54  3610               	rlcf	??_IRQ_ADC+1,f,c
 11977  000F56  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11978  000F5A  6A10               	clrf	??_IRQ_ADC+1,c
 11979  000F5C  BE0F               	btfsc	??_IRQ_ADC,7,c
 11980  000F5E  6810               	setf	??_IRQ_ADC+1,c
 11981  000F60  500F               	movf	??_IRQ_ADC,w,c
 11982  000F62  6E76               	movwf	3958,c	;volatile
 11983                           
 11984                           ;interrupt.c: 555: break;
 11985  000F64  0012               	return	
 11986  000F66                     l7204:
 11987  000F66  0100               	movlb	0	; () banked
 11988  000F68  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 11989                           
 11990                           ; Switch size 1, requested type "speed"
 11991                           ; Number of cases is 3, Range of values is 1 to 3
 11992                           ; switch strategies available:
 11993                           ; Name         Instructions Cycles
 11994                           ; simple_byte           10     6 (average)
 11995                           ;	Chosen strategy is simple_byte
 11996  000F6A  0A01               	xorlw	1	; case 1
 11997  000F6C  E101 D734          	bz	l620
 11998  000F70  0A03               	xorlw	3	; case 2
 11999  000F72  E101 D774          	bz	l628
 12000  000F76  0A01               	xorlw	1	; case 3
 12001  000F78  E0B4               	bz	l635
 12002                           
 12003                           ; BSR set to: 0
 12004  000F7A  0012               	return		;funcret
 12005  000F7C                     __end_of_IRQ_ADC:
 12006                           	opt stack 0
 12007                           tblptru	equ	0xFF8
 12008                           tblptrh	equ	0xFF7
 12009                           tblptrl	equ	0xFF6
 12010                           tablat	equ	0xFF5
 12011                           prodh	equ	0xFF4
 12012                           prodl	equ	0xFF3
 12013                           intcon	equ	0xFF2
 12014                           intcon2	equ	0xFF1
 12015                           intcon3	equ	0xFF0
 12016                           postinc0	equ	0xFEE
 12017                           wreg	equ	0xFE8
 12018                           indf1	equ	0xFE7
 12019                           postdec1	equ	0xFE5
 12020                           fsr1h	equ	0xFE2
 12021                           fsr1l	equ	0xFE1
 12022                           indf2	equ	0xFDF
 12023                           postinc2	equ	0xFDE
 12024                           postdec2	equ	0xFDD
 12025                           fsr2h	equ	0xFDA
 12026                           fsr2l	equ	0xFD9
 12027                           status	equ	0xFD8
 12028                           
 12029 ;; *************** function _Etat_Intitule *****************
 12030 ;; Defined at:
 12031 ;;		line 22 in file "action.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  Etat_Number     1    wreg     unsigned char 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 12036 ;; Return value:  Size  Location     Type
 12037 ;;                  1    wreg      unsigned char 
 12038 ;; Registers used:
 12039 ;;		wreg, status,2, status,0
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/1
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12045 ;;      Params:         0       0       0       0
 12046 ;;      Locals:         1       0       0       0
 12047 ;;      Temps:          0       0       0       0
 12048 ;;      Totals:         1       0       0       0
 12049 ;;Total ram usage:        1 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:   10
 12052 ;; This function calls:
 12053 ;;		Nothing
 12054 ;; This function is called by:
 12055 ;;		_EUSART1_RX_T3_LOCAL
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           	psect	text72
 12060  001E5C                     __ptext72:
 12061                           	opt stack 0
 12062  001E5C                     _Etat_Intitule:
 12063                           	opt stack 16
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;incstack = 0
 12067                           ;Etat_Intitule@Etat_Number stored from wreg
 12068  001E5C  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 12069                           
 12070                           ;action.c: 24: switch (Etat_Number) {
 12071  001E5E  500F               	movf	Etat_Intitule@Etat_Number,w,c
 12072                           
 12073                           ; Switch size 1, requested type "speed"
 12074                           ; Number of cases is 8, Range of values is 0 to 255
 12075                           ; switch strategies available:
 12076                           ; Name         Instructions Cycles
 12077                           ; simple_byte           25    13 (average)
 12078                           ;	Chosen strategy is simple_byte
 12079  001E60  B4D8               	btfsc	status,2,c
 12080  001E62  0C49               	retlw	73
 12081  001E64  0A01               	xorlw	1	; case 1
 12082  001E66  B4D8               	btfsc	status,2,c
 12083  001E68  0C21               	retlw	33
 12084  001E6A  0A03               	xorlw	3	; case 2
 12085  001E6C  B4D8               	btfsc	status,2,c
 12086  001E6E  0C41               	retlw	65
 12087  001E70  0A01               	xorlw	1	; case 3
 12088  001E72  B4D8               	btfsc	status,2,c
 12089  001E74  0C52               	retlw	82
 12090  001E76  0A07               	xorlw	7	; case 4
 12091  001E78  B4D8               	btfsc	status,2,c
 12092  001E7A  0C4C               	retlw	76
 12093  001E7C  0A01               	xorlw	1	; case 5
 12094  001E7E  B4D8               	btfsc	status,2,c
 12095  001E80  0C42               	retlw	66
 12096  001E82  0A03               	xorlw	3	; case 6
 12097  001E84  B4D8               	btfsc	status,2,c
 12098  001E86  0C50               	retlw	80
 12099  001E88  0AF9               	xorlw	249	; case 255
 12100  001E8A  B4D8               	btfsc	status,2,c
 12101  001E8C  0C48               	retlw	72
 12102  001E8E  0C20               	retlw	32
 12103  001E90                     __end_of_Etat_Intitule:
 12104                           	opt stack 0
 12105                           tblptru	equ	0xFF8
 12106                           tblptrh	equ	0xFF7
 12107                           tblptrl	equ	0xFF6
 12108                           tablat	equ	0xFF5
 12109                           prodh	equ	0xFF4
 12110                           prodl	equ	0xFF3
 12111                           intcon	equ	0xFF2
 12112                           intcon2	equ	0xFF1
 12113                           intcon3	equ	0xFF0
 12114                           postinc0	equ	0xFEE
 12115                           wreg	equ	0xFE8
 12116                           indf1	equ	0xFE7
 12117                           postdec1	equ	0xFE5
 12118                           fsr1h	equ	0xFE2
 12119                           fsr1l	equ	0xFE1
 12120                           indf2	equ	0xFDF
 12121                           postinc2	equ	0xFDE
 12122                           postdec2	equ	0xFDD
 12123                           fsr2h	equ	0xFDA
 12124                           fsr2l	equ	0xFD9
 12125                           status	equ	0xFD8
 12126                           
 12127 ;; *************** function _Etat_Get *****************
 12128 ;; Defined at:
 12129 ;;		line 42 in file "action.c"
 12130 ;; Parameters:    Size  Location     Type
 12131 ;;  Etat_Indice     1    wreg     unsigned char 
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  1    wreg      unsigned char 
 12136 ;; Registers used:
 12137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12143 ;;      Params:         0       0       0       0
 12144 ;;      Locals:         1       0       0       0
 12145 ;;      Temps:          2       0       0       0
 12146 ;;      Totals:         3       0       0       0
 12147 ;;Total ram usage:        3 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:   11
 12150 ;; This function calls:
 12151 ;;		___awmod
 12152 ;; This function is called by:
 12153 ;;		_Cycle
 12154 ;;		_EUSART1_RX_T3_LOCAL
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           	psect	text73
 12159  001E90                     __ptext73:
 12160                           	opt stack 0
 12161  001E90                     _Etat_Get:
 12162                           	opt stack 15
 12163                           
 12164                           ;incstack = 0
 12165                           ;Etat_Get@Etat_Indice stored from wreg
 12166  001E90  6E17               	movwf	Etat_Get@Etat_Indice,c
 12167                           
 12168                           ;action.c: 55: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 12169  001E92  5017               	movf	Etat_Get@Etat_Indice,w,c
 12170  001E94  C04D  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 12171  001E98  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 12172  001E9A  5E15               	subwf	??_Etat_Get,f,c
 12173  001E9C  0E00               	movlw	0
 12174  001E9E  5A16               	subwfb	??_Etat_Get+1,f,c
 12175  001EA0  0E09               	movlw	9
 12176  001EA2  2415               	addwf	??_Etat_Get,w,c
 12177  001EA4  6E0F               	movwf	___awmod@dividend,c
 12178  001EA6  0E00               	movlw	0
 12179  001EA8  2016               	addwfc	??_Etat_Get+1,w,c
 12180  001EAA  6E10               	movwf	___awmod@dividend+1,c
 12181  001EAC  6A12               	clrf	___awmod@divisor+1,c
 12182  001EAE  0E0A               	movlw	10
 12183  001EB0  6E11               	movwf	___awmod@divisor,c
 12184  001EB2  EC28  F00C         	call	___awmod	;wreg free
 12185  001EB6  500F               	movf	?___awmod,w,c
 12186  001EB8  0F6A               	addlw	low _Etat_Log
 12187  001EBA  6ED9               	movwf	fsr2l,c
 12188  001EBC  6ADA               	clrf	fsr2h,c
 12189  001EBE  50DF               	movf	indf2,w,c
 12190  001EC0  0012               	return		;funcret
 12191  001EC2                     __end_of_Etat_Get:
 12192                           	opt stack 0
 12193                           tblptru	equ	0xFF8
 12194                           tblptrh	equ	0xFF7
 12195                           tblptrl	equ	0xFF6
 12196                           tablat	equ	0xFF5
 12197                           prodh	equ	0xFF4
 12198                           prodl	equ	0xFF3
 12199                           intcon	equ	0xFF2
 12200                           intcon2	equ	0xFF1
 12201                           intcon3	equ	0xFF0
 12202                           postinc0	equ	0xFEE
 12203                           wreg	equ	0xFE8
 12204                           indf1	equ	0xFE7
 12205                           postdec1	equ	0xFE5
 12206                           fsr1h	equ	0xFE2
 12207                           fsr1l	equ	0xFE1
 12208                           indf2	equ	0xFDF
 12209                           postinc2	equ	0xFDE
 12210                           postdec2	equ	0xFDD
 12211                           fsr2h	equ	0xFDA
 12212                           fsr2l	equ	0xFD9
 12213                           status	equ	0xFD8
 12214                           
 12215 ;; *************** function ___awmod *****************
 12216 ;; Defined at:
 12217 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;  dividend        2   14[COMRAM] int 
 12220 ;;  divisor         2   16[COMRAM] int 
 12221 ;; Auto vars:     Size  Location     Type
 12222 ;;  sign            1   19[COMRAM] unsigned char 
 12223 ;;  counter         1   18[COMRAM] unsigned char 
 12224 ;; Return value:  Size  Location     Type
 12225 ;;                  2   14[COMRAM] int 
 12226 ;; Registers used:
 12227 ;;		wreg, status,2, status,0
 12228 ;; Tracked objects:
 12229 ;;		On entry : 0/1
 12230 ;;		On exit  : 0/0
 12231 ;;		Unchanged: 0/0
 12232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12233 ;;      Params:         4       0       0       0
 12234 ;;      Locals:         2       0       0       0
 12235 ;;      Temps:          0       0       0       0
 12236 ;;      Totals:         6       0       0       0
 12237 ;;Total ram usage:        6 bytes
 12238 ;; Hardware stack levels used:    1
 12239 ;; Hardware stack levels required when called:   10
 12240 ;; This function calls:
 12241 ;;		Nothing
 12242 ;; This function is called by:
 12243 ;;		_Etat_Get
 12244 ;;		_EUSART1_RX_T3_LOCAL
 12245 ;; This function uses a non-reentrant model
 12246 ;;
 12247                           
 12248                           	psect	text74
 12249  001850                     __ptext74:
 12250                           	opt stack 0
 12251  001850                     ___awmod:
 12252                           	opt stack 16
 12253                           
 12254                           ;incstack = 0
 12255  001850  6A14               	clrf	___awmod@sign,c
 12256  001852  AE10               	btfss	___awmod@dividend+1,7,c
 12257  001854  D006               	goto	l7236
 12258  001856  6C0F               	negf	___awmod@dividend,c
 12259  001858  1E10               	comf	___awmod@dividend+1,f,c
 12260  00185A  B0D8               	btfsc	status,0,c
 12261  00185C  2A10               	incf	___awmod@dividend+1,f,c
 12262  00185E  0E01               	movlw	1
 12263  001860  6E14               	movwf	___awmod@sign,c
 12264  001862                     l7236:
 12265  001862  AE12               	btfss	___awmod@divisor+1,7,c
 12266  001864  D004               	goto	l7240
 12267  001866  6C11               	negf	___awmod@divisor,c
 12268  001868  1E12               	comf	___awmod@divisor+1,f,c
 12269  00186A  B0D8               	btfsc	status,0,c
 12270  00186C  2A12               	incf	___awmod@divisor+1,f,c
 12271  00186E                     l7240:
 12272  00186E  5011               	movf	___awmod@divisor,w,c
 12273  001870  1012               	iorwf	___awmod@divisor+1,w,c
 12274  001872  E017               	bz	l7256
 12275  001874  0E01               	movlw	1
 12276  001876  6E13               	movwf	___awmod@counter,c
 12277  001878  D004               	goto	l7246
 12278  00187A                     l7244:
 12279  00187A  90D8               	bcf	status,0,c
 12280  00187C  3611               	rlcf	___awmod@divisor,f,c
 12281  00187E  3612               	rlcf	___awmod@divisor+1,f,c
 12282  001880  2A13               	incf	___awmod@counter,f,c
 12283  001882                     l7246:
 12284  001882  AE12               	btfss	___awmod@divisor+1,7,c
 12285  001884  D7FA               	goto	l7244
 12286  001886                     l7248:
 12287  001886  5011               	movf	___awmod@divisor,w,c
 12288  001888  5C0F               	subwf	___awmod@dividend,w,c
 12289  00188A  5012               	movf	___awmod@divisor+1,w,c
 12290  00188C  5810               	subwfb	___awmod@dividend+1,w,c
 12291  00188E  E304               	bnc	l7252
 12292  001890  5011               	movf	___awmod@divisor,w,c
 12293  001892  5E0F               	subwf	___awmod@dividend,f,c
 12294  001894  5012               	movf	___awmod@divisor+1,w,c
 12295  001896  5A10               	subwfb	___awmod@dividend+1,f,c
 12296  001898                     l7252:
 12297  001898  90D8               	bcf	status,0,c
 12298  00189A  3212               	rrcf	___awmod@divisor+1,f,c
 12299  00189C  3211               	rrcf	___awmod@divisor,f,c
 12300  00189E  2E13               	decfsz	___awmod@counter,f,c
 12301  0018A0  D7F2               	goto	l7248
 12302  0018A2                     l7256:
 12303  0018A2  5014               	movf	___awmod@sign,w,c
 12304  0018A4  E004               	bz	l7260
 12305  0018A6  6C0F               	negf	___awmod@dividend,c
 12306  0018A8  1E10               	comf	___awmod@dividend+1,f,c
 12307  0018AA  B0D8               	btfsc	status,0,c
 12308  0018AC  2A10               	incf	___awmod@dividend+1,f,c
 12309  0018AE                     l7260:
 12310  0018AE  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12311  0018B2  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12312  0018B6  0012               	return		;funcret
 12313  0018B8                     __end_of___awmod:
 12314                           	opt stack 0
 12315                           tblptru	equ	0xFF8
 12316                           tblptrh	equ	0xFF7
 12317                           tblptrl	equ	0xFF6
 12318                           tablat	equ	0xFF5
 12319                           prodh	equ	0xFF4
 12320                           prodl	equ	0xFF3
 12321                           intcon	equ	0xFF2
 12322                           intcon2	equ	0xFF1
 12323                           intcon3	equ	0xFF0
 12324                           postinc0	equ	0xFEE
 12325                           wreg	equ	0xFE8
 12326                           indf1	equ	0xFE7
 12327                           postdec1	equ	0xFE5
 12328                           fsr1h	equ	0xFE2
 12329                           fsr1l	equ	0xFE1
 12330                           indf2	equ	0xFDF
 12331                           postinc2	equ	0xFDE
 12332                           postdec2	equ	0xFDD
 12333                           fsr2h	equ	0xFDA
 12334                           fsr2l	equ	0xFD9
 12335                           status	equ	0xFD8
 12336                           
 12337 ;; *************** function _EUSART1_Buffer_Send *****************
 12338 ;; Defined at:
 12339 ;;		line 511 in file "eusart.c"
 12340 ;; Parameters:    Size  Location     Type
 12341 ;;  text            1   14[COMRAM] PTR unsigned char 
 12342 ;;		 -> UART_TX_TEXT(64), 
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;  i               2   15[COMRAM] unsigned int 
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  1    wreg      void 
 12347 ;; Registers used:
 12348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12354 ;;      Params:         1       0       0       0
 12355 ;;      Locals:         2       0       0       0
 12356 ;;      Temps:          0       0       0       0
 12357 ;;      Totals:         3       0       0       0
 12358 ;;Total ram usage:        3 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; Hardware stack levels required when called:   10
 12361 ;; This function calls:
 12362 ;;		Nothing
 12363 ;; This function is called by:
 12364 ;;		_EUSART1_RX_T3_LOCAL
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           	psect	text75
 12369  0014F4                     __ptext75:
 12370                           	opt stack 0
 12371  0014F4                     _EUSART1_Buffer_Send:
 12372                           	opt stack 16
 12373  0014F4                     l1330:
 12374  0014F4  A2AC               	btfss	4012,1,c	;volatile
 12375  0014F6  D7FE               	goto	l1330
 12376                           
 12377                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 12378  0014F8  6A10               	clrf	EUSART1_Buffer_Send@i,c
 12379  0014FA  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 12380  0014FC  D01A               	goto	l7380
 12381  0014FE                     l7376:
 12382                           
 12383                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 12384  0014FE  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12385  001500  0FAB               	addlw	low _UART_TX_TEXT
 12386  001502  6ED9               	movwf	fsr2l,c
 12387  001504  6ADA               	clrf	fsr2h,c
 12388  001506  0E80               	movlw	low _eusart1TxBuffer
 12389  001508  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12390  00150A  6EE1               	movwf	fsr1l,c
 12391  00150C  0E01               	movlw	high _eusart1TxBuffer
 12392  00150E  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12393  001510  6EE2               	movwf	fsr1h,c
 12394  001512  CFDF FFE7          	movff	indf2,indf1
 12395                           
 12396                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 12397  001516  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12398  001518  0FAB               	addlw	low _UART_TX_TEXT
 12399  00151A  6ED9               	movwf	fsr2l,c
 12400  00151C  6ADA               	clrf	fsr2h,c
 12401  00151E  0E40               	movlw	low _spiTxBuffer
 12402  001520  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12403  001522  6EE1               	movwf	fsr1l,c
 12404  001524  0E01               	movlw	high _spiTxBuffer
 12405  001526  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12406  001528  6EE2               	movwf	fsr1h,c
 12407  00152A  CFDF FFE7          	movff	indf2,indf1
 12408  00152E  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 12409  001530  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 12410  001532                     l7380:
 12411  001532  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 12412  001534  E109               	bnz	l7384
 12413  001536  0E40               	movlw	64
 12414  001538  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 12415  00153A  E206               	bc	l7384
 12416  00153C  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12417  00153E  0FAB               	addlw	low _UART_TX_TEXT
 12418  001540  6ED9               	movwf	fsr2l,c
 12419  001542  6ADA               	clrf	fsr2h,c
 12420  001544  50DF               	movf	indf2,w,c
 12421  001546  E1DB               	bnz	l7376
 12422  001548                     l7384:
 12423                           
 12424                           ;eusart.c: 526: }
 12425                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 12426  001548  0E80               	movlw	low _eusart1TxBuffer
 12427  00154A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12428  00154C  6ED9               	movwf	fsr2l,c
 12429  00154E  0E01               	movlw	high _eusart1TxBuffer
 12430  001550  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12431  001552  6EDA               	movwf	fsr2h,c
 12432  001554  0E0D               	movlw	13
 12433  001556  6EDF               	movwf	indf2,c
 12434                           
 12435                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 12436  001558  0E40               	movlw	low _spiTxBuffer
 12437  00155A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12438  00155C  6ED9               	movwf	fsr2l,c
 12439  00155E  0E01               	movlw	high _spiTxBuffer
 12440  001560  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12441  001562  6EDA               	movwf	fsr2h,c
 12442  001564  0E0D               	movlw	13
 12443  001566  6EDF               	movwf	indf2,c
 12444                           
 12445                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 12446  001568  0E81               	movlw	low (_eusart1TxBuffer+1)
 12447  00156A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12448  00156C  6ED9               	movwf	fsr2l,c
 12449  00156E  0E01               	movlw	high (_eusart1TxBuffer+1)
 12450  001570  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12451  001572  6EDA               	movwf	fsr2h,c
 12452  001574  6ADF               	clrf	indf2,c
 12453                           
 12454                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 12455  001576  0E41               	movlw	low (_spiTxBuffer+1)
 12456  001578  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12457  00157A  6ED9               	movwf	fsr2l,c
 12458  00157C  0E01               	movlw	high (_spiTxBuffer+1)
 12459  00157E  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12460  001580  6EDA               	movwf	fsr2h,c
 12461  001582  6ADF               	clrf	indf2,c
 12462                           
 12463                           ;eusart.c: 537: eusart1TxIndex = 0;
 12464  001584  6A46               	clrf	_eusart1TxIndex,c	;volatile
 12465                           
 12466                           ;eusart.c: 538: spiTxIndex = 0;
 12467  001586  6A44               	clrf	_spiTxIndex,c	;volatile
 12468                           
 12469                           ;eusart.c: 540: SPI_MODE = 1;
 12470  001588  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 12471                           
 12472                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 12473  00158A  0E40               	movlw	low _spiTxBuffer
 12474  00158C  2444               	addwf	_spiTxIndex,w,c	;volatile
 12475  00158E  6ED9               	movwf	fsr2l,c
 12476  001590  6ADA               	clrf	fsr2h,c
 12477  001592  0E01               	movlw	high _spiTxBuffer
 12478  001594  22DA               	addwfc	fsr2h,f,c
 12479  001596  50DF               	movf	indf2,w,c
 12480  001598  6EC9               	movwf	4041,c	;volatile
 12481                           
 12482                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 12483  00159A  0E80               	movlw	low _eusart1TxBuffer
 12484  00159C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 12485  00159E  6ED9               	movwf	fsr2l,c
 12486  0015A0  6ADA               	clrf	fsr2h,c
 12487  0015A2  0E01               	movlw	high _eusart1TxBuffer
 12488  0015A4  22DA               	addwfc	fsr2h,f,c
 12489  0015A6  50DF               	movf	indf2,w,c
 12490  0015A8  6EAD               	movwf	4013,c	;volatile
 12491                           
 12492                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 12493  0015AA  889D               	bsf	3997,4,c	;volatile
 12494  0015AC  0012               	return		;funcret
 12495  0015AE                     __end_of_EUSART1_Buffer_Send:
 12496                           	opt stack 0
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           intcon2	equ	0xFF1
 12505                           intcon3	equ	0xFF0
 12506                           postinc0	equ	0xFEE
 12507                           wreg	equ	0xFE8
 12508                           indf1	equ	0xFE7
 12509                           postdec1	equ	0xFE5
 12510                           fsr1h	equ	0xFE2
 12511                           fsr1l	equ	0xFE1
 12512                           indf2	equ	0xFDF
 12513                           postinc2	equ	0xFDE
 12514                           postdec2	equ	0xFDD
 12515                           fsr2h	equ	0xFDA
 12516                           fsr2l	equ	0xFD9
 12517                           status	equ	0xFD8
 12518                           
 12519 ;; *************** function _LOW_PRIORITY_IRQ *****************
 12520 ;; Defined at:
 12521 ;;		line 561 in file "interrupt.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;		None
 12524 ;; Auto vars:     Size  Location     Type
 12525 ;;		None
 12526 ;; Return value:  Size  Location     Type
 12527 ;;                  1    wreg      void 
 12528 ;; Registers used:
 12529 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12530 ;; Tracked objects:
 12531 ;;		On entry : 0/0
 12532 ;;		On exit  : 0/0
 12533 ;;		Unchanged: 0/0
 12534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12535 ;;      Params:         0       0       0       0
 12536 ;;      Locals:         0       0       0       0
 12537 ;;      Temps:          7       0       0       0
 12538 ;;      Totals:         7       0       0       0
 12539 ;;Total ram usage:        7 bytes
 12540 ;; Hardware stack levels used:    1
 12541 ;; Hardware stack levels required when called:    9
 12542 ;; This function calls:
 12543 ;;		_EUSART1_Receive_ISR
 12544 ;;		_EUSART1_Transmit_ISR
 12545 ;;		_SPI_ISR
 12546 ;;		i1_Etat_Update
 12547 ;;		i1_IRQ_ADC
 12548 ;;		i1_IRQ_PWM
 12549 ;;		i1_IRQ_TIMER_0
 12550 ;;		i1_IRQ_TIMER_5
 12551 ;; This function is called by:
 12552 ;;		Interrupt level 1
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           	psect	intcodelo
 12557  000018                     __pintcodelo:
 12558                           	opt stack 0
 12559  000018                     _LOW_PRIORITY_IRQ:
 12560                           	opt stack 11
 12561                           
 12562                           ;incstack = 0
 12563  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12564  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 12565  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 12566  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 12567  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 12568  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 12569  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 12570  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 12571                           
 12572                           ;interrupt.c: 564: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 12573  000036  B2A3               	btfsc	4003,1,c	;volatile
 12574  000038  A2A4               	btfss	4004,1,c	;volatile
 12575  00003A  D007               	goto	i1l648
 12576                           
 12577                           ;interrupt.c: 568: PIR3bits.IC1IF = 0;
 12578  00003C  92A4               	bcf	4004,1,c	;volatile
 12579                           
 12580                           ;interrupt.c: 570: if(PORTCbits.RC3==1){
 12581  00003E  A682               	btfss	3970,3,c	;volatile
 12582  000040  D03A               	goto	i1l668
 12583                           
 12584                           ;interrupt.c: 571: Etat_Update(3);
 12585  000042  0E03               	movlw	3
 12586  000044  EC99  F010         	call	i1_Etat_Update
 12587                           
 12588                           ;interrupt.c: 572: }
 12589                           ;interrupt.c: 591: } else
 12590  000048  D036               	goto	i1l668
 12591  00004A                     i1l648:
 12592                           
 12593                           ;interrupt.c: 593: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 12594  00004A  B4A3               	btfsc	4003,2,c	;volatile
 12595  00004C  A4A4               	btfss	4004,2,c	;volatile
 12596  00004E  D002               	goto	i1l651
 12597                           
 12598                           ;interrupt.c: 594: PIR3bits.IC2QEIF = 0;
 12599  000050  94A4               	bcf	4004,2,c	;volatile
 12600                           
 12601                           ;interrupt.c: 606: } else
 12602  000052  D031               	goto	i1l668
 12603  000054                     i1l651:
 12604                           
 12605                           ;interrupt.c: 607: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 12606  000054  B69D               	btfsc	3997,3,c	;volatile
 12607  000056  A69E               	btfss	3998,3,c	;volatile
 12608  000058  D003               	goto	i1l653
 12609                           
 12610                           ;interrupt.c: 608: SPI_ISR();
 12611  00005A  EC2C  F009         	call	_SPI_ISR	;wreg free
 12612                           
 12613                           ;interrupt.c: 610: } else
 12614  00005E  D02B               	goto	i1l668
 12615  000060                     i1l653:
 12616                           
 12617                           ;interrupt.c: 611: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 12618  000060  B89D               	btfsc	3997,4,c	;volatile
 12619  000062  A89E               	btfss	3998,4,c	;volatile
 12620  000064  D003               	goto	i1l655
 12621                           
 12622                           ;interrupt.c: 612: EUSART1_Transmit_ISR();
 12623  000066  ECFA  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
 12624                           
 12625                           ;interrupt.c: 614: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 12626  00006A  D025               	goto	i1l668
 12627  00006C                     i1l655:
 12628  00006C  BA9D               	btfsc	3997,5,c	;volatile
 12629  00006E  AA9E               	btfss	3998,5,c	;volatile
 12630  000070  D00B               	goto	i1l657
 12631                           
 12632                           ;interrupt.c: 615: if (RX1_ABR==0){
 12633  000072  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 12634  000074  D003               	goto	i1l658
 12635                           
 12636                           ;interrupt.c: 616: EUSART1_Receive_ISR();
 12637  000076  ECB3  F009         	call	_EUSART1_Receive_ISR	;wreg free
 12638                           
 12639                           ;interrupt.c: 617: }else{
 12640  00007A  D01D               	goto	i1l668
 12641  00007C                     i1l658:
 12642                           
 12643                           ;interrupt.c: 618: eusart1RxIndex = RCREG;
 12644  00007C  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 12645                           
 12646                           ;interrupt.c: 619: eusart1RxIndex = 0;
 12647  000080  6A45               	clrf	_eusart1RxIndex,c	;volatile
 12648                           
 12649                           ;interrupt.c: 620: PIR1bits.RC1IF = 0;
 12650  000082  9A9E               	bcf	3998,5,c	;volatile
 12651                           
 12652                           ;interrupt.c: 621: RX1_ABR = 0;}
 12653  000084  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 12654  000086  D017               	goto	i1l668
 12655  000088                     i1l657:
 12656                           
 12657                           ;interrupt.c: 627: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12658  000088  BAF2               	btfsc	intcon,5,c	;volatile
 12659  00008A  A4F2               	btfss	intcon,2,c	;volatile
 12660  00008C  D003               	goto	i1l661
 12661                           
 12662                           ;interrupt.c: 628: IRQ_TIMER_0();
 12663  00008E  EC86  F00D         	call	i1_IRQ_TIMER_0	;wreg free
 12664                           
 12665                           ;interrupt.c: 634: } else
 12666  000092  D011               	goto	i1l668
 12667  000094                     i1l661:
 12668                           
 12669                           ;interrupt.c: 637: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 12670  000094  B0A3               	btfsc	4003,0,c	;volatile
 12671  000096  A0A4               	btfss	4004,0,c	;volatile
 12672  000098  D003               	goto	i1l663
 12673                           
 12674                           ;interrupt.c: 638: IRQ_TIMER_5();
 12675  00009A  ECF4  F00C         	call	i1_IRQ_TIMER_5	;wreg free
 12676                           
 12677                           ;interrupt.c: 660: } else
 12678  00009E  D00B               	goto	i1l668
 12679  0000A0                     i1l663:
 12680                           
 12681                           ;interrupt.c: 662: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 12682  0000A0  B8A3               	btfsc	4003,4,c	;volatile
 12683  0000A2  A8A4               	btfss	4004,4,c	;volatile
 12684  0000A4  D003               	goto	i1l665
 12685                           
 12686                           ;interrupt.c: 663: IRQ_PWM();
 12687  0000A6  EC0E  F012         	call	i1_IRQ_PWM	;wreg free
 12688                           
 12689                           ;interrupt.c: 667: } else
 12690  0000AA  D005               	goto	i1l668
 12691  0000AC                     i1l665:
 12692                           
 12693                           ;interrupt.c: 672: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 12694  0000AC  BC9D               	btfsc	3997,6,c	;volatile
 12695  0000AE  AC9E               	btfss	3998,6,c	;volatile
 12696  0000B0  D002               	goto	i1l668
 12697                           
 12698                           ;interrupt.c: 679: IRQ_ADC();
 12699  0000B2  ECBE  F007         	call	i1_IRQ_ADC	;wreg free
 12700  0000B6                     i1l668:
 12701  0000B6  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 12702  0000BA  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 12703  0000BE  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 12704  0000C2  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 12705  0000C6  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 12706  0000CA  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 12707  0000CE  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 12708  0000D2  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12709  0000D4  0010               	retfie	
 12710  0000D6                     __end_of_LOW_PRIORITY_IRQ:
 12711                           	opt stack 0
 12712                           tblptru	equ	0xFF8
 12713                           tblptrh	equ	0xFF7
 12714                           tblptrl	equ	0xFF6
 12715                           tablat	equ	0xFF5
 12716                           prodh	equ	0xFF4
 12717                           prodl	equ	0xFF3
 12718                           intcon	equ	0xFF2
 12719                           intcon2	equ	0xFF1
 12720                           intcon3	equ	0xFF0
 12721                           postinc0	equ	0xFEE
 12722                           wreg	equ	0xFE8
 12723                           indf1	equ	0xFE7
 12724                           postdec1	equ	0xFE5
 12725                           fsr1h	equ	0xFE2
 12726                           fsr1l	equ	0xFE1
 12727                           bsr	equ	0xFE0
 12728                           indf2	equ	0xFDF
 12729                           postinc2	equ	0xFDE
 12730                           postdec2	equ	0xFDD
 12731                           fsr2h	equ	0xFDA
 12732                           fsr2l	equ	0xFD9
 12733                           status	equ	0xFD8
 12734                           
 12735 ;; *************** function i1_IRQ_TIMER_5 *****************
 12736 ;; Defined at:
 12737 ;;		line 415 in file "interrupt.c"
 12738 ;; Parameters:    Size  Location     Type
 12739 ;;		None
 12740 ;; Auto vars:     Size  Location     Type
 12741 ;;		None
 12742 ;; Return value:  Size  Location     Type
 12743 ;;                  1    wreg      void 
 12744 ;; Registers used:
 12745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12746 ;; Tracked objects:
 12747 ;;		On entry : 0/0
 12748 ;;		On exit  : 0/0
 12749 ;;		Unchanged: 0/0
 12750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12751 ;;      Params:         0       0       0       0
 12752 ;;      Locals:         0       0       0       0
 12753 ;;      Temps:          0       0       0       0
 12754 ;;      Totals:         0       0       0       0
 12755 ;;Total ram usage:        0 bytes
 12756 ;; Hardware stack levels used:    1
 12757 ;; Hardware stack levels required when called:    8
 12758 ;; This function calls:
 12759 ;;		i1_Alarme_On
 12760 ;;		i1_Buzzer_Etat
 12761 ;;		i1_Etat_Update
 12762 ;;		i1_TIMER5_Off
 12763 ;; This function is called by:
 12764 ;;		_LOW_PRIORITY_IRQ
 12765 ;; This function uses a non-reentrant model
 12766 ;;
 12767                           
 12768                           	psect	text77
 12769  0019E8                     __ptext77:
 12770                           	opt stack 0
 12771  0019E8                     i1_IRQ_TIMER_5:
 12772                           	opt stack 11
 12773                           
 12774                           ;interrupt.c: 416: PIR3bits.TMR5IF = 0;
 12775                           
 12776                           ;incstack = 0
 12777  0019E8  90A4               	bcf	4004,0,c	;volatile
 12778                           
 12779                           ;interrupt.c: 419: nb_100ms_Timer_5 += 1;
 12780  0019EA  0100               	movlb	0	; () banked
 12781  0019EC  2BA3               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;interrupt.c: 422: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 12785  0019EE  51A2               	movf	_nb_100ms_pion& (0+255),w,b
 12786  0019F0  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 12787  0019F2  E115               	bnz	i1l6636
 12788                           
 12789                           ; BSR set to: 0
 12790                           ;interrupt.c: 423: if (Mouvement_Startup != 1) {
 12791  0019F4  044E               	decf	_Mouvement_Startup,w,c
 12792  0019F6  E001               	bz	i1l6622
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;interrupt.c: 424: nb_Pion += 1;
 12796  0019F8  2B9F               	incf	_nb_Pion& (0+255),f,b	;volatile
 12797  0019FA                     i1l6622:
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;interrupt.c: 425: }
 12801                           ;interrupt.c: 428: nb_s_fonctionnement = 0;
 12802  0019FA  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;interrupt.c: 432: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 12806  0019FC  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 12807  0019FE  E003               	bz	i1l607
 12808                           
 12809                           ; BSR set to: 0
 12810  001A00  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 12811  001A02  5D9F               	subwf	_nb_Pion& (0+255),w,b	;volatile
 12812  001A04  E202               	bc	i1l6628
 12813  001A06                     i1l607:
 12814                           
 12815                           ; BSR set to: 0
 12816  001A06  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 12817  001A08  0012               	return	
 12818  001A0A                     i1l6628:
 12819                           
 12820                           ; BSR set to: 0
 12821                           ;interrupt.c: 435: Buzzer_Etat((unsigned char) 0);
 12822  001A0A  0E00               	movlw	0
 12823  001A0C  ECAB  F011         	call	i1_Buzzer_Etat
 12824                           
 12825                           ;interrupt.c: 436: P4_busy = 0;
 12826  001A10  0100               	movlb	0	; () banked
 12827  001A12  6BAA               	clrf	_P4_busy& (0+255),b
 12828                           
 12829                           ; BSR set to: 0
 12830                           ;interrupt.c: 437: TIMER5_Off();
 12831  001A14  ECE6  F011         	call	i1_TIMER5_Off	;wreg free
 12832                           
 12833                           ;interrupt.c: 438: Etat_Update(0);
 12834  001A18  0E00               	movlw	0
 12835  001A1A  EF99  F010         	goto	i1_Etat_Update
 12836  001A1E                     i1l6636:
 12837                           
 12838                           ; BSR set to: 0
 12839  001A1E  51A1               	movf	_nb_100ms_platine& (0+255),w,b
 12840  001A20  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 12841  001A22  A4D8               	btfss	status,2,c
 12842  001A24  0012               	return	
 12843                           
 12844                           ; BSR set to: 0
 12845                           ;interrupt.c: 465: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 12846  001A26  0596               	decf	_moteur_indice& (0+255),w,b	;volatile
 12847  001A28  E108               	bnz	i1l610
 12848                           
 12849                           ; BSR set to: 0
 12850  001A2A  B480               	btfsc	3968,2,c	;volatile
 12851  001A2C  D006               	goto	i1l610
 12852                           
 12853                           ; BSR set to: 0
 12854  001A2E  044E               	decf	_Mouvement_Startup,w,c
 12855  001A30  E104               	bnz	i1l610
 12856                           
 12857                           ; BSR set to: 0
 12858                           ;interrupt.c: 466: Alarme_On(6);
 12859  001A32  0E06               	movlw	6
 12860  001A34  EC7D  F011         	call	i1_Alarme_On
 12861                           
 12862                           ;interrupt.c: 468: } else {
 12863  001A38  D004               	goto	i1l6648
 12864  001A3A                     i1l610:
 12865                           
 12866                           ; BSR set to: 0
 12867                           ;interrupt.c: 469: P4_busy = 0;
 12868  001A3A  6BAA               	clrf	_P4_busy& (0+255),b
 12869                           
 12870                           ; BSR set to: 0
 12871                           ;interrupt.c: 470: Etat_Update(6);
 12872  001A3C  0E06               	movlw	6
 12873  001A3E  EC99  F010         	call	i1_Etat_Update
 12874  001A42                     i1l6648:
 12875                           
 12876                           ;interrupt.c: 473: }
 12877                           ;interrupt.c: 475: Buzzer_Etat((unsigned char) 0);
 12878  001A42  0E00               	movlw	0
 12879  001A44  ECAB  F011         	call	i1_Buzzer_Etat
 12880                           
 12881                           ;interrupt.c: 476: TIMER5_Off();
 12882  001A48  EFE6  F011         	goto	i1_TIMER5_Off	;wreg free
 12883  001A4C                     __end_ofi1_IRQ_TIMER_5:
 12884                           	opt stack 0
 12885                           tblptru	equ	0xFF8
 12886                           tblptrh	equ	0xFF7
 12887                           tblptrl	equ	0xFF6
 12888                           tablat	equ	0xFF5
 12889                           prodh	equ	0xFF4
 12890                           prodl	equ	0xFF3
 12891                           intcon	equ	0xFF2
 12892                           intcon2	equ	0xFF1
 12893                           intcon3	equ	0xFF0
 12894                           postinc0	equ	0xFEE
 12895                           wreg	equ	0xFE8
 12896                           indf1	equ	0xFE7
 12897                           postdec1	equ	0xFE5
 12898                           fsr1h	equ	0xFE2
 12899                           fsr1l	equ	0xFE1
 12900                           bsr	equ	0xFE0
 12901                           indf2	equ	0xFDF
 12902                           postinc2	equ	0xFDE
 12903                           postdec2	equ	0xFDD
 12904                           fsr2h	equ	0xFDA
 12905                           fsr2l	equ	0xFD9
 12906                           status	equ	0xFD8
 12907                           
 12908 ;; *************** function i1_TIMER5_Off *****************
 12909 ;; Defined at:
 12910 ;;		line 263 in file "timer.c"
 12911 ;; Parameters:    Size  Location     Type
 12912 ;;		None
 12913 ;; Auto vars:     Size  Location     Type
 12914 ;;		None
 12915 ;; Return value:  Size  Location     Type
 12916 ;;                  1    wreg      void 
 12917 ;; Registers used:
 12918 ;;		None
 12919 ;; Tracked objects:
 12920 ;;		On entry : 0/0
 12921 ;;		On exit  : 0/0
 12922 ;;		Unchanged: 0/0
 12923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12924 ;;      Params:         0       0       0       0
 12925 ;;      Locals:         0       0       0       0
 12926 ;;      Temps:          0       0       0       0
 12927 ;;      Totals:         0       0       0       0
 12928 ;;Total ram usage:        0 bytes
 12929 ;; Hardware stack levels used:    1
 12930 ;; Hardware stack levels required when called:    5
 12931 ;; This function calls:
 12932 ;;		Nothing
 12933 ;; This function is called by:
 12934 ;;		i1_IRQ_TIMER_5
 12935 ;; This function uses a non-reentrant model
 12936 ;;
 12937                           
 12938                           	psect	text78
 12939  0023CC                     __ptext78:
 12940                           	opt stack 0
 12941  0023CC                     i1_TIMER5_Off:
 12942                           	opt stack 13
 12943                           
 12944                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 12945                           
 12946                           ;incstack = 0
 12947  0023CC  90B7               	bcf	4023,0,c	;volatile
 12948                           
 12949                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 12950  0023CE  90A4               	bcf	4004,0,c	;volatile
 12951                           
 12952                           ;timer.c: 268: TMR5L = 0;
 12953  0023D0  6A87               	clrf	3975,c	;volatile
 12954                           
 12955                           ;timer.c: 269: TMR5H = 0;
 12956  0023D2  6A88               	clrf	3976,c	;volatile
 12957  0023D4  0012               	return		;funcret
 12958  0023D6                     __end_ofi1_TIMER5_Off:
 12959                           	opt stack 0
 12960                           tblptru	equ	0xFF8
 12961                           tblptrh	equ	0xFF7
 12962                           tblptrl	equ	0xFF6
 12963                           tablat	equ	0xFF5
 12964                           prodh	equ	0xFF4
 12965                           prodl	equ	0xFF3
 12966                           intcon	equ	0xFF2
 12967                           intcon2	equ	0xFF1
 12968                           intcon3	equ	0xFF0
 12969                           postinc0	equ	0xFEE
 12970                           wreg	equ	0xFE8
 12971                           indf1	equ	0xFE7
 12972                           postdec1	equ	0xFE5
 12973                           fsr1h	equ	0xFE2
 12974                           fsr1l	equ	0xFE1
 12975                           bsr	equ	0xFE0
 12976                           indf2	equ	0xFDF
 12977                           postinc2	equ	0xFDE
 12978                           postdec2	equ	0xFDD
 12979                           fsr2h	equ	0xFDA
 12980                           fsr2l	equ	0xFD9
 12981                           status	equ	0xFD8
 12982                           
 12983 ;; *************** function i1_Buzzer_Etat *****************
 12984 ;; Defined at:
 12985 ;;		line 29 in file "interrupt.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  Activation      1    wreg     unsigned char 
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;  Activation      1    4[COMRAM] unsigned char 
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  1    wreg      void 
 12992 ;; Registers used:
 12993 ;;		wreg, status,2, status,0
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12999 ;;      Params:         0       0       0       0
 13000 ;;      Locals:         1       0       0       0
 13001 ;;      Temps:          0       0       0       0
 13002 ;;      Totals:         1       0       0       0
 13003 ;;Total ram usage:        1 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    5
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		i1_IRQ_TIMER_5
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013                           	psect	text79
 13014  002356                     __ptext79:
 13015                           	opt stack 0
 13016  002356                     i1_Buzzer_Etat:
 13017                           	opt stack 13
 13018                           
 13019                           ;incstack = 0
 13020                           ;i1Buzzer_Etat@Activation stored from wreg
 13021  002356  6E05               	movwf	i1Buzzer_Etat@Activation,c
 13022                           
 13023                           ;interrupt.c: 30: if (Activation == 1) {
 13024  002358  0405               	decf	i1Buzzer_Etat@Activation,w,c
 13025  00235A  E102               	bnz	i1l532
 13026                           
 13027                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 13028  00235C  8C89               	bsf	3977,6,c	;volatile
 13029                           
 13030                           ;interrupt.c: 33: } else {
 13031  00235E  0012               	return	
 13032  002360                     i1l532:
 13033                           
 13034                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 13035  002360  9C89               	bcf	3977,6,c	;volatile
 13036  002362  0012               	return		;funcret
 13037  002364                     __end_ofi1_Buzzer_Etat:
 13038                           	opt stack 0
 13039                           tblptru	equ	0xFF8
 13040                           tblptrh	equ	0xFF7
 13041                           tblptrl	equ	0xFF6
 13042                           tablat	equ	0xFF5
 13043                           prodh	equ	0xFF4
 13044                           prodl	equ	0xFF3
 13045                           intcon	equ	0xFF2
 13046                           intcon2	equ	0xFF1
 13047                           intcon3	equ	0xFF0
 13048                           postinc0	equ	0xFEE
 13049                           wreg	equ	0xFE8
 13050                           indf1	equ	0xFE7
 13051                           postdec1	equ	0xFE5
 13052                           fsr1h	equ	0xFE2
 13053                           fsr1l	equ	0xFE1
 13054                           bsr	equ	0xFE0
 13055                           indf2	equ	0xFDF
 13056                           postinc2	equ	0xFDE
 13057                           postdec2	equ	0xFDD
 13058                           fsr2h	equ	0xFDA
 13059                           fsr2l	equ	0xFD9
 13060                           status	equ	0xFD8
 13061                           
 13062 ;; *************** function i1_Alarme_On *****************
 13063 ;; Defined at:
 13064 ;;		line 18 in file "alarme.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  alarme_new_v    1    wreg     unsigned char 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;                  1    wreg      void 
 13071 ;; Registers used:
 13072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13073 ;; Tracked objects:
 13074 ;;		On entry : 3F/0
 13075 ;;		On exit  : 0/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13078 ;;      Params:         0       0       0       0
 13079 ;;      Locals:         1       0       0       0
 13080 ;;      Temps:          0       0       0       0
 13081 ;;      Totals:         1       0       0       0
 13082 ;;Total ram usage:        1 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    7
 13085 ;; This function calls:
 13086 ;;		i1_Coupe_Moteur
 13087 ;;		i1_Etat_Update
 13088 ;; This function is called by:
 13089 ;;		i1_IRQ_TIMER_5
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           	psect	text80
 13094  0022FA                     __ptext80:
 13095                           	opt stack 0
 13096  0022FA                     i1_Alarme_On:
 13097                           	opt stack 11
 13098                           
 13099                           ;incstack = 0
 13100                           ;i1Alarme_On@alarme_new_value stored from wreg
 13101  0022FA  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 13102                           
 13103                           ;alarme.c: 22: Etat_Update(1);
 13104  0022FC  0E01               	movlw	1
 13105  0022FE  EC99  F010         	call	i1_Etat_Update
 13106                           
 13107                           ;alarme.c: 23: Alarme = alarme_new_value;
 13108  002302  C006  F0A7         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 13109                           
 13110                           ;alarme.c: 24: Coupe_Moteur();
 13111  002306  EF19  F011         	goto	i1_Coupe_Moteur	;wreg free
 13112  00230A                     __end_ofi1_Alarme_On:
 13113                           	opt stack 0
 13114                           tblptru	equ	0xFF8
 13115                           tblptrh	equ	0xFF7
 13116                           tblptrl	equ	0xFF6
 13117                           tablat	equ	0xFF5
 13118                           prodh	equ	0xFF4
 13119                           prodl	equ	0xFF3
 13120                           intcon	equ	0xFF2
 13121                           intcon2	equ	0xFF1
 13122                           intcon3	equ	0xFF0
 13123                           postinc0	equ	0xFEE
 13124                           wreg	equ	0xFE8
 13125                           indf1	equ	0xFE7
 13126                           postdec1	equ	0xFE5
 13127                           fsr1h	equ	0xFE2
 13128                           fsr1l	equ	0xFE1
 13129                           bsr	equ	0xFE0
 13130                           indf2	equ	0xFDF
 13131                           postinc2	equ	0xFDE
 13132                           postdec2	equ	0xFDD
 13133                           fsr2h	equ	0xFDA
 13134                           fsr2l	equ	0xFD9
 13135                           status	equ	0xFD8
 13136                           
 13137 ;; *************** function i1_Etat_Update *****************
 13138 ;; Defined at:
 13139 ;;		line 67 in file "action.c"
 13140 ;; Parameters:    Size  Location     Type
 13141 ;;  etat_new_val    1    wreg     unsigned char 
 13142 ;; Auto vars:     Size  Location     Type
 13143 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  1    wreg      void 
 13146 ;; Registers used:
 13147 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13153 ;;      Params:         0       0       0       0
 13154 ;;      Locals:         1       0       0       0
 13155 ;;      Temps:          0       0       0       0
 13156 ;;      Totals:         1       0       0       0
 13157 ;;Total ram usage:        1 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; Hardware stack levels required when called:    5
 13160 ;; This function calls:
 13161 ;;		Nothing
 13162 ;; This function is called by:
 13163 ;;		_LOW_PRIORITY_IRQ
 13164 ;;		i1_IRQ_TIMER_5
 13165 ;;		i1_Alarme_On
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           	psect	text81
 13170  002132                     __ptext81:
 13171                           	opt stack 0
 13172  002132                     i1_Etat_Update:
 13173                           	opt stack 13
 13174                           
 13175                           ;incstack = 0
 13176                           ;i1Etat_Update@etat_new_value stored from wreg
 13177  002132  6E05               	movwf	i1Etat_Update@etat_new_value,c
 13178                           
 13179                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 13180  002134  504D               	movf	_Etat_Precedent_Index,w,c
 13181  002136  0F6A               	addlw	low _Etat_Log
 13182  002138  6ED9               	movwf	fsr2l,c
 13183  00213A  6ADA               	clrf	fsr2h,c
 13184  00213C  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 13185                           
 13186                           ;action.c: 69: Etat = etat_new_value;
 13187  002140  C005  F0A8         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 13188                           
 13189                           ;action.c: 70: Etat_Precedent_Index++;
 13190  002144  2A4D               	incf	_Etat_Precedent_Index,f,c
 13191                           
 13192                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 13193  002146  0E0A               	movlw	10
 13194  002148  184D               	xorwf	_Etat_Precedent_Index,w,c
 13195  00214A  B4D8               	btfsc	status,2,c
 13196                           
 13197                           ;action.c: 72: Etat_Precedent_Index = 0;
 13198  00214C  6A4D               	clrf	_Etat_Precedent_Index,c
 13199  00214E  0012               	return		;funcret
 13200  002150                     __end_ofi1_Etat_Update:
 13201                           	opt stack 0
 13202                           tblptru	equ	0xFF8
 13203                           tblptrh	equ	0xFF7
 13204                           tblptrl	equ	0xFF6
 13205                           tablat	equ	0xFF5
 13206                           prodh	equ	0xFF4
 13207                           prodl	equ	0xFF3
 13208                           intcon	equ	0xFF2
 13209                           intcon2	equ	0xFF1
 13210                           intcon3	equ	0xFF0
 13211                           postinc0	equ	0xFEE
 13212                           wreg	equ	0xFE8
 13213                           indf1	equ	0xFE7
 13214                           postdec1	equ	0xFE5
 13215                           fsr1h	equ	0xFE2
 13216                           fsr1l	equ	0xFE1
 13217                           bsr	equ	0xFE0
 13218                           indf2	equ	0xFDF
 13219                           postinc2	equ	0xFDE
 13220                           postdec2	equ	0xFDD
 13221                           fsr2h	equ	0xFDA
 13222                           fsr2l	equ	0xFD9
 13223                           status	equ	0xFD8
 13224                           
 13225 ;; *************** function i1_Coupe_Moteur *****************
 13226 ;; Defined at:
 13227 ;;		line 277 in file "action.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;		None
 13230 ;; Auto vars:     Size  Location     Type
 13231 ;;		None
 13232 ;; Return value:  Size  Location     Type
 13233 ;;                  1    wreg      void 
 13234 ;; Registers used:
 13235 ;;		cstack
 13236 ;; Tracked objects:
 13237 ;;		On entry : 0/0
 13238 ;;		On exit  : 0/0
 13239 ;;		Unchanged: 0/0
 13240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13241 ;;      Params:         0       0       0       0
 13242 ;;      Locals:         0       0       0       0
 13243 ;;      Temps:          0       0       0       0
 13244 ;;      Totals:         0       0       0       0
 13245 ;;Total ram usage:        0 bytes
 13246 ;; Hardware stack levels used:    1
 13247 ;; Hardware stack levels required when called:    6
 13248 ;; This function calls:
 13249 ;;		i1_TIMER2_Off
 13250 ;; This function is called by:
 13251 ;;		i1_Alarme_On
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           	psect	text82
 13256  002232                     __ptext82:
 13257                           	opt stack 0
 13258  002232                     i1_Coupe_Moteur:
 13259                           	opt stack 11
 13260                           
 13261                           ;action.c: 278: TIMER2_Off();
 13262                           
 13263                           ;incstack = 0
 13264  002232  ECFF  F011         	call	i1_TIMER2_Off	;wreg free
 13265                           
 13266                           ;action.c: 283: LATEbits.LATE2 = 0;
 13267  002236  948D               	bcf	3981,2,c	;volatile
 13268                           
 13269                           ;action.c: 290: LATCbits.LATC0 = 0;
 13270  002238  908B               	bcf	3979,0,c	;volatile
 13271                           
 13272                           ;action.c: 291: LATCbits.LATC1 = 0;
 13273  00223A  928B               	bcf	3979,1,c	;volatile
 13274                           
 13275                           ;action.c: 292: OVDCOND = 0b00000000;
 13276  00223C  6A6B               	clrf	3947,c	;volatile
 13277                           
 13278                           ;action.c: 293: LATD4 = 0;LATD5 = 0;
 13279  00223E  988C               	bcf	3980,4,c	;volatile
 13280  002240  9A8C               	bcf	3980,5,c	;volatile
 13281                           
 13282                           ;action.c: 294: LATD6 = 0;LATD7 = 0;
 13283  002242  9C8C               	bcf	3980,6,c	;volatile
 13284  002244  9E8C               	bcf	3980,7,c	;volatile
 13285  002246  0012               	return		;funcret
 13286  002248                     __end_ofi1_Coupe_Moteur:
 13287                           	opt stack 0
 13288                           tblptru	equ	0xFF8
 13289                           tblptrh	equ	0xFF7
 13290                           tblptrl	equ	0xFF6
 13291                           tablat	equ	0xFF5
 13292                           prodh	equ	0xFF4
 13293                           prodl	equ	0xFF3
 13294                           intcon	equ	0xFF2
 13295                           intcon2	equ	0xFF1
 13296                           intcon3	equ	0xFF0
 13297                           postinc0	equ	0xFEE
 13298                           wreg	equ	0xFE8
 13299                           indf1	equ	0xFE7
 13300                           postdec1	equ	0xFE5
 13301                           fsr1h	equ	0xFE2
 13302                           fsr1l	equ	0xFE1
 13303                           bsr	equ	0xFE0
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           fsr2h	equ	0xFDA
 13308                           fsr2l	equ	0xFD9
 13309                           status	equ	0xFD8
 13310                           
 13311 ;; *************** function i1_TIMER2_Off *****************
 13312 ;; Defined at:
 13313 ;;		line 165 in file "timer.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;		None
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;		None
 13318 ;; Return value:  Size  Location     Type
 13319 ;;                  1    wreg      void 
 13320 ;; Registers used:
 13321 ;;		None
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13327 ;;      Params:         0       0       0       0
 13328 ;;      Locals:         0       0       0       0
 13329 ;;      Temps:          0       0       0       0
 13330 ;;      Totals:         0       0       0       0
 13331 ;;Total ram usage:        0 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; Hardware stack levels required when called:    5
 13334 ;; This function calls:
 13335 ;;		Nothing
 13336 ;; This function is called by:
 13337 ;;		i1_Coupe_Moteur
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           	psect	text83
 13342  0023FE                     __ptext83:
 13343                           	opt stack 0
 13344  0023FE                     i1_TIMER2_Off:
 13345                           	opt stack 11
 13346                           
 13347                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 13348                           
 13349                           ;incstack = 0
 13350  0023FE  929D               	bcf	3997,1,c	;volatile
 13351                           
 13352                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 13353  002400  929E               	bcf	3998,1,c	;volatile
 13354  002402  0012               	return		;funcret
 13355  002404                     __end_ofi1_TIMER2_Off:
 13356                           	opt stack 0
 13357                           tblptru	equ	0xFF8
 13358                           tblptrh	equ	0xFF7
 13359                           tblptrl	equ	0xFF6
 13360                           tablat	equ	0xFF5
 13361                           prodh	equ	0xFF4
 13362                           prodl	equ	0xFF3
 13363                           intcon	equ	0xFF2
 13364                           intcon2	equ	0xFF1
 13365                           intcon3	equ	0xFF0
 13366                           postinc0	equ	0xFEE
 13367                           wreg	equ	0xFE8
 13368                           indf1	equ	0xFE7
 13369                           postdec1	equ	0xFE5
 13370                           fsr1h	equ	0xFE2
 13371                           fsr1l	equ	0xFE1
 13372                           bsr	equ	0xFE0
 13373                           indf2	equ	0xFDF
 13374                           postinc2	equ	0xFDE
 13375                           postdec2	equ	0xFDD
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           
 13380 ;; *************** function i1_IRQ_TIMER_0 *****************
 13381 ;; Defined at:
 13382 ;;		line 367 in file "interrupt.c"
 13383 ;; Parameters:    Size  Location     Type
 13384 ;;		None
 13385 ;; Auto vars:     Size  Location     Type
 13386 ;;		None
 13387 ;; Return value:  Size  Location     Type
 13388 ;;                  1    wreg      void 
 13389 ;; Registers used:
 13390 ;;		wreg, status,2, status,0, cstack
 13391 ;; Tracked objects:
 13392 ;;		On entry : 0/0
 13393 ;;		On exit  : 3F/0
 13394 ;;		Unchanged: 0/0
 13395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13396 ;;      Params:         0       0       0       0
 13397 ;;      Locals:         0       0       0       0
 13398 ;;      Temps:          0       0       0       0
 13399 ;;      Totals:         0       0       0       0
 13400 ;;Total ram usage:        0 bytes
 13401 ;; Hardware stack levels used:    1
 13402 ;; Hardware stack levels required when called:    6
 13403 ;; This function calls:
 13404 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 13405 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 13406 ;; This function is called by:
 13407 ;;		_LOW_PRIORITY_IRQ
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text84
 13412  001B0C                     __ptext84:
 13413                           	opt stack 0
 13414  001B0C                     i1_IRQ_TIMER_0:
 13415                           	opt stack 13
 13416                           
 13417                           ;interrupt.c: 368: INTCONbits.TMR0IF = 0;
 13418                           
 13419                           ;incstack = 0
 13420  001B0C  94F2               	bcf	intcon,2,c	;volatile
 13421                           
 13422                           ;interrupt.c: 370: nb_s_fonctionnement += 1;
 13423  001B0E  0100               	movlb	0	; () banked
 13424  001B10  2BA5               	incf	_nb_s_fonctionnement& (0+255),f,b	;volatile
 13425                           
 13426                           ;interrupt.c: 371: Capteur_Capot_Compteur_Temps_S += 1;
 13427  001B12  2B9B               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 13428                           
 13429                           ;interrupt.c: 372: delay_s_counter += 1;
 13430  001B14  2B8A               	incf	_delay_s_counter& (0+255),f,b	;volatile
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;interrupt.c: 377: if (nb_s_fonctionnement == 2) {
 13434  001B16  0E02               	movlw	2
 13435  001B18  19A5               	xorwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
 13436  001B1A  E01F               	bz	i1l6610
 13437  001B1C  0012               	return	
 13438  001B1E                     i1l6590:
 13439                           
 13440                           ; BSR set to: 0
 13441                           ;interrupt.c: 385: Surveillance_Consommation_Moteur_1_Activer();
 13442  001B1E  EC8D  F011         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13443                           
 13444                           ;interrupt.c: 386: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13445  001B22  0100               	movlb	0	; () banked
 13446  001B24  5193               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13447  001B26  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13448  001B28  E203               	bc	i1l588
 13449  001B2A                     i1l6594:
 13450                           
 13451                           ; BSR set to: 0
 13452                           ;interrupt.c: 387: consigne = Consigne_Max;
 13453  001B2A  C094  F095         	movff	_Consigne_Max,_consigne	;volatile
 13454                           
 13455                           ;interrupt.c: 388: } else {
 13456  001B2E  0012               	return	
 13457  001B30                     i1l588:
 13458                           
 13459                           ; BSR set to: 0
 13460                           ;interrupt.c: 389: consigne = Consigne_Max_Moteur_X;
 13461  001B30  C093  F095         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13462  001B34  0012               	return	
 13463  001B36                     i1l6596:
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;interrupt.c: 393: Surveillance_Consommation_Moteur_2_Activer();
 13467  001B36  EC85  F011         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13468                           
 13469                           ;interrupt.c: 395: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 13470  001B3A  0100               	movlb	0	; () banked
 13471  001B3C  5192               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 13472  001B3E  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13473  001B40  E3F4               	bnc	i1l6594
 13474                           
 13475                           ; BSR set to: 0
 13476                           ;interrupt.c: 398: consigne = Consigne_Max_Moteur_Z;
 13477  001B42  C092  F095         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 13478  001B46  0012               	return	
 13479  001B48                     i1l6602:
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;interrupt.c: 402: Surveillance_Consommation_Moteur_2_Activer();
 13483  001B48  EC85  F011         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13484                           
 13485                           ;interrupt.c: 403: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 13486  001B4C  0100               	movlb	0	; () banked
 13487  001B4E  5191               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 13488  001B50  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13489  001B52  E3EB               	bnc	i1l6594
 13490                           
 13491                           ; BSR set to: 0
 13492                           ;interrupt.c: 406: consigne = Consigne_Max_Moteur_Bequille;
 13493  001B54  C091  F095         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 13494  001B58  0012               	return	
 13495  001B5A                     i1l6610:
 13496                           
 13497                           ; BSR set to: 0
 13498  001B5A  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 13499                           
 13500                           ; Switch size 1, requested type "speed"
 13501                           ; Number of cases is 3, Range of values is 1 to 3
 13502                           ; switch strategies available:
 13503                           ; Name         Instructions Cycles
 13504                           ; simple_byte           10     6 (average)
 13505                           ;	Chosen strategy is simple_byte
 13506  001B5C  0A01               	xorlw	1	; case 1
 13507  001B5E  E0DF               	bz	i1l6590
 13508  001B60  0A03               	xorlw	3	; case 2
 13509  001B62  E0E9               	bz	i1l6596
 13510  001B64  0A01               	xorlw	1	; case 3
 13511  001B66  E0F0               	bz	i1l6602
 13512                           
 13513                           ; BSR set to: 0
 13514  001B68  0012               	return		;funcret
 13515  001B6A                     __end_ofi1_IRQ_TIMER_0:
 13516                           	opt stack 0
 13517                           tblptru	equ	0xFF8
 13518                           tblptrh	equ	0xFF7
 13519                           tblptrl	equ	0xFF6
 13520                           tablat	equ	0xFF5
 13521                           prodh	equ	0xFF4
 13522                           prodl	equ	0xFF3
 13523                           intcon	equ	0xFF2
 13524                           intcon2	equ	0xFF1
 13525                           intcon3	equ	0xFF0
 13526                           postinc0	equ	0xFEE
 13527                           wreg	equ	0xFE8
 13528                           indf1	equ	0xFE7
 13529                           postdec1	equ	0xFE5
 13530                           fsr1h	equ	0xFE2
 13531                           fsr1l	equ	0xFE1
 13532                           bsr	equ	0xFE0
 13533                           indf2	equ	0xFDF
 13534                           postinc2	equ	0xFDE
 13535                           postdec2	equ	0xFDD
 13536                           fsr2h	equ	0xFDA
 13537                           fsr2l	equ	0xFD9
 13538                           status	equ	0xFD8
 13539                           
 13540 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 13541 ;; Defined at:
 13542 ;;		line 880 in file "interrupt.c"
 13543 ;; Parameters:    Size  Location     Type
 13544 ;;		None
 13545 ;; Auto vars:     Size  Location     Type
 13546 ;;		None
 13547 ;; Return value:  Size  Location     Type
 13548 ;;                  1    wreg      void 
 13549 ;; Registers used:
 13550 ;;		wreg, status,2, status,0
 13551 ;; Tracked objects:
 13552 ;;		On entry : 0/0
 13553 ;;		On exit  : 0/0
 13554 ;;		Unchanged: 0/0
 13555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13556 ;;      Params:         0       0       0       0
 13557 ;;      Locals:         0       0       0       0
 13558 ;;      Temps:          0       0       0       0
 13559 ;;      Totals:         0       0       0       0
 13560 ;;Total ram usage:        0 bytes
 13561 ;; Hardware stack levels used:    1
 13562 ;; Hardware stack levels required when called:    5
 13563 ;; This function calls:
 13564 ;;		Nothing
 13565 ;; This function is called by:
 13566 ;;		i1_IRQ_TIMER_0
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           	psect	text85
 13571  00230A                     __ptext85:
 13572                           	opt stack 0
 13573  00230A                     i1_Surveillance_Consommation_Moteur_2_Activer:
 13574                           	opt stack 13
 13575                           
 13576                           ;interrupt.c: 881: if (Surveillance_Consommation_Moteur_2 != 1) {
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;incstack = 0
 13580  00230A  0448               	decf	_Surveillance_Consommation_Moteur_2,w,c
 13581  00230C  B4D8               	btfsc	status,2,c
 13582  00230E  0012               	return	
 13583                           
 13584                           ;interrupt.c: 882: Surveillance_Consommation_Moteur_2 = 1;
 13585  002310  0E01               	movlw	1
 13586  002312  6E48               	movwf	_Surveillance_Consommation_Moteur_2,c
 13587                           
 13588                           ;interrupt.c: 883: INTCON3bits.INT2IF = 0;
 13589  002314  92F0               	bcf	intcon3,1,c	;volatile
 13590                           
 13591                           ;interrupt.c: 884: INTCON3bits.INT2IE = 1;
 13592  002316  88F0               	bsf	intcon3,4,c	;volatile
 13593  002318  0C01               	retlw	1	;funcret
 13594  00231A                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 13595                           	opt stack 0
 13596                           tblptru	equ	0xFF8
 13597                           tblptrh	equ	0xFF7
 13598                           tblptrl	equ	0xFF6
 13599                           tablat	equ	0xFF5
 13600                           prodh	equ	0xFF4
 13601                           prodl	equ	0xFF3
 13602                           intcon	equ	0xFF2
 13603                           intcon2	equ	0xFF1
 13604                           intcon3	equ	0xFF0
 13605                           postinc0	equ	0xFEE
 13606                           wreg	equ	0xFE8
 13607                           indf1	equ	0xFE7
 13608                           postdec1	equ	0xFE5
 13609                           fsr1h	equ	0xFE2
 13610                           fsr1l	equ	0xFE1
 13611                           bsr	equ	0xFE0
 13612                           indf2	equ	0xFDF
 13613                           postinc2	equ	0xFDE
 13614                           postdec2	equ	0xFDD
 13615                           fsr2h	equ	0xFDA
 13616                           fsr2l	equ	0xFD9
 13617                           status	equ	0xFD8
 13618                           
 13619 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 13620 ;; Defined at:
 13621 ;;		line 864 in file "interrupt.c"
 13622 ;; Parameters:    Size  Location     Type
 13623 ;;		None
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;		None
 13626 ;; Return value:  Size  Location     Type
 13627 ;;                  1    wreg      void 
 13628 ;; Registers used:
 13629 ;;		wreg, status,2, status,0
 13630 ;; Tracked objects:
 13631 ;;		On entry : 0/0
 13632 ;;		On exit  : 0/0
 13633 ;;		Unchanged: 0/0
 13634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13635 ;;      Params:         0       0       0       0
 13636 ;;      Locals:         0       0       0       0
 13637 ;;      Temps:          0       0       0       0
 13638 ;;      Totals:         0       0       0       0
 13639 ;;Total ram usage:        0 bytes
 13640 ;; Hardware stack levels used:    1
 13641 ;; Hardware stack levels required when called:    5
 13642 ;; This function calls:
 13643 ;;		Nothing
 13644 ;; This function is called by:
 13645 ;;		i1_IRQ_TIMER_0
 13646 ;; This function uses a non-reentrant model
 13647 ;;
 13648                           
 13649                           	psect	text86
 13650  00231A                     __ptext86:
 13651                           	opt stack 0
 13652  00231A                     i1_Surveillance_Consommation_Moteur_1_Activer:
 13653                           	opt stack 13
 13654                           
 13655                           ;interrupt.c: 865: if (Surveillance_Consommation_Moteur_1 != 1) {
 13656                           
 13657                           ;incstack = 0
 13658  00231A  0449               	decf	_Surveillance_Consommation_Moteur_1,w,c
 13659  00231C  B4D8               	btfsc	status,2,c
 13660  00231E  0012               	return	
 13661                           
 13662                           ;interrupt.c: 866: Surveillance_Consommation_Moteur_1 = 1;
 13663  002320  0E01               	movlw	1
 13664  002322  6E49               	movwf	_Surveillance_Consommation_Moteur_1,c
 13665                           
 13666                           ;interrupt.c: 867: INTCON3bits.INT1IF = 0;
 13667  002324  90F0               	bcf	intcon3,0,c	;volatile
 13668                           
 13669                           ;interrupt.c: 868: INTCON3bits.INT1IE = 1;
 13670  002326  86F0               	bsf	intcon3,3,c	;volatile
 13671  002328  0C01               	retlw	1	;funcret
 13672  00232A                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 13673                           	opt stack 0
 13674                           tblptru	equ	0xFF8
 13675                           tblptrh	equ	0xFF7
 13676                           tblptrl	equ	0xFF6
 13677                           tablat	equ	0xFF5
 13678                           prodh	equ	0xFF4
 13679                           prodl	equ	0xFF3
 13680                           intcon	equ	0xFF2
 13681                           intcon2	equ	0xFF1
 13682                           intcon3	equ	0xFF0
 13683                           postinc0	equ	0xFEE
 13684                           wreg	equ	0xFE8
 13685                           indf1	equ	0xFE7
 13686                           postdec1	equ	0xFE5
 13687                           fsr1h	equ	0xFE2
 13688                           fsr1l	equ	0xFE1
 13689                           bsr	equ	0xFE0
 13690                           indf2	equ	0xFDF
 13691                           postinc2	equ	0xFDE
 13692                           postdec2	equ	0xFDD
 13693                           fsr2h	equ	0xFDA
 13694                           fsr2l	equ	0xFD9
 13695                           status	equ	0xFD8
 13696                           
 13697 ;; *************** function i1_IRQ_PWM *****************
 13698 ;; Defined at:
 13699 ;;		line 483 in file "interrupt.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;		None
 13702 ;; Auto vars:     Size  Location     Type
 13703 ;;		None
 13704 ;; Return value:  Size  Location     Type
 13705 ;;                  1    wreg      void 
 13706 ;; Registers used:
 13707 ;;		None
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13713 ;;      Params:         0       0       0       0
 13714 ;;      Locals:         0       0       0       0
 13715 ;;      Temps:          0       0       0       0
 13716 ;;      Totals:         0       0       0       0
 13717 ;;Total ram usage:        0 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    5
 13720 ;; This function calls:
 13721 ;;		Nothing
 13722 ;; This function is called by:
 13723 ;;		_LOW_PRIORITY_IRQ
 13724 ;; This function uses a non-reentrant model
 13725 ;;
 13726                           
 13727                           	psect	text87
 13728  00241C                     __ptext87:
 13729                           	opt stack 0
 13730  00241C                     i1_IRQ_PWM:
 13731                           	opt stack 14
 13732                           
 13733                           ;interrupt.c: 485: PTIF = 0;
 13734                           
 13735                           ;incstack = 0
 13736  00241C  98A4               	bcf	4004,4,c	;volatile
 13737  00241E  0012               	return		;funcret
 13738  002420                     __end_ofi1_IRQ_PWM:
 13739                           	opt stack 0
 13740                           tblptru	equ	0xFF8
 13741                           tblptrh	equ	0xFF7
 13742                           tblptrl	equ	0xFF6
 13743                           tablat	equ	0xFF5
 13744                           prodh	equ	0xFF4
 13745                           prodl	equ	0xFF3
 13746                           intcon	equ	0xFF2
 13747                           intcon2	equ	0xFF1
 13748                           intcon3	equ	0xFF0
 13749                           postinc0	equ	0xFEE
 13750                           wreg	equ	0xFE8
 13751                           indf1	equ	0xFE7
 13752                           postdec1	equ	0xFE5
 13753                           fsr1h	equ	0xFE2
 13754                           fsr1l	equ	0xFE1
 13755                           bsr	equ	0xFE0
 13756                           indf2	equ	0xFDF
 13757                           postinc2	equ	0xFDE
 13758                           postdec2	equ	0xFDD
 13759                           fsr2h	equ	0xFDA
 13760                           fsr2l	equ	0xFD9
 13761                           status	equ	0xFD8
 13762                           
 13763 ;; *************** function i1_IRQ_ADC *****************
 13764 ;; Defined at:
 13765 ;;		line 488 in file "interrupt.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;		None
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;		None
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  1    wreg      void 
 13772 ;; Registers used:
 13773 ;;		wreg, status,2, status,0
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 3F/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13779 ;;      Params:         0       0       0       0
 13780 ;;      Locals:         0       0       0       0
 13781 ;;      Temps:          3       0       0       0
 13782 ;;      Totals:         3       0       0       0
 13783 ;;Total ram usage:        3 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; Hardware stack levels required when called:    5
 13786 ;; This function calls:
 13787 ;;		Nothing
 13788 ;; This function is called by:
 13789 ;;		_LOW_PRIORITY_IRQ
 13790 ;; This function uses a non-reentrant model
 13791 ;;
 13792                           
 13793                           	psect	text88
 13794  000F7C                     __ptext88:
 13795                           	opt stack 0
 13796  000F7C                     i1_IRQ_ADC:
 13797                           	opt stack 14
 13798                           
 13799                           ;interrupt.c: 489: switch (moteur_indice) {
 13800                           
 13801                           ;incstack = 0
 13802  000F7C  D0C7               	goto	i1l6708
 13803  000F7E                     i1l620:
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;interrupt.c: 491: Image_Courant_Moteur_1 = ADRESH;
 13807  000F7E  CFC4 F098          	movff	4036,_Image_Courant_Moteur_1	;volatile
 13808                           
 13809                           ;interrupt.c: 492: Nouvelle_Valeur_ADC = 1;
 13810  000F82  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13811                           
 13812                           ;interrupt.c: 494: ADIF = 0;
 13813  000F84  9C9E               	bcf	3998,6,c	;volatile
 13814                           
 13815                           ; BSR set to: 0
 13816                           ;interrupt.c: 497: erreur = consigne - Image_Courant_Moteur_1;
 13817  000F86  5198               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 13818  000F88  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 13819  000F8A  6F84               	movwf	_erreur& (0+255),b	;volatile
 13820  000F8C  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13821  000F8E  A0D8               	btfss	status,0,c
 13822  000F90  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13823                           
 13824                           ;interrupt.c: 498: if (erreur >= 10) duty++;
 13825  000F92  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13826  000F94  D008               	goto	i1l6658
 13827  000F96  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13828  000F98  E103               	bnz	i1u451_20
 13829  000F9A  0E0A               	movlw	10
 13830  000F9C  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13831  000F9E  E303               	bnc	i1l6658
 13832  000FA0                     i1u451_20:
 13833                           
 13834                           ; BSR set to: 0
 13835  000FA0  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13836  000FA2  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13837  000FA4  D006               	goto	i1l622
 13838  000FA6                     i1l6658:
 13839                           
 13840                           ; BSR set to: 0
 13841                           ;interrupt.c: 500: else if (erreur < 0) duty += erreur;
 13842  000FA6  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13843  000FA8  D004               	goto	i1l622
 13844                           
 13845                           ; BSR set to: 0
 13846  000FAA  5184               	movf	_erreur& (0+255),w,b	;volatile
 13847  000FAC  2786               	addwf	_duty& (0+255),f,b	;volatile
 13848  000FAE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13849  000FB0  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 13850  000FB2                     i1l622:
 13851                           
 13852                           ; BSR set to: 0
 13853                           ;interrupt.c: 505: if (duty > PTPERL) duty = PTPERL;
 13854  000FB2  507B               	movf	3963,w,c	;volatile
 13855  000FB4  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13856  000FB6  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13857  000FB8  5186               	movf	_duty& (0+255),w,b	;volatile
 13858  000FBA  5C05               	subwf	??i1_IRQ_ADC,w,c
 13859  000FBC  5006               	movf	??i1_IRQ_ADC+1,w,c
 13860  000FBE  0A80               	xorlw	128
 13861  000FC0  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13862  000FC2  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13863  000FC4  0A80               	xorlw	128
 13864  000FC6  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13865  000FC8  E203               	bc	i1l6664
 13866                           
 13867                           ; BSR set to: 0
 13868  000FCA  CF7B F086          	movff	3963,_duty	;volatile
 13869  000FCE  D003               	goto	L5
 13870  000FD0                     i1l6664:
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;interrupt.c: 506: else if (duty < 0) duty = 0;
 13874  000FD0  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13875  000FD2  D002               	goto	i1l6668
 13876                           
 13877                           ; BSR set to: 0
 13878  000FD4  6B86               	clrf	_duty& (0+255),b	;volatile
 13879  000FD6                     L5:
 13880  000FD6  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13881  000FD8                     i1l6668:
 13882                           
 13883                           ; BSR set to: 0
 13884                           ;interrupt.c: 507: PDC0L = (char) (duty << 2);
 13885  000FD8  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13886  000FDA  46E8               	rlncf	wreg,f,c
 13887  000FDC  0BFC               	andlw	252
 13888  000FDE  6E79               	movwf	3961,c	;volatile
 13889                           
 13890                           ;interrupt.c: 508: PDC0H = (char) ((duty << 2) >> 8);
 13891  000FE0  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 13892  000FE4  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 13893  000FE8  90D8               	bcf	status,0,c
 13894  000FEA  3605               	rlcf	??i1_IRQ_ADC,f,c
 13895  000FEC  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13896  000FEE  90D8               	bcf	status,0,c
 13897  000FF0  3605               	rlcf	??i1_IRQ_ADC,f,c
 13898  000FF2  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13899  000FF4  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 13900  000FF8  6A06               	clrf	??i1_IRQ_ADC+1,c
 13901  000FFA  BE05               	btfsc	??i1_IRQ_ADC,7,c
 13902  000FFC  6806               	setf	??i1_IRQ_ADC+1,c
 13903  000FFE  5005               	movf	??i1_IRQ_ADC,w,c
 13904  001000  6E78               	movwf	3960,c	;volatile
 13905                           
 13906                           ;interrupt.c: 510: break;
 13907  001002  0012               	return	
 13908  001004                     i1l628:
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;interrupt.c: 517: Image_Courant_Moteur_2 = ADRESH;
 13912  001004  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 13913                           
 13914                           ;interrupt.c: 518: Nouvelle_Valeur_ADC = 1;
 13915  001008  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13916                           
 13917                           ;interrupt.c: 520: ADIF = 0;
 13918  00100A  9C9E               	bcf	3998,6,c	;volatile
 13919                           
 13920                           ; BSR set to: 0
 13921                           ;interrupt.c: 523: erreur = consigne - Image_Courant_Moteur_2;
 13922  00100C  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 13923  00100E  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 13924  001010  6F84               	movwf	_erreur& (0+255),b	;volatile
 13925  001012  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13926  001014  A0D8               	btfss	status,0,c
 13927  001016  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13928                           
 13929                           ;interrupt.c: 524: if (erreur >= 10) duty++;
 13930  001018  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13931  00101A  D008               	goto	i1l6674
 13932  00101C  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13933  00101E  E103               	bnz	i1u455_20
 13934  001020  0E0A               	movlw	10
 13935  001022  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13936  001024  E303               	bnc	i1l6674
 13937  001026                     i1u455_20:
 13938                           
 13939                           ; BSR set to: 0
 13940  001026  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13941  001028  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13942  00102A  D005               	goto	i1l6678
 13943  00102C                     i1l6674:
 13944                           
 13945                           ; BSR set to: 0
 13946                           ;interrupt.c: 525: else if (erreur < 0) duty--;
 13947  00102C  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13948  00102E  D003               	goto	i1l6678
 13949                           
 13950                           ; BSR set to: 0
 13951  001030  0786               	decf	_duty& (0+255),f,b	;volatile
 13952  001032  A0D8               	btfss	status,0,c
 13953  001034  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 13954  001036                     i1l6678:
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;interrupt.c: 529: if (duty > PTPERL) duty = PTPERL;
 13958  001036  507B               	movf	3963,w,c	;volatile
 13959  001038  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13960  00103A  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13961  00103C  5186               	movf	_duty& (0+255),w,b	;volatile
 13962  00103E  5C05               	subwf	??i1_IRQ_ADC,w,c
 13963  001040  5006               	movf	??i1_IRQ_ADC+1,w,c
 13964  001042  0A80               	xorlw	128
 13965  001044  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13966  001046  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13967  001048  0A80               	xorlw	128
 13968  00104A  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13969  00104C  E203               	bc	i1l6682
 13970                           
 13971                           ; BSR set to: 0
 13972  00104E  CF7B F086          	movff	3963,_duty	;volatile
 13973  001052  D003               	goto	L6
 13974  001054                     i1l6682:
 13975                           
 13976                           ; BSR set to: 0
 13977                           ;interrupt.c: 530: else if (duty < 0) duty = 0;
 13978  001054  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13979  001056  D002               	goto	i1l6686
 13980                           
 13981                           ; BSR set to: 0
 13982  001058  6B86               	clrf	_duty& (0+255),b	;volatile
 13983  00105A                     L6:
 13984  00105A  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13985  00105C                     i1l6686:
 13986                           
 13987                           ; BSR set to: 0
 13988                           ;interrupt.c: 531: PDC1L = (char) (duty << 2);
 13989  00105C  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13990  00105E  46E8               	rlncf	wreg,f,c
 13991  001060  0BFC               	andlw	252
 13992  001062  6E77               	movwf	3959,c	;volatile
 13993                           
 13994                           ;interrupt.c: 532: PDC1H = (char) ((duty << 2) >> 8);
 13995  001064  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 13996  001068  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 13997  00106C  90D8               	bcf	status,0,c
 13998  00106E  3605               	rlcf	??i1_IRQ_ADC,f,c
 13999  001070  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14000  001072  90D8               	bcf	status,0,c
 14001  001074  3605               	rlcf	??i1_IRQ_ADC,f,c
 14002  001076  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14003  001078  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14004  00107C  6A06               	clrf	??i1_IRQ_ADC+1,c
 14005  00107E  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14006  001080  6806               	setf	??i1_IRQ_ADC+1,c
 14007  001082  5005               	movf	??i1_IRQ_ADC,w,c
 14008  001084  6E76               	movwf	3958,c	;volatile
 14009                           
 14010                           ;interrupt.c: 534: break;
 14011  001086  0012               	return	
 14012  001088                     i1l635:
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;interrupt.c: 538: Image_Courant_Moteur_2 = ADRESH;
 14016  001088  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14017                           
 14018                           ;interrupt.c: 539: Nouvelle_Valeur_ADC = 1;
 14019  00108C  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14020                           
 14021                           ;interrupt.c: 541: ADIF = 0;
 14022  00108E  9C9E               	bcf	3998,6,c	;volatile
 14023                           
 14024                           ; BSR set to: 0
 14025                           ;interrupt.c: 544: erreur = consigne - Image_Courant_Moteur_2;
 14026  001090  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14027  001092  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 14028  001094  6F84               	movwf	_erreur& (0+255),b	;volatile
 14029  001096  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14030  001098  A0D8               	btfss	status,0,c
 14031  00109A  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14032                           
 14033                           ;interrupt.c: 545: if (erreur >= 10) duty++;
 14034  00109C  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14035  00109E  D008               	goto	i1l6692
 14036  0010A0  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14037  0010A2  E103               	bnz	i1u459_20
 14038  0010A4  0E0A               	movlw	10
 14039  0010A6  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14040  0010A8  E303               	bnc	i1l6692
 14041  0010AA                     i1u459_20:
 14042                           
 14043                           ; BSR set to: 0
 14044  0010AA  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14045  0010AC  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14046  0010AE  D005               	goto	i1l6696
 14047  0010B0                     i1l6692:
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;interrupt.c: 546: else if (erreur < 0) duty--;
 14051  0010B0  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14052  0010B2  D003               	goto	i1l6696
 14053                           
 14054                           ; BSR set to: 0
 14055  0010B4  0786               	decf	_duty& (0+255),f,b	;volatile
 14056  0010B6  A0D8               	btfss	status,0,c
 14057  0010B8  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14058  0010BA                     i1l6696:
 14059                           
 14060                           ; BSR set to: 0
 14061                           ;interrupt.c: 550: if (duty > PTPERL) duty = PTPERL;
 14062  0010BA  507B               	movf	3963,w,c	;volatile
 14063  0010BC  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14064  0010BE  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14065  0010C0  5186               	movf	_duty& (0+255),w,b	;volatile
 14066  0010C2  5C05               	subwf	??i1_IRQ_ADC,w,c
 14067  0010C4  5006               	movf	??i1_IRQ_ADC+1,w,c
 14068  0010C6  0A80               	xorlw	128
 14069  0010C8  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14070  0010CA  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14071  0010CC  0A80               	xorlw	128
 14072  0010CE  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14073  0010D0  E203               	bc	i1l6700
 14074                           
 14075                           ; BSR set to: 0
 14076  0010D2  CF7B F086          	movff	3963,_duty	;volatile
 14077  0010D6  D003               	goto	L7
 14078  0010D8                     i1l6700:
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;interrupt.c: 551: else if (duty < 0) duty = 0;
 14082  0010D8  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14083  0010DA  D002               	goto	i1l6704
 14084                           
 14085                           ; BSR set to: 0
 14086  0010DC  6B86               	clrf	_duty& (0+255),b	;volatile
 14087  0010DE                     L7:
 14088  0010DE  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14089  0010E0                     i1l6704:
 14090                           
 14091                           ; BSR set to: 0
 14092                           ;interrupt.c: 552: PDC1L = (char) (duty << 2);
 14093  0010E0  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14094  0010E2  46E8               	rlncf	wreg,f,c
 14095  0010E4  0BFC               	andlw	252
 14096  0010E6  6E77               	movwf	3959,c	;volatile
 14097                           
 14098                           ;interrupt.c: 553: PDC1H = (char) ((duty << 2) >> 8);
 14099  0010E8  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14100  0010EC  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14101  0010F0  90D8               	bcf	status,0,c
 14102  0010F2  3605               	rlcf	??i1_IRQ_ADC,f,c
 14103  0010F4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14104  0010F6  90D8               	bcf	status,0,c
 14105  0010F8  3605               	rlcf	??i1_IRQ_ADC,f,c
 14106  0010FA  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14107  0010FC  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14108  001100  6A06               	clrf	??i1_IRQ_ADC+1,c
 14109  001102  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14110  001104  6806               	setf	??i1_IRQ_ADC+1,c
 14111  001106  5005               	movf	??i1_IRQ_ADC,w,c
 14112  001108  6E76               	movwf	3958,c	;volatile
 14113                           
 14114                           ;interrupt.c: 555: break;
 14115  00110A  0012               	return	
 14116  00110C                     i1l6708:
 14117  00110C  0100               	movlb	0	; () banked
 14118  00110E  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 14119                           
 14120                           ; Switch size 1, requested type "speed"
 14121                           ; Number of cases is 3, Range of values is 1 to 3
 14122                           ; switch strategies available:
 14123                           ; Name         Instructions Cycles
 14124                           ; simple_byte           10     6 (average)
 14125                           ;	Chosen strategy is simple_byte
 14126  001110  0A01               	xorlw	1	; case 1
 14127  001112  E101 D734          	bz	i1l620
 14128  001116  0A03               	xorlw	3	; case 2
 14129  001118  E101 D774          	bz	i1l628
 14130  00111C  0A01               	xorlw	1	; case 3
 14131  00111E  E0B4               	bz	i1l635
 14132                           
 14133                           ; BSR set to: 0
 14134  001120  0012               	return		;funcret
 14135  001122                     __end_ofi1_IRQ_ADC:
 14136                           	opt stack 0
 14137                           tblptru	equ	0xFF8
 14138                           tblptrh	equ	0xFF7
 14139                           tblptrl	equ	0xFF6
 14140                           tablat	equ	0xFF5
 14141                           prodh	equ	0xFF4
 14142                           prodl	equ	0xFF3
 14143                           intcon	equ	0xFF2
 14144                           intcon2	equ	0xFF1
 14145                           intcon3	equ	0xFF0
 14146                           postinc0	equ	0xFEE
 14147                           wreg	equ	0xFE8
 14148                           indf1	equ	0xFE7
 14149                           postdec1	equ	0xFE5
 14150                           fsr1h	equ	0xFE2
 14151                           fsr1l	equ	0xFE1
 14152                           bsr	equ	0xFE0
 14153                           indf2	equ	0xFDF
 14154                           postinc2	equ	0xFDE
 14155                           postdec2	equ	0xFDD
 14156                           fsr2h	equ	0xFDA
 14157                           fsr2l	equ	0xFD9
 14158                           status	equ	0xFD8
 14159                           
 14160 ;; *************** function _SPI_ISR *****************
 14161 ;; Defined at:
 14162 ;;		line 169 in file "spi.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;		None
 14165 ;; Auto vars:     Size  Location     Type
 14166 ;;  i               1    6[COMRAM] unsigned char 
 14167 ;; Return value:  Size  Location     Type
 14168 ;;                  1    wreg      void 
 14169 ;; Registers used:
 14170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14171 ;; Tracked objects:
 14172 ;;		On entry : 0/0
 14173 ;;		On exit  : 0/0
 14174 ;;		Unchanged: 0/0
 14175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14176 ;;      Params:         0       0       0       0
 14177 ;;      Locals:         1       0       0       0
 14178 ;;      Temps:          2       0       0       0
 14179 ;;      Totals:         3       0       0       0
 14180 ;;Total ram usage:        3 bytes
 14181 ;; Hardware stack levels used:    1
 14182 ;; Hardware stack levels required when called:    5
 14183 ;; This function calls:
 14184 ;;		Nothing
 14185 ;; This function is called by:
 14186 ;;		_LOW_PRIORITY_IRQ
 14187 ;; This function uses a non-reentrant model
 14188 ;;
 14189                           
 14190                           	psect	text89
 14191  001258                     __ptext89:
 14192                           	opt stack 0
 14193  001258                     _SPI_ISR:
 14194                           	opt stack 14
 14195                           
 14196                           ;spi.c: 171: unsigned char i;
 14197                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;incstack = 0
 14201  001258  969E               	bcf	3998,3,c	;volatile
 14202                           
 14203                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 14204  00125A  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 14205                           
 14206                           ;spi.c: 180: switch(SPI_MODE){
 14207  00125E  D075               	goto	i1l6528
 14208  001260                     i1l6492:
 14209                           
 14210                           ;spi.c: 196: if (i!=0x0D){
 14211  001260  0E0D               	movlw	13
 14212  001262  1807               	xorwf	SPI_ISR@i,w,c
 14213  001264  E012               	bz	i1l1661
 14214                           
 14215                           ;spi.c: 197: spiTxIndex++;
 14216  001266  2A44               	incf	_spiTxIndex,f,c	;volatile
 14217                           
 14218                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 14219  001268  0E40               	movlw	low _spiTxBuffer
 14220  00126A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14221  00126C  6ED9               	movwf	fsr2l,c
 14222  00126E  6ADA               	clrf	fsr2h,c
 14223  001270  0E01               	movlw	high _spiTxBuffer
 14224  001272  22DA               	addwfc	fsr2h,f,c
 14225  001274  50DF               	movf	indf2,w,c
 14226  001276  E009               	bz	i1l1661
 14227                           
 14228                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 14229  001278  0E40               	movlw	low _spiTxBuffer
 14230  00127A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14231  00127C  6ED9               	movwf	fsr2l,c
 14232  00127E  6ADA               	clrf	fsr2h,c
 14233  001280  0E01               	movlw	high _spiTxBuffer
 14234  001282  22DA               	addwfc	fsr2h,f,c
 14235  001284  50DF               	movf	indf2,w,c
 14236  001286  6EC9               	movwf	4041,c	;volatile
 14237                           
 14238                           ;spi.c: 201: } else {
 14239  001288  0012               	return	
 14240  00128A                     i1l1661:
 14241                           
 14242                           ;spi.c: 202: SPI_MODE = 0;
 14243  00128A  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14244  00128C  0012               	return	
 14245  00128E                     i1l6500:
 14246                           
 14247                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 14248  00128E  0E00               	movlw	low _spiRxBuffer
 14249  001290  2443               	addwf	_spiRxIndex,w,c	;volatile
 14250  001292  6ED9               	movwf	fsr2l,c
 14251  001294  6ADA               	clrf	fsr2h,c
 14252  001296  0E02               	movlw	high _spiRxBuffer
 14253  001298  22DA               	addwfc	fsr2h,f,c
 14254  00129A  C007  FFDF         	movff	SPI_ISR@i,indf2
 14255                           
 14256                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 14257  00129E  0E00               	movlw	low _spiRxBuffer
 14258  0012A0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14259  0012A2  6ED9               	movwf	fsr2l,c
 14260  0012A4  6ADA               	clrf	fsr2h,c
 14261  0012A6  0E02               	movlw	high _spiRxBuffer
 14262  0012A8  22DA               	addwfc	fsr2h,f,c
 14263  0012AA  50DF               	movf	indf2,w,c
 14264  0012AC  0E01               	movlw	1
 14265  0012AE  A4D8               	btfss	status,2,c
 14266  0012B0  0E00               	movlw	0
 14267  0012B2  6E05               	movwf	??_SPI_ISR& (0+255),c
 14268  0012B4  0E00               	movlw	low _spiRxBuffer
 14269  0012B6  2443               	addwf	_spiRxIndex,w,c	;volatile
 14270  0012B8  6ED9               	movwf	fsr2l,c
 14271  0012BA  6ADA               	clrf	fsr2h,c
 14272  0012BC  0E02               	movlw	high _spiRxBuffer
 14273  0012BE  22DA               	addwfc	fsr2h,f,c
 14274  0012C0  0E0D               	movlw	13
 14275  0012C2  18DE               	xorwf	postinc2,w,c
 14276  0012C4  0E01               	movlw	1
 14277  0012C6  A4D8               	btfss	status,2,c
 14278  0012C8  0E00               	movlw	0
 14279  0012CA  1005               	iorwf	??_SPI_ISR,w,c
 14280  0012CC  A0E8               	btfss	wreg,0,c
 14281  0012CE  D031               	goto	i1l6524
 14282                           
 14283                           ;spi.c: 223: if (spiRxIndex != 0) {
 14284  0012D0  5043               	movf	_spiRxIndex,w,c	;volatile
 14285  0012D2  E015               	bz	i1l6512
 14286                           
 14287                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 14288  0012D4  6A07               	clrf	SPI_ISR@i,c
 14289  0012D6  D00F               	goto	i1l6510
 14290  0012D8                     i1l6506:
 14291                           
 14292                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 14293  0012D8  0E00               	movlw	low _spiRxBuffer
 14294  0012DA  2407               	addwf	SPI_ISR@i,w,c
 14295  0012DC  6ED9               	movwf	fsr2l,c
 14296  0012DE  6ADA               	clrf	fsr2h,c
 14297  0012E0  0E02               	movlw	high _spiRxBuffer
 14298  0012E2  22DA               	addwfc	fsr2h,f,c
 14299  0012E4  0E00               	movlw	low _SPI_RX_TEXT
 14300  0012E6  2407               	addwf	SPI_ISR@i,w,c
 14301  0012E8  6EE1               	movwf	fsr1l,c
 14302  0012EA  6AE2               	clrf	fsr1h,c
 14303  0012EC  0E01               	movlw	high _SPI_RX_TEXT
 14304  0012EE  22E2               	addwfc	fsr1h,f,c
 14305  0012F0  CFDF FFE7          	movff	indf2,indf1
 14306  0012F4  2A07               	incf	SPI_ISR@i,f,c
 14307  0012F6                     i1l6510:
 14308  0012F6  5043               	movf	_spiRxIndex,w,c	;volatile
 14309  0012F8  5C07               	subwf	SPI_ISR@i,w,c
 14310  0012FA  E3EE               	bnc	i1l6506
 14311                           
 14312                           ;spi.c: 226: }
 14313                           ;spi.c: 227: SPI_full = 1;
 14314  0012FC  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14315  0012FE                     i1l6512:
 14316                           
 14317                           ;spi.c: 228: }
 14318                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 14319  0012FE  0E00               	movlw	low _SPI_RX_TEXT
 14320  001300  2443               	addwf	_spiRxIndex,w,c	;volatile
 14321  001302  6ED9               	movwf	fsr2l,c
 14322  001304  6ADA               	clrf	fsr2h,c
 14323  001306  0E01               	movlw	high _SPI_RX_TEXT
 14324  001308  22DA               	addwfc	fsr2h,f,c
 14325  00130A  0E00               	movlw	0
 14326  00130C  6ADF               	clrf	indf2,c
 14327                           
 14328                           ;spi.c: 230: spiRxIndex = 0;
 14329  00130E  6A43               	clrf	_spiRxIndex,c	;volatile
 14330                           
 14331                           ;spi.c: 231: } else {
 14332  001310  0012               	return	
 14333  001312                     i1l6516:
 14334                           
 14335                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 14336  001312  5043               	movf	_spiRxIndex,w,c	;volatile
 14337  001314  6E05               	movwf	??_SPI_ISR& (0+255),c
 14338  001316  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14339  001318  2A05               	incf	??_SPI_ISR,f,c
 14340  00131A  0E00               	movlw	0
 14341  00131C  2206               	addwfc	??_SPI_ISR+1,f,c
 14342  00131E  0E40               	movlw	64
 14343  001320  1805               	xorwf	??_SPI_ISR,w,c
 14344  001322  1006               	iorwf	??_SPI_ISR+1,w,c
 14345  001324  E104               	bnz	i1l6520
 14346                           
 14347                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 14348  001326  0101               	movlb	1	; () banked
 14349  001328  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 14350                           
 14351                           ;spi.c: 236: spiRxIndex = 0;
 14352  00132A  6A43               	clrf	_spiRxIndex,c	;volatile
 14353                           
 14354                           ;spi.c: 239: } else {
 14355  00132C  0012               	return	
 14356  00132E                     i1l6520:
 14357                           
 14358                           ;spi.c: 240: spiRxIndex++;
 14359  00132E  2A43               	incf	_spiRxIndex,f,c	;volatile
 14360  001330  0012               	return	
 14361  001332                     i1l6524:
 14362  001332  0E01               	movlw	1
 14363  001334  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14364  001336  0E00               	movlw	0
 14365  001338  6E05               	movwf	??_SPI_ISR& (0+255),c
 14366  00133A  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14367                           
 14368                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14369                           ; Switch size 1, requested type "speed"
 14370                           ; Number of cases is 1, Range of values is 0 to 0
 14371                           ; switch strategies available:
 14372                           ; Name         Instructions Cycles
 14373                           ; simple_byte            4     3 (average)
 14374                           ;	Chosen strategy is simple_byte
 14375  00133C  5006               	movf	??_SPI_ISR+1,w,c
 14376  00133E  A4D8               	btfss	status,2,c
 14377  001340  0012               	return	
 14378                           
 14379                           ; Switch size 1, requested type "speed"
 14380                           ; Number of cases is 2, Range of values is 0 to 1
 14381                           ; switch strategies available:
 14382                           ; Name         Instructions Cycles
 14383                           ; simple_byte            7     4 (average)
 14384                           ;	Chosen strategy is simple_byte
 14385  001342  5005               	movf	??_SPI_ISR,w,c
 14386  001344  E0E6               	bz	i1l6516
 14387  001346  0A01               	xorlw	1	; case 1
 14388  001348  0012               	return	
 14389  00134A                     i1l6528:
 14390  00134A  0E01               	movlw	1
 14391  00134C  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14392  00134E  0E00               	movlw	0
 14393  001350  6E05               	movwf	??_SPI_ISR& (0+255),c
 14394  001352  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14395                           
 14396                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14397                           ; Switch size 1, requested type "speed"
 14398                           ; Number of cases is 1, Range of values is 0 to 0
 14399                           ; switch strategies available:
 14400                           ; Name         Instructions Cycles
 14401                           ; simple_byte            4     3 (average)
 14402                           ;	Chosen strategy is simple_byte
 14403  001354  5006               	movf	??_SPI_ISR+1,w,c
 14404  001356  A4D8               	btfss	status,2,c
 14405  001358  0012               	return	
 14406                           
 14407                           ; Switch size 1, requested type "speed"
 14408                           ; Number of cases is 2, Range of values is 0 to 1
 14409                           ; switch strategies available:
 14410                           ; Name         Instructions Cycles
 14411                           ; simple_byte            7     4 (average)
 14412                           ;	Chosen strategy is simple_byte
 14413  00135A  5005               	movf	??_SPI_ISR,w,c
 14414  00135C  E098               	bz	i1l6500
 14415  00135E  0A01               	xorlw	1	; case 1
 14416  001360  E101 D77E          	bz	i1l6492
 14417  001364  0012               	return		;funcret
 14418  001366                     __end_of_SPI_ISR:
 14419                           	opt stack 0
 14420                           tblptru	equ	0xFF8
 14421                           tblptrh	equ	0xFF7
 14422                           tblptrl	equ	0xFF6
 14423                           tablat	equ	0xFF5
 14424                           prodh	equ	0xFF4
 14425                           prodl	equ	0xFF3
 14426                           intcon	equ	0xFF2
 14427                           intcon2	equ	0xFF1
 14428                           intcon3	equ	0xFF0
 14429                           postinc0	equ	0xFEE
 14430                           wreg	equ	0xFE8
 14431                           indf1	equ	0xFE7
 14432                           postdec1	equ	0xFE5
 14433                           fsr1h	equ	0xFE2
 14434                           fsr1l	equ	0xFE1
 14435                           bsr	equ	0xFE0
 14436                           indf2	equ	0xFDF
 14437                           postinc2	equ	0xFDE
 14438                           postdec2	equ	0xFDD
 14439                           fsr2h	equ	0xFDA
 14440                           fsr2l	equ	0xFD9
 14441                           status	equ	0xFD8
 14442                           
 14443 ;; *************** function _EUSART1_Transmit_ISR *****************
 14444 ;; Defined at:
 14445 ;;		line 552 in file "eusart.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;		None
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;		None
 14450 ;; Return value:  Size  Location     Type
 14451 ;;                  1    wreg      void 
 14452 ;; Registers used:
 14453 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14454 ;; Tracked objects:
 14455 ;;		On entry : 0/0
 14456 ;;		On exit  : 0/0
 14457 ;;		Unchanged: 0/0
 14458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14459 ;;      Params:         0       0       0       0
 14460 ;;      Locals:         0       0       0       0
 14461 ;;      Temps:          0       0       0       0
 14462 ;;      Totals:         0       0       0       0
 14463 ;;Total ram usage:        0 bytes
 14464 ;; Hardware stack levels used:    1
 14465 ;; Hardware stack levels required when called:    5
 14466 ;; This function calls:
 14467 ;;		Nothing
 14468 ;; This function is called by:
 14469 ;;		_LOW_PRIORITY_IRQ
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           	psect	text90
 14474  001FF4                     __ptext90:
 14475                           	opt stack 0
 14476  001FF4                     _EUSART1_Transmit_ISR:
 14477                           	opt stack 14
 14478                           
 14479                           ;eusart.c: 554: eusart1TxIndex++;
 14480                           
 14481                           ;incstack = 0
 14482  001FF4  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 14483                           
 14484                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 14485  001FF6  0E80               	movlw	low _eusart1TxBuffer
 14486  001FF8  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 14487  001FFA  6ED9               	movwf	fsr2l,c
 14488  001FFC  6ADA               	clrf	fsr2h,c
 14489  001FFE  0E01               	movlw	high _eusart1TxBuffer
 14490  002000  22DA               	addwfc	fsr2h,f,c
 14491  002002  50DF               	movf	indf2,w,c
 14492  002004  E009               	bz	i1l1341
 14493                           
 14494                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 14495  002006  0E80               	movlw	low _eusart1TxBuffer
 14496  002008  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 14497  00200A  6ED9               	movwf	fsr2l,c
 14498  00200C  6ADA               	clrf	fsr2h,c
 14499  00200E  0E01               	movlw	high _eusart1TxBuffer
 14500  002010  22DA               	addwfc	fsr2h,f,c
 14501  002012  50DF               	movf	indf2,w,c
 14502  002014  6EAD               	movwf	4013,c	;volatile
 14503                           
 14504                           ;eusart.c: 574: } else {
 14505  002016  0012               	return	
 14506  002018                     i1l1341:
 14507                           
 14508                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 14509  002018  989D               	bcf	3997,4,c	;volatile
 14510  00201A  0012               	return		;funcret
 14511  00201C                     __end_of_EUSART1_Transmit_ISR:
 14512                           	opt stack 0
 14513                           tblptru	equ	0xFF8
 14514                           tblptrh	equ	0xFF7
 14515                           tblptrl	equ	0xFF6
 14516                           tablat	equ	0xFF5
 14517                           prodh	equ	0xFF4
 14518                           prodl	equ	0xFF3
 14519                           intcon	equ	0xFF2
 14520                           intcon2	equ	0xFF1
 14521                           intcon3	equ	0xFF0
 14522                           postinc0	equ	0xFEE
 14523                           wreg	equ	0xFE8
 14524                           indf1	equ	0xFE7
 14525                           postdec1	equ	0xFE5
 14526                           fsr1h	equ	0xFE2
 14527                           fsr1l	equ	0xFE1
 14528                           bsr	equ	0xFE0
 14529                           indf2	equ	0xFDF
 14530                           postinc2	equ	0xFDE
 14531                           postdec2	equ	0xFDD
 14532                           fsr2h	equ	0xFDA
 14533                           fsr2l	equ	0xFD9
 14534                           status	equ	0xFD8
 14535                           
 14536 ;; *************** function _EUSART1_Receive_ISR *****************
 14537 ;; Defined at:
 14538 ;;		line 597 in file "eusart.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;		None
 14541 ;; Auto vars:     Size  Location     Type
 14542 ;;  i               1    6[COMRAM] unsigned char 
 14543 ;; Return value:  Size  Location     Type
 14544 ;;                  1    wreg      void 
 14545 ;; Registers used:
 14546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14547 ;; Tracked objects:
 14548 ;;		On entry : 0/0
 14549 ;;		On exit  : 0/0
 14550 ;;		Unchanged: 0/0
 14551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14552 ;;      Params:         0       0       0       0
 14553 ;;      Locals:         1       0       0       0
 14554 ;;      Temps:          2       0       0       0
 14555 ;;      Totals:         3       0       0       0
 14556 ;;Total ram usage:        3 bytes
 14557 ;; Hardware stack levels used:    1
 14558 ;; Hardware stack levels required when called:    6
 14559 ;; This function calls:
 14560 ;;		_EUSART1_Erreur_Get
 14561 ;; This function is called by:
 14562 ;;		_LOW_PRIORITY_IRQ
 14563 ;; This function uses a non-reentrant model
 14564 ;;
 14565                           
 14566                           	psect	text91
 14567  001366                     __ptext91:
 14568                           	opt stack 0
 14569  001366                     _EUSART1_Receive_ISR:
 14570                           	opt stack 13
 14571                           
 14572                           ;eusart.c: 600: unsigned char i;
 14573                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 14574                           
 14575                           ;incstack = 0
 14576  001366  9A9E               	bcf	3998,5,c	;volatile
 14577                           
 14578                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 14579  001368  A2AB               	btfss	4011,1,c	;volatile
 14580  00136A  D004               	goto	i1l6548
 14581                           
 14582                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 14583  00136C  9EAB               	bcf	4011,7,c	;volatile
 14584                           
 14585                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 14586  00136E  8EAB               	bsf	4011,7,c	;volatile
 14587                           
 14588                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 14589  001370  98AB               	bcf	4011,4,c	;volatile
 14590                           
 14591                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 14592  001372  88AB               	bsf	4011,4,c	;volatile
 14593  001374                     i1l6548:
 14594                           
 14595                           ;eusart.c: 610: }
 14596                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 14597  001374  0E40               	movlw	low _eusart1RxBuffer
 14598  001376  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14599  001378  6ED9               	movwf	fsr2l,c
 14600  00137A  6ADA               	clrf	fsr2h,c
 14601  00137C  0E02               	movlw	high _eusart1RxBuffer
 14602  00137E  22DA               	addwfc	fsr2h,f,c
 14603  001380  CFAE FFDF          	movff	4014,indf2	;volatile
 14604                           
 14605                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 14606  001384  0E40               	movlw	low _eusart1RxBuffer
 14607  001386  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14608  001388  6ED9               	movwf	fsr2l,c
 14609  00138A  6ADA               	clrf	fsr2h,c
 14610  00138C  0E02               	movlw	high _eusart1RxBuffer
 14611  00138E  22DA               	addwfc	fsr2h,f,c
 14612  001390  50DF               	movf	indf2,w,c
 14613  001392  0E01               	movlw	1
 14614  001394  A4D8               	btfss	status,2,c
 14615  001396  0E00               	movlw	0
 14616  001398  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14617  00139A  0E40               	movlw	low _eusart1RxBuffer
 14618  00139C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14619  00139E  6ED9               	movwf	fsr2l,c
 14620  0013A0  6ADA               	clrf	fsr2h,c
 14621  0013A2  0E02               	movlw	high _eusart1RxBuffer
 14622  0013A4  22DA               	addwfc	fsr2h,f,c
 14623  0013A6  0E0D               	movlw	13
 14624  0013A8  18DE               	xorwf	postinc2,w,c
 14625  0013AA  0E01               	movlw	1
 14626  0013AC  A4D8               	btfss	status,2,c
 14627  0013AE  0E00               	movlw	0
 14628  0013B0  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 14629  0013B2  A0E8               	btfss	wreg,0,c
 14630  0013B4  D032               	goto	i1l6576
 14631                           
 14632                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 14633  0013B6  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14634  0013B8  E015               	bz	i1l6560
 14635                           
 14636                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 14637  0013BA  6A07               	clrf	EUSART1_Receive_ISR@i,c
 14638  0013BC  D00F               	goto	i1l6558
 14639  0013BE                     i1l6554:
 14640                           
 14641                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 14642  0013BE  0E40               	movlw	low _eusart1RxBuffer
 14643  0013C0  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 14644  0013C2  6ED9               	movwf	fsr2l,c
 14645  0013C4  6ADA               	clrf	fsr2h,c
 14646  0013C6  0E02               	movlw	high _eusart1RxBuffer
 14647  0013C8  22DA               	addwfc	fsr2h,f,c
 14648  0013CA  0EC0               	movlw	low _UART_RX_TEXT
 14649  0013CC  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 14650  0013CE  6EE1               	movwf	fsr1l,c
 14651  0013D0  6AE2               	clrf	fsr1h,c
 14652  0013D2  0E01               	movlw	high _UART_RX_TEXT
 14653  0013D4  22E2               	addwfc	fsr1h,f,c
 14654  0013D6  CFDF FFE7          	movff	indf2,indf1
 14655  0013DA  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 14656  0013DC                     i1l6558:
 14657  0013DC  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14658  0013DE  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 14659  0013E0  E3EE               	bnc	i1l6554
 14660                           
 14661                           ;eusart.c: 623: }
 14662                           ;eusart.c: 624: RX1_full = 1;
 14663  0013E2  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 14664  0013E4                     i1l6560:
 14665                           
 14666                           ;eusart.c: 625: }
 14667                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 14668  0013E4  0EC0               	movlw	low _UART_RX_TEXT
 14669  0013E6  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14670  0013E8  6ED9               	movwf	fsr2l,c
 14671  0013EA  6ADA               	clrf	fsr2h,c
 14672  0013EC  0E01               	movlw	high _UART_RX_TEXT
 14673  0013EE  22DA               	addwfc	fsr2h,f,c
 14674  0013F0  0E00               	movlw	0
 14675  0013F2  6ADF               	clrf	indf2,c
 14676                           
 14677                           ;eusart.c: 629: eusart1RxIndex = 0;
 14678  0013F4  6A45               	clrf	_eusart1RxIndex,c	;volatile
 14679                           
 14680                           ;eusart.c: 631: } else {
 14681  0013F6  0012               	return	
 14682  0013F8                     i1l6564:
 14683                           
 14684                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 14685  0013F8  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14686  0013FA  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14687  0013FC  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 14688  0013FE  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 14689  001400  0E00               	movlw	0
 14690  001402  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 14691  001404  0E40               	movlw	64
 14692  001406  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 14693  001408  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 14694  00140A  E105               	bnz	i1l6570
 14695                           
 14696                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 14697  00140C  0101               	movlb	1	; () banked
 14698  00140E  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 14699                           
 14700                           ;eusart.c: 636: eusart1RxIndex = 0;
 14701  001410  6A45               	clrf	_eusart1RxIndex,c	;volatile
 14702                           
 14703                           ;eusart.c: 638: EUSART1_Erreur_Get();
 14704  001412  EFEF  F011         	goto	_EUSART1_Erreur_Get	;wreg free
 14705  001416                     i1l6570:
 14706                           
 14707                           ;eusart.c: 640: eusart1RxIndex++;
 14708  001416  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 14709  001418  0012               	return	
 14710  00141A                     i1l6576:
 14711  00141A  0E01               	movlw	1
 14712  00141C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 14713  00141E  0E00               	movlw	0
 14714  001420  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14715  001422  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 14716                           
 14717                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14718                           ; Switch size 1, requested type "speed"
 14719                           ; Number of cases is 1, Range of values is 0 to 0
 14720                           ; switch strategies available:
 14721                           ; Name         Instructions Cycles
 14722                           ; simple_byte            4     3 (average)
 14723                           ;	Chosen strategy is simple_byte
 14724  001424  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 14725  001426  A4D8               	btfss	status,2,c
 14726  001428  0012               	return	
 14727                           
 14728                           ; Switch size 1, requested type "speed"
 14729                           ; Number of cases is 2, Range of values is 0 to 1
 14730                           ; switch strategies available:
 14731                           ; Name         Instructions Cycles
 14732                           ; simple_byte            7     4 (average)
 14733                           ;	Chosen strategy is simple_byte
 14734  00142A  5005               	movf	??_EUSART1_Receive_ISR,w,c
 14735  00142C  E0E5               	bz	i1l6564
 14736  00142E  0A01               	xorlw	1	; case 1
 14737  001430  E102 EFEF  F011    	bz	_EUSART1_Erreur_Get
 14738  001436  0012               	return		;funcret
 14739  001438                     __end_of_EUSART1_Receive_ISR:
 14740                           	opt stack 0
 14741                           tblptru	equ	0xFF8
 14742                           tblptrh	equ	0xFF7
 14743                           tblptrl	equ	0xFF6
 14744                           tablat	equ	0xFF5
 14745                           prodh	equ	0xFF4
 14746                           prodl	equ	0xFF3
 14747                           intcon	equ	0xFF2
 14748                           intcon2	equ	0xFF1
 14749                           intcon3	equ	0xFF0
 14750                           postinc0	equ	0xFEE
 14751                           wreg	equ	0xFE8
 14752                           indf1	equ	0xFE7
 14753                           postdec1	equ	0xFE5
 14754                           fsr1h	equ	0xFE2
 14755                           fsr1l	equ	0xFE1
 14756                           bsr	equ	0xFE0
 14757                           indf2	equ	0xFDF
 14758                           postinc2	equ	0xFDE
 14759                           postdec2	equ	0xFDD
 14760                           fsr2h	equ	0xFDA
 14761                           fsr2l	equ	0xFD9
 14762                           status	equ	0xFD8
 14763                           
 14764 ;; *************** function _EUSART1_Erreur_Get *****************
 14765 ;; Defined at:
 14766 ;;		line 585 in file "eusart.c"
 14767 ;; Parameters:    Size  Location     Type
 14768 ;;		None
 14769 ;; Auto vars:     Size  Location     Type
 14770 ;;		None
 14771 ;; Return value:  Size  Location     Type
 14772 ;;                  1    wreg      void 
 14773 ;; Registers used:
 14774 ;;		None
 14775 ;; Tracked objects:
 14776 ;;		On entry : 0/1
 14777 ;;		On exit  : 0/0
 14778 ;;		Unchanged: 0/0
 14779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14780 ;;      Params:         0       0       0       0
 14781 ;;      Locals:         0       0       0       0
 14782 ;;      Temps:          0       0       0       0
 14783 ;;      Totals:         0       0       0       0
 14784 ;;Total ram usage:        0 bytes
 14785 ;; Hardware stack levels used:    1
 14786 ;; Hardware stack levels required when called:    5
 14787 ;; This function calls:
 14788 ;;		Nothing
 14789 ;; This function is called by:
 14790 ;;		_EUSART1_Receive_ISR
 14791 ;; This function uses a non-reentrant model
 14792 ;;
 14793                           
 14794                           	psect	text92
 14795  0023DE                     __ptext92:
 14796                           	opt stack 0
 14797  0023DE                     _EUSART1_Erreur_Get:
 14798                           	opt stack 13
 14799                           
 14800                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 14801                           
 14802                           ;incstack = 0
 14803  0023DE  848B               	bsf	3979,2,c	;volatile
 14804                           
 14805                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 14806  0023E0  948B               	bcf	3979,2,c	;volatile
 14807                           
 14808                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 14809  0023E2  848B               	bsf	3979,2,c	;volatile
 14810  0023E4  0012               	return		;funcret
 14811  0023E6                     __end_of_EUSART1_Erreur_Get:
 14812                           	opt stack 0
 14813                           tblptru	equ	0xFF8
 14814                           tblptrh	equ	0xFF7
 14815                           tblptrl	equ	0xFF6
 14816                           tablat	equ	0xFF5
 14817                           prodh	equ	0xFF4
 14818                           prodl	equ	0xFF3
 14819                           intcon	equ	0xFF2
 14820                           intcon2	equ	0xFF1
 14821                           intcon3	equ	0xFF0
 14822                           postinc0	equ	0xFEE
 14823                           wreg	equ	0xFE8
 14824                           indf1	equ	0xFE7
 14825                           postdec1	equ	0xFE5
 14826                           fsr1h	equ	0xFE2
 14827                           fsr1l	equ	0xFE1
 14828                           bsr	equ	0xFE0
 14829                           indf2	equ	0xFDF
 14830                           postinc2	equ	0xFDE
 14831                           postdec2	equ	0xFDD
 14832                           fsr2h	equ	0xFDA
 14833                           fsr2l	equ	0xFD9
 14834                           status	equ	0xFD8
 14835                           
 14836 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 14837 ;; Defined at:
 14838 ;;		line 970 in file "interrupt.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;		None
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;		None
 14843 ;; Return value:  Size  Location     Type
 14844 ;;                  1    wreg      void 
 14845 ;; Registers used:
 14846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14852 ;;      Params:         0       0       0       0
 14853 ;;      Locals:         0       0       0       0
 14854 ;;      Temps:          2       0       0       0
 14855 ;;      Totals:         2       0       0       0
 14856 ;;Total ram usage:        2 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:    4
 14859 ;; This function calls:
 14860 ;;		i2_IRQ_CAPOT
 14861 ;;		i2_IRQ_I_MOTEUR_1
 14862 ;;		i2_IRQ_I_MOTEUR_2
 14863 ;;		i2_IRQ_TIMER2
 14864 ;; This function is called by:
 14865 ;;		Interrupt level 2
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           	psect	intcode
 14870  000008                     __pintcode:
 14871                           	opt stack 0
 14872  000008                     _HIGH_PRIORITY_IRQ:
 14873                           	opt stack 11
 14874                           
 14875                           ;incstack = 0
 14876  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14877  00000A  EF7F  F00E         	goto	int_func
 14878                           tblptru	equ	0xFF8
 14879                           tblptrh	equ	0xFF7
 14880                           tblptrl	equ	0xFF6
 14881                           tablat	equ	0xFF5
 14882                           prodh	equ	0xFF4
 14883                           prodl	equ	0xFF3
 14884                           intcon	equ	0xFF2
 14885                           intcon2	equ	0xFF1
 14886                           intcon3	equ	0xFF0
 14887                           postinc0	equ	0xFEE
 14888                           wreg	equ	0xFE8
 14889                           indf1	equ	0xFE7
 14890                           postdec1	equ	0xFE5
 14891                           fsr1h	equ	0xFE2
 14892                           fsr1l	equ	0xFE1
 14893                           bsr	equ	0xFE0
 14894                           indf2	equ	0xFDF
 14895                           postinc2	equ	0xFDE
 14896                           postdec2	equ	0xFDD
 14897                           fsr2h	equ	0xFDA
 14898                           fsr2l	equ	0xFD9
 14899                           status	equ	0xFD8
 14900                           
 14901                           	psect	intcode_body
 14902  001CFE                     __pintcode_body:
 14903                           	opt stack 11
 14904  001CFE                     int_func:
 14905                           	opt stack 11
 14906  001CFE  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 14907  001D02  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 14908                           
 14909                           ;interrupt.c: 973: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 14910  001D06  B29D               	btfsc	3997,1,c	;volatile
 14911  001D08  A29E               	btfss	3998,1,c	;volatile
 14912  001D0A  D003               	goto	i2l706
 14913                           
 14914                           ;interrupt.c: 974: IRQ_TIMER2();
 14915  001D0C  EC02  F012         	call	i2_IRQ_TIMER2	;wreg free
 14916                           
 14917                           ;interrupt.c: 980: }
 14918  001D10  D011               	goto	i2l713
 14919  001D12                     i2l706:
 14920                           
 14921                           ;interrupt.c: 981: else
 14922                           ;interrupt.c: 982: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 14923  001D12  B8F2               	btfsc	intcon,4,c	;volatile
 14924  001D14  A2F2               	btfss	intcon,1,c	;volatile
 14925  001D16  D003               	goto	i2l708
 14926                           
 14927                           ;interrupt.c: 983: {
 14928                           ;interrupt.c: 984: IRQ_CAPOT();
 14929  001D18  ECD6  F011         	call	i2_IRQ_CAPOT	;wreg free
 14930                           
 14931                           ;interrupt.c: 999: } else
 14932  001D1C  D00B               	goto	i2l713
 14933  001D1E                     i2l708:
 14934                           
 14935                           ;interrupt.c: 1000: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 14936  001D1E  B6F0               	btfsc	intcon3,3,c	;volatile
 14937  001D20  A0F0               	btfss	intcon3,0,c	;volatile
 14938  001D22  D003               	goto	i2l710
 14939                           
 14940                           ;interrupt.c: 1006: IRQ_I_MOTEUR_1();
 14941  001D24  ECEC  F010         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 14942                           
 14943                           ;interrupt.c: 1018: } else
 14944  001D28  D005               	goto	i2l713
 14945  001D2A                     i2l710:
 14946                           
 14947                           ;interrupt.c: 1019: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 14948  001D2A  B8F0               	btfsc	intcon3,4,c	;volatile
 14949  001D2C  A2F0               	btfss	intcon3,1,c	;volatile
 14950  001D2E  D002               	goto	i2l713
 14951                           
 14952                           ;interrupt.c: 1025: IRQ_I_MOTEUR_2();
 14953  001D30  EC24  F011         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 14954  001D34                     i2l713:
 14955  001D34  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 14956  001D38  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 14957  001D3C  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14958  001D3E  0011               	retfie		f
 14959  001D40                     __end_of_HIGH_PRIORITY_IRQ:
 14960                           	opt stack 0
 14961                           tblptru	equ	0xFF8
 14962                           tblptrh	equ	0xFF7
 14963                           tblptrl	equ	0xFF6
 14964                           tablat	equ	0xFF5
 14965                           prodh	equ	0xFF4
 14966                           prodl	equ	0xFF3
 14967                           intcon	equ	0xFF2
 14968                           intcon2	equ	0xFF1
 14969                           intcon3	equ	0xFF0
 14970                           postinc0	equ	0xFEE
 14971                           wreg	equ	0xFE8
 14972                           indf1	equ	0xFE7
 14973                           postdec1	equ	0xFE5
 14974                           fsr1h	equ	0xFE2
 14975                           fsr1l	equ	0xFE1
 14976                           bsr	equ	0xFE0
 14977                           indf2	equ	0xFDF
 14978                           postinc2	equ	0xFDE
 14979                           postdec2	equ	0xFDD
 14980                           fsr2h	equ	0xFDA
 14981                           fsr2l	equ	0xFD9
 14982                           status	equ	0xFD8
 14983                           
 14984 ;; *************** function i2_IRQ_TIMER2 *****************
 14985 ;; Defined at:
 14986 ;;		line 895 in file "interrupt.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;		None
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;		None
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      void 
 14993 ;; Registers used:
 14994 ;;		None
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15000 ;;      Params:         0       0       0       0
 15001 ;;      Locals:         0       0       0       0
 15002 ;;      Temps:          0       0       0       0
 15003 ;;      Totals:         0       0       0       0
 15004 ;;Total ram usage:        0 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; This function calls:
 15007 ;;		Nothing
 15008 ;; This function is called by:
 15009 ;;		_HIGH_PRIORITY_IRQ
 15010 ;; This function uses a non-reentrant model
 15011 ;;
 15012                           
 15013                           	psect	text94
 15014  002404                     __ptext94:
 15015                           	opt stack 0
 15016  002404                     i2_IRQ_TIMER2:
 15017                           	opt stack 14
 15018                           
 15019                           ;interrupt.c: 896: PIR1bits.TMR2IF = 0;
 15020                           
 15021                           ;incstack = 0
 15022  002404  929E               	bcf	3998,1,c	;volatile
 15023                           
 15024                           ;interrupt.c: 899: GODONE = 1;
 15025  002406  82C2               	bsf	4034,1,c	;volatile
 15026  002408  0012               	return		;funcret
 15027  00240A                     __end_ofi2_IRQ_TIMER2:
 15028                           	opt stack 0
 15029                           tblptru	equ	0xFF8
 15030                           tblptrh	equ	0xFF7
 15031                           tblptrl	equ	0xFF6
 15032                           tablat	equ	0xFF5
 15033                           prodh	equ	0xFF4
 15034                           prodl	equ	0xFF3
 15035                           intcon	equ	0xFF2
 15036                           intcon2	equ	0xFF1
 15037                           intcon3	equ	0xFF0
 15038                           postinc0	equ	0xFEE
 15039                           wreg	equ	0xFE8
 15040                           indf1	equ	0xFE7
 15041                           postdec1	equ	0xFE5
 15042                           fsr1h	equ	0xFE2
 15043                           fsr1l	equ	0xFE1
 15044                           bsr	equ	0xFE0
 15045                           indf2	equ	0xFDF
 15046                           postinc2	equ	0xFDE
 15047                           postdec2	equ	0xFDD
 15048                           fsr2h	equ	0xFDA
 15049                           fsr2l	equ	0xFD9
 15050                           status	equ	0xFD8
 15051                           
 15052 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15053 ;; Defined at:
 15054 ;;		line 924 in file "interrupt.c"
 15055 ;; Parameters:    Size  Location     Type
 15056 ;;		None
 15057 ;; Auto vars:     Size  Location     Type
 15058 ;;		None
 15059 ;; Return value:  Size  Location     Type
 15060 ;;                  1    wreg      void 
 15061 ;; Registers used:
 15062 ;;		wreg, status,2, status,0
 15063 ;; Tracked objects:
 15064 ;;		On entry : 0/0
 15065 ;;		On exit  : 0/0
 15066 ;;		Unchanged: 0/0
 15067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15068 ;;      Params:         0       0       0       0
 15069 ;;      Locals:         0       0       0       0
 15070 ;;      Temps:          0       0       0       0
 15071 ;;      Totals:         0       0       0       0
 15072 ;;Total ram usage:        0 bytes
 15073 ;; Hardware stack levels used:    1
 15074 ;; This function calls:
 15075 ;;		Nothing
 15076 ;; This function is called by:
 15077 ;;		_HIGH_PRIORITY_IRQ
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           	psect	text95
 15082  002248                     __ptext95:
 15083                           	opt stack 0
 15084  002248                     i2_IRQ_I_MOTEUR_2:
 15085                           	opt stack 14
 15086                           
 15087                           ;interrupt.c: 929: LATCbits.LATC1 = 0;
 15088                           
 15089                           ;incstack = 0
 15090  002248  928B               	bcf	3979,1,c	;volatile
 15091                           
 15092                           ;interrupt.c: 931: while(TMR2 > 0) __nop();
 15093  00224A  D001               	goto	i2l4598
 15094  00224C                     i2l699:
 15095  00224C  F000               	nop	
 15096  00224E                     i2l4598:
 15097  00224E  50CC               	movf	4044,w,c	;volatile
 15098  002250  E1FD               	bnz	i2l699
 15099                           
 15100                           ;interrupt.c: 933: LATCbits.LATC1 = 1;
 15101  002252  828B               	bsf	3979,1,c	;volatile
 15102                           
 15103                           ;interrupt.c: 947: LATCbits.LATC2^=1;
 15104  002254  748B               	btg	3979,2,c	;volatile
 15105                           
 15106                           ;interrupt.c: 948: INTCON3bits.INT2IF = 0;
 15107  002256  92F0               	bcf	intcon3,1,c	;volatile
 15108                           
 15109                           ;interrupt.c: 952: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 15110  002258  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 15111  00225A  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 15112  00225C  0012               	return		;funcret
 15113  00225E                     __end_ofi2_IRQ_I_MOTEUR_2:
 15114                           	opt stack 0
 15115                           tblptru	equ	0xFF8
 15116                           tblptrh	equ	0xFF7
 15117                           tblptrl	equ	0xFF6
 15118                           tablat	equ	0xFF5
 15119                           prodh	equ	0xFF4
 15120                           prodl	equ	0xFF3
 15121                           intcon	equ	0xFF2
 15122                           intcon2	equ	0xFF1
 15123                           intcon3	equ	0xFF0
 15124                           postinc0	equ	0xFEE
 15125                           wreg	equ	0xFE8
 15126                           indf1	equ	0xFE7
 15127                           postdec1	equ	0xFE5
 15128                           fsr1h	equ	0xFE2
 15129                           fsr1l	equ	0xFE1
 15130                           bsr	equ	0xFE0
 15131                           indf2	equ	0xFDF
 15132                           postinc2	equ	0xFDE
 15133                           postdec2	equ	0xFDD
 15134                           fsr2h	equ	0xFDA
 15135                           fsr2l	equ	0xFD9
 15136                           status	equ	0xFD8
 15137                           
 15138 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 15139 ;; Defined at:
 15140 ;;		line 910 in file "interrupt.c"
 15141 ;; Parameters:    Size  Location     Type
 15142 ;;		None
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;		None
 15145 ;; Return value:  Size  Location     Type
 15146 ;;                  1    wreg      void 
 15147 ;; Registers used:
 15148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15149 ;; Tracked objects:
 15150 ;;		On entry : 0/0
 15151 ;;		On exit  : 0/0
 15152 ;;		Unchanged: 0/0
 15153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15154 ;;      Params:         0       0       0       0
 15155 ;;      Locals:         0       0       0       0
 15156 ;;      Temps:          0       0       0       0
 15157 ;;      Totals:         0       0       0       0
 15158 ;;Total ram usage:        0 bytes
 15159 ;; Hardware stack levels used:    1
 15160 ;; Hardware stack levels required when called:    3
 15161 ;; This function calls:
 15162 ;;		i2_Alarme_On
 15163 ;; This function is called by:
 15164 ;;		_HIGH_PRIORITY_IRQ
 15165 ;; This function uses a non-reentrant model
 15166 ;;
 15167                           
 15168                           	psect	text96
 15169  0021D8                     __ptext96:
 15170                           	opt stack 0
 15171  0021D8                     i2_IRQ_I_MOTEUR_1:
 15172                           	opt stack 11
 15173                           
 15174                           ;interrupt.c: 911: INTCON3bits.INT1IF = 0;
 15175                           
 15176                           ;incstack = 0
 15177  0021D8  90F0               	bcf	intcon3,0,c	;volatile
 15178                           
 15179                           ;interrupt.c: 912: Compteur_IRQ_I_Moteur_1 += 1;
 15180  0021DA  0100               	movlb	0	; () banked
 15181  0021DC  2B89               	incf	_Compteur_IRQ_I_Moteur_1& (0+255),f,b	;volatile
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;interrupt.c: 913: if (Compteur_IRQ_I_Moteur_1 == 0) {
 15185  0021DE  5189               	movf	_Compteur_IRQ_I_Moteur_1& (0+255),w,b	;volatile
 15186  0021E0  A4D8               	btfss	status,2,c
 15187  0021E2  0012               	return	
 15188                           
 15189                           ; BSR set to: 0
 15190                           ;interrupt.c: 914: LATCbits.LATC2 = 1;
 15191  0021E4  848B               	bsf	3979,2,c	;volatile
 15192                           
 15193                           ;interrupt.c: 916: LATCbits.LATC0 = 0;
 15194  0021E6  908B               	bcf	3979,0,c	;volatile
 15195                           
 15196                           ;interrupt.c: 917: LATCbits.LATC1 = 0;
 15197  0021E8  928B               	bcf	3979,1,c	;volatile
 15198                           
 15199                           ; BSR set to: 0
 15200                           ;interrupt.c: 919: Alarme_On(1);
 15201  0021EA  0E01               	movlw	1
 15202  0021EC  EF95  F011         	goto	i2_Alarme_On
 15203  0021F0                     __end_ofi2_IRQ_I_MOTEUR_1:
 15204                           	opt stack 0
 15205                           tblptru	equ	0xFF8
 15206                           tblptrh	equ	0xFF7
 15207                           tblptrl	equ	0xFF6
 15208                           tablat	equ	0xFF5
 15209                           prodh	equ	0xFF4
 15210                           prodl	equ	0xFF3
 15211                           intcon	equ	0xFF2
 15212                           intcon2	equ	0xFF1
 15213                           intcon3	equ	0xFF0
 15214                           postinc0	equ	0xFEE
 15215                           wreg	equ	0xFE8
 15216                           indf1	equ	0xFE7
 15217                           postdec1	equ	0xFE5
 15218                           fsr1h	equ	0xFE2
 15219                           fsr1l	equ	0xFE1
 15220                           bsr	equ	0xFE0
 15221                           indf2	equ	0xFDF
 15222                           postinc2	equ	0xFDE
 15223                           postdec2	equ	0xFDD
 15224                           fsr2h	equ	0xFDA
 15225                           fsr2l	equ	0xFD9
 15226                           status	equ	0xFD8
 15227                           
 15228 ;; *************** function i2_Alarme_On *****************
 15229 ;; Defined at:
 15230 ;;		line 18 in file "alarme.c"
 15231 ;; Parameters:    Size  Location     Type
 15232 ;;  alarme_new_v    1    wreg     unsigned char 
 15233 ;; Auto vars:     Size  Location     Type
 15234 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      void 
 15237 ;; Registers used:
 15238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : 3F/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15244 ;;      Params:         0       0       0       0
 15245 ;;      Locals:         1       0       0       0
 15246 ;;      Temps:          0       0       0       0
 15247 ;;      Totals:         1       0       0       0
 15248 ;;Total ram usage:        1 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    2
 15251 ;; This function calls:
 15252 ;;		i2_Coupe_Moteur
 15253 ;;		i2_Etat_Update
 15254 ;; This function is called by:
 15255 ;;		i2_IRQ_I_MOTEUR_1
 15256 ;; This function uses a non-reentrant model
 15257 ;;
 15258                           
 15259                           	psect	text97
 15260  00232A                     __ptext97:
 15261                           	opt stack 0
 15262  00232A                     i2_Alarme_On:
 15263                           	opt stack 11
 15264                           
 15265                           ;incstack = 0
 15266                           ;i2Alarme_On@alarme_new_value stored from wreg
 15267  00232A  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 15268                           
 15269                           ;alarme.c: 22: Etat_Update(1);
 15270  00232C  0E01               	movlw	1
 15271  00232E  ECA8  F010         	call	i2_Etat_Update
 15272                           
 15273                           ;alarme.c: 23: Alarme = alarme_new_value;
 15274  002332  C002  F0A7         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 15275                           
 15276                           ;alarme.c: 24: Coupe_Moteur();
 15277  002336  EF2F  F011         	goto	i2_Coupe_Moteur	;wreg free
 15278  00233A                     __end_ofi2_Alarme_On:
 15279                           	opt stack 0
 15280                           tblptru	equ	0xFF8
 15281                           tblptrh	equ	0xFF7
 15282                           tblptrl	equ	0xFF6
 15283                           tablat	equ	0xFF5
 15284                           prodh	equ	0xFF4
 15285                           prodl	equ	0xFF3
 15286                           intcon	equ	0xFF2
 15287                           intcon2	equ	0xFF1
 15288                           intcon3	equ	0xFF0
 15289                           postinc0	equ	0xFEE
 15290                           wreg	equ	0xFE8
 15291                           indf1	equ	0xFE7
 15292                           postdec1	equ	0xFE5
 15293                           fsr1h	equ	0xFE2
 15294                           fsr1l	equ	0xFE1
 15295                           bsr	equ	0xFE0
 15296                           indf2	equ	0xFDF
 15297                           postinc2	equ	0xFDE
 15298                           postdec2	equ	0xFDD
 15299                           fsr2h	equ	0xFDA
 15300                           fsr2l	equ	0xFD9
 15301                           status	equ	0xFD8
 15302                           
 15303 ;; *************** function i2_Coupe_Moteur *****************
 15304 ;; Defined at:
 15305 ;;		line 277 in file "action.c"
 15306 ;; Parameters:    Size  Location     Type
 15307 ;;		None
 15308 ;; Auto vars:     Size  Location     Type
 15309 ;;		None
 15310 ;; Return value:  Size  Location     Type
 15311 ;;                  1    wreg      void 
 15312 ;; Registers used:
 15313 ;;		cstack
 15314 ;; Tracked objects:
 15315 ;;		On entry : 0/0
 15316 ;;		On exit  : 0/0
 15317 ;;		Unchanged: 0/0
 15318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15319 ;;      Params:         0       0       0       0
 15320 ;;      Locals:         0       0       0       0
 15321 ;;      Temps:          0       0       0       0
 15322 ;;      Totals:         0       0       0       0
 15323 ;;Total ram usage:        0 bytes
 15324 ;; Hardware stack levels used:    1
 15325 ;; Hardware stack levels required when called:    1
 15326 ;; This function calls:
 15327 ;;		i2_TIMER2_Off
 15328 ;; This function is called by:
 15329 ;;		i2_Alarme_On
 15330 ;; This function uses a non-reentrant model
 15331 ;;
 15332                           
 15333                           	psect	text98
 15334  00225E                     __ptext98:
 15335                           	opt stack 0
 15336  00225E                     i2_Coupe_Moteur:
 15337                           	opt stack 11
 15338                           
 15339                           ;action.c: 278: TIMER2_Off();
 15340                           
 15341                           ;incstack = 0
 15342  00225E  EC05  F012         	call	i2_TIMER2_Off	;wreg free
 15343                           
 15344                           ;action.c: 283: LATEbits.LATE2 = 0;
 15345  002262  948D               	bcf	3981,2,c	;volatile
 15346                           
 15347                           ;action.c: 290: LATCbits.LATC0 = 0;
 15348  002264  908B               	bcf	3979,0,c	;volatile
 15349                           
 15350                           ;action.c: 291: LATCbits.LATC1 = 0;
 15351  002266  928B               	bcf	3979,1,c	;volatile
 15352                           
 15353                           ;action.c: 292: OVDCOND = 0b00000000;
 15354  002268  6A6B               	clrf	3947,c	;volatile
 15355                           
 15356                           ;action.c: 293: LATD4 = 0;LATD5 = 0;
 15357  00226A  988C               	bcf	3980,4,c	;volatile
 15358  00226C  9A8C               	bcf	3980,5,c	;volatile
 15359                           
 15360                           ;action.c: 294: LATD6 = 0;LATD7 = 0;
 15361  00226E  9C8C               	bcf	3980,6,c	;volatile
 15362  002270  9E8C               	bcf	3980,7,c	;volatile
 15363  002272  0012               	return		;funcret
 15364  002274                     __end_ofi2_Coupe_Moteur:
 15365                           	opt stack 0
 15366                           tblptru	equ	0xFF8
 15367                           tblptrh	equ	0xFF7
 15368                           tblptrl	equ	0xFF6
 15369                           tablat	equ	0xFF5
 15370                           prodh	equ	0xFF4
 15371                           prodl	equ	0xFF3
 15372                           intcon	equ	0xFF2
 15373                           intcon2	equ	0xFF1
 15374                           intcon3	equ	0xFF0
 15375                           postinc0	equ	0xFEE
 15376                           wreg	equ	0xFE8
 15377                           indf1	equ	0xFE7
 15378                           postdec1	equ	0xFE5
 15379                           fsr1h	equ	0xFE2
 15380                           fsr1l	equ	0xFE1
 15381                           bsr	equ	0xFE0
 15382                           indf2	equ	0xFDF
 15383                           postinc2	equ	0xFDE
 15384                           postdec2	equ	0xFDD
 15385                           fsr2h	equ	0xFDA
 15386                           fsr2l	equ	0xFD9
 15387                           status	equ	0xFD8
 15388                           
 15389 ;; *************** function i2_TIMER2_Off *****************
 15390 ;; Defined at:
 15391 ;;		line 165 in file "timer.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;		None
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;		None
 15396 ;; Return value:  Size  Location     Type
 15397 ;;                  1    wreg      void 
 15398 ;; Registers used:
 15399 ;;		None
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15405 ;;      Params:         0       0       0       0
 15406 ;;      Locals:         0       0       0       0
 15407 ;;      Temps:          0       0       0       0
 15408 ;;      Totals:         0       0       0       0
 15409 ;;Total ram usage:        0 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; This function calls:
 15412 ;;		Nothing
 15413 ;; This function is called by:
 15414 ;;		i2_Coupe_Moteur
 15415 ;; This function uses a non-reentrant model
 15416 ;;
 15417                           
 15418                           	psect	text99
 15419  00240A                     __ptext99:
 15420                           	opt stack 0
 15421  00240A                     i2_TIMER2_Off:
 15422                           	opt stack 11
 15423                           
 15424                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 15425                           
 15426                           ;incstack = 0
 15427  00240A  929D               	bcf	3997,1,c	;volatile
 15428                           
 15429                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 15430  00240C  929E               	bcf	3998,1,c	;volatile
 15431  00240E  0012               	return		;funcret
 15432  002410                     __end_ofi2_TIMER2_Off:
 15433                           	opt stack 0
 15434                           tblptru	equ	0xFF8
 15435                           tblptrh	equ	0xFF7
 15436                           tblptrl	equ	0xFF6
 15437                           tablat	equ	0xFF5
 15438                           prodh	equ	0xFF4
 15439                           prodl	equ	0xFF3
 15440                           intcon	equ	0xFF2
 15441                           intcon2	equ	0xFF1
 15442                           intcon3	equ	0xFF0
 15443                           postinc0	equ	0xFEE
 15444                           wreg	equ	0xFE8
 15445                           indf1	equ	0xFE7
 15446                           postdec1	equ	0xFE5
 15447                           fsr1h	equ	0xFE2
 15448                           fsr1l	equ	0xFE1
 15449                           bsr	equ	0xFE0
 15450                           indf2	equ	0xFDF
 15451                           postinc2	equ	0xFDE
 15452                           postdec2	equ	0xFDD
 15453                           fsr2h	equ	0xFDA
 15454                           fsr2l	equ	0xFD9
 15455                           status	equ	0xFD8
 15456                           
 15457 ;; *************** function i2_IRQ_CAPOT *****************
 15458 ;; Defined at:
 15459 ;;		line 902 in file "interrupt.c"
 15460 ;; Parameters:    Size  Location     Type
 15461 ;;		None
 15462 ;; Auto vars:     Size  Location     Type
 15463 ;;		None
 15464 ;; Return value:  Size  Location     Type
 15465 ;;                  1    wreg      void 
 15466 ;; Registers used:
 15467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15468 ;; Tracked objects:
 15469 ;;		On entry : 0/0
 15470 ;;		On exit  : 0/0
 15471 ;;		Unchanged: 0/0
 15472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15473 ;;      Params:         0       0       0       0
 15474 ;;      Locals:         0       0       0       0
 15475 ;;      Temps:          0       0       0       0
 15476 ;;      Totals:         0       0       0       0
 15477 ;;Total ram usage:        0 bytes
 15478 ;; Hardware stack levels used:    1
 15479 ;; Hardware stack levels required when called:    1
 15480 ;; This function calls:
 15481 ;;		i2_Etat_Update
 15482 ;; This function is called by:
 15483 ;;		_HIGH_PRIORITY_IRQ
 15484 ;; This function uses a non-reentrant model
 15485 ;;
 15486                           
 15487                           	psect	text100
 15488  0023AC                     __ptext100:
 15489                           	opt stack 0
 15490  0023AC                     i2_IRQ_CAPOT:
 15491                           	opt stack 13
 15492                           
 15493                           ;interrupt.c: 903: INT0IF = 0;
 15494                           
 15495                           ;incstack = 0
 15496  0023AC  92F2               	bcf	intcon,1,c	;volatile
 15497                           
 15498                           ;interrupt.c: 905: if(PORTAbits.RA2==1){
 15499  0023AE  A480               	btfss	3968,2,c	;volatile
 15500  0023B0  0012               	return	
 15501                           
 15502                           ;interrupt.c: 906: Etat_Update(2);
 15503  0023B2  0E02               	movlw	2
 15504  0023B4  EFA8  F010         	goto	i2_Etat_Update
 15505  0023B8                     __end_ofi2_IRQ_CAPOT:
 15506                           	opt stack 0
 15507                           tblptru	equ	0xFF8
 15508                           tblptrh	equ	0xFF7
 15509                           tblptrl	equ	0xFF6
 15510                           tablat	equ	0xFF5
 15511                           prodh	equ	0xFF4
 15512                           prodl	equ	0xFF3
 15513                           intcon	equ	0xFF2
 15514                           intcon2	equ	0xFF1
 15515                           intcon3	equ	0xFF0
 15516                           postinc0	equ	0xFEE
 15517                           wreg	equ	0xFE8
 15518                           indf1	equ	0xFE7
 15519                           postdec1	equ	0xFE5
 15520                           fsr1h	equ	0xFE2
 15521                           fsr1l	equ	0xFE1
 15522                           bsr	equ	0xFE0
 15523                           indf2	equ	0xFDF
 15524                           postinc2	equ	0xFDE
 15525                           postdec2	equ	0xFDD
 15526                           fsr2h	equ	0xFDA
 15527                           fsr2l	equ	0xFD9
 15528                           status	equ	0xFD8
 15529                           
 15530 ;; *************** function i2_Etat_Update *****************
 15531 ;; Defined at:
 15532 ;;		line 67 in file "action.c"
 15533 ;; Parameters:    Size  Location     Type
 15534 ;;  etat_new_val    1    wreg     unsigned char 
 15535 ;; Auto vars:     Size  Location     Type
 15536 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 15537 ;; Return value:  Size  Location     Type
 15538 ;;                  1    wreg      void 
 15539 ;; Registers used:
 15540 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15541 ;; Tracked objects:
 15542 ;;		On entry : 0/0
 15543 ;;		On exit  : 0/0
 15544 ;;		Unchanged: 0/0
 15545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15546 ;;      Params:         0       0       0       0
 15547 ;;      Locals:         1       0       0       0
 15548 ;;      Temps:          0       0       0       0
 15549 ;;      Totals:         1       0       0       0
 15550 ;;Total ram usage:        1 bytes
 15551 ;; Hardware stack levels used:    1
 15552 ;; This function calls:
 15553 ;;		Nothing
 15554 ;; This function is called by:
 15555 ;;		i2_IRQ_CAPOT
 15556 ;;		i2_Alarme_On
 15557 ;; This function uses a non-reentrant model
 15558 ;;
 15559                           
 15560                           	psect	text101
 15561  002150                     __ptext101:
 15562                           	opt stack 0
 15563  002150                     i2_Etat_Update:
 15564                           	opt stack 12
 15565                           
 15566                           ;incstack = 0
 15567                           ;i2Etat_Update@etat_new_value stored from wreg
 15568  002150  6E01               	movwf	i2Etat_Update@etat_new_value,c
 15569                           
 15570                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 15571  002152  504D               	movf	_Etat_Precedent_Index,w,c
 15572  002154  0F6A               	addlw	low _Etat_Log
 15573  002156  6ED9               	movwf	fsr2l,c
 15574  002158  6ADA               	clrf	fsr2h,c
 15575  00215A  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 15576                           
 15577                           ;action.c: 69: Etat = etat_new_value;
 15578  00215E  C001  F0A8         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 15579                           
 15580                           ;action.c: 70: Etat_Precedent_Index++;
 15581  002162  2A4D               	incf	_Etat_Precedent_Index,f,c
 15582                           
 15583                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 15584  002164  0E0A               	movlw	10
 15585  002166  184D               	xorwf	_Etat_Precedent_Index,w,c
 15586  002168  B4D8               	btfsc	status,2,c
 15587                           
 15588                           ;action.c: 72: Etat_Precedent_Index = 0;
 15589  00216A  6A4D               	clrf	_Etat_Precedent_Index,c
 15590  00216C  0012               	return		;funcret
 15591  00216E                     __end_ofi2_Etat_Update:
 15592                           	opt stack 0
 15593                           tblptru	equ	0xFF8
 15594                           tblptrh	equ	0xFF7
 15595                           tblptrl	equ	0xFF6
 15596                           tablat	equ	0xFF5
 15597                           prodh	equ	0xFF4
 15598                           prodl	equ	0xFF3
 15599                           intcon	equ	0xFF2
 15600                           intcon2	equ	0xFF1
 15601                           intcon3	equ	0xFF0
 15602                           postinc0	equ	0xFEE
 15603                           wreg	equ	0xFE8
 15604                           indf1	equ	0xFE7
 15605                           postdec1	equ	0xFE5
 15606                           fsr1h	equ	0xFE2
 15607                           fsr1l	equ	0xFE1
 15608                           bsr	equ	0xFE0
 15609                           indf2	equ	0xFDF
 15610                           postinc2	equ	0xFDE
 15611                           postdec2	equ	0xFDD
 15612                           fsr2h	equ	0xFDA
 15613                           fsr2l	equ	0xFD9
 15614                           status	equ	0xFD8
 15615                           tblptru	equ	0xFF8
 15616                           tblptrh	equ	0xFF7
 15617                           tblptrl	equ	0xFF6
 15618                           tablat	equ	0xFF5
 15619                           prodh	equ	0xFF4
 15620                           prodl	equ	0xFF3
 15621                           intcon	equ	0xFF2
 15622                           intcon2	equ	0xFF1
 15623                           intcon3	equ	0xFF0
 15624                           postinc0	equ	0xFEE
 15625                           wreg	equ	0xFE8
 15626                           indf1	equ	0xFE7
 15627                           postdec1	equ	0xFE5
 15628                           fsr1h	equ	0xFE2
 15629                           fsr1l	equ	0xFE1
 15630                           bsr	equ	0xFE0
 15631                           indf2	equ	0xFDF
 15632                           postinc2	equ	0xFDE
 15633                           postdec2	equ	0xFDD
 15634                           fsr2h	equ	0xFDA
 15635                           fsr2l	equ	0xFD9
 15636                           status	equ	0xFD8
 15637                           
 15638                           	psect	rparam
 15639  0000                     tblptru	equ	0xFF8
 15640                           tblptrh	equ	0xFF7
 15641                           tblptrl	equ	0xFF6
 15642                           tablat	equ	0xFF5
 15643                           prodh	equ	0xFF4
 15644                           prodl	equ	0xFF3
 15645                           intcon	equ	0xFF2
 15646                           intcon2	equ	0xFF1
 15647                           intcon3	equ	0xFF0
 15648                           postinc0	equ	0xFEE
 15649                           wreg	equ	0xFE8
 15650                           indf1	equ	0xFE7
 15651                           postdec1	equ	0xFE5
 15652                           fsr1h	equ	0xFE2
 15653                           fsr1l	equ	0xFE1
 15654                           bsr	equ	0xFE0
 15655                           indf2	equ	0xFDF
 15656                           postinc2	equ	0xFDE
 15657                           postdec2	equ	0xFDD
 15658                           fsr2h	equ	0xFDA
 15659                           fsr2l	equ	0xFD9
 15660                           status	equ	0xFD8
 15661                           
 15662                           	psect	temp
 15663  000051                     btemp:
 15664                           	opt stack 0
 15665  000051                     	ds	1
 15666  0000                     int$flags	set	btemp
 15667                           tblptru	equ	0xFF8
 15668                           tblptrh	equ	0xFF7
 15669                           tblptrl	equ	0xFF6
 15670                           tablat	equ	0xFF5
 15671                           prodh	equ	0xFF4
 15672                           prodl	equ	0xFF3
 15673                           intcon	equ	0xFF2
 15674                           intcon2	equ	0xFF1
 15675                           intcon3	equ	0xFF0
 15676                           postinc0	equ	0xFEE
 15677                           wreg	equ	0xFE8
 15678                           indf1	equ	0xFE7
 15679                           postdec1	equ	0xFE5
 15680                           fsr1h	equ	0xFE2
 15681                           fsr1l	equ	0xFE1
 15682                           bsr	equ	0xFE0
 15683                           indf2	equ	0xFDF
 15684                           postinc2	equ	0xFDE
 15685                           postdec2	equ	0xFDD
 15686                           fsr2h	equ	0xFDA
 15687                           fsr2l	equ	0xFD9
 15688                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         536
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     20     160
    BANK1           256      0     256
    BANK2           256     10     138

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Apparait->_Etat_Update
    _IRQ_I_MOTEUR_1->_Alarme_On
    _Alarme_On->_Etat_Update
    _IRQ_CAPOT->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update
    i2_IRQ_CAPOT->i2_Etat_Update

Critical Paths under _main in BANK0

    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  200710
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                     _Init_Metalhome
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Metalhome                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  200611
                                              9 BANK2      1     1      0
                        _Buzzer_Etat
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
              _Mouvement_X_Metalhome
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   39905
                                              6 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26258
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X_Metalhome                                7     7      0   26351
                                              4 BANK2      1     1      0
        _Check_List_Moteur_Metalhome
                       _Coupe_Moteur
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Metalhome                          0     0      0   26258
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   53639
                                              4 BANK2      3     1      2
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      62
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   26289
                          _Alarme_On
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40236
                                              6 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13163
                                              4 BANK2      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26589
                                              4 BANK2      1     1      0
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13098
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13098
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13098
                                             63 COMRAM     3     3      0
                                             13 BANK0      7     0      7
                                              0 BANK2      4     4      0
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     434
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     357
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                            _SPI_ISR
                      i1_Etat_Update
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     110
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      44
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Buzzer_Etat
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Etat_Update
           _IRQ_PION_Metal_Disparait
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Etat_Update
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Etat_Update
             _IRQ_PION_Metal_Disparait
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Etat_Update
             _IRQ_PION_Metal_Disparait
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_X_Metalhome
       _Check_List_Moteur_Metalhome
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Etat_Update
           _IRQ_PION_Metal_Disparait
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Etat_Update
             _IRQ_PION_Metal_Disparait
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_Metalhome
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _SPI_ISR
   i1_Etat_Update
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      A      8A       9       53.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     14      A0       5      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27A       3        0.0%
DATA                 0      0     27A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 18 08:14:22 2018

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l260 0CC8  
                                                   l270 0D6A  
                                                   l249 0C2C  
                                                   l610 19D6  
                                                   l620 0DD8  
                                                   l532 2352  
                                                   l622 0E0C  
                                                   l286 1D82  
                                                   l607 19A2  
                                                   l635 0EE2  
                                                   l628 0E5E  
                                                   l588 1AD2  
                                                   l699 220A  
                                                   l990 1DEA  
                                                   l977 203A  
                                                   _GIE 007F97  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009D  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 2410  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0287  
                                                  l1015 17A4  
                                                  l1031 1154  
                                                  l1008 1742  
                                                  l1050 1204  
                                                  l1026 16FA  
                                                  l1019 1698  
                                                  l1061 17E2  
                                                  l1049 124C  
                                                  l1330 14F4  
                                                  l1420 046A  
                                                  l1504 0796  
                                                  l1432 058E  
                                                  l1506 07AC  
                                                  l1450 0620  
                                                  l1434 0592  
                                                  l1435 0598  
                                                  l1436 05D4  
                                                  l1437 05D6  
                                                  l1429 0560  
                                                  l2175 1CF4  
                                                  l1720 08C8  
                                                  l1480 072C  
                                                  l1464 068E  
                                                  l2185 1D74  
                                                  l1386 0182  
                                                  l1735 0988  
                                                  l1753 0A5E  
                                                  l1754 0A62  
                                                  l1589 2344  
                                                  l7200 0F3A  
                                                  l7104 1AFC  
                                                  l7204 0F66  
                                                  l7124 19A6  
                                                  l7132 19BA  
                                                  l7118 1996  
                                                  l7240 186E  
                                                  l7160 0E2A  
                                                  l7064 220C  
                                                  l7144 19DE  
                                                  l8200 11CC  
                                                  l7170 0E86  
                                                  l7154 0E00  
                                                  l7090 1AD8  
                                                  l7218 219E  
                                                  l7402 08D0  
                                                  l8202 11D4  
                                                  l7260 18AE  
                                                  l7252 1898  
                                                  l7244 187A  
                                                  l7236 1862  
                                                  l7164 0E32  
                                                  l7084 1AC0  
                                                  l7420 0958  
                                                  l7412 08FE  
                                                  l8132 205C  
                                                  l8220 1214  
                                                  l8212 11F8  
                                                  l8060 1EE2  
                                                  l8052 1ECA  
                                                  l7246 1882  
                                                  l7182 0EB6  
                                                  l7174 0E90  
                                                  l7270 1CC4  
                                                  l7510 0ACA  
                                                  l7406 08D6  
                                                  l8070 1EFA  
                                                  l8230 1234  
                                                  l8206 11E4  
                                                  l8302 1840  
                                                  l7248 1886  
                                                  l7256 18A2  
                                                  l7192 0F14  
                                                  l7096 1AEA  
                                                  l7088 1ACC  
                                                  l7272 1CCC  
                                                  l7520 0B54  
                                                  l7512 0AD0  
                                                  l7504 0AB4  
                                                  l7440 09C4  
                                                  l7424 095C  
                                                  l8400 1746  
                                                  _ADIF 007CF6  
                                                  l7178 0EAE  
                                                  l7282 1CEA  
                                                  l7274 1CD0  
                                                  l7290 1D4C  
                                                  l7514 0B12  
                                                  l7522 0B5E  
                                                  l7530 0B88  
                                                  l7602 032E  
                                                  l8226 1226  
                                                  l8234 1242  
                                                  l8242 227A  
                                                  l7380 1532  
                                                  l7196 0F32  
                                                  l7188 0F0A  
                                                  l7292 1D54  
                                                  l7460 09F4  
                                                  l7436 09B0  
                                                  l7620 03AC  
                                                  l7612 0368  
                                                  l7604 034C  
                                                  l7540 00F8  
                                                  l8076 1F10  
                                                  l7294 1D58  
                                                  l7526 0B6A  
                                                  l7454 09F0  
                                                  l7446 09C8  
                                                  l7470 0A1C  
                                                  l7542 010E  
                                                  l8158 1158  
                                                  l8334 169C  
                                                  l8246 2280  
                                                  l7384 1548  
                                                  l7376 14FE  
                                                  l7472 0A26  
                                                  l7528 0B70  
                                                  l7800 0760  
                                                  l7720 066A  
                                                  l7712 0658  
                                                  l7632 044C  
                                                  l7616 038A  
                                                  l7608 035A  
                                                  l7640 0474  
                                                  l7544 0116  
                                                  l8192 11B2  
                                                  l8184 1194  
                                                  l7298 1D6A  
                                                  l7802 076C  
                                                  l7642 04A4  
                                                  l7626 03CE  
                                                  l7570 01FC  
                                                  l7538 00DE  
                                                  l8434 1796  
                                                  l8194 11B6  
                                                  l8266 17E6  
                                                  l8362 16DA  
                                                  l8610 0CB6  
                                                  l7396 08B4  
                                                  l7820 07BA  
                                                  l7804 0772  
                                                  l7812 0784  
                                                  l7724 0670  
                                                  l7708 0652  
                                                  l7652 054E  
                                                  l7644 04AA  
                                                  l7628 041C  
                                                  l7580 023C  
                                                  l7564 01CC  
                                                  l7556 0186  
                                                  l7548 0156  
                                                  l7900 1E50  
                                                  l8428 1784  
                                                  l8292 1820  
                                                  l8620 0CE4  
                                                  l8452 1440  
                                                  l7478 0A3C  
                                                  l7822 07C0  
                                                  l7814 07A4  
                                                  l7734 0682  
                                                  l7654 0554  
                                                  l7582 025A  
                                                  l7574 0214  
                                                  l8630 0CF2  
                                                  l8534 0B92  
                                                  l7488 0A7C  
                                                  l7496 0A96  
                                                  l7808 0778  
                                                  l7760 06DE  
                                                  l7744 06C0  
                                                  l7672 05E4  
                                                  l7664 059E  
                                                  l7656 055A  
                                                  l7648 04C2  
                                                  l7568 01F0  
                                                  l7904 1E58  
                                                  l8368 16EC  
                                                  l8560 0BEC  
                                                  l8552 0BCE  
                                                  l8536 0B9C  
                                                  l7498 0A9C  
                                                  l7818 07B2  
                                                  l7770 06F0  
                                                  l7666 05C8  
                                                  l7594 02D0  
                                                  l7586 0278  
                                                  l7578 0234  
                                                  l8298 1832  
                                                  l8618 0CD4  
                                                  l7756 06D8  
                                                  l7748 06C6  
                                                  l7772 06FC  
                                                  l7684 05FC  
                                                  l7676 05EA  
                                                  l7596 02EE  
                                                  l7588 02AA  
                                                  l7828 07CC  
                                                  l7916 1F32  
                                                  l8636 0D16  
                                                  l8580 0C38  
                                                  l8572 0C1A  
                                                  l8556 0BE0  
                                                  _ADON 007E10  
                                                  l7782 073A  
                                                  l7774 0702  
                                                  l7598 030C  
                                                  l7918 1F36  
                                                  l8662 0D74  
                                                  l8654 0D48  
                                                  l8646 0D24  
                                                  l8582 0C48  
                                                  l7784 0740  
                                                  l7792 0748  
                                                  l7688 0602  
                                                  l8664 0D84  
                                                  l8656 0D5E  
                                                  l8672 0DB4  
                                                  l7794 0754  
                                                  l7778 0738  
                                                  l7698 0614  
                                                  l8666 0D94  
                                                  l8594 0C76  
                                                  l7796 075A  
                                                  l7788 0742  
                                                  l7892 1E3C  
                                                  l8668 0DA4  
                                                  l7894 1E40  
                                                  l7878 2200  
                                                  l8598 0C88  
                                                  l7888 1E36  
                                                  STR_1 3FB9  
                                                  STR_2 3EB7  
                                                  STR_3 3FEC  
                                                  STR_4 3F9B  
                                                  STR_5 3FF9  
                                                  STR_6 3FB9  
                                                  STR_7 3F6A  
                                                  STR_8 3FBC  
                                                  STR_9 3FB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0F7C  
                                      ??i2_Coupe_Moteur 0001  
                                                  _IOFS 007E9A  
                                                  u5230 0F04  
                                                  u5150 0DFA  
                                                  _PEIE 007F96  
                                                  u5190 0E80  
                                                  u5650 01C6  
                                                  _PR5H 000F91  
                                                  _PR5L 000F90  
                                                  u6607 15D8  
                                                  u6617 15EA  
                                                  u6627 15FC  
                                                  u6637 160E  
                                                  u6647 1620  
                                                  u6657 1632  
                                                  u6667 1644  
                                                  u6587 15B4  
                                                  u5875 07A0  
                                                  u5876 07A2  
                                                  u6677 1656  
                                                  u6597 15C6  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 241C  
                                    _Detection_Pion_Off 23D6  
                                         _nb_s_bequille 004C  
                                       _Option_Multitas 027E  
                                                  _Etat 00A8  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 1D7E  
                               IRQ_Execution@IRQ_Indice 0012  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 1366  
                                 __end_of_IRQ_Execution 1C1A  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 00EB  
                           __end_of_EUSART1_RX_T3_LOCAL 08AC  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00D6  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A4  
                                       __end_of_Init_IT 1E28  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 000C  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 009C  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 232A  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0010  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 22EA  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0010  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 231A  
            _Surveillance_Consommation_Moteur_1_Activer 22DA  
                                    __size_ofi1_IRQ_PWM 0004  
                               ??_Mouvement_X_Metalhome 0043  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 231A  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0010  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 22DA  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0010  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 230A  
            _Surveillance_Consommation_Moteur_2_Activer 22CA  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0286  
                                       __end_of___lbdiv 1E5C  
                                                 STR_10 3F16  
                                                 STR_11 3FDB  
                                       __end_of___awmod 18B8  
                                        _Bequille_I_Max 004A  
                                      _LOW_PRIORITY_IRQ 0018  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 000C  
                                       __end_of___lwdiv 1CFE  
                                         _Init_Moteur_1 22AA  
                                         _Init_Moteur_2 229A  
                                       __end_of___lwmod 1D7E  
                                                 i1l610 1A3A  
                                                 i1l620 0F7E  
                                                 i1l532 2360  
                                                 i1l622 0FB2  
                                                 i1l607 1A06  
                                                 i1l635 1088  
                                                 i1l651 0054  
                                                 i1l628 1004  
                                                 i1l661 0094  
                                                 i1l653 0060  
                                                 i1l663 00A0  
                                                 i1l655 006C  
                                                 i1l648 004A  
                                                 i1l665 00AC  
                                                 i1l657 0088  
                                                 i1l658 007C  
                                                 i1l588 1B30  
                                                 i1l668 00B6  
                                                 i2l710 1D2A  
                                                 i2l713 1D34  
                                                 i2l706 1D12  
                                                 i2l708 1D1E  
                                                 i2l699 224C  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                         _Init_Variable 1438  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 233A  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 1F4C  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0B92  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 1FF4  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3EAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 2132  
                                       __end_of_isdigit 21A6  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0286  
                                                 status 000FD8  
                                     _Mouvement_Startup 004E  
                                       __end_of_sprintf 0B92  
                          __end_of_EUSART1_Check_Buffer 1FA4  
                                       ___lbdiv@divisor 000F  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 002E  
                          __size_of_Check_List_Moteur_2 0026  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 23E6  
                                       __initialization 1C6A  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 00FA  
                                  EUSART1_RX_T3_LOCAL@B 00FB  
                                  EUSART1_RX_T3_LOCAL@C 00FC  
                                  EUSART1_RX_T3_LOCAL@D 00FD  
                                  EUSART1_RX_T3_LOCAL@E 00FE  
                                  EUSART1_RX_T3_LOCAL@F 00FF  
                                      __end_of_Etat_Get 1EC2  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1C6A  
                                          __end_of_main 1DBA  
                                   __end_of_Init_TIMER0 20F4  
                                   __end_of_Init_TIMER2 21C0  
                                   __end_of_Init_TIMER5 1FCC  
                                      __end_of_Init_ADC 2114  
                                      __end_of_Init_SPI 20B2  
                                      __end_of_Init_PWM 218A  
                                 __end_of_delay_n_100ms 2288  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0288  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                                        _Init_Metalhome 23B8  
                          _Consigne_Max_Moteur_Bequille 0091  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 1DF4  
                            _Check_List_Moteur_Bequille 1DBA  
                           __end_of_EUSART1_Buffer_Send 15AE  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1341 2018  
                                                i1l1661 128A  
                                                i1l6500 128E  
                                                i1l6510 12F6  
                                     __end_of_IRQ_CAPOT 23AC  
                                                i1l6520 132E  
                                                i1l6512 12FE  
                                                i1l6506 12D8  
                                                i1l6602 1B48  
                                                i1l6610 1B5A  
                                                i1l6516 1312  
                                                i1l6524 1332  
                                                i1l6700 10D8  
                                                i1l6622 19FA  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6560 13E4  
                                                i1l6528 134A  
                                                i1l6704 10E0  
                                                i1l6570 1416  
                                                i1l6554 13BE  
                                                i1l6564 13F8  
                                                i1l6548 1374  
                                                i1l6492 1260  
                                                i1l6708 110C  
                                                i1l6628 1A0A  
                                                i1l6636 1A1E  
                                                i1l6558 13DC  
                                                i1l6590 1B1E  
                                                i1l6576 141A  
                                                i1l6664 0FD0  
                                                i1l6648 1A42  
                                                i1l6682 1054  
                                                i1l6674 102C  
                                                i1l6658 0FA6  
                                                i1l6594 1B2A  
                                                i1l6692 10B0  
                                                i1l6668 0FD8  
                                                i1l6596 1B36  
                                                i1l6686 105C  
                                                i1l6678 1036  
                                                i1l6696 10BA  
                                                i2l4598 224E  
                                     __end_ofi1_IRQ_ADC 1122  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 2420  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 0006  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 0289  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A2  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A7  
                                      __end_of_delay_1s 1FF4  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 2206  
                                 _Consigne_Max_Moteur_X 0093  
                                 _Consigne_Max_Moteur_Z 0092  
                                     __end_of_TIMER2_On 23EC  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 170E  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 2356  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0288  
                                                ___wmul 2068  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 237C  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 2370  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0286  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1C70  
                                                clear_1 1C7E  
                                                clear_2 1C90  
                                                clear_3 1CA0  
                                __end_of_Init_Metalhome 23C2  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 2232  
                                           _Etat_Update 2114  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3EA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00EC  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 2394  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 2388  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 22FA  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 1D40  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 1CA6  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 20D4  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 20D4  
                                           _Init_TIMER2 21A6  
                                           _Init_TIMER5 1FA4  
                                         ___rparam_used 000001  
                                         ?i2_IRQ_TIMER2 0001  
                  __size_of_Check_List_Moteur_Metalhome 0030  
                                     _Capteur_Capot_Off 2414  
                                         __end_of_Cycle 0DD6  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 00F9  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                       ?_Init_Metalhome 0001  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 2394  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 191E  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 2150  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 1F78  
                                __size_ofi1_IRQ_TIMER_0 005E  
                                __size_ofi1_IRQ_TIMER_5 0064  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 1438  
                                   __end_of_Mouvement_X 1258  
                                   __end_of_Mouvement_Z 170E  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F6  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0090  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 2348  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00D6  
                             __end_of_Capteur_Capot_Off 2418  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_of_IRQ_TIMER_0 005E  
                                  __size_of_IRQ_TIMER_5 0064  
                               __size_ofi1_Coupe_Moteur 0016  
                                  __size_ofi2_IRQ_CAPOT 000C  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0089  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                        __size_of_Mouvement_X_Metalhome 0098  
                                 __end_ofi2_Etat_Update 216E  
                                   _Check_List_Moteur_1 1EF2  
                                   _Check_List_Moteur_2 201C  
                         __end_of_Mouvement_X_Metalhome 1850  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0DD6  
                                               _P4_busy 00AA  
                                               _IRQ_PWM 2418  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 23F2  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 0099  
                                               _SPI_ISR 1258  
                              Mouvement_X@type_consigne 0284  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 1D38  
                                 __end_ofi1_Buzzer_Etat 2364  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1B6A  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A0  
                                     delay_s@delay_time 0284  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 2388  
                                    __end_of_TIMER2_Off 23FE  
                                    __end_of_TIMER5_Off 23CC  
                                      _consigne_pwm_max 008B  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 1DF4  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1B0C  
                                         i1_IRQ_TIMER_5 19E8  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00A9  
                                               ___lbdiv 1E28  
                                               ___awmod 1850  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                 __size_of_Coupe_Moteur 0016  
                                       __size_of___wmul 0026  
                          __size_of_EUSART1_RX_T3_LOCAL 07D2  
                                 __end_of_Etat_Intitule 1E90  
                                               ___lwdiv 1CB4  
                                               ___lwmod 1D40  
                                         _type_consigne 008F  
                                               __pcinit 1C6A  
                                               _delay_s 1F20  
                                               __ramtop 0300  
                                               __ptext0 1D7E  
                                               _nb_Pion 009F  
                                               __ptext1 1438  
                                               __ptext2 1FA4  
                                               __ptext3 21A6  
                                               __ptext4 20D4  
                                               __ptext5 208E  
                                               __ptext6 18B8  
                          __end_of_Init_Moteur_Bequille 22CA  
                                               __ptext7 216E  
                                               __ptext8 23B8  
                                               __ptext9 1DF4  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 23DE  
                                           _Mouvement_X 1122  
                                           _Mouvement_Z 1664  
                                     __end_of_hexpowers 3EB7  
                                  _Init_Input_Capture_0 20B2  
                        _Capteur_Capot_Compteur_Temps_S 009B  
                                               _dpowers 3EA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 23F8  
                                               _isdigit 218A  
                                   _EUSART1_IT_ACTIVATE 2364  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1C1A  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0012  
                                          _Consigne_Max 0094  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08AC  
                                        __pintcode_body 1CFE  
                                  end_of_initialization 1CA6  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004D  
                                         __Lmediumconst 3EA4  
                                               int_func 1CFE  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 221C  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 23A0  
                                             i1_IRQ_ADC 0F7C  
                    _Surveillance_Consommation_Moteur_1 0049  
                    _Surveillance_Consommation_Moteur_2 0048  
                                             i1_IRQ_PWM 241C  
                               __size_ofi2_Coupe_Moteur 0016  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 21F0  
                                             _TIMER2_On 23E6  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 009E  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A3  
                                  __end_ofi1_TIMER2_Off 2404  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 23D6  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 240A  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                          ?_Check_List_Moteur_Metalhome 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0018  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 2348  
                                      _nb_100ms_platine 00A1  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 2410  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 0285  
                                   __end_of_delay_100ms 1664  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 0285  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 2042  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008C  
                                         _IRQ_Execution 1BC6  
                                             _Alarme_On 22EA  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0287  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 2232  
                                      ??_Init_Metalhome 000F  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 208E  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1C6A  
                                 __end_of_Stop_Moteur_1 2414  
                                             _Init_Port 18B8  
                              _IRQ_PION_Metal_Disparait 23F2  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                         ??_Check_List_Moteur_Metalhome 0043  
                                       _delay_s_counter 008A  
                             __end_of_Detection_Pion_On 2068  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 1F4C  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 2248  
                                  _Init_Moteur_Bequille 22BA  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 003A  
                                         _delay_n_100ms 2274  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005C  
                                 __end_of_Init_Moteur_1 22BA  
                                 __end_of_Init_Moteur_2 22AA  
                                 __end_of_Init_Variable 14F4  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 0098  
                                _Image_Courant_Moteur_2 0097  
                                         __pcstackBANK0 00EC  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 2288  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 15AE  
                                            ?_Init_Port 0001  
                                          _isdigit$3714 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00DA  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F5  
                                           sprintf@prec 00F2  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0002  
                                           ??_IRQ_CAPOT 0010  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 225E  
                                             __pintcode 0008  
                                         __pmediumconst 3EA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0018  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                             __ptext100 23AC  
                                             __ptext101 2150  
                                              ?___lbdiv 000F  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 00F9  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008D  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A6  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 0284  
                                          ?_Mouvement_Z 0286  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0244  
                                  __size_of_Etat_Update 001E  
                                 _Mouvement_X_Metalhome 17B8  
                                             _hexpowers 3EAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 21D8  
                                      i2_IRQ_I_MOTEUR_2 2248  
                                          i1_TIMER2_Off 23FE  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 23CC  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 2274  
                                              _PIE3bits 000FA3  
                                __size_ofi2_Etat_Update 001E  
                                              i1u451_20 0FA0  
                                              i1u455_20 1026  
                                          i2_IRQ_TIMER2 2404  
                                              i1u459_20 10AA  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 0280  
                                   __end_of_IRQ_TIMER_0 1B0C  
                                   __end_of_IRQ_TIMER_5 19E8  
                                   __end_ofi2_IRQ_CAPOT 23B8  
                                              _SPI_MODE 0278  
                                          i2_TIMER2_Off 240A  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 23DE  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 14F4  
                                         i1_Etat_Update 2132  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0096  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1F20  
                           __end_of_Check_List_Moteur_2 2042  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 1E90  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 20F4  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 208E  
                                              _Init_PWM 216E  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009A  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1AAE  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 1A4C  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 1984  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 191E  
                                   __end_ofi1_Alarme_On 230A  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                        Mouvement_X_Metalhome@direction 0284  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 233A  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                            ??_IRQ_PION_Metal_Disparait 000F  
                                      __size_of_delay_s 002C  
                              __end_of_SPI_Check_Buffer 1F78  
                                    __end_of_u_Init_PWM 1BC6  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F0  
                                            sprintf@val 00F3  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 2150  
                                ?_Mouvement_X_Metalhome 0001  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 1FCC  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 20B2  
                                              __ptext11 20F4  
                                              __ptext20 1EC2  
                                              __ptext12 1C1A  
                                              __ptext21 1122  
                                              __ptext13 2364  
                                              __ptext30 2414  
                                              __ptext22 2370  
                                              __ptext14 0B92  
                                              __ptext31 170E  
                                              __ptext23 2410  
                                              __ptext15 2274  
                                              __ptext40 23D6  
                                              __ptext32 1B6A  
                                              __ptext24 22AA  
                                              __ptext16 1664  
                                              __ptext41 1DBA  
                                              __ptext33 1F20  
                                              __ptext25 1A4C  
                                              __ptext17 229A  
                                              __ptext50 1CB4  
                                              __ptext42 1E28  
                                              __ptext34 237C  
                                              __ptext26 2042  
                                              __ptext18 201C  
                                              __ptext51 1FCC  
                                              __ptext43 1F4C  
                                              __ptext35 23E6  
                                              __ptext27 233A  
                                              __ptext19 17B8  
                                              __ptext60 23EC  
                                              __ptext52 15AE  
                                              __ptext44 1F78  
                                              __ptext36 2388  
                                              __ptext28 1EF2  
                                              __ptext61 2418  
                                              __ptext53 1BC6  
                                              __ptext45 00DA  
                                              __ptext37 22BA  
                                              __ptext29 2288  
                                              __ptext70 2114  
                                              __ptext62 23F2  
                                              __ptext54 1984  
                                              __ptext46 08AC  
                                              __ptext38 21F0  
                                              __ptext71 0DD6  
                                              __ptext63 2394  
                                              __ptext55 23C2  
                                              __ptext47 218A  
                                              __ptext39 191E  
                                              __ptext80 22FA  
                                              __ptext72 1E5C  
                                              __ptext64 2206  
                                              __ptext56 2348  
                                              __ptext48 2068  
                                              __ptext81 2132  
                                              __ptext73 1E90  
                                              __ptext65 21C0  
                                              __ptext57 1AAE  
                                              __ptext49 1D40  
                                              __ptext90 1FF4  
                                              __ptext82 2232  
                                              __ptext74 1850  
                                              __ptext66 22EA  
                                              __ptext58 22CA  
                                              __ptext91 1366  
                                              __ptext83 23FE  
                                              __ptext75 14F4  
                                              __ptext67 221C  
                                              __ptext59 22DA  
                                              __ptext92 23DE  
                                              __ptext84 1B0C  
                                              __ptext68 23F8  
                                              __ptext85 230A  
                                              __ptext77 19E8  
                                              __ptext69 23A0  
                                              __ptext94 2404  
                                              __ptext86 231A  
                                              __ptext78 23CC  
                                              __ptext95 2248  
                                              __ptext87 241C  
                                              __ptext79 2356  
                                              __ptext96 21D8  
                                              __ptext88 0F7C  
                                              __ptext97 232A  
                                              __ptext89 1258  
                                              __ptext98 225E  
                                              __ptext99 240A  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 2370  
                                          _UART_TX_TEXT 00AB  
                                      __size_of_sprintf 02E6  
                                              _consigne 0095  
                                         i1_Buzzer_Etat 2356  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 003C  
                                           _IRQ_TIMER_0 1AAE  
                                           _IRQ_TIMER_5 1984  
                          __size_of_Detection_Pion_Init 000E  
                                           i2_IRQ_CAPOT 23AC  
                              __end_of_Capteur_Capot_On 229A  
                                        _IRQ_I_MOTEUR_1 21C0  
                                        _IRQ_I_MOTEUR_2 2206  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 004B  
                                         _Etat_Intitule 1E5C  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 1366  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00BE  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                                  __size_of_Mouvement_X 0136  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 17B8  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 008E  
                                           i1_Alarme_On 22FA  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F1  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 23A0  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0286  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1B6A  
                                 __end_ofi1_IRQ_TIMER_5 1A4C  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 232A  
                          __end_of_EUSART1_Transmit_ISR 201C  
                                __end_of_IRQ_I_MOTEUR_1 21D8  
                                __end_of_IRQ_I_MOTEUR_2 221C  
                                            _IRQ_TIMER2 23EC  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 00A5  
                              __end_ofi2_IRQ_I_MOTEUR_1 21F0  
                              __end_ofi2_IRQ_I_MOTEUR_2 225E  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 237C  
                                            _TIMER2_Off 23F8  
                                            _TIMER5_Off 23C2  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F8  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                               __size_of_Init_Metalhome 000A  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                   __end_of_Check_List_Moteur_Metalhome 1EF2  
                           _Check_List_Moteur_Metalhome 1EC2  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 0284  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
