

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 18 08:07:58 2018

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   109                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.42
   123                           ; Generated 13/04/2017 GMT
   124                           ; 
   125                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4431 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	mediumconst
   158  003BA4                     __pmediumconst:
   159                           	opt stack 0
   160  003BA4  00                 	db	0
   161  003BA5                     _dpowers:
   162                           	opt stack 0
   163  003BA5  0001               	dw	1
   164  003BA7  000A               	dw	10
   165  003BA9  0064               	dw	100
   166  003BAB  03E8               	dw	1000
   167  003BAD  2710               	dw	10000
   168  003BAF                     __end_of_dpowers:
   169                           	opt stack 0
   170  003BAF                     _hexpowers:
   171                           	opt stack 0
   172  003BAF  0001               	dw	1
   173  003BB1  0010               	dw	16
   174  003BB3  0100               	dw	256
   175  003BB5  1000               	dw	4096
   176  003BB7                     __end_of_hexpowers:
   177                           	opt stack 0
   178  0000                     _PR5L	set	3984
   179  0000                     _PR5H	set	3985
   180  0000                     _TMR5H	set	3976
   181  0000                     _TMR5L	set	3975
   182  0000                     _LATEbits	set	3981
   183  0000                     _SEVTCMPL	set	3953
   184  0000                     _SEVTCMPH	set	3952
   185  0000                     _PWMCON0bits	set	3951
   186  0000                     _PTCON0bits	set	3967
   187  0000                     _PTCON1bits	set	3966
   188  0000                     _OVDCONS	set	3946
   189  0000                     _OVDCOND	set	3947
   190  0000                     _DTCON	set	3949
   191  0000                     _PWMCON1	set	3950
   192  0000                     _PWMCON0	set	3951
   193  0000                     _PTCON1	set	3966
   194  0000                     _PTCON0	set	3967
   195  0000                     _PTPERH	set	3962
   196  0000                     _LATE	set	3981
   197  0000                     _LATD	set	3980
   198  0000                     _LATC	set	3979
   199  0000                     _LATB	set	3978
   200  0000                     _LATA	set	3977
   201  0000                     _TRISEbits	set	3990
   202  0000                     _TRISE	set	3990
   203  0000                     _TRISDbits	set	3989
   204  0000                     _TRISD	set	3989
   205  0000                     _TRISCbits	set	3988
   206  0000                     _TRISC	set	3988
   207  0000                     _TRISBbits	set	3987
   208  0000                     _TRISB	set	3987
   209  0000                     _TRISAbits	set	3986
   210  0000                     _TRISA	set	3986
   211  0000                     _LATCbits	set	3979
   212  0000                     _PDC1H	set	3958
   213  0000                     _PDC1L	set	3959
   214  0000                     _PDC0H	set	3960
   215  0000                     _PDC0L	set	3961
   216  0000                     _PTPERL	set	3963
   217  0000                     _PORTAbits	set	3968
   218  0000                     _PORTCbits	set	3970
   219  0000                     _CAP2CONbits	set	3938
   220  0000                     _CAP1CONbits	set	3939
   221  0000                     _LATAbits	set	3977
   222  0000                     _ADCON3bits	set	3994
   223  0000                     _ADCHS	set	3993
   224  0000                     _ADCON3	set	3994
   225  0000                     _LATC5	set	31837
   226  0000                     _LATD7	set	31847
   227  0000                     _LATD6	set	31846
   228  0000                     _LATD5	set	31845
   229  0000                     _LATD4	set	31844
   230  0000                     _SEVTDIR	set	31603
   231  0000                     _SSPCONbits	set	4038
   232  0000                     _SSPSTATbits	set	4039
   233  0000                     _RCREG1	set	4014
   234  0000                     _SSPBUF	set	4041
   235  0000                     _TXREG1	set	4013
   236  0000                     _TXSTA1	set	4012
   237  0000                     _RCSTA1	set	4011
   238  0000                     _BAUDCON	set	4010
   239  0000                     _RCSTA1bits	set	4011
   240  0000                     _SPBRGH	set	4016
   241  0000                     _SPBRG	set	4015
   242  0000                     _TXSTA1bits	set	4012
   243  0000                     _BAUDCONbits	set	4010
   244  0000                     _T5CONbits	set	4023
   245  0000                     _PR2	set	4043
   246  0000                     _T2CONbits	set	4042
   247  0000                     _T2CON	set	4042
   248  0000                     _TMR2	set	4044
   249  0000                     _RCREG	set	4014
   250  0000                     _PIR1bits	set	3998
   251  0000                     _IPR3bits	set	4005
   252  0000                     _RCONbits	set	4048
   253  0000                     _ADRESH	set	4036
   254  0000                     _IPR1bits	set	3999
   255  0000                     _PIE1bits	set	3997
   256  0000                     _ADCON1bits	set	4033
   257  0000                     _ADCON0bits	set	4034
   258  0000                     _ANSEL1	set	4025
   259  0000                     _ANSEL0	set	4024
   260  0000                     _ADCON2bits	set	4032
   261  0000                     _ADCON2	set	4032
   262  0000                     _ADCON1	set	4033
   263  0000                     _ADCON0	set	4034
   264  0000                     _OSCCON	set	4051
   265  0000                     _PIE3bits	set	4003
   266  0000                     _PIR3bits	set	4004
   267  0000                     _TRMT1	set	32097
   268  0000                     _TMR2IF	set	31985
   269  0000                     _PTIF	set	32036
   270  0000                     _GODONE	set	32273
   271  0000                     _ADIF	set	31990
   272  0000                     _ADON	set	32272
   273  0000                     _IOFS	set	32410
   274  0000                     _TMR0L	set	4054
   275  0000                     _TMR0H	set	4055
   276  0000                     _T0CONbits	set	4053
   277  0000                     _INTCON3bits	set	4080
   278  0000                     _INTCON2bits	set	4081
   279  0000                     _INTCONbits	set	4082
   280  0000                     _GIE	set	32663
   281  0000                     _PEIE	set	32662
   282  0000                     _INT0IF	set	32657
   283  003BB7                     STR_2:
   284  003BB7  63                 	db	99	;'c'
   285  003BB8  6F                 	db	111	;'o'
   286  003BB9  6E                 	db	110	;'n'
   287  003BBA  73                 	db	115	;'s'
   288  003BBB  69                 	db	105	;'i'
   289  003BBC  67                 	db	103	;'g'
   290  003BBD  6E                 	db	110	;'n'
   291  003BBE  65                 	db	101	;'e'
   292  003BBF  3D                 	db	61	;'='
   293  003BC0  25                 	db	37
   294  003BC1  64                 	db	100	;'d'
   295  003BC2  20                 	db	32
   296  003BC3  69                 	db	105	;'i'
   297  003BC4  5F                 	db	95	;'_'
   298  003BC5  31                 	db	49	;'1'
   299  003BC6  3D                 	db	61	;'='
   300  003BC7  25                 	db	37
   301  003BC8  64                 	db	100	;'d'
   302  003BC9  20                 	db	32
   303  003BCA  69                 	db	105	;'i'
   304  003BCB  5F                 	db	95	;'_'
   305  003BCC  32                 	db	50	;'2'
   306  003BCD  3D                 	db	61	;'='
   307  003BCE  25                 	db	37
   308  003BCF  64                 	db	100	;'d'
   309  003BD0  20                 	db	32
   310  003BD1  64                 	db	100	;'d'
   311  003BD2  75                 	db	117	;'u'
   312  003BD3  74                 	db	116	;'t'
   313  003BD4  79                 	db	121	;'y'
   314  003BD5  3D                 	db	61	;'='
   315  003BD6  25                 	db	37
   316  003BD7  64                 	db	100	;'d'
   317  003BD8  20                 	db	32
   318  003BD9  65                 	db	101	;'e'
   319  003BDA  72                 	db	114	;'r'
   320  003BDB  72                 	db	114	;'r'
   321  003BDC  65                 	db	101	;'e'
   322  003BDD  75                 	db	117	;'u'
   323  003BDE  72                 	db	114	;'r'
   324  003BDF  3D                 	db	61	;'='
   325  003BE0  25                 	db	37
   326  003BE1  64                 	db	100	;'d'
   327  003BE2  20                 	db	32
   328  003BE3  50                 	db	80	;'P'
   329  003BE4  61                 	db	97	;'a'
   330  003BE5  74                 	db	116	;'t'
   331  003BE6  69                 	db	105	;'i'
   332  003BE7  6E                 	db	110	;'n'
   333  003BE8  61                 	db	97	;'a'
   334  003BE9  67                 	db	103	;'g'
   335  003BEA  65                 	db	101	;'e'
   336  003BEB  5F                 	db	95	;'_'
   337  003BEC  4E                 	db	78	;'N'
   338  003BED  62                 	db	98	;'b'
   339  003BEE  5F                 	db	95	;'_'
   340  003BEF  45                 	db	69	;'E'
   341  003BF0  73                 	db	115	;'s'
   342  003BF1  73                 	db	115	;'s'
   343  003BF2  61                 	db	97	;'a'
   344  003BF3  69                 	db	105	;'i'
   345  003BF4  3D                 	db	61	;'='
   346  003BF5  25                 	db	37
   347  003BF6  64                 	db	100	;'d'
   348  003BF7  20                 	db	32
   349  003BF8  43                 	db	67	;'C'
   350  003BF9  61                 	db	97	;'a'
   351  003BFA  70                 	db	112	;'p'
   352  003BFB  74                 	db	116	;'t'
   353  003BFC  65                 	db	101	;'e'
   354  003BFD  75                 	db	117	;'u'
   355  003BFE  72                 	db	114	;'r'
   356  003BFF  5F                 	db	95	;'_'
   357  003C00  43                 	db	67	;'C'
   358  003C01  61                 	db	97	;'a'
   359  003C02  70                 	db	112	;'p'
   360  003C03  6F                 	db	111	;'o'
   361  003C04  74                 	db	116	;'t'
   362  003C05  5F                 	db	95	;'_'
   363  003C06  4E                 	db	78	;'N'
   364  003C07  62                 	db	98	;'b'
   365  003C08  5F                 	db	95	;'_'
   366  003C09  45                 	db	69	;'E'
   367  003C0A  76                 	db	118	;'v'
   368  003C0B  65                 	db	101	;'e'
   369  003C0C  6E                 	db	110	;'n'
   370  003C0D  65                 	db	101	;'e'
   371  003C0E  6D                 	db	109	;'m'
   372  003C0F  65                 	db	101	;'e'
   373  003C10  6E                 	db	110	;'n'
   374  003C11  74                 	db	116	;'t'
   375  003C12  3D                 	db	61	;'='
   376  003C13  25                 	db	37
   377  003C14  64                 	db	100	;'d'
   378  003C15  00                 	db	0
   379  003C16                     STR_10:
   380  003C16  25                 	db	37
   381  003C17  30                 	db	48	;'0'
   382  003C18  32                 	db	50	;'2'
   383  003C19  58                 	db	88	;'X'
   384  003C1A  20                 	db	32
   385  003C1B  25                 	db	37
   386  003C1C  30                 	db	48	;'0'
   387  003C1D  32                 	db	50	;'2'
   388  003C1E  58                 	db	88	;'X'
   389  003C1F  20                 	db	32
   390  003C20  25                 	db	37
   391  003C21  30                 	db	48	;'0'
   392  003C22  32                 	db	50	;'2'
   393  003C23  58                 	db	88	;'X'
   394  003C24  20                 	db	32
   395  003C25  25                 	db	37
   396  003C26  30                 	db	48	;'0'
   397  003C27  32                 	db	50	;'2'
   398  003C28  58                 	db	88	;'X'
   399  003C29  20                 	db	32
   400  003C2A  25                 	db	37
   401  003C2B  30                 	db	48	;'0'
   402  003C2C  32                 	db	50	;'2'
   403  003C2D  58                 	db	88	;'X'
   404  003C2E  20                 	db	32
   405  003C2F  25                 	db	37
   406  003C30  30                 	db	48	;'0'
   407  003C31  32                 	db	50	;'2'
   408  003C32  58                 	db	88	;'X'
   409  003C33  20                 	db	32
   410  003C34  25                 	db	37
   411  003C35  30                 	db	48	;'0'
   412  003C36  32                 	db	50	;'2'
   413  003C37  58                 	db	88	;'X'
   414  003C38  20                 	db	32
   415  003C39  25                 	db	37
   416  003C3A  30                 	db	48	;'0'
   417  003C3B  32                 	db	50	;'2'
   418  003C3C  58                 	db	88	;'X'
   419  003C3D  20                 	db	32
   420  003C3E  25                 	db	37
   421  003C3F  30                 	db	48	;'0'
   422  003C40  32                 	db	50	;'2'
   423  003C41  58                 	db	88	;'X'
   424  003C42  20                 	db	32
   425  003C43  25                 	db	37
   426  003C44  30                 	db	48	;'0'
   427  003C45  32                 	db	50	;'2'
   428  003C46  58                 	db	88	;'X'
   429  003C47  20                 	db	32
   430  003C48  25                 	db	37
   431  003C49  30                 	db	48	;'0'
   432  003C4A  32                 	db	50	;'2'
   433  003C4B  58                 	db	88	;'X'
   434  003C4C  20                 	db	32
   435  003C4D  25                 	db	37
   436  003C4E  30                 	db	48	;'0'
   437  003C4F  31                 	db	49	;'1'
   438  003C50  58                 	db	88	;'X'
   439  003C51  20                 	db	32
   440  003C52  25                 	db	37
   441  003C53  30                 	db	48	;'0'
   442  003C54  31                 	db	49	;'1'
   443  003C55  58                 	db	88	;'X'
   444  003C56  20                 	db	32
   445  003C57  25                 	db	37
   446  003C58  30                 	db	48	;'0'
   447  003C59  31                 	db	49	;'1'
   448  003C5A  58                 	db	88	;'X'
   449  003C5B  20                 	db	32
   450  003C5C  25                 	db	37
   451  003C5D  30                 	db	48	;'0'
   452  003C5E  32                 	db	50	;'2'
   453  003C5F  58                 	db	88	;'X'
   454  003C60  25                 	db	37
   455  003C61  30                 	db	48	;'0'
   456  003C62  32                 	db	50	;'2'
   457  003C63  58                 	db	88	;'X'
   458  003C64  20                 	db	32
   459  003C65  25                 	db	37
   460  003C66  30                 	db	48	;'0'
   461  003C67  32                 	db	50	;'2'
   462  003C68  58                 	db	88	;'X'
   463  003C69  00                 	db	0
   464  003C6A                     STR_7:
   465  003C6A  63                 	db	99	;'c'
   466  003C6B  6F                 	db	111	;'o'
   467  003C6C  6E                 	db	110	;'n'
   468  003C6D  73                 	db	115	;'s'
   469  003C6E  69                 	db	105	;'i'
   470  003C6F  67                 	db	103	;'g'
   471  003C70  6E                 	db	110	;'n'
   472  003C71  65                 	db	101	;'e'
   473  003C72  3D                 	db	61	;'='
   474  003C73  25                 	db	37
   475  003C74  64                 	db	100	;'d'
   476  003C75  20                 	db	32
   477  003C76  70                 	db	112	;'p'
   478  003C77  61                 	db	97	;'a'
   479  003C78  74                 	db	116	;'t'
   480  003C79  69                 	db	105	;'i'
   481  003C7A  6E                 	db	110	;'n'
   482  003C7B  3D                 	db	61	;'='
   483  003C7C  25                 	db	37
   484  003C7D  64                 	db	100	;'d'
   485  003C7E  20                 	db	32
   486  003C7F  70                 	db	112	;'p'
   487  003C80  69                 	db	105	;'i'
   488  003C81  6F                 	db	111	;'o'
   489  003C82  6E                 	db	110	;'n'
   490  003C83  3D                 	db	61	;'='
   491  003C84  25                 	db	37
   492  003C85  64                 	db	100	;'d'
   493  003C86  20                 	db	32
   494  003C87  70                 	db	112	;'p'
   495  003C88  6C                 	db	108	;'l'
   496  003C89  61                 	db	97	;'a'
   497  003C8A  74                 	db	116	;'t'
   498  003C8B  69                 	db	105	;'i'
   499  003C8C  6E                 	db	110	;'n'
   500  003C8D  65                 	db	101	;'e'
   501  003C8E  3D                 	db	61	;'='
   502  003C8F  25                 	db	37
   503  003C90  64                 	db	100	;'d'
   504  003C91  20                 	db	32
   505  003C92  70                 	db	112	;'p'
   506  003C93  65                 	db	101	;'e'
   507  003C94  6C                 	db	108	;'l'
   508  003C95  6C                 	db	108	;'l'
   509  003C96  65                 	db	101	;'e'
   510  003C97  3D                 	db	61	;'='
   511  003C98  25                 	db	37
   512  003C99  64                 	db	100	;'d'
   513  003C9A  00                 	db	0
   514  003C9B                     STR_4:
   515  003C9B  6E                 	db	110	;'n'
   516  003C9C  62                 	db	98	;'b'
   517  003C9D  5F                 	db	95	;'_'
   518  003C9E  73                 	db	115	;'s'
   519  003C9F  3D                 	db	61	;'='
   520  003CA0  25                 	db	37
   521  003CA1  64                 	db	100	;'d'
   522  003CA2  20                 	db	32
   523  003CA3  6E                 	db	110	;'n'
   524  003CA4  62                 	db	98	;'b'
   525  003CA5  5F                 	db	95	;'_'
   526  003CA6  50                 	db	80	;'P'
   527  003CA7  69                 	db	105	;'i'
   528  003CA8  6F                 	db	111	;'o'
   529  003CA9  6E                 	db	110	;'n'
   530  003CAA  3D                 	db	61	;'='
   531  003CAB  25                 	db	37
   532  003CAC  64                 	db	100	;'d'
   533  003CAD  20                 	db	32
   534  003CAE  6E                 	db	110	;'n'
   535  003CAF  62                 	db	98	;'b'
   536  003CB0  5F                 	db	95	;'_'
   537  003CB1  54                 	db	84	;'T'
   538  003CB2  69                 	db	105	;'i'
   539  003CB3  6D                 	db	109	;'m'
   540  003CB4  65                 	db	101	;'e'
   541  003CB5  72                 	db	114	;'r'
   542  003CB6  5F                 	db	95	;'_'
   543  003CB7  35                 	db	53	;'5'
   544  003CB8  3D                 	db	61	;'='
   545  003CB9  25                 	db	37
   546  003CBA  64                 	db	100	;'d'
   547  003CBB  00                 	db	0
   548  003CBC                     STR_8:
   549  003CBC  45                 	db	69	;'E'
   550  003CBD  74                 	db	116	;'t'
   551  003CBE  61                 	db	97	;'a'
   552  003CBF  74                 	db	116	;'t'
   553  003CC0  3D                 	db	61	;'='
   554  003CC1  25                 	db	37
   555  003CC2  64                 	db	100	;'d'
   556  003CC3  20                 	db	32
   557  003CC4  6E                 	db	110	;'n'
   558  003CC5  62                 	db	98	;'b'
   559  003CC6  5F                 	db	95	;'_'
   560  003CC7  73                 	db	115	;'s'
   561  003CC8  5F                 	db	95	;'_'
   562  003CC9  66                 	db	102	;'f'
   563  003CCA  6F                 	db	111	;'o'
   564  003CCB  6E                 	db	110	;'n'
   565  003CCC  63                 	db	99	;'c'
   566  003CCD  74                 	db	116	;'t'
   567  003CCE  69                 	db	105	;'i'
   568  003CCF  6F                 	db	111	;'o'
   569  003CD0  6E                 	db	110	;'n'
   570  003CD1  6E                 	db	110	;'n'
   571  003CD2  65                 	db	101	;'e'
   572  003CD3  6D                 	db	109	;'m'
   573  003CD4  65                 	db	101	;'e'
   574  003CD5  6E                 	db	110	;'n'
   575  003CD6  74                 	db	116	;'t'
   576  003CD7  3D                 	db	61	;'='
   577  003CD8  25                 	db	37
   578  003CD9  64                 	db	100	;'d'
   579  003CDA  00                 	db	0
   580  003CDB                     STR_11:
   581  003CDB  30                 	db	48	;'0'
   582  003CDC  31                 	db	49	;'1'
   583  003CDD  32                 	db	50	;'2'
   584  003CDE  33                 	db	51	;'3'
   585  003CDF  34                 	db	52	;'4'
   586  003CE0  35                 	db	53	;'5'
   587  003CE1  36                 	db	54	;'6'
   588  003CE2  37                 	db	55	;'7'
   589  003CE3  38                 	db	56	;'8'
   590  003CE4  39                 	db	57	;'9'
   591  003CE5  41                 	db	65	;'A'
   592  003CE6  42                 	db	66	;'B'
   593  003CE7  43                 	db	67	;'C'
   594  003CE8  44                 	db	68	;'D'
   595  003CE9  45                 	db	69	;'E'
   596  003CEA  46                 	db	70	;'F'
   597  003CEB  00                 	db	0
   598  003CEC                     STR_3:
   599  003CEC  25                 	db	37
   600  003CED  30                 	db	48	;'0'
   601  003CEE  32                 	db	50	;'2'
   602  003CEF  58                 	db	88	;'X'
   603  003CF0  25                 	db	37
   604  003CF1  30                 	db	48	;'0'
   605  003CF2  32                 	db	50	;'2'
   606  003CF3  58                 	db	88	;'X'
   607  003CF4  25                 	db	37
   608  003CF5  30                 	db	48	;'0'
   609  003CF6  32                 	db	50	;'2'
   610  003CF7  58                 	db	88	;'X'
   611  003CF8  00                 	db	0
   612  003CF9                     STR_5:
   613  003CF9  25                 	db	37
   614  003CFA  30                 	db	48	;'0'
   615  003CFB  31                 	db	49	;'1'
   616  003CFC  58                 	db	88	;'X'
   617  003CFD  00                 	db	0
   618  0000                     
   619                           ; #config settings
   620  003CFE  00                 	db	0	; dummy byte at the end
   621  0000                     
   622                           	psect	cinit
   623  001C6E                     __pcinit:
   624                           	opt stack 0
   625  001C6E                     start_initialization:
   626                           	opt stack 0
   627  001C6E                     __initialization:
   628                           	opt stack 0
   629                           
   630                           ; Clear objects allocated to BANK1 (256 bytes)
   631  001C6E  EE01  F000         	lfsr	0,__pbssBANK1
   632  001C72  EE11 F000          	lfsr	1,256
   633  001C76                     clear_0:
   634  001C76  6AEE               	clrf	postinc0,c
   635  001C78  50E5               	movf	postdec1,w,c
   636  001C7A  50E1               	movf	fsr1l,w,c
   637  001C7C  E1FC               	bnz	clear_0
   638  001C7E  50E2               	movf	fsr1h,w,c
   639  001C80  E1FA               	bnz	clear_0
   640                           
   641                           ; Clear objects allocated to BANK2 (128 bytes)
   642  001C82  EE02  F000         	lfsr	0,__pbssBANK2
   643  001C86  0E80               	movlw	128
   644  001C88                     clear_1:
   645  001C88  6AEE               	clrf	postinc0,c
   646  001C8A  06E8               	decf	wreg,f,c
   647  001C8C  E1FD               	bnz	clear_1
   648                           
   649                           ; Clear objects allocated to BANK0 (140 bytes)
   650  001C8E  EE00  F060         	lfsr	0,__pbssBANK0
   651  001C92  0E8C               	movlw	140
   652  001C94                     clear_2:
   653  001C94  6AEE               	clrf	postinc0,c
   654  001C96  06E8               	decf	wreg,f,c
   655  001C98  E1FD               	bnz	clear_2
   656                           
   657                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   658  001C9A  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   659  001C9C  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   660                           
   661                           ; Clear objects allocated to COMRAM (12 bytes)
   662  001C9E  EE00  F043         	lfsr	0,__pbssCOMRAM
   663  001CA2  0E0C               	movlw	12
   664  001CA4                     clear_3:
   665  001CA4  6AEE               	clrf	postinc0,c
   666  001CA6  06E8               	decf	wreg,f,c
   667  001CA8  E1FD               	bnz	clear_3
   668  001CAA                     end_of_initialization:
   669                           	opt stack 0
   670  001CAA                     __end_of__initialization:
   671                           	opt stack 0
   672  001CAA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   673  001CAC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   674  001CAE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   675  001CB0  6EF8               	movwf	tblptru,c
   676  001CB2  0100               	movlb	0
   677  001CB4  EFC1  F00E         	goto	_main	;jump to C main() function
   678                           tblptru	equ	0xFF8
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postdec1	equ	0xFE5
   682                           fsr1h	equ	0xFE2
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	bitbssCOMRAM
   686  000278                     __pbitbssCOMRAM:
   687                           	opt stack 0
   688  000278                     _SPI_MODE:
   689                           	opt stack 0
   690  000278                     	ds	1
   691  000279                     _UART_TEST:
   692                           	opt stack 0
   693  000279                     	ds	1
   694  00027A                     _SPI_full:
   695                           	opt stack 0
   696  00027A                     	ds	1
   697  00027B                     _RX1_full:
   698                           	opt stack 0
   699  00027B                     	ds	1
   700  00027C                     _RX1_ABR:
   701                           	opt stack 0
   702  00027C                     	ds	1
   703  00027D                     _Option_Pailleux:
   704                           	opt stack 0
   705  00027D                     	ds	1
   706  00027E                     _Option_Multitas:
   707                           	opt stack 0
   708  00027E                     	ds	1
   709  00027F                     _Nouvelle_Valeur_ADC:
   710                           	opt stack 0
   711  00027F                     	ds	1
   712  000280                     _Detecteur_Pion:
   713                           	opt stack 0
   714  000280                     	ds	1
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1h	equ	0xFE2
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	bssCOMRAM
   723  000043                     __pbssCOMRAM:
   724                           	opt stack 0
   725  000043                     _spiRxIndex:
   726                           	opt stack 0
   727  000043                     	ds	1
   728  000044                     _spiTxIndex:
   729                           	opt stack 0
   730  000044                     	ds	1
   731  000045                     _eusart1RxIndex:
   732                           	opt stack 0
   733  000045                     	ds	1
   734  000046                     _eusart1TxIndex:
   735                           	opt stack 0
   736  000046                     	ds	1
   737  000047                     _Compteur_IRQ_I_Moteur_2:
   738                           	opt stack 0
   739  000047                     	ds	1
   740  000048                     _Surveillance_Consommation_Moteur_2:
   741                           	opt stack 0
   742  000048                     	ds	1
   743  000049                     _Surveillance_Consommation_Moteur_1:
   744                           	opt stack 0
   745  000049                     	ds	1
   746  00004A                     _Bequille_I_Max:
   747                           	opt stack 0
   748  00004A                     	ds	1
   749  00004B                     _Consigne_en_A:
   750                           	opt stack 0
   751  00004B                     	ds	1
   752  00004C                     _nb_s_bequille:
   753                           	opt stack 0
   754  00004C                     	ds	1
   755  00004D                     _Etat_Precedent_Index:
   756                           	opt stack 0
   757  00004D                     	ds	1
   758  00004E                     _Mouvement_Startup:
   759                           	opt stack 0
   760  00004E                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1h	equ	0xFE2
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssBANK0
   769  000060                     __pbssBANK0:
   770                           	opt stack 0
   771  000060                     _eusart1TxBuffer_Test:
   772                           	opt stack 0
   773  000060                     	ds	10
   774  00006A                     _Etat_Log:
   775                           	opt stack 0
   776  00006A                     	ds	10
   777  000074                     _DVT_Tableau_Pause:
   778                           	opt stack 0
   779  000074                     	ds	6
   780  00007A                     lecture_I_Mot2@Resul:
   781                           	opt stack 0
   782  00007A                     	ds	2
   783  00007C                     lecture_I_Mot1@Resul:
   784                           	opt stack 0
   785  00007C                     	ds	2
   786  00007E                     _erreur_accumulator_max:
   787                           	opt stack 0
   788  00007E                     	ds	2
   789  000080                     _PID_out:
   790                           	opt stack 0
   791  000080                     	ds	2
   792  000082                     _erreur_accumulator:
   793                           	opt stack 0
   794  000082                     	ds	2
   795  000084                     _erreur:
   796                           	opt stack 0
   797  000084                     	ds	2
   798  000086                     _duty:
   799                           	opt stack 0
   800  000086                     	ds	2
   801  000088                     _TIMER0_Etat:
   802                           	opt stack 0
   803  000088                     	ds	1
   804  000089                     _Compteur_IRQ_I_Moteur_1:
   805                           	opt stack 0
   806  000089                     	ds	1
   807  00008A                     _delay_s_counter:
   808                           	opt stack 0
   809  00008A                     	ds	1
   810  00008B                     _consigne_pwm_max:
   811                           	opt stack 0
   812  00008B                     	ds	1
   813  00008C                     _consigne_pwm:
   814                           	opt stack 0
   815  00008C                     	ds	1
   816  00008D                     _direction:
   817                           	opt stack 0
   818  00008D                     	ds	1
   819  00008E                     _mouvement_option:
   820                           	opt stack 0
   821  00008E                     	ds	1
   822  00008F                     _type_consigne:
   823                           	opt stack 0
   824  00008F                     	ds	1
   825  000090                     _Pelle_I_Max:
   826                           	opt stack 0
   827  000090                     	ds	1
   828  000091                     _Consigne_Max_Moteur_Bequille:
   829                           	opt stack 0
   830  000091                     	ds	1
   831  000092                     _Consigne_Max_Moteur_Z:
   832                           	opt stack 0
   833  000092                     	ds	1
   834  000093                     _Consigne_Max_Moteur_X:
   835                           	opt stack 0
   836  000093                     	ds	1
   837  000094                     _Consigne_Max:
   838                           	opt stack 0
   839  000094                     	ds	1
   840  000095                     _consigne:
   841                           	opt stack 0
   842  000095                     	ds	1
   843  000096                     _moteur_indice:
   844                           	opt stack 0
   845  000096                     	ds	1
   846  000097                     _Image_Courant_Moteur_2:
   847                           	opt stack 0
   848  000097                     	ds	1
   849  000098                     _Image_Courant_Moteur_1:
   850                           	opt stack 0
   851  000098                     	ds	1
   852  000099                     _Patinage_Nb_Essai_Autoriser:
   853                           	opt stack 0
   854  000099                     	ds	1
   855  00009A                     _Patinage_Nb_Essai:
   856                           	opt stack 0
   857  00009A                     	ds	1
   858  00009B                     _Capteur_Capot_Compteur_Temps_S:
   859                           	opt stack 0
   860  00009B                     	ds	1
   861  00009C                     _Capteur_Capot_Nb_Evenement_Autoriser:
   862                           	opt stack 0
   863  00009C                     	ds	1
   864  00009D                     _Capteur_Capot_Nb_Evenement:
   865                           	opt stack 0
   866  00009D                     	ds	1
   867  00009E                     _nb_Pion_Objectif:
   868                           	opt stack 0
   869  00009E                     	ds	1
   870  00009F                     _nb_Pion:
   871                           	opt stack 0
   872  00009F                     	ds	1
   873  0000A0                     _nb_s_pelle:
   874                           	opt stack 0
   875  0000A0                     	ds	1
   876  0000A1                     _nb_100ms_platine:
   877                           	opt stack 0
   878  0000A1                     	ds	1
   879  0000A2                     _nb_100ms_pion:
   880                           	opt stack 0
   881  0000A2                     	ds	1
   882  0000A3                     _nb_100ms_Timer_5:
   883                           	opt stack 0
   884  0000A3                     	ds	1
   885  0000A4                     _nb_s_patinage:
   886                           	opt stack 0
   887  0000A4                     	ds	1
   888  0000A5                     _nb_s_fonctionnement:
   889                           	opt stack 0
   890  0000A5                     	ds	1
   891  0000A6                     _nb_s_fonctionnement_souhaiter:
   892                           	opt stack 0
   893  0000A6                     	ds	1
   894  0000A7                     _Alarme:
   895                           	opt stack 0
   896  0000A7                     	ds	1
   897  0000A8                     _Etat:
   898                           	opt stack 0
   899  0000A8                     	ds	1
   900  0000A9                     _Version:
   901                           	opt stack 0
   902  0000A9                     	ds	1
   903  0000AA                     _P4_busy:
   904                           	opt stack 0
   905  0000AA                     	ds	1
   906  0000AB                     _UART_TX_TEXT:
   907                           	opt stack 0
   908  0000AB                     	ds	64
   909  0000EB                     _nb_100ms_platine_backup:
   910                           	opt stack 0
   911  0000EB                     	ds	1
   912                           tblptru	equ	0xFF8
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK1
   920  000100                     __pbssBANK1:
   921                           	opt stack 0
   922  000100                     _SPI_RX_TEXT:
   923                           	opt stack 0
   924  000100                     	ds	64
   925  000140                     _spiTxBuffer:
   926                           	opt stack 0
   927  000140                     	ds	64
   928  000180                     _eusart1TxBuffer:
   929                           	opt stack 0
   930  000180                     	ds	64
   931  0001C0                     _UART_RX_TEXT:
   932                           	opt stack 0
   933  0001C0                     	ds	64
   934                           tblptru	equ	0xFF8
   935                           postinc0	equ	0xFEE
   936                           wreg	equ	0xFE8
   937                           postdec1	equ	0xFE5
   938                           fsr1h	equ	0xFE2
   939                           fsr1l	equ	0xFE1
   940                           
   941                           	psect	bssBANK2
   942  000200                     __pbssBANK2:
   943                           	opt stack 0
   944  000200                     _spiRxBuffer:
   945                           	opt stack 0
   946  000200                     	ds	64
   947  000240                     _eusart1RxBuffer:
   948                           	opt stack 0
   949  000240                     	ds	64
   950                           tblptru	equ	0xFF8
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1h	equ	0xFE2
   955                           fsr1l	equ	0xFE1
   956                           
   957                           	psect	cstackBANK2
   958  000280                     __pcstackBANK2:
   959                           	opt stack 0
   960  000280                     ??_EUSART1_RX_T3_LOCAL:
   961                           
   962                           ; 1 bytes @ 0x0
   963  000280                     	ds	4
   964  000284                     ??_Check_List_Moteur_Bequille:
   965  000284                     Mouvement_X@type_consigne:
   966                           	opt stack 0
   967  000284                     Mouvement_X_Metalhome@direction:
   968                           	opt stack 0
   969  000284                     delay_s@delay_time:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x4
   973  000284                     	ds	1
   974  000285                     Mouvement_X@option:
   975                           	opt stack 0
   976  000285                     delay_s@Timer_0_Etat_Prealable:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x5
   980  000285                     	ds	1
   981  000286                     Mouvement_Bequille@type_consigne:
   982                           	opt stack 0
   983  000286                     Mouvement_Z@type_consigne:
   984                           	opt stack 0
   985  000286                     Mouvement_X@direction:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x6
   989  000286                     	ds	1
   990  000287                     Mouvement_Bequille@option:
   991                           	opt stack 0
   992  000287                     Mouvement_Z@option:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x7
   996  000287                     	ds	1
   997  000288                     Mouvement_Bequille@direction:
   998                           	opt stack 0
   999  000288                     Mouvement_Z@direction:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x8
  1003  000288                     	ds	1
  1004  000289                     Cycle@i:
  1005                           	opt stack 0
  1006                           
  1007                           ; 1 bytes @ 0x9
  1008  000289                     	ds	1
  1009                           tblptru	equ	0xFF8
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1h	equ	0xFE2
  1014                           fsr1l	equ	0xFE1
  1015                           
  1016                           	psect	cstackBANK0
  1017  0000EC                     __pcstackBANK0:
  1018                           	opt stack 0
  1019  0000EC                     ??_sprintf:
  1020                           
  1021                           ; 1 bytes @ 0x0
  1022  0000EC                     	ds	4
  1023  0000F0                     sprintf@idx:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x4
  1027  0000F0                     	ds	1
  1028  0000F1                     sprintf@ap:
  1029                           	opt stack 0
  1030                           
  1031                           ; 1 bytes @ 0x5
  1032  0000F1                     	ds	1
  1033  0000F2                     sprintf@prec:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x6
  1037  0000F2                     	ds	1
  1038  0000F3                     sprintf@val:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x7
  1042  0000F3                     	ds	2
  1043  0000F5                     sprintf@flag:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x9
  1047  0000F5                     	ds	1
  1048  0000F6                     sprintf@width:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0xA
  1052  0000F6                     	ds	2
  1053  0000F8                     sprintf@c:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0xC
  1057  0000F8                     	ds	1
  1058  0000F9                     EUSART1_RX_T3_LOCAL@Da:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0xD
  1062  0000F9                     	ds	1
  1063  0000FA                     EUSART1_RX_T3_LOCAL@A:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0xE
  1067  0000FA                     	ds	1
  1068  0000FB                     EUSART1_RX_T3_LOCAL@B:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0xF
  1072  0000FB                     	ds	1
  1073  0000FC                     EUSART1_RX_T3_LOCAL@C:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x10
  1077  0000FC                     	ds	1
  1078  0000FD                     EUSART1_RX_T3_LOCAL@D:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x11
  1082  0000FD                     	ds	1
  1083  0000FE                     EUSART1_RX_T3_LOCAL@E:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x12
  1087  0000FE                     	ds	1
  1088  0000FF                     EUSART1_RX_T3_LOCAL@F:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x13
  1092  0000FF                     	ds	1
  1093                           tblptru	equ	0xFF8
  1094                           postinc0	equ	0xFEE
  1095                           wreg	equ	0xFE8
  1096                           postdec1	equ	0xFE5
  1097                           fsr1h	equ	0xFE2
  1098                           fsr1l	equ	0xFE1
  1099                           
  1100                           	psect	cstackCOMRAM
  1101  000001                     __pcstackCOMRAM:
  1102                           	opt stack 0
  1103  000001                     i2Etat_Update@etat_new_value:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x0
  1107  000001                     	ds	1
  1108  000002                     i2Alarme_On@alarme_new_value:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x1
  1112  000002                     	ds	1
  1113  000003                     ??_HIGH_PRIORITY_IRQ:
  1114  000003                     
  1115                           ; 1 bytes @ 0x2
  1116  000003                     	ds	2
  1117  000005                     ??_SPI_ISR:
  1118  000005                     ??_EUSART1_Receive_ISR:
  1119  000005                     ??i1_IRQ_ADC:
  1120  000005                     i1Buzzer_Etat@Activation:
  1121                           	opt stack 0
  1122  000005                     i1Etat_Update@etat_new_value:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x4
  1126  000005                     	ds	1
  1127  000006                     i1Alarme_On@alarme_new_value:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x5
  1131  000006                     	ds	1
  1132  000007                     EUSART1_Receive_ISR@i:
  1133                           	opt stack 0
  1134  000007                     SPI_ISR@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x6
  1138  000007                     	ds	1
  1139  000008                     ??_LOW_PRIORITY_IRQ:
  1140                           
  1141                           ; 1 bytes @ 0x7
  1142  000008                     	ds	7
  1143  00000F                     ??_IRQ_ADC:
  1144  00000F                     ??_delay_100ms:
  1145  00000F                     ??_isdigit:
  1146  00000F                     ?___wmul:
  1147                           	opt stack 0
  1148  00000F                     ?___awmod:
  1149                           	opt stack 0
  1150  00000F                     ?___lwdiv:
  1151                           	opt stack 0
  1152  00000F                     Init_Variable@i:
  1153                           	opt stack 0
  1154  00000F                     Buzzer_Etat@Activation:
  1155                           	opt stack 0
  1156  00000F                     Etat_Intitule@Etat_Number:
  1157                           	opt stack 0
  1158  00000F                     Etat_Update@etat_new_value:
  1159                           	opt stack 0
  1160  00000F                     EUSART1_Buffer_Send@text:
  1161                           	opt stack 0
  1162  00000F                     ___lbdiv@divisor:
  1163                           	opt stack 0
  1164  00000F                     ___wmul@multiplier:
  1165                           	opt stack 0
  1166  00000F                     ___awmod@dividend:
  1167                           	opt stack 0
  1168  00000F                     ___lwdiv@dividend:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0xE
  1172  00000F                     	ds	1
  1173  000010                     delay_n_100ms@nb_100ms:
  1174                           	opt stack 0
  1175  000010                     Alarme_On@alarme_new_value:
  1176                           	opt stack 0
  1177  000010                     _isdigit$3714:
  1178                           	opt stack 0
  1179  000010                     ___lbdiv@dividend:
  1180                           	opt stack 0
  1181  000010                     EUSART1_Buffer_Send@i:
  1182                           	opt stack 0
  1183                           
  1184                           ; 2 bytes @ 0xF
  1185  000010                     	ds	1
  1186  000011                     delay_n_100ms@i:
  1187                           	opt stack 0
  1188  000011                     isdigit@c:
  1189                           	opt stack 0
  1190  000011                     ___lbdiv@counter:
  1191                           	opt stack 0
  1192  000011                     ___wmul@multiplicand:
  1193                           	opt stack 0
  1194  000011                     ___awmod@divisor:
  1195                           	opt stack 0
  1196  000011                     ___lwdiv@divisor:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x10
  1200  000011                     	ds	1
  1201  000012                     IRQ_Execution@IRQ_Indice:
  1202                           	opt stack 0
  1203  000012                     ___lbdiv@quotient:
  1204                           	opt stack 0
  1205                           
  1206                           ; 1 bytes @ 0x11
  1207  000012                     	ds	1
  1208  000013                     ___awmod@counter:
  1209                           	opt stack 0
  1210  000013                     ___lwdiv@counter:
  1211                           	opt stack 0
  1212  000013                     ___wmul@product:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x12
  1216  000013                     	ds	1
  1217  000014                     ___awmod@sign:
  1218                           	opt stack 0
  1219  000014                     ___lwdiv@quotient:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x13
  1223  000014                     	ds	1
  1224  000015                     ??_Etat_Get:
  1225                           
  1226                           ; 1 bytes @ 0x14
  1227  000015                     	ds	1
  1228  000016                     ?___lwmod:
  1229                           	opt stack 0
  1230  000016                     ___lwmod@dividend:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x15
  1234  000016                     	ds	1
  1235  000017                     Etat_Get@Etat_Indice:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x16
  1239  000017                     	ds	1
  1240  000018                     ___lwmod@divisor:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x17
  1244  000018                     	ds	2
  1245  00001A                     ___lwmod@counter:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x19
  1249  00001A                     	ds	1
  1250  00001B                     ?_sprintf:
  1251                           	opt stack 0
  1252  00001B                     sprintf@sp:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x1A
  1256  00001B                     	ds	1
  1257  00001C                     sprintf@f:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x1B
  1261  00001C                     	ds	36
  1262  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x3F
  1266  000040                     	ds	1
  1267  000041                     EUSART1_RX_T3_LOCAL@i:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x40
  1271  000041                     	ds	2
  1272  000043                     tblptru	equ	0xFF8
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           postdec1	equ	0xFE5
  1276                           fsr1h	equ	0xFE2
  1277                           fsr1l	equ	0xFE1
  1278                           
  1279                           ; 1 bytes @ 0x42
  1280 ;;
  1281 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1282 ;;
  1283 ;; *************** function _main *****************
  1284 ;; Defined at:
  1285 ;;		line 595 in file "MOTEUR.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 3F/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1299 ;;      Params:         0       0       0       0
  1300 ;;      Locals:         0       0       0       0
  1301 ;;      Temps:          0       0       0       0
  1302 ;;      Totals:         0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels required when called:   20
  1305 ;; This function calls:
  1306 ;;		_Cycle
  1307 ;;		_EUSART1_Initialize
  1308 ;;		_Init_ADC
  1309 ;;		_Init_IT
  1310 ;;		_Init_Metalhome
  1311 ;;		_Init_PWM
  1312 ;;		_Init_Port
  1313 ;;		_Init_SPI
  1314 ;;		_Init_TIMER0
  1315 ;;		_Init_TIMER2
  1316 ;;		_Init_TIMER5
  1317 ;;		_Init_Variable
  1318 ;; This function is called by:
  1319 ;;		Startup code after reset
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text0
  1324  001D82                     __ptext0:
  1325                           	opt stack 0
  1326  001D82                     _main:
  1327                           	opt stack 11
  1328                           
  1329                           ;MOTEUR.c: 597: OSCCON = 0b01110000;
  1330                           
  1331                           ;incstack = 0
  1332  001D82  0E70               	movlw	112
  1333  001D84  6ED3               	movwf	4051,c	;volatile
  1334  001D86                     l286:
  1335  001D86  A4D3               	btfss	4051,2,c	;volatile
  1336  001D88  D7FE               	goto	l286
  1337                           
  1338                           ;MOTEUR.c: 608: Init_Variable();
  1339  001D8A  EC1C  F00A         	call	_Init_Variable	;wreg free
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;MOTEUR.c: 612: Init_Port();
  1343  001D8E  EC5E  F00C         	call	_Init_Port	;wreg free
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;MOTEUR.c: 647: Init_IT();
  1347  001D92  ECFC  F00E         	call	_Init_IT	;wreg free
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;MOTEUR.c: 666: EUSART1_Initialize();
  1351  001D96  EC0F  F00E         	call	_EUSART1_Initialize	;wreg free
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;MOTEUR.c: 667: Init_SPI();
  1355  001D9A  EC49  F010         	call	_Init_SPI	;wreg free
  1356                           
  1357                           ;MOTEUR.c: 671: Init_ADC();
  1358  001D9E  EC7C  F010         	call	_Init_ADC	;wreg free
  1359                           
  1360                           ;MOTEUR.c: 673: Init_TIMER0();
  1361  001DA2  EC6C  F010         	call	_Init_TIMER0	;wreg free
  1362                           
  1363                           ;MOTEUR.c: 674: Init_TIMER2();
  1364  001DA6  ECD5  F010         	call	_Init_TIMER2	;wreg free
  1365                           
  1366                           ;MOTEUR.c: 675: Init_TIMER5();
  1367  001DAA  ECD4  F00F         	call	_Init_TIMER5	;wreg free
  1368                           
  1369                           ;MOTEUR.c: 678: Init_PWM();
  1370  001DAE  ECB9  F010         	call	_Init_PWM	;wreg free
  1371                           
  1372                           ;MOTEUR.c: 739: Init_Metalhome();
  1373  001DB2  ECDE  F011         	call	_Init_Metalhome	;wreg free
  1374                           
  1375                           ;MOTEUR.c: 740: Cycle();
  1376  001DB6  ECC9  F005         	call	_Cycle	;wreg free
  1377                           
  1378                           ; BSR set to: 0
  1379  001DBA  EF6B  F000         	goto	start
  1380  001DBE                     __end_of_main:
  1381                           	opt stack 0
  1382                           tblptru	equ	0xFF8
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           
  1389 ;; *************** function _Init_Variable *****************
  1390 ;; Defined at:
  1391 ;;		line 143 in file "MOTEUR.c"
  1392 ;; Parameters:    Size  Location     Type
  1393 ;;		None
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  i               1   14[COMRAM] unsigned char 
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1400 ;; Tracked objects:
  1401 ;;		On entry : 0/0
  1402 ;;		On exit  : 3F/0
  1403 ;;		Unchanged: 0/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1405 ;;      Params:         0       0       0       0
  1406 ;;      Locals:         1       0       0       0
  1407 ;;      Temps:          0       0       0       0
  1408 ;;      Totals:         1       0       0       0
  1409 ;;Total ram usage:        1 bytes
  1410 ;; Hardware stack levels used:    1
  1411 ;; Hardware stack levels required when called:   11
  1412 ;; This function calls:
  1413 ;;		_Detection_Pion_Init
  1414 ;; This function is called by:
  1415 ;;		_main
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text1
  1420  001438                     __ptext1:
  1421                           	opt stack 0
  1422  001438                     _Init_Variable:
  1423                           	opt stack 19
  1424                           
  1425                           ;MOTEUR.c: 175: Batterie_mV = 0;
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;incstack = 0
  1429  001438  0E0A               	movlw	10
  1430  00143A  0100               	movlb	0	; () banked
  1431  00143C  6FA9               	movwf	_Version& (0+255),b
  1432                           
  1433                           ; BSR set to: 0
  1434                           ;MOTEUR.c: 178: unsigned char i;
  1435                           ;MOTEUR.c: 180: for (i = 0; i < 10; i++) {
  1436  00143E  6A0F               	clrf	Init_Variable@i,c
  1437  001440                     l8452:
  1438                           
  1439                           ;MOTEUR.c: 181: Etat_Log[i] = 255;
  1440  001440  500F               	movf	Init_Variable@i,w,c
  1441  001442  0F6A               	addlw	low _Etat_Log
  1442  001444  6ED9               	movwf	fsr2l,c
  1443  001446  6ADA               	clrf	fsr2h,c
  1444  001448  68DF               	setf	indf2,c
  1445  00144A  2A0F               	incf	Init_Variable@i,f,c
  1446  00144C  0E09               	movlw	9
  1447  00144E  640F               	cpfsgt	Init_Variable@i,c
  1448  001450  D7F7               	goto	l8452
  1449                           
  1450                           ;MOTEUR.c: 184: }
  1451                           ;MOTEUR.c: 186: Etat_Precedent_Index = 0;
  1452  001452  6A4D               	clrf	_Etat_Precedent_Index,c
  1453                           
  1454                           ;MOTEUR.c: 187: Etat = 255;
  1455  001454  0100               	movlb	0	; () banked
  1456  001456  69A8               	setf	_Etat& (0+255),b	;volatile
  1457                           
  1458                           ;MOTEUR.c: 190: Alarme = 0;
  1459  001458  6BA7               	clrf	_Alarme& (0+255),b	;volatile
  1460                           
  1461                           ;MOTEUR.c: 192: nb_s_fonctionnement_souhaiter = 0;
  1462  00145A  6BA6               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1463                           
  1464                           ;MOTEUR.c: 193: nb_s_fonctionnement = 0;
  1465  00145C  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;MOTEUR.c: 196: nb_s_patinage = 90;
  1469  00145E  0E5A               	movlw	90
  1470  001460  6FA4               	movwf	_nb_s_patinage& (0+255),b
  1471                           
  1472                           ;MOTEUR.c: 197: nb_s_patinage = 45;
  1473  001462  0E2D               	movlw	45
  1474  001464  6FA4               	movwf	_nb_s_patinage& (0+255),b
  1475                           
  1476                           ;MOTEUR.c: 198: nb_s_patinage = 50;
  1477  001466  0E32               	movlw	50
  1478  001468  6FA4               	movwf	_nb_s_patinage& (0+255),b
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;MOTEUR.c: 201: nb_100ms_Timer_5 = 0;
  1482  00146A  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1483                           
  1484                           ;MOTEUR.c: 203: nb_100ms_pion = 2;
  1485  00146C  0E02               	movlw	2
  1486  00146E  6FA2               	movwf	_nb_100ms_pion& (0+255),b
  1487                           
  1488                           ;MOTEUR.c: 204: nb_100ms_platine = 30;
  1489  001470  0E1E               	movlw	30
  1490  001472  6FA1               	movwf	_nb_100ms_platine& (0+255),b
  1491                           
  1492                           ;MOTEUR.c: 206: nb_s_pelle = 30;
  1493  001474  6FA0               	movwf	_nb_s_pelle& (0+255),b
  1494                           
  1495                           ;MOTEUR.c: 207: nb_s_bequille = 10;
  1496  001476  0E0A               	movlw	10
  1497  001478  6E4C               	movwf	_nb_s_bequille,c
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;MOTEUR.c: 209: Detecteur_Pion = 0;
  1501  00147A  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;MOTEUR.c: 210: nb_Pion = 0;
  1505  00147C  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;MOTEUR.c: 211: nb_Pion_Objectif = 0;
  1509  00147E  6B9E               	clrf	_nb_Pion_Objectif& (0+255),b
  1510                           
  1511                           ; BSR set to: 0
  1512                           ;MOTEUR.c: 212: Mouvement_Startup = 0;
  1513  001480  6A4E               	clrf	_Mouvement_Startup,c
  1514                           
  1515                           ; BSR set to: 0
  1516                           ;MOTEUR.c: 214: delay_s_counter = 0;
  1517  001482  6B8A               	clrf	_delay_s_counter& (0+255),b	;volatile
  1518                           
  1519                           ;MOTEUR.c: 216: moteur_indice = 1;
  1520  001484  0E01               	movlw	1
  1521  001486  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;MOTEUR.c: 217: consigne = 0;
  1525  001488  6B95               	clrf	_consigne& (0+255),b	;volatile
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;MOTEUR.c: 218: direction = 0;
  1529  00148A  6B8D               	clrf	_direction& (0+255),b	;volatile
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;MOTEUR.c: 219: mouvement_option = 0;
  1533  00148C  6B8E               	clrf	_mouvement_option& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;MOTEUR.c: 220: Option_Multitas = 0;
  1537  00148E  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1538                           
  1539                           ; BSR set to: 0
  1540                           ;MOTEUR.c: 221: type_consigne = 0;
  1541  001490  6B8F               	clrf	_type_consigne& (0+255),b
  1542                           
  1543                           ;MOTEUR.c: 222: Consigne_Max = 20 * 5;
  1544  001492  0E64               	movlw	100
  1545  001494  6F94               	movwf	_Consigne_Max& (0+255),b	;volatile
  1546                           
  1547                           ;MOTEUR.c: 223: Consigne_Max_Moteur_X = 20 * 5;
  1548  001496  6F93               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1549                           
  1550                           ;MOTEUR.c: 224: Consigne_Max_Moteur_Z = 20 * 5;
  1551  001498  6F92               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1552                           
  1553                           ;MOTEUR.c: 227: Moteur_I_Max = 100;
  1554  00149A  6F91               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1555                           
  1556                           ;MOTEUR.c: 228: Pelle_I_Max = 45;
  1557  00149C  0E2D               	movlw	45
  1558  00149E  6F90               	movwf	_Pelle_I_Max& (0+255),b
  1559                           
  1560                           ;MOTEUR.c: 229: Bequille_I_Max = 22;
  1561  0014A0  0E16               	movlw	22
  1562  0014A2  6E4A               	movwf	_Bequille_I_Max,c
  1563                           
  1564                           ;MOTEUR.c: 232: Consigne_en_A = 4;
  1565  0014A4  0E04               	movlw	4
  1566  0014A6  6E4B               	movwf	_Consigne_en_A,c
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;MOTEUR.c: 233: consigne = (char) (Consigne_en_A * 5);
  1570  0014A8  504B               	movf	_Consigne_en_A,w,c
  1571  0014AA  0D05               	mullw	5
  1572  0014AC  CFF3 F095          	movff	prodl,_consigne	;volatile
  1573                           
  1574                           ; BSR set to: 0
  1575                           ;MOTEUR.c: 236: Patinage_Nb_Essai_Autoriser = 3;
  1576  0014B0  0E03               	movlw	3
  1577  0014B2  6F99               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;MOTEUR.c: 237: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1581  0014B4  6F9C               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser& (0+255),b
  1582                           
  1583                           ; BSR set to: 0
  1584                           ;MOTEUR.c: 238: Capteur_Capot_Compteur_Temps_S = 0;
  1585  0014B6  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;MOTEUR.c: 239: Patinage_Nb_Essai = 0;
  1589  0014B8  6B9A               	clrf	_Patinage_Nb_Essai& (0+255),b
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;MOTEUR.c: 240: Capteur_Capot_Nb_Evenement = 0;
  1593  0014BA  6B9D               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;MOTEUR.c: 246: consigne_moteur_3 = 50;
  1597  0014BC  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;MOTEUR.c: 248: Surveillance_Consommation_Moteur_1 = 0;
  1601  0014BE  6A49               	clrf	_Surveillance_Consommation_Moteur_1,c
  1602                           
  1603                           ; BSR set to: 0
  1604                           ;MOTEUR.c: 249: Surveillance_Consommation_Moteur_2 = 0;
  1605  0014C0  6A48               	clrf	_Surveillance_Consommation_Moteur_2,c
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;MOTEUR.c: 251: Detection_Pion_Init();
  1609  0014C2  EC9F  F011         	call	_Detection_Pion_Init	;wreg free
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;MOTEUR.c: 259: Compteur_IRQ_I_Moteur_1 = 0;
  1613  0014C6  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;MOTEUR.c: 260: Compteur_IRQ_I_Moteur_2 = 0;
  1617  0014C8  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;MOTEUR.c: 277: DVT_Compteur = 0;
  1621  0014CA  6BAA               	clrf	_P4_busy& (0+255),b
  1622                           
  1623                           ; BSR set to: 0
  1624                           ;MOTEUR.c: 279: DVT_Tableau_Pause[0] = 9;
  1625  0014CC  0E09               	movlw	9
  1626  0014CE  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;MOTEUR.c: 280: DVT_Tableau_Pause[1] = 7;
  1630  0014D0  0E07               	movlw	7
  1631  0014D2  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;MOTEUR.c: 281: DVT_Tableau_Pause[2] = 6;
  1635  0014D4  0E06               	movlw	6
  1636  0014D6  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;MOTEUR.c: 282: DVT_Tableau_Pause[3] = 5;
  1640  0014D8  0E05               	movlw	5
  1641  0014DA  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;MOTEUR.c: 283: DVT_Tableau_Pause[4] = 4;
  1645  0014DC  0E04               	movlw	4
  1646  0014DE  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;MOTEUR.c: 293: Multitas_Courant_Max = 20 * 5 ;
  1650  0014E0  0E03               	movlw	3
  1651  0014E2  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;MOTEUR.c: 296: UART_TEST = 0;
  1655  0014E4  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;MOTEUR.c: 297: RX1_ABR = 0;
  1659  0014E6  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;MOTEUR.c: 298: RX1_full = 0;
  1663  0014E8  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;MOTEUR.c: 299: SPI_full = 0;
  1667  0014EA  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;MOTEUR.c: 301: spiRxIndex = 0;
  1671  0014EC  6A43               	clrf	_spiRxIndex,c	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;MOTEUR.c: 302: spiTxIndex = 0;
  1675  0014EE  6A44               	clrf	_spiTxIndex,c	;volatile
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;MOTEUR.c: 303: SPI_MODE = 0;
  1679  0014F0  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1680                           
  1681                           ; BSR set to: 0
  1682  0014F2  0012               	return		;funcret
  1683  0014F4                     __end_of_Init_Variable:
  1684                           	opt stack 0
  1685                           tblptru	equ	0xFF8
  1686                           prodl	equ	0xFF3
  1687                           postinc0	equ	0xFEE
  1688                           wreg	equ	0xFE8
  1689                           postdec1	equ	0xFE5
  1690                           fsr1h	equ	0xFE2
  1691                           fsr1l	equ	0xFE1
  1692                           indf2	equ	0xFDF
  1693                           fsr2h	equ	0xFDA
  1694                           fsr2l	equ	0xFD9
  1695                           
  1696 ;; *************** function _Init_TIMER5 *****************
  1697 ;; Defined at:
  1698 ;;		line 183 in file "timer.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;		None
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, status,2
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1712 ;;      Params:         0       0       0       0
  1713 ;;      Locals:         0       0       0       0
  1714 ;;      Temps:          0       0       0       0
  1715 ;;      Totals:         0       0       0       0
  1716 ;;Total ram usage:        0 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:   10
  1719 ;; This function calls:
  1720 ;;		Nothing
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text2
  1727  001FA8                     __ptext2:
  1728                           	opt stack 0
  1729  001FA8                     _Init_TIMER5:
  1730                           	opt stack 20
  1731                           
  1732                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;incstack = 0
  1736  001FA8  9EB7               	bcf	4023,7,c	;volatile
  1737                           
  1738                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1739  001FAA  8CB7               	bsf	4023,6,c	;volatile
  1740                           
  1741                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1742  001FAC  9AB7               	bcf	4023,5,c	;volatile
  1743                           
  1744                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1745  001FAE  0E18               	movlw	24
  1746  001FB0  12B7               	iorwf	4023,f,c	;volatile
  1747                           
  1748                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1749  001FB2  84B7               	bsf	4023,2,c	;volatile
  1750                           
  1751                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1752  001FB4  92B7               	bcf	4023,1,c	;volatile
  1753                           
  1754                           ;timer.c: 218: TMR5L = 0;
  1755  001FB6  6A87               	clrf	3975,c	;volatile
  1756                           
  1757                           ;timer.c: 219: TMR5H = 0;
  1758  001FB8  6A88               	clrf	3976,c	;volatile
  1759                           
  1760                           ;timer.c: 221: PR5H = 0x61;
  1761  001FBA  0E61               	movlw	97
  1762  001FBC  6E91               	movwf	3985,c	;volatile
  1763                           
  1764                           ;timer.c: 222: PR5L = 0xA8;
  1765  001FBE  0EA8               	movlw	168
  1766  001FC0  6E90               	movwf	3984,c	;volatile
  1767                           
  1768                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1769  001FC2  90B7               	bcf	4023,0,c	;volatile
  1770                           
  1771                           ;timer.c: 228: TMR5L = 0;
  1772  001FC4  6A87               	clrf	3975,c	;volatile
  1773                           
  1774                           ;timer.c: 229: TMR5H = 0;
  1775  001FC6  6A88               	clrf	3976,c	;volatile
  1776                           
  1777                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1778  001FC8  90A5               	bcf	4005,0,c	;volatile
  1779                           
  1780                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1781  001FCA  80A3               	bsf	4003,0,c	;volatile
  1782                           
  1783                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1784  001FCC  90A4               	bcf	4004,0,c	;volatile
  1785  001FCE  0012               	return		;funcret
  1786  001FD0                     __end_of_Init_TIMER5:
  1787                           	opt stack 0
  1788                           tblptru	equ	0xFF8
  1789                           prodl	equ	0xFF3
  1790                           postinc0	equ	0xFEE
  1791                           wreg	equ	0xFE8
  1792                           postdec1	equ	0xFE5
  1793                           fsr1h	equ	0xFE2
  1794                           fsr1l	equ	0xFE1
  1795                           indf2	equ	0xFDF
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           
  1799 ;; *************** function _Init_TIMER2 *****************
  1800 ;; Defined at:
  1801 ;;		line 133 in file "timer.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  1    wreg      void 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1815 ;;      Params:         0       0       0       0
  1816 ;;      Locals:         0       0       0       0
  1817 ;;      Temps:          0       0       0       0
  1818 ;;      Totals:         0       0       0       0
  1819 ;;Total ram usage:        0 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:   10
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_main
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text3
  1830  0021AA                     __ptext3:
  1831                           	opt stack 0
  1832  0021AA                     _Init_TIMER2:
  1833                           	opt stack 20
  1834                           
  1835                           ;timer.c: 138: T2CON = 0b00100100;
  1836                           
  1837                           ;incstack = 0
  1838  0021AA  0E24               	movlw	36
  1839  0021AC  6ECA               	movwf	4042,c	;volatile
  1840                           
  1841                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1842  0021AE  50CA               	movf	4042,w,c	;volatile
  1843  0021B0  0B87               	andlw	-121
  1844  0021B2  0940               	iorlw	64
  1845  0021B4  6ECA               	movwf	4042,c	;volatile
  1846                           
  1847                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1848  0021B6  0EFC               	movlw	-4
  1849  0021B8  16CA               	andwf	4042,f,c	;volatile
  1850                           
  1851                           ;timer.c: 149: PR2 = 200;
  1852  0021BA  0EC8               	movlw	200
  1853  0021BC  6ECB               	movwf	4043,c	;volatile
  1854                           
  1855                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1856  0021BE  929F               	bcf	3999,1,c	;volatile
  1857                           
  1858                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1859  0021C0  829F               	bsf	3999,1,c	;volatile
  1860  0021C2  0CC8               	retlw	200	;funcret
  1861  0021C4                     __end_of_Init_TIMER2:
  1862                           	opt stack 0
  1863                           tblptru	equ	0xFF8
  1864                           prodl	equ	0xFF3
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1h	equ	0xFE2
  1869                           fsr1l	equ	0xFE1
  1870                           indf2	equ	0xFDF
  1871                           fsr2h	equ	0xFDA
  1872                           fsr2l	equ	0xFD9
  1873                           
  1874 ;; *************** function _Init_TIMER0 *****************
  1875 ;; Defined at:
  1876 ;;		line 21 in file "timer.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1890 ;;      Params:         0       0       0       0
  1891 ;;      Locals:         0       0       0       0
  1892 ;;      Temps:          0       0       0       0
  1893 ;;      Totals:         0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:   10
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_main
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text4
  1905  0020D8                     __ptext4:
  1906                           	opt stack 0
  1907  0020D8                     _Init_TIMER0:
  1908                           	opt stack 20
  1909                           
  1910                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  1911                           
  1912                           ;incstack = 0
  1913  0020D8  9ED5               	bcf	4053,7,c	;volatile
  1914                           
  1915                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  1916  0020DA  9CD5               	bcf	4053,6,c	;volatile
  1917                           
  1918                           ;timer.c: 33: T0CONbits.T0CS = 0;
  1919  0020DC  9AD5               	bcf	4053,5,c	;volatile
  1920                           
  1921                           ;timer.c: 37: T0CONbits.T0SE = 0;
  1922  0020DE  98D5               	bcf	4053,4,c	;volatile
  1923                           
  1924                           ;timer.c: 41: T0CONbits.PSA = 0;
  1925  0020E0  96D5               	bcf	4053,3,c	;volatile
  1926                           
  1927                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  1928  0020E2  0E07               	movlw	7
  1929  0020E4  12D5               	iorwf	4053,f,c	;volatile
  1930                           
  1931                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  1932  0020E6  12D5               	iorwf	4053,f,c	;volatile
  1933                           
  1934                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  1935  0020E8  50D5               	movf	4053,w,c	;volatile
  1936  0020EA  0BF8               	andlw	-8
  1937  0020EC  0904               	iorlw	4
  1938  0020EE  6ED5               	movwf	4053,c	;volatile
  1939                           
  1940                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  1941  0020F0  94F1               	bcf	intcon2,2,c	;volatile
  1942                           
  1943                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  1944  0020F2  9AF2               	bcf	intcon,5,c	;volatile
  1945                           
  1946                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  1947  0020F4  94F2               	bcf	intcon,2,c	;volatile
  1948  0020F6  0012               	return		;funcret
  1949  0020F8                     __end_of_Init_TIMER0:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           prodl	equ	0xFF3
  1953                           intcon	equ	0xFF2
  1954                           intcon2	equ	0xFF1
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postdec1	equ	0xFE5
  1958                           fsr1h	equ	0xFE2
  1959                           fsr1l	equ	0xFE1
  1960                           indf2	equ	0xFDF
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           
  1964 ;; *************** function _Init_SPI *****************
  1965 ;; Defined at:
  1966 ;;		line 24 in file "spi.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2
  1975 ;; Tracked objects:
  1976 ;;		On entry : 3F/0
  1977 ;;		On exit  : 3F/0
  1978 ;;		Unchanged: 3F/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1980 ;;      Params:         0       0       0       0
  1981 ;;      Locals:         0       0       0       0
  1982 ;;      Temps:          0       0       0       0
  1983 ;;      Totals:         0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:   10
  1987 ;; This function calls:
  1988 ;;		Nothing
  1989 ;; This function is called by:
  1990 ;;		_main
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           	psect	text5
  1995  002092                     __ptext5:
  1996                           	opt stack 0
  1997  002092                     _Init_SPI:
  1998                           	opt stack 20
  1999                           
  2000                           ; BSR set to: 0
  2001                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  2002                           
  2003                           ;incstack = 0
  2004  002092  8695               	bsf	3989,3,c	;volatile
  2005                           
  2006                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2007  002094  8495               	bsf	3989,2,c	;volatile
  2008                           
  2009                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2010  002096  9295               	bcf	3989,1,c	;volatile
  2011                           
  2012                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2013  002098  9EC7               	bcf	4039,7,c	;volatile
  2014                           
  2015                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2016  00209A  9CC7               	bcf	4039,6,c	;volatile
  2017                           
  2018                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2019  00209C  8CC7               	bsf	4039,6,c	;volatile
  2020                           
  2021                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2022  00209E  9EC6               	bcf	4038,7,c	;volatile
  2023                           
  2024                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2025  0020A0  9CC6               	bcf	4038,6,c	;volatile
  2026                           
  2027                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2028  0020A2  8AC6               	bsf	4038,5,c	;volatile
  2029                           
  2030                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2031  0020A4  88C6               	bsf	4038,4,c	;volatile
  2032                           
  2033                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2034  0020A6  98C6               	bcf	4038,4,c	;volatile
  2035                           
  2036                           ; BSR set to: 0
  2037                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2038  0020A8  50C6               	movf	4038,w,c	;volatile
  2039  0020AA  0BF0               	andlw	-16
  2040  0020AC  0905               	iorlw	5
  2041  0020AE  6EC6               	movwf	4038,c	;volatile
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2045  0020B0  969E               	bcf	3998,3,c	;volatile
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2049  0020B2  869D               	bsf	3997,3,c	;volatile
  2050                           
  2051                           ; BSR set to: 0
  2052  0020B4  0012               	return		;funcret
  2053  0020B6                     __end_of_Init_SPI:
  2054                           	opt stack 0
  2055                           tblptru	equ	0xFF8
  2056                           prodl	equ	0xFF3
  2057                           intcon	equ	0xFF2
  2058                           intcon2	equ	0xFF1
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           postdec1	equ	0xFE5
  2062                           fsr1h	equ	0xFE2
  2063                           fsr1l	equ	0xFE1
  2064                           indf2	equ	0xFDF
  2065                           fsr2h	equ	0xFDA
  2066                           fsr2l	equ	0xFD9
  2067                           
  2068 ;; *************** function _Init_Port *****************
  2069 ;; Defined at:
  2070 ;;		line 14 in file "init.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;		None
  2073 ;; Auto vars:     Size  Location     Type
  2074 ;;		None
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      void 
  2077 ;; Registers used:
  2078 ;;		wreg, status,2
  2079 ;; Tracked objects:
  2080 ;;		On entry : 3F/0
  2081 ;;		On exit  : 3F/0
  2082 ;;		Unchanged: 3F/0
  2083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2084 ;;      Params:         0       0       0       0
  2085 ;;      Locals:         0       0       0       0
  2086 ;;      Temps:          0       0       0       0
  2087 ;;      Totals:         0       0       0       0
  2088 ;;Total ram usage:        0 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:   10
  2091 ;; This function calls:
  2092 ;;		Nothing
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           	psect	text6
  2099  0018BC                     __ptext6:
  2100                           	opt stack 0
  2101  0018BC                     _Init_Port:
  2102                           	opt stack 20
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;init.c: 24: TRISA = 0b11111111;
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;incstack = 0
  2109  0018BC  6892               	setf	3986,c	;volatile
  2110                           
  2111                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2112  0018BE  8092               	bsf	3986,0,c	;volatile
  2113                           
  2114                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2115  0018C0  8292               	bsf	3986,1,c	;volatile
  2116                           
  2117                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2118  0018C2  8492               	bsf	3986,2,c	;volatile
  2119                           
  2120                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2121  0018C4  8692               	bsf	3986,3,c	;volatile
  2122                           
  2123                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2124  0018C6  8892               	bsf	3986,4,c	;volatile
  2125                           
  2126                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2127  0018C8  8A92               	bsf	3986,5,c	;volatile
  2128                           
  2129                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2130  0018CA  9C92               	bcf	3986,6,c	;volatile
  2131                           
  2132                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2133  0018CC  8E92               	bsf	3986,7,c	;volatile
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;init.c: 33: TRISB = 0b11111010;
  2137  0018CE  0EFA               	movlw	250
  2138  0018D0  6E93               	movwf	3987,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2142  0018D2  9093               	bcf	3987,0,c	;volatile
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2146  0018D4  8293               	bsf	3987,1,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2150  0018D6  9493               	bcf	3987,2,c	;volatile
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2154  0018D8  8693               	bsf	3987,3,c	;volatile
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2158  0018DA  8893               	bsf	3987,4,c	;volatile
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2162  0018DC  8A93               	bsf	3987,5,c	;volatile
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2166  0018DE  8C93               	bsf	3987,6,c	;volatile
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2170  0018E0  8E93               	bsf	3987,7,c	;volatile
  2171                           
  2172                           ;init.c: 42: TRISC = 0b11011100;
  2173  0018E2  0EDC               	movlw	220
  2174  0018E4  6E94               	movwf	3988,c	;volatile
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2178  0018E6  9094               	bcf	3988,0,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2182  0018E8  9294               	bcf	3988,1,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2186  0018EA  9494               	bcf	3988,2,c	;volatile
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2190  0018EC  8694               	bsf	3988,3,c	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2194  0018EE  8894               	bsf	3988,4,c	;volatile
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2198  0018F0  8A94               	bsf	3988,5,c	;volatile
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2202  0018F2  9C94               	bcf	3988,6,c	;volatile
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2206  0018F4  8E94               	bsf	3988,7,c	;volatile
  2207                           
  2208                           ;init.c: 51: TRISD = 0b00001111;
  2209  0018F6  0E0F               	movlw	15
  2210  0018F8  6E95               	movwf	3989,c	;volatile
  2211                           
  2212                           ;init.c: 52: TRISD = 0b00000111;
  2213  0018FA  0E07               	movlw	7
  2214  0018FC  6E95               	movwf	3989,c	;volatile
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2218  0018FE  8095               	bsf	3989,0,c	;volatile
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2222  001900  8295               	bsf	3989,1,c	;volatile
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2226  001902  8495               	bsf	3989,2,c	;volatile
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2230  001904  9695               	bcf	3989,3,c	;volatile
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2234  001906  9895               	bcf	3989,4,c	;volatile
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2238  001908  9A95               	bcf	3989,5,c	;volatile
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2242  00190A  9C95               	bcf	3989,6,c	;volatile
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2246  00190C  9E95               	bcf	3989,7,c	;volatile
  2247                           
  2248                           ;init.c: 62: TRISE = 0b00000111;
  2249  00190E  6E96               	movwf	3990,c	;volatile
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2253  001910  8096               	bsf	3990,0,c	;volatile
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2257  001912  8296               	bsf	3990,1,c	;volatile
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2261  001914  9496               	bcf	3990,2,c	;volatile
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;init.c: 78: LATA = 0b00000000;
  2265  001916  6A89               	clrf	3977,c	;volatile
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;init.c: 79: LATB = 0b00000000;
  2269  001918  6A8A               	clrf	3978,c	;volatile
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;init.c: 80: LATC = 0b00000000;
  2273  00191A  6A8B               	clrf	3979,c	;volatile
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;init.c: 81: LATD = 0b00000000;
  2277  00191C  6A8C               	clrf	3980,c	;volatile
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;init.c: 82: LATE = 0b00000000;
  2281  00191E  6A8D               	clrf	3981,c	;volatile
  2282                           
  2283                           ; BSR set to: 0
  2284  001920  0012               	return		;funcret
  2285  001922                     __end_of_Init_Port:
  2286                           	opt stack 0
  2287                           tblptru	equ	0xFF8
  2288                           prodl	equ	0xFF3
  2289                           intcon	equ	0xFF2
  2290                           intcon2	equ	0xFF1
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1h	equ	0xFE2
  2295                           fsr1l	equ	0xFE1
  2296                           indf2	equ	0xFDF
  2297                           fsr2h	equ	0xFDA
  2298                           fsr2l	equ	0xFD9
  2299                           
  2300 ;; *************** function _Init_PWM *****************
  2301 ;; Defined at:
  2302 ;;		line 14 in file "pwm.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;		None
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      void 
  2309 ;; Registers used:
  2310 ;;		wreg, status,2
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2316 ;;      Params:         0       0       0       0
  2317 ;;      Locals:         0       0       0       0
  2318 ;;      Temps:          0       0       0       0
  2319 ;;      Totals:         0       0       0       0
  2320 ;;Total ram usage:        0 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:   10
  2323 ;; This function calls:
  2324 ;;		Nothing
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           	psect	text7
  2331  002172                     __ptext7:
  2332                           	opt stack 0
  2333  002172                     _Init_PWM:
  2334                           	opt stack 20
  2335                           
  2336                           ;pwm.c: 15: PTPERL = 99;
  2337                           
  2338                           ; BSR set to: 0
  2339                           ;incstack = 0
  2340  002172  0E63               	movlw	99
  2341  002174  6E7B               	movwf	3963,c	;volatile
  2342                           
  2343                           ;pwm.c: 16: PTPERH = 0;
  2344  002176  6A7A               	clrf	3962,c	;volatile
  2345                           
  2346                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2347  002178  6A7F               	clrf	3967,c	;volatile
  2348                           
  2349                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2350  00217A  0E80               	movlw	128
  2351  00217C  6E7E               	movwf	3966,c	;volatile
  2352                           
  2353                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2354  00217E  0E3F               	movlw	63
  2355  002180  6E6F               	movwf	3951,c	;volatile
  2356                           
  2357                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2358  002182  6A6E               	clrf	3950,c	;volatile
  2359                           
  2360                           ;pwm.c: 25: DTCON = 0b00000000;
  2361  002184  6A6D               	clrf	3949,c	;volatile
  2362                           
  2363                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2364  002186  0E05               	movlw	5
  2365  002188  6E6B               	movwf	3947,c	;volatile
  2366                           
  2367                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2368  00218A  6A6A               	clrf	3946,c	;volatile
  2369  00218C  0012               	return		;funcret
  2370  00218E                     __end_of_Init_PWM:
  2371                           	opt stack 0
  2372                           tblptru	equ	0xFF8
  2373                           prodl	equ	0xFF3
  2374                           intcon	equ	0xFF2
  2375                           intcon2	equ	0xFF1
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           postdec1	equ	0xFE5
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           
  2385 ;; *************** function _Init_Metalhome *****************
  2386 ;; Defined at:
  2387 ;;		line 579 in file "MOTEUR.c"
  2388 ;; Parameters:    Size  Location     Type
  2389 ;;		None
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;		None
  2392 ;; Return value:  Size  Location     Type
  2393 ;;                  1    wreg      void 
  2394 ;; Registers used:
  2395 ;;		None
  2396 ;; Tracked objects:
  2397 ;;		On entry : 0/0
  2398 ;;		On exit  : 0/0
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2401 ;;      Params:         0       0       0       0
  2402 ;;      Locals:         0       0       0       0
  2403 ;;      Temps:          0       0       0       0
  2404 ;;      Totals:         0       0       0       0
  2405 ;;Total ram usage:        0 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:   10
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_main
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text8
  2416  0023BC                     __ptext8:
  2417                           	opt stack 0
  2418  0023BC                     _Init_Metalhome:
  2419                           	opt stack 20
  2420                           
  2421                           ;MOTEUR.c: 581: INTCONbits.INT0IE = 1;
  2422                           
  2423                           ;incstack = 0
  2424  0023BC  88F2               	bsf	intcon,4,c	;volatile
  2425                           
  2426                           ;MOTEUR.c: 582: INTCONbits.INT0IF = 0;
  2427  0023BE  92F2               	bcf	intcon,1,c	;volatile
  2428                           
  2429                           ;MOTEUR.c: 584: PIR3bits.IC1IF = 0;
  2430  0023C0  92A4               	bcf	4004,1,c	;volatile
  2431                           
  2432                           ;MOTEUR.c: 585: PIE3bits.IC1IE = 1;
  2433  0023C2  82A3               	bsf	4003,1,c	;volatile
  2434  0023C4  0012               	return		;funcret
  2435  0023C6                     __end_of_Init_Metalhome:
  2436                           	opt stack 0
  2437                           tblptru	equ	0xFF8
  2438                           prodl	equ	0xFF3
  2439                           intcon	equ	0xFF2
  2440                           intcon2	equ	0xFF1
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           fsr1h	equ	0xFE2
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           fsr2h	equ	0xFDA
  2448                           fsr2l	equ	0xFD9
  2449                           
  2450 ;; *************** function _Init_IT *****************
  2451 ;; Defined at:
  2452 ;;		line 70 in file "interrupt.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2, cstack
  2461 ;; Tracked objects:
  2462 ;;		On entry : 3F/0
  2463 ;;		On exit  : 3F/0
  2464 ;;		Unchanged: 3F/0
  2465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2466 ;;      Params:         0       0       0       0
  2467 ;;      Locals:         0       0       0       0
  2468 ;;      Temps:          0       0       0       0
  2469 ;;      Totals:         0       0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:   11
  2473 ;; This function calls:
  2474 ;;		_Init_Input_Capture_0
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text9
  2481  001DF8                     __ptext9:
  2482                           	opt stack 0
  2483  001DF8                     _Init_IT:
  2484                           	opt stack 19
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2488                           
  2489                           ;incstack = 0
  2490  001DF8  8EF2               	bsf	intcon,7,c	;volatile
  2491                           
  2492                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2493  001DFA  8CF2               	bsf	intcon,6,c	;volatile
  2494                           
  2495                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2496  001DFC  9AF2               	bcf	intcon,5,c	;volatile
  2497                           
  2498                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2499  001DFE  98F2               	bcf	intcon,4,c	;volatile
  2500                           
  2501                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2502  001E00  96F2               	bcf	intcon,3,c	;volatile
  2503                           
  2504                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2505  001E02  94F2               	bcf	intcon,2,c	;volatile
  2506                           
  2507                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2508  001E04  92F2               	bcf	intcon,1,c	;volatile
  2509                           
  2510                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2511  001E06  90F2               	bcf	intcon,0,c	;volatile
  2512                           
  2513                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2514  001E08  8EF1               	bsf	intcon2,7,c	;volatile
  2515                           
  2516                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2517  001E0A  8CF1               	bsf	intcon2,6,c	;volatile
  2518                           
  2519                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2520  001E0C  9CF1               	bcf	intcon2,6,c	;volatile
  2521                           
  2522                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2523  001E0E  8AF1               	bsf	intcon2,5,c	;volatile
  2524                           
  2525                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2526  001E10  88F1               	bsf	intcon2,4,c	;volatile
  2527                           
  2528                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2529  001E12  94F1               	bcf	intcon2,2,c	;volatile
  2530                           
  2531                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2532  001E14  90F1               	bcf	intcon2,0,c	;volatile
  2533                           
  2534                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2535  001E16  8EF0               	bsf	intcon3,7,c	;volatile
  2536                           
  2537                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2538  001E18  8CF0               	bsf	intcon3,6,c	;volatile
  2539                           
  2540                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2541  001E1A  98F0               	bcf	intcon3,4,c	;volatile
  2542                           
  2543                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2544  001E1C  96F0               	bcf	intcon3,3,c	;volatile
  2545                           
  2546                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2547  001E1E  92F0               	bcf	intcon3,1,c	;volatile
  2548                           
  2549                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2550  001E20  90F0               	bcf	intcon3,0,c	;volatile
  2551                           
  2552                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2553  001E22  8ED0               	bsf	4048,7,c	;volatile
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;interrupt.c: 125: Init_Input_Capture_0();
  2557  001E24  EC5B  F010         	call	_Init_Input_Capture_0	;wreg free
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2561  001E28  969F               	bcf	3999,3,c	;volatile
  2562                           
  2563                           ; BSR set to: 0
  2564  001E2A  0012               	return		;funcret
  2565  001E2C                     __end_of_Init_IT:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           prodl	equ	0xFF3
  2569                           intcon	equ	0xFF2
  2570                           intcon2	equ	0xFF1
  2571                           intcon3	equ	0xFF0
  2572                           postinc0	equ	0xFEE
  2573                           wreg	equ	0xFE8
  2574                           postdec1	equ	0xFE5
  2575                           fsr1h	equ	0xFE2
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           
  2581 ;; *************** function _Init_Input_Capture_0 *****************
  2582 ;; Defined at:
  2583 ;;		line 139 in file "interrupt.c"
  2584 ;; Parameters:    Size  Location     Type
  2585 ;;		None
  2586 ;; Auto vars:     Size  Location     Type
  2587 ;;		None
  2588 ;; Return value:  Size  Location     Type
  2589 ;;                  1    wreg      void 
  2590 ;; Registers used:
  2591 ;;		wreg, status,2
  2592 ;; Tracked objects:
  2593 ;;		On entry : 3F/0
  2594 ;;		On exit  : 3F/0
  2595 ;;		Unchanged: 3F/0
  2596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2597 ;;      Params:         0       0       0       0
  2598 ;;      Locals:         0       0       0       0
  2599 ;;      Temps:          0       0       0       0
  2600 ;;      Totals:         0       0       0       0
  2601 ;;Total ram usage:        0 bytes
  2602 ;; Hardware stack levels used:    1
  2603 ;; Hardware stack levels required when called:   10
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_Init_IT
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           	psect	text10
  2612  0020B6                     __ptext10:
  2613                           	opt stack 0
  2614  0020B6                     _Init_Input_Capture_0:
  2615                           	opt stack 19
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;incstack = 0
  2622  0020B6  9C63               	bcf	3939,6,c	;volatile
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2626  0020B8  5063               	movf	3939,w,c	;volatile
  2627  0020BA  0BF0               	andlw	-16
  2628  0020BC  0908               	iorlw	8
  2629  0020BE  6E63               	movwf	3939,c	;volatile
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2633  0020C0  92A3               	bcf	4003,1,c	;volatile
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2637  0020C2  92A5               	bcf	4005,1,c	;volatile
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2641  0020C4  92A4               	bcf	4004,1,c	;volatile
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2645  0020C6  9C62               	bcf	3938,6,c	;volatile
  2646                           
  2647                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2648  0020C8  5062               	movf	3938,w,c	;volatile
  2649  0020CA  0BF0               	andlw	-16
  2650  0020CC  0908               	iorlw	8
  2651  0020CE  6E62               	movwf	3938,c	;volatile
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2655  0020D0  94A3               	bcf	4003,2,c	;volatile
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2659  0020D2  94A5               	bcf	4005,2,c	;volatile
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2663  0020D4  94A4               	bcf	4004,2,c	;volatile
  2664                           
  2665                           ; BSR set to: 0
  2666  0020D6  0012               	return		;funcret
  2667  0020D8                     __end_of_Init_Input_Capture_0:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           prodl	equ	0xFF3
  2671                           intcon	equ	0xFF2
  2672                           intcon2	equ	0xFF1
  2673                           intcon3	equ	0xFF0
  2674                           postinc0	equ	0xFEE
  2675                           wreg	equ	0xFE8
  2676                           postdec1	equ	0xFE5
  2677                           fsr1h	equ	0xFE2
  2678                           fsr1l	equ	0xFE1
  2679                           indf2	equ	0xFDF
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           
  2683 ;; *************** function _Init_ADC *****************
  2684 ;; Defined at:
  2685 ;;		line 14 in file "adc.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg, status,2
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2699 ;;      Params:         0       0       0       0
  2700 ;;      Locals:         0       0       0       0
  2701 ;;      Temps:          0       0       0       0
  2702 ;;      Totals:         0       0       0       0
  2703 ;;Total ram usage:        0 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:   10
  2706 ;; This function calls:
  2707 ;;		Nothing
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text11
  2714  0020F8                     __ptext11:
  2715                           	opt stack 0
  2716  0020F8                     _Init_ADC:
  2717                           	opt stack 20
  2718                           
  2719                           ;adc.c: 15: ADCON0 = 0b00000000;
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;incstack = 0
  2723  0020F8  6AC2               	clrf	4034,c	;volatile
  2724                           
  2725                           ;adc.c: 16: ADCON1 = 0b00000000;
  2726  0020FA  6AC1               	clrf	4033,c	;volatile
  2727                           
  2728                           ;adc.c: 17: ADCON2 = 0b10010100;
  2729  0020FC  0E94               	movlw	148
  2730  0020FE  6EC0               	movwf	4032,c	;volatile
  2731                           
  2732                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2733  002100  50C0               	movf	4032,w,c	;volatile
  2734  002102  0BF8               	andlw	-8
  2735  002104  0901               	iorlw	1
  2736  002106  6EC0               	movwf	4032,c	;volatile
  2737                           
  2738                           ;adc.c: 19: ADCON3 = 0b11000000;
  2739  002108  0EC0               	movlw	192
  2740  00210A  6E9A               	movwf	3994,c	;volatile
  2741                           
  2742                           ;adc.c: 20: ADCHS = 0b00000000;
  2743  00210C  6A99               	clrf	3993,c	;volatile
  2744                           
  2745                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2746  00210E  0E03               	movlw	3
  2747  002110  6EB8               	movwf	4024,c	;volatile
  2748                           
  2749                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2750  002112  6AB9               	clrf	4025,c	;volatile
  2751                           
  2752                           ;adc.c: 24: ADON = 1;
  2753  002114  80C2               	bsf	4034,0,c	;volatile
  2754  002116  0012               	return		;funcret
  2755  002118                     __end_of_Init_ADC:
  2756                           	opt stack 0
  2757                           tblptru	equ	0xFF8
  2758                           prodl	equ	0xFF3
  2759                           intcon	equ	0xFF2
  2760                           intcon2	equ	0xFF1
  2761                           intcon3	equ	0xFF0
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1h	equ	0xFE2
  2766                           fsr1l	equ	0xFE1
  2767                           indf2	equ	0xFDF
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           
  2771 ;; *************** function _EUSART1_Initialize *****************
  2772 ;; Defined at:
  2773 ;;		line 299 in file "eusart.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, status,2, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 3F/0
  2784 ;;		On exit  : 3F/0
  2785 ;;		Unchanged: 3F/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2787 ;;      Params:         0       0       0       0
  2788 ;;      Locals:         0       0       0       0
  2789 ;;      Temps:          0       0       0       0
  2790 ;;      Totals:         0       0       0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:   11
  2794 ;; This function calls:
  2795 ;;		_EUSART1_IT_ACTIVATE
  2796 ;; This function is called by:
  2797 ;;		_main
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           	psect	text12
  2802  001C1E                     __ptext12:
  2803                           	opt stack 0
  2804  001C1E                     _EUSART1_Initialize:
  2805                           	opt stack 19
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2809                           
  2810                           ;incstack = 0
  2811  001C1E  9A9D               	bcf	3997,5,c	;volatile
  2812                           
  2813                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2814  001C20  989D               	bcf	3997,4,c	;volatile
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;eusart.c: 307: BAUDCON = 0x48;
  2818  001C22  0E48               	movlw	72
  2819  001C24  6EAA               	movwf	4010,c	;volatile
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2823  001C26  86AA               	bsf	4010,3,c	;volatile
  2824                           
  2825                           ;eusart.c: 313: RCSTA1 = 0x80;
  2826  001C28  0E80               	movlw	128
  2827  001C2A  6EAB               	movwf	4011,c	;volatile
  2828                           
  2829                           ;eusart.c: 316: TXSTA1 = 0x24;
  2830  001C2C  0E24               	movlw	36
  2831  001C2E  6EAC               	movwf	4012,c	;volatile
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2835  001C30  98AC               	bcf	4012,4,c	;volatile
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2839  001C32  84AC               	bsf	4012,2,c	;volatile
  2840                           
  2841                           ;eusart.c: 321: SPBRG = 0x22;
  2842  001C34  0E22               	movlw	34
  2843  001C36  6EAF               	movwf	4015,c	;volatile
  2844                           
  2845                           ;eusart.c: 322: SPBRG = 0x11;
  2846  001C38  0E11               	movlw	17
  2847  001C3A  6EAF               	movwf	4015,c	;volatile
  2848                           
  2849                           ;eusart.c: 323: SPBRG = 0x12;
  2850  001C3C  0E12               	movlw	18
  2851  001C3E  6EAF               	movwf	4015,c	;volatile
  2852                           
  2853                           ;eusart.c: 324: SPBRG = 0x10;
  2854  001C40  0E10               	movlw	16
  2855  001C42  6EAF               	movwf	4015,c	;volatile
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;eusart.c: 328: SPBRGH = 0x00;
  2859  001C44  6AB0               	clrf	4016,c	;volatile
  2860                           
  2861                           ;eusart.c: 330: SPBRG = 0x0B;
  2862  001C46  0E0B               	movlw	11
  2863  001C48  6EAF               	movwf	4015,c	;volatile
  2864                           
  2865                           ;eusart.c: 331: SPBRGH = 0x33;
  2866  001C4A  0E33               	movlw	51
  2867  001C4C  6EB0               	movwf	4016,c	;volatile
  2868                           
  2869                           ;eusart.c: 333: SPBRG = 205;
  2870  001C4E  0ECD               	movlw	205
  2871  001C50  6EAF               	movwf	4015,c	;volatile
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;eusart.c: 334: SPBRGH = 0x00;
  2875  001C52  6AB0               	clrf	4016,c	;volatile
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2879  001C54  96AA               	bcf	4010,3,c	;volatile
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2883  001C56  94AC               	bcf	4012,2,c	;volatile
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2887  001C58  98AC               	bcf	4012,4,c	;volatile
  2888                           
  2889                           ;eusart.c: 343: SPBRG = 12;
  2890  001C5A  0E0C               	movlw	12
  2891  001C5C  6EAF               	movwf	4015,c	;volatile
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;eusart.c: 344: SPBRGH = 0x00;
  2895  001C5E  6AB0               	clrf	4016,c	;volatile
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;eusart.c: 397: eusart1TxIndex = 0;
  2899  001C60  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;eusart.c: 398: eusart1RxIndex = 0;
  2903  001C62  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2907  001C64  989F               	bcf	3999,4,c	;volatile
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2911  001C66  9A9F               	bcf	3999,5,c	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;eusart.c: 431: RX1_full = 0;
  2915  001C68  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2919  001C6A  EFB4  F011         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2920  001C6E                     __end_of_EUSART1_Initialize:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           prodl	equ	0xFF3
  2924                           intcon	equ	0xFF2
  2925                           intcon2	equ	0xFF1
  2926                           intcon3	equ	0xFF0
  2927                           postinc0	equ	0xFEE
  2928                           wreg	equ	0xFE8
  2929                           postdec1	equ	0xFE5
  2930                           fsr1h	equ	0xFE2
  2931                           fsr1l	equ	0xFE1
  2932                           indf2	equ	0xFDF
  2933                           fsr2h	equ	0xFDA
  2934                           fsr2l	equ	0xFD9
  2935                           
  2936 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2937 ;; Defined at:
  2938 ;;		line 232 in file "eusart.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;		None
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		None
  2947 ;; Tracked objects:
  2948 ;;		On entry : 3F/0
  2949 ;;		On exit  : 3F/0
  2950 ;;		Unchanged: 3F/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2952 ;;      Params:         0       0       0       0
  2953 ;;      Locals:         0       0       0       0
  2954 ;;      Temps:          0       0       0       0
  2955 ;;      Totals:         0       0       0       0
  2956 ;;Total ram usage:        0 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:   10
  2959 ;; This function calls:
  2960 ;;		Nothing
  2961 ;; This function is called by:
  2962 ;;		_EUSART1_Initialize
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text13
  2967  002368                     __ptext13:
  2968                           	opt stack 0
  2969  002368                     _EUSART1_IT_ACTIVATE:
  2970                           	opt stack 19
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;incstack = 0
  2977  002368  88AB               	bsf	4011,4,c	;volatile
  2978                           
  2979                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  2980  00236A  9A9E               	bcf	3998,5,c	;volatile
  2981                           
  2982                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  2983  00236C  8A9D               	bsf	3997,5,c	;volatile
  2984                           
  2985                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  2986  00236E  989E               	bcf	3998,4,c	;volatile
  2987                           
  2988                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  2989  002370  889D               	bsf	3997,4,c	;volatile
  2990                           
  2991                           ; BSR set to: 0
  2992  002372  0012               	return		;funcret
  2993  002374                     __end_of_EUSART1_IT_ACTIVATE:
  2994                           	opt stack 0
  2995                           tblptru	equ	0xFF8
  2996                           prodl	equ	0xFF3
  2997                           intcon	equ	0xFF2
  2998                           intcon2	equ	0xFF1
  2999                           intcon3	equ	0xFF0
  3000                           postinc0	equ	0xFEE
  3001                           wreg	equ	0xFE8
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           
  3009 ;; *************** function _Cycle *****************
  3010 ;; Defined at:
  3011 ;;		line 312 in file "MOTEUR.c"
  3012 ;; Parameters:    Size  Location     Type
  3013 ;;		None
  3014 ;; Auto vars:     Size  Location     Type
  3015 ;;  i               1    9[BANK2 ] unsigned char 
  3016 ;;  j               1    0        unsigned char 
  3017 ;; Return value:  Size  Location     Type
  3018 ;;                  1    wreg      void 
  3019 ;; Registers used:
  3020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3021 ;; Tracked objects:
  3022 ;;		On entry : 0/0
  3023 ;;		On exit  : 3F/0
  3024 ;;		Unchanged: 0/0
  3025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3026 ;;      Params:         0       0       0       0
  3027 ;;      Locals:         0       0       0       1
  3028 ;;      Temps:          0       0       0       0
  3029 ;;      Totals:         0       0       0       1
  3030 ;;Total ram usage:        1 bytes
  3031 ;; Hardware stack levels used:    1
  3032 ;; Hardware stack levels required when called:   19
  3033 ;; This function calls:
  3034 ;;		_Buzzer_Etat
  3035 ;;		_EUSART1_Check_Buffer
  3036 ;;		_Etat_Get
  3037 ;;		_Etat_Update
  3038 ;;		_Mouvement_Bequille
  3039 ;;		_Mouvement_X
  3040 ;;		_Mouvement_X_Metalhome
  3041 ;;		_Mouvement_Z
  3042 ;;		_SPI_Check_Buffer
  3043 ;;		_delay_n_100ms
  3044 ;;		_delay_s
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text14
  3051  000B92                     __ptext14:
  3052                           	opt stack 0
  3053  000B92                     _Cycle:
  3054                           	opt stack 11
  3055  000B92                     
  3056                           ;MOTEUR.c: 346: EUSART1_Check_Buffer();
  3057  000B92  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  3058                           
  3059                           ;MOTEUR.c: 348: SPI_Check_Buffer();
  3060  000B96  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  3061                           
  3062                           ;MOTEUR.c: 350: switch (Etat) {
  3063  000B9A  D10C               	goto	l8672
  3064  000B9C                     l8536:
  3065                           
  3066                           ;MOTEUR.c: 359: delay_s(1);
  3067  000B9C  0E01               	movlw	1
  3068  000B9E  EC92  F00F         	call	_delay_s
  3069                           
  3070                           ;MOTEUR.c: 363: if (Option_Multitas == 0) {
  3071  000BA2  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3072  000BA4  D01D               	goto	l8556
  3073                           
  3074                           ;MOTEUR.c: 366: Mouvement_X(0, 1, 0x02 | 0x60);
  3075  000BA6  0E01               	movlw	1
  3076  000BA8  0102               	movlb	2	; () banked
  3077  000BAA  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3078  000BAC  0E62               	movlw	98
  3079  000BAE  6F85               	movwf	Mouvement_X@option& (0+255),b
  3080  000BB0  0E00               	movlw	0
  3081  000BB2  EC91  F008         	call	_Mouvement_X
  3082                           
  3083                           ;MOTEUR.c: 370: Patinage_Nb_Essai -= 1;
  3084  000BB6  0100               	movlb	0	; () banked
  3085  000BB8  079A               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;MOTEUR.c: 371: if (Patinage_Nb_Essai > 0) {
  3089  000BBA  519A               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3090  000BBC  E008               	bz	l8552
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;MOTEUR.c: 372: nb_s_fonctionnement = 0;
  3094  000BBE  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3095                           
  3096                           ; BSR set to: 0
  3097                           ;MOTEUR.c: 377: delay_s(3);
  3098  000BC0  0E03               	movlw	3
  3099  000BC2  EC92  F00F         	call	_delay_s
  3100                           
  3101                           ;MOTEUR.c: 378: Etat_Update(2);
  3102  000BC6  0E02               	movlw	2
  3103  000BC8  EC8C  F010         	call	_Etat_Update
  3104                           
  3105                           ;MOTEUR.c: 379: } else {
  3106  000BCC  D7E2               	goto	l8534
  3107  000BCE                     l8552:
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;MOTEUR.c: 380: Etat_Update(2);
  3111  000BCE  0E02               	movlw	2
  3112  000BD0  EC8C  F010         	call	_Etat_Update
  3113                           
  3114                           ;MOTEUR.c: 382: P4_busy = 0;
  3115  000BD4  0100               	movlb	0	; () banked
  3116  000BD6  6BAA               	clrf	_P4_busy& (0+255),b
  3117                           
  3118                           ;MOTEUR.c: 383: Etat_Update(7);
  3119  000BD8  0E07               	movlw	7
  3120  000BDA  EC8C  F010         	call	_Etat_Update
  3121  000BDE  D7D9               	goto	l8534
  3122  000BE0                     l8556:
  3123                           
  3124                           ;MOTEUR.c: 388: Etat_Update(0);
  3125  000BE0  0E00               	movlw	0
  3126  000BE2  EC8C  F010         	call	_Etat_Update
  3127                           
  3128                           ;MOTEUR.c: 390: P4_busy = 0;
  3129  000BE6  0100               	movlb	0	; () banked
  3130  000BE8  6BAA               	clrf	_P4_busy& (0+255),b
  3131  000BEA  D7D3               	goto	l8534
  3132  000BEC                     l8560:
  3133                           
  3134                           ;MOTEUR.c: 398: delay_s(1);
  3135  000BEC  0E01               	movlw	1
  3136  000BEE  EC92  F00F         	call	_delay_s
  3137                           
  3138                           ;MOTEUR.c: 401: Mouvement_X(1, 1, 0x02 | 0x60);
  3139  000BF2  0E01               	movlw	1
  3140  000BF4  0102               	movlb	2	; () banked
  3141  000BF6  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3142  000BF8  0E62               	movlw	98
  3143  000BFA  6F85               	movwf	Mouvement_X@option& (0+255),b
  3144  000BFC  0E01               	movlw	1
  3145  000BFE  EC91  F008         	call	_Mouvement_X
  3146                           
  3147                           ;MOTEUR.c: 402: Patinage_Nb_Essai -= 1;
  3148  000C02  0100               	movlb	0	; () banked
  3149  000C04  079A               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;MOTEUR.c: 403: if (Patinage_Nb_Essai > 0) {
  3153  000C06  519A               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3154  000C08  E008               	bz	l8572
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;MOTEUR.c: 404: nb_s_fonctionnement = 0;
  3158  000C0A  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;MOTEUR.c: 405: delay_s(3);
  3162  000C0C  0E03               	movlw	3
  3163  000C0E  EC92  F00F         	call	_delay_s
  3164                           
  3165                           ;MOTEUR.c: 406: Etat_Update(3);
  3166  000C12  0E03               	movlw	3
  3167  000C14  EC8C  F010         	call	_Etat_Update
  3168                           
  3169                           ;MOTEUR.c: 407: } else {
  3170  000C18  D7BC               	goto	l8534
  3171  000C1A                     l8572:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;MOTEUR.c: 408: Etat_Update(3);
  3175  000C1A  0E03               	movlw	3
  3176  000C1C  EC8C  F010         	call	_Etat_Update
  3177                           
  3178                           ;MOTEUR.c: 410: P4_busy = 0;
  3179  000C20  0100               	movlb	0	; () banked
  3180  000C22  6BAA               	clrf	_P4_busy& (0+255),b
  3181                           
  3182                           ;MOTEUR.c: 411: Etat_Update(7);
  3183  000C24  0E07               	movlw	7
  3184  000C26  EC8C  F010         	call	_Etat_Update
  3185  000C2A  D7B3               	goto	l8534
  3186  000C2C                     l249:
  3187                           
  3188                           ;MOTEUR.c: 415: P4_busy = 0;
  3189  000C2C  0100               	movlb	0	; () banked
  3190  000C2E  6BAA               	clrf	_P4_busy& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;MOTEUR.c: 416: Etat_Update(70);
  3194  000C30  0E46               	movlw	70
  3195  000C32  EC8C  F010         	call	_Etat_Update
  3196                           
  3197                           ;MOTEUR.c: 417: break;
  3198  000C36  D7AD               	goto	l8534
  3199  000C38                     l8580:
  3200                           
  3201                           ; BSR set to: 0
  3202  000C38  0E01               	movlw	1
  3203  000C3A  EC4A  F00F         	call	_Etat_Get
  3204                           
  3205                           ; Switch size 1, requested type "speed"
  3206                           ; Number of cases is 2, Range of values is 2 to 3
  3207                           ; switch strategies available:
  3208                           ; Name         Instructions Cycles
  3209                           ; simple_byte            7     4 (average)
  3210                           ;	Chosen strategy is simple_byte
  3211  000C3E  0A02               	xorlw	2	; case 2
  3212  000C40  E0AD               	bz	l8536
  3213  000C42  0A01               	xorlw	1	; case 3
  3214  000C44  E0D3               	bz	l8560
  3215  000C46  D7F2               	goto	l249
  3216  000C48                     l8582:
  3217                           
  3218                           ;MOTEUR.c: 429: delay_s(1);
  3219  000C48  0E01               	movlw	1
  3220  000C4A  EC92  F00F         	call	_delay_s
  3221                           
  3222                           ;MOTEUR.c: 432: Mouvement_X(0, 1, 0x02 | 0x60);
  3223  000C4E  0E01               	movlw	1
  3224  000C50  0102               	movlb	2	; () banked
  3225  000C52  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3226  000C54  0E62               	movlw	98
  3227  000C56  6F85               	movwf	Mouvement_X@option& (0+255),b
  3228  000C58  0E00               	movlw	0
  3229  000C5A  EC91  F008         	call	_Mouvement_X
  3230                           
  3231                           ;MOTEUR.c: 433: Capteur_Capot_Nb_Evenement -= 1;
  3232  000C5E  0100               	movlb	0	; () banked
  3233  000C60  079D               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;MOTEUR.c: 434: if (Capteur_Capot_Nb_Evenement > 0) {
  3237  000C62  519D               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3238  000C64  E008               	bz	l8594
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;MOTEUR.c: 435: Capteur_Capot_Compteur_Temps_S = 0;
  3242  000C66  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;MOTEUR.c: 436: delay_s(3);
  3246  000C68  0E03               	movlw	3
  3247  000C6A  EC92  F00F         	call	_delay_s
  3248                           
  3249                           ;MOTEUR.c: 437: Etat_Update(2);
  3250  000C6E  0E02               	movlw	2
  3251  000C70  EC8C  F010         	call	_Etat_Update
  3252                           
  3253                           ;MOTEUR.c: 438: } else {
  3254  000C74  D78E               	goto	l8534
  3255  000C76                     l8594:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;MOTEUR.c: 439: Etat_Update(2);
  3259  000C76  0E02               	movlw	2
  3260  000C78  EC8C  F010         	call	_Etat_Update
  3261                           
  3262                           ;MOTEUR.c: 442: P4_busy = 0;
  3263  000C7C  0100               	movlb	0	; () banked
  3264  000C7E  6BAA               	clrf	_P4_busy& (0+255),b
  3265                           
  3266                           ;MOTEUR.c: 443: Etat_Update(7);
  3267  000C80  0E07               	movlw	7
  3268  000C82  EC8C  F010         	call	_Etat_Update
  3269  000C86  D785               	goto	l8534
  3270  000C88                     l8598:
  3271                           
  3272                           ;MOTEUR.c: 448: delay_s(1);
  3273  000C88  0E01               	movlw	1
  3274  000C8A  EC92  F00F         	call	_delay_s
  3275                           
  3276                           ;MOTEUR.c: 451: Mouvement_X(1, 1, 0x02 | 0x60);
  3277  000C8E  0E01               	movlw	1
  3278  000C90  0102               	movlb	2	; () banked
  3279  000C92  6F84               	movwf	Mouvement_X@type_consigne& (0+255),b
  3280  000C94  0E62               	movlw	98
  3281  000C96  6F85               	movwf	Mouvement_X@option& (0+255),b
  3282  000C98  0E01               	movlw	1
  3283  000C9A  EC91  F008         	call	_Mouvement_X
  3284                           
  3285                           ;MOTEUR.c: 452: Capteur_Capot_Nb_Evenement -= 1;
  3286  000C9E  0100               	movlb	0	; () banked
  3287  000CA0  079D               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;MOTEUR.c: 453: if (Capteur_Capot_Nb_Evenement > 0) {
  3291  000CA2  519D               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3292  000CA4  E008               	bz	l8610
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;MOTEUR.c: 454: Capteur_Capot_Compteur_Temps_S = 0;
  3296  000CA6  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;MOTEUR.c: 455: delay_s(3);
  3300  000CA8  0E03               	movlw	3
  3301  000CAA  EC92  F00F         	call	_delay_s
  3302                           
  3303                           ;MOTEUR.c: 456: Etat_Update(3);
  3304  000CAE  0E03               	movlw	3
  3305  000CB0  EC8C  F010         	call	_Etat_Update
  3306                           
  3307                           ;MOTEUR.c: 457: } else {
  3308  000CB4  D76E               	goto	l8534
  3309  000CB6                     l8610:
  3310                           
  3311                           ; BSR set to: 0
  3312                           ;MOTEUR.c: 458: Etat_Update(3);
  3313  000CB6  0E03               	movlw	3
  3314  000CB8  EC8C  F010         	call	_Etat_Update
  3315                           
  3316                           ;MOTEUR.c: 460: P4_busy = 0;
  3317  000CBC  0100               	movlb	0	; () banked
  3318  000CBE  6BAA               	clrf	_P4_busy& (0+255),b
  3319                           
  3320                           ;MOTEUR.c: 463: Etat_Update(77);
  3321  000CC0  0E4D               	movlw	77
  3322  000CC2  EC8C  F010         	call	_Etat_Update
  3323  000CC6  D765               	goto	l8534
  3324  000CC8                     l260:
  3325                           
  3326                           ;MOTEUR.c: 468: P4_busy = 0;
  3327  000CC8  0100               	movlb	0	; () banked
  3328  000CCA  6BAA               	clrf	_P4_busy& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;MOTEUR.c: 469: Etat_Update(70);
  3332  000CCC  0E46               	movlw	70
  3333  000CCE  EC8C  F010         	call	_Etat_Update
  3334                           
  3335                           ;MOTEUR.c: 470: break;
  3336  000CD2  D75F               	goto	l8534
  3337  000CD4                     l8618:
  3338                           
  3339                           ; BSR set to: 0
  3340  000CD4  0E01               	movlw	1
  3341  000CD6  EC4A  F00F         	call	_Etat_Get
  3342                           
  3343                           ; Switch size 1, requested type "speed"
  3344                           ; Number of cases is 2, Range of values is 2 to 3
  3345                           ; switch strategies available:
  3346                           ; Name         Instructions Cycles
  3347                           ; simple_byte            7     4 (average)
  3348                           ;	Chosen strategy is simple_byte
  3349  000CDA  0A02               	xorlw	2	; case 2
  3350  000CDC  E0B5               	bz	l8582
  3351  000CDE  0A01               	xorlw	1	; case 3
  3352  000CE0  E0D3               	bz	l8598
  3353  000CE2  D7F2               	goto	l260
  3354  000CE4                     l8620:
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;MOTEUR.c: 484: P4_busy = 1;
  3358  000CE4  0E01               	movlw	1
  3359  000CE6  6FAA               	movwf	_P4_busy& (0+255),b
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;MOTEUR.c: 485: Etat_Update(77);
  3363  000CE8  0E4D               	movlw	77
  3364  000CEA  EC8C  F010         	call	_Etat_Update
  3365                           
  3366                           ;MOTEUR.c: 486: for (i = 0; i < 4; i++) {
  3367  000CEE  0102               	movlb	2	; () banked
  3368  000CF0  6B89               	clrf	Cycle@i& (0+255),b
  3369  000CF2                     l8630:
  3370                           
  3371                           ; BSR set to: 2
  3372                           ;MOTEUR.c: 487: Buzzer_Etat((unsigned char) 1);
  3373  000CF2  0E01               	movlw	1
  3374  000CF4  ECA6  F011         	call	_Buzzer_Etat
  3375                           
  3376                           ;MOTEUR.c: 488: delay_n_100ms(4);
  3377  000CF8  0E04               	movlw	4
  3378  000CFA  EC3C  F011         	call	_delay_n_100ms
  3379                           
  3380                           ;MOTEUR.c: 489: Buzzer_Etat((unsigned char) 0);
  3381  000CFE  0E00               	movlw	0
  3382  000D00  ECA6  F011         	call	_Buzzer_Etat
  3383                           
  3384                           ;MOTEUR.c: 490: delay_n_100ms(2);
  3385  000D04  0E02               	movlw	2
  3386  000D06  EC3C  F011         	call	_delay_n_100ms
  3387  000D0A  0102               	movlb	2	; () banked
  3388  000D0C  2B89               	incf	Cycle@i& (0+255),f,b
  3389                           
  3390                           ; BSR set to: 2
  3391  000D0E  0E03               	movlw	3
  3392  000D10  6589               	cpfsgt	Cycle@i& (0+255),b
  3393  000D12  D7EF               	goto	l8630
  3394  000D14  D73E               	goto	l8534
  3395  000D16                     l8636:
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;MOTEUR.c: 495: P4_busy = 1;
  3399  000D16  0E01               	movlw	1
  3400  000D18  6FAA               	movwf	_P4_busy& (0+255),b
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;MOTEUR.c: 496: Etat_Update(77);
  3404  000D1A  0E4D               	movlw	77
  3405  000D1C  EC8C  F010         	call	_Etat_Update
  3406                           
  3407                           ;MOTEUR.c: 500: for (i = 0; i < 4; i++) {
  3408  000D20  0102               	movlb	2	; () banked
  3409  000D22  6B89               	clrf	Cycle@i& (0+255),b
  3410  000D24                     l8646:
  3411                           
  3412                           ; BSR set to: 2
  3413                           ;MOTEUR.c: 501: Buzzer_Etat((unsigned char) 1);
  3414  000D24  0E01               	movlw	1
  3415  000D26  ECA6  F011         	call	_Buzzer_Etat
  3416                           
  3417                           ;MOTEUR.c: 502: delay_n_100ms(4);
  3418  000D2A  0E04               	movlw	4
  3419  000D2C  EC3C  F011         	call	_delay_n_100ms
  3420                           
  3421                           ;MOTEUR.c: 503: Buzzer_Etat((unsigned char) 0);
  3422  000D30  0E00               	movlw	0
  3423  000D32  ECA6  F011         	call	_Buzzer_Etat
  3424                           
  3425                           ;MOTEUR.c: 504: delay_n_100ms(2);
  3426  000D36  0E02               	movlw	2
  3427  000D38  EC3C  F011         	call	_delay_n_100ms
  3428  000D3C  0102               	movlb	2	; () banked
  3429  000D3E  2B89               	incf	Cycle@i& (0+255),f,b
  3430                           
  3431                           ; BSR set to: 2
  3432  000D40  0E03               	movlw	3
  3433  000D42  6589               	cpfsgt	Cycle@i& (0+255),b
  3434  000D44  D7EF               	goto	l8646
  3435  000D46  D725               	goto	l8534
  3436  000D48                     l8654:
  3437                           
  3438                           ; BSR set to: 0
  3439  000D48  51A7               	movf	_Alarme& (0+255),w,b	;volatile
  3440                           
  3441                           ; Switch size 1, requested type "speed"
  3442                           ; Number of cases is 4, Range of values is 1 to 4
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte           13     7 (average)
  3446                           ;	Chosen strategy is simple_byte
  3447  000D4A  0A01               	xorlw	1	; case 1
  3448  000D4C  E0CB               	bz	l8620
  3449  000D4E  0A03               	xorlw	3	; case 2
  3450  000D50  E0E2               	bz	l8636
  3451  000D52  0A01               	xorlw	1	; case 3
  3452  000D54  E101 D770          	bz	l8580
  3453  000D58  0A07               	xorlw	7	; case 4
  3454  000D5A  E0BC               	bz	l8618
  3455  000D5C  D71A               	goto	l8534
  3456  000D5E                     l8656:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;MOTEUR.c: 524: direction = 1;
  3460  000D5E  0E01               	movlw	1
  3461  000D60  6F8D               	movwf	_direction& (0+255),b	;volatile
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;MOTEUR.c: 526: Mouvement_X_Metalhome(direction);
  3465  000D62  518D               	movf	_direction& (0+255),w,b	;volatile
  3466  000D64  ECDC  F00B         	call	_Mouvement_X_Metalhome
  3467                           
  3468                           ;MOTEUR.c: 528: break;
  3469  000D68  D714               	goto	l8534
  3470  000D6A                     l270:
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;MOTEUR.c: 533: direction = 0;
  3474  000D6A  6B8D               	clrf	_direction& (0+255),b	;volatile
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;MOTEUR.c: 534: Mouvement_X_Metalhome(direction);
  3478  000D6C  518D               	movf	_direction& (0+255),w,b	;volatile
  3479  000D6E  ECDC  F00B         	call	_Mouvement_X_Metalhome
  3480                           
  3481                           ;MOTEUR.c: 537: break;
  3482  000D72  D70F               	goto	l8534
  3483  000D74                     l8662:
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;MOTEUR.c: 541: Mouvement_Z(direction, type_consigne, mouvement_option);
  3487  000D74  C08F  F286         	movff	_type_consigne,Mouvement_Z@type_consigne
  3488  000D78  C08E  F287         	movff	_mouvement_option,Mouvement_Z@option
  3489  000D7C  518D               	movf	_direction& (0+255),w,b	;volatile
  3490  000D7E  EC32  F00B         	call	_Mouvement_Z
  3491                           
  3492                           ;MOTEUR.c: 542: break;
  3493  000D82  D707               	goto	l8534
  3494  000D84                     l8664:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;MOTEUR.c: 547: Mouvement_Z(direction, type_consigne, mouvement_option);
  3498  000D84  C08F  F286         	movff	_type_consigne,Mouvement_Z@type_consigne
  3499  000D88  C08E  F287         	movff	_mouvement_option,Mouvement_Z@option
  3500  000D8C  518D               	movf	_direction& (0+255),w,b	;volatile
  3501  000D8E  EC32  F00B         	call	_Mouvement_Z
  3502                           
  3503                           ;MOTEUR.c: 549: break;
  3504  000D92  D6FF               	goto	l8534
  3505  000D94                     l8666:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;MOTEUR.c: 554: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3509  000D94  C08F  F286         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3510  000D98  C08E  F287         	movff	_mouvement_option,Mouvement_Bequille@option
  3511  000D9C  518D               	movf	_direction& (0+255),w,b	;volatile
  3512  000D9E  EC87  F00B         	call	_Mouvement_Bequille
  3513                           
  3514                           ;MOTEUR.c: 556: break;
  3515  000DA2  D6F7               	goto	l8534
  3516  000DA4                     l8668:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;MOTEUR.c: 562: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3520  000DA4  C08F  F286         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3521  000DA8  C08E  F287         	movff	_mouvement_option,Mouvement_Bequille@option
  3522  000DAC  518D               	movf	_direction& (0+255),w,b	;volatile
  3523  000DAE  EC87  F00B         	call	_Mouvement_Bequille
  3524                           
  3525                           ;MOTEUR.c: 565: break;
  3526  000DB2  D6EF               	goto	l8534
  3527  000DB4                     l8672:
  3528  000DB4  0100               	movlb	0	; () banked
  3529  000DB6  51A8               	movf	_Etat& (0+255),w,b	;volatile
  3530                           
  3531                           ; Switch size 1, requested type "speed"
  3532                           ; Number of cases is 7, Range of values is 1 to 9
  3533                           ; switch strategies available:
  3534                           ; Name         Instructions Cycles
  3535                           ; simple_byte           22    12 (average)
  3536                           ;	Chosen strategy is simple_byte
  3537  000DB8  0A01               	xorlw	1	; case 1
  3538  000DBA  E0C6               	bz	l8654
  3539  000DBC  0A03               	xorlw	3	; case 2
  3540  000DBE  E0CF               	bz	l8656
  3541  000DC0  0A01               	xorlw	1	; case 3
  3542  000DC2  E0D3               	bz	l270
  3543  000DC4  0A07               	xorlw	7	; case 4
  3544  000DC6  E0DE               	bz	l8664
  3545  000DC8  0A01               	xorlw	1	; case 5
  3546  000DCA  E0D4               	bz	l8662
  3547  000DCC  0A0D               	xorlw	13	; case 8
  3548  000DCE  E0EA               	bz	l8668
  3549  000DD0  0A01               	xorlw	1	; case 9
  3550  000DD2  E0E0               	bz	l8666
  3551                           
  3552                           ; BSR set to: 0
  3553  000DD4  D6DE               	goto	l8534
  3554  000DD6                     __end_of_Cycle:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           prodl	equ	0xFF3
  3558                           intcon	equ	0xFF2
  3559                           intcon2	equ	0xFF1
  3560                           intcon3	equ	0xFF0
  3561                           postinc0	equ	0xFEE
  3562                           wreg	equ	0xFE8
  3563                           postdec1	equ	0xFE5
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           
  3570 ;; *************** function _delay_n_100ms *****************
  3571 ;; Defined at:
  3572 ;;		line 61 in file "horloge.c"
  3573 ;; Parameters:    Size  Location     Type
  3574 ;;  nb_100ms        1    wreg     unsigned char 
  3575 ;; Auto vars:     Size  Location     Type
  3576 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3577 ;;  i               1   16[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  1    wreg      void 
  3580 ;; Registers used:
  3581 ;;		wreg, status,2, status,0, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/2
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3587 ;;      Params:         0       0       0       0
  3588 ;;      Locals:         2       0       0       0
  3589 ;;      Temps:          0       0       0       0
  3590 ;;      Totals:         2       0       0       0
  3591 ;;Total ram usage:        2 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:   11
  3594 ;; This function calls:
  3595 ;;		_delay_100ms
  3596 ;; This function is called by:
  3597 ;;		_Cycle
  3598 ;; This function uses a non-reentrant model
  3599 ;;
  3600                           
  3601                           	psect	text15
  3602  002278                     __ptext15:
  3603                           	opt stack 0
  3604  002278                     _delay_n_100ms:
  3605                           	opt stack 18
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;incstack = 0
  3609                           ;delay_n_100ms@nb_100ms stored from wreg
  3610  002278  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3611                           
  3612                           ;horloge.c: 62: unsigned char i;
  3613                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3614  00227A  6A11               	clrf	delay_n_100ms@i,c
  3615  00227C  D003               	goto	l8246
  3616  00227E                     l8242:
  3617                           
  3618                           ;horloge.c: 64: delay_100ms();
  3619  00227E  ECD7  F00A         	call	_delay_100ms	;wreg free
  3620  002282  2A11               	incf	delay_n_100ms@i,f,c
  3621  002284                     l8246:
  3622  002284  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3623  002286  5C11               	subwf	delay_n_100ms@i,w,c
  3624  002288  E3FA               	bnc	l8242
  3625  00228A  0012               	return		;funcret
  3626  00228C                     __end_of_delay_n_100ms:
  3627                           	opt stack 0
  3628                           tblptru	equ	0xFF8
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           intcon2	equ	0xFF1
  3632                           intcon3	equ	0xFF0
  3633                           postinc0	equ	0xFEE
  3634                           wreg	equ	0xFE8
  3635                           postdec1	equ	0xFE5
  3636                           fsr1h	equ	0xFE2
  3637                           fsr1l	equ	0xFE1
  3638                           indf2	equ	0xFDF
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           
  3642 ;; *************** function _Mouvement_Z *****************
  3643 ;; Defined at:
  3644 ;;		line 936 in file "action.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  direction       1    wreg     unsigned char 
  3647 ;;  type_consign    1    6[BANK2 ] unsigned char 
  3648 ;;  option          1    7[BANK2 ] unsigned char 
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;  direction       1    8[BANK2 ] unsigned char 
  3651 ;;  index           2    0        unsigned int 
  3652 ;;  Option_Temps    1    0        unsigned char 
  3653 ;;  i_max           1    0        unsigned char 
  3654 ;;  i_min           1    0        unsigned char 
  3655 ;;  i               1    0        unsigned char 
  3656 ;; Return value:  Size  Location     Type
  3657 ;;                  1    wreg      void 
  3658 ;; Registers used:
  3659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3660 ;; Tracked objects:
  3661 ;;		On entry : 3F/0
  3662 ;;		On exit  : 3D/0
  3663 ;;		Unchanged: 0/0
  3664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3665 ;;      Params:         0       0       0       2
  3666 ;;      Locals:         0       0       0       1
  3667 ;;      Temps:          0       0       0       0
  3668 ;;      Totals:         0       0       0       3
  3669 ;;Total ram usage:        3 bytes
  3670 ;; Hardware stack levels used:    1
  3671 ;; Hardware stack levels required when called:   18
  3672 ;; This function calls:
  3673 ;;		_Check_List_Moteur_2
  3674 ;;		_Coupe_Moteur
  3675 ;;		_Detection_Pion_Off
  3676 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3677 ;;		_Init_Moteur_2
  3678 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3679 ;;		_TIMER2_On
  3680 ;;		_delay_s
  3681 ;;		_u_Init_PWM
  3682 ;; This function is called by:
  3683 ;;		_Cycle
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text16
  3688  001664                     __ptext16:
  3689                           	opt stack 0
  3690  001664                     _Mouvement_Z:
  3691                           	opt stack 11
  3692                           
  3693                           ;incstack = 0
  3694                           ;Mouvement_Z@direction stored from wreg
  3695  001664  0102               	movlb	2	; () banked
  3696  001666  6F88               	movwf	Mouvement_Z@direction& (0+255),b
  3697                           
  3698                           ;action.c: 937: unsigned char i, i_min, i_max;
  3699                           ;action.c: 938: unsigned char Option_Temps_S;
  3700                           ;action.c: 946: Surveillance_Consommation_Moteur_2_Desactiver();
  3701  001668  ECC6  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3702                           
  3703                           ;action.c: 948: Detection_Pion_Off();
  3704  00166C  ECED  F011         	call	_Detection_Pion_Off	;wreg free
  3705                           
  3706                           ;action.c: 951: nb_s_pelle = option;
  3707  001670  C287  F0A0         	movff	Mouvement_Z@option,_nb_s_pelle
  3708                           
  3709                           ;action.c: 954: consigne = 10;
  3710  001674  0E0A               	movlw	10
  3711  001676  0100               	movlb	0	; () banked
  3712  001678  6F95               	movwf	_consigne& (0+255),b	;volatile
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;action.c: 965: index = 0;
  3716  00167A  ECB7  F00D         	call	_u_Init_PWM	;wreg free
  3717                           
  3718                           ; BSR set to: 0
  3719                           ;action.c: 966: TMR2 = 0;
  3720  00167E  6ACC               	clrf	4044,c	;volatile
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;action.c: 967: TMR2IF = 0;
  3724  001680  929E               	bcf	3998,1,c	;volatile
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;action.c: 973: LATEbits.LATE2 = 0;
  3728  001682  948D               	bcf	3981,2,c	;volatile
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;action.c: 978: moteur_indice = 2;
  3732  001684  0E02               	movlw	2
  3733  001686  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;action.c: 979: Init_ADC_Single_Shoot_I_Moteur_2();
  3737  001688  EC91  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;action.c: 982: if (direction == 1) {
  3741  00168C  0102               	movlb	2	; () banked
  3742  00168E  0588               	decf	Mouvement_Z@direction& (0+255),w,b
  3743  001690  E103               	bnz	l1019
  3744                           
  3745                           ; BSR set to: 2
  3746                           ;action.c: 983: LATD7 = 0;LATD6 = 1;
  3747  001692  9E8C               	bcf	3980,7,c	;volatile
  3748  001694  8C8C               	bsf	3980,6,c	;volatile
  3749                           
  3750                           ;action.c: 984: } else {
  3751  001696  D002               	goto	l8334
  3752  001698                     l1019:
  3753                           
  3754                           ; BSR set to: 2
  3755                           ;action.c: 985: LATD6 = 0;LATD7 = 1;
  3756  001698  9C8C               	bcf	3980,6,c	;volatile
  3757  00169A  8E8C               	bsf	3980,7,c	;volatile
  3758  00169C                     l8334:
  3759                           
  3760                           ; BSR set to: 2
  3761                           ;action.c: 986: }
  3762                           ;action.c: 987: PDC1L = 1 << 2;
  3763  00169C  0E04               	movlw	4
  3764  00169E  6E77               	movwf	3959,c	;volatile
  3765                           
  3766                           ; BSR set to: 2
  3767                           ;action.c: 988: PDC1H = 0;
  3768  0016A0  6A76               	clrf	3958,c	;volatile
  3769                           
  3770                           ;action.c: 989: OVDCOND = 0b00000100;
  3771  0016A2  0E04               	movlw	4
  3772  0016A4  6E6B               	movwf	3947,c	;volatile
  3773                           
  3774                           ; BSR set to: 2
  3775                           ;action.c: 990: LATCbits.LATC1 = 1;
  3776  0016A6  828B               	bsf	3979,1,c	;volatile
  3777                           
  3778                           ;action.c: 992: erreur = 1;
  3779  0016A8  0100               	movlb	0	; () banked
  3780  0016AA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3781  0016AC  0E01               	movlw	1
  3782  0016AE  6F84               	movwf	_erreur& (0+255),b	;volatile
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;action.c: 993: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3786  0016B0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3787  0016B2  46E8               	rlncf	wreg,f,c
  3788  0016B4  0BFC               	andlw	252
  3789  0016B6  6E77               	movwf	3959,c	;volatile
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;action.c: 994: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3793  0016B8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3794  0016BA  46E8               	rlncf	wreg,f,c
  3795  0016BC  0B03               	andlw	3
  3796  0016BE  6E76               	movwf	3958,c	;volatile
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;action.c: 997: erreur_accumulator = 0;
  3800  0016C0  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3801  0016C2  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;action.c: 1000: Nouvelle_Valeur_ADC = 0;
  3805  0016C4  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;action.c: 1004: PIE3bits.PTIE = 0;
  3809  0016C6  98A3               	bcf	4003,4,c	;volatile
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;action.c: 1005: PIE1bits.ADIE = 1;
  3813  0016C8  8C9D               	bsf	3997,6,c	;volatile
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;action.c: 1006: PIE1bits.ADIE = 1;
  3817  0016CA  8C9D               	bsf	3997,6,c	;volatile
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;action.c: 1008: PEIE = 1;
  3821  0016CC  8CF2               	bsf	intcon,6,c	;volatile
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;action.c: 1009: GIE = 1;
  3825  0016CE  8EF2               	bsf	intcon,7,c	;volatile
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;action.c: 1010: TIMER2_On();
  3829  0016D0  ECF5  F011         	call	_TIMER2_On	;wreg free
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;action.c: 1011: ADIF = 0;
  3833  0016D4  9C9E               	bcf	3998,6,c	;volatile
  3834                           
  3835                           ;action.c: 1028: Init_Moteur_2();
  3836  0016D6  EC4F  F011         	call	_Init_Moteur_2	;wreg free
  3837  0016DA                     l8362:
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;action.c: 1032: Check_List_Moteur_2();
  3841  0016DA  EC10  F010         	call	_Check_List_Moteur_2	;wreg free
  3842                           
  3843                           ;action.c: 1033: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat
      +                           == 4)));
  3844  0016DE  0102               	movlb	2	; () banked
  3845  0016E0  0588               	decf	Mouvement_Z@direction& (0+255),w,b
  3846  0016E2  E104               	bnz	l8368
  3847                           
  3848                           ; BSR set to: 2
  3849  0016E4  0E05               	movlw	5
  3850  0016E6  0100               	movlb	0	; () banked
  3851  0016E8  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  3852  0016EA  E0F7               	bz	l8362
  3853  0016EC                     l8368:
  3854  0016EC  0102               	movlb	2	; () banked
  3855  0016EE  5188               	movf	Mouvement_Z@direction& (0+255),w,b
  3856  0016F0  E104               	bnz	l1026
  3857                           
  3858                           ; BSR set to: 2
  3859  0016F2  0E04               	movlw	4
  3860  0016F4  0100               	movlb	0	; () banked
  3861  0016F6  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  3862  0016F8  E0F0               	bz	l8362
  3863  0016FA                     l1026:
  3864                           
  3865                           ;action.c: 1037: PIE3bits.PTIE = 0;
  3866  0016FA  98A3               	bcf	4003,4,c	;volatile
  3867                           
  3868                           ;action.c: 1038: PIE1bits.ADIE = 0;
  3869  0016FC  9C9D               	bcf	3997,6,c	;volatile
  3870                           
  3871                           ;action.c: 1043: LATEbits.LATE2 = 0;
  3872  0016FE  948D               	bcf	3981,2,c	;volatile
  3873                           
  3874                           ;action.c: 1050: Surveillance_Consommation_Moteur_2_Desactiver();
  3875  001700  ECC6  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3876                           
  3877                           ;action.c: 1052: Coupe_Moteur();
  3878  001704  EC10  F011         	call	_Coupe_Moteur	;wreg free
  3879                           
  3880                           ;action.c: 1053: delay_s(1);
  3881  001708  0E01               	movlw	1
  3882  00170A  EF92  F00F         	goto	_delay_s
  3883  00170E                     __end_of_Mouvement_Z:
  3884                           	opt stack 0
  3885                           tblptru	equ	0xFF8
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           intcon2	equ	0xFF1
  3889                           intcon3	equ	0xFF0
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1h	equ	0xFE2
  3894                           fsr1l	equ	0xFE1
  3895                           indf2	equ	0xFDF
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           
  3899 ;; *************** function _Init_Moteur_2 *****************
  3900 ;; Defined at:
  3901 ;;		line 174 in file "action.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 3F/0
  3912 ;;		On exit  : 3F/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3915 ;;      Params:         0       0       0       0
  3916 ;;      Locals:         0       0       0       0
  3917 ;;      Temps:          0       0       0       0
  3918 ;;      Totals:         0       0       0       0
  3919 ;;Total ram usage:        0 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:   11
  3922 ;; This function calls:
  3923 ;;		_TIMER0_On
  3924 ;; This function is called by:
  3925 ;;		_Mouvement_Z
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text17
  3930  00229E                     __ptext17:
  3931                           	opt stack 0
  3932  00229E                     _Init_Moteur_2:
  3933                           	opt stack 17
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;action.c: 179: nb_s_fonctionnement = 0;
  3937                           
  3938                           ;incstack = 0
  3939  00229E  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3940                           
  3941                           ;action.c: 180: nb_Pion = 0;
  3942  0022A0  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  3943                           
  3944                           ;action.c: 181: nb_100ms_Timer_5 = 0;
  3945  0022A2  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;action.c: 182: TIMER0_On();
  3949  0022A4  ECFA  F010         	call	_TIMER0_On	;wreg free
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;action.c: 185: Compteur_IRQ_I_Moteur_2 = 0;
  3953  0022A8  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;action.c: 186: LATCbits.LATC2=0;
  3957  0022AA  948B               	bcf	3979,2,c	;volatile
  3958                           
  3959                           ; BSR set to: 0
  3960  0022AC  0012               	return		;funcret
  3961  0022AE                     __end_of_Init_Moteur_2:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           intcon2	equ	0xFF1
  3967                           intcon3	equ	0xFF0
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           postdec1	equ	0xFE5
  3971                           fsr1h	equ	0xFE2
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           
  3977 ;; *************** function _Check_List_Moteur_2 *****************
  3978 ;; Defined at:
  3979 ;;		line 196 in file "action.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;		None
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;		None
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      void 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3993 ;;      Params:         0       0       0       0
  3994 ;;      Locals:         0       0       0       0
  3995 ;;      Temps:          0       0       0       0
  3996 ;;      Totals:         0       0       0       0
  3997 ;;Total ram usage:        0 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:   17
  4000 ;; This function calls:
  4001 ;;		_EUSART1_Check_Buffer
  4002 ;;		_Etat_Update
  4003 ;;		_SPI_Check_Buffer
  4004 ;; This function is called by:
  4005 ;;		_Mouvement_Z
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text18
  4010  002020                     __ptext18:
  4011                           	opt stack 0
  4012  002020                     _Check_List_Moteur_2:
  4013                           	opt stack 11
  4014                           
  4015                           ;action.c: 205: EUSART1_Check_Buffer();
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;incstack = 0
  4019  002020  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4020                           
  4021                           ;action.c: 206: SPI_Check_Buffer();
  4022  002024  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  4023                           
  4024                           ;action.c: 217: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  4025  002028  0100               	movlb	0	; () banked
  4026  00202A  51A0               	movf	_nb_s_pelle& (0+255),w,b
  4027  00202C  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4028  00202E  E207               	bc	l977
  4029                           
  4030                           ; BSR set to: 0
  4031  002030  0E02               	movlw	2
  4032  002032  65A5               	cpfsgt	_nb_s_fonctionnement& (0+255),b	;volatile
  4033  002034  0C02               	retlw	2
  4034                           
  4035                           ; BSR set to: 0
  4036  002036  5190               	movf	_Pelle_I_Max& (0+255),w,b
  4037  002038  5D97               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  4038  00203A  A0D8               	btfss	status,0,c
  4039  00203C  0012               	return	
  4040  00203E                     l977:
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;action.c: 221: P4_busy = 0;
  4044  00203E  6BAA               	clrf	_P4_busy& (0+255),b
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;action.c: 222: Etat_Update(0);
  4048  002040  0E00               	movlw	0
  4049  002042  EF8C  F010         	goto	_Etat_Update
  4050  002046                     __end_of_Check_List_Moteur_2:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           prodl	equ	0xFF3
  4054                           intcon	equ	0xFF2
  4055                           intcon2	equ	0xFF1
  4056                           intcon3	equ	0xFF0
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           postdec1	equ	0xFE5
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _Mouvement_X_Metalhome *****************
  4068 ;; Defined at:
  4069 ;;		line 1379 in file "action.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;  direction       1    wreg     unsigned char 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  direction       1    4[BANK2 ] unsigned char 
  4074 ;;  index           2    0        unsigned int 
  4075 ;;  Option_Temps    1    0        unsigned char 
  4076 ;;  i_max           1    0        unsigned char 
  4077 ;;  i_min           1    0        unsigned char 
  4078 ;;  i               1    0        unsigned char 
  4079 ;; Return value:  Size  Location     Type
  4080 ;;                  1    wreg      void 
  4081 ;; Registers used:
  4082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4083 ;; Tracked objects:
  4084 ;;		On entry : 3F/0
  4085 ;;		On exit  : 0/0
  4086 ;;		Unchanged: 0/0
  4087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4088 ;;      Params:         0       0       0       0
  4089 ;;      Locals:         0       0       0       1
  4090 ;;      Temps:          0       0       0       0
  4091 ;;      Totals:         0       0       0       1
  4092 ;;Total ram usage:        1 bytes
  4093 ;; Hardware stack levels used:    1
  4094 ;; Hardware stack levels required when called:   18
  4095 ;; This function calls:
  4096 ;;		_Capteur_Capot_Off
  4097 ;;		_Check_List_Moteur_Metalhome
  4098 ;;		_Coupe_Moteur
  4099 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4100 ;;		_Init_Moteur_1
  4101 ;;		_Stop_Moteur_1
  4102 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4103 ;;		_TIMER2_On
  4104 ;;		_u_Init_PWM
  4105 ;; This function is called by:
  4106 ;;		_Cycle
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text19
  4111  0017B8                     __ptext19:
  4112                           	opt stack 0
  4113  0017B8                     _Mouvement_X_Metalhome:
  4114                           	opt stack 11
  4115                           
  4116                           ;incstack = 0
  4117                           ;Mouvement_X_Metalhome@direction stored from wreg
  4118  0017B8  0102               	movlb	2	; () banked
  4119  0017BA  6F84               	movwf	Mouvement_X_Metalhome@direction& (0+255),b
  4120                           
  4121                           ;action.c: 1381: unsigned char i, i_min, i_max;
  4122                           ;action.c: 1382: unsigned char Option_Temps_S;
  4123                           ;action.c: 1392: consigne = 10;
  4124  0017BC  0E0A               	movlw	10
  4125  0017BE  0100               	movlb	0	; () banked
  4126  0017C0  6F95               	movwf	_consigne& (0+255),b	;volatile
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;action.c: 1399: Surveillance_Consommation_Moteur_1_Desactiver();
  4130  0017C2  ECBA  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4131                           
  4132                           ;action.c: 1410: index = 0;
  4133  0017C6  ECB7  F00D         	call	_u_Init_PWM	;wreg free
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;action.c: 1411: TMR2 = 0;
  4137  0017CA  6ACC               	clrf	4044,c	;volatile
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;action.c: 1412: TMR2IF = 0;
  4141  0017CC  929E               	bcf	3998,1,c	;volatile
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;action.c: 1432: moteur_indice = 1;
  4145  0017CE  0E01               	movlw	1
  4146  0017D0  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  4147                           
  4148                           ; BSR set to: 0
  4149                           ;action.c: 1433: Init_ADC_Single_Shoot_I_Moteur_1();
  4150  0017D2  EC28  F00D         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;action.c: 1436: if (direction == 1) {
  4154  0017D6  0102               	movlb	2	; () banked
  4155  0017D8  0584               	decf	Mouvement_X_Metalhome@direction& (0+255),w,b
  4156  0017DA  E103               	bnz	l1061
  4157                           
  4158                           ; BSR set to: 2
  4159                           ;action.c: 1437: LATD5 = 0;LATD4 = 1;
  4160  0017DC  9A8C               	bcf	3980,5,c	;volatile
  4161  0017DE  888C               	bsf	3980,4,c	;volatile
  4162                           
  4163                           ;action.c: 1438: } else {
  4164  0017E0  D002               	goto	l8266
  4165  0017E2                     l1061:
  4166                           
  4167                           ; BSR set to: 2
  4168                           ;action.c: 1439: LATD4 = 0;LATD5 = 1;
  4169  0017E2  988C               	bcf	3980,4,c	;volatile
  4170  0017E4  8A8C               	bsf	3980,5,c	;volatile
  4171  0017E6                     l8266:
  4172                           
  4173                           ; BSR set to: 2
  4174                           ;action.c: 1440: }
  4175                           ;action.c: 1441: PDC0L = 1 << 2;
  4176  0017E6  0E04               	movlw	4
  4177  0017E8  6E79               	movwf	3961,c	;volatile
  4178                           
  4179                           ; BSR set to: 2
  4180                           ;action.c: 1442: PDC0H = 0;
  4181  0017EA  6A78               	clrf	3960,c	;volatile
  4182                           
  4183                           ;action.c: 1443: OVDCOND = 0b00000001;
  4184  0017EC  0E01               	movlw	1
  4185  0017EE  6E6B               	movwf	3947,c	;volatile
  4186                           
  4187                           ; BSR set to: 2
  4188                           ;action.c: 1444: LATCbits.LATC0 = 1;
  4189  0017F0  808B               	bsf	3979,0,c	;volatile
  4190                           
  4191                           ;action.c: 1447: erreur = 1;
  4192  0017F2  0100               	movlb	0	; () banked
  4193  0017F4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4194  0017F6  6F84               	movwf	_erreur& (0+255),b	;volatile
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;action.c: 1448: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4198  0017F8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4199  0017FA  46E8               	rlncf	wreg,f,c
  4200  0017FC  0BFC               	andlw	252
  4201  0017FE  6E79               	movwf	3961,c	;volatile
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;action.c: 1449: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4205  001800  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4206  001802  46E8               	rlncf	wreg,f,c
  4207  001804  0B03               	andlw	3
  4208  001806  6E78               	movwf	3960,c	;volatile
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;action.c: 1452: erreur_accumulator = 0;
  4212  001808  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4213  00180A  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;action.c: 1455: Nouvelle_Valeur_ADC = 0;
  4217  00180C  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;action.c: 1465: PIE3bits.PTIE = 0;
  4221  00180E  98A3               	bcf	4003,4,c	;volatile
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;action.c: 1466: PIE1bits.ADIE = 1;
  4225  001810  8C9D               	bsf	3997,6,c	;volatile
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;action.c: 1468: PEIE = 1;
  4229  001812  8CF2               	bsf	intcon,6,c	;volatile
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;action.c: 1469: GIE = 1;
  4233  001814  8EF2               	bsf	intcon,7,c	;volatile
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;action.c: 1470: TIMER2_On();
  4237  001816  ECF5  F011         	call	_TIMER2_On	;wreg free
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;action.c: 1471: ADIF = 0;
  4241  00181A  9C9E               	bcf	3998,6,c	;volatile
  4242                           
  4243                           ;action.c: 1475: Init_Moteur_1();
  4244  00181C  EC57  F011         	call	_Init_Moteur_1	;wreg free
  4245  001820                     l8292:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;action.c: 1595: Check_List_Moteur_Metalhome();
  4249  001820  EC63  F00F         	call	_Check_List_Moteur_Metalhome	;wreg free
  4250                           
  4251                           ;action.c: 1596: } while (
  4252                           ;action.c: 1597: ((direction == 1) && (Etat == 2) )
  4253                           ;action.c: 1598: |
  4254                           ;action.c: 1599: ((direction == 0) && (Etat == 3))
  4255                           ;action.c: 1601: );
  4256  001824  0102               	movlb	2	; () banked
  4257  001826  0584               	decf	Mouvement_X_Metalhome@direction& (0+255),w,b
  4258  001828  E104               	bnz	l8298
  4259                           
  4260                           ; BSR set to: 2
  4261  00182A  0E02               	movlw	2
  4262  00182C  0100               	movlb	0	; () banked
  4263  00182E  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4264  001830  E0F7               	bz	l8292
  4265  001832                     l8298:
  4266  001832  0102               	movlb	2	; () banked
  4267  001834  5184               	movf	Mouvement_X_Metalhome@direction& (0+255),w,b
  4268  001836  E104               	bnz	l8302
  4269                           
  4270                           ; BSR set to: 2
  4271  001838  0E03               	movlw	3
  4272  00183A  0100               	movlb	0	; () banked
  4273  00183C  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4274  00183E  E0F0               	bz	l8292
  4275  001840                     l8302:
  4276                           
  4277                           ;action.c: 1612: Stop_Moteur_1();
  4278  001840  EC0A  F012         	call	_Stop_Moteur_1	;wreg free
  4279                           
  4280                           ;action.c: 1613: Capteur_Capot_Off();
  4281  001844  EC0C  F012         	call	_Capteur_Capot_Off	;wreg free
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;action.c: 1662: PIE3bits.PTIE = 0;
  4285  001848  98A3               	bcf	4003,4,c	;volatile
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;action.c: 1663: PIE1bits.ADIE = 0;
  4289  00184A  9C9D               	bcf	3997,6,c	;volatile
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;action.c: 1665: Surveillance_Consommation_Moteur_1_Desactiver();
  4293  00184C  ECBA  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4294                           
  4295                           ;action.c: 1667: Coupe_Moteur();
  4296  001850  EF10  F011         	goto	_Coupe_Moteur	;wreg free
  4297  001854                     __end_of_Mouvement_X_Metalhome:
  4298                           	opt stack 0
  4299                           tblptru	equ	0xFF8
  4300                           prodl	equ	0xFF3
  4301                           intcon	equ	0xFF2
  4302                           intcon2	equ	0xFF1
  4303                           intcon3	equ	0xFF0
  4304                           postinc0	equ	0xFEE
  4305                           wreg	equ	0xFE8
  4306                           postdec1	equ	0xFE5
  4307                           fsr1h	equ	0xFE2
  4308                           fsr1l	equ	0xFE1
  4309                           indf2	equ	0xFDF
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _Check_List_Moteur_Metalhome *****************
  4315 ;; Defined at:
  4316 ;;		line 104 in file "action.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4330 ;;      Params:         0       0       0       0
  4331 ;;      Locals:         0       0       0       0
  4332 ;;      Temps:          0       0       0       0
  4333 ;;      Totals:         0       0       0       0
  4334 ;;Total ram usage:        0 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:   17
  4337 ;; This function calls:
  4338 ;;		_EUSART1_Check_Buffer
  4339 ;;		_Etat_Update
  4340 ;;		_SPI_Check_Buffer
  4341 ;; This function is called by:
  4342 ;;		_Mouvement_X_Metalhome
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text20
  4347  001EC6                     __ptext20:
  4348                           	opt stack 0
  4349  001EC6                     _Check_List_Moteur_Metalhome:
  4350                           	opt stack 11
  4351                           
  4352                           ;action.c: 107: if(PORTCbits.RC4 == 0){
  4353                           
  4354                           ;incstack = 0
  4355  001EC6  B882               	btfsc	3970,4,c	;volatile
  4356  001EC8  D002               	goto	l8052
  4357                           
  4358                           ;action.c: 108: Compteur_IRQ_I_Moteur_1 = 0;
  4359  001ECA  0100               	movlb	0	; () banked
  4360  001ECC  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  4361  001ECE                     l8052:
  4362                           
  4363                           ;action.c: 109: }
  4364                           ;action.c: 112: EUSART1_Check_Buffer();
  4365  001ECE  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4366                           
  4367                           ;action.c: 113: SPI_Check_Buffer();
  4368  001ED2  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  4369                           
  4370                           ;action.c: 130: if ((direction == 1) && (PORTCbits.RC3 == 1)) {
  4371  001ED6  0100               	movlb	0	; () banked
  4372  001ED8  058D               	decf	_direction& (0+255),w,b	;volatile
  4373  001EDA  E105               	bnz	l8060
  4374                           
  4375                           ; BSR set to: 0
  4376  001EDC  A682               	btfss	3970,3,c	;volatile
  4377  001EDE  D003               	goto	l8060
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;action.c: 131: Etat_Update(0);
  4381  001EE0  0E00               	movlw	0
  4382  001EE2  EC8C  F010         	call	_Etat_Update
  4383  001EE6                     l8060:
  4384                           
  4385                           ;action.c: 132: }
  4386                           ;action.c: 133: if ((direction == 0) && (PORTAbits.RA2 == 1)) {
  4387  001EE6  0100               	movlb	0	; () banked
  4388  001EE8  518D               	movf	_direction& (0+255),w,b	;volatile
  4389  001EEA  B4D8               	btfsc	status,2,c
  4390                           
  4391                           ; BSR set to: 0
  4392  001EEC  A480               	btfss	3968,2,c	;volatile
  4393  001EEE  0012               	return	
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;action.c: 134: Etat_Update(0);
  4397  001EF0  0E00               	movlw	0
  4398  001EF2  EF8C  F010         	goto	_Etat_Update
  4399  001EF6                     __end_of_Check_List_Moteur_Metalhome:
  4400                           	opt stack 0
  4401                           tblptru	equ	0xFF8
  4402                           prodl	equ	0xFF3
  4403                           intcon	equ	0xFF2
  4404                           intcon2	equ	0xFF1
  4405                           intcon3	equ	0xFF0
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           postdec1	equ	0xFE5
  4409                           fsr1h	equ	0xFE2
  4410                           fsr1l	equ	0xFE1
  4411                           indf2	equ	0xFDF
  4412                           fsr2h	equ	0xFDA
  4413                           fsr2l	equ	0xFD9
  4414                           status	equ	0xFD8
  4415                           
  4416 ;; *************** function _Mouvement_X *****************
  4417 ;; Defined at:
  4418 ;;		line 1071 in file "action.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  direction       1    wreg     unsigned char 
  4421 ;;  type_consign    1    4[BANK2 ] unsigned char 
  4422 ;;  option          1    5[BANK2 ] unsigned char 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  direction       1    6[BANK2 ] unsigned char 
  4425 ;;  index           2    0        unsigned int 
  4426 ;;  Option_Temps    1    0        unsigned char 
  4427 ;;  i_max           1    0        unsigned char 
  4428 ;;  i_min           1    0        unsigned char 
  4429 ;;  i               1    0        unsigned char 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  1    wreg      void 
  4432 ;; Registers used:
  4433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4434 ;; Tracked objects:
  4435 ;;		On entry : 3F/2
  4436 ;;		On exit  : 0/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4439 ;;      Params:         0       0       0       2
  4440 ;;      Locals:         0       0       0       1
  4441 ;;      Temps:          0       0       0       0
  4442 ;;      Totals:         0       0       0       3
  4443 ;;Total ram usage:        3 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:   18
  4446 ;; This function calls:
  4447 ;;		_Capteur_Capot_Off
  4448 ;;		_Capteur_Capot_On
  4449 ;;		_Check_List_Moteur_1
  4450 ;;		_Coupe_Moteur
  4451 ;;		_Detection_Pion_Init
  4452 ;;		_Detection_Pion_Off
  4453 ;;		_Detection_Pion_On
  4454 ;;		_EUSART1_Check_Buffer
  4455 ;;		_Etat_Update
  4456 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4457 ;;		_Init_Moteur_1
  4458 ;;		_SPI_Check_Buffer
  4459 ;;		_Stop_Moteur_1
  4460 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4461 ;;		_TIMER2_On
  4462 ;;		_u_Init_PWM
  4463 ;; This function is called by:
  4464 ;;		_Cycle
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text21
  4469  001122                     __ptext21:
  4470                           	opt stack 0
  4471  001122                     _Mouvement_X:
  4472                           	opt stack 11
  4473                           
  4474                           ;incstack = 0
  4475                           ;Mouvement_X@direction stored from wreg
  4476  001122  6F86               	movwf	Mouvement_X@direction& (0+255),b
  4477                           
  4478                           ;action.c: 1073: unsigned char i, i_min, i_max;
  4479                           ;action.c: 1074: unsigned char Option_Temps_S;
  4480                           ;action.c: 1084: consigne = 10;
  4481  001124  0E0A               	movlw	10
  4482  001126  0100               	movlb	0	; () banked
  4483  001128  6F95               	movwf	_consigne& (0+255),b	;volatile
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;action.c: 1091: Surveillance_Consommation_Moteur_1_Desactiver();
  4487  00112A  ECBA  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4488                           
  4489                           ;action.c: 1102: index = 0;
  4490  00112E  ECB7  F00D         	call	_u_Init_PWM	;wreg free
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;action.c: 1103: TMR2 = 0;
  4494  001132  6ACC               	clrf	4044,c	;volatile
  4495                           
  4496                           ; BSR set to: 0
  4497                           ;action.c: 1104: TMR2IF = 0;
  4498  001134  929E               	bcf	3998,1,c	;volatile
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;action.c: 1109: if ((!(option & 0x02))
  4502                           ;action.c: 1112: ) {
  4503  001136  0102               	movlb	2	; () banked
  4504  001138  A385               	btfss	Mouvement_X@option& (0+255),1,b
  4505                           
  4506                           ; BSR set to: 2
  4507                           ;action.c: 1114: Capteur_Capot_On();
  4508  00113A  EC46  F011         	call	_Capteur_Capot_On	;wreg free
  4509                           
  4510                           ;action.c: 1116: }
  4511                           ;action.c: 1124: moteur_indice = 1;
  4512  00113E  0E01               	movlw	1
  4513  001140  0100               	movlb	0	; () banked
  4514  001142  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;action.c: 1125: Init_ADC_Single_Shoot_I_Moteur_1();
  4518  001144  EC28  F00D         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;action.c: 1128: if (direction == 1) {
  4522  001148  0102               	movlb	2	; () banked
  4523  00114A  0586               	decf	Mouvement_X@direction& (0+255),w,b
  4524  00114C  E103               	bnz	l1031
  4525                           
  4526                           ; BSR set to: 2
  4527                           ;action.c: 1129: LATD5 = 0;LATD4 = 1;
  4528  00114E  9A8C               	bcf	3980,5,c	;volatile
  4529  001150  888C               	bsf	3980,4,c	;volatile
  4530                           
  4531                           ;action.c: 1130: } else {
  4532  001152  D002               	goto	l8158
  4533  001154                     l1031:
  4534                           
  4535                           ; BSR set to: 2
  4536                           ;action.c: 1131: LATD4 = 0;LATD5 = 1;
  4537  001154  988C               	bcf	3980,4,c	;volatile
  4538  001156  8A8C               	bsf	3980,5,c	;volatile
  4539  001158                     l8158:
  4540                           
  4541                           ; BSR set to: 2
  4542                           ;action.c: 1132: }
  4543                           ;action.c: 1133: PDC0L = 1 << 2;
  4544  001158  0E04               	movlw	4
  4545  00115A  6E79               	movwf	3961,c	;volatile
  4546                           
  4547                           ; BSR set to: 2
  4548                           ;action.c: 1134: PDC0H = 0;
  4549  00115C  6A78               	clrf	3960,c	;volatile
  4550                           
  4551                           ;action.c: 1135: OVDCOND = 0b00000001;
  4552  00115E  0E01               	movlw	1
  4553  001160  6E6B               	movwf	3947,c	;volatile
  4554                           
  4555                           ; BSR set to: 2
  4556                           ;action.c: 1136: LATCbits.LATC0 = 1;
  4557  001162  808B               	bsf	3979,0,c	;volatile
  4558                           
  4559                           ;action.c: 1139: erreur = 1;
  4560  001164  0100               	movlb	0	; () banked
  4561  001166  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4562  001168  6F84               	movwf	_erreur& (0+255),b	;volatile
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;action.c: 1140: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4566  00116A  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4567  00116C  46E8               	rlncf	wreg,f,c
  4568  00116E  0BFC               	andlw	252
  4569  001170  6E79               	movwf	3961,c	;volatile
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;action.c: 1141: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4573  001172  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4574  001174  46E8               	rlncf	wreg,f,c
  4575  001176  0B03               	andlw	3
  4576  001178  6E78               	movwf	3960,c	;volatile
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;action.c: 1144: erreur_accumulator = 0;
  4580  00117A  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4581  00117C  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;action.c: 1147: Nouvelle_Valeur_ADC = 0;
  4585  00117E  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;action.c: 1157: PIE3bits.PTIE = 0;
  4589  001180  98A3               	bcf	4003,4,c	;volatile
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;action.c: 1158: PIE1bits.ADIE = 1;
  4593  001182  8C9D               	bsf	3997,6,c	;volatile
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;action.c: 1160: PEIE = 1;
  4597  001184  8CF2               	bsf	intcon,6,c	;volatile
  4598                           
  4599                           ; BSR set to: 0
  4600                           ;action.c: 1161: GIE = 1;
  4601  001186  8EF2               	bsf	intcon,7,c	;volatile
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;action.c: 1162: TIMER2_On();
  4605  001188  ECF5  F011         	call	_TIMER2_On	;wreg free
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;action.c: 1163: ADIF = 0;
  4609  00118C  9C9E               	bcf	3998,6,c	;volatile
  4610                           
  4611                           ;action.c: 1167: Init_Moteur_1();
  4612  00118E  EC57  F011         	call	_Init_Moteur_1	;wreg free
  4613                           
  4614                           ;action.c: 1170: switch (type_consigne) {
  4615  001192  D057               	goto	l8234
  4616  001194                     l8184:
  4617                           
  4618                           ; BSR set to: 2
  4619                           ;action.c: 1172: nb_Pion_Objectif = 2;
  4620  001194  0E02               	movlw	2
  4621  001196  0100               	movlb	0	; () banked
  4622  001198  6F9E               	movwf	_nb_Pion_Objectif& (0+255),b
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;action.c: 1174: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4626  00119A  0102               	movlb	2	; () banked
  4627  00119C  3985               	swapf	Mouvement_X@option& (0+255),w,b
  4628  00119E  0B0F               	andlw	15
  4629  0011A0  0100               	movlb	0	; () banked
  4630  0011A2  6FA6               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;action.c: 1178: if (option & 0x04) {
  4634  0011A4  0102               	movlb	2	; () banked
  4635  0011A6  A585               	btfss	Mouvement_X@option& (0+255),2,b
  4636  0011A8  D004               	goto	l8192
  4637                           
  4638                           ; BSR set to: 2
  4639                           ;action.c: 1180: nb_s_fonctionnement_souhaiter *= 3;
  4640  0011AA  0100               	movlb	0	; () banked
  4641  0011AC  90D8               	bcf	status,0,c
  4642  0011AE  35A6               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4643  0011B0  27A6               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4644  0011B2                     l8192:
  4645                           
  4646                           ;action.c: 1182: }
  4647                           ;action.c: 1184: if (Option_Pailleux==1){
  4648  0011B2  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4649  0011B4  D00F               	goto	l8202
  4650  0011B6                     l8194:
  4651                           
  4652                           ;action.c: 1195: EUSART1_Check_Buffer();
  4653  0011B6  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4654                           
  4655                           ;action.c: 1196: SPI_Check_Buffer();
  4656  0011BA  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  4657                           
  4658                           ;action.c: 1207: } while(
  4659                           ;action.c: 1208: ((Etat == 2) | (Etat == 3))
  4660                           ;action.c: 1209: &&
  4661                           ;action.c: 1210: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4662                           ;action.c: 1211: )
  4663  0011BE  0E02               	movlw	2
  4664  0011C0  0100               	movlb	0	; () banked
  4665  0011C2  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4666  0011C4  E003               	bz	l8200
  4667                           
  4668                           ; BSR set to: 0
  4669  0011C6  0E03               	movlw	3
  4670  0011C8  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4671  0011CA  E10C               	bnz	l8206
  4672  0011CC                     l8200:
  4673                           
  4674                           ; BSR set to: 0
  4675  0011CC  51A6               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4676  0011CE  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4677  0011D0  E209               	bc	l8206
  4678  0011D2  D7F1               	goto	l8194
  4679  0011D4                     l8202:
  4680                           
  4681                           ;action.c: 1221: EUSART1_Check_Buffer();
  4682  0011D4  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4683                           
  4684                           ;action.c: 1222: SPI_Check_Buffer();
  4685  0011D8  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  4686                           
  4687                           ;action.c: 1225: } while(nb_s_fonctionnement < nb_s_fonctionnement_souhaiter);
  4688  0011DC  0100               	movlb	0	; () banked
  4689  0011DE  51A6               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4690  0011E0  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4691  0011E2  E3F8               	bnc	l8202
  4692  0011E4                     l8206:
  4693                           
  4694                           ; BSR set to: 0
  4695                           ;action.c: 1226: }
  4696                           ;action.c: 1230: Stop_Moteur_1();
  4697  0011E4  EC0A  F012         	call	_Stop_Moteur_1	;wreg free
  4698                           
  4699                           ;action.c: 1231: Capteur_Capot_Off();
  4700  0011E8  EC0C  F012         	call	_Capteur_Capot_Off	;wreg free
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;action.c: 1234: if ((Etat == 2) | (Etat == 3)) {
  4704  0011EC  0E02               	movlw	2
  4705  0011EE  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4706  0011F0  E003               	bz	l8212
  4707                           
  4708                           ; BSR set to: 0
  4709  0011F2  0E03               	movlw	3
  4710  0011F4  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4711  0011F6  E12A               	bnz	l1049
  4712  0011F8                     l8212:
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;action.c: 1236: Etat_Update(0);
  4716  0011F8  0E00               	movlw	0
  4717  0011FA  EC8C  F010         	call	_Etat_Update
  4718                           
  4719                           ;action.c: 1237: P4_busy = 0;
  4720  0011FE  0100               	movlb	0	; () banked
  4721  001200  6BAA               	clrf	_P4_busy& (0+255),b
  4722  001202  D024               	goto	l1049
  4723  001204                     l1050:
  4724                           
  4725                           ; BSR set to: 2
  4726                           ;action.c: 1254: nb_Pion_Objectif = option;
  4727  001204  C285  F09E         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4728                           
  4729                           ;action.c: 1255: nb_Pion = 0;
  4730  001208  0100               	movlb	0	; () banked
  4731  00120A  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;action.c: 1263: Detection_Pion_Init();
  4735  00120C  EC9F  F011         	call	_Detection_Pion_Init	;wreg free
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;action.c: 1264: Detection_Pion_On();
  4739  001210  EC23  F010         	call	_Detection_Pion_On	;wreg free
  4740  001214                     l8220:
  4741                           
  4742                           ;action.c: 1287: Check_List_Moteur_1();
  4743  001214  EC7B  F00F         	call	_Check_List_Moteur_1	;wreg free
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;action.c: 1288: } while (
  4747                           ;action.c: 1289: ((direction == 1) && (Etat == 2))
  4748                           ;action.c: 1290: |
  4749                           ;action.c: 1291: ((direction == 0) && (Etat == 3))
  4750                           ;action.c: 1293: );
  4751  001218  0102               	movlb	2	; () banked
  4752  00121A  0586               	decf	Mouvement_X@direction& (0+255),w,b
  4753  00121C  E104               	bnz	l8226
  4754                           
  4755                           ; BSR set to: 2
  4756  00121E  0E02               	movlw	2
  4757  001220  0100               	movlb	0	; () banked
  4758  001222  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4759  001224  E0F7               	bz	l8220
  4760  001226                     l8226:
  4761  001226  0102               	movlb	2	; () banked
  4762  001228  5186               	movf	Mouvement_X@direction& (0+255),w,b
  4763  00122A  E104               	bnz	l8230
  4764                           
  4765                           ; BSR set to: 2
  4766  00122C  0E03               	movlw	3
  4767  00122E  0100               	movlb	0	; () banked
  4768  001230  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  4769  001232  E0F0               	bz	l8220
  4770  001234                     l8230:
  4771                           
  4772                           ;action.c: 1296: Detection_Pion_Off();
  4773  001234  ECED  F011         	call	_Detection_Pion_Off	;wreg free
  4774                           
  4775                           ;action.c: 1304: Stop_Moteur_1();
  4776  001238  EC0A  F012         	call	_Stop_Moteur_1	;wreg free
  4777                           
  4778                           ;action.c: 1305: Capteur_Capot_Off();
  4779  00123C  EC0C  F012         	call	_Capteur_Capot_Off	;wreg free
  4780                           
  4781                           ;action.c: 1307: break;
  4782  001240  D005               	goto	l1049
  4783  001242                     l8234:
  4784                           
  4785                           ; BSR set to: 0
  4786  001242  0102               	movlb	2	; () banked
  4787  001244  5184               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4788                           
  4789                           ; Switch size 1, requested type "speed"
  4790                           ; Number of cases is 2, Range of values is 0 to 1
  4791                           ; switch strategies available:
  4792                           ; Name         Instructions Cycles
  4793                           ; simple_byte            7     4 (average)
  4794                           ;	Chosen strategy is simple_byte
  4795  001246  E0DE               	bz	l1050
  4796  001248  0A01               	xorlw	1	; case 1
  4797  00124A  E0A4               	bz	l8184
  4798  00124C                     l1049:
  4799                           
  4800                           ;action.c: 1354: PIE3bits.PTIE = 0;
  4801  00124C  98A3               	bcf	4003,4,c	;volatile
  4802                           
  4803                           ;action.c: 1355: PIE1bits.ADIE = 0;
  4804  00124E  9C9D               	bcf	3997,6,c	;volatile
  4805                           
  4806                           ;action.c: 1357: Surveillance_Consommation_Moteur_1_Desactiver();
  4807  001250  ECBA  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4808                           
  4809                           ;action.c: 1359: Coupe_Moteur();
  4810  001254  EF10  F011         	goto	_Coupe_Moteur	;wreg free
  4811  001258                     __end_of_Mouvement_X:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           prodl	equ	0xFF3
  4815                           intcon	equ	0xFF2
  4816                           intcon2	equ	0xFF1
  4817                           intcon3	equ	0xFF0
  4818                           postinc0	equ	0xFEE
  4819                           wreg	equ	0xFE8
  4820                           postdec1	equ	0xFE5
  4821                           fsr1h	equ	0xFE2
  4822                           fsr1l	equ	0xFE1
  4823                           indf2	equ	0xFDF
  4824                           fsr2h	equ	0xFDA
  4825                           fsr2l	equ	0xFD9
  4826                           status	equ	0xFD8
  4827                           
  4828 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4829 ;; Defined at:
  4830 ;;		line 872 in file "interrupt.c"
  4831 ;; Parameters:    Size  Location     Type
  4832 ;;		None
  4833 ;; Auto vars:     Size  Location     Type
  4834 ;;		None
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2
  4839 ;; Tracked objects:
  4840 ;;		On entry : 3D/0
  4841 ;;		On exit  : 3D/0
  4842 ;;		Unchanged: 3D/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4844 ;;      Params:         0       0       0       0
  4845 ;;      Locals:         0       0       0       0
  4846 ;;      Temps:          0       0       0       0
  4847 ;;      Totals:         0       0       0       0
  4848 ;;Total ram usage:        0 bytes
  4849 ;; Hardware stack levels used:    1
  4850 ;; Hardware stack levels required when called:   10
  4851 ;; This function calls:
  4852 ;;		Nothing
  4853 ;; This function is called by:
  4854 ;;		_Mouvement_X
  4855 ;;		_Mouvement_X_Metalhome
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           	psect	text22
  4860  002374                     __ptext22:
  4861                           	opt stack 0
  4862  002374                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4863                           	opt stack 18
  4864                           
  4865                           ;interrupt.c: 874: if (Surveillance_Consommation_Moteur_1 != 0) {
  4866                           
  4867                           ;incstack = 0
  4868  002374  5049               	movf	_Surveillance_Consommation_Moteur_1,w,c
  4869  002376  B4D8               	btfsc	status,2,c
  4870  002378  0012               	return	
  4871                           
  4872                           ;interrupt.c: 875: Surveillance_Consommation_Moteur_1 = 0;
  4873  00237A  6A49               	clrf	_Surveillance_Consommation_Moteur_1,c
  4874                           
  4875                           ;interrupt.c: 876: INTCON3bits.INT1IE = 0;
  4876  00237C  96F0               	bcf	intcon3,3,c	;volatile
  4877  00237E  0012               	return		;funcret
  4878  002380                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4879                           	opt stack 0
  4880                           tblptru	equ	0xFF8
  4881                           prodl	equ	0xFF3
  4882                           intcon	equ	0xFF2
  4883                           intcon2	equ	0xFF1
  4884                           intcon3	equ	0xFF0
  4885                           postinc0	equ	0xFEE
  4886                           wreg	equ	0xFE8
  4887                           postdec1	equ	0xFE5
  4888                           fsr1h	equ	0xFE2
  4889                           fsr1l	equ	0xFE1
  4890                           indf2	equ	0xFDF
  4891                           fsr2h	equ	0xFDA
  4892                           fsr2l	equ	0xFD9
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _Stop_Moteur_1 *****************
  4896 ;; Defined at:
  4897 ;;		line 97 in file "action.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;		None
  4902 ;; Return value:  Size  Location     Type
  4903 ;;                  1    wreg      void 
  4904 ;; Registers used:
  4905 ;;		cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : 0/2
  4908 ;;		On exit  : 3F/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4911 ;;      Params:         0       0       0       0
  4912 ;;      Locals:         0       0       0       0
  4913 ;;      Temps:          0       0       0       0
  4914 ;;      Totals:         0       0       0       0
  4915 ;;Total ram usage:        0 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:   11
  4918 ;; This function calls:
  4919 ;;		_TIMER0_Off
  4920 ;; This function is called by:
  4921 ;;		_Mouvement_X
  4922 ;;		_Mouvement_X_Metalhome
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text23
  4927  002414                     __ptext23:
  4928                           	opt stack 0
  4929  002414                     _Stop_Moteur_1:
  4930                           	opt stack 17
  4931                           
  4932                           ;action.c: 99: TIMER0_Off();
  4933                           
  4934                           ;incstack = 0
  4935  002414  EFC0  F011         	goto	_TIMER0_Off	;wreg free
  4936  002418                     __end_of_Stop_Moteur_1:
  4937                           	opt stack 0
  4938                           tblptru	equ	0xFF8
  4939                           prodl	equ	0xFF3
  4940                           intcon	equ	0xFF2
  4941                           intcon2	equ	0xFF1
  4942                           intcon3	equ	0xFF0
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           postdec1	equ	0xFE5
  4946                           fsr1h	equ	0xFE2
  4947                           fsr1l	equ	0xFE1
  4948                           indf2	equ	0xFDF
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _Init_Moteur_1 *****************
  4954 ;; Defined at:
  4955 ;;		line 77 in file "action.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;		None
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;		None
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      void 
  4962 ;; Registers used:
  4963 ;;		wreg, status,2, cstack
  4964 ;; Tracked objects:
  4965 ;;		On entry : 3F/0
  4966 ;;		On exit  : 3F/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4969 ;;      Params:         0       0       0       0
  4970 ;;      Locals:         0       0       0       0
  4971 ;;      Temps:          0       0       0       0
  4972 ;;      Totals:         0       0       0       0
  4973 ;;Total ram usage:        0 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:   11
  4976 ;; This function calls:
  4977 ;;		_TIMER0_On
  4978 ;; This function is called by:
  4979 ;;		_Mouvement_X
  4980 ;;		_Mouvement_X_Metalhome
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text24
  4985  0022AE                     __ptext24:
  4986                           	opt stack 0
  4987  0022AE                     _Init_Moteur_1:
  4988                           	opt stack 17
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;action.c: 84: Capteur_Capot_Compteur_Temps_S = 0;
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;incstack = 0
  4995  0022AE  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4996                           
  4997                           ;action.c: 87: nb_s_fonctionnement = 0;
  4998  0022B0  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  4999                           
  5000                           ;action.c: 88: nb_Pion = 0;
  5001  0022B2  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  5002                           
  5003                           ;action.c: 89: nb_100ms_Timer_5 = 0;
  5004  0022B4  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;action.c: 91: TIMER0_On();
  5008  0022B6  ECFA  F010         	call	_TIMER0_On	;wreg free
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;action.c: 94: Compteur_IRQ_I_Moteur_1 = 0;
  5012  0022BA  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  5013                           
  5014                           ; BSR set to: 0
  5015  0022BC  0012               	return		;funcret
  5016  0022BE                     __end_of_Init_Moteur_1:
  5017                           	opt stack 0
  5018                           tblptru	equ	0xFF8
  5019                           prodl	equ	0xFF3
  5020                           intcon	equ	0xFF2
  5021                           intcon2	equ	0xFF1
  5022                           intcon3	equ	0xFF0
  5023                           postinc0	equ	0xFEE
  5024                           wreg	equ	0xFE8
  5025                           postdec1	equ	0xFE5
  5026                           fsr1h	equ	0xFE2
  5027                           fsr1l	equ	0xFE1
  5028                           indf2	equ	0xFDF
  5029                           fsr2h	equ	0xFDA
  5030                           fsr2l	equ	0xFD9
  5031                           status	equ	0xFD8
  5032                           
  5033 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  5034 ;; Defined at:
  5035 ;;		line 110 in file "adc.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;		None
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;		None
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2
  5044 ;; Tracked objects:
  5045 ;;		On entry : 3F/0
  5046 ;;		On exit  : 3F/0
  5047 ;;		Unchanged: 3F/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5049 ;;      Params:         0       0       0       0
  5050 ;;      Locals:         0       0       0       0
  5051 ;;      Temps:          0       0       0       0
  5052 ;;      Totals:         0       0       0       0
  5053 ;;Total ram usage:        0 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:   10
  5056 ;; This function calls:
  5057 ;;		Nothing
  5058 ;; This function is called by:
  5059 ;;		_Mouvement_X
  5060 ;;		_Mouvement_X_Metalhome
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text25
  5065  001A50                     __ptext25:
  5066                           	opt stack 0
  5067  001A50                     _Init_ADC_Single_Shoot_I_Moteur_1:
  5068                           	opt stack 18
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;incstack = 0
  5075  001A50  9AC2               	bcf	4034,5,c	;volatile
  5076                           
  5077                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  5078  001A52  98C2               	bcf	4034,4,c	;volatile
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  5082  001A54  0EF3               	movlw	-13
  5083  001A56  16C2               	andwf	4034,f,c	;volatile
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;adc.c: 117: ADCON0bits.ADON = 0;
  5087  001A58  90C2               	bcf	4034,0,c	;volatile
  5088                           
  5089                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  5090  001A5A  0E3F               	movlw	-193
  5091  001A5C  16C1               	andwf	4033,f,c	;volatile
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  5095  001A5E  98C1               	bcf	4033,4,c	;volatile
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;adc.c: 130: ADCON1 = 0b00000000;
  5099  001A60  6AC1               	clrf	4033,c	;volatile
  5100                           
  5101                           ; BSR set to: 0
  5102                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  5103  001A62  9EC0               	bcf	4032,7,c	;volatile
  5104                           
  5105                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  5106  001A64  50C0               	movf	4032,w,c	;volatile
  5107  001A66  0B87               	andlw	-121
  5108  001A68  0910               	iorlw	16
  5109  001A6A  6EC0               	movwf	4032,c	;volatile
  5110                           
  5111                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  5112  001A6C  50C0               	movf	4032,w,c	;volatile
  5113  001A6E  0BF8               	andlw	-8
  5114  001A70  0904               	iorlw	4
  5115  001A72  6EC0               	movwf	4032,c	;volatile
  5116                           
  5117                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  5118  001A74  50C0               	movf	4032,w,c	;volatile
  5119  001A76  0BF8               	andlw	-8
  5120  001A78  0901               	iorlw	1
  5121  001A7A  6EC0               	movwf	4032,c	;volatile
  5122                           
  5123                           ;adc.c: 137: ADCON2 = 0b00010100;
  5124  001A7C  0E14               	movlw	20
  5125  001A7E  6EC0               	movwf	4032,c	;volatile
  5126                           
  5127                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  5128  001A80  50C0               	movf	4032,w,c	;volatile
  5129  001A82  0BF8               	andlw	-8
  5130  001A84  0901               	iorlw	1
  5131  001A86  6EC0               	movwf	4032,c	;volatile
  5132                           
  5133                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  5134  001A88  0E3F               	movlw	-193
  5135  001A8A  169A               	andwf	3994,f,c	;volatile
  5136                           
  5137                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  5138  001A8C  509A               	movf	3994,w,c	;volatile
  5139  001A8E  0BE0               	andlw	-32
  5140  001A90  0910               	iorlw	16
  5141  001A92  6E9A               	movwf	3994,c	;volatile
  5142                           
  5143                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  5144  001A94  0EE0               	movlw	-32
  5145  001A96  169A               	andwf	3994,f,c	;volatile
  5146                           
  5147                           ;adc.c: 153: ADCON3 = 0b00010000;
  5148  001A98  0E10               	movlw	16
  5149  001A9A  6E9A               	movwf	3994,c	;volatile
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;adc.c: 154: ADCON3 = 0x00;
  5153  001A9C  6A9A               	clrf	3994,c	;volatile
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;adc.c: 159: ADCHS = 0b00000000;
  5157  001A9E  6A99               	clrf	3993,c	;volatile
  5158                           
  5159                           ;adc.c: 160: ANSEL0 = 0b00000011;
  5160  001AA0  0E03               	movlw	3
  5161  001AA2  6EB8               	movwf	4024,c	;volatile
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;adc.c: 162: ANSEL1 = 0b00000000;
  5165  001AA4  6AB9               	clrf	4025,c	;volatile
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;adc.c: 171: PIE1bits.ADIE = 1;
  5169  001AA6  8C9D               	bsf	3997,6,c	;volatile
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;adc.c: 172: ADIF=0;
  5173  001AA8  9C9E               	bcf	3998,6,c	;volatile
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;adc.c: 173: IPR1bits.ADIP = 0;
  5177  001AAA  9C9F               	bcf	3999,6,c	;volatile
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;adc.c: 178: ADON = 1;
  5181  001AAC  80C2               	bsf	4034,0,c	;volatile
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  5185  001AAE  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  5186                           
  5187                           ; BSR set to: 0
  5188  001AB0  0012               	return		;funcret
  5189  001AB2                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  5190                           	opt stack 0
  5191                           tblptru	equ	0xFF8
  5192                           prodl	equ	0xFF3
  5193                           intcon	equ	0xFF2
  5194                           intcon2	equ	0xFF1
  5195                           intcon3	equ	0xFF0
  5196                           postinc0	equ	0xFEE
  5197                           wreg	equ	0xFE8
  5198                           postdec1	equ	0xFE5
  5199                           fsr1h	equ	0xFE2
  5200                           fsr1l	equ	0xFE1
  5201                           indf2	equ	0xFDF
  5202                           fsr2h	equ	0xFDA
  5203                           fsr2l	equ	0xFD9
  5204                           status	equ	0xFD8
  5205                           
  5206 ;; *************** function _Detection_Pion_On *****************
  5207 ;; Defined at:
  5208 ;;		line 29 in file "pion.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;		None
  5211 ;; Auto vars:     Size  Location     Type
  5212 ;;		None
  5213 ;; Return value:  Size  Location     Type
  5214 ;;                  1    wreg      void 
  5215 ;; Registers used:
  5216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5217 ;; Tracked objects:
  5218 ;;		On entry : 3F/0
  5219 ;;		On exit  : 0/0
  5220 ;;		Unchanged: 0/0
  5221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5222 ;;      Params:         0       0       0       0
  5223 ;;      Locals:         0       0       0       0
  5224 ;;      Temps:          0       0       0       0
  5225 ;;      Totals:         0       0       0       0
  5226 ;;Total ram usage:        0 bytes
  5227 ;; Hardware stack levels used:    1
  5228 ;; Hardware stack levels required when called:   12
  5229 ;; This function calls:
  5230 ;;		_IRQ_PION_Metal_Apparait
  5231 ;; This function is called by:
  5232 ;;		_Mouvement_X
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text26
  5237  002046                     __ptext26:
  5238                           	opt stack 0
  5239  002046                     _Detection_Pion_On:
  5240                           	opt stack 16
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;incstack = 0
  5247  002046  92A4               	bcf	4004,1,c	;volatile
  5248                           
  5249                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  5250  002048  82A3               	bsf	4003,1,c	;volatile
  5251                           
  5252                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  5253  00204A  92A4               	bcf	4004,1,c	;volatile
  5254                           
  5255                           ;pion.c: 64: Detecteur_Pion = 1;
  5256  00204C  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  5257                           
  5258                           ;pion.c: 68: if (Option_Pailleux != 1) {
  5259  00204E  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  5263  002050  B480               	btfsc	3968,2,c	;volatile
  5264  002052  0012               	return	
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  5268  002054  0E1F               	movlw	31
  5269  002056  65EB               	cpfsgt	_nb_100ms_platine_backup& (0+255),b
  5270  002058  D003               	goto	l8132
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;pion.c: 91: nb_100ms_platine = 255;
  5274  00205A  69A1               	setf	_nb_100ms_platine& (0+255),b
  5275                           
  5276                           ;pion.c: 92: }else{
  5277  00205C  EFCC  F011         	goto	_IRQ_PION_Metal_Apparait
  5278  002060                     l8132:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  5282  002060  51EB               	movf	_nb_100ms_platine_backup& (0+255),w,b
  5283  002062  0D08               	mullw	8
  5284  002064  CFF3 F0A1          	movff	prodl,_nb_100ms_platine
  5285                           
  5286                           ; BSR set to: 0
  5287                           ;pion.c: 94: }
  5288                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  5289  002068  EFCC  F011         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  5290  00206C                     __end_of_Detection_Pion_On:
  5291                           	opt stack 0
  5292                           tblptru	equ	0xFF8
  5293                           prodl	equ	0xFF3
  5294                           intcon	equ	0xFF2
  5295                           intcon2	equ	0xFF1
  5296                           intcon3	equ	0xFF0
  5297                           postinc0	equ	0xFEE
  5298                           wreg	equ	0xFE8
  5299                           postdec1	equ	0xFE5
  5300                           fsr1h	equ	0xFE2
  5301                           fsr1l	equ	0xFE1
  5302                           indf2	equ	0xFDF
  5303                           fsr2h	equ	0xFDA
  5304                           fsr2l	equ	0xFD9
  5305                           status	equ	0xFD8
  5306                           
  5307 ;; *************** function _Detection_Pion_Init *****************
  5308 ;; Defined at:
  5309 ;;		line 13 in file "pion.c"
  5310 ;; Parameters:    Size  Location     Type
  5311 ;;		None
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;		None
  5314 ;; Return value:  Size  Location     Type
  5315 ;;                  1    wreg      void 
  5316 ;; Registers used:
  5317 ;;		wreg, status,2
  5318 ;; Tracked objects:
  5319 ;;		On entry : 3F/0
  5320 ;;		On exit  : 3F/0
  5321 ;;		Unchanged: 3F/0
  5322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5323 ;;      Params:         0       0       0       0
  5324 ;;      Locals:         0       0       0       0
  5325 ;;      Temps:          0       0       0       0
  5326 ;;      Totals:         0       0       0       0
  5327 ;;Total ram usage:        0 bytes
  5328 ;; Hardware stack levels used:    1
  5329 ;; Hardware stack levels required when called:   10
  5330 ;; This function calls:
  5331 ;;		Nothing
  5332 ;; This function is called by:
  5333 ;;		_Init_Variable
  5334 ;;		_Mouvement_X
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text27
  5339  00233E                     __ptext27:
  5340                           	opt stack 0
  5341  00233E                     _Detection_Pion_Init:
  5342                           	opt stack 19
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  5346                           
  5347                           ;incstack = 0
  5348  00233E  B480               	btfsc	3968,2,c	;volatile
  5349  002340  D003               	goto	l1589
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;pion.c: 17: Mouvement_Startup = 1;
  5353  002342  0E01               	movlw	1
  5354  002344  6E4E               	movwf	_Mouvement_Startup,c
  5355                           
  5356                           ;pion.c: 18: } else {
  5357  002346  0C01               	retlw	1
  5358  002348                     l1589:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;pion.c: 20: Mouvement_Startup = 0;
  5362  002348  6A4E               	clrf	_Mouvement_Startup,c
  5363                           
  5364                           ; BSR set to: 0
  5365  00234A  0012               	return		;funcret
  5366  00234C                     __end_of_Detection_Pion_Init:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           intcon2	equ	0xFF1
  5372                           intcon3	equ	0xFF0
  5373                           postinc0	equ	0xFEE
  5374                           wreg	equ	0xFE8
  5375                           postdec1	equ	0xFE5
  5376                           fsr1h	equ	0xFE2
  5377                           fsr1l	equ	0xFE1
  5378                           indf2	equ	0xFDF
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function _Check_List_Moteur_1 *****************
  5384 ;; Defined at:
  5385 ;;		line 144 in file "action.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;		None
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 0/0
  5396 ;;		On exit  : 3F/0
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5399 ;;      Params:         0       0       0       0
  5400 ;;      Locals:         0       0       0       0
  5401 ;;      Temps:          0       0       0       0
  5402 ;;      Totals:         0       0       0       0
  5403 ;;Total ram usage:        0 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:   17
  5406 ;; This function calls:
  5407 ;;		_Alarme_On
  5408 ;;		_EUSART1_Check_Buffer
  5409 ;;		_SPI_Check_Buffer
  5410 ;; This function is called by:
  5411 ;;		_Mouvement_X
  5412 ;; This function uses a non-reentrant model
  5413 ;;
  5414                           
  5415                           	psect	text28
  5416  001EF6                     __ptext28:
  5417                           	opt stack 0
  5418  001EF6                     _Check_List_Moteur_1:
  5419                           	opt stack 11
  5420                           
  5421                           ;action.c: 147: if(PORTCbits.RC4 == 0){
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;incstack = 0
  5425  001EF6  B882               	btfsc	3970,4,c	;volatile
  5426  001EF8  D002               	goto	l8070
  5427                           
  5428                           ;action.c: 148: Compteur_IRQ_I_Moteur_1 = 0;
  5429  001EFA  0100               	movlb	0	; () banked
  5430  001EFC  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  5431  001EFE                     l8070:
  5432                           
  5433                           ;action.c: 149: }
  5434                           ;action.c: 152: EUSART1_Check_Buffer();
  5435  001EFE  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  5436                           
  5437                           ;action.c: 153: SPI_Check_Buffer();
  5438  001F02  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  5439                           
  5440                           ;action.c: 155: if (nb_s_fonctionnement > nb_s_patinage) {
  5441  001F06  0100               	movlb	0	; () banked
  5442  001F08  51A5               	movf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  5443  001F0A  5DA4               	subwf	_nb_s_patinage& (0+255),w,b
  5444  001F0C  E203               	bc	l8076
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;action.c: 160: Alarme_On(3);
  5448  001F0E  0E03               	movlw	3
  5449  001F10  EC77  F011         	call	_Alarme_On
  5450  001F14                     l8076:
  5451                           
  5452                           ;action.c: 162: }
  5453                           ;action.c: 165: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5454  001F14  0EB4               	movlw	180
  5455  001F16  0100               	movlb	0	; () banked
  5456  001F18  659B               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5457  001F1A  0CB4               	retlw	180
  5458                           
  5459                           ; BSR set to: 0
  5460                           ;action.c: 166: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5461  001F1C  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5462                           
  5463                           ;action.c: 167: Capteur_Capot_Compteur_Temps_S = 0;
  5464  001F20  6B9B               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5465                           
  5466                           ; BSR set to: 0
  5467  001F22  0012               	return		;funcret
  5468  001F24                     __end_of_Check_List_Moteur_1:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           prodl	equ	0xFF3
  5472                           intcon	equ	0xFF2
  5473                           intcon2	equ	0xFF1
  5474                           intcon3	equ	0xFF0
  5475                           postinc0	equ	0xFEE
  5476                           wreg	equ	0xFE8
  5477                           postdec1	equ	0xFE5
  5478                           fsr1h	equ	0xFE2
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           fsr2h	equ	0xFDA
  5482                           fsr2l	equ	0xFD9
  5483                           status	equ	0xFD8
  5484                           
  5485 ;; *************** function _Capteur_Capot_On *****************
  5486 ;; Defined at:
  5487 ;;		line 176 in file "interrupt.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;		None
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;		None
  5492 ;; Return value:  Size  Location     Type
  5493 ;;                  1    wreg      void 
  5494 ;; Registers used:
  5495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5496 ;; Tracked objects:
  5497 ;;		On entry : 3F/2
  5498 ;;		On exit  : 0/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5501 ;;      Params:         0       0       0       0
  5502 ;;      Locals:         0       0       0       0
  5503 ;;      Temps:          0       0       0       0
  5504 ;;      Totals:         0       0       0       0
  5505 ;;Total ram usage:        0 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:   11
  5508 ;; This function calls:
  5509 ;;		_Etat_Update
  5510 ;; This function is called by:
  5511 ;;		_Mouvement_X
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text29
  5516  00228C                     __ptext29:
  5517                           	opt stack 0
  5518  00228C                     _Capteur_Capot_On:
  5519                           	opt stack 17
  5520                           
  5521                           ; BSR set to: 2
  5522                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;incstack = 0
  5526  00228C  88F2               	bsf	intcon,4,c	;volatile
  5527                           
  5528                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  5529  00228E  92F2               	bcf	intcon,1,c	;volatile
  5530                           
  5531                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  5532  002290  B682               	btfsc	3970,3,c	;volatile
  5533  002292  0012               	return	
  5534                           
  5535                           ; BSR set to: 2
  5536                           ;interrupt.c: 185: P4_busy = 0;
  5537  002294  0100               	movlb	0	; () banked
  5538  002296  6BAA               	clrf	_P4_busy& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;interrupt.c: 186: Etat_Update(77);
  5542  002298  0E4D               	movlw	77
  5543  00229A  EF8C  F010         	goto	_Etat_Update
  5544  00229E                     __end_of_Capteur_Capot_On:
  5545                           	opt stack 0
  5546                           tblptru	equ	0xFF8
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           intcon2	equ	0xFF1
  5550                           intcon3	equ	0xFF0
  5551                           postinc0	equ	0xFEE
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1h	equ	0xFE2
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           fsr2h	equ	0xFDA
  5558                           fsr2l	equ	0xFD9
  5559                           status	equ	0xFD8
  5560                           
  5561 ;; *************** function _Capteur_Capot_Off *****************
  5562 ;; Defined at:
  5563 ;;		line 194 in file "interrupt.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;		None
  5566 ;; Auto vars:     Size  Location     Type
  5567 ;;		None
  5568 ;; Return value:  Size  Location     Type
  5569 ;;                  1    wreg      void 
  5570 ;; Registers used:
  5571 ;;		None
  5572 ;; Tracked objects:
  5573 ;;		On entry : 3F/0
  5574 ;;		On exit  : 3F/0
  5575 ;;		Unchanged: 3F/0
  5576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5577 ;;      Params:         0       0       0       0
  5578 ;;      Locals:         0       0       0       0
  5579 ;;      Temps:          0       0       0       0
  5580 ;;      Totals:         0       0       0       0
  5581 ;;Total ram usage:        0 bytes
  5582 ;; Hardware stack levels used:    1
  5583 ;; Hardware stack levels required when called:   10
  5584 ;; This function calls:
  5585 ;;		Nothing
  5586 ;; This function is called by:
  5587 ;;		_Mouvement_X
  5588 ;;		_Mouvement_X_Metalhome
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text30
  5593  002418                     __ptext30:
  5594                           	opt stack 0
  5595  002418                     _Capteur_Capot_Off:
  5596                           	opt stack 18
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  5600                           
  5601                           ;incstack = 0
  5602  002418  98F2               	bcf	intcon,4,c	;volatile
  5603                           
  5604                           ; BSR set to: 0
  5605  00241A  0012               	return		;funcret
  5606  00241C                     __end_of_Capteur_Capot_Off:
  5607                           	opt stack 0
  5608                           tblptru	equ	0xFF8
  5609                           prodl	equ	0xFF3
  5610                           intcon	equ	0xFF2
  5611                           intcon2	equ	0xFF1
  5612                           intcon3	equ	0xFF0
  5613                           postinc0	equ	0xFEE
  5614                           wreg	equ	0xFE8
  5615                           postdec1	equ	0xFE5
  5616                           fsr1h	equ	0xFE2
  5617                           fsr1l	equ	0xFE1
  5618                           indf2	equ	0xFDF
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _Mouvement_Bequille *****************
  5624 ;; Defined at:
  5625 ;;		line 803 in file "action.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  direction       1    wreg     unsigned char 
  5628 ;;  type_consign    1    6[BANK2 ] unsigned char 
  5629 ;;  option          1    7[BANK2 ] unsigned char 
  5630 ;; Auto vars:     Size  Location     Type
  5631 ;;  direction       1    8[BANK2 ] unsigned char 
  5632 ;;  index           2    0        unsigned int 
  5633 ;;  Option_Temps    1    0        unsigned char 
  5634 ;;  i_max           1    0        unsigned char 
  5635 ;;  i_min           1    0        unsigned char 
  5636 ;;  i               1    0        unsigned char 
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5641 ;; Tracked objects:
  5642 ;;		On entry : 3F/0
  5643 ;;		On exit  : 3D/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5646 ;;      Params:         0       0       0       2
  5647 ;;      Locals:         0       0       0       1
  5648 ;;      Temps:          0       0       0       0
  5649 ;;      Totals:         0       0       0       3
  5650 ;;Total ram usage:        3 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:   18
  5653 ;; This function calls:
  5654 ;;		_Check_List_Moteur_Bequille
  5655 ;;		_Coupe_Moteur
  5656 ;;		_Detection_Pion_Off
  5657 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  5658 ;;		_Init_Moteur_Bequille
  5659 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  5660 ;;		_TIMER2_On
  5661 ;;		_delay_s
  5662 ;;		_u_Init_PWM
  5663 ;; This function is called by:
  5664 ;;		_Cycle
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text31
  5669  00170E                     __ptext31:
  5670                           	opt stack 0
  5671  00170E                     _Mouvement_Bequille:
  5672                           	opt stack 11
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;incstack = 0
  5676                           ;Mouvement_Bequille@direction stored from wreg
  5677  00170E  0102               	movlb	2	; () banked
  5678  001710  6F88               	movwf	Mouvement_Bequille@direction& (0+255),b
  5679                           
  5680                           ;action.c: 804: unsigned char i, i_min, i_max;
  5681                           ;action.c: 805: unsigned char Option_Temps_S;
  5682                           ;action.c: 812: Surveillance_Consommation_Moteur_2_Desactiver();
  5683  001712  ECC6  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  5684                           
  5685                           ;action.c: 814: Detection_Pion_Off();
  5686  001716  ECED  F011         	call	_Detection_Pion_Off	;wreg free
  5687                           
  5688                           ;action.c: 817: nb_s_bequille = option;
  5689  00171A  C287  F04C         	movff	Mouvement_Bequille@option,_nb_s_bequille
  5690                           
  5691                           ;action.c: 820: consigne = 10;
  5692  00171E  0E0A               	movlw	10
  5693  001720  0100               	movlb	0	; () banked
  5694  001722  6F95               	movwf	_consigne& (0+255),b	;volatile
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;action.c: 831: index = 0;
  5698  001724  ECB7  F00D         	call	_u_Init_PWM	;wreg free
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;action.c: 832: TMR2 = 0;
  5702  001728  6ACC               	clrf	4044,c	;volatile
  5703                           
  5704                           ; BSR set to: 0
  5705                           ;action.c: 833: TMR2IF = 0;
  5706  00172A  929E               	bcf	3998,1,c	;volatile
  5707                           
  5708                           ; BSR set to: 0
  5709                           ;action.c: 838: LATEbits.LATE2 = 1;
  5710  00172C  848D               	bsf	3981,2,c	;volatile
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;action.c: 843: moteur_indice = 3;
  5714  00172E  0E03               	movlw	3
  5715  001730  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;action.c: 844: Init_ADC_Single_Shoot_I_Moteur_2();
  5719  001732  EC91  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;action.c: 847: if (direction == 0) {
  5723  001736  0102               	movlb	2	; () banked
  5724  001738  5188               	movf	Mouvement_Bequille@direction& (0+255),w,b
  5725  00173A  E103               	bnz	l1008
  5726                           
  5727                           ; BSR set to: 2
  5728                           ;action.c: 848: LATD7 = 0;LATD6 = 1;
  5729  00173C  9E8C               	bcf	3980,7,c	;volatile
  5730  00173E  8C8C               	bsf	3980,6,c	;volatile
  5731                           
  5732                           ;action.c: 849: } else {
  5733  001740  D002               	goto	l8400
  5734  001742                     l1008:
  5735                           
  5736                           ; BSR set to: 2
  5737                           ;action.c: 850: LATD6 = 0;LATD7 = 1;
  5738  001742  9C8C               	bcf	3980,6,c	;volatile
  5739  001744  8E8C               	bsf	3980,7,c	;volatile
  5740  001746                     l8400:
  5741                           
  5742                           ; BSR set to: 2
  5743                           ;action.c: 851: }
  5744                           ;action.c: 852: PDC1L = 1 << 2;
  5745  001746  0E04               	movlw	4
  5746  001748  6E77               	movwf	3959,c	;volatile
  5747                           
  5748                           ; BSR set to: 2
  5749                           ;action.c: 853: PDC1H = 0;
  5750  00174A  6A76               	clrf	3958,c	;volatile
  5751                           
  5752                           ;action.c: 854: OVDCOND = 0b00000100;
  5753  00174C  0E04               	movlw	4
  5754  00174E  6E6B               	movwf	3947,c	;volatile
  5755                           
  5756                           ; BSR set to: 2
  5757                           ;action.c: 855: LATCbits.LATC1 = 1;
  5758  001750  828B               	bsf	3979,1,c	;volatile
  5759                           
  5760                           ;action.c: 857: erreur = 1;
  5761  001752  0100               	movlb	0	; () banked
  5762  001754  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  5763  001756  0E01               	movlw	1
  5764  001758  6F84               	movwf	_erreur& (0+255),b	;volatile
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;action.c: 858: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  5768  00175A  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  5769  00175C  46E8               	rlncf	wreg,f,c
  5770  00175E  0BFC               	andlw	252
  5771  001760  6E77               	movwf	3959,c	;volatile
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;action.c: 859: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  5775  001762  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  5776  001764  46E8               	rlncf	wreg,f,c
  5777  001766  0B03               	andlw	3
  5778  001768  6E76               	movwf	3958,c	;volatile
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;action.c: 862: erreur_accumulator = 0;
  5782  00176A  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  5783  00176C  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;action.c: 865: Nouvelle_Valeur_ADC = 0;
  5787  00176E  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;action.c: 869: PIE3bits.PTIE = 0;
  5791  001770  98A3               	bcf	4003,4,c	;volatile
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;action.c: 870: PIE1bits.ADIE = 1;
  5795  001772  8C9D               	bsf	3997,6,c	;volatile
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;action.c: 871: PIE1bits.ADIE = 1;
  5799  001774  8C9D               	bsf	3997,6,c	;volatile
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;action.c: 873: PEIE = 1;
  5803  001776  8CF2               	bsf	intcon,6,c	;volatile
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;action.c: 874: GIE = 1;
  5807  001778  8EF2               	bsf	intcon,7,c	;volatile
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;action.c: 875: TIMER2_On();
  5811  00177A  ECF5  F011         	call	_TIMER2_On	;wreg free
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;action.c: 876: ADIF = 0;
  5815  00177E  9C9E               	bcf	3998,6,c	;volatile
  5816                           
  5817                           ;action.c: 893: Init_Moteur_Bequille();
  5818  001780  EC5F  F011         	call	_Init_Moteur_Bequille	;wreg free
  5819  001784                     l8428:
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;action.c: 897: Check_List_Moteur_Bequille();
  5823  001784  ECDF  F00E         	call	_Check_List_Moteur_Bequille	;wreg free
  5824                           
  5825                           ;action.c: 898: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  5826  001788  0102               	movlb	2	; () banked
  5827  00178A  5188               	movf	Mouvement_Bequille@direction& (0+255),w,b
  5828  00178C  E104               	bnz	l8434
  5829                           
  5830                           ; BSR set to: 2
  5831  00178E  0E08               	movlw	8
  5832  001790  0100               	movlb	0	; () banked
  5833  001792  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  5834  001794  E0F7               	bz	l8428
  5835  001796                     l8434:
  5836  001796  0102               	movlb	2	; () banked
  5837  001798  0588               	decf	Mouvement_Bequille@direction& (0+255),w,b
  5838  00179A  E104               	bnz	l1015
  5839                           
  5840                           ; BSR set to: 2
  5841  00179C  0E09               	movlw	9
  5842  00179E  0100               	movlb	0	; () banked
  5843  0017A0  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  5844  0017A2  E0F0               	bz	l8428
  5845  0017A4                     l1015:
  5846                           
  5847                           ;action.c: 902: PIE3bits.PTIE = 0;
  5848  0017A4  98A3               	bcf	4003,4,c	;volatile
  5849                           
  5850                           ;action.c: 903: PIE1bits.ADIE = 0;
  5851  0017A6  9C9D               	bcf	3997,6,c	;volatile
  5852                           
  5853                           ;action.c: 909: LATEbits.LATE2 = 0;
  5854  0017A8  948D               	bcf	3981,2,c	;volatile
  5855                           
  5856                           ;action.c: 914: Surveillance_Consommation_Moteur_2_Desactiver();
  5857  0017AA  ECC6  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  5858                           
  5859                           ;action.c: 916: Coupe_Moteur();
  5860  0017AE  EC10  F011         	call	_Coupe_Moteur	;wreg free
  5861                           
  5862                           ;action.c: 917: delay_s(1);
  5863  0017B2  0E01               	movlw	1
  5864  0017B4  EF92  F00F         	goto	_delay_s
  5865  0017B8                     __end_of_Mouvement_Bequille:
  5866                           	opt stack 0
  5867                           tblptru	equ	0xFF8
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           intcon2	equ	0xFF1
  5871                           intcon3	equ	0xFF0
  5872                           postinc0	equ	0xFEE
  5873                           wreg	equ	0xFE8
  5874                           postdec1	equ	0xFE5
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           fsr2h	equ	0xFDA
  5879                           fsr2l	equ	0xFD9
  5880                           status	equ	0xFD8
  5881                           
  5882 ;; *************** function _u_Init_PWM *****************
  5883 ;; Defined at:
  5884 ;;		line 56 in file "pwm.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;		None
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;		None
  5889 ;; Return value:  Size  Location     Type
  5890 ;;                  1    wreg      void 
  5891 ;; Registers used:
  5892 ;;		wreg, status,2, status,0
  5893 ;; Tracked objects:
  5894 ;;		On entry : 3D/0
  5895 ;;		On exit  : 3F/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5898 ;;      Params:         0       0       0       0
  5899 ;;      Locals:         0       0       0       0
  5900 ;;      Temps:          0       0       0       0
  5901 ;;      Totals:         0       0       0       0
  5902 ;;Total ram usage:        0 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:   10
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_Mouvement_Bequille
  5909 ;;		_Mouvement_Z
  5910 ;;		_Mouvement_X
  5911 ;;		_Mouvement_X_Metalhome
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text32
  5916  001B6E                     __ptext32:
  5917                           	opt stack 0
  5918  001B6E                     _u_Init_PWM:
  5919                           	opt stack 18
  5920                           
  5921                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  5922                           
  5923                           ;incstack = 0
  5924  001B6E  9E7E               	bcf	3966,7,c	;volatile
  5925                           
  5926                           ;pwm.c: 64: PDC0L = 1 << 2;
  5927  001B70  0E04               	movlw	4
  5928  001B72  6E79               	movwf	3961,c	;volatile
  5929                           
  5930                           ;pwm.c: 65: PDC0H = 0;
  5931  001B74  6A78               	clrf	3960,c	;volatile
  5932                           
  5933                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  5934  001B76  0E1F               	movlw	31
  5935  001B78  6E7B               	movwf	3963,c	;volatile
  5936                           
  5937                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  5938  001B7A  0E3F               	movlw	63
  5939  001B7C  6E7B               	movwf	3963,c	;volatile
  5940                           
  5941                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  5942  001B7E  287B               	incf	3963,w,c	;volatile
  5943  001B80  0100               	movlb	0	; () banked
  5944  001B82  6F8B               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  5948  001B84  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  5949  001B86  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;pwm.c: 87: PTPERH = 0;
  5953  001B88  6A7A               	clrf	3962,c	;volatile
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;pwm.c: 94: PTCON0 = 0b00000011;
  5957  001B8A  0E03               	movlw	3
  5958  001B8C  6E7F               	movwf	3967,c	;volatile
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  5962  001B8E  0E0F               	movlw	-241
  5963  001B90  167F               	andwf	3967,f,c	;volatile
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  5967  001B92  0EF3               	movlw	-13
  5968  001B94  167F               	andwf	3967,f,c	;volatile
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  5972  001B96  507F               	movf	3967,w,c	;volatile
  5973  001B98  0BFC               	andlw	-4
  5974  001B9A  0902               	iorlw	2
  5975  001B9C  6E7F               	movwf	3967,c	;volatile
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;pwm.c: 116: PTCON1 = 0b10000000;
  5979  001B9E  0E80               	movlw	128
  5980  001BA0  6E7E               	movwf	3966,c	;volatile
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  5984  001BA2  506F               	movf	3951,w,c	;volatile
  5985  001BA4  0B8F               	andlw	-113
  5986  001BA6  0910               	iorlw	16
  5987  001BA8  6E6F               	movwf	3951,c	;volatile
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  5991  001BAA  0E0F               	movlw	15
  5992  001BAC  126F               	iorwf	3951,f,c	;volatile
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  5996  001BAE  0E3F               	movlw	63
  5997  001BB0  6E6F               	movwf	3951,c	;volatile
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  6001  001BB2  6A6E               	clrf	3950,c	;volatile
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  6005  001BB4  0E01               	movlw	1
  6006  001BB6  6E6E               	movwf	3950,c	;volatile
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;pwm.c: 155: DTCON = 0b00000000;
  6010  001BB8  6A6D               	clrf	3949,c	;volatile
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;pwm.c: 156: OVDCOND = 0b00000101;
  6014  001BBA  0E05               	movlw	5
  6015  001BBC  6E6B               	movwf	3947,c	;volatile
  6016                           
  6017                           ; BSR set to: 0
  6018                           ;pwm.c: 158: OVDCONS = 0b00000000;
  6019  001BBE  6A6A               	clrf	3946,c	;volatile
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;pwm.c: 164: SEVTDIR = 0;
  6023  001BC0  966E               	bcf	3950,3,c	;volatile
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;pwm.c: 166: SEVTCMPH = 0;
  6027  001BC2  6A70               	clrf	3952,c	;volatile
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;pwm.c: 167: SEVTCMPL = 10;
  6031  001BC4  0E0A               	movlw	10
  6032  001BC6  6E71               	movwf	3953,c	;volatile
  6033                           
  6034                           ; BSR set to: 0
  6035  001BC8  0C0A               	retlw	10	;funcret
  6036  001BCA                     __end_of_u_Init_PWM:
  6037                           	opt stack 0
  6038                           tblptru	equ	0xFF8
  6039                           prodl	equ	0xFF3
  6040                           intcon	equ	0xFF2
  6041                           intcon2	equ	0xFF1
  6042                           intcon3	equ	0xFF0
  6043                           postinc0	equ	0xFEE
  6044                           wreg	equ	0xFE8
  6045                           postdec1	equ	0xFE5
  6046                           fsr1h	equ	0xFE2
  6047                           fsr1l	equ	0xFE1
  6048                           indf2	equ	0xFDF
  6049                           fsr2h	equ	0xFDA
  6050                           fsr2l	equ	0xFD9
  6051                           status	equ	0xFD8
  6052                           
  6053 ;; *************** function _delay_s *****************
  6054 ;; Defined at:
  6055 ;;		line 91 in file "horloge.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  delay_time      1    wreg     unsigned char 
  6058 ;; Auto vars:     Size  Location     Type
  6059 ;;  delay_time      1    4[BANK2 ] unsigned char 
  6060 ;;  Timer_0_Etat    1    5[BANK2 ] unsigned char 
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 3D/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6070 ;;      Params:         0       0       0       0
  6071 ;;      Locals:         0       0       0       2
  6072 ;;      Temps:          0       0       0       0
  6073 ;;      Totals:         0       0       0       2
  6074 ;;Total ram usage:        2 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:   17
  6077 ;; This function calls:
  6078 ;;		_EUSART1_Check_Buffer
  6079 ;;		_TIMER0_Off
  6080 ;;		_TIMER0_On
  6081 ;; This function is called by:
  6082 ;;		_Cycle
  6083 ;;		_Mouvement_Bequille
  6084 ;;		_Mouvement_Z
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text33
  6089  001F24                     __ptext33:
  6090                           	opt stack 0
  6091  001F24                     _delay_s:
  6092                           	opt stack 12
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;incstack = 0
  6096                           ;delay_s@delay_time stored from wreg
  6097  001F24  0102               	movlb	2	; () banked
  6098  001F26  6F84               	movwf	delay_s@delay_time& (0+255),b
  6099                           
  6100                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  6101                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  6102  001F28  C088  F285         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  6103                           
  6104                           ;horloge.c: 95: delay_s_counter = 0;
  6105  001F2C  0100               	movlb	0	; () banked
  6106  001F2E  6B8A               	clrf	_delay_s_counter& (0+255),b	;volatile
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;horloge.c: 98: TIMER0_On();
  6110  001F30  ECFA  F010         	call	_TIMER0_On	;wreg free
  6111                           
  6112                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  6113  001F34  D002               	goto	l7918
  6114  001F36                     l7916:
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;horloge.c: 101: EUSART1_Check_Buffer();
  6118  001F36  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  6119  001F3A                     l7918:
  6120  001F3A  0102               	movlb	2	; () banked
  6121  001F3C  5184               	movf	delay_s@delay_time& (0+255),w,b
  6122  001F3E  0100               	movlb	0	; () banked
  6123  001F40  5D8A               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  6124  001F42  E3F9               	bnc	l7916
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;horloge.c: 104: }
  6128                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  6129  001F44  0102               	movlb	2	; () banked
  6130  001F46  5185               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  6131  001F48  B4D8               	btfsc	status,2,c
  6132                           
  6133                           ; BSR set to: 2
  6134  001F4A  ECC0  F011         	call	_TIMER0_Off	;wreg free
  6135  001F4E  0012               	return		;funcret
  6136  001F50                     __end_of_delay_s:
  6137                           	opt stack 0
  6138                           tblptru	equ	0xFF8
  6139                           prodl	equ	0xFF3
  6140                           intcon	equ	0xFF2
  6141                           intcon2	equ	0xFF1
  6142                           intcon3	equ	0xFF0
  6143                           postinc0	equ	0xFEE
  6144                           wreg	equ	0xFE8
  6145                           postdec1	equ	0xFE5
  6146                           fsr1h	equ	0xFE2
  6147                           fsr1l	equ	0xFE1
  6148                           indf2	equ	0xFDF
  6149                           fsr2h	equ	0xFDA
  6150                           fsr2l	equ	0xFD9
  6151                           status	equ	0xFD8
  6152                           
  6153 ;; *************** function _TIMER0_Off *****************
  6154 ;; Defined at:
  6155 ;;		line 111 in file "timer.c"
  6156 ;; Parameters:    Size  Location     Type
  6157 ;;		None
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;		None
  6160 ;; Return value:  Size  Location     Type
  6161 ;;                  1    wreg      void 
  6162 ;; Registers used:
  6163 ;;		None
  6164 ;; Tracked objects:
  6165 ;;		On entry : 0/2
  6166 ;;		On exit  : 3F/0
  6167 ;;		Unchanged: 0/0
  6168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6169 ;;      Params:         0       0       0       0
  6170 ;;      Locals:         0       0       0       0
  6171 ;;      Temps:          0       0       0       0
  6172 ;;      Totals:         0       0       0       0
  6173 ;;Total ram usage:        0 bytes
  6174 ;; Hardware stack levels used:    1
  6175 ;; Hardware stack levels required when called:   10
  6176 ;; This function calls:
  6177 ;;		Nothing
  6178 ;; This function is called by:
  6179 ;;		_Stop_Moteur_1
  6180 ;;		_delay_s
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           	psect	text34
  6185  002380                     __ptext34:
  6186                           	opt stack 0
  6187  002380                     _TIMER0_Off:
  6188                           	opt stack 18
  6189                           
  6190                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  6191                           
  6192                           ;incstack = 0
  6193  002380  9ED5               	bcf	4053,7,c	;volatile
  6194                           
  6195                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  6196  002382  9AF2               	bcf	intcon,5,c	;volatile
  6197                           
  6198                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  6199  002384  94F2               	bcf	intcon,2,c	;volatile
  6200                           
  6201                           ;timer.c: 117: TIMER0_Etat = 0;
  6202  002386  0100               	movlb	0	; () banked
  6203  002388  6B88               	clrf	_TIMER0_Etat& (0+255),b
  6204                           
  6205                           ; BSR set to: 0
  6206  00238A  0012               	return		;funcret
  6207  00238C                     __end_of_TIMER0_Off:
  6208                           	opt stack 0
  6209                           tblptru	equ	0xFF8
  6210                           prodl	equ	0xFF3
  6211                           intcon	equ	0xFF2
  6212                           intcon2	equ	0xFF1
  6213                           intcon3	equ	0xFF0
  6214                           postinc0	equ	0xFEE
  6215                           wreg	equ	0xFE8
  6216                           postdec1	equ	0xFE5
  6217                           fsr1h	equ	0xFE2
  6218                           fsr1l	equ	0xFE1
  6219                           indf2	equ	0xFDF
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _TIMER2_On *****************
  6225 ;; Defined at:
  6226 ;;		line 158 in file "timer.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      void 
  6233 ;; Registers used:
  6234 ;;		None
  6235 ;; Tracked objects:
  6236 ;;		On entry : 3F/0
  6237 ;;		On exit  : 3F/0
  6238 ;;		Unchanged: 3F/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6240 ;;      Params:         0       0       0       0
  6241 ;;      Locals:         0       0       0       0
  6242 ;;      Temps:          0       0       0       0
  6243 ;;      Totals:         0       0       0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:   10
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_Mouvement_Bequille
  6251 ;;		_Mouvement_Z
  6252 ;;		_Mouvement_X
  6253 ;;		_Mouvement_X_Metalhome
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text35
  6258  0023EA                     __ptext35:
  6259                           	opt stack 0
  6260  0023EA                     _TIMER2_On:
  6261                           	opt stack 18
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;incstack = 0
  6268  0023EA  829D               	bsf	3997,1,c	;volatile
  6269                           
  6270                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  6271  0023EC  929E               	bcf	3998,1,c	;volatile
  6272                           
  6273                           ; BSR set to: 0
  6274  0023EE  0012               	return		;funcret
  6275  0023F0                     __end_of_TIMER2_On:
  6276                           	opt stack 0
  6277                           tblptru	equ	0xFF8
  6278                           prodl	equ	0xFF3
  6279                           intcon	equ	0xFF2
  6280                           intcon2	equ	0xFF1
  6281                           intcon3	equ	0xFF0
  6282                           postinc0	equ	0xFEE
  6283                           wreg	equ	0xFE8
  6284                           postdec1	equ	0xFE5
  6285                           fsr1h	equ	0xFE2
  6286                           fsr1l	equ	0xFE1
  6287                           indf2	equ	0xFDF
  6288                           fsr2h	equ	0xFDA
  6289                           fsr2l	equ	0xFD9
  6290                           status	equ	0xFD8
  6291                           
  6292 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  6293 ;; Defined at:
  6294 ;;		line 888 in file "interrupt.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;		None
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      void 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/2
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6308 ;;      Params:         0       0       0       0
  6309 ;;      Locals:         0       0       0       0
  6310 ;;      Temps:          0       0       0       0
  6311 ;;      Totals:         0       0       0       0
  6312 ;;Total ram usage:        0 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:   10
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_Mouvement_Bequille
  6319 ;;		_Mouvement_Z
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           	psect	text36
  6324  00238C                     __ptext36:
  6325                           	opt stack 0
  6326  00238C                     _Surveillance_Consommation_Moteur_2_Desactiver:
  6327                           	opt stack 18
  6328                           
  6329                           ;interrupt.c: 889: if (Surveillance_Consommation_Moteur_2 != 0) {
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;incstack = 0
  6333  00238C  5048               	movf	_Surveillance_Consommation_Moteur_2,w,c
  6334  00238E  B4D8               	btfsc	status,2,c
  6335  002390  0012               	return	
  6336                           
  6337                           ;interrupt.c: 890: Surveillance_Consommation_Moteur_2 = 0;
  6338  002392  6A48               	clrf	_Surveillance_Consommation_Moteur_2,c
  6339                           
  6340                           ;interrupt.c: 891: INTCON3bits.INT2IE = 0;
  6341  002394  98F0               	bcf	intcon3,4,c	;volatile
  6342  002396  0012               	return		;funcret
  6343  002398                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  6344                           	opt stack 0
  6345                           tblptru	equ	0xFF8
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           intcon2	equ	0xFF1
  6349                           intcon3	equ	0xFF0
  6350                           postinc0	equ	0xFEE
  6351                           wreg	equ	0xFE8
  6352                           postdec1	equ	0xFE5
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           indf2	equ	0xFDF
  6356                           fsr2h	equ	0xFDA
  6357                           fsr2l	equ	0xFD9
  6358                           status	equ	0xFD8
  6359                           
  6360 ;; *************** function _Init_Moteur_Bequille *****************
  6361 ;; Defined at:
  6362 ;;		line 229 in file "action.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;		None
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;		None
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      void 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 3F/0
  6373 ;;		On exit  : 3F/0
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6376 ;;      Params:         0       0       0       0
  6377 ;;      Locals:         0       0       0       0
  6378 ;;      Temps:          0       0       0       0
  6379 ;;      Totals:         0       0       0       0
  6380 ;;Total ram usage:        0 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:   11
  6383 ;; This function calls:
  6384 ;;		_TIMER0_On
  6385 ;; This function is called by:
  6386 ;;		_Mouvement_Bequille
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389                           
  6390                           	psect	text37
  6391  0022BE                     __ptext37:
  6392                           	opt stack 0
  6393  0022BE                     _Init_Moteur_Bequille:
  6394                           	opt stack 17
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;action.c: 234: nb_s_fonctionnement = 0;
  6398                           
  6399                           ;incstack = 0
  6400  0022BE  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  6401                           
  6402                           ;action.c: 235: nb_Pion = 0;
  6403  0022C0  6B9F               	clrf	_nb_Pion& (0+255),b	;volatile
  6404                           
  6405                           ;action.c: 236: nb_100ms_Timer_5 = 0;
  6406  0022C2  6BA3               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;action.c: 237: TIMER0_On();
  6410  0022C4  ECFA  F010         	call	_TIMER0_On	;wreg free
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;action.c: 239: INTCON3bits.INT2IE = 1;
  6414  0022C8  88F0               	bsf	intcon3,4,c	;volatile
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;action.c: 240: Compteur_IRQ_I_Moteur_2 = 0;
  6418  0022CA  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6419                           
  6420                           ; BSR set to: 0
  6421  0022CC  0012               	return		;funcret
  6422  0022CE                     __end_of_Init_Moteur_Bequille:
  6423                           	opt stack 0
  6424                           tblptru	equ	0xFF8
  6425                           prodl	equ	0xFF3
  6426                           intcon	equ	0xFF2
  6427                           intcon2	equ	0xFF1
  6428                           intcon3	equ	0xFF0
  6429                           postinc0	equ	0xFEE
  6430                           wreg	equ	0xFE8
  6431                           postdec1	equ	0xFE5
  6432                           fsr1h	equ	0xFE2
  6433                           fsr1l	equ	0xFE1
  6434                           indf2	equ	0xFDF
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _TIMER0_On *****************
  6440 ;; Defined at:
  6441 ;;		line 87 in file "timer.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2
  6450 ;; Tracked objects:
  6451 ;;		On entry : 3F/0
  6452 ;;		On exit  : 3F/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6455 ;;      Params:         0       0       0       0
  6456 ;;      Locals:         0       0       0       0
  6457 ;;      Temps:          0       0       0       0
  6458 ;;      Totals:         0       0       0       0
  6459 ;;Total ram usage:        0 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:   10
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_Init_Moteur_1
  6466 ;;		_Init_Moteur_2
  6467 ;;		_Init_Moteur_Bequille
  6468 ;;		_delay_s
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text38
  6473  0021F4                     __ptext38:
  6474                           	opt stack 0
  6475  0021F4                     _TIMER0_On:
  6476                           	opt stack 18
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;timer.c: 88: TMR0H=0;
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;incstack = 0
  6483  0021F4  6AD7               	clrf	4055,c	;volatile
  6484                           
  6485                           ;timer.c: 89: TMR0L=0;
  6486  0021F6  6AD6               	clrf	4054,c	;volatile
  6487                           
  6488                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6489  0021F8  BED5               	btfsc	4053,7,c	;volatile
  6490  0021FA  D004               	goto	l7878
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6494  0021FC  8AF2               	bsf	intcon,5,c	;volatile
  6495                           
  6496                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6497  0021FE  94F2               	bcf	intcon,2,c	;volatile
  6498                           
  6499                           ;timer.c: 94: LATC5=1;
  6500  002200  8A8B               	bsf	3979,5,c	;volatile
  6501                           
  6502                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  6503  002202  8ED5               	bsf	4053,7,c	;volatile
  6504  002204                     l7878:
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;timer.c: 97: }
  6508                           ;timer.c: 98: TIMER0_Etat = 1;
  6509  002204  0E01               	movlw	1
  6510  002206  6F88               	movwf	_TIMER0_Etat& (0+255),b
  6511                           
  6512                           ; BSR set to: 0
  6513  002208  0C01               	retlw	1	;funcret
  6514  00220A                     __end_of_TIMER0_On:
  6515                           	opt stack 0
  6516                           tblptru	equ	0xFF8
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           intcon2	equ	0xFF1
  6520                           intcon3	equ	0xFF0
  6521                           postinc0	equ	0xFEE
  6522                           wreg	equ	0xFE8
  6523                           postdec1	equ	0xFE5
  6524                           fsr1h	equ	0xFE2
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  6532 ;; Defined at:
  6533 ;;		line 192 in file "adc.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, status,2
  6542 ;; Tracked objects:
  6543 ;;		On entry : 3F/0
  6544 ;;		On exit  : 3F/0
  6545 ;;		Unchanged: 3F/0
  6546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6547 ;;      Params:         0       0       0       0
  6548 ;;      Locals:         0       0       0       0
  6549 ;;      Temps:          0       0       0       0
  6550 ;;      Totals:         0       0       0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:   10
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_Mouvement_Bequille
  6558 ;;		_Mouvement_Z
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           	psect	text39
  6563  001922                     __ptext39:
  6564                           	opt stack 0
  6565  001922                     _Init_ADC_Single_Shoot_I_Moteur_2:
  6566                           	opt stack 18
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;incstack = 0
  6573  001922  9AC2               	bcf	4034,5,c	;volatile
  6574                           
  6575                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  6576  001924  98C2               	bcf	4034,4,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  6580  001926  50C2               	movf	4034,w,c	;volatile
  6581  001928  0BF3               	andlw	-13
  6582  00192A  0904               	iorlw	4
  6583  00192C  6EC2               	movwf	4034,c	;volatile
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;adc.c: 199: ADCON0bits.ADON = 0;
  6587  00192E  90C2               	bcf	4034,0,c	;volatile
  6588                           
  6589                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  6590  001930  0E3F               	movlw	-193
  6591  001932  16C1               	andwf	4033,f,c	;volatile
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  6595  001934  98C1               	bcf	4033,4,c	;volatile
  6596                           
  6597                           ; BSR set to: 0
  6598                           ;adc.c: 212: ADCON1 = 0b00000000;
  6599  001936  6AC1               	clrf	4033,c	;volatile
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  6603  001938  9EC0               	bcf	4032,7,c	;volatile
  6604                           
  6605                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  6606  00193A  50C0               	movf	4032,w,c	;volatile
  6607  00193C  0B87               	andlw	-121
  6608  00193E  0910               	iorlw	16
  6609  001940  6EC0               	movwf	4032,c	;volatile
  6610                           
  6611                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  6612  001942  50C0               	movf	4032,w,c	;volatile
  6613  001944  0BF8               	andlw	-8
  6614  001946  0904               	iorlw	4
  6615  001948  6EC0               	movwf	4032,c	;volatile
  6616                           
  6617                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  6618  00194A  50C0               	movf	4032,w,c	;volatile
  6619  00194C  0BF8               	andlw	-8
  6620  00194E  0901               	iorlw	1
  6621  001950  6EC0               	movwf	4032,c	;volatile
  6622                           
  6623                           ;adc.c: 219: ADCON2 = 0b00010100;
  6624  001952  0E14               	movlw	20
  6625  001954  6EC0               	movwf	4032,c	;volatile
  6626                           
  6627                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  6628  001956  50C0               	movf	4032,w,c	;volatile
  6629  001958  0BF8               	andlw	-8
  6630  00195A  0901               	iorlw	1
  6631  00195C  6EC0               	movwf	4032,c	;volatile
  6632                           
  6633                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  6634  00195E  0E3F               	movlw	-193
  6635  001960  169A               	andwf	3994,f,c	;volatile
  6636                           
  6637                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  6638  001962  509A               	movf	3994,w,c	;volatile
  6639  001964  0BE0               	andlw	-32
  6640  001966  0910               	iorlw	16
  6641  001968  6E9A               	movwf	3994,c	;volatile
  6642                           
  6643                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  6644  00196A  0EE0               	movlw	-32
  6645  00196C  169A               	andwf	3994,f,c	;volatile
  6646                           
  6647                           ;adc.c: 235: ADCON3 = 0b00010000;
  6648  00196E  0E10               	movlw	16
  6649  001970  6E9A               	movwf	3994,c	;volatile
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;adc.c: 236: ADCON3 = 0x00;
  6653  001972  6A9A               	clrf	3994,c	;volatile
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;adc.c: 241: ADCHS = 0b00000000;
  6657  001974  6A99               	clrf	3993,c	;volatile
  6658                           
  6659                           ;adc.c: 242: ANSEL0 = 0b00000011;
  6660  001976  0E03               	movlw	3
  6661  001978  6EB8               	movwf	4024,c	;volatile
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;adc.c: 244: ANSEL1 = 0b00000000;
  6665  00197A  6AB9               	clrf	4025,c	;volatile
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;adc.c: 253: PIE1bits.ADIE = 1;
  6669  00197C  8C9D               	bsf	3997,6,c	;volatile
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;adc.c: 254: ADIF=0;
  6673  00197E  9C9E               	bcf	3998,6,c	;volatile
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;adc.c: 255: IPR1bits.ADIP = 0;
  6677  001980  9C9F               	bcf	3999,6,c	;volatile
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;adc.c: 260: ADON = 1;
  6681  001982  80C2               	bsf	4034,0,c	;volatile
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  6685  001984  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6686                           
  6687                           ; BSR set to: 0
  6688  001986  0012               	return		;funcret
  6689  001988                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  6690                           	opt stack 0
  6691                           tblptru	equ	0xFF8
  6692                           prodl	equ	0xFF3
  6693                           intcon	equ	0xFF2
  6694                           intcon2	equ	0xFF1
  6695                           intcon3	equ	0xFF0
  6696                           postinc0	equ	0xFEE
  6697                           wreg	equ	0xFE8
  6698                           postdec1	equ	0xFE5
  6699                           fsr1h	equ	0xFE2
  6700                           fsr1l	equ	0xFE1
  6701                           indf2	equ	0xFDF
  6702                           fsr2h	equ	0xFDA
  6703                           fsr2l	equ	0xFD9
  6704                           status	equ	0xFD8
  6705                           
  6706 ;; *************** function _Detection_Pion_Off *****************
  6707 ;; Defined at:
  6708 ;;		line 126 in file "pion.c"
  6709 ;; Parameters:    Size  Location     Type
  6710 ;;		None
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;		None
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  1    wreg      void 
  6715 ;; Registers used:
  6716 ;;		None
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/2
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6722 ;;      Params:         0       0       0       0
  6723 ;;      Locals:         0       0       0       0
  6724 ;;      Temps:          0       0       0       0
  6725 ;;      Totals:         0       0       0       0
  6726 ;;Total ram usage:        0 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:   10
  6729 ;; This function calls:
  6730 ;;		Nothing
  6731 ;; This function is called by:
  6732 ;;		_Mouvement_Bequille
  6733 ;;		_Mouvement_Z
  6734 ;;		_Mouvement_X
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text40
  6739  0023DA                     __ptext40:
  6740                           	opt stack 0
  6741  0023DA                     _Detection_Pion_Off:
  6742                           	opt stack 18
  6743                           
  6744                           ;pion.c: 141: Detecteur_Pion = 0;
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;incstack = 0
  6748  0023DA  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  6749                           
  6750                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  6751  0023DC  92A3               	bcf	4003,1,c	;volatile
  6752                           
  6753                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  6754  0023DE  92A4               	bcf	4004,1,c	;volatile
  6755  0023E0  0012               	return		;funcret
  6756  0023E2                     __end_of_Detection_Pion_Off:
  6757                           	opt stack 0
  6758                           tblptru	equ	0xFF8
  6759                           prodl	equ	0xFF3
  6760                           intcon	equ	0xFF2
  6761                           intcon2	equ	0xFF1
  6762                           intcon3	equ	0xFF0
  6763                           postinc0	equ	0xFEE
  6764                           wreg	equ	0xFE8
  6765                           postdec1	equ	0xFE5
  6766                           fsr1h	equ	0xFE2
  6767                           fsr1l	equ	0xFE1
  6768                           indf2	equ	0xFDF
  6769                           fsr2h	equ	0xFDA
  6770                           fsr2l	equ	0xFD9
  6771                           status	equ	0xFD8
  6772                           
  6773 ;; *************** function _Check_List_Moteur_Bequille *****************
  6774 ;; Defined at:
  6775 ;;		line 251 in file "action.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6789 ;;      Params:         0       0       0       0
  6790 ;;      Locals:         0       0       0       0
  6791 ;;      Temps:          0       0       0       1
  6792 ;;      Totals:         0       0       0       1
  6793 ;;Total ram usage:        1 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:   17
  6796 ;; This function calls:
  6797 ;;		_EUSART1_Check_Buffer
  6798 ;;		_Etat_Update
  6799 ;;		_SPI_Check_Buffer
  6800 ;;		___lbdiv
  6801 ;; This function is called by:
  6802 ;;		_Mouvement_Bequille
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text41
  6807  001DBE                     __ptext41:
  6808                           	opt stack 0
  6809  001DBE                     _Check_List_Moteur_Bequille:
  6810                           	opt stack 11
  6811                           
  6812                           ;action.c: 255: if(PORTCbits.RC5 == 0){
  6813                           
  6814                           ;incstack = 0
  6815  001DBE  AA82               	btfss	3970,5,c	;volatile
  6816                           
  6817                           ;action.c: 256: Compteur_IRQ_I_Moteur_2 = 0;
  6818  001DC0  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6819                           
  6820                           ;action.c: 257: }
  6821                           ;action.c: 261: EUSART1_Check_Buffer();
  6822  001DC2  ECBE  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  6823                           
  6824                           ;action.c: 262: SPI_Check_Buffer();
  6825  001DC6  ECA8  F00F         	call	_SPI_Check_Buffer	;wreg free
  6826                           
  6827                           ;action.c: 266: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  6828  001DCA  504C               	movf	_nb_s_bequille,w,c
  6829  001DCC  0100               	movlb	0	; () banked
  6830  001DCE  5DA5               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  6831  001DD0  E20E               	bc	l990
  6832                           
  6833                           ; BSR set to: 0
  6834  001DD2  0E02               	movlw	2
  6835  001DD4  65A5               	cpfsgt	_nb_s_fonctionnement& (0+255),b	;volatile
  6836  001DD6  0C02               	retlw	2
  6837                           
  6838                           ; BSR set to: 0
  6839  001DD8  0E05               	movlw	5
  6840  001DDA  6E0F               	movwf	___lbdiv@divisor,c
  6841  001DDC  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  6842  001DDE  EC16  F00F         	call	___lbdiv
  6843  001DE2  0102               	movlb	2	; () banked
  6844  001DE4  6F84               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  6845  001DE6  504A               	movf	_Bequille_I_Max,w,c
  6846  001DE8  5D84               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  6847  001DEA  A0D8               	btfss	status,0,c
  6848  001DEC  0012               	return	
  6849  001DEE                     l990:
  6850                           
  6851                           ;action.c: 269: P4_busy = 0;
  6852  001DEE  0100               	movlb	0	; () banked
  6853  001DF0  6BAA               	clrf	_P4_busy& (0+255),b
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;action.c: 270: Etat_Update(0);
  6857  001DF2  0E00               	movlw	0
  6858  001DF4  EF8C  F010         	goto	_Etat_Update
  6859  001DF8                     __end_of_Check_List_Moteur_Bequille:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           prodl	equ	0xFF3
  6863                           intcon	equ	0xFF2
  6864                           intcon2	equ	0xFF1
  6865                           intcon3	equ	0xFF0
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           postdec1	equ	0xFE5
  6869                           fsr1h	equ	0xFE2
  6870                           fsr1l	equ	0xFE1
  6871                           indf2	equ	0xFDF
  6872                           fsr2h	equ	0xFDA
  6873                           fsr2l	equ	0xFD9
  6874                           status	equ	0xFD8
  6875                           
  6876 ;; *************** function ___lbdiv *****************
  6877 ;; Defined at:
  6878 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  dividend        1    wreg     unsigned char 
  6881 ;;  divisor         1   14[COMRAM] unsigned char 
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  dividend        1   15[COMRAM] unsigned char 
  6884 ;;  quotient        1   17[COMRAM] unsigned char 
  6885 ;;  counter         1   16[COMRAM] unsigned char 
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      unsigned char 
  6888 ;; Registers used:
  6889 ;;		wreg, status,2, status,0
  6890 ;; Tracked objects:
  6891 ;;		On entry : 3F/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6895 ;;      Params:         1       0       0       0
  6896 ;;      Locals:         3       0       0       0
  6897 ;;      Temps:          0       0       0       0
  6898 ;;      Totals:         4       0       0       0
  6899 ;;Total ram usage:        4 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:   10
  6902 ;; This function calls:
  6903 ;;		Nothing
  6904 ;; This function is called by:
  6905 ;;		_Check_List_Moteur_Bequille
  6906 ;; This function uses a non-reentrant model
  6907 ;;
  6908                           
  6909                           	psect	text42
  6910  001E2C                     __ptext42:
  6911                           	opt stack 0
  6912  001E2C                     ___lbdiv:
  6913                           	opt stack 17
  6914                           
  6915                           ;incstack = 0
  6916                           ;___lbdiv@dividend stored from wreg
  6917  001E2C  6E10               	movwf	___lbdiv@dividend,c
  6918  001E2E  6A12               	clrf	___lbdiv@quotient,c
  6919  001E30  500F               	movf	___lbdiv@divisor,w,c
  6920  001E32  E014               	bz	l7904
  6921  001E34  0E01               	movlw	1
  6922  001E36  6E11               	movwf	___lbdiv@counter,c
  6923  001E38  D003               	goto	l7892
  6924  001E3A                     l7888:
  6925  001E3A  90D8               	bcf	status,0,c
  6926  001E3C  360F               	rlcf	___lbdiv@divisor,f,c
  6927  001E3E  2A11               	incf	___lbdiv@counter,f,c
  6928  001E40                     l7892:
  6929  001E40  AE0F               	btfss	___lbdiv@divisor,7,c
  6930  001E42  D7FB               	goto	l7888
  6931  001E44                     l7894:
  6932  001E44  90D8               	bcf	status,0,c
  6933  001E46  3612               	rlcf	___lbdiv@quotient,f,c
  6934  001E48  500F               	movf	___lbdiv@divisor,w,c
  6935  001E4A  5C10               	subwf	___lbdiv@dividend,w,c
  6936  001E4C  E303               	bnc	l7900
  6937  001E4E  500F               	movf	___lbdiv@divisor,w,c
  6938  001E50  5E10               	subwf	___lbdiv@dividend,f,c
  6939  001E52  8012               	bsf	___lbdiv@quotient,0,c
  6940  001E54                     l7900:
  6941  001E54  90D8               	bcf	status,0,c
  6942  001E56  320F               	rrcf	___lbdiv@divisor,f,c
  6943  001E58  2E11               	decfsz	___lbdiv@counter,f,c
  6944  001E5A  D7F4               	goto	l7894
  6945  001E5C                     l7904:
  6946  001E5C  5012               	movf	___lbdiv@quotient,w,c
  6947  001E5E  0012               	return		;funcret
  6948  001E60                     __end_of___lbdiv:
  6949                           	opt stack 0
  6950                           tblptru	equ	0xFF8
  6951                           prodl	equ	0xFF3
  6952                           intcon	equ	0xFF2
  6953                           intcon2	equ	0xFF1
  6954                           intcon3	equ	0xFF0
  6955                           postinc0	equ	0xFEE
  6956                           wreg	equ	0xFE8
  6957                           postdec1	equ	0xFE5
  6958                           fsr1h	equ	0xFE2
  6959                           fsr1l	equ	0xFE1
  6960                           indf2	equ	0xFDF
  6961                           fsr2h	equ	0xFDA
  6962                           fsr2l	equ	0xFD9
  6963                           status	equ	0xFD8
  6964                           
  6965 ;; *************** function _SPI_Check_Buffer *****************
  6966 ;; Defined at:
  6967 ;;		line 348 in file "spi.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;                  1    wreg      void 
  6974 ;; Registers used:
  6975 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6981 ;;      Params:         0       0       0       0
  6982 ;;      Locals:         0       0       0       0
  6983 ;;      Temps:          0       0       0       0
  6984 ;;      Totals:         0       0       0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:   16
  6988 ;; This function calls:
  6989 ;;		_EUSART1_RX_T3_LOCAL
  6990 ;; This function is called by:
  6991 ;;		_Cycle
  6992 ;;		_Check_List_Moteur_Metalhome
  6993 ;;		_Check_List_Moteur_1
  6994 ;;		_Check_List_Moteur_2
  6995 ;;		_Check_List_Moteur_Bequille
  6996 ;;		_Mouvement_X
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           	psect	text43
  7001  001F50                     __ptext43:
  7002                           	opt stack 0
  7003  001F50                     _SPI_Check_Buffer:
  7004                           	opt stack 13
  7005                           
  7006                           ;spi.c: 396: if (SPI_full == 1) {
  7007                           
  7008                           ;incstack = 0
  7009  001F50  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7010  001F52  0012               	return	
  7011                           
  7012                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  7013                           ;spi.c: 400: SPI_RX_TEXT[1],
  7014                           ;spi.c: 401: SPI_RX_TEXT[2],
  7015                           ;spi.c: 402: SPI_RX_TEXT[3],
  7016                           ;spi.c: 403: SPI_RX_TEXT[4],
  7017                           ;spi.c: 404: SPI_RX_TEXT[5],
  7018                           ;spi.c: 405: SPI_RX_TEXT[6],
  7019                           ;spi.c: 406: SPI_RX_TEXT[7]);
  7020  001F54  C101  F0F9         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7021  001F58  C102  F0FA         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7022  001F5C  C103  F0FB         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7023  001F60  C104  F0FC         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7024  001F64  C105  F0FD         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7025  001F68  C106  F0FE         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7026  001F6C  C107  F0FF         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7027  001F70  0101               	movlb	1	; () banked
  7028  001F72  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  7029  001F74  EC6D  F000         	call	_EUSART1_RX_T3_LOCAL
  7030                           
  7031                           ;spi.c: 408: SPI_full = 0;
  7032  001F78  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7033  001F7A  0012               	return		;funcret
  7034  001F7C                     __end_of_SPI_Check_Buffer:
  7035                           	opt stack 0
  7036                           tblptru	equ	0xFF8
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           intcon2	equ	0xFF1
  7040                           intcon3	equ	0xFF0
  7041                           postinc0	equ	0xFEE
  7042                           wreg	equ	0xFE8
  7043                           postdec1	equ	0xFE5
  7044                           fsr1h	equ	0xFE2
  7045                           fsr1l	equ	0xFE1
  7046                           indf2	equ	0xFDF
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function _EUSART1_Check_Buffer *****************
  7052 ;; Defined at:
  7053 ;;		line 268 in file "eusart.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;                  1    wreg      void 
  7060 ;; Registers used:
  7061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 0/0
  7065 ;;		Unchanged: 0/0
  7066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7067 ;;      Params:         0       0       0       0
  7068 ;;      Locals:         0       0       0       0
  7069 ;;      Temps:          0       0       0       0
  7070 ;;      Totals:         0       0       0       0
  7071 ;;Total ram usage:        0 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:   16
  7074 ;; This function calls:
  7075 ;;		_EUSART1_RX_T3_LOCAL
  7076 ;; This function is called by:
  7077 ;;		_Cycle
  7078 ;;		_Check_List_Moteur_Metalhome
  7079 ;;		_Check_List_Moteur_1
  7080 ;;		_Check_List_Moteur_2
  7081 ;;		_Check_List_Moteur_Bequille
  7082 ;;		_Mouvement_X
  7083 ;;		_delay_s
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text44
  7088  001F7C                     __ptext44:
  7089                           	opt stack 0
  7090  001F7C                     _EUSART1_Check_Buffer:
  7091                           	opt stack 12
  7092                           
  7093                           ;eusart.c: 270: if (RX1_full == 1) {
  7094                           
  7095                           ;incstack = 0
  7096  001F7C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7097  001F7E  0012               	return	
  7098                           
  7099                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  7100                           ;eusart.c: 274: UART_RX_TEXT[1],
  7101                           ;eusart.c: 275: UART_RX_TEXT[2],
  7102                           ;eusart.c: 276: UART_RX_TEXT[3],
  7103                           ;eusart.c: 277: UART_RX_TEXT[4],
  7104                           ;eusart.c: 278: UART_RX_TEXT[5],
  7105                           ;eusart.c: 279: UART_RX_TEXT[6],
  7106                           ;eusart.c: 280: UART_RX_TEXT[7]);
  7107  001F80  C1C1  F0F9         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7108  001F84  C1C2  F0FA         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7109  001F88  C1C3  F0FB         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7110  001F8C  C1C4  F0FC         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7111  001F90  C1C5  F0FD         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7112  001F94  C1C6  F0FE         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7113  001F98  C1C7  F0FF         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7114  001F9C  0101               	movlb	1	; () banked
  7115  001F9E  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  7116  001FA0  EC6D  F000         	call	_EUSART1_RX_T3_LOCAL
  7117                           
  7118                           ;eusart.c: 282: RX1_full = 0;
  7119  001FA4  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7120  001FA6  0012               	return		;funcret
  7121  001FA8                     __end_of_EUSART1_Check_Buffer:
  7122                           	opt stack 0
  7123                           tblptru	equ	0xFF8
  7124                           prodl	equ	0xFF3
  7125                           intcon	equ	0xFF2
  7126                           intcon2	equ	0xFF1
  7127                           intcon3	equ	0xFF0
  7128                           postinc0	equ	0xFEE
  7129                           wreg	equ	0xFE8
  7130                           postdec1	equ	0xFE5
  7131                           fsr1h	equ	0xFE2
  7132                           fsr1l	equ	0xFE1
  7133                           indf2	equ	0xFDF
  7134                           fsr2h	equ	0xFDA
  7135                           fsr2l	equ	0xFD9
  7136                           status	equ	0xFD8
  7137                           
  7138 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  7139 ;; Defined at:
  7140 ;;		line 822 in file "eusart.c"
  7141 ;; Parameters:    Size  Location     Type
  7142 ;;  Ad              1    wreg     unsigned char 
  7143 ;;  Da              1   13[BANK0 ] unsigned char 
  7144 ;;  A               1   14[BANK0 ] unsigned char 
  7145 ;;  B               1   15[BANK0 ] unsigned char 
  7146 ;;  C               1   16[BANK0 ] unsigned char 
  7147 ;;  D               1   17[BANK0 ] unsigned char 
  7148 ;;  E               1   18[BANK0 ] unsigned char 
  7149 ;;  F               1   19[BANK0 ] unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  Ad              1   63[COMRAM] unsigned char 
  7152 ;;  i               2   64[COMRAM] int 
  7153 ;;  Reponse         1    0        unsigned char 
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      void 
  7156 ;; Registers used:
  7157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 3F/1
  7160 ;;		On exit  : 0/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7163 ;;      Params:         0       7       0       0
  7164 ;;      Locals:         3       0       0       0
  7165 ;;      Temps:          0       0       0       4
  7166 ;;      Totals:         3       7       0       4
  7167 ;;Total ram usage:       14 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:   15
  7170 ;; This function calls:
  7171 ;;		_Alarme_On
  7172 ;;		_Coupe_Moteur
  7173 ;;		_EUSART1_Buffer_Send
  7174 ;;		_Etat_Get
  7175 ;;		_Etat_Intitule
  7176 ;;		_Etat_Update
  7177 ;;		_IRQ_Execution
  7178 ;;		___awmod
  7179 ;;		_delay_1s
  7180 ;;		_sprintf
  7181 ;; This function is called by:
  7182 ;;		_EUSART1_Check_Buffer
  7183 ;;		_SPI_Check_Buffer
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text45
  7188  0000DA                     __ptext45:
  7189                           	opt stack 0
  7190  0000DA                     _EUSART1_RX_T3_LOCAL:
  7191                           	opt stack 12
  7192                           
  7193                           ;incstack = 0
  7194                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  7195  0000DA  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  7196                           
  7197                           ;eusart.c: 823: int i;
  7198                           ;eusart.c: 824: unsigned char Reponse;
  7199                           ;eusart.c: 830: switch (Ad) {
  7200  0000DC  D377               	goto	l7828
  7201  0000DE                     l7538:
  7202                           
  7203                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  7204  0000DE  C0F9  F280         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  7205  0000E2  0ED0               	movlw	208
  7206  0000E4  0102               	movlb	2	; () banked
  7207  0000E6  2780               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7208  0000E8  4780               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7209  0000EA  4780               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7210  0000EC  508B               	movf	3979,w,c	;volatile
  7211  0000EE  1980               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7212  0000F0  0BFB               	andlw	-5
  7213  0000F2  1980               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7214  0000F4  6E8B               	movwf	3979,c	;volatile
  7215                           
  7216                           ;eusart.c: 847: break;
  7217  0000F6  0012               	return	
  7218  0000F8                     l7540:
  7219                           
  7220                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  7221  0000F8  0EAB               	movlw	low _UART_TX_TEXT
  7222  0000FA  6E1B               	movwf	sprintf@sp,c
  7223  0000FC  0EB9               	movlw	low (STR_4+30)
  7224  0000FE  6E1C               	movwf	sprintf@f,c
  7225  000100  0E3C               	movlw	high (STR_4+30)
  7226  000102  6E1D               	movwf	sprintf@f+1,c
  7227  000104  C098  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  7228  000108  6A1F               	clrf	?_sprintf+4,c
  7229  00010A  EC56  F004         	call	_sprintf	;wreg free
  7230  00010E                     l7542:
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  7234  00010E  0EAB               	movlw	low _UART_TX_TEXT
  7235  000110  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  7236  000112  EF7A  F00A         	goto	_EUSART1_Buffer_Send	;wreg free
  7237  000116                     l7544:
  7238                           
  7239                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  7240  000116  0EAB               	movlw	low _UART_TX_TEXT
  7241  000118  6E1B               	movwf	sprintf@sp,c
  7242  00011A  0EB7               	movlw	low STR_2
  7243  00011C  6E1C               	movwf	sprintf@f,c
  7244  00011E  0E3B               	movlw	high STR_2
  7245  000120  6E1D               	movwf	sprintf@f+1,c
  7246  000122  C095  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7247  000126  6A1F               	clrf	?_sprintf+4,c
  7248  000128  C098  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  7249  00012C  6A21               	clrf	?_sprintf+6,c
  7250  00012E  C097  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  7251  000132  6A23               	clrf	?_sprintf+8,c
  7252  000134  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  7253  000138  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  7254  00013C  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  7255  000140  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  7256  000144  C09A  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  7257  000148  6A29               	clrf	?_sprintf+14,c
  7258  00014A  C09D  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  7259  00014E  6A2B               	clrf	?_sprintf+16,c
  7260  000150  EC56  F004         	call	_sprintf	;wreg free
  7261  000154  D7DC               	goto	l7542
  7262  000156                     l7548:
  7263                           
  7264                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  7265  000156  0EAB               	movlw	low _UART_TX_TEXT
  7266  000158  6E1B               	movwf	sprintf@sp,c
  7267  00015A  0EEC               	movlw	low STR_3
  7268  00015C  6E1C               	movwf	sprintf@f,c
  7269  00015E  0E3C               	movlw	high STR_3
  7270  000160  6E1D               	movwf	sprintf@f+1,c
  7271  000162  0E00               	movlw	0
  7272  000164  EC4A  F00F         	call	_Etat_Get
  7273  000168  6E1E               	movwf	?_sprintf+3,c
  7274  00016A  6A1F               	clrf	?_sprintf+4,c
  7275  00016C  0E01               	movlw	1
  7276  00016E  EC4A  F00F         	call	_Etat_Get
  7277  000172  6E20               	movwf	?_sprintf+5,c
  7278  000174  6A21               	clrf	?_sprintf+6,c
  7279  000176  C0A7  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7280  00017A  6A23               	clrf	?_sprintf+8,c
  7281  00017C  EC56  F004         	call	_sprintf	;wreg free
  7282  000180  D7C6               	goto	l7542
  7283  000182                     l1386:
  7284                           
  7285                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  7286  000182  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  7287  000184  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  7288  000186                     l7556:
  7289                           
  7290                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  7291  000186  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  7292  000188  08B4               	sublw	low (_UART_TX_TEXT+9)
  7293  00018A  6ED9               	movwf	fsr2l,c
  7294  00018C  6ADA               	clrf	fsr2h,c
  7295  00018E  504D               	movf	_Etat_Precedent_Index,w,c
  7296  000190  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  7297  000192  6E0F               	movwf	___awmod@dividend,c
  7298  000194  0E00               	movlw	0
  7299  000196  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  7300  000198  6E10               	movwf	___awmod@dividend+1,c
  7301  00019A  6A12               	clrf	___awmod@divisor+1,c
  7302  00019C  0E0A               	movlw	10
  7303  00019E  6E11               	movwf	___awmod@divisor,c
  7304  0001A0  EC2A  F00C         	call	___awmod	;wreg free
  7305  0001A4  500F               	movf	?___awmod,w,c
  7306  0001A6  0F6A               	addlw	low _Etat_Log
  7307  0001A8  6EE1               	movwf	fsr1l,c
  7308  0001AA  6AE2               	clrf	fsr1h,c
  7309  0001AC  50E7               	movf	indf1,w,c
  7310  0001AE  EC30  F00F         	call	_Etat_Intitule
  7311  0001B2  6EDF               	movwf	indf2,c
  7312  0001B4  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  7313  0001B6  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  7314  0001B8  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  7315  0001BA  D7E5               	goto	l7556
  7316  0001BC  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  7317  0001BE  E103               	bnz	u5650
  7318  0001C0  0E0A               	movlw	10
  7319  0001C2  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  7320  0001C4  E3E0               	bnc	l7556
  7321  0001C6                     u5650:
  7322                           
  7323                           ;eusart.c: 882: }
  7324                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  7325  0001C6  0100               	movlb	0	; () banked
  7326  0001C8  6BB5               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  7327  0001CA  D7A1               	goto	l7542
  7328  0001CC                     l7564:
  7329                           
  7330                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  7331  0001CC  0EAB               	movlw	low _UART_TX_TEXT
  7332  0001CE  6E1B               	movwf	sprintf@sp,c
  7333  0001D0  0E9B               	movlw	low STR_4
  7334  0001D2  6E1C               	movwf	sprintf@f,c
  7335  0001D4  0E3C               	movlw	high STR_4
  7336  0001D6  6E1D               	movwf	sprintf@f+1,c
  7337  0001D8  C0A5  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  7338  0001DC  6A1F               	clrf	?_sprintf+4,c
  7339  0001DE  C09F  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  7340  0001E2  6A21               	clrf	?_sprintf+6,c
  7341  0001E4  C0A3  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  7342  0001E8  6A23               	clrf	?_sprintf+8,c
  7343  0001EA  EC56  F004         	call	_sprintf	;wreg free
  7344  0001EE  D78F               	goto	l7542
  7345  0001F0                     l7568:
  7346                           
  7347                           ;eusart.c: 898: consigne = (char) (5 * Da);
  7348  0001F0  0100               	movlb	0	; () banked
  7349  0001F2  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7350  0001F4  0D05               	mullw	5
  7351  0001F6  CFF3 F095          	movff	prodl,_consigne	;volatile
  7352                           
  7353                           ;eusart.c: 900: break;
  7354  0001FA  0012               	return	
  7355  0001FC                     l7570:
  7356                           
  7357                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  7358  0001FC  0EAB               	movlw	low _UART_TX_TEXT
  7359  0001FE  6E1B               	movwf	sprintf@sp,c
  7360  000200  0EF9               	movlw	low STR_5
  7361  000202  6E1C               	movwf	sprintf@f,c
  7362  000204  0E3C               	movlw	high STR_5
  7363  000206  6E1D               	movwf	sprintf@f+1,c
  7364  000208  C0AA  F01E         	movff	_P4_busy,?_sprintf+3
  7365  00020C  6A1F               	clrf	?_sprintf+4,c
  7366  00020E  EC56  F004         	call	_sprintf	;wreg free
  7367  000212  D77D               	goto	l7542
  7368  000214                     l7574:
  7369                           
  7370                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  7371  000214  0EAB               	movlw	low _UART_TX_TEXT
  7372  000216  6E1B               	movwf	sprintf@sp,c
  7373  000218  0EB9               	movlw	low (STR_4+30)
  7374  00021A  6E1C               	movwf	sprintf@f,c
  7375  00021C  0E3C               	movlw	high (STR_4+30)
  7376  00021E  6E1D               	movwf	sprintf@f+1,c
  7377  000220  0100               	movlb	0	; () banked
  7378  000222  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7379  000224  0FD0               	addlw	208
  7380  000226  EC4A  F00F         	call	_Etat_Get
  7381  00022A  6E1E               	movwf	?_sprintf+3,c
  7382  00022C  6A1F               	clrf	?_sprintf+4,c
  7383  00022E  EC56  F004         	call	_sprintf	;wreg free
  7384  000232  D76D               	goto	l7542
  7385  000234                     l7578:
  7386                           
  7387                           ;eusart.c: 920: Etat_Update(Da);
  7388  000234  0100               	movlb	0	; () banked
  7389  000236  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7390  000238  EF8C  F010         	goto	_Etat_Update
  7391  00023C                     l7580:
  7392                           
  7393                           ; BSR set to: 2
  7394                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  7395  00023C  0100               	movlb	0	; () banked
  7396  00023E  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7397  000240  0D0A               	mullw	10
  7398  000242  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7399  000246  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7400  000248  0D64               	mullw	100
  7401  00024A  50F3               	movf	prodl,w,c
  7402  00024C  0102               	movlb	2	; () banked
  7403  00024E  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7404  000250  0100               	movlb	0	; () banked
  7405  000252  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7406  000254  0F30               	addlw	48
  7407  000256  6F90               	movwf	_Pelle_I_Max& (0+255),b
  7408                           
  7409                           ;eusart.c: 943: break;
  7410  000258  0012               	return	
  7411  00025A                     l7582:
  7412                           
  7413                           ; BSR set to: 2
  7414                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7415  00025A  0100               	movlb	0	; () banked
  7416  00025C  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7417  00025E  0D0A               	mullw	10
  7418  000260  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7419  000264  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7420  000266  0D64               	mullw	100
  7421  000268  50F3               	movf	prodl,w,c
  7422  00026A  0102               	movlb	2	; () banked
  7423  00026C  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7424  00026E  0100               	movlb	0	; () banked
  7425  000270  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7426  000272  0F30               	addlw	48
  7427  000274  6E4A               	movwf	_Bequille_I_Max,c
  7428                           
  7429                           ;eusart.c: 946: break;
  7430  000276  0012               	return	
  7431  000278                     l7586:
  7432  000278  0ED0               	movlw	208
  7433  00027A  0102               	movlb	2	; () banked
  7434  00027C  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7435  00027E  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7436  000280  0100               	movlb	0	; () banked
  7437  000282  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7438  000284  0102               	movlb	2	; () banked
  7439  000286  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7440  000288  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7441  00028A  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7442  00028C  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7443  00028E  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7444  000290  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7445                           
  7446                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7447                           ; Switch size 1, requested type "speed"
  7448                           ; Number of cases is 1, Range of values is 0 to 0
  7449                           ; switch strategies available:
  7450                           ; Name         Instructions Cycles
  7451                           ; simple_byte            4     3 (average)
  7452                           ;	Chosen strategy is simple_byte
  7453  000292  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7454  000294  A4D8               	btfss	status,2,c
  7455  000296  0012               	return	
  7456                           
  7457                           ; BSR set to: 2
  7458                           ; Switch size 1, requested type "speed"
  7459                           ; Number of cases is 3, Range of values is 1 to 3
  7460                           ; switch strategies available:
  7461                           ; Name         Instructions Cycles
  7462                           ; simple_byte           10     6 (average)
  7463                           ;	Chosen strategy is simple_byte
  7464  000298  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7465  00029A  0A01               	xorlw	1	; case 1
  7466  00029C  B4D8               	btfsc	status,2,c
  7467  00029E  0012               	return	
  7468  0002A0  0A03               	xorlw	3	; case 2
  7469  0002A2  E0CC               	bz	l7580
  7470  0002A4  0A01               	xorlw	1	; case 3
  7471  0002A6  E0D9               	bz	l7582
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;eusart.c: 949: break;
  7475  0002A8  0012               	return	
  7476  0002AA                     l7588:
  7477                           
  7478                           ; BSR set to: 2
  7479                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7480  0002AA  0100               	movlb	0	; () banked
  7481  0002AC  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7482  0002AE  0D0A               	mullw	10
  7483  0002B0  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7484  0002B4  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7485  0002B6  0D64               	mullw	100
  7486  0002B8  50F3               	movf	prodl,w,c
  7487  0002BA  0102               	movlb	2	; () banked
  7488  0002BC  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7489  0002BE  0100               	movlb	0	; () banked
  7490  0002C0  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7491  0002C2  0F30               	addlw	48
  7492  0002C4  6E4B               	movwf	_Consigne_en_A,c
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  7496  0002C6  C04B  F095         	movff	_Consigne_en_A,_consigne	;volatile
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  7500  0002CA  C095  F094         	movff	_consigne,_Consigne_Max	;volatile
  7501                           
  7502                           ;eusart.c: 968: break;
  7503  0002CE  D0D2               	goto	l7640
  7504  0002D0                     l7594:
  7505                           
  7506                           ; BSR set to: 2
  7507                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7508  0002D0  0100               	movlb	0	; () banked
  7509  0002D2  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7510  0002D4  0D0A               	mullw	10
  7511  0002D6  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7512  0002DA  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7513  0002DC  0D64               	mullw	100
  7514  0002DE  50F3               	movf	prodl,w,c
  7515  0002E0  0102               	movlb	2	; () banked
  7516  0002E2  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7517  0002E4  0100               	movlb	0	; () banked
  7518  0002E6  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7519  0002E8  0F30               	addlw	48
  7520  0002EA  6FA4               	movwf	_nb_s_patinage& (0+255),b
  7521                           
  7522                           ;eusart.c: 971: break;
  7523  0002EC  D0C3               	goto	l7640
  7524  0002EE                     l7596:
  7525                           
  7526                           ; BSR set to: 2
  7527                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7528  0002EE  0100               	movlb	0	; () banked
  7529  0002F0  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7530  0002F2  0D0A               	mullw	10
  7531  0002F4  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7532  0002F8  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7533  0002FA  0D64               	mullw	100
  7534  0002FC  50F3               	movf	prodl,w,c
  7535  0002FE  0102               	movlb	2	; () banked
  7536  000300  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7537  000302  0100               	movlb	0	; () banked
  7538  000304  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7539  000306  0F30               	addlw	48
  7540  000308  6FA2               	movwf	_nb_100ms_pion& (0+255),b
  7541                           
  7542                           ;eusart.c: 974: break;
  7543  00030A  D0B4               	goto	l7640
  7544  00030C                     l7598:
  7545                           
  7546                           ; BSR set to: 2
  7547                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  7548  00030C  0100               	movlb	0	; () banked
  7549  00030E  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7550  000310  0D0A               	mullw	10
  7551  000312  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7552  000316  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7553  000318  0D64               	mullw	100
  7554  00031A  50F3               	movf	prodl,w,c
  7555  00031C  0102               	movlb	2	; () banked
  7556  00031E  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7557  000320  0100               	movlb	0	; () banked
  7558  000322  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7559  000324  0F30               	addlw	48
  7560  000326  6FA1               	movwf	_nb_100ms_platine& (0+255),b
  7561                           
  7562                           ; BSR set to: 0
  7563                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  7564  000328  C0A1  F0EB         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  7565                           
  7566                           ;eusart.c: 983: break;
  7567  00032C  D0A3               	goto	l7640
  7568  00032E                     l7602:
  7569                           
  7570                           ; BSR set to: 2
  7571                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  7572  00032E  0100               	movlb	0	; () banked
  7573  000330  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7574  000332  0D0A               	mullw	10
  7575  000334  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7576  000338  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7577  00033A  0D64               	mullw	100
  7578  00033C  50F3               	movf	prodl,w,c
  7579  00033E  0102               	movlb	2	; () banked
  7580  000340  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7581  000342  0100               	movlb	0	; () banked
  7582  000344  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7583  000346  0F30               	addlw	48
  7584  000348  6FA0               	movwf	_nb_s_pelle& (0+255),b
  7585                           
  7586                           ;eusart.c: 986: break;
  7587  00034A  D094               	goto	l7640
  7588  00034C                     l7604:
  7589                           
  7590                           ; BSR set to: 2
  7591                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  7592  00034C  0100               	movlb	0	; () banked
  7593  00034E  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7594  000350  0FD0               	addlw	208
  7595  000352  6F9C               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser& (0+255),b
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  7599  000354  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  7600                           
  7601                           ;eusart.c: 990: break;
  7602  000358  D08D               	goto	l7640
  7603  00035A                     l7608:
  7604                           
  7605                           ; BSR set to: 2
  7606                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  7607  00035A  0100               	movlb	0	; () banked
  7608  00035C  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7609  00035E  0FD0               	addlw	208
  7610  000360  6F9A               	movwf	_Patinage_Nb_Essai& (0+255),b
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  7614  000362  C099  F09A         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  7615                           
  7616                           ;eusart.c: 994: break;
  7617  000366  D086               	goto	l7640
  7618  000368                     l7612:
  7619                           
  7620                           ; BSR set to: 2
  7621                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7622  000368  0100               	movlb	0	; () banked
  7623  00036A  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7624  00036C  0D0A               	mullw	10
  7625  00036E  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7626  000372  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7627  000374  0D64               	mullw	100
  7628  000376  50F3               	movf	prodl,w,c
  7629  000378  0102               	movlb	2	; () banked
  7630  00037A  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7631  00037C  0100               	movlb	0	; () banked
  7632  00037E  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7633  000380  0F30               	addlw	48
  7634  000382  6E4B               	movwf	_Consigne_en_A,c
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  7638  000384  C04B  F093         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  7639                           
  7640                           ;eusart.c: 1000: break;
  7641  000388  D075               	goto	l7640
  7642  00038A                     l7616:
  7643                           
  7644                           ; BSR set to: 2
  7645                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7646  00038A  0100               	movlb	0	; () banked
  7647  00038C  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7648  00038E  0D0A               	mullw	10
  7649  000390  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7650  000394  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7651  000396  0D64               	mullw	100
  7652  000398  50F3               	movf	prodl,w,c
  7653  00039A  0102               	movlb	2	; () banked
  7654  00039C  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7655  00039E  0100               	movlb	0	; () banked
  7656  0003A0  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7657  0003A2  0F30               	addlw	48
  7658  0003A4  6E4B               	movwf	_Consigne_en_A,c
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  7662  0003A6  C04B  F092         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  7663                           
  7664                           ;eusart.c: 1006: break;
  7665  0003AA  D064               	goto	l7640
  7666  0003AC                     l7620:
  7667                           
  7668                           ; BSR set to: 2
  7669                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7670  0003AC  0100               	movlb	0	; () banked
  7671  0003AE  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7672  0003B0  0D0A               	mullw	10
  7673  0003B2  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7674  0003B6  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7675  0003B8  0D64               	mullw	100
  7676  0003BA  50F3               	movf	prodl,w,c
  7677  0003BC  0102               	movlb	2	; () banked
  7678  0003BE  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7679  0003C0  0100               	movlb	0	; () banked
  7680  0003C2  25FC               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7681  0003C4  0F30               	addlw	48
  7682  0003C6  6E4B               	movwf	_Consigne_en_A,c
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  7686  0003C8  C04B  F091         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  7687                           
  7688                           ;eusart.c: 1012: break;
  7689  0003CC  D053               	goto	l7640
  7690  0003CE                     l7626:
  7691  0003CE  0ED0               	movlw	208
  7692  0003D0  0102               	movlb	2	; () banked
  7693  0003D2  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7694  0003D4  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7695  0003D6  0100               	movlb	0	; () banked
  7696  0003D8  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7697  0003DA  0102               	movlb	2	; () banked
  7698  0003DC  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7699  0003DE  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7700  0003E0  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7701  0003E2  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7702  0003E4  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7703  0003E6  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7704                           
  7705                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7706                           ; Switch size 1, requested type "speed"
  7707                           ; Number of cases is 1, Range of values is 0 to 0
  7708                           ; switch strategies available:
  7709                           ; Name         Instructions Cycles
  7710                           ; simple_byte            4     3 (average)
  7711                           ;	Chosen strategy is simple_byte
  7712  0003E8  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7713  0003EA  E144               	bnz	l7640
  7714                           
  7715                           ; BSR set to: 2
  7716                           ; Switch size 1, requested type "speed"
  7717                           ; Number of cases is 10, Range of values is 0 to 9
  7718                           ; switch strategies available:
  7719                           ; Name         Instructions Cycles
  7720                           ; simple_byte           31    16 (average)
  7721                           ;	Chosen strategy is simple_byte
  7722  0003EC  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7723  0003EE  E101 D75C          	bz	l7588
  7724  0003F2  0A01               	xorlw	1	; case 1
  7725  0003F4  E101 D76C          	bz	l7594
  7726  0003F8  0A03               	xorlw	3	; case 2
  7727  0003FA  E101 D778          	bz	l7596
  7728  0003FE  0A01               	xorlw	1	; case 3
  7729  000400  E085               	bz	l7598
  7730  000402  0A07               	xorlw	7	; case 4
  7731  000404  E094               	bz	l7602
  7732  000406  0A01               	xorlw	1	; case 5
  7733  000408  E0A1               	bz	l7604
  7734  00040A  0A03               	xorlw	3	; case 6
  7735  00040C  E0A6               	bz	l7608
  7736  00040E  0A01               	xorlw	1	; case 7
  7737  000410  E0AB               	bz	l7612
  7738  000412  0A0F               	xorlw	15	; case 8
  7739  000414  E0BA               	bz	l7616
  7740  000416  0A01               	xorlw	1	; case 9
  7741  000418  E0C9               	bz	l7620
  7742                           
  7743                           ; BSR set to: 2
  7744                           ;eusart.c: 1031: switch (Da - 0x30) {
  7745                           
  7746                           ;eusart.c: 1024: case 'V':
  7747  00041A  D02C               	goto	l7640
  7748  00041C                     l7628:
  7749                           
  7750                           ; BSR set to: 2
  7751                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  7752  00041C  0EAB               	movlw	low _UART_TX_TEXT
  7753  00041E  6E1B               	movwf	sprintf@sp,c
  7754  000420  0E6A               	movlw	low STR_7
  7755  000422  6E1C               	movwf	sprintf@f,c
  7756  000424  0E3C               	movlw	high STR_7
  7757  000426  6E1D               	movwf	sprintf@f+1,c
  7758  000428  C095  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7759  00042C  6A1F               	clrf	?_sprintf+4,c
  7760  00042E  C0A4  F020         	movff	_nb_s_patinage,?_sprintf+5
  7761  000432  6A21               	clrf	?_sprintf+6,c
  7762  000434  C0A2  F022         	movff	_nb_100ms_pion,?_sprintf+7
  7763  000438  6A23               	clrf	?_sprintf+8,c
  7764  00043A  C0A1  F024         	movff	_nb_100ms_platine,?_sprintf+9
  7765  00043E  6A25               	clrf	?_sprintf+10,c
  7766  000440  C0A0  F026         	movff	_nb_s_pelle,?_sprintf+11
  7767  000444  6A27               	clrf	?_sprintf+12,c
  7768  000446  EC56  F004         	call	_sprintf	;wreg free
  7769  00044A  D661               	goto	l7542
  7770  00044C                     l7632:
  7771                           
  7772                           ; BSR set to: 2
  7773                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  7774  00044C  0EAB               	movlw	low _UART_TX_TEXT
  7775  00044E  6E1B               	movwf	sprintf@sp,c
  7776  000450  0EBC               	movlw	low STR_8
  7777  000452  6E1C               	movwf	sprintf@f,c
  7778  000454  0E3C               	movlw	high STR_8
  7779  000456  6E1D               	movwf	sprintf@f+1,c
  7780  000458  C0A8  F01E         	movff	_Etat,?_sprintf+3	;volatile
  7781  00045C  6A1F               	clrf	?_sprintf+4,c
  7782  00045E  C0A5  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  7783  000462  6A21               	clrf	?_sprintf+6,c
  7784  000464  EC56  F004         	call	_sprintf	;wreg free
  7785  000468  D652               	goto	l7542
  7786  00046A                     l1420:
  7787                           
  7788                           ; BSR set to: 2
  7789                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  7790  00046A  C0FA  F0AB         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  7791                           
  7792                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  7793  00046E  0100               	movlb	0	; () banked
  7794  000470  6BAC               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  7795  000472  D64D               	goto	l7542
  7796  000474                     l7640:
  7797  000474  0ED0               	movlw	208
  7798  000476  0102               	movlb	2	; () banked
  7799  000478  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7800  00047A  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7801  00047C  0100               	movlb	0	; () banked
  7802  00047E  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7803  000480  0102               	movlb	2	; () banked
  7804  000482  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7805  000484  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7806  000486  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7807  000488  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7808  00048A  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7809  00048C  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7810                           
  7811                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7812                           ; Switch size 1, requested type "speed"
  7813                           ; Number of cases is 1, Range of values is 0 to 0
  7814                           ; switch strategies available:
  7815                           ; Name         Instructions Cycles
  7816                           ; simple_byte            4     3 (average)
  7817                           ;	Chosen strategy is simple_byte
  7818  00048E  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7819  000490  A4D8               	btfss	status,2,c
  7820  000492  0012               	return	
  7821                           
  7822                           ; BSR set to: 2
  7823                           ; Switch size 1, requested type "speed"
  7824                           ; Number of cases is 3, Range of values is 0 to 9
  7825                           ; switch strategies available:
  7826                           ; Name         Instructions Cycles
  7827                           ; simple_byte           10     6 (average)
  7828                           ;	Chosen strategy is simple_byte
  7829  000494  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7830  000496  E0C2               	bz	l7628
  7831  000498  0A01               	xorlw	1	; case 1
  7832  00049A  E0D8               	bz	l7632
  7833  00049C  0A08               	xorlw	8	; case 9
  7834  00049E  A4D8               	btfss	status,2,c
  7835  0004A0  0012               	return	
  7836  0004A2  D7E3               	goto	l1420
  7837  0004A4                     l7642:
  7838                           
  7839                           ;eusart.c: 1062: Alarme_On(8);
  7840  0004A4  0E08               	movlw	8
  7841  0004A6  EF77  F011         	goto	_Alarme_On
  7842  0004AA                     l7644:
  7843                           
  7844                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  7845  0004AA  0EAB               	movlw	low _UART_TX_TEXT
  7846  0004AC  6E1B               	movwf	sprintf@sp,c
  7847  0004AE  0EB9               	movlw	low (STR_4+30)
  7848  0004B0  6E1C               	movwf	sprintf@f,c
  7849  0004B2  0E3C               	movlw	high (STR_4+30)
  7850  0004B4  6E1D               	movwf	sprintf@f+1,c
  7851  0004B6  C0A9  F01E         	movff	_Version,?_sprintf+3
  7852  0004BA  6A1F               	clrf	?_sprintf+4,c
  7853  0004BC  EC56  F004         	call	_sprintf	;wreg free
  7854  0004C0  D626               	goto	l7542
  7855  0004C2                     l7648:
  7856                           
  7857                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  7858  0004C2  0EAB               	movlw	low _UART_TX_TEXT
  7859  0004C4  6E1B               	movwf	sprintf@sp,c
  7860  0004C6  0E16               	movlw	low STR_10
  7861  0004C8  6E1C               	movwf	sprintf@f,c
  7862  0004CA  0E3C               	movlw	high STR_10
  7863  0004CC  6E1D               	movwf	sprintf@f+1,c
  7864  0004CE  0E00               	movlw	0
  7865  0004D0  EC4A  F00F         	call	_Etat_Get
  7866  0004D4  6E1E               	movwf	?_sprintf+3,c
  7867  0004D6  6A1F               	clrf	?_sprintf+4,c
  7868  0004D8  0E01               	movlw	1
  7869  0004DA  EC4A  F00F         	call	_Etat_Get
  7870  0004DE  6E20               	movwf	?_sprintf+5,c
  7871  0004E0  6A21               	clrf	?_sprintf+6,c
  7872  0004E2  C0A7  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7873  0004E6  6A23               	clrf	?_sprintf+8,c
  7874  0004E8  C09F  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  7875  0004EC  6A25               	clrf	?_sprintf+10,c
  7876  0004EE  C098  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  7877  0004F2  6A27               	clrf	?_sprintf+12,c
  7878  0004F4  C097  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  7879  0004F8  6A29               	clrf	?_sprintf+14,c
  7880  0004FA  C095  F02A         	movff	_consigne,?_sprintf+15	;volatile
  7881  0004FE  6A2B               	clrf	?_sprintf+16,c
  7882  000500  C0A4  F02C         	movff	_nb_s_patinage,?_sprintf+17
  7883  000504  6A2D               	clrf	?_sprintf+18,c
  7884  000506  C0A2  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  7885  00050A  6A2F               	clrf	?_sprintf+20,c
  7886  00050C  C0A1  F030         	movff	_nb_100ms_platine,?_sprintf+21
  7887  000510  6A31               	clrf	?_sprintf+22,c
  7888  000512  C0A0  F032         	movff	_nb_s_pelle,?_sprintf+23
  7889  000516  6A33               	clrf	?_sprintf+24,c
  7890  000518  0E01               	movlw	1
  7891  00051A  A480               	btfss	3968,2,c	;volatile
  7892  00051C  0E00               	movlw	0
  7893  00051E  6E34               	movwf	?_sprintf+25,c
  7894  000520  6A35               	clrf	?_sprintf+26,c
  7895  000522  0E01               	movlw	1
  7896  000524  A682               	btfss	3970,3,c	;volatile
  7897  000526  0E00               	movlw	0
  7898  000528  6E36               	movwf	?_sprintf+27,c
  7899  00052A  6A37               	clrf	?_sprintf+28,c
  7900  00052C  0E01               	movlw	1
  7901  00052E  A48D               	btfss	3981,2,c	;volatile
  7902  000530  0E00               	movlw	0
  7903  000532  6E38               	movwf	?_sprintf+29,c
  7904  000534  6A39               	clrf	?_sprintf+30,c
  7905  000536  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  7906  00053A  6A3B               	clrf	?_sprintf+32,c
  7907  00053C  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  7908  000540  6A3D               	clrf	?_sprintf+34,c
  7909  000542  C0A9  F03E         	movff	_Version,?_sprintf+35
  7910  000546  6A3F               	clrf	?_sprintf+36,c
  7911  000548  EC56  F004         	call	_sprintf	;wreg free
  7912  00054C  D5E0               	goto	l7542
  7913  00054E                     l7652:
  7914                           
  7915                           ;eusart.c: 1148: Alarme_On(7);
  7916  00054E  0E07               	movlw	7
  7917  000550  EF77  F011         	goto	_Alarme_On
  7918  000554                     l7654:
  7919                           
  7920                           ;eusart.c: 1155: Etat_Update(0);
  7921  000554  0E00               	movlw	0
  7922  000556  EC8C  F010         	call	_Etat_Update
  7923  00055A                     l7656:
  7924                           
  7925                           ;eusart.c: 1157: P4_busy = 0;
  7926  00055A  0100               	movlb	0	; () banked
  7927  00055C  6BAA               	clrf	_P4_busy& (0+255),b
  7928                           
  7929                           ;eusart.c: 1161: break;
  7930  00055E  0012               	return	
  7931  000560                     l1429:
  7932                           
  7933                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  7934  000560  A682               	btfss	3970,3,c	;volatile
  7935  000562  D0CC               	goto	l7772
  7936                           
  7937                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  7938  000564  0100               	movlb	0	; () banked
  7939  000566  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7940  000568  0FD0               	addlw	208
  7941  00056A  6F8D               	movwf	_direction& (0+255),b	;volatile
  7942                           
  7943                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  7944  00056C  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7945  00056E  0FD0               	addlw	208
  7946  000570  6F8F               	movwf	_type_consigne& (0+255),b
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  7950  000572  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7951  000574  0D0A               	mullw	10
  7952  000576  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7953  00057A  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7954  00057C  0D64               	mullw	100
  7955  00057E  50F3               	movf	prodl,w,c
  7956  000580  0102               	movlb	2	; () banked
  7957  000582  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7958  000584  0100               	movlb	0	; () banked
  7959  000586  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  7960  000588  0F30               	addlw	48
  7961  00058A  6F8E               	movwf	_mouvement_option& (0+255),b
  7962                           
  7963                           ;eusart.c: 1180: switch (E - 0x30) {
  7964  00058C  D008               	goto	l7664
  7965  00058E                     l1432:
  7966                           
  7967                           ; BSR set to: 2
  7968                           ;eusart.c: 1182: Option_Multitas = 1;
  7969  00058E  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7970  000590  D004               	goto	L1
  7971  000592                     l1434:
  7972                           
  7973                           ; BSR set to: 2
  7974                           ;eusart.c: 1186: Option_Multitas = 0;
  7975  000592  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7976                           
  7977                           ;eusart.c: 1187: Option_Pailleux = 1;
  7978  000594  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  7979                           
  7980                           ;eusart.c: 1188: break;
  7981  000596  D018               	goto	l7666
  7982  000598                     l1435:
  7983                           
  7984                           ; BSR set to: 2
  7985                           ;eusart.c: 1192: Option_Multitas = 0;
  7986  000598  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7987  00059A                     L1:
  7988                           
  7989                           ;eusart.c: 1193: Option_Pailleux = 0;
  7990  00059A  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  7991                           
  7992                           ;eusart.c: 1194: }
  7993  00059C  D015               	goto	l7666
  7994  00059E                     l7664:
  7995                           
  7996                           ; BSR set to: 0
  7997  00059E  0ED0               	movlw	208
  7998  0005A0  0102               	movlb	2	; () banked
  7999  0005A2  6F80               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8000  0005A4  6981               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8001  0005A6  0100               	movlb	0	; () banked
  8002  0005A8  51FE               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8003  0005AA  0102               	movlb	2	; () banked
  8004  0005AC  6F82               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8005  0005AE  6B83               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8006  0005B0  5180               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8007  0005B2  2782               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8008  0005B4  5181               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8009  0005B6  2383               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8010                           
  8011                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8012                           ; Switch size 1, requested type "speed"
  8013                           ; Number of cases is 1, Range of values is 0 to 0
  8014                           ; switch strategies available:
  8015                           ; Name         Instructions Cycles
  8016                           ; simple_byte            4     3 (average)
  8017                           ;	Chosen strategy is simple_byte
  8018  0005B8  5183               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8019  0005BA  E1EE               	bnz	l1435
  8020                           
  8021                           ; BSR set to: 2
  8022                           ; Switch size 1, requested type "speed"
  8023                           ; Number of cases is 2, Range of values is 1 to 2
  8024                           ; switch strategies available:
  8025                           ; Name         Instructions Cycles
  8026                           ; simple_byte            7     4 (average)
  8027                           ;	Chosen strategy is simple_byte
  8028  0005BC  5182               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8029  0005BE  0A01               	xorlw	1	; case 1
  8030  0005C0  E0E6               	bz	l1432
  8031  0005C2  0A03               	xorlw	3	; case 2
  8032  0005C4  E0E6               	bz	l1434
  8033  0005C6  D7E8               	goto	l1435
  8034  0005C8                     l7666:
  8035                           
  8036                           ; BSR set to: 2
  8037                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  8038  0005C8  0E31               	movlw	49
  8039  0005CA  0100               	movlb	0	; () banked
  8040  0005CC  19FE               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8041  0005CE  E102               	bnz	l1436
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;eusart.c: 1200: Option_Multitas = 1;
  8045  0005D0  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8046                           
  8047                           ;eusart.c: 1202: } else {
  8048  0005D2  D001               	goto	l1437
  8049  0005D4                     l1436:
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;eusart.c: 1203: Option_Multitas = 0;
  8053  0005D4  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8054  0005D6                     l1437:
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;eusart.c: 1204: }
  8058                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8059  0005D6  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8060                           
  8061                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8062  0005DA  C099  F09A         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;eusart.c: 1214: P4_busy = 1;
  8066  0005DE  0E01               	movlw	1
  8067  0005E0  6FAA               	movwf	_P4_busy& (0+255),b
  8068                           
  8069                           ;eusart.c: 1215: switch (direction) {
  8070  0005E2  D018               	goto	l7698
  8071  0005E4                     l7672:
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;eusart.c: 1218: if (Etat == 0) {
  8075  0005E4  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8076  0005E6  E101               	bnz	l7676
  8077  0005E8  D0A8               	goto	l7782
  8078  0005EA                     l7676:
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;eusart.c: 1223: if (Etat != 2) {
  8082  0005EA  0E02               	movlw	2
  8083  0005EC  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8084  0005EE  B4D8               	btfsc	status,2,c
  8085  0005F0  0012               	return	
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;eusart.c: 1224: Coupe_Moteur();
  8089  0005F2  EC10  F011         	call	_Coupe_Moteur	;wreg free
  8090                           
  8091                           ;eusart.c: 1225: delay_1s();
  8092  0005F6  ECE8  F00F         	call	_delay_1s	;wreg free
  8093  0005FA  D09F               	goto	l7782
  8094  0005FC                     l7684:
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;eusart.c: 1233: if (Etat == 0) {
  8098  0005FC  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8099  0005FE  E101               	bnz	l7688
  8100  000600  D0A0               	goto	l7788
  8101  000602                     l7688:
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;eusart.c: 1236: if (Etat != 3) {
  8105  000602  0E03               	movlw	3
  8106  000604  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8107  000606  B4D8               	btfsc	status,2,c
  8108  000608  0012               	return	
  8109                           
  8110                           ; BSR set to: 0
  8111                           ;eusart.c: 1237: Coupe_Moteur();
  8112  00060A  EC10  F011         	call	_Coupe_Moteur	;wreg free
  8113                           
  8114                           ;eusart.c: 1238: delay_1s();
  8115  00060E  ECE8  F00F         	call	_delay_1s	;wreg free
  8116  000612  D097               	goto	l7788
  8117  000614                     l7698:
  8118                           
  8119                           ; BSR set to: 0
  8120  000614  518D               	movf	_direction& (0+255),w,b	;volatile
  8121                           
  8122                           ; Switch size 1, requested type "speed"
  8123                           ; Number of cases is 2, Range of values is 0 to 1
  8124                           ; switch strategies available:
  8125                           ; Name         Instructions Cycles
  8126                           ; simple_byte            7     4 (average)
  8127                           ;	Chosen strategy is simple_byte
  8128  000616  E0F2               	bz	l7684
  8129  000618  0A01               	xorlw	1	; case 1
  8130  00061A  A4D8               	btfss	status,2,c
  8131  00061C  0012               	return	
  8132  00061E  D7E2               	goto	l7672
  8133  000620                     l1450:
  8134                           
  8135                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  8136  000620  A682               	btfss	3970,3,c	;volatile
  8137  000622  D06C               	goto	l7772
  8138                           
  8139                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  8140  000624  0100               	movlb	0	; () banked
  8141  000626  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8142  000628  0FD0               	addlw	208
  8143  00062A  6F8D               	movwf	_direction& (0+255),b	;volatile
  8144                           
  8145                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  8146  00062C  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8147  00062E  0FD0               	addlw	208
  8148  000630  6F8F               	movwf	_type_consigne& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8152  000632  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8153  000634  0D0A               	mullw	10
  8154  000636  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8155  00063A  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8156  00063C  0D64               	mullw	100
  8157  00063E  50F3               	movf	prodl,w,c
  8158  000640  0102               	movlb	2	; () banked
  8159  000642  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8160  000644  0100               	movlb	0	; () banked
  8161  000646  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8162  000648  0F30               	addlw	48
  8163  00064A  6F8E               	movwf	_mouvement_option& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;eusart.c: 1269: P4_busy = 1;
  8167  00064C  0E01               	movlw	1
  8168  00064E  6FAA               	movwf	_P4_busy& (0+255),b
  8169                           
  8170                           ;eusart.c: 1270: switch (direction) {
  8171  000650  D018               	goto	l7734
  8172  000652                     l7708:
  8173                           
  8174                           ; BSR set to: 0
  8175                           ;eusart.c: 1274: if (Etat == 0) {
  8176  000652  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8177  000654  E101               	bnz	l7712
  8178  000656  D07E               	goto	l7794
  8179  000658                     l7712:
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;eusart.c: 1277: if (Etat != 5) {
  8183  000658  0E05               	movlw	5
  8184  00065A  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8185  00065C  B4D8               	btfsc	status,2,c
  8186  00065E  0012               	return	
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;eusart.c: 1278: Coupe_Moteur();
  8190  000660  EC10  F011         	call	_Coupe_Moteur	;wreg free
  8191                           
  8192                           ;eusart.c: 1279: delay_1s();
  8193  000664  ECE8  F00F         	call	_delay_1s	;wreg free
  8194  000668  D075               	goto	l7794
  8195  00066A                     l7720:
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;eusart.c: 1299: if (Etat == 0) {
  8199  00066A  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8200  00066C  E101               	bnz	l7724
  8201  00066E  D075               	goto	l7796
  8202  000670                     l7724:
  8203                           
  8204                           ; BSR set to: 0
  8205                           ;eusart.c: 1302: if (Etat != 4) {
  8206  000670  0E04               	movlw	4
  8207  000672  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8208  000674  B4D8               	btfsc	status,2,c
  8209  000676  0012               	return	
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;eusart.c: 1303: Coupe_Moteur();
  8213  000678  EC10  F011         	call	_Coupe_Moteur	;wreg free
  8214                           
  8215                           ;eusart.c: 1304: delay_1s();
  8216  00067C  ECE8  F00F         	call	_delay_1s	;wreg free
  8217  000680  D06C               	goto	l7796
  8218  000682                     l7734:
  8219                           
  8220                           ; BSR set to: 0
  8221  000682  518D               	movf	_direction& (0+255),w,b	;volatile
  8222                           
  8223                           ; Switch size 1, requested type "speed"
  8224                           ; Number of cases is 2, Range of values is 0 to 1
  8225                           ; switch strategies available:
  8226                           ; Name         Instructions Cycles
  8227                           ; simple_byte            7     4 (average)
  8228                           ;	Chosen strategy is simple_byte
  8229  000684  E0F2               	bz	l7720
  8230  000686  0A01               	xorlw	1	; case 1
  8231  000688  A4D8               	btfss	status,2,c
  8232  00068A  0012               	return	
  8233  00068C  D7E2               	goto	l7708
  8234  00068E                     l1464:
  8235                           
  8236                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  8237  00068E  A682               	btfss	3970,3,c	;volatile
  8238  000690  D035               	goto	l7772
  8239                           
  8240                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  8241  000692  0100               	movlb	0	; () banked
  8242  000694  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8243  000696  0FD0               	addlw	208
  8244  000698  6F8D               	movwf	_direction& (0+255),b	;volatile
  8245                           
  8246                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  8247  00069A  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8248  00069C  0FD0               	addlw	208
  8249  00069E  6F8F               	movwf	_type_consigne& (0+255),b
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8253  0006A0  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8254  0006A2  0D0A               	mullw	10
  8255  0006A4  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8256  0006A8  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8257  0006AA  0D64               	mullw	100
  8258  0006AC  50F3               	movf	prodl,w,c
  8259  0006AE  0102               	movlb	2	; () banked
  8260  0006B0  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8261  0006B2  0100               	movlb	0	; () banked
  8262  0006B4  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8263  0006B6  0F30               	addlw	48
  8264  0006B8  6F8E               	movwf	_mouvement_option& (0+255),b
  8265                           
  8266                           ; BSR set to: 0
  8267                           ;eusart.c: 1341: P4_busy = 1;
  8268  0006BA  0E01               	movlw	1
  8269  0006BC  6FAA               	movwf	_P4_busy& (0+255),b
  8270                           
  8271                           ;eusart.c: 1342: switch (direction) {
  8272  0006BE  D018               	goto	l7770
  8273  0006C0                     l7744:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;eusart.c: 1348: if (Etat == 0) {
  8277  0006C0  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8278  0006C2  E101               	bnz	l7748
  8279  0006C4  D053               	goto	l7802
  8280  0006C6                     l7748:
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;eusart.c: 1351: if (Etat != 9) {
  8284  0006C6  0E09               	movlw	9
  8285  0006C8  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8286  0006CA  B4D8               	btfsc	status,2,c
  8287  0006CC  0012               	return	
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;eusart.c: 1352: Coupe_Moteur();
  8291  0006CE  EC10  F011         	call	_Coupe_Moteur	;wreg free
  8292                           
  8293                           ;eusart.c: 1353: delay_1s();
  8294  0006D2  ECE8  F00F         	call	_delay_1s	;wreg free
  8295  0006D6  D04A               	goto	l7802
  8296  0006D8                     l7756:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;eusart.c: 1371: if (Etat == 0) {
  8300  0006D8  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8301  0006DA  E101               	bnz	l7760
  8302  0006DC  D04A               	goto	l7804
  8303  0006DE                     l7760:
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;eusart.c: 1374: if (Etat != 8) {
  8307  0006DE  0E08               	movlw	8
  8308  0006E0  19A8               	xorwf	_Etat& (0+255),w,b	;volatile
  8309  0006E2  B4D8               	btfsc	status,2,c
  8310  0006E4  0012               	return	
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;eusart.c: 1375: Coupe_Moteur();
  8314  0006E6  EC10  F011         	call	_Coupe_Moteur	;wreg free
  8315                           
  8316                           ;eusart.c: 1376: delay_1s();
  8317  0006EA  ECE8  F00F         	call	_delay_1s	;wreg free
  8318  0006EE  D041               	goto	l7804
  8319  0006F0                     l7770:
  8320                           
  8321                           ; BSR set to: 0
  8322  0006F0  518D               	movf	_direction& (0+255),w,b	;volatile
  8323                           
  8324                           ; Switch size 1, requested type "speed"
  8325                           ; Number of cases is 2, Range of values is 0 to 1
  8326                           ; switch strategies available:
  8327                           ; Name         Instructions Cycles
  8328                           ; simple_byte            7     4 (average)
  8329                           ;	Chosen strategy is simple_byte
  8330  0006F2  E0F2               	bz	l7756
  8331  0006F4  0A01               	xorlw	1	; case 1
  8332  0006F6  A4D8               	btfss	status,2,c
  8333  0006F8  0012               	return	
  8334  0006FA  D7E2               	goto	l7744
  8335  0006FC                     l7772:
  8336                           
  8337                           ;eusart.c: 1392: Alarme_On(4);
  8338  0006FC  0E04               	movlw	4
  8339  0006FE  EF77  F011         	goto	_Alarme_On
  8340  000702                     l7774:
  8341                           
  8342                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  8343  000702  0100               	movlb	0	; () banked
  8344  000704  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8345  000706  0FD0               	addlw	208
  8346  000708  6F96               	movwf	_moteur_indice& (0+255),b	;volatile
  8347                           
  8348                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  8349  00070A  51FA               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8350  00070C  0FD0               	addlw	208
  8351  00070E  6F8D               	movwf	_direction& (0+255),b	;volatile
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8355  000710  51FC               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8356  000712  0D0A               	mullw	10
  8357  000714  CFF3 F280          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8358  000718  51FB               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8359  00071A  0D64               	mullw	100
  8360  00071C  50F3               	movf	prodl,w,c
  8361  00071E  0102               	movlb	2	; () banked
  8362  000720  2580               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8363  000722  0100               	movlb	0	; () banked
  8364  000724  25FD               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8365  000726  0F30               	addlw	48
  8366  000728  6F9E               	movwf	_nb_Pion_Objectif& (0+255),b
  8367                           
  8368                           ;eusart.c: 1410: switch (moteur_indice) {
  8369  00072A  D02C               	goto	l7812
  8370  00072C                     l1480:
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;eusart.c: 1412: Alarme = 0;
  8374  00072C  6BA7               	clrf	_Alarme& (0+255),b	;volatile
  8375                           
  8376                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8377  00072E  C09C  F09D         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8378                           
  8379                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8380  000732  C099  F09A         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8381                           
  8382                           ;eusart.c: 1416: switch (direction) {
  8383  000736  D008               	goto	l7792
  8384  000738                     l7778:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;eusart.c: 1419: if (Etat == 0) {
  8388  000738  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8389  00073A                     l7782:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;eusart.c: 1425: Etat_Update(2);
  8393  00073A  0E02               	movlw	2
  8394  00073C  EF8C  F010         	goto	_Etat_Update
  8395  000740                     l7784:
  8396                           
  8397                           ; BSR set to: 0
  8398                           ;eusart.c: 1430: if (Etat == 0) {
  8399  000740  51A8               	movf	_Etat& (0+255),w,b	;volatile
  8400  000742                     l7788:
  8401                           
  8402                           ; BSR set to: 0
  8403                           ;eusart.c: 1434: Etat_Update(3);
  8404  000742  0E03               	movlw	3
  8405  000744  EF8C  F010         	goto	_Etat_Update
  8406  000748                     l7792:
  8407                           
  8408                           ; BSR set to: 0
  8409  000748  518D               	movf	_direction& (0+255),w,b	;volatile
  8410                           
  8411                           ; Switch size 1, requested type "speed"
  8412                           ; Number of cases is 2, Range of values is 0 to 1
  8413                           ; switch strategies available:
  8414                           ; Name         Instructions Cycles
  8415                           ; simple_byte            7     4 (average)
  8416                           ;	Chosen strategy is simple_byte
  8417  00074A  E0FA               	bz	l7784
  8418  00074C  0A01               	xorlw	1	; case 1
  8419  00074E  A4D8               	btfss	status,2,c
  8420  000750  0012               	return	
  8421  000752  D7F2               	goto	l7778
  8422  000754                     l7794:
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;eusart.c: 1451: Etat_Update(5);
  8426  000754  0E05               	movlw	5
  8427  000756  EF8C  F010         	goto	_Etat_Update
  8428  00075A                     l7796:
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;eusart.c: 1456: Etat_Update(4);
  8432  00075A  0E04               	movlw	4
  8433  00075C  EF8C  F010         	goto	_Etat_Update
  8434  000760                     l7800:
  8435                           
  8436                           ; BSR set to: 0
  8437  000760  518D               	movf	_direction& (0+255),w,b	;volatile
  8438                           
  8439                           ; Switch size 1, requested type "speed"
  8440                           ; Number of cases is 2, Range of values is 0 to 1
  8441                           ; switch strategies available:
  8442                           ; Name         Instructions Cycles
  8443                           ; simple_byte            7     4 (average)
  8444                           ;	Chosen strategy is simple_byte
  8445  000762  E0FB               	bz	l7796
  8446  000764  0A01               	xorlw	1	; case 1
  8447  000766  A4D8               	btfss	status,2,c
  8448  000768  0012               	return	
  8449  00076A  D7F4               	goto	l7794
  8450  00076C                     l7802:
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;eusart.c: 1473: Etat_Update(9);
  8454  00076C  0E09               	movlw	9
  8455  00076E  EF8C  F010         	goto	_Etat_Update
  8456  000772                     l7804:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;eusart.c: 1478: Etat_Update(8);
  8460  000772  0E08               	movlw	8
  8461  000774  EF8C  F010         	goto	_Etat_Update
  8462  000778                     l7808:
  8463                           
  8464                           ; BSR set to: 0
  8465  000778  518D               	movf	_direction& (0+255),w,b	;volatile
  8466                           
  8467                           ; Switch size 1, requested type "speed"
  8468                           ; Number of cases is 2, Range of values is 0 to 1
  8469                           ; switch strategies available:
  8470                           ; Name         Instructions Cycles
  8471                           ; simple_byte            7     4 (average)
  8472                           ;	Chosen strategy is simple_byte
  8473  00077A  E0FB               	bz	l7804
  8474  00077C  0A01               	xorlw	1	; case 1
  8475  00077E  A4D8               	btfss	status,2,c
  8476  000780  0012               	return	
  8477  000782  D7F4               	goto	l7802
  8478  000784                     l7812:
  8479                           
  8480                           ; BSR set to: 0
  8481  000784  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
  8482                           
  8483                           ; Switch size 1, requested type "speed"
  8484                           ; Number of cases is 3, Range of values is 1 to 3
  8485                           ; switch strategies available:
  8486                           ; Name         Instructions Cycles
  8487                           ; simple_byte           10     6 (average)
  8488                           ;	Chosen strategy is simple_byte
  8489  000786  0A01               	xorlw	1	; case 1
  8490  000788  E0D1               	bz	l1480
  8491  00078A  0A03               	xorlw	3	; case 2
  8492  00078C  E0E9               	bz	l7800
  8493  00078E  0A01               	xorlw	1	; case 3
  8494  000790  A4D8               	btfss	status,2,c
  8495  000792  0012               	return	
  8496  000794  D7F1               	goto	l7808
  8497  000796                     l1504:
  8498                           
  8499                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  8500  000796  0100               	movlb	0	; () banked
  8501  000798  B1F9               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  8502  00079A  D002               	bra	u5875
  8503  00079C  948D               	bcf	3981,2,c	;volatile
  8504  00079E  D001               	bra	u5876
  8505  0007A0                     u5875:
  8506  0007A0  848D               	bsf	3981,2,c	;volatile
  8507  0007A2                     u5876:
  8508                           
  8509                           ;eusart.c: 1507: break;
  8510  0007A2  0012               	return	
  8511  0007A4                     l7814:
  8512                           
  8513                           ;eusart.c: 1510: Etat_Update(0);
  8514  0007A4  0E00               	movlw	0
  8515  0007A6  EC8C  F010         	call	_Etat_Update
  8516  0007AA  D6D7               	goto	l7656
  8517  0007AC                     l1506:
  8518                           
  8519                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  8520  0007AC  C0F9  F0A5         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  8521                           
  8522                           ;eusart.c: 1522: break;
  8523  0007B0  0012               	return	
  8524  0007B2                     l7818:
  8525                           
  8526                           ;eusart.c: 1528: IRQ_Execution(Da);
  8527  0007B2  0100               	movlb	0	; () banked
  8528  0007B4  51F9               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8529  0007B6  EFE5  F00D         	goto	_IRQ_Execution
  8530  0007BA                     l7820:
  8531                           
  8532                           ;eusart.c: 1536: Etat_Update(0);
  8533  0007BA  0E00               	movlw	0
  8534  0007BC  EF8C  F010         	goto	_Etat_Update
  8535  0007C0                     l7822:
  8536                           
  8537                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  8538  0007C0  0E0D               	movlw	13
  8539  0007C2  0102               	movlb	2	; () banked
  8540  0007C4  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  8541  0007C6  A4D8               	btfss	status,2,c
  8542                           
  8543                           ; BSR set to: 2
  8544                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  8545  0007C8  848B               	bsf	3979,2,c	;volatile
  8546  0007CA  0012               	return	
  8547  0007CC                     l7828:
  8548  0007CC  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  8549                           
  8550                           ; Switch size 1, requested type "speed"
  8551                           ; Number of cases is 38, Range of values is 48 to 118
  8552                           ; switch strategies available:
  8553                           ; Name         Instructions Cycles
  8554                           ; simple_byte          115    58 (average)
  8555                           ;	Chosen strategy is simple_byte
  8556  0007CE  0A30               	xorlw	48	; case 48
  8557  0007D0  E0F4               	bz	l7820
  8558  0007D2  0A01               	xorlw	1	; case 49
  8559  0007D4  B4D8               	btfsc	status,2,c
  8560  0007D6  0012               	return	
  8561  0007D8  0A03               	xorlw	3	; case 50
  8562  0007DA  B4D8               	btfsc	status,2,c
  8563  0007DC  0012               	return	
  8564  0007DE  0A01               	xorlw	1	; case 51
  8565  0007E0  B4D8               	btfsc	status,2,c
  8566  0007E2  0012               	return	
  8567  0007E4  0A07               	xorlw	7	; case 52
  8568  0007E6  B4D8               	btfsc	status,2,c
  8569  0007E8  0012               	return	
  8570  0007EA  0A01               	xorlw	1	; case 53
  8571  0007EC  B4D8               	btfsc	status,2,c
  8572  0007EE  0012               	return	
  8573  0007F0  0A03               	xorlw	3	; case 54
  8574  0007F2  B4D8               	btfsc	status,2,c
  8575  0007F4  0012               	return	
  8576  0007F6  0A01               	xorlw	1	; case 55
  8577  0007F8  B4D8               	btfsc	status,2,c
  8578  0007FA  0012               	return	
  8579  0007FC  0A76               	xorlw	118	; case 65
  8580  0007FE  E102 EF10  F011    	bz	_Coupe_Moteur
  8581  000804  0A03               	xorlw	3	; case 66
  8582  000806  E101 D742          	bz	l1464
  8583  00080A  0A06               	xorlw	6	; case 68
  8584  00080C  B4D8               	btfsc	status,2,c
  8585  00080E  0012               	return	
  8586  000810  0A01               	xorlw	1	; case 69
  8587  000812  E101 D4FF          	bz	l7574
  8588  000816  0A03               	xorlw	3	; case 70
  8589  000818  B4D8               	btfsc	status,2,c
  8590  00081A  0012               	return	
  8591  00081C  0A0E               	xorlw	14	; case 72
  8592  00081E  E101 D699          	bz	l7654
  8593  000822  0A01               	xorlw	1	; case 73
  8594  000824  E0C6               	bz	l7818
  8595  000826  0A05               	xorlw	5	; case 76
  8596  000828  E101 D459          	bz	l7538
  8597  00082C  0A01               	xorlw	1	; case 77
  8598  00082E  E101 D768          	bz	l7774
  8599  000832  0A1D               	xorlw	29	; case 80
  8600  000834  E101 D5CB          	bz	l7626
  8601  000838  0A02               	xorlw	2	; case 82
  8602  00083A  E0AD               	bz	l1504
  8603  00083C  0A01               	xorlw	1	; case 83
  8604  00083E  E101 D640          	bz	l7648
  8605  000842  0A07               	xorlw	7	; case 84
  8606  000844  E101 D62E          	bz	l7642
  8607  000848  0A01               	xorlw	1	; case 85
  8608  00084A  B4D8               	btfsc	status,2,c
  8609  00084C  0012               	return	
  8610  00084E  0A03               	xorlw	3	; case 86
  8611  000850  E101 D610          	bz	l7640
  8612  000854  0A01               	xorlw	1	; case 87
  8613  000856  E101 D67A          	bz	l7652
  8614  00085A  0A0F               	xorlw	15	; case 88
  8615  00085C  E101 D680          	bz	l1429
  8616  000860  0A02               	xorlw	2	; case 90
  8617  000862  E101 D6DD          	bz	l1450
  8618  000866  0A38               	xorlw	56	; case 98
  8619  000868  E101 D4C8          	bz	l7570
  8620  00086C  0A01               	xorlw	1	; case 99
  8621  00086E  E101 D4BF          	bz	l7568
  8622  000872  0A06               	xorlw	6	; case 101
  8623  000874  E101 D4DE          	bz	l7578
  8624  000878  0A03               	xorlw	3	; case 102
  8625  00087A  E098               	bz	l1506
  8626  00087C  0A0F               	xorlw	15	; case 105
  8627  00087E  E101 D43B          	bz	l7540
  8628  000882  0A05               	xorlw	5	; case 108
  8629  000884  E101 D47D          	bz	l1386
  8630  000888  0A01               	xorlw	1	; case 109
  8631  00088A  E101 D4F5          	bz	l7586
  8632  00088E  0A1D               	xorlw	29	; case 112
  8633  000890  E101 D441          	bz	l7544
  8634  000894  0A01               	xorlw	1	; case 113
  8635  000896  E101 D499          	bz	l7564
  8636  00089A  0A03               	xorlw	3	; case 114
  8637  00089C  E083               	bz	l7814
  8638  00089E  0A01               	xorlw	1	; case 115
  8639  0008A0  E101 D459          	bz	l7548
  8640  0008A4  0A05               	xorlw	5	; case 118
  8641  0008A6  E101 D600          	bz	l7644
  8642  0008AA  D78A               	goto	l7822
  8643  0008AC                     __end_of_EUSART1_RX_T3_LOCAL:
  8644                           	opt stack 0
  8645                           tblptru	equ	0xFF8
  8646                           prodl	equ	0xFF3
  8647                           intcon	equ	0xFF2
  8648                           intcon2	equ	0xFF1
  8649                           intcon3	equ	0xFF0
  8650                           postinc0	equ	0xFEE
  8651                           wreg	equ	0xFE8
  8652                           indf1	equ	0xFE7
  8653                           postdec1	equ	0xFE5
  8654                           fsr1h	equ	0xFE2
  8655                           fsr1l	equ	0xFE1
  8656                           indf2	equ	0xFDF
  8657                           fsr2h	equ	0xFDA
  8658                           fsr2l	equ	0xFD9
  8659                           status	equ	0xFD8
  8660                           
  8661 ;; *************** function _sprintf *****************
  8662 ;; Defined at:
  8663 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  8664 ;; Parameters:    Size  Location     Type
  8665 ;;  sp              1   26[COMRAM] PTR unsigned char 
  8666 ;;		 -> UART_TX_TEXT(64), 
  8667 ;;  f               2   27[COMRAM] PTR const unsigned char 
  8668 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  8669 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  8670 ;;		 -> STR_2(95), STR_1(3), 
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;  idx             1    4[BANK0 ] unsigned char 
  8673 ;;  tmpval          4    0        struct .
  8674 ;;  cp              3    0        PTR const unsigned char 
  8675 ;;  width           2   10[BANK0 ] int 
  8676 ;;  val             2    7[BANK0 ] unsigned int 
  8677 ;;  len             2    0        unsigned int 
  8678 ;;  c               1   12[BANK0 ] char 
  8679 ;;  flag            1    9[BANK0 ] unsigned char 
  8680 ;;  prec            1    6[BANK0 ] char 
  8681 ;;  ap              1    5[BANK0 ] PTR void [1]
  8682 ;;		 -> ?_sprintf(2), 
  8683 ;; Return value:  Size  Location     Type
  8684 ;;                  2   26[COMRAM] int 
  8685 ;; Registers used:
  8686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8687 ;; Tracked objects:
  8688 ;;		On entry : 0/1
  8689 ;;		On exit  : 3F/0
  8690 ;;		Unchanged: 0/0
  8691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8692 ;;      Params:        37       0       0       0
  8693 ;;      Locals:         0       9       0       0
  8694 ;;      Temps:          0       4       0       0
  8695 ;;      Totals:        37      13       0       0
  8696 ;;Total ram usage:       50 bytes
  8697 ;; Hardware stack levels used:    1
  8698 ;; Hardware stack levels required when called:   11
  8699 ;; This function calls:
  8700 ;;		___lwdiv
  8701 ;;		___lwmod
  8702 ;;		___wmul
  8703 ;;		_isdigit
  8704 ;; This function is called by:
  8705 ;;		_EUSART1_RX_T3_LOCAL
  8706 ;; This function uses a non-reentrant model
  8707 ;;
  8708                           
  8709                           	psect	text46
  8710  0008AC                     __ptext46:
  8711                           	opt stack 0
  8712  0008AC                     _sprintf:
  8713                           	opt stack 15
  8714                           
  8715                           ;doprnt.c: 494: va_list ap;
  8716                           ;doprnt.c: 499: signed char c;
  8717                           ;doprnt.c: 501: int width;
  8718                           ;doprnt.c: 506: signed char prec;
  8719                           ;doprnt.c: 508: unsigned char flag;
  8720                           ;doprnt.c: 523: union {
  8721                           ;doprnt.c: 524: unsigned long vd;
  8722                           ;doprnt.c: 525: double integ;
  8723                           ;doprnt.c: 526: } tmpval;
  8724                           ;doprnt.c: 528: unsigned int val;
  8725                           ;doprnt.c: 529: unsigned len;
  8726                           ;doprnt.c: 530: const char * cp;
  8727                           ;doprnt.c: 533: *ap = __va_start();
  8728                           
  8729                           ;incstack = 0
  8730  0008AC  0E1E               	movlw	low (?_sprintf+3)
  8731  0008AE  0100               	movlb	0	; () banked
  8732  0008B0  6FF1               	movwf	sprintf@ap& (0+255),b
  8733                           
  8734                           ;doprnt.c: 536: while(c = *f++) {
  8735  0008B2  D15E               	goto	l7528
  8736  0008B4                     l7396:
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;doprnt.c: 538: if(c != '%')
  8740  0008B4  0E25               	movlw	37
  8741  0008B6  19F8               	xorwf	sprintf@c& (0+255),w,b
  8742  0008B8  E007               	bz	l1720
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;doprnt.c: 540: {
  8746                           ;doprnt.c: 541: ((*sp++ = (c)));
  8747  0008BA  501B               	movf	sprintf@sp,w,c
  8748  0008BC  6ED9               	movwf	fsr2l,c
  8749  0008BE  6ADA               	clrf	fsr2h,c
  8750  0008C0  C0F8  FFDF         	movff	sprintf@c,indf2
  8751                           
  8752                           ; BSR set to: 0
  8753  0008C4  2A1B               	incf	sprintf@sp,f,c
  8754                           
  8755                           ;doprnt.c: 542: continue;
  8756  0008C6  D154               	goto	l7528
  8757  0008C8                     l1720:
  8758                           
  8759                           ; BSR set to: 0
  8760                           ;doprnt.c: 543: }
  8761                           ;doprnt.c: 546: width = 0;
  8762  0008C8  6BF6               	clrf	sprintf@width& (0+255),b
  8763  0008CA  6BF7               	clrf	(sprintf@width+1)& (0+255),b
  8764                           
  8765                           ;doprnt.c: 548: flag = 0;
  8766  0008CC  6BF5               	clrf	sprintf@flag& (0+255),b
  8767  0008CE  D003               	goto	l7406
  8768  0008D0                     l7402:
  8769                           
  8770                           ; BSR set to: 0
  8771                           ;doprnt.c: 580: flag |= 0x04;
  8772  0008D0  85F5               	bsf	sprintf@flag& (0+255),2,b
  8773                           
  8774                           ;doprnt.c: 581: f++;
  8775  0008D2  4A1C               	infsnz	sprintf@f,f,c
  8776  0008D4  2A1D               	incf	sprintf@f+1,f,c
  8777  0008D6                     l7406:
  8778                           
  8779                           ; BSR set to: 0
  8780  0008D6  C01C  FFF6         	movff	sprintf@f,tblptrl
  8781  0008DA  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8782  0008DE                     	if	0	;tblptru may be non-zero
  8783  0008DE                     	endif
  8784  0008DE                     	if	0	;tblptru may be non-zero
  8785  0008DE                     	endif
  8786  0008DE  0008               	tblrd		*
  8787  0008E0  50F5               	movf	tablat,w,c
  8788                           
  8789                           ; Switch size 1, requested type "speed"
  8790                           ; Number of cases is 1, Range of values is 48 to 48
  8791                           ; switch strategies available:
  8792                           ; Name         Instructions Cycles
  8793                           ; simple_byte            4     3 (average)
  8794                           ;	Chosen strategy is simple_byte
  8795  0008E2  0A30               	xorlw	48	; case 48
  8796  0008E4  E0F5               	bz	l7402
  8797                           
  8798                           ; BSR set to: 0
  8799                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8800  0008E6  C01C  FFF6         	movff	sprintf@f,tblptrl
  8801  0008EA  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8802  0008EE                     	if	0	;tblptru may be non-zero
  8803  0008EE                     	endif
  8804  0008EE                     	if	0	;tblptru may be non-zero
  8805  0008EE                     	endif
  8806  0008EE  0008               	tblrd		*
  8807  0008F0  50F5               	movf	tablat,w,c
  8808  0008F2  ECC7  F010         	call	_isdigit
  8809  0008F6  E332               	bnc	l7424
  8810                           
  8811                           ;doprnt.c: 598: width = 0;
  8812  0008F8  0100               	movlb	0	; () banked
  8813  0008FA  6BF6               	clrf	sprintf@width& (0+255),b
  8814  0008FC  6BF7               	clrf	(sprintf@width+1)& (0+255),b
  8815  0008FE                     l7412:
  8816                           
  8817                           ;doprnt.c: 600: width *= 10;
  8818  0008FE  C0F6  F00F         	movff	sprintf@width,___wmul@multiplier
  8819  000902  C0F7  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  8820  000906  6A12               	clrf	___wmul@multiplicand+1,c
  8821  000908  0E0A               	movlw	10
  8822  00090A  6E11               	movwf	___wmul@multiplicand,c
  8823  00090C  EC36  F010         	call	___wmul	;wreg free
  8824  000910  C00F  F0F6         	movff	?___wmul,sprintf@width
  8825  000914  C010  F0F7         	movff	?___wmul+1,sprintf@width+1
  8826                           
  8827                           ;doprnt.c: 601: width += *f++ - '0';
  8828  000918  0ED0               	movlw	208
  8829  00091A  0100               	movlb	0	; () banked
  8830  00091C  6FEC               	movwf	??_sprintf& (0+255),b
  8831  00091E  69ED               	setf	(??_sprintf+1)& (0+255),b
  8832  000920  C01C  FFF6         	movff	sprintf@f,tblptrl
  8833  000924  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8834  000928                     	if	0	;tblptru may be non-zero
  8835  000928                     	endif
  8836  000928                     	if	0	;tblptru may be non-zero
  8837  000928                     	endif
  8838  000928  0008               	tblrd		*
  8839  00092A  50F5               	movf	tablat,w,c
  8840  00092C  6FEE               	movwf	(??_sprintf+2)& (0+255),b
  8841  00092E  6BEF               	clrf	(??_sprintf+3)& (0+255),b
  8842  000930  51EC               	movf	??_sprintf& (0+255),w,b
  8843  000932  27EE               	addwf	(??_sprintf+2)& (0+255),f,b
  8844  000934  51ED               	movf	(??_sprintf+1)& (0+255),w,b
  8845  000936  23EF               	addwfc	(??_sprintf+3)& (0+255),f,b
  8846  000938  51EE               	movf	(??_sprintf+2)& (0+255),w,b
  8847  00093A  27F6               	addwf	sprintf@width& (0+255),f,b
  8848  00093C  51EF               	movf	(??_sprintf+3)& (0+255),w,b
  8849  00093E  23F7               	addwfc	(sprintf@width+1)& (0+255),f,b
  8850                           
  8851                           ; BSR set to: 0
  8852  000940  4A1C               	infsnz	sprintf@f,f,c
  8853  000942  2A1D               	incf	sprintf@f+1,f,c
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8857  000944  C01C  FFF6         	movff	sprintf@f,tblptrl
  8858  000948  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8859  00094C                     	if	0	;tblptru may be non-zero
  8860  00094C                     	endif
  8861  00094C                     	if	0	;tblptru may be non-zero
  8862  00094C                     	endif
  8863  00094C  0008               	tblrd		*
  8864  00094E  50F5               	movf	tablat,w,c
  8865  000950  ECC7  F010         	call	_isdigit
  8866  000954  E303               	bnc	l7424
  8867  000956  D7D3               	goto	l7412
  8868  000958                     l7420:
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;doprnt.c: 718: case 'x':
  8872                           ;doprnt.c: 721: flag |= 0x80;
  8873  000958  8FF5               	bsf	sprintf@flag& (0+255),7,b
  8874                           
  8875                           ;doprnt.c: 723: break;
  8876  00095A  D016               	goto	l1735
  8877  00095C                     l7424:
  8878  00095C  C01C  FFF6         	movff	sprintf@f,tblptrl
  8879  000960  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8880  000964  4A1C               	infsnz	sprintf@f,f,c
  8881  000966  2A1D               	incf	sprintf@f+1,f,c
  8882  000968                     	if	0	;tblptru may be non-zero
  8883  000968                     	endif
  8884  000968                     	if	0	;tblptru may be non-zero
  8885  000968                     	endif
  8886  000968  0008               	tblrd		*
  8887  00096A  CFF5 F0F8          	movff	tablat,sprintf@c
  8888  00096E  0100               	movlb	0	; () banked
  8889  000970  51F8               	movf	sprintf@c& (0+255),w,b
  8890                           
  8891                           ; Switch size 1, requested type "speed"
  8892                           ; Number of cases is 5, Range of values is 0 to 120
  8893                           ; switch strategies available:
  8894                           ; Name         Instructions Cycles
  8895                           ; simple_byte           16     9 (average)
  8896                           ;	Chosen strategy is simple_byte
  8897  000972  E101 D109          	bz	l7530
  8898  000976  0A58               	xorlw	88	; case 88
  8899  000978  E0EF               	bz	l7420
  8900  00097A  0A3C               	xorlw	60	; case 100
  8901  00097C  E005               	bz	l1735
  8902  00097E  0A0D               	xorlw	13	; case 105
  8903  000980  E003               	bz	l1735
  8904  000982  0A11               	xorlw	17	; case 120
  8905  000984  E0E9               	bz	l7420
  8906  000986  D0F4               	goto	l7528
  8907  000988                     l1735:
  8908                           
  8909                           ; BSR set to: 0
  8910                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8911  000988  BFF5               	btfsc	sprintf@flag& (0+255),7,b
  8912  00098A  D012               	goto	l7436
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;doprnt.c: 1253: {
  8916                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8917  00098C  51F1               	movf	sprintf@ap& (0+255),w,b
  8918  00098E  6ED9               	movwf	fsr2l,c
  8919  000990  6ADA               	clrf	fsr2h,c
  8920  000992  CFDE F0F3          	movff	postinc2,sprintf@val
  8921  000996  CFDD F0F4          	movff	postdec2,sprintf@val+1
  8922                           
  8923                           ; BSR set to: 0
  8924  00099A  0E02               	movlw	2
  8925  00099C  27F1               	addwf	sprintf@ap& (0+255),f,b
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;doprnt.c: 1261: if((int)val < 0) {
  8929  00099E  AFF4               	btfss	(sprintf@val+1)& (0+255),7,b
  8930  0009A0  D03D               	goto	l7470
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;doprnt.c: 1262: flag |= 0x03;
  8934  0009A2  0E03               	movlw	3
  8935  0009A4  13F5               	iorwf	sprintf@flag& (0+255),f,b
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;doprnt.c: 1263: val = -val;
  8939  0009A6  6DF3               	negf	sprintf@val& (0+255),b
  8940  0009A8  1FF4               	comf	(sprintf@val+1)& (0+255),f,b
  8941  0009AA  B0D8               	btfsc	status,0,c
  8942  0009AC  2BF4               	incf	(sprintf@val+1)& (0+255),f,b
  8943  0009AE  D036               	goto	l7470
  8944  0009B0                     l7436:
  8945                           
  8946                           ; BSR set to: 0
  8947                           ;doprnt.c: 1268: else
  8948                           ;doprnt.c: 1273: {
  8949                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8950  0009B0  51F1               	movf	sprintf@ap& (0+255),w,b
  8951  0009B2  6ED9               	movwf	fsr2l,c
  8952  0009B4  6ADA               	clrf	fsr2h,c
  8953  0009B6  CFDE F0F3          	movff	postinc2,sprintf@val
  8954  0009BA  CFDD F0F4          	movff	postdec2,sprintf@val+1
  8955                           
  8956                           ; BSR set to: 0
  8957  0009BE  0E02               	movlw	2
  8958  0009C0  27F1               	addwf	sprintf@ap& (0+255),f,b
  8959  0009C2  D02C               	goto	l7470
  8960  0009C4                     l7440:
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8964  0009C4  0E01               	movlw	1
  8965  0009C6  6FF8               	movwf	sprintf@c& (0+255),b
  8966  0009C8                     l7446:
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;doprnt.c: 1306: if(val < dpowers[c])
  8970  0009C8  51F8               	movf	sprintf@c& (0+255),w,b
  8971  0009CA  0D02               	mullw	2
  8972  0009CC  0EA5               	movlw	low _dpowers
  8973  0009CE  24F3               	addwf	prodl,w,c
  8974  0009D0  6EF6               	movwf	tblptrl,c
  8975  0009D2  0E3B               	movlw	high _dpowers
  8976  0009D4  20F4               	addwfc	prodh,w,c
  8977  0009D6  6EF7               	movwf	tblptrh,c
  8978  0009D8                     	if	0	;There are less than 3 active tblptr bytes
  8979  0009D8                     	endif
  8980  0009D8  0009               	tblrd		*+
  8981  0009DA  50F5               	movf	tablat,w,c
  8982  0009DC  5DF3               	subwf	sprintf@val& (0+255),w,b
  8983  0009DE  0009               	tblrd		*+
  8984  0009E0  50F5               	movf	tablat,w,c
  8985  0009E2  59F4               	subwfb	(sprintf@val+1)& (0+255),w,b
  8986  0009E4  E320               	bnc	l7472
  8987                           
  8988                           ; BSR set to: 0
  8989  0009E6  2BF8               	incf	sprintf@c& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992  0009E8  0E05               	movlw	5
  8993  0009EA  19F8               	xorwf	sprintf@c& (0+255),w,b
  8994  0009EC  E01C               	bz	l7472
  8995  0009EE  D7EC               	goto	l7446
  8996  0009F0                     l7454:
  8997                           
  8998                           ; BSR set to: 0
  8999                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9000  0009F0  0E01               	movlw	1
  9001  0009F2  6FF8               	movwf	sprintf@c& (0+255),b
  9002  0009F4                     l7460:
  9003                           
  9004                           ; BSR set to: 0
  9005                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9006  0009F4  51F8               	movf	sprintf@c& (0+255),w,b
  9007  0009F6  0D02               	mullw	2
  9008  0009F8  0EAF               	movlw	low _hexpowers
  9009  0009FA  24F3               	addwf	prodl,w,c
  9010  0009FC  6EF6               	movwf	tblptrl,c
  9011  0009FE  0E3B               	movlw	high _hexpowers
  9012  000A00  20F4               	addwfc	prodh,w,c
  9013  000A02  6EF7               	movwf	tblptrh,c
  9014  000A04                     	if	0	;There are less than 3 active tblptr bytes
  9015  000A04                     	endif
  9016  000A04  0009               	tblrd		*+
  9017  000A06  50F5               	movf	tablat,w,c
  9018  000A08  5DF3               	subwf	sprintf@val& (0+255),w,b
  9019  000A0A  0009               	tblrd		*+
  9020  000A0C  50F5               	movf	tablat,w,c
  9021  000A0E  59F4               	subwfb	(sprintf@val+1)& (0+255),w,b
  9022  000A10  E30A               	bnc	l7472
  9023                           
  9024                           ; BSR set to: 0
  9025  000A12  2BF8               	incf	sprintf@c& (0+255),f,b
  9026                           
  9027                           ; BSR set to: 0
  9028  000A14  0E04               	movlw	4
  9029  000A16  19F8               	xorwf	sprintf@c& (0+255),w,b
  9030  000A18  E006               	bz	l7472
  9031  000A1A  D7EC               	goto	l7460
  9032  000A1C                     l7470:
  9033                           
  9034                           ; BSR set to: 0
  9035  000A1C  51F5               	movf	sprintf@flag& (0+255),w,b
  9036  000A1E  0B80               	andlw	128
  9037                           
  9038                           ; Switch size 1, requested type "speed"
  9039                           ; Number of cases is 2, Range of values is 0 to 128
  9040                           ; switch strategies available:
  9041                           ; Name         Instructions Cycles
  9042                           ; simple_byte            7     4 (average)
  9043                           ;	Chosen strategy is simple_byte
  9044  000A20  E0D1               	bz	l7440
  9045  000A22  0A80               	xorlw	128	; case 128
  9046  000A24  E0E5               	bz	l7454
  9047  000A26                     l7472:
  9048                           
  9049                           ; BSR set to: 0
  9050                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9051  000A26  51F6               	movf	sprintf@width& (0+255),w,b
  9052  000A28  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9053  000A2A  E008               	bz	l7478
  9054                           
  9055                           ; BSR set to: 0
  9056  000A2C  C0F5  F0EC         	movff	sprintf@flag,??_sprintf
  9057  000A30  0E03               	movlw	3
  9058  000A32  17EC               	andwf	??_sprintf& (0+255),f,b
  9059  000A34  E003               	bz	l7478
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;doprnt.c: 1346: width--;
  9063  000A36  07F6               	decf	sprintf@width& (0+255),f,b
  9064  000A38  A0D8               	btfss	status,0,c
  9065  000A3A  07F7               	decf	(sprintf@width+1)& (0+255),f,b
  9066  000A3C                     l7478:
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;doprnt.c: 1381: if(width > c)
  9070  000A3C  0E80               	movlw	128
  9071  000A3E  BFF8               	btfsc	sprintf@c& (0+255),7,b
  9072  000A40  0E7F               	movlw	127
  9073  000A42  6FEC               	movwf	??_sprintf& (0+255),b
  9074  000A44  51F6               	movf	sprintf@width& (0+255),w,b
  9075  000A46  5DF8               	subwf	sprintf@c& (0+255),w,b
  9076  000A48  51F7               	movf	(sprintf@width+1)& (0+255),w,b
  9077  000A4A  0A80               	xorlw	128
  9078  000A4C  59EC               	subwfb	??_sprintf& (0+255),w,b
  9079  000A4E  E207               	bc	l1753
  9080                           
  9081                           ; BSR set to: 0
  9082                           ;doprnt.c: 1382: width -= c;
  9083  000A50  51F8               	movf	sprintf@c& (0+255),w,b
  9084  000A52  5FF6               	subwf	sprintf@width& (0+255),f,b
  9085  000A54  0E00               	movlw	0
  9086  000A56  BFF8               	btfsc	sprintf@c& (0+255),7,b
  9087  000A58  0EFF               	movlw	255
  9088  000A5A  5BF7               	subwfb	(sprintf@width+1)& (0+255),f,b
  9089  000A5C  D002               	goto	l1754
  9090  000A5E                     l1753:
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;doprnt.c: 1383: else
  9094                           ;doprnt.c: 1384: width = 0;
  9095  000A5E  6BF6               	clrf	sprintf@width& (0+255),b
  9096  000A60  6BF7               	clrf	(sprintf@width+1)& (0+255),b
  9097  000A62                     l1754:
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;doprnt.c: 1387: if(flag & 0x04) {
  9101  000A62  A5F5               	btfss	sprintf@flag& (0+255),2,b
  9102  000A64  D018               	goto	l7496
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;doprnt.c: 1392: if(flag & 0x03)
  9106  000A66  C0F5  F0EC         	movff	sprintf@flag,??_sprintf
  9107  000A6A  0E03               	movlw	3
  9108  000A6C  17EC               	andwf	??_sprintf& (0+255),f,b
  9109  000A6E  E006               	bz	l7488
  9110                           
  9111                           ; BSR set to: 0
  9112                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9113  000A70  501B               	movf	sprintf@sp,w,c
  9114  000A72  6ED9               	movwf	fsr2l,c
  9115  000A74  6ADA               	clrf	fsr2h,c
  9116  000A76  0E2D               	movlw	45
  9117  000A78  6EDF               	movwf	indf2,c
  9118                           
  9119                           ; BSR set to: 0
  9120  000A7A  2A1B               	incf	sprintf@sp,f,c
  9121  000A7C                     l7488:
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;doprnt.c: 1415: if(width)
  9125  000A7C  51F6               	movf	sprintf@width& (0+255),w,b
  9126  000A7E  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9127  000A80  E024               	bz	l7510
  9128                           
  9129                           ; BSR set to: 0
  9130                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9131  000A82  501B               	movf	sprintf@sp,w,c
  9132  000A84  6ED9               	movwf	fsr2l,c
  9133  000A86  6ADA               	clrf	fsr2h,c
  9134  000A88  0E30               	movlw	48
  9135  000A8A  6EDF               	movwf	indf2,c
  9136                           
  9137                           ; BSR set to: 0
  9138  000A8C  2A1B               	incf	sprintf@sp,f,c
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;doprnt.c: 1418: while(--width);
  9142  000A8E  07F6               	decf	sprintf@width& (0+255),f,b
  9143  000A90  A0D8               	btfss	status,0,c
  9144  000A92  07F7               	decf	(sprintf@width+1)& (0+255),f,b
  9145  000A94  D7F3               	goto	l7488
  9146  000A96                     l7496:
  9147                           
  9148                           ; BSR set to: 0
  9149                           ;doprnt.c: 1422: {
  9150                           ;doprnt.c: 1424: if(width
  9151                           ;doprnt.c: 1428: )
  9152  000A96  51F6               	movf	sprintf@width& (0+255),w,b
  9153  000A98  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9154  000A9A  E00C               	bz	l7504
  9155  000A9C                     l7498:
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9159  000A9C  501B               	movf	sprintf@sp,w,c
  9160  000A9E  6ED9               	movwf	fsr2l,c
  9161  000AA0  6ADA               	clrf	fsr2h,c
  9162  000AA2  0E20               	movlw	32
  9163  000AA4  6EDF               	movwf	indf2,c
  9164                           
  9165                           ; BSR set to: 0
  9166  000AA6  2A1B               	incf	sprintf@sp,f,c
  9167                           
  9168                           ; BSR set to: 0
  9169                           ;doprnt.c: 1431: while(--width);
  9170  000AA8  07F6               	decf	sprintf@width& (0+255),f,b
  9171  000AAA  A0D8               	btfss	status,0,c
  9172  000AAC  07F7               	decf	(sprintf@width+1)& (0+255),f,b
  9173  000AAE  51F6               	movf	sprintf@width& (0+255),w,b
  9174  000AB0  11F7               	iorwf	(sprintf@width+1)& (0+255),w,b
  9175  000AB2  E1F4               	bnz	l7498
  9176  000AB4                     l7504:
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;doprnt.c: 1438: if(flag & 0x03)
  9180  000AB4  C0F5  F0EC         	movff	sprintf@flag,??_sprintf
  9181  000AB8  0E03               	movlw	3
  9182  000ABA  17EC               	andwf	??_sprintf& (0+255),f,b
  9183  000ABC  E006               	bz	l7510
  9184                           
  9185                           ; BSR set to: 0
  9186                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9187  000ABE  501B               	movf	sprintf@sp,w,c
  9188  000AC0  6ED9               	movwf	fsr2l,c
  9189  000AC2  6ADA               	clrf	fsr2h,c
  9190  000AC4  0E2D               	movlw	45
  9191  000AC6  6EDF               	movwf	indf2,c
  9192                           
  9193                           ; BSR set to: 0
  9194  000AC8  2A1B               	incf	sprintf@sp,f,c
  9195  000ACA                     l7510:
  9196                           
  9197                           ; BSR set to: 0
  9198                           ;doprnt.c: 1469: }
  9199                           ;doprnt.c: 1472: prec = c;
  9200  000ACA  C0F8  F0F2         	movff	sprintf@c,sprintf@prec
  9201                           
  9202                           ;doprnt.c: 1474: while(prec--) {
  9203  000ACE  D04D               	goto	l7526
  9204  000AD0                     l7512:
  9205                           
  9206                           ; BSR set to: 0
  9207                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9208  000AD0  51F2               	movf	sprintf@prec& (0+255),w,b
  9209  000AD2  0D02               	mullw	2
  9210  000AD4  0EA5               	movlw	low _dpowers
  9211  000AD6  24F3               	addwf	prodl,w,c
  9212  000AD8  6EF6               	movwf	tblptrl,c
  9213  000ADA  0E3B               	movlw	high _dpowers
  9214  000ADC  20F4               	addwfc	prodh,w,c
  9215  000ADE  6EF7               	movwf	tblptrh,c
  9216  000AE0                     	if	0	;There are less than 3 active tblptr bytes
  9217  000AE0                     	endif
  9218  000AE0  0009               	tblrd		*+
  9219  000AE2  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9220  000AE6  000A               	tblrd		*-
  9221  000AE8  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9222  000AEC  C0F3  F00F         	movff	sprintf@val,___lwdiv@dividend
  9223  000AF0  C0F4  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9224  000AF4  EC5C  F00E         	call	___lwdiv	;wreg free
  9225  000AF8  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  9226  000AFC  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  9227  000B00  6A19               	clrf	___lwmod@divisor+1,c
  9228  000B02  0E0A               	movlw	10
  9229  000B04  6E18               	movwf	___lwmod@divisor,c
  9230  000B06  ECA2  F00E         	call	___lwmod	;wreg free
  9231  000B0A  5016               	movf	?___lwmod,w,c
  9232  000B0C  0F30               	addlw	48
  9233  000B0E  6FF8               	movwf	sprintf@c& (0+255),b
  9234                           
  9235                           ;doprnt.c: 1491: break;
  9236  000B10  D026               	goto	l7522
  9237  000B12                     l7514:
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;doprnt.c: 1499: {
  9241                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9242  000B12  C0F3  F00F         	movff	sprintf@val,___lwdiv@dividend
  9243  000B16  C0F4  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9244  000B1A  51F2               	movf	sprintf@prec& (0+255),w,b
  9245  000B1C  0D02               	mullw	2
  9246  000B1E  0EAF               	movlw	low _hexpowers
  9247  000B20  24F3               	addwf	prodl,w,c
  9248  000B22  6EF6               	movwf	tblptrl,c
  9249  000B24  0E3B               	movlw	high _hexpowers
  9250  000B26  20F4               	addwfc	prodh,w,c
  9251  000B28  6EF7               	movwf	tblptrh,c
  9252  000B2A                     	if	0	;There are less than 3 active tblptr bytes
  9253  000B2A                     	endif
  9254  000B2A  0009               	tblrd		*+
  9255  000B2C  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9256  000B30  000A               	tblrd		*-
  9257  000B32  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9258  000B36  EC5C  F00E         	call	___lwdiv	;wreg free
  9259  000B3A  500F               	movf	?___lwdiv,w,c
  9260  000B3C  0B0F               	andlw	15
  9261  000B3E  6FF0               	movwf	sprintf@idx& (0+255),b
  9262                           
  9263                           ; BSR set to: 0
  9264                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  9265  000B40  0EDB               	movlw	low STR_11
  9266  000B42  25F0               	addwf	sprintf@idx& (0+255),w,b
  9267  000B44  6EF6               	movwf	tblptrl,c
  9268  000B46  6AF7               	clrf	tblptrh,c
  9269  000B48  0E3C               	movlw	high STR_11
  9270  000B4A  22F7               	addwfc	tblptrh,f,c
  9271  000B4C                     	if	0	;There are less than 3 active tblptr bytes
  9272  000B4C                     	endif
  9273  000B4C  0008               	tblrd		*
  9274  000B4E  CFF5 F0F8          	movff	tablat,sprintf@c
  9275                           
  9276                           ;doprnt.c: 1508: }
  9277                           ;doprnt.c: 1510: break;
  9278  000B52  D005               	goto	l7522
  9279  000B54                     l7520:
  9280                           
  9281                           ; BSR set to: 0
  9282  000B54  51F5               	movf	sprintf@flag& (0+255),w,b
  9283  000B56  0B80               	andlw	128
  9284                           
  9285                           ; Switch size 1, requested type "speed"
  9286                           ; Number of cases is 2, Range of values is 0 to 128
  9287                           ; switch strategies available:
  9288                           ; Name         Instructions Cycles
  9289                           ; simple_byte            7     4 (average)
  9290                           ;	Chosen strategy is simple_byte
  9291  000B58  E0BB               	bz	l7512
  9292  000B5A  0A80               	xorlw	128	; case 128
  9293  000B5C  E0DA               	bz	l7514
  9294  000B5E                     l7522:
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9298  000B5E  501B               	movf	sprintf@sp,w,c
  9299  000B60  6ED9               	movwf	fsr2l,c
  9300  000B62  6ADA               	clrf	fsr2h,c
  9301  000B64  C0F8  FFDF         	movff	sprintf@c,indf2
  9302                           
  9303                           ; BSR set to: 0
  9304  000B68  2A1B               	incf	sprintf@sp,f,c
  9305  000B6A                     l7526:
  9306                           
  9307                           ; BSR set to: 0
  9308  000B6A  07F2               	decf	sprintf@prec& (0+255),f,b
  9309  000B6C  29F2               	incf	sprintf@prec& (0+255),w,b
  9310  000B6E  E1F2               	bnz	l7520
  9311  000B70                     l7528:
  9312                           
  9313                           ; BSR set to: 0
  9314  000B70  C01C  FFF6         	movff	sprintf@f,tblptrl
  9315  000B74  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9316  000B78  4A1C               	infsnz	sprintf@f,f,c
  9317  000B7A  2A1D               	incf	sprintf@f+1,f,c
  9318  000B7C                     	if	0	;tblptru may be non-zero
  9319  000B7C                     	endif
  9320  000B7C                     	if	0	;tblptru may be non-zero
  9321  000B7C                     	endif
  9322  000B7C  0008               	tblrd		*
  9323  000B7E  CFF5 F0F8          	movff	tablat,sprintf@c
  9324  000B82  51F8               	movf	sprintf@c& (0+255),w,b
  9325  000B84  E001 D696          	bnz	l7396
  9326  000B88                     l7530:
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;doprnt.c: 1538: *sp = 0;
  9330  000B88  501B               	movf	sprintf@sp,w,c
  9331  000B8A  6ED9               	movwf	fsr2l,c
  9332  000B8C  6ADA               	clrf	fsr2h,c
  9333  000B8E  6ADF               	clrf	indf2,c
  9334                           
  9335                           ; BSR set to: 0
  9336  000B90  0C00               	retlw	0	;funcret
  9337  000B92                     __end_of_sprintf:
  9338                           	opt stack 0
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           intcon2	equ	0xFF1
  9347                           intcon3	equ	0xFF0
  9348                           postinc0	equ	0xFEE
  9349                           wreg	equ	0xFE8
  9350                           indf1	equ	0xFE7
  9351                           postdec1	equ	0xFE5
  9352                           fsr1h	equ	0xFE2
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           fsr2h	equ	0xFDA
  9358                           fsr2l	equ	0xFD9
  9359                           status	equ	0xFD8
  9360                           
  9361 ;; *************** function _isdigit *****************
  9362 ;; Defined at:
  9363 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  9364 ;; Parameters:    Size  Location     Type
  9365 ;;  c               1    wreg     unsigned char 
  9366 ;; Auto vars:     Size  Location     Type
  9367 ;;  c               1   16[COMRAM] unsigned char 
  9368 ;; Return value:  Size  Location     Type
  9369 ;;		None               void
  9370 ;; Registers used:
  9371 ;;		wreg, status,2, status,0
  9372 ;; Tracked objects:
  9373 ;;		On entry : 3F/0
  9374 ;;		On exit  : 0/0
  9375 ;;		Unchanged: 0/0
  9376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9377 ;;      Params:         0       0       0       0
  9378 ;;      Locals:         2       0       0       0
  9379 ;;      Temps:          1       0       0       0
  9380 ;;      Totals:         3       0       0       0
  9381 ;;Total ram usage:        3 bytes
  9382 ;; Hardware stack levels used:    1
  9383 ;; Hardware stack levels required when called:   10
  9384 ;; This function calls:
  9385 ;;		Nothing
  9386 ;; This function is called by:
  9387 ;;		_sprintf
  9388 ;; This function uses a non-reentrant model
  9389 ;;
  9390                           
  9391                           	psect	text47
  9392  00218E                     __ptext47:
  9393                           	opt stack 0
  9394  00218E                     _isdigit:
  9395                           	opt stack 15
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;incstack = 0
  9399                           ;isdigit@c stored from wreg
  9400  00218E  6E11               	movwf	isdigit@c,c
  9401  002190  6A10               	clrf	_isdigit$3714,c
  9402  002192  0E3A               	movlw	58
  9403  002194  6011               	cpfslt	isdigit@c,c
  9404  002196  D005               	goto	l7218
  9405  002198  0E2F               	movlw	47
  9406  00219A  6411               	cpfsgt	isdigit@c,c
  9407  00219C  D002               	goto	l7218
  9408  00219E  0E01               	movlw	1
  9409  0021A0  6E10               	movwf	_isdigit$3714,c
  9410  0021A2                     l7218:
  9411  0021A2  C010  F00F         	movff	_isdigit$3714,??_isdigit
  9412  0021A6  300F               	rrcf	??_isdigit,w,c
  9413  0021A8  0012               	return		;funcret
  9414  0021AA                     __end_of_isdigit:
  9415                           	opt stack 0
  9416                           tblptru	equ	0xFF8
  9417                           tblptrh	equ	0xFF7
  9418                           tblptrl	equ	0xFF6
  9419                           tablat	equ	0xFF5
  9420                           prodh	equ	0xFF4
  9421                           prodl	equ	0xFF3
  9422                           intcon	equ	0xFF2
  9423                           intcon2	equ	0xFF1
  9424                           intcon3	equ	0xFF0
  9425                           postinc0	equ	0xFEE
  9426                           wreg	equ	0xFE8
  9427                           indf1	equ	0xFE7
  9428                           postdec1	equ	0xFE5
  9429                           fsr1h	equ	0xFE2
  9430                           fsr1l	equ	0xFE1
  9431                           indf2	equ	0xFDF
  9432                           postinc2	equ	0xFDE
  9433                           postdec2	equ	0xFDD
  9434                           fsr2h	equ	0xFDA
  9435                           fsr2l	equ	0xFD9
  9436                           status	equ	0xFD8
  9437                           
  9438 ;; *************** function ___wmul *****************
  9439 ;; Defined at:
  9440 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9441 ;; Parameters:    Size  Location     Type
  9442 ;;  multiplier      2   14[COMRAM] unsigned int 
  9443 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;  product         2   18[COMRAM] unsigned int 
  9446 ;; Return value:  Size  Location     Type
  9447 ;;                  2   14[COMRAM] unsigned int 
  9448 ;; Registers used:
  9449 ;;		wreg, status,2, status,0, prodl, prodh
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9455 ;;      Params:         4       0       0       0
  9456 ;;      Locals:         2       0       0       0
  9457 ;;      Temps:          0       0       0       0
  9458 ;;      Totals:         6       0       0       0
  9459 ;;Total ram usage:        6 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:   10
  9462 ;; This function calls:
  9463 ;;		Nothing
  9464 ;; This function is called by:
  9465 ;;		_sprintf
  9466 ;; This function uses a non-reentrant model
  9467 ;;
  9468                           
  9469                           	psect	text48
  9470  00206C                     __ptext48:
  9471                           	opt stack 0
  9472  00206C                     ___wmul:
  9473                           	opt stack 15
  9474                           
  9475                           ;incstack = 0
  9476  00206C  500F               	movf	___wmul@multiplier,w,c
  9477  00206E  0211               	mulwf	___wmul@multiplicand,c
  9478  002070  CFF3 F013          	movff	prodl,___wmul@product
  9479  002074  CFF4 F014          	movff	prodh,___wmul@product+1
  9480  002078  500F               	movf	___wmul@multiplier,w,c
  9481  00207A  0212               	mulwf	___wmul@multiplicand+1,c
  9482  00207C  50F3               	movf	prodl,w,c
  9483  00207E  2614               	addwf	___wmul@product+1,f,c
  9484  002080  5010               	movf	___wmul@multiplier+1,w,c
  9485  002082  0211               	mulwf	___wmul@multiplicand,c
  9486  002084  50F3               	movf	prodl,w,c
  9487  002086  2614               	addwf	___wmul@product+1,f,c
  9488  002088  C013  F00F         	movff	___wmul@product,?___wmul
  9489  00208C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9490  002090  0012               	return		;funcret
  9491  002092                     __end_of___wmul:
  9492                           	opt stack 0
  9493                           tblptru	equ	0xFF8
  9494                           tblptrh	equ	0xFF7
  9495                           tblptrl	equ	0xFF6
  9496                           tablat	equ	0xFF5
  9497                           prodh	equ	0xFF4
  9498                           prodl	equ	0xFF3
  9499                           intcon	equ	0xFF2
  9500                           intcon2	equ	0xFF1
  9501                           intcon3	equ	0xFF0
  9502                           postinc0	equ	0xFEE
  9503                           wreg	equ	0xFE8
  9504                           indf1	equ	0xFE7
  9505                           postdec1	equ	0xFE5
  9506                           fsr1h	equ	0xFE2
  9507                           fsr1l	equ	0xFE1
  9508                           indf2	equ	0xFDF
  9509                           postinc2	equ	0xFDE
  9510                           postdec2	equ	0xFDD
  9511                           fsr2h	equ	0xFDA
  9512                           fsr2l	equ	0xFD9
  9513                           status	equ	0xFD8
  9514                           
  9515 ;; *************** function ___lwmod *****************
  9516 ;; Defined at:
  9517 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  dividend        2   21[COMRAM] unsigned int 
  9520 ;;  divisor         2   23[COMRAM] unsigned int 
  9521 ;; Auto vars:     Size  Location     Type
  9522 ;;  counter         1   25[COMRAM] unsigned char 
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  2   21[COMRAM] unsigned int 
  9525 ;; Registers used:
  9526 ;;		wreg, status,2, status,0
  9527 ;; Tracked objects:
  9528 ;;		On entry : 3F/0
  9529 ;;		On exit  : 3F/0
  9530 ;;		Unchanged: 3F/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9532 ;;      Params:         4       0       0       0
  9533 ;;      Locals:         1       0       0       0
  9534 ;;      Temps:          0       0       0       0
  9535 ;;      Totals:         5       0       0       0
  9536 ;;Total ram usage:        5 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:   10
  9539 ;; This function calls:
  9540 ;;		Nothing
  9541 ;; This function is called by:
  9542 ;;		_sprintf
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text49
  9547  001D44                     __ptext49:
  9548                           	opt stack 0
  9549  001D44                     ___lwmod:
  9550                           	opt stack 15
  9551                           
  9552                           ; BSR set to: 0
  9553                           
  9554                           ;incstack = 0
  9555  001D44  5018               	movf	___lwmod@divisor,w,c
  9556  001D46  1019               	iorwf	___lwmod@divisor+1,w,c
  9557  001D48  E017               	bz	l2185
  9558                           
  9559                           ; BSR set to: 0
  9560  001D4A  0E01               	movlw	1
  9561  001D4C  6E1A               	movwf	___lwmod@counter,c
  9562  001D4E  D004               	goto	l7292
  9563  001D50                     l7290:
  9564                           
  9565                           ; BSR set to: 0
  9566  001D50  90D8               	bcf	status,0,c
  9567  001D52  3618               	rlcf	___lwmod@divisor,f,c
  9568  001D54  3619               	rlcf	___lwmod@divisor+1,f,c
  9569  001D56  2A1A               	incf	___lwmod@counter,f,c
  9570  001D58                     l7292:
  9571                           
  9572                           ; BSR set to: 0
  9573  001D58  AE19               	btfss	___lwmod@divisor+1,7,c
  9574  001D5A  D7FA               	goto	l7290
  9575  001D5C                     l7294:
  9576                           
  9577                           ; BSR set to: 0
  9578  001D5C  5018               	movf	___lwmod@divisor,w,c
  9579  001D5E  5C16               	subwf	___lwmod@dividend,w,c
  9580  001D60  5019               	movf	___lwmod@divisor+1,w,c
  9581  001D62  5817               	subwfb	___lwmod@dividend+1,w,c
  9582  001D64  E304               	bnc	l7298
  9583                           
  9584                           ; BSR set to: 0
  9585  001D66  5018               	movf	___lwmod@divisor,w,c
  9586  001D68  5E16               	subwf	___lwmod@dividend,f,c
  9587  001D6A  5019               	movf	___lwmod@divisor+1,w,c
  9588  001D6C  5A17               	subwfb	___lwmod@dividend+1,f,c
  9589  001D6E                     l7298:
  9590                           
  9591                           ; BSR set to: 0
  9592  001D6E  90D8               	bcf	status,0,c
  9593  001D70  3219               	rrcf	___lwmod@divisor+1,f,c
  9594  001D72  3218               	rrcf	___lwmod@divisor,f,c
  9595                           
  9596                           ; BSR set to: 0
  9597  001D74  2E1A               	decfsz	___lwmod@counter,f,c
  9598  001D76  D7F2               	goto	l7294
  9599  001D78                     l2185:
  9600                           
  9601                           ; BSR set to: 0
  9602  001D78  C016  F016         	movff	___lwmod@dividend,?___lwmod
  9603  001D7C  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  9604                           
  9605                           ; BSR set to: 0
  9606  001D80  0012               	return		;funcret
  9607  001D82                     __end_of___lwmod:
  9608                           	opt stack 0
  9609                           tblptru	equ	0xFF8
  9610                           tblptrh	equ	0xFF7
  9611                           tblptrl	equ	0xFF6
  9612                           tablat	equ	0xFF5
  9613                           prodh	equ	0xFF4
  9614                           prodl	equ	0xFF3
  9615                           intcon	equ	0xFF2
  9616                           intcon2	equ	0xFF1
  9617                           intcon3	equ	0xFF0
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           indf1	equ	0xFE7
  9621                           postdec1	equ	0xFE5
  9622                           fsr1h	equ	0xFE2
  9623                           fsr1l	equ	0xFE1
  9624                           indf2	equ	0xFDF
  9625                           postinc2	equ	0xFDE
  9626                           postdec2	equ	0xFDD
  9627                           fsr2h	equ	0xFDA
  9628                           fsr2l	equ	0xFD9
  9629                           status	equ	0xFD8
  9630                           
  9631 ;; *************** function ___lwdiv *****************
  9632 ;; Defined at:
  9633 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  dividend        2   14[COMRAM] unsigned int 
  9636 ;;  divisor         2   16[COMRAM] unsigned int 
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;  quotient        2   19[COMRAM] unsigned int 
  9639 ;;  counter         1   18[COMRAM] unsigned char 
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  2   14[COMRAM] unsigned int 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0
  9644 ;; Tracked objects:
  9645 ;;		On entry : 3F/0
  9646 ;;		On exit  : 3F/0
  9647 ;;		Unchanged: 3F/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9649 ;;      Params:         4       0       0       0
  9650 ;;      Locals:         3       0       0       0
  9651 ;;      Temps:          0       0       0       0
  9652 ;;      Totals:         7       0       0       0
  9653 ;;Total ram usage:        7 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:   10
  9656 ;; This function calls:
  9657 ;;		Nothing
  9658 ;; This function is called by:
  9659 ;;		_sprintf
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           	psect	text50
  9664  001CB8                     __ptext50:
  9665                           	opt stack 0
  9666  001CB8                     ___lwdiv:
  9667                           	opt stack 15
  9668                           
  9669                           ; BSR set to: 0
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;incstack = 0
  9673  001CB8  6A14               	clrf	___lwdiv@quotient,c
  9674  001CBA  6A15               	clrf	___lwdiv@quotient+1,c
  9675                           
  9676                           ; BSR set to: 0
  9677  001CBC  5011               	movf	___lwdiv@divisor,w,c
  9678  001CBE  1012               	iorwf	___lwdiv@divisor+1,w,c
  9679  001CC0  E01B               	bz	l2175
  9680                           
  9681                           ; BSR set to: 0
  9682  001CC2  0E01               	movlw	1
  9683  001CC4  6E13               	movwf	___lwdiv@counter,c
  9684  001CC6  D004               	goto	l7272
  9685  001CC8                     l7270:
  9686                           
  9687                           ; BSR set to: 0
  9688  001CC8  90D8               	bcf	status,0,c
  9689  001CCA  3611               	rlcf	___lwdiv@divisor,f,c
  9690  001CCC  3612               	rlcf	___lwdiv@divisor+1,f,c
  9691  001CCE  2A13               	incf	___lwdiv@counter,f,c
  9692  001CD0                     l7272:
  9693                           
  9694                           ; BSR set to: 0
  9695  001CD0  AE12               	btfss	___lwdiv@divisor+1,7,c
  9696  001CD2  D7FA               	goto	l7270
  9697  001CD4                     l7274:
  9698                           
  9699                           ; BSR set to: 0
  9700  001CD4  90D8               	bcf	status,0,c
  9701  001CD6  3614               	rlcf	___lwdiv@quotient,f,c
  9702  001CD8  3615               	rlcf	___lwdiv@quotient+1,f,c
  9703                           
  9704                           ; BSR set to: 0
  9705  001CDA  5011               	movf	___lwdiv@divisor,w,c
  9706  001CDC  5C0F               	subwf	___lwdiv@dividend,w,c
  9707  001CDE  5012               	movf	___lwdiv@divisor+1,w,c
  9708  001CE0  5810               	subwfb	___lwdiv@dividend+1,w,c
  9709  001CE2  E305               	bnc	l7282
  9710                           
  9711                           ; BSR set to: 0
  9712  001CE4  5011               	movf	___lwdiv@divisor,w,c
  9713  001CE6  5E0F               	subwf	___lwdiv@dividend,f,c
  9714  001CE8  5012               	movf	___lwdiv@divisor+1,w,c
  9715  001CEA  5A10               	subwfb	___lwdiv@dividend+1,f,c
  9716                           
  9717                           ; BSR set to: 0
  9718  001CEC  8014               	bsf	___lwdiv@quotient,0,c
  9719  001CEE                     l7282:
  9720                           
  9721                           ; BSR set to: 0
  9722  001CEE  90D8               	bcf	status,0,c
  9723  001CF0  3212               	rrcf	___lwdiv@divisor+1,f,c
  9724  001CF2  3211               	rrcf	___lwdiv@divisor,f,c
  9725                           
  9726                           ; BSR set to: 0
  9727  001CF4  2E13               	decfsz	___lwdiv@counter,f,c
  9728  001CF6  D7EE               	goto	l7274
  9729  001CF8                     l2175:
  9730                           
  9731                           ; BSR set to: 0
  9732  001CF8  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  9733  001CFC  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9734                           
  9735                           ; BSR set to: 0
  9736  001D00  0012               	return		;funcret
  9737  001D02                     __end_of___lwdiv:
  9738                           	opt stack 0
  9739                           tblptru	equ	0xFF8
  9740                           tblptrh	equ	0xFF7
  9741                           tblptrl	equ	0xFF6
  9742                           tablat	equ	0xFF5
  9743                           prodh	equ	0xFF4
  9744                           prodl	equ	0xFF3
  9745                           intcon	equ	0xFF2
  9746                           intcon2	equ	0xFF1
  9747                           intcon3	equ	0xFF0
  9748                           postinc0	equ	0xFEE
  9749                           wreg	equ	0xFE8
  9750                           indf1	equ	0xFE7
  9751                           postdec1	equ	0xFE5
  9752                           fsr1h	equ	0xFE2
  9753                           fsr1l	equ	0xFE1
  9754                           indf2	equ	0xFDF
  9755                           postinc2	equ	0xFDE
  9756                           postdec2	equ	0xFDD
  9757                           fsr2h	equ	0xFDA
  9758                           fsr2l	equ	0xFD9
  9759                           status	equ	0xFD8
  9760                           
  9761 ;; *************** function _delay_1s *****************
  9762 ;; Defined at:
  9763 ;;		line 76 in file "horloge.c"
  9764 ;; Parameters:    Size  Location     Type
  9765 ;;		None
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;		None
  9768 ;; Return value:  Size  Location     Type
  9769 ;;                  1    wreg      void 
  9770 ;; Registers used:
  9771 ;;		wreg, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9777 ;;      Params:         0       0       0       0
  9778 ;;      Locals:         0       0       0       0
  9779 ;;      Temps:          0       0       0       0
  9780 ;;      Totals:         0       0       0       0
  9781 ;;Total ram usage:        0 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:   11
  9784 ;; This function calls:
  9785 ;;		_delay_100ms
  9786 ;; This function is called by:
  9787 ;;		_EUSART1_RX_T3_LOCAL
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text51
  9792  001FD0                     __ptext51:
  9793                           	opt stack 0
  9794  001FD0                     _delay_1s:
  9795                           	opt stack 15
  9796                           
  9797                           ;horloge.c: 77: delay_100ms();
  9798                           
  9799                           ; BSR set to: 0
  9800                           ;incstack = 0
  9801  001FD0  ECD7  F00A         	call	_delay_100ms	;wreg free
  9802                           
  9803                           ;horloge.c: 78: delay_100ms();
  9804  001FD4  ECD7  F00A         	call	_delay_100ms	;wreg free
  9805                           
  9806                           ;horloge.c: 79: delay_100ms();
  9807  001FD8  ECD7  F00A         	call	_delay_100ms	;wreg free
  9808                           
  9809                           ;horloge.c: 80: delay_100ms();
  9810  001FDC  ECD7  F00A         	call	_delay_100ms	;wreg free
  9811                           
  9812                           ;horloge.c: 81: delay_100ms();
  9813  001FE0  ECD7  F00A         	call	_delay_100ms	;wreg free
  9814                           
  9815                           ;horloge.c: 82: delay_100ms();
  9816  001FE4  ECD7  F00A         	call	_delay_100ms	;wreg free
  9817                           
  9818                           ;horloge.c: 83: delay_100ms();
  9819  001FE8  ECD7  F00A         	call	_delay_100ms	;wreg free
  9820                           
  9821                           ;horloge.c: 84: delay_100ms();
  9822  001FEC  ECD7  F00A         	call	_delay_100ms	;wreg free
  9823                           
  9824                           ;horloge.c: 85: delay_100ms();
  9825  001FF0  ECD7  F00A         	call	_delay_100ms	;wreg free
  9826                           
  9827                           ;horloge.c: 86: delay_100ms();
  9828  001FF4  EFD7  F00A         	goto	_delay_100ms	;wreg free
  9829  001FF8                     __end_of_delay_1s:
  9830                           	opt stack 0
  9831                           tblptru	equ	0xFF8
  9832                           tblptrh	equ	0xFF7
  9833                           tblptrl	equ	0xFF6
  9834                           tablat	equ	0xFF5
  9835                           prodh	equ	0xFF4
  9836                           prodl	equ	0xFF3
  9837                           intcon	equ	0xFF2
  9838                           intcon2	equ	0xFF1
  9839                           intcon3	equ	0xFF0
  9840                           postinc0	equ	0xFEE
  9841                           wreg	equ	0xFE8
  9842                           indf1	equ	0xFE7
  9843                           postdec1	equ	0xFE5
  9844                           fsr1h	equ	0xFE2
  9845                           fsr1l	equ	0xFE1
  9846                           indf2	equ	0xFDF
  9847                           postinc2	equ	0xFDE
  9848                           postdec2	equ	0xFDD
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853 ;; *************** function _delay_100ms *****************
  9854 ;; Defined at:
  9855 ;;		line 46 in file "horloge.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;		None
  9858 ;; Auto vars:     Size  Location     Type
  9859 ;;		None
  9860 ;; Return value:  Size  Location     Type
  9861 ;;                  1    wreg      void 
  9862 ;; Registers used:
  9863 ;;		wreg
  9864 ;; Tracked objects:
  9865 ;;		On entry : 0/2
  9866 ;;		On exit  : 0/0
  9867 ;;		Unchanged: 0/0
  9868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9869 ;;      Params:         0       0       0       0
  9870 ;;      Locals:         0       0       0       0
  9871 ;;      Temps:          1       0       0       0
  9872 ;;      Totals:         1       0       0       0
  9873 ;;Total ram usage:        1 bytes
  9874 ;; Hardware stack levels used:    1
  9875 ;; Hardware stack levels required when called:   10
  9876 ;; This function calls:
  9877 ;;		Nothing
  9878 ;; This function is called by:
  9879 ;;		_delay_n_100ms
  9880 ;;		_delay_1s
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           	psect	text52
  9885  0015AE                     __ptext52:
  9886                           	opt stack 0
  9887  0015AE                     _delay_100ms:
  9888                           	opt stack 15
  9889                           
  9890                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
  9891                           
  9892                           ;incstack = 0
  9893  0015AE  0E1A               	movlw	26
  9894  0015B0  6E0F               	movwf	??_delay_100ms& (0+255),c
  9895  0015B2  0EF8               	movlw	248
  9896  0015B4                     u6587:
  9897  0015B4  2EE8               	decfsz	wreg,f,c
  9898  0015B6  D7FE               	bra	u6587
  9899  0015B8  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9900  0015BA  D7FC               	bra	u6587
  9901  0015BC  F000 F000          	nop2	
  9902                           
  9903                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
  9904  0015C0  0E1A               	movlw	26
  9905  0015C2  6E0F               	movwf	??_delay_100ms& (0+255),c
  9906  0015C4  0EF8               	movlw	248
  9907  0015C6                     u6597:
  9908  0015C6  2EE8               	decfsz	wreg,f,c
  9909  0015C8  D7FE               	bra	u6597
  9910  0015CA  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9911  0015CC  D7FC               	bra	u6597
  9912  0015CE  F000 F000          	nop2	
  9913                           
  9914                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
  9915  0015D2  0E1A               	movlw	26
  9916  0015D4  6E0F               	movwf	??_delay_100ms& (0+255),c
  9917  0015D6  0EF8               	movlw	248
  9918  0015D8                     u6607:
  9919  0015D8  2EE8               	decfsz	wreg,f,c
  9920  0015DA  D7FE               	bra	u6607
  9921  0015DC  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9922  0015DE  D7FC               	bra	u6607
  9923  0015E0  F000 F000          	nop2	
  9924                           
  9925                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
  9926  0015E4  0E1A               	movlw	26
  9927  0015E6  6E0F               	movwf	??_delay_100ms& (0+255),c
  9928  0015E8  0EF8               	movlw	248
  9929  0015EA                     u6617:
  9930  0015EA  2EE8               	decfsz	wreg,f,c
  9931  0015EC  D7FE               	bra	u6617
  9932  0015EE  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9933  0015F0  D7FC               	bra	u6617
  9934  0015F2  F000 F000          	nop2	
  9935                           
  9936                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
  9937  0015F6  0E1A               	movlw	26
  9938  0015F8  6E0F               	movwf	??_delay_100ms& (0+255),c
  9939  0015FA  0EF8               	movlw	248
  9940  0015FC                     u6627:
  9941  0015FC  2EE8               	decfsz	wreg,f,c
  9942  0015FE  D7FE               	bra	u6627
  9943  001600  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9944  001602  D7FC               	bra	u6627
  9945  001604  F000 F000          	nop2	
  9946                           
  9947                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
  9948  001608  0E1A               	movlw	26
  9949  00160A  6E0F               	movwf	??_delay_100ms& (0+255),c
  9950  00160C  0EF8               	movlw	248
  9951  00160E                     u6637:
  9952  00160E  2EE8               	decfsz	wreg,f,c
  9953  001610  D7FE               	bra	u6637
  9954  001612  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9955  001614  D7FC               	bra	u6637
  9956  001616  F000 F000          	nop2	
  9957                           
  9958                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
  9959  00161A  0E1A               	movlw	26
  9960  00161C  6E0F               	movwf	??_delay_100ms& (0+255),c
  9961  00161E  0EF8               	movlw	248
  9962  001620                     u6647:
  9963  001620  2EE8               	decfsz	wreg,f,c
  9964  001622  D7FE               	bra	u6647
  9965  001624  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9966  001626  D7FC               	bra	u6647
  9967  001628  F000 F000          	nop2	
  9968                           
  9969                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
  9970  00162C  0E1A               	movlw	26
  9971  00162E  6E0F               	movwf	??_delay_100ms& (0+255),c
  9972  001630  0EF8               	movlw	248
  9973  001632                     u6657:
  9974  001632  2EE8               	decfsz	wreg,f,c
  9975  001634  D7FE               	bra	u6657
  9976  001636  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9977  001638  D7FC               	bra	u6657
  9978  00163A  F000 F000          	nop2	
  9979                           
  9980                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
  9981  00163E  0E1A               	movlw	26
  9982  001640  6E0F               	movwf	??_delay_100ms& (0+255),c
  9983  001642  0EF8               	movlw	248
  9984  001644                     u6667:
  9985  001644  2EE8               	decfsz	wreg,f,c
  9986  001646  D7FE               	bra	u6667
  9987  001648  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9988  00164A  D7FC               	bra	u6667
  9989  00164C  F000 F000          	nop2	
  9990                           
  9991                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
  9992  001650  0E1A               	movlw	26
  9993  001652  6E0F               	movwf	??_delay_100ms& (0+255),c
  9994  001654  0EF8               	movlw	248
  9995  001656                     u6677:
  9996  001656  2EE8               	decfsz	wreg,f,c
  9997  001658  D7FE               	bra	u6677
  9998  00165A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9999  00165C  D7FC               	bra	u6677
 10000  00165E  F000 F000          	nop2	
 10001  001662  0012               	return		;funcret
 10002  001664                     __end_of_delay_100ms:
 10003                           	opt stack 0
 10004                           tblptru	equ	0xFF8
 10005                           tblptrh	equ	0xFF7
 10006                           tblptrl	equ	0xFF6
 10007                           tablat	equ	0xFF5
 10008                           prodh	equ	0xFF4
 10009                           prodl	equ	0xFF3
 10010                           intcon	equ	0xFF2
 10011                           intcon2	equ	0xFF1
 10012                           intcon3	equ	0xFF0
 10013                           postinc0	equ	0xFEE
 10014                           wreg	equ	0xFE8
 10015                           indf1	equ	0xFE7
 10016                           postdec1	equ	0xFE5
 10017                           fsr1h	equ	0xFE2
 10018                           fsr1l	equ	0xFE1
 10019                           indf2	equ	0xFDF
 10020                           postinc2	equ	0xFDE
 10021                           postdec2	equ	0xFDD
 10022                           fsr2h	equ	0xFDA
 10023                           fsr2l	equ	0xFD9
 10024                           status	equ	0xFD8
 10025                           
 10026 ;; *************** function _IRQ_Execution *****************
 10027 ;; Defined at:
 10028 ;;		line 40 in file "interrupt.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;  IRQ_Indice      1    wreg     unsigned char 
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
 10033 ;; Return value:  Size  Location     Type
 10034 ;;                  1    wreg      void 
 10035 ;; Registers used:
 10036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10037 ;; Tracked objects:
 10038 ;;		On entry : 3F/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10042 ;;      Params:         0       0       0       0
 10043 ;;      Locals:         1       0       0       0
 10044 ;;      Temps:          0       0       0       0
 10045 ;;      Totals:         1       0       0       0
 10046 ;;Total ram usage:        1 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:   14
 10049 ;; This function calls:
 10050 ;;		_IRQ_ADC
 10051 ;;		_IRQ_CAPOT
 10052 ;;		_IRQ_I_MOTEUR_1
 10053 ;;		_IRQ_I_MOTEUR_2
 10054 ;;		_IRQ_PION_Metal_Apparait
 10055 ;;		_IRQ_PION_Metal_Disparait
 10056 ;;		_IRQ_PWM
 10057 ;;		_IRQ_TIMER2
 10058 ;;		_IRQ_TIMER_0
 10059 ;;		_IRQ_TIMER_5
 10060 ;; This function is called by:
 10061 ;;		_EUSART1_RX_T3_LOCAL
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           	psect	text53
 10066  001BCA                     __ptext53:
 10067                           	opt stack 0
 10068  001BCA                     _IRQ_Execution:
 10069                           	opt stack 12
 10070                           
 10071                           ;incstack = 0
 10072                           ;IRQ_Execution@IRQ_Indice stored from wreg
 10073  001BCA  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
 10074                           
 10075                           ;interrupt.c: 62: break;
 10076                           
 10077                           ;interrupt.c: 60: break;
 10078                           
 10079                           ;interrupt.c: 58: break;
 10080                           
 10081                           ;interrupt.c: 56: break;
 10082                           
 10083                           ;interrupt.c: 54: break;
 10084                           
 10085                           ;interrupt.c: 52: break;
 10086                           
 10087                           ;interrupt.c: 50: break;
 10088                           
 10089                           ;interrupt.c: 48: break;
 10090                           
 10091                           ;interrupt.c: 46: break;
 10092                           
 10093                           ;interrupt.c: 44: break;
 10094                           
 10095                           ;interrupt.c: 41: switch (IRQ_Indice) {
 10096  001BCC  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
 10097                           
 10098                           ; Switch size 1, requested type "speed"
 10099                           ; Number of cases is 10, Range of values is 0 to 9
 10100                           ; switch strategies available:
 10101                           ; Name         Instructions Cycles
 10102                           ; simple_byte           31    16 (average)
 10103                           ;	Chosen strategy is simple_byte
 10104  001BCE  E102 EFD2  F011    	bz	_IRQ_CAPOT
 10105  001BD4  0A01               	xorlw	1	; case 1
 10106  001BD6  E102 EFE2  F010    	bz	_IRQ_I_MOTEUR_1
 10107  001BDC  0A03               	xorlw	3	; case 2
 10108  001BDE  E102 EF05  F011    	bz	_IRQ_I_MOTEUR_2
 10109  001BE4  0A01               	xorlw	1	; case 3
 10110  001BE6  E102 EFCC  F011    	bz	_IRQ_PION_Metal_Apparait
 10111  001BEC  0A07               	xorlw	7	; case 4
 10112  001BEE  E102 EFFB  F011    	bz	_IRQ_PION_Metal_Disparait
 10113  001BF4  0A01               	xorlw	1	; case 5
 10114  001BF6  E102 EF59  F00D    	bz	_IRQ_TIMER_0
 10115  001BFC  0A03               	xorlw	3	; case 6
 10116  001BFE  E102 EFF8  F011    	bz	_IRQ_TIMER2
 10117  001C04  0A01               	xorlw	1	; case 7
 10118  001C06  E102 EFC4  F00C    	bz	_IRQ_TIMER_5
 10119  001C0C  0A0F               	xorlw	15	; case 8
 10120  001C0E  E102 EFEB  F006    	bz	_IRQ_ADC
 10121  001C14  0A01               	xorlw	1	; case 9
 10122  001C16  E102 EF0E  F012    	bz	_IRQ_PWM
 10123  001C1C  0012               	return		;funcret
 10124  001C1E                     __end_of_IRQ_Execution:
 10125                           	opt stack 0
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           intcon	equ	0xFF2
 10133                           intcon2	equ	0xFF1
 10134                           intcon3	equ	0xFF0
 10135                           postinc0	equ	0xFEE
 10136                           wreg	equ	0xFE8
 10137                           indf1	equ	0xFE7
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _IRQ_TIMER_5 *****************
 10149 ;; Defined at:
 10150 ;;		line 415 in file "interrupt.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;		None
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      void 
 10157 ;; Registers used:
 10158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10164 ;;      Params:         0       0       0       0
 10165 ;;      Locals:         0       0       0       0
 10166 ;;      Temps:          0       0       0       0
 10167 ;;      Totals:         0       0       0       0
 10168 ;;Total ram usage:        0 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:   13
 10171 ;; This function calls:
 10172 ;;		_Alarme_On
 10173 ;;		_Buzzer_Etat
 10174 ;;		_Etat_Update
 10175 ;;		_TIMER5_Off
 10176 ;; This function is called by:
 10177 ;;		_IRQ_Execution
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text54
 10182  001988                     __ptext54:
 10183                           	opt stack 0
 10184  001988                     _IRQ_TIMER_5:
 10185                           	opt stack 12
 10186                           
 10187                           ;interrupt.c: 416: PIR3bits.TMR5IF = 0;
 10188                           
 10189                           ;incstack = 0
 10190  001988  90A4               	bcf	4004,0,c	;volatile
 10191                           
 10192                           ;interrupt.c: 419: nb_100ms_Timer_5 += 1;
 10193  00198A  0100               	movlb	0	; () banked
 10194  00198C  2BA3               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 10195                           
 10196                           ; BSR set to: 0
 10197                           ;interrupt.c: 422: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 10198  00198E  51A2               	movf	_nb_100ms_pion& (0+255),w,b
 10199  001990  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10200  001992  E115               	bnz	l7132
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;interrupt.c: 423: if (Mouvement_Startup != 1) {
 10204  001994  044E               	decf	_Mouvement_Startup,w,c
 10205  001996  E001               	bz	l7118
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;interrupt.c: 424: nb_Pion += 1;
 10209  001998  2B9F               	incf	_nb_Pion& (0+255),f,b	;volatile
 10210  00199A                     l7118:
 10211                           
 10212                           ; BSR set to: 0
 10213                           ;interrupt.c: 425: }
 10214                           ;interrupt.c: 428: nb_s_fonctionnement = 0;
 10215  00199A  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;interrupt.c: 432: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 10219  00199C  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 10220  00199E  E003               	bz	l607
 10221                           
 10222                           ; BSR set to: 0
 10223  0019A0  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 10224  0019A2  5D9F               	subwf	_nb_Pion& (0+255),w,b	;volatile
 10225  0019A4  E202               	bc	l7124
 10226  0019A6                     l607:
 10227                           
 10228                           ; BSR set to: 0
 10229  0019A6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 10230  0019A8  0012               	return	
 10231  0019AA                     l7124:
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;interrupt.c: 435: Buzzer_Etat((unsigned char) 0);
 10235  0019AA  0E00               	movlw	0
 10236  0019AC  ECA6  F011         	call	_Buzzer_Etat
 10237                           
 10238                           ;interrupt.c: 436: P4_busy = 0;
 10239  0019B0  0100               	movlb	0	; () banked
 10240  0019B2  6BAA               	clrf	_P4_busy& (0+255),b
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;interrupt.c: 437: TIMER5_Off();
 10244  0019B4  ECE3  F011         	call	_TIMER5_Off	;wreg free
 10245                           
 10246                           ;interrupt.c: 438: Etat_Update(0);
 10247  0019B8  0E00               	movlw	0
 10248  0019BA  EF8C  F010         	goto	_Etat_Update
 10249  0019BE                     l7132:
 10250                           
 10251                           ; BSR set to: 0
 10252  0019BE  51A1               	movf	_nb_100ms_platine& (0+255),w,b
 10253  0019C0  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10254  0019C2  A4D8               	btfss	status,2,c
 10255  0019C4  0012               	return	
 10256                           
 10257                           ; BSR set to: 0
 10258                           ;interrupt.c: 465: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 10259  0019C6  0596               	decf	_moteur_indice& (0+255),w,b	;volatile
 10260  0019C8  E108               	bnz	l610
 10261                           
 10262                           ; BSR set to: 0
 10263  0019CA  B480               	btfsc	3968,2,c	;volatile
 10264  0019CC  D006               	goto	l610
 10265                           
 10266                           ; BSR set to: 0
 10267  0019CE  044E               	decf	_Mouvement_Startup,w,c
 10268  0019D0  E104               	bnz	l610
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;interrupt.c: 466: Alarme_On(6);
 10272  0019D2  0E06               	movlw	6
 10273  0019D4  EC77  F011         	call	_Alarme_On
 10274                           
 10275                           ;interrupt.c: 468: } else {
 10276  0019D8  D004               	goto	l7144
 10277  0019DA                     l610:
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;interrupt.c: 469: P4_busy = 0;
 10281  0019DA  6BAA               	clrf	_P4_busy& (0+255),b
 10282                           
 10283                           ; BSR set to: 0
 10284                           ;interrupt.c: 470: Etat_Update(6);
 10285  0019DC  0E06               	movlw	6
 10286  0019DE  EC8C  F010         	call	_Etat_Update
 10287  0019E2                     l7144:
 10288                           
 10289                           ;interrupt.c: 473: }
 10290                           ;interrupt.c: 475: Buzzer_Etat((unsigned char) 0);
 10291  0019E2  0E00               	movlw	0
 10292  0019E4  ECA6  F011         	call	_Buzzer_Etat
 10293                           
 10294                           ;interrupt.c: 476: TIMER5_Off();
 10295  0019E8  EFE3  F011         	goto	_TIMER5_Off	;wreg free
 10296  0019EC                     __end_of_IRQ_TIMER_5:
 10297                           	opt stack 0
 10298                           tblptru	equ	0xFF8
 10299                           tblptrh	equ	0xFF7
 10300                           tblptrl	equ	0xFF6
 10301                           tablat	equ	0xFF5
 10302                           prodh	equ	0xFF4
 10303                           prodl	equ	0xFF3
 10304                           intcon	equ	0xFF2
 10305                           intcon2	equ	0xFF1
 10306                           intcon3	equ	0xFF0
 10307                           postinc0	equ	0xFEE
 10308                           wreg	equ	0xFE8
 10309                           indf1	equ	0xFE7
 10310                           postdec1	equ	0xFE5
 10311                           fsr1h	equ	0xFE2
 10312                           fsr1l	equ	0xFE1
 10313                           indf2	equ	0xFDF
 10314                           postinc2	equ	0xFDE
 10315                           postdec2	equ	0xFDD
 10316                           fsr2h	equ	0xFDA
 10317                           fsr2l	equ	0xFD9
 10318                           status	equ	0xFD8
 10319                           
 10320 ;; *************** function _TIMER5_Off *****************
 10321 ;; Defined at:
 10322 ;;		line 263 in file "timer.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  1    wreg      void 
 10329 ;; Registers used:
 10330 ;;		None
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10336 ;;      Params:         0       0       0       0
 10337 ;;      Locals:         0       0       0       0
 10338 ;;      Temps:          0       0       0       0
 10339 ;;      Totals:         0       0       0       0
 10340 ;;Total ram usage:        0 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:   10
 10343 ;; This function calls:
 10344 ;;		Nothing
 10345 ;; This function is called by:
 10346 ;;		_IRQ_TIMER_5
 10347 ;; This function uses a non-reentrant model
 10348 ;;
 10349                           
 10350                           	psect	text55
 10351  0023C6                     __ptext55:
 10352                           	opt stack 0
 10353  0023C6                     _TIMER5_Off:
 10354                           	opt stack 14
 10355                           
 10356                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 10357                           
 10358                           ;incstack = 0
 10359  0023C6  90B7               	bcf	4023,0,c	;volatile
 10360                           
 10361                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 10362  0023C8  90A4               	bcf	4004,0,c	;volatile
 10363                           
 10364                           ;timer.c: 268: TMR5L = 0;
 10365  0023CA  6A87               	clrf	3975,c	;volatile
 10366                           
 10367                           ;timer.c: 269: TMR5H = 0;
 10368  0023CC  6A88               	clrf	3976,c	;volatile
 10369  0023CE  0012               	return		;funcret
 10370  0023D0                     __end_of_TIMER5_Off:
 10371                           	opt stack 0
 10372                           tblptru	equ	0xFF8
 10373                           tblptrh	equ	0xFF7
 10374                           tblptrl	equ	0xFF6
 10375                           tablat	equ	0xFF5
 10376                           prodh	equ	0xFF4
 10377                           prodl	equ	0xFF3
 10378                           intcon	equ	0xFF2
 10379                           intcon2	equ	0xFF1
 10380                           intcon3	equ	0xFF0
 10381                           postinc0	equ	0xFEE
 10382                           wreg	equ	0xFE8
 10383                           indf1	equ	0xFE7
 10384                           postdec1	equ	0xFE5
 10385                           fsr1h	equ	0xFE2
 10386                           fsr1l	equ	0xFE1
 10387                           indf2	equ	0xFDF
 10388                           postinc2	equ	0xFDE
 10389                           postdec2	equ	0xFDD
 10390                           fsr2h	equ	0xFDA
 10391                           fsr2l	equ	0xFD9
 10392                           status	equ	0xFD8
 10393                           
 10394 ;; *************** function _Buzzer_Etat *****************
 10395 ;; Defined at:
 10396 ;;		line 29 in file "interrupt.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;  Activation      1    wreg     unsigned char 
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;  Activation      1   14[COMRAM] unsigned char 
 10401 ;; Return value:  Size  Location     Type
 10402 ;;                  1    wreg      void 
 10403 ;; Registers used:
 10404 ;;		wreg, status,2, status,0
 10405 ;; Tracked objects:
 10406 ;;		On entry : 0/2
 10407 ;;		On exit  : 0/0
 10408 ;;		Unchanged: 0/0
 10409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10410 ;;      Params:         0       0       0       0
 10411 ;;      Locals:         1       0       0       0
 10412 ;;      Temps:          0       0       0       0
 10413 ;;      Totals:         1       0       0       0
 10414 ;;Total ram usage:        1 bytes
 10415 ;; Hardware stack levels used:    1
 10416 ;; Hardware stack levels required when called:   10
 10417 ;; This function calls:
 10418 ;;		Nothing
 10419 ;; This function is called by:
 10420 ;;		_Cycle
 10421 ;;		_IRQ_TIMER_5
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           	psect	text56
 10426  00234C                     __ptext56:
 10427                           	opt stack 0
 10428  00234C                     _Buzzer_Etat:
 10429                           	opt stack 14
 10430                           
 10431                           ;incstack = 0
 10432                           ;Buzzer_Etat@Activation stored from wreg
 10433  00234C  6E0F               	movwf	Buzzer_Etat@Activation,c
 10434                           
 10435                           ;interrupt.c: 30: if (Activation == 1) {
 10436  00234E  040F               	decf	Buzzer_Etat@Activation,w,c
 10437  002350  E102               	bnz	l532
 10438                           
 10439                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 10440  002352  8C89               	bsf	3977,6,c	;volatile
 10441                           
 10442                           ;interrupt.c: 33: } else {
 10443  002354  0012               	return	
 10444  002356                     l532:
 10445                           
 10446                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 10447  002356  9C89               	bcf	3977,6,c	;volatile
 10448  002358  0012               	return		;funcret
 10449  00235A                     __end_of_Buzzer_Etat:
 10450                           	opt stack 0
 10451                           tblptru	equ	0xFF8
 10452                           tblptrh	equ	0xFF7
 10453                           tblptrl	equ	0xFF6
 10454                           tablat	equ	0xFF5
 10455                           prodh	equ	0xFF4
 10456                           prodl	equ	0xFF3
 10457                           intcon	equ	0xFF2
 10458                           intcon2	equ	0xFF1
 10459                           intcon3	equ	0xFF0
 10460                           postinc0	equ	0xFEE
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           postdec1	equ	0xFE5
 10464                           fsr1h	equ	0xFE2
 10465                           fsr1l	equ	0xFE1
 10466                           indf2	equ	0xFDF
 10467                           postinc2	equ	0xFDE
 10468                           postdec2	equ	0xFDD
 10469                           fsr2h	equ	0xFDA
 10470                           fsr2l	equ	0xFD9
 10471                           status	equ	0xFD8
 10472                           
 10473 ;; *************** function _IRQ_TIMER_0 *****************
 10474 ;; Defined at:
 10475 ;;		line 367 in file "interrupt.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      void 
 10482 ;; Registers used:
 10483 ;;		wreg, status,2, status,0, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 3F/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10489 ;;      Params:         0       0       0       0
 10490 ;;      Locals:         0       0       0       0
 10491 ;;      Temps:          0       0       0       0
 10492 ;;      Totals:         0       0       0       0
 10493 ;;Total ram usage:        0 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:   11
 10496 ;; This function calls:
 10497 ;;		_Surveillance_Consommation_Moteur_1_Activer
 10498 ;;		_Surveillance_Consommation_Moteur_2_Activer
 10499 ;; This function is called by:
 10500 ;;		_IRQ_Execution
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text57
 10505  001AB2                     __ptext57:
 10506                           	opt stack 0
 10507  001AB2                     _IRQ_TIMER_0:
 10508                           	opt stack 14
 10509                           
 10510                           ;interrupt.c: 368: INTCONbits.TMR0IF = 0;
 10511                           
 10512                           ;incstack = 0
 10513  001AB2  94F2               	bcf	intcon,2,c	;volatile
 10514                           
 10515                           ;interrupt.c: 370: nb_s_fonctionnement += 1;
 10516  001AB4  0100               	movlb	0	; () banked
 10517  001AB6  2BA5               	incf	_nb_s_fonctionnement& (0+255),f,b	;volatile
 10518                           
 10519                           ;interrupt.c: 371: Capteur_Capot_Compteur_Temps_S += 1;
 10520  001AB8  2B9B               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 10521                           
 10522                           ;interrupt.c: 372: delay_s_counter += 1;
 10523  001ABA  2B8A               	incf	_delay_s_counter& (0+255),f,b	;volatile
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;interrupt.c: 377: if (nb_s_fonctionnement == 2) {
 10527  001ABC  0E02               	movlw	2
 10528  001ABE  19A5               	xorwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
 10529  001AC0  E01F               	bz	l7104
 10530  001AC2  0012               	return	
 10531  001AC4                     l7084:
 10532                           
 10533                           ; BSR set to: 0
 10534                           ;interrupt.c: 385: Surveillance_Consommation_Moteur_1_Activer();
 10535  001AC4  EC6F  F011         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 10536                           
 10537                           ;interrupt.c: 386: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10538  001AC8  0100               	movlb	0	; () banked
 10539  001ACA  5193               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10540  001ACC  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10541  001ACE  E203               	bc	l588
 10542  001AD0                     l7088:
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;interrupt.c: 387: consigne = Consigne_Max;
 10546  001AD0  C094  F095         	movff	_Consigne_Max,_consigne	;volatile
 10547                           
 10548                           ;interrupt.c: 388: } else {
 10549  001AD4  0012               	return	
 10550  001AD6                     l588:
 10551                           
 10552                           ; BSR set to: 0
 10553                           ;interrupt.c: 389: consigne = Consigne_Max_Moteur_X;
 10554  001AD6  C093  F095         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10555  001ADA  0012               	return	
 10556  001ADC                     l7090:
 10557                           
 10558                           ; BSR set to: 0
 10559                           ;interrupt.c: 393: Surveillance_Consommation_Moteur_2_Activer();
 10560  001ADC  EC67  F011         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10561                           
 10562                           ;interrupt.c: 395: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10563  001AE0  0100               	movlb	0	; () banked
 10564  001AE2  5192               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10565  001AE4  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10566  001AE6  E3F4               	bnc	l7088
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;interrupt.c: 398: consigne = Consigne_Max_Moteur_Z;
 10570  001AE8  C092  F095         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10571  001AEC  0012               	return	
 10572  001AEE                     l7096:
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;interrupt.c: 402: Surveillance_Consommation_Moteur_2_Activer();
 10576  001AEE  EC67  F011         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10577                           
 10578                           ;interrupt.c: 403: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10579  001AF2  0100               	movlb	0	; () banked
 10580  001AF4  5191               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10581  001AF6  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10582  001AF8  E3EB               	bnc	l7088
 10583                           
 10584                           ; BSR set to: 0
 10585                           ;interrupt.c: 406: consigne = Consigne_Max_Moteur_Bequille;
 10586  001AFA  C091  F095         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10587  001AFE  0012               	return	
 10588  001B00                     l7104:
 10589                           
 10590                           ; BSR set to: 0
 10591  001B00  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 10592                           
 10593                           ; Switch size 1, requested type "speed"
 10594                           ; Number of cases is 3, Range of values is 1 to 3
 10595                           ; switch strategies available:
 10596                           ; Name         Instructions Cycles
 10597                           ; simple_byte           10     6 (average)
 10598                           ;	Chosen strategy is simple_byte
 10599  001B02  0A01               	xorlw	1	; case 1
 10600  001B04  E0DF               	bz	l7084
 10601  001B06  0A03               	xorlw	3	; case 2
 10602  001B08  E0E9               	bz	l7090
 10603  001B0A  0A01               	xorlw	1	; case 3
 10604  001B0C  E0F0               	bz	l7096
 10605                           
 10606                           ; BSR set to: 0
 10607  001B0E  0012               	return		;funcret
 10608  001B10                     __end_of_IRQ_TIMER_0:
 10609                           	opt stack 0
 10610                           tblptru	equ	0xFF8
 10611                           tblptrh	equ	0xFF7
 10612                           tblptrl	equ	0xFF6
 10613                           tablat	equ	0xFF5
 10614                           prodh	equ	0xFF4
 10615                           prodl	equ	0xFF3
 10616                           intcon	equ	0xFF2
 10617                           intcon2	equ	0xFF1
 10618                           intcon3	equ	0xFF0
 10619                           postinc0	equ	0xFEE
 10620                           wreg	equ	0xFE8
 10621                           indf1	equ	0xFE7
 10622                           postdec1	equ	0xFE5
 10623                           fsr1h	equ	0xFE2
 10624                           fsr1l	equ	0xFE1
 10625                           indf2	equ	0xFDF
 10626                           postinc2	equ	0xFDE
 10627                           postdec2	equ	0xFDD
 10628                           fsr2h	equ	0xFDA
 10629                           fsr2l	equ	0xFD9
 10630                           status	equ	0xFD8
 10631                           
 10632 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 10633 ;; Defined at:
 10634 ;;		line 880 in file "interrupt.c"
 10635 ;; Parameters:    Size  Location     Type
 10636 ;;		None
 10637 ;; Auto vars:     Size  Location     Type
 10638 ;;		None
 10639 ;; Return value:  Size  Location     Type
 10640 ;;                  1    wreg      void 
 10641 ;; Registers used:
 10642 ;;		wreg, status,2, status,0
 10643 ;; Tracked objects:
 10644 ;;		On entry : 0/0
 10645 ;;		On exit  : 0/0
 10646 ;;		Unchanged: 0/0
 10647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10648 ;;      Params:         0       0       0       0
 10649 ;;      Locals:         0       0       0       0
 10650 ;;      Temps:          0       0       0       0
 10651 ;;      Totals:         0       0       0       0
 10652 ;;Total ram usage:        0 bytes
 10653 ;; Hardware stack levels used:    1
 10654 ;; Hardware stack levels required when called:   10
 10655 ;; This function calls:
 10656 ;;		Nothing
 10657 ;; This function is called by:
 10658 ;;		_IRQ_TIMER_0
 10659 ;; This function uses a non-reentrant model
 10660 ;;
 10661                           
 10662                           	psect	text58
 10663  0022CE                     __ptext58:
 10664                           	opt stack 0
 10665  0022CE                     _Surveillance_Consommation_Moteur_2_Activer:
 10666                           	opt stack 14
 10667                           
 10668                           ;interrupt.c: 881: if (Surveillance_Consommation_Moteur_2 != 1) {
 10669                           
 10670                           ; BSR set to: 0
 10671                           ;incstack = 0
 10672  0022CE  0448               	decf	_Surveillance_Consommation_Moteur_2,w,c
 10673  0022D0  B4D8               	btfsc	status,2,c
 10674  0022D2  0012               	return	
 10675                           
 10676                           ;interrupt.c: 882: Surveillance_Consommation_Moteur_2 = 1;
 10677  0022D4  0E01               	movlw	1
 10678  0022D6  6E48               	movwf	_Surveillance_Consommation_Moteur_2,c
 10679                           
 10680                           ;interrupt.c: 883: INTCON3bits.INT2IF = 0;
 10681  0022D8  92F0               	bcf	intcon3,1,c	;volatile
 10682                           
 10683                           ;interrupt.c: 884: INTCON3bits.INT2IE = 1;
 10684  0022DA  88F0               	bsf	intcon3,4,c	;volatile
 10685  0022DC  0C01               	retlw	1	;funcret
 10686  0022DE                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 10687                           	opt stack 0
 10688                           tblptru	equ	0xFF8
 10689                           tblptrh	equ	0xFF7
 10690                           tblptrl	equ	0xFF6
 10691                           tablat	equ	0xFF5
 10692                           prodh	equ	0xFF4
 10693                           prodl	equ	0xFF3
 10694                           intcon	equ	0xFF2
 10695                           intcon2	equ	0xFF1
 10696                           intcon3	equ	0xFF0
 10697                           postinc0	equ	0xFEE
 10698                           wreg	equ	0xFE8
 10699                           indf1	equ	0xFE7
 10700                           postdec1	equ	0xFE5
 10701                           fsr1h	equ	0xFE2
 10702                           fsr1l	equ	0xFE1
 10703                           indf2	equ	0xFDF
 10704                           postinc2	equ	0xFDE
 10705                           postdec2	equ	0xFDD
 10706                           fsr2h	equ	0xFDA
 10707                           fsr2l	equ	0xFD9
 10708                           status	equ	0xFD8
 10709                           
 10710 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 10711 ;; Defined at:
 10712 ;;		line 864 in file "interrupt.c"
 10713 ;; Parameters:    Size  Location     Type
 10714 ;;		None
 10715 ;; Auto vars:     Size  Location     Type
 10716 ;;		None
 10717 ;; Return value:  Size  Location     Type
 10718 ;;                  1    wreg      void 
 10719 ;; Registers used:
 10720 ;;		wreg, status,2, status,0
 10721 ;; Tracked objects:
 10722 ;;		On entry : 0/0
 10723 ;;		On exit  : 0/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10726 ;;      Params:         0       0       0       0
 10727 ;;      Locals:         0       0       0       0
 10728 ;;      Temps:          0       0       0       0
 10729 ;;      Totals:         0       0       0       0
 10730 ;;Total ram usage:        0 bytes
 10731 ;; Hardware stack levels used:    1
 10732 ;; Hardware stack levels required when called:   10
 10733 ;; This function calls:
 10734 ;;		Nothing
 10735 ;; This function is called by:
 10736 ;;		_IRQ_TIMER_0
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           	psect	text59
 10741  0022DE                     __ptext59:
 10742                           	opt stack 0
 10743  0022DE                     _Surveillance_Consommation_Moteur_1_Activer:
 10744                           	opt stack 14
 10745                           
 10746                           ;interrupt.c: 865: if (Surveillance_Consommation_Moteur_1 != 1) {
 10747                           
 10748                           ;incstack = 0
 10749  0022DE  0449               	decf	_Surveillance_Consommation_Moteur_1,w,c
 10750  0022E0  B4D8               	btfsc	status,2,c
 10751  0022E2  0012               	return	
 10752                           
 10753                           ;interrupt.c: 866: Surveillance_Consommation_Moteur_1 = 1;
 10754  0022E4  0E01               	movlw	1
 10755  0022E6  6E49               	movwf	_Surveillance_Consommation_Moteur_1,c
 10756                           
 10757                           ;interrupt.c: 867: INTCON3bits.INT1IF = 0;
 10758  0022E8  90F0               	bcf	intcon3,0,c	;volatile
 10759                           
 10760                           ;interrupt.c: 868: INTCON3bits.INT1IE = 1;
 10761  0022EA  86F0               	bsf	intcon3,3,c	;volatile
 10762  0022EC  0C01               	retlw	1	;funcret
 10763  0022EE                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 10764                           	opt stack 0
 10765                           tblptru	equ	0xFF8
 10766                           tblptrh	equ	0xFF7
 10767                           tblptrl	equ	0xFF6
 10768                           tablat	equ	0xFF5
 10769                           prodh	equ	0xFF4
 10770                           prodl	equ	0xFF3
 10771                           intcon	equ	0xFF2
 10772                           intcon2	equ	0xFF1
 10773                           intcon3	equ	0xFF0
 10774                           postinc0	equ	0xFEE
 10775                           wreg	equ	0xFE8
 10776                           indf1	equ	0xFE7
 10777                           postdec1	equ	0xFE5
 10778                           fsr1h	equ	0xFE2
 10779                           fsr1l	equ	0xFE1
 10780                           indf2	equ	0xFDF
 10781                           postinc2	equ	0xFDE
 10782                           postdec2	equ	0xFDD
 10783                           fsr2h	equ	0xFDA
 10784                           fsr2l	equ	0xFD9
 10785                           status	equ	0xFD8
 10786                           
 10787 ;; *************** function _IRQ_TIMER2 *****************
 10788 ;; Defined at:
 10789 ;;		line 895 in file "interrupt.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;		None
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		None
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/0
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10803 ;;      Params:         0       0       0       0
 10804 ;;      Locals:         0       0       0       0
 10805 ;;      Temps:          0       0       0       0
 10806 ;;      Totals:         0       0       0       0
 10807 ;;Total ram usage:        0 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:   10
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_IRQ_Execution
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text60
 10818  0023F0                     __ptext60:
 10819                           	opt stack 0
 10820  0023F0                     _IRQ_TIMER2:
 10821                           	opt stack 15
 10822                           
 10823                           ;interrupt.c: 896: PIR1bits.TMR2IF = 0;
 10824                           
 10825                           ;incstack = 0
 10826  0023F0  929E               	bcf	3998,1,c	;volatile
 10827                           
 10828                           ;interrupt.c: 899: GODONE = 1;
 10829  0023F2  82C2               	bsf	4034,1,c	;volatile
 10830  0023F4  0012               	return		;funcret
 10831  0023F6                     __end_of_IRQ_TIMER2:
 10832                           	opt stack 0
 10833                           tblptru	equ	0xFF8
 10834                           tblptrh	equ	0xFF7
 10835                           tblptrl	equ	0xFF6
 10836                           tablat	equ	0xFF5
 10837                           prodh	equ	0xFF4
 10838                           prodl	equ	0xFF3
 10839                           intcon	equ	0xFF2
 10840                           intcon2	equ	0xFF1
 10841                           intcon3	equ	0xFF0
 10842                           postinc0	equ	0xFEE
 10843                           wreg	equ	0xFE8
 10844                           indf1	equ	0xFE7
 10845                           postdec1	equ	0xFE5
 10846                           fsr1h	equ	0xFE2
 10847                           fsr1l	equ	0xFE1
 10848                           indf2	equ	0xFDF
 10849                           postinc2	equ	0xFDE
 10850                           postdec2	equ	0xFDD
 10851                           fsr2h	equ	0xFDA
 10852                           fsr2l	equ	0xFD9
 10853                           status	equ	0xFD8
 10854                           
 10855 ;; *************** function _IRQ_PWM *****************
 10856 ;; Defined at:
 10857 ;;		line 483 in file "interrupt.c"
 10858 ;; Parameters:    Size  Location     Type
 10859 ;;		None
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;		None
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  1    wreg      void 
 10864 ;; Registers used:
 10865 ;;		None
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10871 ;;      Params:         0       0       0       0
 10872 ;;      Locals:         0       0       0       0
 10873 ;;      Temps:          0       0       0       0
 10874 ;;      Totals:         0       0       0       0
 10875 ;;Total ram usage:        0 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:   10
 10878 ;; This function calls:
 10879 ;;		Nothing
 10880 ;; This function is called by:
 10881 ;;		_IRQ_Execution
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text61
 10886  00241C                     __ptext61:
 10887                           	opt stack 0
 10888  00241C                     _IRQ_PWM:
 10889                           	opt stack 15
 10890                           
 10891                           ;interrupt.c: 485: PTIF = 0;
 10892                           
 10893                           ;incstack = 0
 10894  00241C  98A4               	bcf	4004,4,c	;volatile
 10895  00241E  0012               	return		;funcret
 10896  002420                     __end_of_IRQ_PWM:
 10897                           	opt stack 0
 10898                           tblptru	equ	0xFF8
 10899                           tblptrh	equ	0xFF7
 10900                           tblptrl	equ	0xFF6
 10901                           tablat	equ	0xFF5
 10902                           prodh	equ	0xFF4
 10903                           prodl	equ	0xFF3
 10904                           intcon	equ	0xFF2
 10905                           intcon2	equ	0xFF1
 10906                           intcon3	equ	0xFF0
 10907                           postinc0	equ	0xFEE
 10908                           wreg	equ	0xFE8
 10909                           indf1	equ	0xFE7
 10910                           postdec1	equ	0xFE5
 10911                           fsr1h	equ	0xFE2
 10912                           fsr1l	equ	0xFE1
 10913                           indf2	equ	0xFDF
 10914                           postinc2	equ	0xFDE
 10915                           postdec2	equ	0xFDD
 10916                           fsr2h	equ	0xFDA
 10917                           fsr2l	equ	0xFD9
 10918                           status	equ	0xFD8
 10919                           
 10920 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 10921 ;; Defined at:
 10922 ;;		line 293 in file "interrupt.c"
 10923 ;; Parameters:    Size  Location     Type
 10924 ;;		None
 10925 ;; Auto vars:     Size  Location     Type
 10926 ;;		None
 10927 ;; Return value:  Size  Location     Type
 10928 ;;                  1    wreg      void 
 10929 ;; Registers used:
 10930 ;;		None
 10931 ;; Tracked objects:
 10932 ;;		On entry : 0/0
 10933 ;;		On exit  : 0/0
 10934 ;;		Unchanged: 0/0
 10935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10936 ;;      Params:         0       0       0       0
 10937 ;;      Locals:         0       0       0       0
 10938 ;;      Temps:          0       0       0       0
 10939 ;;      Totals:         0       0       0       0
 10940 ;;Total ram usage:        0 bytes
 10941 ;; Hardware stack levels used:    1
 10942 ;; Hardware stack levels required when called:   10
 10943 ;; This function calls:
 10944 ;;		Nothing
 10945 ;; This function is called by:
 10946 ;;		_IRQ_Execution
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	text62
 10951  0023F6                     __ptext62:
 10952                           	opt stack 0
 10953  0023F6                     _IRQ_PION_Metal_Disparait:
 10954                           	opt stack 15
 10955                           
 10956                           ;interrupt.c: 296: PIE3bits.IC2QEIE = 0;
 10957                           
 10958                           ;incstack = 0
 10959  0023F6  94A3               	bcf	4003,2,c	;volatile
 10960                           
 10961                           ;interrupt.c: 297: PIR3bits.IC2QEIF = 0;
 10962  0023F8  94A4               	bcf	4004,2,c	;volatile
 10963  0023FA  0012               	return		;funcret
 10964  0023FC                     __end_of_IRQ_PION_Metal_Disparait:
 10965                           	opt stack 0
 10966                           tblptru	equ	0xFF8
 10967                           tblptrh	equ	0xFF7
 10968                           tblptrl	equ	0xFF6
 10969                           tablat	equ	0xFF5
 10970                           prodh	equ	0xFF4
 10971                           prodl	equ	0xFF3
 10972                           intcon	equ	0xFF2
 10973                           intcon2	equ	0xFF1
 10974                           intcon3	equ	0xFF0
 10975                           postinc0	equ	0xFEE
 10976                           wreg	equ	0xFE8
 10977                           indf1	equ	0xFE7
 10978                           postdec1	equ	0xFE5
 10979                           fsr1h	equ	0xFE2
 10980                           fsr1l	equ	0xFE1
 10981                           indf2	equ	0xFDF
 10982                           postinc2	equ	0xFDE
 10983                           postdec2	equ	0xFDD
 10984                           fsr2h	equ	0xFDA
 10985                           fsr2l	equ	0xFD9
 10986                           status	equ	0xFD8
 10987                           
 10988 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 10989 ;; Defined at:
 10990 ;;		line 268 in file "interrupt.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;		None
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;		None
 10995 ;; Return value:  Size  Location     Type
 10996 ;;                  1    wreg      void 
 10997 ;; Registers used:
 10998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10999 ;; Tracked objects:
 11000 ;;		On entry : 0/0
 11001 ;;		On exit  : 0/0
 11002 ;;		Unchanged: 0/0
 11003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11004 ;;      Params:         0       0       0       0
 11005 ;;      Locals:         0       0       0       0
 11006 ;;      Temps:          0       0       0       0
 11007 ;;      Totals:         0       0       0       0
 11008 ;;Total ram usage:        0 bytes
 11009 ;; Hardware stack levels used:    1
 11010 ;; Hardware stack levels required when called:   11
 11011 ;; This function calls:
 11012 ;;		_Etat_Update
 11013 ;; This function is called by:
 11014 ;;		_IRQ_Execution
 11015 ;;		_Detection_Pion_On
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           	psect	text63
 11020  002398                     __ptext63:
 11021                           	opt stack 0
 11022  002398                     _IRQ_PION_Metal_Apparait:
 11023                           	opt stack 14
 11024                           
 11025                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 11026                           
 11027                           ;incstack = 0
 11028  002398  92A4               	bcf	4004,1,c	;volatile
 11029                           
 11030                           ;interrupt.c: 273: if(PORTCbits.RC3==0){
 11031  00239A  B682               	btfsc	3970,3,c	;volatile
 11032  00239C  0012               	return	
 11033                           
 11034                           ;interrupt.c: 274: Etat_Update(3);
 11035  00239E  0E03               	movlw	3
 11036  0023A0  EF8C  F010         	goto	_Etat_Update
 11037  0023A4                     __end_of_IRQ_PION_Metal_Apparait:
 11038                           	opt stack 0
 11039                           tblptru	equ	0xFF8
 11040                           tblptrh	equ	0xFF7
 11041                           tblptrl	equ	0xFF6
 11042                           tablat	equ	0xFF5
 11043                           prodh	equ	0xFF4
 11044                           prodl	equ	0xFF3
 11045                           intcon	equ	0xFF2
 11046                           intcon2	equ	0xFF1
 11047                           intcon3	equ	0xFF0
 11048                           postinc0	equ	0xFEE
 11049                           wreg	equ	0xFE8
 11050                           indf1	equ	0xFE7
 11051                           postdec1	equ	0xFE5
 11052                           fsr1h	equ	0xFE2
 11053                           fsr1l	equ	0xFE1
 11054                           indf2	equ	0xFDF
 11055                           postinc2	equ	0xFDE
 11056                           postdec2	equ	0xFDD
 11057                           fsr2h	equ	0xFDA
 11058                           fsr2l	equ	0xFD9
 11059                           status	equ	0xFD8
 11060                           
 11061 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 11062 ;; Defined at:
 11063 ;;		line 924 in file "interrupt.c"
 11064 ;; Parameters:    Size  Location     Type
 11065 ;;		None
 11066 ;; Auto vars:     Size  Location     Type
 11067 ;;		None
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  1    wreg      void 
 11070 ;; Registers used:
 11071 ;;		wreg, status,2, status,0
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11077 ;;      Params:         0       0       0       0
 11078 ;;      Locals:         0       0       0       0
 11079 ;;      Temps:          0       0       0       0
 11080 ;;      Totals:         0       0       0       0
 11081 ;;Total ram usage:        0 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:   10
 11084 ;; This function calls:
 11085 ;;		Nothing
 11086 ;; This function is called by:
 11087 ;;		_IRQ_Execution
 11088 ;; This function uses a non-reentrant model
 11089 ;;
 11090                           
 11091                           	psect	text64
 11092  00220A                     __ptext64:
 11093                           	opt stack 0
 11094  00220A                     _IRQ_I_MOTEUR_2:
 11095                           	opt stack 15
 11096                           
 11097                           ;interrupt.c: 929: LATCbits.LATC1 = 0;
 11098                           
 11099                           ;incstack = 0
 11100  00220A  928B               	bcf	3979,1,c	;volatile
 11101                           
 11102                           ;interrupt.c: 931: while(TMR2 > 0) __nop();
 11103  00220C  D001               	goto	l7064
 11104  00220E                     l699:
 11105  00220E  F000               	nop	
 11106  002210                     l7064:
 11107  002210  50CC               	movf	4044,w,c	;volatile
 11108  002212  E1FD               	bnz	l699
 11109                           
 11110                           ;interrupt.c: 933: LATCbits.LATC1 = 1;
 11111  002214  828B               	bsf	3979,1,c	;volatile
 11112                           
 11113                           ;interrupt.c: 947: LATCbits.LATC2^=1;
 11114  002216  748B               	btg	3979,2,c	;volatile
 11115                           
 11116                           ;interrupt.c: 948: INTCON3bits.INT2IF = 0;
 11117  002218  92F0               	bcf	intcon3,1,c	;volatile
 11118                           
 11119                           ;interrupt.c: 952: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 11120  00221A  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 11121  00221C  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 11122  00221E  0012               	return		;funcret
 11123  002220                     __end_of_IRQ_I_MOTEUR_2:
 11124                           	opt stack 0
 11125                           tblptru	equ	0xFF8
 11126                           tblptrh	equ	0xFF7
 11127                           tblptrl	equ	0xFF6
 11128                           tablat	equ	0xFF5
 11129                           prodh	equ	0xFF4
 11130                           prodl	equ	0xFF3
 11131                           intcon	equ	0xFF2
 11132                           intcon2	equ	0xFF1
 11133                           intcon3	equ	0xFF0
 11134                           postinc0	equ	0xFEE
 11135                           wreg	equ	0xFE8
 11136                           indf1	equ	0xFE7
 11137                           postdec1	equ	0xFE5
 11138                           fsr1h	equ	0xFE2
 11139                           fsr1l	equ	0xFE1
 11140                           indf2	equ	0xFDF
 11141                           postinc2	equ	0xFDE
 11142                           postdec2	equ	0xFDD
 11143                           fsr2h	equ	0xFDA
 11144                           fsr2l	equ	0xFD9
 11145                           status	equ	0xFD8
 11146                           
 11147 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 11148 ;; Defined at:
 11149 ;;		line 910 in file "interrupt.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;		None
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  1    wreg      void 
 11156 ;; Registers used:
 11157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11163 ;;      Params:         0       0       0       0
 11164 ;;      Locals:         0       0       0       0
 11165 ;;      Temps:          0       0       0       0
 11166 ;;      Totals:         0       0       0       0
 11167 ;;Total ram usage:        0 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:   13
 11170 ;; This function calls:
 11171 ;;		_Alarme_On
 11172 ;; This function is called by:
 11173 ;;		_IRQ_Execution
 11174 ;; This function uses a non-reentrant model
 11175 ;;
 11176                           
 11177                           	psect	text65
 11178  0021C4                     __ptext65:
 11179                           	opt stack 0
 11180  0021C4                     _IRQ_I_MOTEUR_1:
 11181                           	opt stack 12
 11182                           
 11183                           ;interrupt.c: 911: INTCON3bits.INT1IF = 0;
 11184                           
 11185                           ;incstack = 0
 11186  0021C4  90F0               	bcf	intcon3,0,c	;volatile
 11187                           
 11188                           ;interrupt.c: 912: Compteur_IRQ_I_Moteur_1 += 1;
 11189  0021C6  0100               	movlb	0	; () banked
 11190  0021C8  2B89               	incf	_Compteur_IRQ_I_Moteur_1& (0+255),f,b	;volatile
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;interrupt.c: 913: if (Compteur_IRQ_I_Moteur_1 == 0) {
 11194  0021CA  5189               	movf	_Compteur_IRQ_I_Moteur_1& (0+255),w,b	;volatile
 11195  0021CC  A4D8               	btfss	status,2,c
 11196  0021CE  0012               	return	
 11197                           
 11198                           ; BSR set to: 0
 11199                           ;interrupt.c: 914: LATCbits.LATC2 = 1;
 11200  0021D0  848B               	bsf	3979,2,c	;volatile
 11201                           
 11202                           ;interrupt.c: 916: LATCbits.LATC0 = 0;
 11203  0021D2  908B               	bcf	3979,0,c	;volatile
 11204                           
 11205                           ;interrupt.c: 917: LATCbits.LATC1 = 0;
 11206  0021D4  928B               	bcf	3979,1,c	;volatile
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;interrupt.c: 919: Alarme_On(1);
 11210  0021D6  0E01               	movlw	1
 11211  0021D8  EF77  F011         	goto	_Alarme_On
 11212  0021DC                     __end_of_IRQ_I_MOTEUR_1:
 11213                           	opt stack 0
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           intcon2	equ	0xFF1
 11222                           intcon3	equ	0xFF0
 11223                           postinc0	equ	0xFEE
 11224                           wreg	equ	0xFE8
 11225                           indf1	equ	0xFE7
 11226                           postdec1	equ	0xFE5
 11227                           fsr1h	equ	0xFE2
 11228                           fsr1l	equ	0xFE1
 11229                           indf2	equ	0xFDF
 11230                           postinc2	equ	0xFDE
 11231                           postdec2	equ	0xFDD
 11232                           fsr2h	equ	0xFDA
 11233                           fsr2l	equ	0xFD9
 11234                           status	equ	0xFD8
 11235                           
 11236 ;; *************** function _Alarme_On *****************
 11237 ;; Defined at:
 11238 ;;		line 18 in file "alarme.c"
 11239 ;; Parameters:    Size  Location     Type
 11240 ;;  alarme_new_v    1    wreg     unsigned char 
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11243 ;; Return value:  Size  Location     Type
 11244 ;;                  1    wreg      void 
 11245 ;; Registers used:
 11246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11247 ;; Tracked objects:
 11248 ;;		On entry : 0/0
 11249 ;;		On exit  : 0/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11252 ;;      Params:         0       0       0       0
 11253 ;;      Locals:         1       0       0       0
 11254 ;;      Temps:          0       0       0       0
 11255 ;;      Totals:         1       0       0       0
 11256 ;;Total ram usage:        1 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; Hardware stack levels required when called:   12
 11259 ;; This function calls:
 11260 ;;		_Coupe_Moteur
 11261 ;;		_Etat_Update
 11262 ;; This function is called by:
 11263 ;;		_IRQ_TIMER_5
 11264 ;;		_IRQ_I_MOTEUR_1
 11265 ;;		_Check_List_Moteur_1
 11266 ;;		_EUSART1_RX_T3_LOCAL
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           	psect	text66
 11271  0022EE                     __ptext66:
 11272                           	opt stack 0
 11273  0022EE                     _Alarme_On:
 11274                           	opt stack 12
 11275                           
 11276                           ;incstack = 0
 11277                           ;Alarme_On@alarme_new_value stored from wreg
 11278  0022EE  6E10               	movwf	Alarme_On@alarme_new_value,c
 11279                           
 11280                           ;alarme.c: 22: Etat_Update(1);
 11281  0022F0  0E01               	movlw	1
 11282  0022F2  EC8C  F010         	call	_Etat_Update
 11283                           
 11284                           ;alarme.c: 23: Alarme = alarme_new_value;
 11285  0022F6  C010  F0A7         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 11286                           
 11287                           ;alarme.c: 24: Coupe_Moteur();
 11288  0022FA  EF10  F011         	goto	_Coupe_Moteur	;wreg free
 11289  0022FE                     __end_of_Alarme_On:
 11290                           	opt stack 0
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           intcon	equ	0xFF2
 11298                           intcon2	equ	0xFF1
 11299                           intcon3	equ	0xFF0
 11300                           postinc0	equ	0xFEE
 11301                           wreg	equ	0xFE8
 11302                           indf1	equ	0xFE7
 11303                           postdec1	equ	0xFE5
 11304                           fsr1h	equ	0xFE2
 11305                           fsr1l	equ	0xFE1
 11306                           indf2	equ	0xFDF
 11307                           postinc2	equ	0xFDE
 11308                           postdec2	equ	0xFDD
 11309                           fsr2h	equ	0xFDA
 11310                           fsr2l	equ	0xFD9
 11311                           status	equ	0xFD8
 11312                           
 11313 ;; *************** function _Coupe_Moteur *****************
 11314 ;; Defined at:
 11315 ;;		line 277 in file "action.c"
 11316 ;; Parameters:    Size  Location     Type
 11317 ;;		None
 11318 ;; Auto vars:     Size  Location     Type
 11319 ;;		None
 11320 ;; Return value:  Size  Location     Type
 11321 ;;                  1    wreg      void 
 11322 ;; Registers used:
 11323 ;;		cstack
 11324 ;; Tracked objects:
 11325 ;;		On entry : 0/2
 11326 ;;		On exit  : 0/0
 11327 ;;		Unchanged: 0/0
 11328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11329 ;;      Params:         0       0       0       0
 11330 ;;      Locals:         0       0       0       0
 11331 ;;      Temps:          0       0       0       0
 11332 ;;      Totals:         0       0       0       0
 11333 ;;Total ram usage:        0 bytes
 11334 ;; Hardware stack levels used:    1
 11335 ;; Hardware stack levels required when called:   11
 11336 ;; This function calls:
 11337 ;;		_TIMER2_Off
 11338 ;; This function is called by:
 11339 ;;		_Mouvement_Bequille
 11340 ;;		_Mouvement_Z
 11341 ;;		_Mouvement_X
 11342 ;;		_Mouvement_X_Metalhome
 11343 ;;		_EUSART1_RX_T3_LOCAL
 11344 ;;		_Alarme_On
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           	psect	text67
 11349  002220                     __ptext67:
 11350                           	opt stack 0
 11351  002220                     _Coupe_Moteur:
 11352                           	opt stack 12
 11353                           
 11354                           ;action.c: 278: TIMER2_Off();
 11355                           
 11356                           ;incstack = 0
 11357  002220  ECFE  F011         	call	_TIMER2_Off	;wreg free
 11358                           
 11359                           ;action.c: 283: LATEbits.LATE2 = 0;
 11360  002224  948D               	bcf	3981,2,c	;volatile
 11361                           
 11362                           ;action.c: 290: LATCbits.LATC0 = 0;
 11363  002226  908B               	bcf	3979,0,c	;volatile
 11364                           
 11365                           ;action.c: 291: LATCbits.LATC1 = 0;
 11366  002228  928B               	bcf	3979,1,c	;volatile
 11367                           
 11368                           ;action.c: 292: OVDCOND = 0b00000000;
 11369  00222A  6A6B               	clrf	3947,c	;volatile
 11370                           
 11371                           ;action.c: 293: LATD4 = 0;LATD5 = 0;
 11372  00222C  988C               	bcf	3980,4,c	;volatile
 11373  00222E  9A8C               	bcf	3980,5,c	;volatile
 11374                           
 11375                           ;action.c: 294: LATD6 = 0;LATD7 = 0;
 11376  002230  9C8C               	bcf	3980,6,c	;volatile
 11377  002232  9E8C               	bcf	3980,7,c	;volatile
 11378  002234  0012               	return		;funcret
 11379  002236                     __end_of_Coupe_Moteur:
 11380                           	opt stack 0
 11381                           tblptru	equ	0xFF8
 11382                           tblptrh	equ	0xFF7
 11383                           tblptrl	equ	0xFF6
 11384                           tablat	equ	0xFF5
 11385                           prodh	equ	0xFF4
 11386                           prodl	equ	0xFF3
 11387                           intcon	equ	0xFF2
 11388                           intcon2	equ	0xFF1
 11389                           intcon3	equ	0xFF0
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           indf1	equ	0xFE7
 11393                           postdec1	equ	0xFE5
 11394                           fsr1h	equ	0xFE2
 11395                           fsr1l	equ	0xFE1
 11396                           indf2	equ	0xFDF
 11397                           postinc2	equ	0xFDE
 11398                           postdec2	equ	0xFDD
 11399                           fsr2h	equ	0xFDA
 11400                           fsr2l	equ	0xFD9
 11401                           status	equ	0xFD8
 11402                           
 11403 ;; *************** function _TIMER2_Off *****************
 11404 ;; Defined at:
 11405 ;;		line 165 in file "timer.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;		None
 11408 ;; Auto vars:     Size  Location     Type
 11409 ;;		None
 11410 ;; Return value:  Size  Location     Type
 11411 ;;                  1    wreg      void 
 11412 ;; Registers used:
 11413 ;;		None
 11414 ;; Tracked objects:
 11415 ;;		On entry : 0/2
 11416 ;;		On exit  : 0/0
 11417 ;;		Unchanged: 0/0
 11418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11419 ;;      Params:         0       0       0       0
 11420 ;;      Locals:         0       0       0       0
 11421 ;;      Temps:          0       0       0       0
 11422 ;;      Totals:         0       0       0       0
 11423 ;;Total ram usage:        0 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:   10
 11426 ;; This function calls:
 11427 ;;		Nothing
 11428 ;; This function is called by:
 11429 ;;		_Coupe_Moteur
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           	psect	text68
 11434  0023FC                     __ptext68:
 11435                           	opt stack 0
 11436  0023FC                     _TIMER2_Off:
 11437                           	opt stack 12
 11438                           
 11439                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 11440                           
 11441                           ;incstack = 0
 11442  0023FC  929D               	bcf	3997,1,c	;volatile
 11443                           
 11444                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 11445  0023FE  929E               	bcf	3998,1,c	;volatile
 11446  002400  0012               	return		;funcret
 11447  002402                     __end_of_TIMER2_Off:
 11448                           	opt stack 0
 11449                           tblptru	equ	0xFF8
 11450                           tblptrh	equ	0xFF7
 11451                           tblptrl	equ	0xFF6
 11452                           tablat	equ	0xFF5
 11453                           prodh	equ	0xFF4
 11454                           prodl	equ	0xFF3
 11455                           intcon	equ	0xFF2
 11456                           intcon2	equ	0xFF1
 11457                           intcon3	equ	0xFF0
 11458                           postinc0	equ	0xFEE
 11459                           wreg	equ	0xFE8
 11460                           indf1	equ	0xFE7
 11461                           postdec1	equ	0xFE5
 11462                           fsr1h	equ	0xFE2
 11463                           fsr1l	equ	0xFE1
 11464                           indf2	equ	0xFDF
 11465                           postinc2	equ	0xFDE
 11466                           postdec2	equ	0xFDD
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471 ;; *************** function _IRQ_CAPOT *****************
 11472 ;; Defined at:
 11473 ;;		line 902 in file "interrupt.c"
 11474 ;; Parameters:    Size  Location     Type
 11475 ;;		None
 11476 ;; Auto vars:     Size  Location     Type
 11477 ;;		None
 11478 ;; Return value:  Size  Location     Type
 11479 ;;                  1    wreg      void 
 11480 ;; Registers used:
 11481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11482 ;; Tracked objects:
 11483 ;;		On entry : 0/0
 11484 ;;		On exit  : 0/0
 11485 ;;		Unchanged: 0/0
 11486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11487 ;;      Params:         0       0       0       0
 11488 ;;      Locals:         0       0       0       0
 11489 ;;      Temps:          0       0       0       0
 11490 ;;      Totals:         0       0       0       0
 11491 ;;Total ram usage:        0 bytes
 11492 ;; Hardware stack levels used:    1
 11493 ;; Hardware stack levels required when called:   11
 11494 ;; This function calls:
 11495 ;;		_Etat_Update
 11496 ;; This function is called by:
 11497 ;;		_IRQ_Execution
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           	psect	text69
 11502  0023A4                     __ptext69:
 11503                           	opt stack 0
 11504  0023A4                     _IRQ_CAPOT:
 11505                           	opt stack 14
 11506                           
 11507                           ;interrupt.c: 903: INT0IF = 0;
 11508                           
 11509                           ;incstack = 0
 11510  0023A4  92F2               	bcf	intcon,1,c	;volatile
 11511                           
 11512                           ;interrupt.c: 905: if(PORTAbits.RA2==1){
 11513  0023A6  A480               	btfss	3968,2,c	;volatile
 11514  0023A8  0012               	return	
 11515                           
 11516                           ;interrupt.c: 906: Etat_Update(2);
 11517  0023AA  0E02               	movlw	2
 11518  0023AC  EF8C  F010         	goto	_Etat_Update
 11519  0023B0                     __end_of_IRQ_CAPOT:
 11520                           	opt stack 0
 11521                           tblptru	equ	0xFF8
 11522                           tblptrh	equ	0xFF7
 11523                           tblptrl	equ	0xFF6
 11524                           tablat	equ	0xFF5
 11525                           prodh	equ	0xFF4
 11526                           prodl	equ	0xFF3
 11527                           intcon	equ	0xFF2
 11528                           intcon2	equ	0xFF1
 11529                           intcon3	equ	0xFF0
 11530                           postinc0	equ	0xFEE
 11531                           wreg	equ	0xFE8
 11532                           indf1	equ	0xFE7
 11533                           postdec1	equ	0xFE5
 11534                           fsr1h	equ	0xFE2
 11535                           fsr1l	equ	0xFE1
 11536                           indf2	equ	0xFDF
 11537                           postinc2	equ	0xFDE
 11538                           postdec2	equ	0xFDD
 11539                           fsr2h	equ	0xFDA
 11540                           fsr2l	equ	0xFD9
 11541                           status	equ	0xFD8
 11542                           
 11543 ;; *************** function _Etat_Update *****************
 11544 ;; Defined at:
 11545 ;;		line 67 in file "action.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;  etat_new_val    1    wreg     unsigned char 
 11548 ;; Auto vars:     Size  Location     Type
 11549 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 11550 ;; Return value:  Size  Location     Type
 11551 ;;                  1    wreg      void 
 11552 ;; Registers used:
 11553 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/0
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11559 ;;      Params:         0       0       0       0
 11560 ;;      Locals:         1       0       0       0
 11561 ;;      Temps:          0       0       0       0
 11562 ;;      Totals:         1       0       0       0
 11563 ;;Total ram usage:        1 bytes
 11564 ;; Hardware stack levels used:    1
 11565 ;; Hardware stack levels required when called:   10
 11566 ;; This function calls:
 11567 ;;		Nothing
 11568 ;; This function is called by:
 11569 ;;		_Cycle
 11570 ;;		_Capteur_Capot_On
 11571 ;;		_IRQ_PION_Metal_Apparait
 11572 ;;		_IRQ_TIMER_5
 11573 ;;		_IRQ_CAPOT
 11574 ;;		_Check_List_Moteur_Metalhome
 11575 ;;		_Check_List_Moteur_2
 11576 ;;		_Check_List_Moteur_Bequille
 11577 ;;		_Mouvement_X
 11578 ;;		_EUSART1_RX_T3_LOCAL
 11579 ;;		_Alarme_On
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text70
 11584  002118                     __ptext70:
 11585                           	opt stack 0
 11586  002118                     _Etat_Update:
 11587                           	opt stack 14
 11588                           
 11589                           ;incstack = 0
 11590                           ;Etat_Update@etat_new_value stored from wreg
 11591  002118  6E0F               	movwf	Etat_Update@etat_new_value,c
 11592                           
 11593                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 11594  00211A  504D               	movf	_Etat_Precedent_Index,w,c
 11595  00211C  0F6A               	addlw	low _Etat_Log
 11596  00211E  6ED9               	movwf	fsr2l,c
 11597  002120  6ADA               	clrf	fsr2h,c
 11598  002122  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 11599                           
 11600                           ;action.c: 69: Etat = etat_new_value;
 11601  002126  C00F  F0A8         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 11602                           
 11603                           ;action.c: 70: Etat_Precedent_Index++;
 11604  00212A  2A4D               	incf	_Etat_Precedent_Index,f,c
 11605                           
 11606                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 11607  00212C  0E0A               	movlw	10
 11608  00212E  184D               	xorwf	_Etat_Precedent_Index,w,c
 11609  002130  B4D8               	btfsc	status,2,c
 11610                           
 11611                           ;action.c: 72: Etat_Precedent_Index = 0;
 11612  002132  6A4D               	clrf	_Etat_Precedent_Index,c
 11613  002134  0012               	return		;funcret
 11614  002136                     __end_of_Etat_Update:
 11615                           	opt stack 0
 11616                           tblptru	equ	0xFF8
 11617                           tblptrh	equ	0xFF7
 11618                           tblptrl	equ	0xFF6
 11619                           tablat	equ	0xFF5
 11620                           prodh	equ	0xFF4
 11621                           prodl	equ	0xFF3
 11622                           intcon	equ	0xFF2
 11623                           intcon2	equ	0xFF1
 11624                           intcon3	equ	0xFF0
 11625                           postinc0	equ	0xFEE
 11626                           wreg	equ	0xFE8
 11627                           indf1	equ	0xFE7
 11628                           postdec1	equ	0xFE5
 11629                           fsr1h	equ	0xFE2
 11630                           fsr1l	equ	0xFE1
 11631                           indf2	equ	0xFDF
 11632                           postinc2	equ	0xFDE
 11633                           postdec2	equ	0xFDD
 11634                           fsr2h	equ	0xFDA
 11635                           fsr2l	equ	0xFD9
 11636                           status	equ	0xFD8
 11637                           
 11638 ;; *************** function _IRQ_ADC *****************
 11639 ;; Defined at:
 11640 ;;		line 488 in file "interrupt.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;		None
 11645 ;; Return value:  Size  Location     Type
 11646 ;;                  1    wreg      void 
 11647 ;; Registers used:
 11648 ;;		wreg, status,2, status,0
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 3F/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11654 ;;      Params:         0       0       0       0
 11655 ;;      Locals:         0       0       0       0
 11656 ;;      Temps:          3       0       0       0
 11657 ;;      Totals:         3       0       0       0
 11658 ;;Total ram usage:        3 bytes
 11659 ;; Hardware stack levels used:    1
 11660 ;; Hardware stack levels required when called:   10
 11661 ;; This function calls:
 11662 ;;		Nothing
 11663 ;; This function is called by:
 11664 ;;		_IRQ_Execution
 11665 ;; This function uses a non-reentrant model
 11666 ;;
 11667                           
 11668                           	psect	text71
 11669  000DD6                     __ptext71:
 11670                           	opt stack 0
 11671  000DD6                     _IRQ_ADC:
 11672                           	opt stack 15
 11673                           
 11674                           ;interrupt.c: 489: switch (moteur_indice) {
 11675                           
 11676                           ;incstack = 0
 11677  000DD6  D0C7               	goto	l7204
 11678  000DD8                     l620:
 11679                           
 11680                           ; BSR set to: 0
 11681                           ;interrupt.c: 491: Image_Courant_Moteur_1 = ADRESH;
 11682  000DD8  CFC4 F098          	movff	4036,_Image_Courant_Moteur_1	;volatile
 11683                           
 11684                           ;interrupt.c: 492: Nouvelle_Valeur_ADC = 1;
 11685  000DDC  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11686                           
 11687                           ;interrupt.c: 494: ADIF = 0;
 11688  000DDE  9C9E               	bcf	3998,6,c	;volatile
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;interrupt.c: 497: erreur = consigne - Image_Courant_Moteur_1;
 11692  000DE0  5198               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 11693  000DE2  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 11694  000DE4  6F84               	movwf	_erreur& (0+255),b	;volatile
 11695  000DE6  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11696  000DE8  A0D8               	btfss	status,0,c
 11697  000DEA  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11698                           
 11699                           ;interrupt.c: 498: if (erreur >= 10) duty++;
 11700  000DEC  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11701  000DEE  D008               	goto	l7154
 11702  000DF0  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11703  000DF2  E103               	bnz	u5150
 11704  000DF4  0E0A               	movlw	10
 11705  000DF6  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11706  000DF8  E303               	bnc	l7154
 11707  000DFA                     u5150:
 11708                           
 11709                           ; BSR set to: 0
 11710  000DFA  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11711  000DFC  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11712  000DFE  D006               	goto	l622
 11713  000E00                     l7154:
 11714                           
 11715                           ; BSR set to: 0
 11716                           ;interrupt.c: 500: else if (erreur < 0) duty += erreur;
 11717  000E00  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11718  000E02  D004               	goto	l622
 11719                           
 11720                           ; BSR set to: 0
 11721  000E04  5184               	movf	_erreur& (0+255),w,b	;volatile
 11722  000E06  2786               	addwf	_duty& (0+255),f,b	;volatile
 11723  000E08  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11724  000E0A  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 11725  000E0C                     l622:
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;interrupt.c: 505: if (duty > PTPERL) duty = PTPERL;
 11729  000E0C  507B               	movf	3963,w,c	;volatile
 11730  000E0E  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11731  000E10  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11732  000E12  5186               	movf	_duty& (0+255),w,b	;volatile
 11733  000E14  5C0F               	subwf	??_IRQ_ADC,w,c
 11734  000E16  5010               	movf	??_IRQ_ADC+1,w,c
 11735  000E18  0A80               	xorlw	128
 11736  000E1A  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11737  000E1C  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11738  000E1E  0A80               	xorlw	128
 11739  000E20  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11740  000E22  E203               	bc	l7160
 11741                           
 11742                           ; BSR set to: 0
 11743  000E24  CF7B F086          	movff	3963,_duty	;volatile
 11744  000E28  D003               	goto	L2
 11745  000E2A                     l7160:
 11746                           
 11747                           ; BSR set to: 0
 11748                           ;interrupt.c: 506: else if (duty < 0) duty = 0;
 11749  000E2A  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11750  000E2C  D002               	goto	l7164
 11751                           
 11752                           ; BSR set to: 0
 11753  000E2E  6B86               	clrf	_duty& (0+255),b	;volatile
 11754  000E30                     L2:
 11755  000E30  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11756  000E32                     l7164:
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;interrupt.c: 507: PDC0L = (char) (duty << 2);
 11760  000E32  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11761  000E34  46E8               	rlncf	wreg,f,c
 11762  000E36  0BFC               	andlw	252
 11763  000E38  6E79               	movwf	3961,c	;volatile
 11764                           
 11765                           ;interrupt.c: 508: PDC0H = (char) ((duty << 2) >> 8);
 11766  000E3A  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11767  000E3E  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11768  000E42  90D8               	bcf	status,0,c
 11769  000E44  360F               	rlcf	??_IRQ_ADC,f,c
 11770  000E46  3610               	rlcf	??_IRQ_ADC+1,f,c
 11771  000E48  90D8               	bcf	status,0,c
 11772  000E4A  360F               	rlcf	??_IRQ_ADC,f,c
 11773  000E4C  3610               	rlcf	??_IRQ_ADC+1,f,c
 11774  000E4E  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11775  000E52  6A10               	clrf	??_IRQ_ADC+1,c
 11776  000E54  BE0F               	btfsc	??_IRQ_ADC,7,c
 11777  000E56  6810               	setf	??_IRQ_ADC+1,c
 11778  000E58  500F               	movf	??_IRQ_ADC,w,c
 11779  000E5A  6E78               	movwf	3960,c	;volatile
 11780                           
 11781                           ;interrupt.c: 510: break;
 11782  000E5C  0012               	return	
 11783  000E5E                     l628:
 11784                           
 11785                           ; BSR set to: 0
 11786                           ;interrupt.c: 517: Image_Courant_Moteur_2 = ADRESH;
 11787  000E5E  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 11788                           
 11789                           ;interrupt.c: 518: Nouvelle_Valeur_ADC = 1;
 11790  000E62  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11791                           
 11792                           ;interrupt.c: 520: ADIF = 0;
 11793  000E64  9C9E               	bcf	3998,6,c	;volatile
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;interrupt.c: 523: erreur = consigne - Image_Courant_Moteur_2;
 11797  000E66  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 11798  000E68  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 11799  000E6A  6F84               	movwf	_erreur& (0+255),b	;volatile
 11800  000E6C  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11801  000E6E  A0D8               	btfss	status,0,c
 11802  000E70  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11803                           
 11804                           ;interrupt.c: 524: if (erreur >= 10) duty++;
 11805  000E72  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11806  000E74  D008               	goto	l7170
 11807  000E76  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11808  000E78  E103               	bnz	u5190
 11809  000E7A  0E0A               	movlw	10
 11810  000E7C  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11811  000E7E  E303               	bnc	l7170
 11812  000E80                     u5190:
 11813                           
 11814                           ; BSR set to: 0
 11815  000E80  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11816  000E82  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11817  000E84  D005               	goto	l7174
 11818  000E86                     l7170:
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;interrupt.c: 525: else if (erreur < 0) duty--;
 11822  000E86  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11823  000E88  D003               	goto	l7174
 11824                           
 11825                           ; BSR set to: 0
 11826  000E8A  0786               	decf	_duty& (0+255),f,b	;volatile
 11827  000E8C  A0D8               	btfss	status,0,c
 11828  000E8E  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 11829  000E90                     l7174:
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;interrupt.c: 529: if (duty > PTPERL) duty = PTPERL;
 11833  000E90  507B               	movf	3963,w,c	;volatile
 11834  000E92  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11835  000E94  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11836  000E96  5186               	movf	_duty& (0+255),w,b	;volatile
 11837  000E98  5C0F               	subwf	??_IRQ_ADC,w,c
 11838  000E9A  5010               	movf	??_IRQ_ADC+1,w,c
 11839  000E9C  0A80               	xorlw	128
 11840  000E9E  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11841  000EA0  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11842  000EA2  0A80               	xorlw	128
 11843  000EA4  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11844  000EA6  E203               	bc	l7178
 11845                           
 11846                           ; BSR set to: 0
 11847  000EA8  CF7B F086          	movff	3963,_duty	;volatile
 11848  000EAC  D003               	goto	L3
 11849  000EAE                     l7178:
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;interrupt.c: 530: else if (duty < 0) duty = 0;
 11853  000EAE  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11854  000EB0  D002               	goto	l7182
 11855                           
 11856                           ; BSR set to: 0
 11857  000EB2  6B86               	clrf	_duty& (0+255),b	;volatile
 11858  000EB4                     L3:
 11859  000EB4  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11860  000EB6                     l7182:
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;interrupt.c: 531: PDC1L = (char) (duty << 2);
 11864  000EB6  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11865  000EB8  46E8               	rlncf	wreg,f,c
 11866  000EBA  0BFC               	andlw	252
 11867  000EBC  6E77               	movwf	3959,c	;volatile
 11868                           
 11869                           ;interrupt.c: 532: PDC1H = (char) ((duty << 2) >> 8);
 11870  000EBE  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11871  000EC2  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11872  000EC6  90D8               	bcf	status,0,c
 11873  000EC8  360F               	rlcf	??_IRQ_ADC,f,c
 11874  000ECA  3610               	rlcf	??_IRQ_ADC+1,f,c
 11875  000ECC  90D8               	bcf	status,0,c
 11876  000ECE  360F               	rlcf	??_IRQ_ADC,f,c
 11877  000ED0  3610               	rlcf	??_IRQ_ADC+1,f,c
 11878  000ED2  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11879  000ED6  6A10               	clrf	??_IRQ_ADC+1,c
 11880  000ED8  BE0F               	btfsc	??_IRQ_ADC,7,c
 11881  000EDA  6810               	setf	??_IRQ_ADC+1,c
 11882  000EDC  500F               	movf	??_IRQ_ADC,w,c
 11883  000EDE  6E76               	movwf	3958,c	;volatile
 11884                           
 11885                           ;interrupt.c: 534: break;
 11886  000EE0  0012               	return	
 11887  000EE2                     l635:
 11888                           
 11889                           ; BSR set to: 0
 11890                           ;interrupt.c: 538: Image_Courant_Moteur_2 = ADRESH;
 11891  000EE2  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 11892                           
 11893                           ;interrupt.c: 539: Nouvelle_Valeur_ADC = 1;
 11894  000EE6  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11895                           
 11896                           ;interrupt.c: 541: ADIF = 0;
 11897  000EE8  9C9E               	bcf	3998,6,c	;volatile
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;interrupt.c: 544: erreur = consigne - Image_Courant_Moteur_2;
 11901  000EEA  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 11902  000EEC  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 11903  000EEE  6F84               	movwf	_erreur& (0+255),b	;volatile
 11904  000EF0  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11905  000EF2  A0D8               	btfss	status,0,c
 11906  000EF4  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11907                           
 11908                           ;interrupt.c: 545: if (erreur >= 10) duty++;
 11909  000EF6  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11910  000EF8  D008               	goto	l7188
 11911  000EFA  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11912  000EFC  E103               	bnz	u5230
 11913  000EFE  0E0A               	movlw	10
 11914  000F00  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11915  000F02  E303               	bnc	l7188
 11916  000F04                     u5230:
 11917                           
 11918                           ; BSR set to: 0
 11919  000F04  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11920  000F06  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11921  000F08  D005               	goto	l7192
 11922  000F0A                     l7188:
 11923                           
 11924                           ; BSR set to: 0
 11925                           ;interrupt.c: 546: else if (erreur < 0) duty--;
 11926  000F0A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11927  000F0C  D003               	goto	l7192
 11928                           
 11929                           ; BSR set to: 0
 11930  000F0E  0786               	decf	_duty& (0+255),f,b	;volatile
 11931  000F10  A0D8               	btfss	status,0,c
 11932  000F12  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 11933  000F14                     l7192:
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;interrupt.c: 550: if (duty > PTPERL) duty = PTPERL;
 11937  000F14  507B               	movf	3963,w,c	;volatile
 11938  000F16  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11939  000F18  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11940  000F1A  5186               	movf	_duty& (0+255),w,b	;volatile
 11941  000F1C  5C0F               	subwf	??_IRQ_ADC,w,c
 11942  000F1E  5010               	movf	??_IRQ_ADC+1,w,c
 11943  000F20  0A80               	xorlw	128
 11944  000F22  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11945  000F24  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11946  000F26  0A80               	xorlw	128
 11947  000F28  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11948  000F2A  E203               	bc	l7196
 11949                           
 11950                           ; BSR set to: 0
 11951  000F2C  CF7B F086          	movff	3963,_duty	;volatile
 11952  000F30  D003               	goto	L4
 11953  000F32                     l7196:
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;interrupt.c: 551: else if (duty < 0) duty = 0;
 11957  000F32  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11958  000F34  D002               	goto	l7200
 11959                           
 11960                           ; BSR set to: 0
 11961  000F36  6B86               	clrf	_duty& (0+255),b	;volatile
 11962  000F38                     L4:
 11963  000F38  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11964  000F3A                     l7200:
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;interrupt.c: 552: PDC1L = (char) (duty << 2);
 11968  000F3A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11969  000F3C  46E8               	rlncf	wreg,f,c
 11970  000F3E  0BFC               	andlw	252
 11971  000F40  6E77               	movwf	3959,c	;volatile
 11972                           
 11973                           ;interrupt.c: 553: PDC1H = (char) ((duty << 2) >> 8);
 11974  000F42  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11975  000F46  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11976  000F4A  90D8               	bcf	status,0,c
 11977  000F4C  360F               	rlcf	??_IRQ_ADC,f,c
 11978  000F4E  3610               	rlcf	??_IRQ_ADC+1,f,c
 11979  000F50  90D8               	bcf	status,0,c
 11980  000F52  360F               	rlcf	??_IRQ_ADC,f,c
 11981  000F54  3610               	rlcf	??_IRQ_ADC+1,f,c
 11982  000F56  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11983  000F5A  6A10               	clrf	??_IRQ_ADC+1,c
 11984  000F5C  BE0F               	btfsc	??_IRQ_ADC,7,c
 11985  000F5E  6810               	setf	??_IRQ_ADC+1,c
 11986  000F60  500F               	movf	??_IRQ_ADC,w,c
 11987  000F62  6E76               	movwf	3958,c	;volatile
 11988                           
 11989                           ;interrupt.c: 555: break;
 11990  000F64  0012               	return	
 11991  000F66                     l7204:
 11992  000F66  0100               	movlb	0	; () banked
 11993  000F68  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 11994                           
 11995                           ; Switch size 1, requested type "speed"
 11996                           ; Number of cases is 3, Range of values is 1 to 3
 11997                           ; switch strategies available:
 11998                           ; Name         Instructions Cycles
 11999                           ; simple_byte           10     6 (average)
 12000                           ;	Chosen strategy is simple_byte
 12001  000F6A  0A01               	xorlw	1	; case 1
 12002  000F6C  E101 D734          	bz	l620
 12003  000F70  0A03               	xorlw	3	; case 2
 12004  000F72  E101 D774          	bz	l628
 12005  000F76  0A01               	xorlw	1	; case 3
 12006  000F78  E0B4               	bz	l635
 12007                           
 12008                           ; BSR set to: 0
 12009  000F7A  0012               	return		;funcret
 12010  000F7C                     __end_of_IRQ_ADC:
 12011                           	opt stack 0
 12012                           tblptru	equ	0xFF8
 12013                           tblptrh	equ	0xFF7
 12014                           tblptrl	equ	0xFF6
 12015                           tablat	equ	0xFF5
 12016                           prodh	equ	0xFF4
 12017                           prodl	equ	0xFF3
 12018                           intcon	equ	0xFF2
 12019                           intcon2	equ	0xFF1
 12020                           intcon3	equ	0xFF0
 12021                           postinc0	equ	0xFEE
 12022                           wreg	equ	0xFE8
 12023                           indf1	equ	0xFE7
 12024                           postdec1	equ	0xFE5
 12025                           fsr1h	equ	0xFE2
 12026                           fsr1l	equ	0xFE1
 12027                           indf2	equ	0xFDF
 12028                           postinc2	equ	0xFDE
 12029                           postdec2	equ	0xFDD
 12030                           fsr2h	equ	0xFDA
 12031                           fsr2l	equ	0xFD9
 12032                           status	equ	0xFD8
 12033                           
 12034 ;; *************** function _Etat_Intitule *****************
 12035 ;; Defined at:
 12036 ;;		line 22 in file "action.c"
 12037 ;; Parameters:    Size  Location     Type
 12038 ;;  Etat_Number     1    wreg     unsigned char 
 12039 ;; Auto vars:     Size  Location     Type
 12040 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 12041 ;; Return value:  Size  Location     Type
 12042 ;;                  1    wreg      unsigned char 
 12043 ;; Registers used:
 12044 ;;		wreg, status,2, status,0
 12045 ;; Tracked objects:
 12046 ;;		On entry : 0/1
 12047 ;;		On exit  : 0/0
 12048 ;;		Unchanged: 0/0
 12049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12050 ;;      Params:         0       0       0       0
 12051 ;;      Locals:         1       0       0       0
 12052 ;;      Temps:          0       0       0       0
 12053 ;;      Totals:         1       0       0       0
 12054 ;;Total ram usage:        1 bytes
 12055 ;; Hardware stack levels used:    1
 12056 ;; Hardware stack levels required when called:   10
 12057 ;; This function calls:
 12058 ;;		Nothing
 12059 ;; This function is called by:
 12060 ;;		_EUSART1_RX_T3_LOCAL
 12061 ;; This function uses a non-reentrant model
 12062 ;;
 12063                           
 12064                           	psect	text72
 12065  001E60                     __ptext72:
 12066                           	opt stack 0
 12067  001E60                     _Etat_Intitule:
 12068                           	opt stack 16
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;incstack = 0
 12072                           ;Etat_Intitule@Etat_Number stored from wreg
 12073  001E60  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 12074                           
 12075                           ;action.c: 24: switch (Etat_Number) {
 12076  001E62  500F               	movf	Etat_Intitule@Etat_Number,w,c
 12077                           
 12078                           ; Switch size 1, requested type "speed"
 12079                           ; Number of cases is 8, Range of values is 0 to 255
 12080                           ; switch strategies available:
 12081                           ; Name         Instructions Cycles
 12082                           ; simple_byte           25    13 (average)
 12083                           ;	Chosen strategy is simple_byte
 12084  001E64  B4D8               	btfsc	status,2,c
 12085  001E66  0C49               	retlw	73
 12086  001E68  0A01               	xorlw	1	; case 1
 12087  001E6A  B4D8               	btfsc	status,2,c
 12088  001E6C  0C21               	retlw	33
 12089  001E6E  0A03               	xorlw	3	; case 2
 12090  001E70  B4D8               	btfsc	status,2,c
 12091  001E72  0C41               	retlw	65
 12092  001E74  0A01               	xorlw	1	; case 3
 12093  001E76  B4D8               	btfsc	status,2,c
 12094  001E78  0C52               	retlw	82
 12095  001E7A  0A07               	xorlw	7	; case 4
 12096  001E7C  B4D8               	btfsc	status,2,c
 12097  001E7E  0C4C               	retlw	76
 12098  001E80  0A01               	xorlw	1	; case 5
 12099  001E82  B4D8               	btfsc	status,2,c
 12100  001E84  0C42               	retlw	66
 12101  001E86  0A03               	xorlw	3	; case 6
 12102  001E88  B4D8               	btfsc	status,2,c
 12103  001E8A  0C50               	retlw	80
 12104  001E8C  0AF9               	xorlw	249	; case 255
 12105  001E8E  B4D8               	btfsc	status,2,c
 12106  001E90  0C48               	retlw	72
 12107  001E92  0C20               	retlw	32
 12108  001E94                     __end_of_Etat_Intitule:
 12109                           	opt stack 0
 12110                           tblptru	equ	0xFF8
 12111                           tblptrh	equ	0xFF7
 12112                           tblptrl	equ	0xFF6
 12113                           tablat	equ	0xFF5
 12114                           prodh	equ	0xFF4
 12115                           prodl	equ	0xFF3
 12116                           intcon	equ	0xFF2
 12117                           intcon2	equ	0xFF1
 12118                           intcon3	equ	0xFF0
 12119                           postinc0	equ	0xFEE
 12120                           wreg	equ	0xFE8
 12121                           indf1	equ	0xFE7
 12122                           postdec1	equ	0xFE5
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           fsr2h	equ	0xFDA
 12129                           fsr2l	equ	0xFD9
 12130                           status	equ	0xFD8
 12131                           
 12132 ;; *************** function _Etat_Get *****************
 12133 ;; Defined at:
 12134 ;;		line 42 in file "action.c"
 12135 ;; Parameters:    Size  Location     Type
 12136 ;;  Etat_Indice     1    wreg     unsigned char 
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 12139 ;; Return value:  Size  Location     Type
 12140 ;;                  1    wreg      unsigned char 
 12141 ;; Registers used:
 12142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12143 ;; Tracked objects:
 12144 ;;		On entry : 0/0
 12145 ;;		On exit  : 0/0
 12146 ;;		Unchanged: 0/0
 12147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12148 ;;      Params:         0       0       0       0
 12149 ;;      Locals:         1       0       0       0
 12150 ;;      Temps:          2       0       0       0
 12151 ;;      Totals:         3       0       0       0
 12152 ;;Total ram usage:        3 bytes
 12153 ;; Hardware stack levels used:    1
 12154 ;; Hardware stack levels required when called:   11
 12155 ;; This function calls:
 12156 ;;		___awmod
 12157 ;; This function is called by:
 12158 ;;		_Cycle
 12159 ;;		_EUSART1_RX_T3_LOCAL
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           	psect	text73
 12164  001E94                     __ptext73:
 12165                           	opt stack 0
 12166  001E94                     _Etat_Get:
 12167                           	opt stack 15
 12168                           
 12169                           ;incstack = 0
 12170                           ;Etat_Get@Etat_Indice stored from wreg
 12171  001E94  6E17               	movwf	Etat_Get@Etat_Indice,c
 12172                           
 12173                           ;action.c: 55: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 12174  001E96  5017               	movf	Etat_Get@Etat_Indice,w,c
 12175  001E98  C04D  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 12176  001E9C  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 12177  001E9E  5E15               	subwf	??_Etat_Get,f,c
 12178  001EA0  0E00               	movlw	0
 12179  001EA2  5A16               	subwfb	??_Etat_Get+1,f,c
 12180  001EA4  0E09               	movlw	9
 12181  001EA6  2415               	addwf	??_Etat_Get,w,c
 12182  001EA8  6E0F               	movwf	___awmod@dividend,c
 12183  001EAA  0E00               	movlw	0
 12184  001EAC  2016               	addwfc	??_Etat_Get+1,w,c
 12185  001EAE  6E10               	movwf	___awmod@dividend+1,c
 12186  001EB0  6A12               	clrf	___awmod@divisor+1,c
 12187  001EB2  0E0A               	movlw	10
 12188  001EB4  6E11               	movwf	___awmod@divisor,c
 12189  001EB6  EC2A  F00C         	call	___awmod	;wreg free
 12190  001EBA  500F               	movf	?___awmod,w,c
 12191  001EBC  0F6A               	addlw	low _Etat_Log
 12192  001EBE  6ED9               	movwf	fsr2l,c
 12193  001EC0  6ADA               	clrf	fsr2h,c
 12194  001EC2  50DF               	movf	indf2,w,c
 12195  001EC4  0012               	return		;funcret
 12196  001EC6                     __end_of_Etat_Get:
 12197                           	opt stack 0
 12198                           tblptru	equ	0xFF8
 12199                           tblptrh	equ	0xFF7
 12200                           tblptrl	equ	0xFF6
 12201                           tablat	equ	0xFF5
 12202                           prodh	equ	0xFF4
 12203                           prodl	equ	0xFF3
 12204                           intcon	equ	0xFF2
 12205                           intcon2	equ	0xFF1
 12206                           intcon3	equ	0xFF0
 12207                           postinc0	equ	0xFEE
 12208                           wreg	equ	0xFE8
 12209                           indf1	equ	0xFE7
 12210                           postdec1	equ	0xFE5
 12211                           fsr1h	equ	0xFE2
 12212                           fsr1l	equ	0xFE1
 12213                           indf2	equ	0xFDF
 12214                           postinc2	equ	0xFDE
 12215                           postdec2	equ	0xFDD
 12216                           fsr2h	equ	0xFDA
 12217                           fsr2l	equ	0xFD9
 12218                           status	equ	0xFD8
 12219                           
 12220 ;; *************** function ___awmod *****************
 12221 ;; Defined at:
 12222 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 12223 ;; Parameters:    Size  Location     Type
 12224 ;;  dividend        2   14[COMRAM] int 
 12225 ;;  divisor         2   16[COMRAM] int 
 12226 ;; Auto vars:     Size  Location     Type
 12227 ;;  sign            1   19[COMRAM] unsigned char 
 12228 ;;  counter         1   18[COMRAM] unsigned char 
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  2   14[COMRAM] int 
 12231 ;; Registers used:
 12232 ;;		wreg, status,2, status,0
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/1
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12238 ;;      Params:         4       0       0       0
 12239 ;;      Locals:         2       0       0       0
 12240 ;;      Temps:          0       0       0       0
 12241 ;;      Totals:         6       0       0       0
 12242 ;;Total ram usage:        6 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:   10
 12245 ;; This function calls:
 12246 ;;		Nothing
 12247 ;; This function is called by:
 12248 ;;		_Etat_Get
 12249 ;;		_EUSART1_RX_T3_LOCAL
 12250 ;; This function uses a non-reentrant model
 12251 ;;
 12252                           
 12253                           	psect	text74
 12254  001854                     __ptext74:
 12255                           	opt stack 0
 12256  001854                     ___awmod:
 12257                           	opt stack 16
 12258                           
 12259                           ;incstack = 0
 12260  001854  6A14               	clrf	___awmod@sign,c
 12261  001856  AE10               	btfss	___awmod@dividend+1,7,c
 12262  001858  D006               	goto	l7236
 12263  00185A  6C0F               	negf	___awmod@dividend,c
 12264  00185C  1E10               	comf	___awmod@dividend+1,f,c
 12265  00185E  B0D8               	btfsc	status,0,c
 12266  001860  2A10               	incf	___awmod@dividend+1,f,c
 12267  001862  0E01               	movlw	1
 12268  001864  6E14               	movwf	___awmod@sign,c
 12269  001866                     l7236:
 12270  001866  AE12               	btfss	___awmod@divisor+1,7,c
 12271  001868  D004               	goto	l7240
 12272  00186A  6C11               	negf	___awmod@divisor,c
 12273  00186C  1E12               	comf	___awmod@divisor+1,f,c
 12274  00186E  B0D8               	btfsc	status,0,c
 12275  001870  2A12               	incf	___awmod@divisor+1,f,c
 12276  001872                     l7240:
 12277  001872  5011               	movf	___awmod@divisor,w,c
 12278  001874  1012               	iorwf	___awmod@divisor+1,w,c
 12279  001876  E017               	bz	l7256
 12280  001878  0E01               	movlw	1
 12281  00187A  6E13               	movwf	___awmod@counter,c
 12282  00187C  D004               	goto	l7246
 12283  00187E                     l7244:
 12284  00187E  90D8               	bcf	status,0,c
 12285  001880  3611               	rlcf	___awmod@divisor,f,c
 12286  001882  3612               	rlcf	___awmod@divisor+1,f,c
 12287  001884  2A13               	incf	___awmod@counter,f,c
 12288  001886                     l7246:
 12289  001886  AE12               	btfss	___awmod@divisor+1,7,c
 12290  001888  D7FA               	goto	l7244
 12291  00188A                     l7248:
 12292  00188A  5011               	movf	___awmod@divisor,w,c
 12293  00188C  5C0F               	subwf	___awmod@dividend,w,c
 12294  00188E  5012               	movf	___awmod@divisor+1,w,c
 12295  001890  5810               	subwfb	___awmod@dividend+1,w,c
 12296  001892  E304               	bnc	l7252
 12297  001894  5011               	movf	___awmod@divisor,w,c
 12298  001896  5E0F               	subwf	___awmod@dividend,f,c
 12299  001898  5012               	movf	___awmod@divisor+1,w,c
 12300  00189A  5A10               	subwfb	___awmod@dividend+1,f,c
 12301  00189C                     l7252:
 12302  00189C  90D8               	bcf	status,0,c
 12303  00189E  3212               	rrcf	___awmod@divisor+1,f,c
 12304  0018A0  3211               	rrcf	___awmod@divisor,f,c
 12305  0018A2  2E13               	decfsz	___awmod@counter,f,c
 12306  0018A4  D7F2               	goto	l7248
 12307  0018A6                     l7256:
 12308  0018A6  5014               	movf	___awmod@sign,w,c
 12309  0018A8  E004               	bz	l7260
 12310  0018AA  6C0F               	negf	___awmod@dividend,c
 12311  0018AC  1E10               	comf	___awmod@dividend+1,f,c
 12312  0018AE  B0D8               	btfsc	status,0,c
 12313  0018B0  2A10               	incf	___awmod@dividend+1,f,c
 12314  0018B2                     l7260:
 12315  0018B2  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12316  0018B6  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12317  0018BA  0012               	return		;funcret
 12318  0018BC                     __end_of___awmod:
 12319                           	opt stack 0
 12320                           tblptru	equ	0xFF8
 12321                           tblptrh	equ	0xFF7
 12322                           tblptrl	equ	0xFF6
 12323                           tablat	equ	0xFF5
 12324                           prodh	equ	0xFF4
 12325                           prodl	equ	0xFF3
 12326                           intcon	equ	0xFF2
 12327                           intcon2	equ	0xFF1
 12328                           intcon3	equ	0xFF0
 12329                           postinc0	equ	0xFEE
 12330                           wreg	equ	0xFE8
 12331                           indf1	equ	0xFE7
 12332                           postdec1	equ	0xFE5
 12333                           fsr1h	equ	0xFE2
 12334                           fsr1l	equ	0xFE1
 12335                           indf2	equ	0xFDF
 12336                           postinc2	equ	0xFDE
 12337                           postdec2	equ	0xFDD
 12338                           fsr2h	equ	0xFDA
 12339                           fsr2l	equ	0xFD9
 12340                           status	equ	0xFD8
 12341                           
 12342 ;; *************** function _EUSART1_Buffer_Send *****************
 12343 ;; Defined at:
 12344 ;;		line 511 in file "eusart.c"
 12345 ;; Parameters:    Size  Location     Type
 12346 ;;  text            1   14[COMRAM] PTR unsigned char 
 12347 ;;		 -> UART_TX_TEXT(64), 
 12348 ;; Auto vars:     Size  Location     Type
 12349 ;;  i               2   15[COMRAM] unsigned int 
 12350 ;; Return value:  Size  Location     Type
 12351 ;;                  1    wreg      void 
 12352 ;; Registers used:
 12353 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12354 ;; Tracked objects:
 12355 ;;		On entry : 0/0
 12356 ;;		On exit  : 0/0
 12357 ;;		Unchanged: 0/0
 12358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12359 ;;      Params:         1       0       0       0
 12360 ;;      Locals:         2       0       0       0
 12361 ;;      Temps:          0       0       0       0
 12362 ;;      Totals:         3       0       0       0
 12363 ;;Total ram usage:        3 bytes
 12364 ;; Hardware stack levels used:    1
 12365 ;; Hardware stack levels required when called:   10
 12366 ;; This function calls:
 12367 ;;		Nothing
 12368 ;; This function is called by:
 12369 ;;		_EUSART1_RX_T3_LOCAL
 12370 ;; This function uses a non-reentrant model
 12371 ;;
 12372                           
 12373                           	psect	text75
 12374  0014F4                     __ptext75:
 12375                           	opt stack 0
 12376  0014F4                     _EUSART1_Buffer_Send:
 12377                           	opt stack 16
 12378  0014F4                     l1330:
 12379  0014F4  A2AC               	btfss	4012,1,c	;volatile
 12380  0014F6  D7FE               	goto	l1330
 12381                           
 12382                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 12383  0014F8  6A10               	clrf	EUSART1_Buffer_Send@i,c
 12384  0014FA  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 12385  0014FC  D01A               	goto	l7380
 12386  0014FE                     l7376:
 12387                           
 12388                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 12389  0014FE  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12390  001500  0FAB               	addlw	low _UART_TX_TEXT
 12391  001502  6ED9               	movwf	fsr2l,c
 12392  001504  6ADA               	clrf	fsr2h,c
 12393  001506  0E80               	movlw	low _eusart1TxBuffer
 12394  001508  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12395  00150A  6EE1               	movwf	fsr1l,c
 12396  00150C  0E01               	movlw	high _eusart1TxBuffer
 12397  00150E  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12398  001510  6EE2               	movwf	fsr1h,c
 12399  001512  CFDF FFE7          	movff	indf2,indf1
 12400                           
 12401                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 12402  001516  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12403  001518  0FAB               	addlw	low _UART_TX_TEXT
 12404  00151A  6ED9               	movwf	fsr2l,c
 12405  00151C  6ADA               	clrf	fsr2h,c
 12406  00151E  0E40               	movlw	low _spiTxBuffer
 12407  001520  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12408  001522  6EE1               	movwf	fsr1l,c
 12409  001524  0E01               	movlw	high _spiTxBuffer
 12410  001526  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12411  001528  6EE2               	movwf	fsr1h,c
 12412  00152A  CFDF FFE7          	movff	indf2,indf1
 12413  00152E  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 12414  001530  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 12415  001532                     l7380:
 12416  001532  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 12417  001534  E109               	bnz	l7384
 12418  001536  0E40               	movlw	64
 12419  001538  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 12420  00153A  E206               	bc	l7384
 12421  00153C  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12422  00153E  0FAB               	addlw	low _UART_TX_TEXT
 12423  001540  6ED9               	movwf	fsr2l,c
 12424  001542  6ADA               	clrf	fsr2h,c
 12425  001544  50DF               	movf	indf2,w,c
 12426  001546  E1DB               	bnz	l7376
 12427  001548                     l7384:
 12428                           
 12429                           ;eusart.c: 526: }
 12430                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 12431  001548  0E80               	movlw	low _eusart1TxBuffer
 12432  00154A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12433  00154C  6ED9               	movwf	fsr2l,c
 12434  00154E  0E01               	movlw	high _eusart1TxBuffer
 12435  001550  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12436  001552  6EDA               	movwf	fsr2h,c
 12437  001554  0E0D               	movlw	13
 12438  001556  6EDF               	movwf	indf2,c
 12439                           
 12440                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 12441  001558  0E40               	movlw	low _spiTxBuffer
 12442  00155A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12443  00155C  6ED9               	movwf	fsr2l,c
 12444  00155E  0E01               	movlw	high _spiTxBuffer
 12445  001560  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12446  001562  6EDA               	movwf	fsr2h,c
 12447  001564  0E0D               	movlw	13
 12448  001566  6EDF               	movwf	indf2,c
 12449                           
 12450                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 12451  001568  0E81               	movlw	low (_eusart1TxBuffer+1)
 12452  00156A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12453  00156C  6ED9               	movwf	fsr2l,c
 12454  00156E  0E01               	movlw	high (_eusart1TxBuffer+1)
 12455  001570  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12456  001572  6EDA               	movwf	fsr2h,c
 12457  001574  6ADF               	clrf	indf2,c
 12458                           
 12459                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 12460  001576  0E41               	movlw	low (_spiTxBuffer+1)
 12461  001578  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12462  00157A  6ED9               	movwf	fsr2l,c
 12463  00157C  0E01               	movlw	high (_spiTxBuffer+1)
 12464  00157E  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12465  001580  6EDA               	movwf	fsr2h,c
 12466  001582  6ADF               	clrf	indf2,c
 12467                           
 12468                           ;eusart.c: 537: eusart1TxIndex = 0;
 12469  001584  6A46               	clrf	_eusart1TxIndex,c	;volatile
 12470                           
 12471                           ;eusart.c: 538: spiTxIndex = 0;
 12472  001586  6A44               	clrf	_spiTxIndex,c	;volatile
 12473                           
 12474                           ;eusart.c: 540: SPI_MODE = 1;
 12475  001588  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 12476                           
 12477                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 12478  00158A  0E40               	movlw	low _spiTxBuffer
 12479  00158C  2444               	addwf	_spiTxIndex,w,c	;volatile
 12480  00158E  6ED9               	movwf	fsr2l,c
 12481  001590  6ADA               	clrf	fsr2h,c
 12482  001592  0E01               	movlw	high _spiTxBuffer
 12483  001594  22DA               	addwfc	fsr2h,f,c
 12484  001596  50DF               	movf	indf2,w,c
 12485  001598  6EC9               	movwf	4041,c	;volatile
 12486                           
 12487                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 12488  00159A  0E80               	movlw	low _eusart1TxBuffer
 12489  00159C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 12490  00159E  6ED9               	movwf	fsr2l,c
 12491  0015A0  6ADA               	clrf	fsr2h,c
 12492  0015A2  0E01               	movlw	high _eusart1TxBuffer
 12493  0015A4  22DA               	addwfc	fsr2h,f,c
 12494  0015A6  50DF               	movf	indf2,w,c
 12495  0015A8  6EAD               	movwf	4013,c	;volatile
 12496                           
 12497                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 12498  0015AA  889D               	bsf	3997,4,c	;volatile
 12499  0015AC  0012               	return		;funcret
 12500  0015AE                     __end_of_EUSART1_Buffer_Send:
 12501                           	opt stack 0
 12502                           tblptru	equ	0xFF8
 12503                           tblptrh	equ	0xFF7
 12504                           tblptrl	equ	0xFF6
 12505                           tablat	equ	0xFF5
 12506                           prodh	equ	0xFF4
 12507                           prodl	equ	0xFF3
 12508                           intcon	equ	0xFF2
 12509                           intcon2	equ	0xFF1
 12510                           intcon3	equ	0xFF0
 12511                           postinc0	equ	0xFEE
 12512                           wreg	equ	0xFE8
 12513                           indf1	equ	0xFE7
 12514                           postdec1	equ	0xFE5
 12515                           fsr1h	equ	0xFE2
 12516                           fsr1l	equ	0xFE1
 12517                           indf2	equ	0xFDF
 12518                           postinc2	equ	0xFDE
 12519                           postdec2	equ	0xFDD
 12520                           fsr2h	equ	0xFDA
 12521                           fsr2l	equ	0xFD9
 12522                           status	equ	0xFD8
 12523                           
 12524 ;; *************** function _LOW_PRIORITY_IRQ *****************
 12525 ;; Defined at:
 12526 ;;		line 561 in file "interrupt.c"
 12527 ;; Parameters:    Size  Location     Type
 12528 ;;		None
 12529 ;; Auto vars:     Size  Location     Type
 12530 ;;		None
 12531 ;; Return value:  Size  Location     Type
 12532 ;;                  1    wreg      void 
 12533 ;; Registers used:
 12534 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12535 ;; Tracked objects:
 12536 ;;		On entry : 0/0
 12537 ;;		On exit  : 0/0
 12538 ;;		Unchanged: 0/0
 12539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12540 ;;      Params:         0       0       0       0
 12541 ;;      Locals:         0       0       0       0
 12542 ;;      Temps:          7       0       0       0
 12543 ;;      Totals:         7       0       0       0
 12544 ;;Total ram usage:        7 bytes
 12545 ;; Hardware stack levels used:    1
 12546 ;; Hardware stack levels required when called:    9
 12547 ;; This function calls:
 12548 ;;		_EUSART1_Receive_ISR
 12549 ;;		_EUSART1_Transmit_ISR
 12550 ;;		_SPI_ISR
 12551 ;;		i1_Etat_Update
 12552 ;;		i1_IRQ_ADC
 12553 ;;		i1_IRQ_PWM
 12554 ;;		i1_IRQ_TIMER_0
 12555 ;;		i1_IRQ_TIMER_5
 12556 ;; This function is called by:
 12557 ;;		Interrupt level 1
 12558 ;; This function uses a non-reentrant model
 12559 ;;
 12560                           
 12561                           	psect	intcodelo
 12562  000018                     __pintcodelo:
 12563                           	opt stack 0
 12564  000018                     _LOW_PRIORITY_IRQ:
 12565                           	opt stack 11
 12566                           
 12567                           ;incstack = 0
 12568  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12569  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 12570  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 12571  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 12572  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 12573  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 12574  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 12575  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 12576                           
 12577                           ;interrupt.c: 564: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 12578  000036  B2A3               	btfsc	4003,1,c	;volatile
 12579  000038  A2A4               	btfss	4004,1,c	;volatile
 12580  00003A  D007               	goto	i1l648
 12581                           
 12582                           ;interrupt.c: 568: PIR3bits.IC1IF = 0;
 12583  00003C  92A4               	bcf	4004,1,c	;volatile
 12584                           
 12585                           ;interrupt.c: 570: if(PORTCbits.RC3==1){
 12586  00003E  A682               	btfss	3970,3,c	;volatile
 12587  000040  D03A               	goto	i1l668
 12588                           
 12589                           ;interrupt.c: 571: Etat_Update(3);
 12590  000042  0E03               	movlw	3
 12591  000044  EC9B  F010         	call	i1_Etat_Update
 12592                           
 12593                           ;interrupt.c: 572: }
 12594                           ;interrupt.c: 591: } else
 12595  000048  D036               	goto	i1l668
 12596  00004A                     i1l648:
 12597                           
 12598                           ;interrupt.c: 593: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 12599  00004A  B4A3               	btfsc	4003,2,c	;volatile
 12600  00004C  A4A4               	btfss	4004,2,c	;volatile
 12601  00004E  D002               	goto	i1l651
 12602                           
 12603                           ;interrupt.c: 594: PIR3bits.IC2QEIF = 0;
 12604  000050  94A4               	bcf	4004,2,c	;volatile
 12605                           
 12606                           ;interrupt.c: 606: } else
 12607  000052  D031               	goto	i1l668
 12608  000054                     i1l651:
 12609                           
 12610                           ;interrupt.c: 607: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 12611  000054  B69D               	btfsc	3997,3,c	;volatile
 12612  000056  A69E               	btfss	3998,3,c	;volatile
 12613  000058  D003               	goto	i1l653
 12614                           
 12615                           ;interrupt.c: 608: SPI_ISR();
 12616  00005A  EC2C  F009         	call	_SPI_ISR	;wreg free
 12617                           
 12618                           ;interrupt.c: 610: } else
 12619  00005E  D02B               	goto	i1l668
 12620  000060                     i1l653:
 12621                           
 12622                           ;interrupt.c: 611: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 12623  000060  B89D               	btfsc	3997,4,c	;volatile
 12624  000062  A89E               	btfss	3998,4,c	;volatile
 12625  000064  D003               	goto	i1l655
 12626                           
 12627                           ;interrupt.c: 612: EUSART1_Transmit_ISR();
 12628  000066  ECFC  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
 12629                           
 12630                           ;interrupt.c: 614: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 12631  00006A  D025               	goto	i1l668
 12632  00006C                     i1l655:
 12633  00006C  BA9D               	btfsc	3997,5,c	;volatile
 12634  00006E  AA9E               	btfss	3998,5,c	;volatile
 12635  000070  D00B               	goto	i1l657
 12636                           
 12637                           ;interrupt.c: 615: if (RX1_ABR==0){
 12638  000072  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 12639  000074  D003               	goto	i1l658
 12640                           
 12641                           ;interrupt.c: 616: EUSART1_Receive_ISR();
 12642  000076  ECB3  F009         	call	_EUSART1_Receive_ISR	;wreg free
 12643                           
 12644                           ;interrupt.c: 617: }else{
 12645  00007A  D01D               	goto	i1l668
 12646  00007C                     i1l658:
 12647                           
 12648                           ;interrupt.c: 618: eusart1RxIndex = RCREG;
 12649  00007C  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 12650                           
 12651                           ;interrupt.c: 619: eusart1RxIndex = 0;
 12652  000080  6A45               	clrf	_eusart1RxIndex,c	;volatile
 12653                           
 12654                           ;interrupt.c: 620: PIR1bits.RC1IF = 0;
 12655  000082  9A9E               	bcf	3998,5,c	;volatile
 12656                           
 12657                           ;interrupt.c: 621: RX1_ABR = 0;}
 12658  000084  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 12659  000086  D017               	goto	i1l668
 12660  000088                     i1l657:
 12661                           
 12662                           ;interrupt.c: 627: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12663  000088  BAF2               	btfsc	intcon,5,c	;volatile
 12664  00008A  A4F2               	btfss	intcon,2,c	;volatile
 12665  00008C  D003               	goto	i1l661
 12666                           
 12667                           ;interrupt.c: 628: IRQ_TIMER_0();
 12668  00008E  EC88  F00D         	call	i1_IRQ_TIMER_0	;wreg free
 12669                           
 12670                           ;interrupt.c: 634: } else
 12671  000092  D011               	goto	i1l668
 12672  000094                     i1l661:
 12673                           
 12674                           ;interrupt.c: 637: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 12675  000094  B0A3               	btfsc	4003,0,c	;volatile
 12676  000096  A0A4               	btfss	4004,0,c	;volatile
 12677  000098  D003               	goto	i1l663
 12678                           
 12679                           ;interrupt.c: 638: IRQ_TIMER_5();
 12680  00009A  ECF6  F00C         	call	i1_IRQ_TIMER_5	;wreg free
 12681                           
 12682                           ;interrupt.c: 660: } else
 12683  00009E  D00B               	goto	i1l668
 12684  0000A0                     i1l663:
 12685                           
 12686                           ;interrupt.c: 662: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 12687  0000A0  B8A3               	btfsc	4003,4,c	;volatile
 12688  0000A2  A8A4               	btfss	4004,4,c	;volatile
 12689  0000A4  D003               	goto	i1l665
 12690                           
 12691                           ;interrupt.c: 663: IRQ_PWM();
 12692  0000A6  EC10  F012         	call	i1_IRQ_PWM	;wreg free
 12693                           
 12694                           ;interrupt.c: 667: } else
 12695  0000AA  D005               	goto	i1l668
 12696  0000AC                     i1l665:
 12697                           
 12698                           ;interrupt.c: 672: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 12699  0000AC  BC9D               	btfsc	3997,6,c	;volatile
 12700  0000AE  AC9E               	btfss	3998,6,c	;volatile
 12701  0000B0  D002               	goto	i1l668
 12702                           
 12703                           ;interrupt.c: 679: IRQ_ADC();
 12704  0000B2  ECBE  F007         	call	i1_IRQ_ADC	;wreg free
 12705  0000B6                     i1l668:
 12706  0000B6  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 12707  0000BA  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 12708  0000BE  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 12709  0000C2  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 12710  0000C6  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 12711  0000CA  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 12712  0000CE  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 12713  0000D2  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12714  0000D4  0010               	retfie	
 12715  0000D6                     __end_of_LOW_PRIORITY_IRQ:
 12716                           	opt stack 0
 12717                           tblptru	equ	0xFF8
 12718                           tblptrh	equ	0xFF7
 12719                           tblptrl	equ	0xFF6
 12720                           tablat	equ	0xFF5
 12721                           prodh	equ	0xFF4
 12722                           prodl	equ	0xFF3
 12723                           intcon	equ	0xFF2
 12724                           intcon2	equ	0xFF1
 12725                           intcon3	equ	0xFF0
 12726                           postinc0	equ	0xFEE
 12727                           wreg	equ	0xFE8
 12728                           indf1	equ	0xFE7
 12729                           postdec1	equ	0xFE5
 12730                           fsr1h	equ	0xFE2
 12731                           fsr1l	equ	0xFE1
 12732                           bsr	equ	0xFE0
 12733                           indf2	equ	0xFDF
 12734                           postinc2	equ	0xFDE
 12735                           postdec2	equ	0xFDD
 12736                           fsr2h	equ	0xFDA
 12737                           fsr2l	equ	0xFD9
 12738                           status	equ	0xFD8
 12739                           
 12740 ;; *************** function i1_IRQ_TIMER_5 *****************
 12741 ;; Defined at:
 12742 ;;		line 415 in file "interrupt.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;		None
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;		None
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  1    wreg      void 
 12749 ;; Registers used:
 12750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12756 ;;      Params:         0       0       0       0
 12757 ;;      Locals:         0       0       0       0
 12758 ;;      Temps:          0       0       0       0
 12759 ;;      Totals:         0       0       0       0
 12760 ;;Total ram usage:        0 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:    8
 12763 ;; This function calls:
 12764 ;;		i1_Alarme_On
 12765 ;;		i1_Buzzer_Etat
 12766 ;;		i1_Etat_Update
 12767 ;;		i1_TIMER5_Off
 12768 ;; This function is called by:
 12769 ;;		_LOW_PRIORITY_IRQ
 12770 ;; This function uses a non-reentrant model
 12771 ;;
 12772                           
 12773                           	psect	text77
 12774  0019EC                     __ptext77:
 12775                           	opt stack 0
 12776  0019EC                     i1_IRQ_TIMER_5:
 12777                           	opt stack 11
 12778                           
 12779                           ;interrupt.c: 416: PIR3bits.TMR5IF = 0;
 12780                           
 12781                           ;incstack = 0
 12782  0019EC  90A4               	bcf	4004,0,c	;volatile
 12783                           
 12784                           ;interrupt.c: 419: nb_100ms_Timer_5 += 1;
 12785  0019EE  0100               	movlb	0	; () banked
 12786  0019F0  2BA3               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;interrupt.c: 422: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 12790  0019F2  51A2               	movf	_nb_100ms_pion& (0+255),w,b
 12791  0019F4  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 12792  0019F6  E115               	bnz	i1l6636
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;interrupt.c: 423: if (Mouvement_Startup != 1) {
 12796  0019F8  044E               	decf	_Mouvement_Startup,w,c
 12797  0019FA  E001               	bz	i1l6622
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;interrupt.c: 424: nb_Pion += 1;
 12801  0019FC  2B9F               	incf	_nb_Pion& (0+255),f,b	;volatile
 12802  0019FE                     i1l6622:
 12803                           
 12804                           ; BSR set to: 0
 12805                           ;interrupt.c: 425: }
 12806                           ;interrupt.c: 428: nb_s_fonctionnement = 0;
 12807  0019FE  6BA5               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;interrupt.c: 432: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 12811  001A00  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 12812  001A02  E003               	bz	i1l607
 12813                           
 12814                           ; BSR set to: 0
 12815  001A04  519E               	movf	_nb_Pion_Objectif& (0+255),w,b
 12816  001A06  5D9F               	subwf	_nb_Pion& (0+255),w,b	;volatile
 12817  001A08  E202               	bc	i1l6628
 12818  001A0A                     i1l607:
 12819                           
 12820                           ; BSR set to: 0
 12821  001A0A  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 12822  001A0C  0012               	return	
 12823  001A0E                     i1l6628:
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;interrupt.c: 435: Buzzer_Etat((unsigned char) 0);
 12827  001A0E  0E00               	movlw	0
 12828  001A10  ECAD  F011         	call	i1_Buzzer_Etat
 12829                           
 12830                           ;interrupt.c: 436: P4_busy = 0;
 12831  001A14  0100               	movlb	0	; () banked
 12832  001A16  6BAA               	clrf	_P4_busy& (0+255),b
 12833                           
 12834                           ; BSR set to: 0
 12835                           ;interrupt.c: 437: TIMER5_Off();
 12836  001A18  ECE8  F011         	call	i1_TIMER5_Off	;wreg free
 12837                           
 12838                           ;interrupt.c: 438: Etat_Update(0);
 12839  001A1C  0E00               	movlw	0
 12840  001A1E  EF9B  F010         	goto	i1_Etat_Update
 12841  001A22                     i1l6636:
 12842                           
 12843                           ; BSR set to: 0
 12844  001A22  51A1               	movf	_nb_100ms_platine& (0+255),w,b
 12845  001A24  19A3               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 12846  001A26  A4D8               	btfss	status,2,c
 12847  001A28  0012               	return	
 12848                           
 12849                           ; BSR set to: 0
 12850                           ;interrupt.c: 465: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 12851  001A2A  0596               	decf	_moteur_indice& (0+255),w,b	;volatile
 12852  001A2C  E108               	bnz	i1l610
 12853                           
 12854                           ; BSR set to: 0
 12855  001A2E  B480               	btfsc	3968,2,c	;volatile
 12856  001A30  D006               	goto	i1l610
 12857                           
 12858                           ; BSR set to: 0
 12859  001A32  044E               	decf	_Mouvement_Startup,w,c
 12860  001A34  E104               	bnz	i1l610
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;interrupt.c: 466: Alarme_On(6);
 12864  001A36  0E06               	movlw	6
 12865  001A38  EC7F  F011         	call	i1_Alarme_On
 12866                           
 12867                           ;interrupt.c: 468: } else {
 12868  001A3C  D004               	goto	i1l6648
 12869  001A3E                     i1l610:
 12870                           
 12871                           ; BSR set to: 0
 12872                           ;interrupt.c: 469: P4_busy = 0;
 12873  001A3E  6BAA               	clrf	_P4_busy& (0+255),b
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;interrupt.c: 470: Etat_Update(6);
 12877  001A40  0E06               	movlw	6
 12878  001A42  EC9B  F010         	call	i1_Etat_Update
 12879  001A46                     i1l6648:
 12880                           
 12881                           ;interrupt.c: 473: }
 12882                           ;interrupt.c: 475: Buzzer_Etat((unsigned char) 0);
 12883  001A46  0E00               	movlw	0
 12884  001A48  ECAD  F011         	call	i1_Buzzer_Etat
 12885                           
 12886                           ;interrupt.c: 476: TIMER5_Off();
 12887  001A4C  EFE8  F011         	goto	i1_TIMER5_Off	;wreg free
 12888  001A50                     __end_ofi1_IRQ_TIMER_5:
 12889                           	opt stack 0
 12890                           tblptru	equ	0xFF8
 12891                           tblptrh	equ	0xFF7
 12892                           tblptrl	equ	0xFF6
 12893                           tablat	equ	0xFF5
 12894                           prodh	equ	0xFF4
 12895                           prodl	equ	0xFF3
 12896                           intcon	equ	0xFF2
 12897                           intcon2	equ	0xFF1
 12898                           intcon3	equ	0xFF0
 12899                           postinc0	equ	0xFEE
 12900                           wreg	equ	0xFE8
 12901                           indf1	equ	0xFE7
 12902                           postdec1	equ	0xFE5
 12903                           fsr1h	equ	0xFE2
 12904                           fsr1l	equ	0xFE1
 12905                           bsr	equ	0xFE0
 12906                           indf2	equ	0xFDF
 12907                           postinc2	equ	0xFDE
 12908                           postdec2	equ	0xFDD
 12909                           fsr2h	equ	0xFDA
 12910                           fsr2l	equ	0xFD9
 12911                           status	equ	0xFD8
 12912                           
 12913 ;; *************** function i1_TIMER5_Off *****************
 12914 ;; Defined at:
 12915 ;;		line 263 in file "timer.c"
 12916 ;; Parameters:    Size  Location     Type
 12917 ;;		None
 12918 ;; Auto vars:     Size  Location     Type
 12919 ;;		None
 12920 ;; Return value:  Size  Location     Type
 12921 ;;                  1    wreg      void 
 12922 ;; Registers used:
 12923 ;;		None
 12924 ;; Tracked objects:
 12925 ;;		On entry : 0/0
 12926 ;;		On exit  : 0/0
 12927 ;;		Unchanged: 0/0
 12928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12929 ;;      Params:         0       0       0       0
 12930 ;;      Locals:         0       0       0       0
 12931 ;;      Temps:          0       0       0       0
 12932 ;;      Totals:         0       0       0       0
 12933 ;;Total ram usage:        0 bytes
 12934 ;; Hardware stack levels used:    1
 12935 ;; Hardware stack levels required when called:    5
 12936 ;; This function calls:
 12937 ;;		Nothing
 12938 ;; This function is called by:
 12939 ;;		i1_IRQ_TIMER_5
 12940 ;; This function uses a non-reentrant model
 12941 ;;
 12942                           
 12943                           	psect	text78
 12944  0023D0                     __ptext78:
 12945                           	opt stack 0
 12946  0023D0                     i1_TIMER5_Off:
 12947                           	opt stack 13
 12948                           
 12949                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 12950                           
 12951                           ;incstack = 0
 12952  0023D0  90B7               	bcf	4023,0,c	;volatile
 12953                           
 12954                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 12955  0023D2  90A4               	bcf	4004,0,c	;volatile
 12956                           
 12957                           ;timer.c: 268: TMR5L = 0;
 12958  0023D4  6A87               	clrf	3975,c	;volatile
 12959                           
 12960                           ;timer.c: 269: TMR5H = 0;
 12961  0023D6  6A88               	clrf	3976,c	;volatile
 12962  0023D8  0012               	return		;funcret
 12963  0023DA                     __end_ofi1_TIMER5_Off:
 12964                           	opt stack 0
 12965                           tblptru	equ	0xFF8
 12966                           tblptrh	equ	0xFF7
 12967                           tblptrl	equ	0xFF6
 12968                           tablat	equ	0xFF5
 12969                           prodh	equ	0xFF4
 12970                           prodl	equ	0xFF3
 12971                           intcon	equ	0xFF2
 12972                           intcon2	equ	0xFF1
 12973                           intcon3	equ	0xFF0
 12974                           postinc0	equ	0xFEE
 12975                           wreg	equ	0xFE8
 12976                           indf1	equ	0xFE7
 12977                           postdec1	equ	0xFE5
 12978                           fsr1h	equ	0xFE2
 12979                           fsr1l	equ	0xFE1
 12980                           bsr	equ	0xFE0
 12981                           indf2	equ	0xFDF
 12982                           postinc2	equ	0xFDE
 12983                           postdec2	equ	0xFDD
 12984                           fsr2h	equ	0xFDA
 12985                           fsr2l	equ	0xFD9
 12986                           status	equ	0xFD8
 12987                           
 12988 ;; *************** function i1_Buzzer_Etat *****************
 12989 ;; Defined at:
 12990 ;;		line 29 in file "interrupt.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;  Activation      1    wreg     unsigned char 
 12993 ;; Auto vars:     Size  Location     Type
 12994 ;;  Activation      1    4[COMRAM] unsigned char 
 12995 ;; Return value:  Size  Location     Type
 12996 ;;                  1    wreg      void 
 12997 ;; Registers used:
 12998 ;;		wreg, status,2, status,0
 12999 ;; Tracked objects:
 13000 ;;		On entry : 0/0
 13001 ;;		On exit  : 0/0
 13002 ;;		Unchanged: 0/0
 13003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13004 ;;      Params:         0       0       0       0
 13005 ;;      Locals:         1       0       0       0
 13006 ;;      Temps:          0       0       0       0
 13007 ;;      Totals:         1       0       0       0
 13008 ;;Total ram usage:        1 bytes
 13009 ;; Hardware stack levels used:    1
 13010 ;; Hardware stack levels required when called:    5
 13011 ;; This function calls:
 13012 ;;		Nothing
 13013 ;; This function is called by:
 13014 ;;		i1_IRQ_TIMER_5
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           	psect	text79
 13019  00235A                     __ptext79:
 13020                           	opt stack 0
 13021  00235A                     i1_Buzzer_Etat:
 13022                           	opt stack 13
 13023                           
 13024                           ;incstack = 0
 13025                           ;i1Buzzer_Etat@Activation stored from wreg
 13026  00235A  6E05               	movwf	i1Buzzer_Etat@Activation,c
 13027                           
 13028                           ;interrupt.c: 30: if (Activation == 1) {
 13029  00235C  0405               	decf	i1Buzzer_Etat@Activation,w,c
 13030  00235E  E102               	bnz	i1l532
 13031                           
 13032                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 13033  002360  8C89               	bsf	3977,6,c	;volatile
 13034                           
 13035                           ;interrupt.c: 33: } else {
 13036  002362  0012               	return	
 13037  002364                     i1l532:
 13038                           
 13039                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 13040  002364  9C89               	bcf	3977,6,c	;volatile
 13041  002366  0012               	return		;funcret
 13042  002368                     __end_ofi1_Buzzer_Etat:
 13043                           	opt stack 0
 13044                           tblptru	equ	0xFF8
 13045                           tblptrh	equ	0xFF7
 13046                           tblptrl	equ	0xFF6
 13047                           tablat	equ	0xFF5
 13048                           prodh	equ	0xFF4
 13049                           prodl	equ	0xFF3
 13050                           intcon	equ	0xFF2
 13051                           intcon2	equ	0xFF1
 13052                           intcon3	equ	0xFF0
 13053                           postinc0	equ	0xFEE
 13054                           wreg	equ	0xFE8
 13055                           indf1	equ	0xFE7
 13056                           postdec1	equ	0xFE5
 13057                           fsr1h	equ	0xFE2
 13058                           fsr1l	equ	0xFE1
 13059                           bsr	equ	0xFE0
 13060                           indf2	equ	0xFDF
 13061                           postinc2	equ	0xFDE
 13062                           postdec2	equ	0xFDD
 13063                           fsr2h	equ	0xFDA
 13064                           fsr2l	equ	0xFD9
 13065                           status	equ	0xFD8
 13066                           
 13067 ;; *************** function i1_Alarme_On *****************
 13068 ;; Defined at:
 13069 ;;		line 18 in file "alarme.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;  alarme_new_v    1    wreg     unsigned char 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13078 ;; Tracked objects:
 13079 ;;		On entry : 3F/0
 13080 ;;		On exit  : 0/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13083 ;;      Params:         0       0       0       0
 13084 ;;      Locals:         1       0       0       0
 13085 ;;      Temps:          0       0       0       0
 13086 ;;      Totals:         1       0       0       0
 13087 ;;Total ram usage:        1 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    7
 13090 ;; This function calls:
 13091 ;;		i1_Coupe_Moteur
 13092 ;;		i1_Etat_Update
 13093 ;; This function is called by:
 13094 ;;		i1_IRQ_TIMER_5
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           	psect	text80
 13099  0022FE                     __ptext80:
 13100                           	opt stack 0
 13101  0022FE                     i1_Alarme_On:
 13102                           	opt stack 11
 13103                           
 13104                           ;incstack = 0
 13105                           ;i1Alarme_On@alarme_new_value stored from wreg
 13106  0022FE  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 13107                           
 13108                           ;alarme.c: 22: Etat_Update(1);
 13109  002300  0E01               	movlw	1
 13110  002302  EC9B  F010         	call	i1_Etat_Update
 13111                           
 13112                           ;alarme.c: 23: Alarme = alarme_new_value;
 13113  002306  C006  F0A7         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 13114                           
 13115                           ;alarme.c: 24: Coupe_Moteur();
 13116  00230A  EF1B  F011         	goto	i1_Coupe_Moteur	;wreg free
 13117  00230E                     __end_ofi1_Alarme_On:
 13118                           	opt stack 0
 13119                           tblptru	equ	0xFF8
 13120                           tblptrh	equ	0xFF7
 13121                           tblptrl	equ	0xFF6
 13122                           tablat	equ	0xFF5
 13123                           prodh	equ	0xFF4
 13124                           prodl	equ	0xFF3
 13125                           intcon	equ	0xFF2
 13126                           intcon2	equ	0xFF1
 13127                           intcon3	equ	0xFF0
 13128                           postinc0	equ	0xFEE
 13129                           wreg	equ	0xFE8
 13130                           indf1	equ	0xFE7
 13131                           postdec1	equ	0xFE5
 13132                           fsr1h	equ	0xFE2
 13133                           fsr1l	equ	0xFE1
 13134                           bsr	equ	0xFE0
 13135                           indf2	equ	0xFDF
 13136                           postinc2	equ	0xFDE
 13137                           postdec2	equ	0xFDD
 13138                           fsr2h	equ	0xFDA
 13139                           fsr2l	equ	0xFD9
 13140                           status	equ	0xFD8
 13141                           
 13142 ;; *************** function i1_Etat_Update *****************
 13143 ;; Defined at:
 13144 ;;		line 67 in file "action.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  etat_new_val    1    wreg     unsigned char 
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      void 
 13151 ;; Registers used:
 13152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13158 ;;      Params:         0       0       0       0
 13159 ;;      Locals:         1       0       0       0
 13160 ;;      Temps:          0       0       0       0
 13161 ;;      Totals:         1       0       0       0
 13162 ;;Total ram usage:        1 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    5
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		_LOW_PRIORITY_IRQ
 13169 ;;		i1_IRQ_TIMER_5
 13170 ;;		i1_Alarme_On
 13171 ;; This function uses a non-reentrant model
 13172 ;;
 13173                           
 13174                           	psect	text81
 13175  002136                     __ptext81:
 13176                           	opt stack 0
 13177  002136                     i1_Etat_Update:
 13178                           	opt stack 13
 13179                           
 13180                           ;incstack = 0
 13181                           ;i1Etat_Update@etat_new_value stored from wreg
 13182  002136  6E05               	movwf	i1Etat_Update@etat_new_value,c
 13183                           
 13184                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 13185  002138  504D               	movf	_Etat_Precedent_Index,w,c
 13186  00213A  0F6A               	addlw	low _Etat_Log
 13187  00213C  6ED9               	movwf	fsr2l,c
 13188  00213E  6ADA               	clrf	fsr2h,c
 13189  002140  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 13190                           
 13191                           ;action.c: 69: Etat = etat_new_value;
 13192  002144  C005  F0A8         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 13193                           
 13194                           ;action.c: 70: Etat_Precedent_Index++;
 13195  002148  2A4D               	incf	_Etat_Precedent_Index,f,c
 13196                           
 13197                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 13198  00214A  0E0A               	movlw	10
 13199  00214C  184D               	xorwf	_Etat_Precedent_Index,w,c
 13200  00214E  B4D8               	btfsc	status,2,c
 13201                           
 13202                           ;action.c: 72: Etat_Precedent_Index = 0;
 13203  002150  6A4D               	clrf	_Etat_Precedent_Index,c
 13204  002152  0012               	return		;funcret
 13205  002154                     __end_ofi1_Etat_Update:
 13206                           	opt stack 0
 13207                           tblptru	equ	0xFF8
 13208                           tblptrh	equ	0xFF7
 13209                           tblptrl	equ	0xFF6
 13210                           tablat	equ	0xFF5
 13211                           prodh	equ	0xFF4
 13212                           prodl	equ	0xFF3
 13213                           intcon	equ	0xFF2
 13214                           intcon2	equ	0xFF1
 13215                           intcon3	equ	0xFF0
 13216                           postinc0	equ	0xFEE
 13217                           wreg	equ	0xFE8
 13218                           indf1	equ	0xFE7
 13219                           postdec1	equ	0xFE5
 13220                           fsr1h	equ	0xFE2
 13221                           fsr1l	equ	0xFE1
 13222                           bsr	equ	0xFE0
 13223                           indf2	equ	0xFDF
 13224                           postinc2	equ	0xFDE
 13225                           postdec2	equ	0xFDD
 13226                           fsr2h	equ	0xFDA
 13227                           fsr2l	equ	0xFD9
 13228                           status	equ	0xFD8
 13229                           
 13230 ;; *************** function i1_Coupe_Moteur *****************
 13231 ;; Defined at:
 13232 ;;		line 277 in file "action.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;		None
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;		None
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      void 
 13239 ;; Registers used:
 13240 ;;		cstack
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13246 ;;      Params:         0       0       0       0
 13247 ;;      Locals:         0       0       0       0
 13248 ;;      Temps:          0       0       0       0
 13249 ;;      Totals:         0       0       0       0
 13250 ;;Total ram usage:        0 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    6
 13253 ;; This function calls:
 13254 ;;		i1_TIMER2_Off
 13255 ;; This function is called by:
 13256 ;;		i1_Alarme_On
 13257 ;; This function uses a non-reentrant model
 13258 ;;
 13259                           
 13260                           	psect	text82
 13261  002236                     __ptext82:
 13262                           	opt stack 0
 13263  002236                     i1_Coupe_Moteur:
 13264                           	opt stack 11
 13265                           
 13266                           ;action.c: 278: TIMER2_Off();
 13267                           
 13268                           ;incstack = 0
 13269  002236  EC01  F012         	call	i1_TIMER2_Off	;wreg free
 13270                           
 13271                           ;action.c: 283: LATEbits.LATE2 = 0;
 13272  00223A  948D               	bcf	3981,2,c	;volatile
 13273                           
 13274                           ;action.c: 290: LATCbits.LATC0 = 0;
 13275  00223C  908B               	bcf	3979,0,c	;volatile
 13276                           
 13277                           ;action.c: 291: LATCbits.LATC1 = 0;
 13278  00223E  928B               	bcf	3979,1,c	;volatile
 13279                           
 13280                           ;action.c: 292: OVDCOND = 0b00000000;
 13281  002240  6A6B               	clrf	3947,c	;volatile
 13282                           
 13283                           ;action.c: 293: LATD4 = 0;LATD5 = 0;
 13284  002242  988C               	bcf	3980,4,c	;volatile
 13285  002244  9A8C               	bcf	3980,5,c	;volatile
 13286                           
 13287                           ;action.c: 294: LATD6 = 0;LATD7 = 0;
 13288  002246  9C8C               	bcf	3980,6,c	;volatile
 13289  002248  9E8C               	bcf	3980,7,c	;volatile
 13290  00224A  0012               	return		;funcret
 13291  00224C                     __end_ofi1_Coupe_Moteur:
 13292                           	opt stack 0
 13293                           tblptru	equ	0xFF8
 13294                           tblptrh	equ	0xFF7
 13295                           tblptrl	equ	0xFF6
 13296                           tablat	equ	0xFF5
 13297                           prodh	equ	0xFF4
 13298                           prodl	equ	0xFF3
 13299                           intcon	equ	0xFF2
 13300                           intcon2	equ	0xFF1
 13301                           intcon3	equ	0xFF0
 13302                           postinc0	equ	0xFEE
 13303                           wreg	equ	0xFE8
 13304                           indf1	equ	0xFE7
 13305                           postdec1	equ	0xFE5
 13306                           fsr1h	equ	0xFE2
 13307                           fsr1l	equ	0xFE1
 13308                           bsr	equ	0xFE0
 13309                           indf2	equ	0xFDF
 13310                           postinc2	equ	0xFDE
 13311                           postdec2	equ	0xFDD
 13312                           fsr2h	equ	0xFDA
 13313                           fsr2l	equ	0xFD9
 13314                           status	equ	0xFD8
 13315                           
 13316 ;; *************** function i1_TIMER2_Off *****************
 13317 ;; Defined at:
 13318 ;;		line 165 in file "timer.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;		None
 13321 ;; Auto vars:     Size  Location     Type
 13322 ;;		None
 13323 ;; Return value:  Size  Location     Type
 13324 ;;                  1    wreg      void 
 13325 ;; Registers used:
 13326 ;;		None
 13327 ;; Tracked objects:
 13328 ;;		On entry : 0/0
 13329 ;;		On exit  : 0/0
 13330 ;;		Unchanged: 0/0
 13331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13332 ;;      Params:         0       0       0       0
 13333 ;;      Locals:         0       0       0       0
 13334 ;;      Temps:          0       0       0       0
 13335 ;;      Totals:         0       0       0       0
 13336 ;;Total ram usage:        0 bytes
 13337 ;; Hardware stack levels used:    1
 13338 ;; Hardware stack levels required when called:    5
 13339 ;; This function calls:
 13340 ;;		Nothing
 13341 ;; This function is called by:
 13342 ;;		i1_Coupe_Moteur
 13343 ;; This function uses a non-reentrant model
 13344 ;;
 13345                           
 13346                           	psect	text83
 13347  002402                     __ptext83:
 13348                           	opt stack 0
 13349  002402                     i1_TIMER2_Off:
 13350                           	opt stack 11
 13351                           
 13352                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 13353                           
 13354                           ;incstack = 0
 13355  002402  929D               	bcf	3997,1,c	;volatile
 13356                           
 13357                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 13358  002404  929E               	bcf	3998,1,c	;volatile
 13359  002406  0012               	return		;funcret
 13360  002408                     __end_ofi1_TIMER2_Off:
 13361                           	opt stack 0
 13362                           tblptru	equ	0xFF8
 13363                           tblptrh	equ	0xFF7
 13364                           tblptrl	equ	0xFF6
 13365                           tablat	equ	0xFF5
 13366                           prodh	equ	0xFF4
 13367                           prodl	equ	0xFF3
 13368                           intcon	equ	0xFF2
 13369                           intcon2	equ	0xFF1
 13370                           intcon3	equ	0xFF0
 13371                           postinc0	equ	0xFEE
 13372                           wreg	equ	0xFE8
 13373                           indf1	equ	0xFE7
 13374                           postdec1	equ	0xFE5
 13375                           fsr1h	equ	0xFE2
 13376                           fsr1l	equ	0xFE1
 13377                           bsr	equ	0xFE0
 13378                           indf2	equ	0xFDF
 13379                           postinc2	equ	0xFDE
 13380                           postdec2	equ	0xFDD
 13381                           fsr2h	equ	0xFDA
 13382                           fsr2l	equ	0xFD9
 13383                           status	equ	0xFD8
 13384                           
 13385 ;; *************** function i1_IRQ_TIMER_0 *****************
 13386 ;; Defined at:
 13387 ;;		line 367 in file "interrupt.c"
 13388 ;; Parameters:    Size  Location     Type
 13389 ;;		None
 13390 ;; Auto vars:     Size  Location     Type
 13391 ;;		None
 13392 ;; Return value:  Size  Location     Type
 13393 ;;                  1    wreg      void 
 13394 ;; Registers used:
 13395 ;;		wreg, status,2, status,0, cstack
 13396 ;; Tracked objects:
 13397 ;;		On entry : 0/0
 13398 ;;		On exit  : 3F/0
 13399 ;;		Unchanged: 0/0
 13400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13401 ;;      Params:         0       0       0       0
 13402 ;;      Locals:         0       0       0       0
 13403 ;;      Temps:          0       0       0       0
 13404 ;;      Totals:         0       0       0       0
 13405 ;;Total ram usage:        0 bytes
 13406 ;; Hardware stack levels used:    1
 13407 ;; Hardware stack levels required when called:    6
 13408 ;; This function calls:
 13409 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 13410 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 13411 ;; This function is called by:
 13412 ;;		_LOW_PRIORITY_IRQ
 13413 ;; This function uses a non-reentrant model
 13414 ;;
 13415                           
 13416                           	psect	text84
 13417  001B10                     __ptext84:
 13418                           	opt stack 0
 13419  001B10                     i1_IRQ_TIMER_0:
 13420                           	opt stack 13
 13421                           
 13422                           ;interrupt.c: 368: INTCONbits.TMR0IF = 0;
 13423                           
 13424                           ;incstack = 0
 13425  001B10  94F2               	bcf	intcon,2,c	;volatile
 13426                           
 13427                           ;interrupt.c: 370: nb_s_fonctionnement += 1;
 13428  001B12  0100               	movlb	0	; () banked
 13429  001B14  2BA5               	incf	_nb_s_fonctionnement& (0+255),f,b	;volatile
 13430                           
 13431                           ;interrupt.c: 371: Capteur_Capot_Compteur_Temps_S += 1;
 13432  001B16  2B9B               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 13433                           
 13434                           ;interrupt.c: 372: delay_s_counter += 1;
 13435  001B18  2B8A               	incf	_delay_s_counter& (0+255),f,b	;volatile
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;interrupt.c: 377: if (nb_s_fonctionnement == 2) {
 13439  001B1A  0E02               	movlw	2
 13440  001B1C  19A5               	xorwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
 13441  001B1E  E01F               	bz	i1l6610
 13442  001B20  0012               	return	
 13443  001B22                     i1l6590:
 13444                           
 13445                           ; BSR set to: 0
 13446                           ;interrupt.c: 385: Surveillance_Consommation_Moteur_1_Activer();
 13447  001B22  EC8F  F011         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13448                           
 13449                           ;interrupt.c: 386: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13450  001B26  0100               	movlb	0	; () banked
 13451  001B28  5193               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13452  001B2A  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13453  001B2C  E203               	bc	i1l588
 13454  001B2E                     i1l6594:
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;interrupt.c: 387: consigne = Consigne_Max;
 13458  001B2E  C094  F095         	movff	_Consigne_Max,_consigne	;volatile
 13459                           
 13460                           ;interrupt.c: 388: } else {
 13461  001B32  0012               	return	
 13462  001B34                     i1l588:
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;interrupt.c: 389: consigne = Consigne_Max_Moteur_X;
 13466  001B34  C093  F095         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13467  001B38  0012               	return	
 13468  001B3A                     i1l6596:
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;interrupt.c: 393: Surveillance_Consommation_Moteur_2_Activer();
 13472  001B3A  EC87  F011         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13473                           
 13474                           ;interrupt.c: 395: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 13475  001B3E  0100               	movlb	0	; () banked
 13476  001B40  5192               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 13477  001B42  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13478  001B44  E3F4               	bnc	i1l6594
 13479                           
 13480                           ; BSR set to: 0
 13481                           ;interrupt.c: 398: consigne = Consigne_Max_Moteur_Z;
 13482  001B46  C092  F095         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 13483  001B4A  0012               	return	
 13484  001B4C                     i1l6602:
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;interrupt.c: 402: Surveillance_Consommation_Moteur_2_Activer();
 13488  001B4C  EC87  F011         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13489                           
 13490                           ;interrupt.c: 403: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 13491  001B50  0100               	movlb	0	; () banked
 13492  001B52  5191               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 13493  001B54  5D94               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13494  001B56  E3EB               	bnc	i1l6594
 13495                           
 13496                           ; BSR set to: 0
 13497                           ;interrupt.c: 406: consigne = Consigne_Max_Moteur_Bequille;
 13498  001B58  C091  F095         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 13499  001B5C  0012               	return	
 13500  001B5E                     i1l6610:
 13501                           
 13502                           ; BSR set to: 0
 13503  001B5E  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 13504                           
 13505                           ; Switch size 1, requested type "speed"
 13506                           ; Number of cases is 3, Range of values is 1 to 3
 13507                           ; switch strategies available:
 13508                           ; Name         Instructions Cycles
 13509                           ; simple_byte           10     6 (average)
 13510                           ;	Chosen strategy is simple_byte
 13511  001B60  0A01               	xorlw	1	; case 1
 13512  001B62  E0DF               	bz	i1l6590
 13513  001B64  0A03               	xorlw	3	; case 2
 13514  001B66  E0E9               	bz	i1l6596
 13515  001B68  0A01               	xorlw	1	; case 3
 13516  001B6A  E0F0               	bz	i1l6602
 13517                           
 13518                           ; BSR set to: 0
 13519  001B6C  0012               	return		;funcret
 13520  001B6E                     __end_ofi1_IRQ_TIMER_0:
 13521                           	opt stack 0
 13522                           tblptru	equ	0xFF8
 13523                           tblptrh	equ	0xFF7
 13524                           tblptrl	equ	0xFF6
 13525                           tablat	equ	0xFF5
 13526                           prodh	equ	0xFF4
 13527                           prodl	equ	0xFF3
 13528                           intcon	equ	0xFF2
 13529                           intcon2	equ	0xFF1
 13530                           intcon3	equ	0xFF0
 13531                           postinc0	equ	0xFEE
 13532                           wreg	equ	0xFE8
 13533                           indf1	equ	0xFE7
 13534                           postdec1	equ	0xFE5
 13535                           fsr1h	equ	0xFE2
 13536                           fsr1l	equ	0xFE1
 13537                           bsr	equ	0xFE0
 13538                           indf2	equ	0xFDF
 13539                           postinc2	equ	0xFDE
 13540                           postdec2	equ	0xFDD
 13541                           fsr2h	equ	0xFDA
 13542                           fsr2l	equ	0xFD9
 13543                           status	equ	0xFD8
 13544                           
 13545 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 13546 ;; Defined at:
 13547 ;;		line 880 in file "interrupt.c"
 13548 ;; Parameters:    Size  Location     Type
 13549 ;;		None
 13550 ;; Auto vars:     Size  Location     Type
 13551 ;;		None
 13552 ;; Return value:  Size  Location     Type
 13553 ;;                  1    wreg      void 
 13554 ;; Registers used:
 13555 ;;		wreg, status,2, status,0
 13556 ;; Tracked objects:
 13557 ;;		On entry : 0/0
 13558 ;;		On exit  : 0/0
 13559 ;;		Unchanged: 0/0
 13560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13561 ;;      Params:         0       0       0       0
 13562 ;;      Locals:         0       0       0       0
 13563 ;;      Temps:          0       0       0       0
 13564 ;;      Totals:         0       0       0       0
 13565 ;;Total ram usage:        0 bytes
 13566 ;; Hardware stack levels used:    1
 13567 ;; Hardware stack levels required when called:    5
 13568 ;; This function calls:
 13569 ;;		Nothing
 13570 ;; This function is called by:
 13571 ;;		i1_IRQ_TIMER_0
 13572 ;; This function uses a non-reentrant model
 13573 ;;
 13574                           
 13575                           	psect	text85
 13576  00230E                     __ptext85:
 13577                           	opt stack 0
 13578  00230E                     i1_Surveillance_Consommation_Moteur_2_Activer:
 13579                           	opt stack 13
 13580                           
 13581                           ;interrupt.c: 881: if (Surveillance_Consommation_Moteur_2 != 1) {
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;incstack = 0
 13585  00230E  0448               	decf	_Surveillance_Consommation_Moteur_2,w,c
 13586  002310  B4D8               	btfsc	status,2,c
 13587  002312  0012               	return	
 13588                           
 13589                           ;interrupt.c: 882: Surveillance_Consommation_Moteur_2 = 1;
 13590  002314  0E01               	movlw	1
 13591  002316  6E48               	movwf	_Surveillance_Consommation_Moteur_2,c
 13592                           
 13593                           ;interrupt.c: 883: INTCON3bits.INT2IF = 0;
 13594  002318  92F0               	bcf	intcon3,1,c	;volatile
 13595                           
 13596                           ;interrupt.c: 884: INTCON3bits.INT2IE = 1;
 13597  00231A  88F0               	bsf	intcon3,4,c	;volatile
 13598  00231C  0C01               	retlw	1	;funcret
 13599  00231E                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 13600                           	opt stack 0
 13601                           tblptru	equ	0xFF8
 13602                           tblptrh	equ	0xFF7
 13603                           tblptrl	equ	0xFF6
 13604                           tablat	equ	0xFF5
 13605                           prodh	equ	0xFF4
 13606                           prodl	equ	0xFF3
 13607                           intcon	equ	0xFF2
 13608                           intcon2	equ	0xFF1
 13609                           intcon3	equ	0xFF0
 13610                           postinc0	equ	0xFEE
 13611                           wreg	equ	0xFE8
 13612                           indf1	equ	0xFE7
 13613                           postdec1	equ	0xFE5
 13614                           fsr1h	equ	0xFE2
 13615                           fsr1l	equ	0xFE1
 13616                           bsr	equ	0xFE0
 13617                           indf2	equ	0xFDF
 13618                           postinc2	equ	0xFDE
 13619                           postdec2	equ	0xFDD
 13620                           fsr2h	equ	0xFDA
 13621                           fsr2l	equ	0xFD9
 13622                           status	equ	0xFD8
 13623                           
 13624 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 13625 ;; Defined at:
 13626 ;;		line 864 in file "interrupt.c"
 13627 ;; Parameters:    Size  Location     Type
 13628 ;;		None
 13629 ;; Auto vars:     Size  Location     Type
 13630 ;;		None
 13631 ;; Return value:  Size  Location     Type
 13632 ;;                  1    wreg      void 
 13633 ;; Registers used:
 13634 ;;		wreg, status,2, status,0
 13635 ;; Tracked objects:
 13636 ;;		On entry : 0/0
 13637 ;;		On exit  : 0/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13640 ;;      Params:         0       0       0       0
 13641 ;;      Locals:         0       0       0       0
 13642 ;;      Temps:          0       0       0       0
 13643 ;;      Totals:         0       0       0       0
 13644 ;;Total ram usage:        0 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; Hardware stack levels required when called:    5
 13647 ;; This function calls:
 13648 ;;		Nothing
 13649 ;; This function is called by:
 13650 ;;		i1_IRQ_TIMER_0
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           	psect	text86
 13655  00231E                     __ptext86:
 13656                           	opt stack 0
 13657  00231E                     i1_Surveillance_Consommation_Moteur_1_Activer:
 13658                           	opt stack 13
 13659                           
 13660                           ;interrupt.c: 865: if (Surveillance_Consommation_Moteur_1 != 1) {
 13661                           
 13662                           ;incstack = 0
 13663  00231E  0449               	decf	_Surveillance_Consommation_Moteur_1,w,c
 13664  002320  B4D8               	btfsc	status,2,c
 13665  002322  0012               	return	
 13666                           
 13667                           ;interrupt.c: 866: Surveillance_Consommation_Moteur_1 = 1;
 13668  002324  0E01               	movlw	1
 13669  002326  6E49               	movwf	_Surveillance_Consommation_Moteur_1,c
 13670                           
 13671                           ;interrupt.c: 867: INTCON3bits.INT1IF = 0;
 13672  002328  90F0               	bcf	intcon3,0,c	;volatile
 13673                           
 13674                           ;interrupt.c: 868: INTCON3bits.INT1IE = 1;
 13675  00232A  86F0               	bsf	intcon3,3,c	;volatile
 13676  00232C  0C01               	retlw	1	;funcret
 13677  00232E                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 13678                           	opt stack 0
 13679                           tblptru	equ	0xFF8
 13680                           tblptrh	equ	0xFF7
 13681                           tblptrl	equ	0xFF6
 13682                           tablat	equ	0xFF5
 13683                           prodh	equ	0xFF4
 13684                           prodl	equ	0xFF3
 13685                           intcon	equ	0xFF2
 13686                           intcon2	equ	0xFF1
 13687                           intcon3	equ	0xFF0
 13688                           postinc0	equ	0xFEE
 13689                           wreg	equ	0xFE8
 13690                           indf1	equ	0xFE7
 13691                           postdec1	equ	0xFE5
 13692                           fsr1h	equ	0xFE2
 13693                           fsr1l	equ	0xFE1
 13694                           bsr	equ	0xFE0
 13695                           indf2	equ	0xFDF
 13696                           postinc2	equ	0xFDE
 13697                           postdec2	equ	0xFDD
 13698                           fsr2h	equ	0xFDA
 13699                           fsr2l	equ	0xFD9
 13700                           status	equ	0xFD8
 13701                           
 13702 ;; *************** function i1_IRQ_PWM *****************
 13703 ;; Defined at:
 13704 ;;		line 483 in file "interrupt.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;		None
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;		None
 13709 ;; Return value:  Size  Location     Type
 13710 ;;                  1    wreg      void 
 13711 ;; Registers used:
 13712 ;;		None
 13713 ;; Tracked objects:
 13714 ;;		On entry : 0/0
 13715 ;;		On exit  : 0/0
 13716 ;;		Unchanged: 0/0
 13717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13718 ;;      Params:         0       0       0       0
 13719 ;;      Locals:         0       0       0       0
 13720 ;;      Temps:          0       0       0       0
 13721 ;;      Totals:         0       0       0       0
 13722 ;;Total ram usage:        0 bytes
 13723 ;; Hardware stack levels used:    1
 13724 ;; Hardware stack levels required when called:    5
 13725 ;; This function calls:
 13726 ;;		Nothing
 13727 ;; This function is called by:
 13728 ;;		_LOW_PRIORITY_IRQ
 13729 ;; This function uses a non-reentrant model
 13730 ;;
 13731                           
 13732                           	psect	text87
 13733  002420                     __ptext87:
 13734                           	opt stack 0
 13735  002420                     i1_IRQ_PWM:
 13736                           	opt stack 14
 13737                           
 13738                           ;interrupt.c: 485: PTIF = 0;
 13739                           
 13740                           ;incstack = 0
 13741  002420  98A4               	bcf	4004,4,c	;volatile
 13742  002422  0012               	return		;funcret
 13743  002424                     __end_ofi1_IRQ_PWM:
 13744                           	opt stack 0
 13745                           tblptru	equ	0xFF8
 13746                           tblptrh	equ	0xFF7
 13747                           tblptrl	equ	0xFF6
 13748                           tablat	equ	0xFF5
 13749                           prodh	equ	0xFF4
 13750                           prodl	equ	0xFF3
 13751                           intcon	equ	0xFF2
 13752                           intcon2	equ	0xFF1
 13753                           intcon3	equ	0xFF0
 13754                           postinc0	equ	0xFEE
 13755                           wreg	equ	0xFE8
 13756                           indf1	equ	0xFE7
 13757                           postdec1	equ	0xFE5
 13758                           fsr1h	equ	0xFE2
 13759                           fsr1l	equ	0xFE1
 13760                           bsr	equ	0xFE0
 13761                           indf2	equ	0xFDF
 13762                           postinc2	equ	0xFDE
 13763                           postdec2	equ	0xFDD
 13764                           fsr2h	equ	0xFDA
 13765                           fsr2l	equ	0xFD9
 13766                           status	equ	0xFD8
 13767                           
 13768 ;; *************** function i1_IRQ_ADC *****************
 13769 ;; Defined at:
 13770 ;;		line 488 in file "interrupt.c"
 13771 ;; Parameters:    Size  Location     Type
 13772 ;;		None
 13773 ;; Auto vars:     Size  Location     Type
 13774 ;;		None
 13775 ;; Return value:  Size  Location     Type
 13776 ;;                  1    wreg      void 
 13777 ;; Registers used:
 13778 ;;		wreg, status,2, status,0
 13779 ;; Tracked objects:
 13780 ;;		On entry : 0/0
 13781 ;;		On exit  : 3F/0
 13782 ;;		Unchanged: 0/0
 13783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13784 ;;      Params:         0       0       0       0
 13785 ;;      Locals:         0       0       0       0
 13786 ;;      Temps:          3       0       0       0
 13787 ;;      Totals:         3       0       0       0
 13788 ;;Total ram usage:        3 bytes
 13789 ;; Hardware stack levels used:    1
 13790 ;; Hardware stack levels required when called:    5
 13791 ;; This function calls:
 13792 ;;		Nothing
 13793 ;; This function is called by:
 13794 ;;		_LOW_PRIORITY_IRQ
 13795 ;; This function uses a non-reentrant model
 13796 ;;
 13797                           
 13798                           	psect	text88
 13799  000F7C                     __ptext88:
 13800                           	opt stack 0
 13801  000F7C                     i1_IRQ_ADC:
 13802                           	opt stack 14
 13803                           
 13804                           ;interrupt.c: 489: switch (moteur_indice) {
 13805                           
 13806                           ;incstack = 0
 13807  000F7C  D0C7               	goto	i1l6708
 13808  000F7E                     i1l620:
 13809                           
 13810                           ; BSR set to: 0
 13811                           ;interrupt.c: 491: Image_Courant_Moteur_1 = ADRESH;
 13812  000F7E  CFC4 F098          	movff	4036,_Image_Courant_Moteur_1	;volatile
 13813                           
 13814                           ;interrupt.c: 492: Nouvelle_Valeur_ADC = 1;
 13815  000F82  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13816                           
 13817                           ;interrupt.c: 494: ADIF = 0;
 13818  000F84  9C9E               	bcf	3998,6,c	;volatile
 13819                           
 13820                           ; BSR set to: 0
 13821                           ;interrupt.c: 497: erreur = consigne - Image_Courant_Moteur_1;
 13822  000F86  5198               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 13823  000F88  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 13824  000F8A  6F84               	movwf	_erreur& (0+255),b	;volatile
 13825  000F8C  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13826  000F8E  A0D8               	btfss	status,0,c
 13827  000F90  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13828                           
 13829                           ;interrupt.c: 498: if (erreur >= 10) duty++;
 13830  000F92  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13831  000F94  D008               	goto	i1l6658
 13832  000F96  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13833  000F98  E103               	bnz	i1u451_20
 13834  000F9A  0E0A               	movlw	10
 13835  000F9C  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13836  000F9E  E303               	bnc	i1l6658
 13837  000FA0                     i1u451_20:
 13838                           
 13839                           ; BSR set to: 0
 13840  000FA0  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13841  000FA2  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13842  000FA4  D006               	goto	i1l622
 13843  000FA6                     i1l6658:
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;interrupt.c: 500: else if (erreur < 0) duty += erreur;
 13847  000FA6  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13848  000FA8  D004               	goto	i1l622
 13849                           
 13850                           ; BSR set to: 0
 13851  000FAA  5184               	movf	_erreur& (0+255),w,b	;volatile
 13852  000FAC  2786               	addwf	_duty& (0+255),f,b	;volatile
 13853  000FAE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13854  000FB0  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 13855  000FB2                     i1l622:
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;interrupt.c: 505: if (duty > PTPERL) duty = PTPERL;
 13859  000FB2  507B               	movf	3963,w,c	;volatile
 13860  000FB4  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13861  000FB6  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13862  000FB8  5186               	movf	_duty& (0+255),w,b	;volatile
 13863  000FBA  5C05               	subwf	??i1_IRQ_ADC,w,c
 13864  000FBC  5006               	movf	??i1_IRQ_ADC+1,w,c
 13865  000FBE  0A80               	xorlw	128
 13866  000FC0  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13867  000FC2  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13868  000FC4  0A80               	xorlw	128
 13869  000FC6  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13870  000FC8  E203               	bc	i1l6664
 13871                           
 13872                           ; BSR set to: 0
 13873  000FCA  CF7B F086          	movff	3963,_duty	;volatile
 13874  000FCE  D003               	goto	L5
 13875  000FD0                     i1l6664:
 13876                           
 13877                           ; BSR set to: 0
 13878                           ;interrupt.c: 506: else if (duty < 0) duty = 0;
 13879  000FD0  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13880  000FD2  D002               	goto	i1l6668
 13881                           
 13882                           ; BSR set to: 0
 13883  000FD4  6B86               	clrf	_duty& (0+255),b	;volatile
 13884  000FD6                     L5:
 13885  000FD6  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13886  000FD8                     i1l6668:
 13887                           
 13888                           ; BSR set to: 0
 13889                           ;interrupt.c: 507: PDC0L = (char) (duty << 2);
 13890  000FD8  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13891  000FDA  46E8               	rlncf	wreg,f,c
 13892  000FDC  0BFC               	andlw	252
 13893  000FDE  6E79               	movwf	3961,c	;volatile
 13894                           
 13895                           ;interrupt.c: 508: PDC0H = (char) ((duty << 2) >> 8);
 13896  000FE0  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 13897  000FE4  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 13898  000FE8  90D8               	bcf	status,0,c
 13899  000FEA  3605               	rlcf	??i1_IRQ_ADC,f,c
 13900  000FEC  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13901  000FEE  90D8               	bcf	status,0,c
 13902  000FF0  3605               	rlcf	??i1_IRQ_ADC,f,c
 13903  000FF2  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13904  000FF4  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 13905  000FF8  6A06               	clrf	??i1_IRQ_ADC+1,c
 13906  000FFA  BE05               	btfsc	??i1_IRQ_ADC,7,c
 13907  000FFC  6806               	setf	??i1_IRQ_ADC+1,c
 13908  000FFE  5005               	movf	??i1_IRQ_ADC,w,c
 13909  001000  6E78               	movwf	3960,c	;volatile
 13910                           
 13911                           ;interrupt.c: 510: break;
 13912  001002  0012               	return	
 13913  001004                     i1l628:
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;interrupt.c: 517: Image_Courant_Moteur_2 = ADRESH;
 13917  001004  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 13918                           
 13919                           ;interrupt.c: 518: Nouvelle_Valeur_ADC = 1;
 13920  001008  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13921                           
 13922                           ;interrupt.c: 520: ADIF = 0;
 13923  00100A  9C9E               	bcf	3998,6,c	;volatile
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;interrupt.c: 523: erreur = consigne - Image_Courant_Moteur_2;
 13927  00100C  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 13928  00100E  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 13929  001010  6F84               	movwf	_erreur& (0+255),b	;volatile
 13930  001012  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13931  001014  A0D8               	btfss	status,0,c
 13932  001016  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13933                           
 13934                           ;interrupt.c: 524: if (erreur >= 10) duty++;
 13935  001018  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13936  00101A  D008               	goto	i1l6674
 13937  00101C  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13938  00101E  E103               	bnz	i1u455_20
 13939  001020  0E0A               	movlw	10
 13940  001022  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13941  001024  E303               	bnc	i1l6674
 13942  001026                     i1u455_20:
 13943                           
 13944                           ; BSR set to: 0
 13945  001026  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13946  001028  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13947  00102A  D005               	goto	i1l6678
 13948  00102C                     i1l6674:
 13949                           
 13950                           ; BSR set to: 0
 13951                           ;interrupt.c: 525: else if (erreur < 0) duty--;
 13952  00102C  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13953  00102E  D003               	goto	i1l6678
 13954                           
 13955                           ; BSR set to: 0
 13956  001030  0786               	decf	_duty& (0+255),f,b	;volatile
 13957  001032  A0D8               	btfss	status,0,c
 13958  001034  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 13959  001036                     i1l6678:
 13960                           
 13961                           ; BSR set to: 0
 13962                           ;interrupt.c: 529: if (duty > PTPERL) duty = PTPERL;
 13963  001036  507B               	movf	3963,w,c	;volatile
 13964  001038  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13965  00103A  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13966  00103C  5186               	movf	_duty& (0+255),w,b	;volatile
 13967  00103E  5C05               	subwf	??i1_IRQ_ADC,w,c
 13968  001040  5006               	movf	??i1_IRQ_ADC+1,w,c
 13969  001042  0A80               	xorlw	128
 13970  001044  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13971  001046  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13972  001048  0A80               	xorlw	128
 13973  00104A  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13974  00104C  E203               	bc	i1l6682
 13975                           
 13976                           ; BSR set to: 0
 13977  00104E  CF7B F086          	movff	3963,_duty	;volatile
 13978  001052  D003               	goto	L6
 13979  001054                     i1l6682:
 13980                           
 13981                           ; BSR set to: 0
 13982                           ;interrupt.c: 530: else if (duty < 0) duty = 0;
 13983  001054  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13984  001056  D002               	goto	i1l6686
 13985                           
 13986                           ; BSR set to: 0
 13987  001058  6B86               	clrf	_duty& (0+255),b	;volatile
 13988  00105A                     L6:
 13989  00105A  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13990  00105C                     i1l6686:
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;interrupt.c: 531: PDC1L = (char) (duty << 2);
 13994  00105C  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13995  00105E  46E8               	rlncf	wreg,f,c
 13996  001060  0BFC               	andlw	252
 13997  001062  6E77               	movwf	3959,c	;volatile
 13998                           
 13999                           ;interrupt.c: 532: PDC1H = (char) ((duty << 2) >> 8);
 14000  001064  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14001  001068  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14002  00106C  90D8               	bcf	status,0,c
 14003  00106E  3605               	rlcf	??i1_IRQ_ADC,f,c
 14004  001070  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14005  001072  90D8               	bcf	status,0,c
 14006  001074  3605               	rlcf	??i1_IRQ_ADC,f,c
 14007  001076  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14008  001078  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14009  00107C  6A06               	clrf	??i1_IRQ_ADC+1,c
 14010  00107E  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14011  001080  6806               	setf	??i1_IRQ_ADC+1,c
 14012  001082  5005               	movf	??i1_IRQ_ADC,w,c
 14013  001084  6E76               	movwf	3958,c	;volatile
 14014                           
 14015                           ;interrupt.c: 534: break;
 14016  001086  0012               	return	
 14017  001088                     i1l635:
 14018                           
 14019                           ; BSR set to: 0
 14020                           ;interrupt.c: 538: Image_Courant_Moteur_2 = ADRESH;
 14021  001088  CFC4 F097          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14022                           
 14023                           ;interrupt.c: 539: Nouvelle_Valeur_ADC = 1;
 14024  00108C  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14025                           
 14026                           ;interrupt.c: 541: ADIF = 0;
 14027  00108E  9C9E               	bcf	3998,6,c	;volatile
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;interrupt.c: 544: erreur = consigne - Image_Courant_Moteur_2;
 14031  001090  5197               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14032  001092  5D95               	subwf	_consigne& (0+255),w,b	;volatile
 14033  001094  6F84               	movwf	_erreur& (0+255),b	;volatile
 14034  001096  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14035  001098  A0D8               	btfss	status,0,c
 14036  00109A  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14037                           
 14038                           ;interrupt.c: 545: if (erreur >= 10) duty++;
 14039  00109C  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14040  00109E  D008               	goto	i1l6692
 14041  0010A0  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14042  0010A2  E103               	bnz	i1u459_20
 14043  0010A4  0E0A               	movlw	10
 14044  0010A6  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14045  0010A8  E303               	bnc	i1l6692
 14046  0010AA                     i1u459_20:
 14047                           
 14048                           ; BSR set to: 0
 14049  0010AA  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14050  0010AC  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14051  0010AE  D005               	goto	i1l6696
 14052  0010B0                     i1l6692:
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;interrupt.c: 546: else if (erreur < 0) duty--;
 14056  0010B0  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14057  0010B2  D003               	goto	i1l6696
 14058                           
 14059                           ; BSR set to: 0
 14060  0010B4  0786               	decf	_duty& (0+255),f,b	;volatile
 14061  0010B6  A0D8               	btfss	status,0,c
 14062  0010B8  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14063  0010BA                     i1l6696:
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;interrupt.c: 550: if (duty > PTPERL) duty = PTPERL;
 14067  0010BA  507B               	movf	3963,w,c	;volatile
 14068  0010BC  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14069  0010BE  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14070  0010C0  5186               	movf	_duty& (0+255),w,b	;volatile
 14071  0010C2  5C05               	subwf	??i1_IRQ_ADC,w,c
 14072  0010C4  5006               	movf	??i1_IRQ_ADC+1,w,c
 14073  0010C6  0A80               	xorlw	128
 14074  0010C8  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14075  0010CA  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14076  0010CC  0A80               	xorlw	128
 14077  0010CE  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14078  0010D0  E203               	bc	i1l6700
 14079                           
 14080                           ; BSR set to: 0
 14081  0010D2  CF7B F086          	movff	3963,_duty	;volatile
 14082  0010D6  D003               	goto	L7
 14083  0010D8                     i1l6700:
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;interrupt.c: 551: else if (duty < 0) duty = 0;
 14087  0010D8  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14088  0010DA  D002               	goto	i1l6704
 14089                           
 14090                           ; BSR set to: 0
 14091  0010DC  6B86               	clrf	_duty& (0+255),b	;volatile
 14092  0010DE                     L7:
 14093  0010DE  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14094  0010E0                     i1l6704:
 14095                           
 14096                           ; BSR set to: 0
 14097                           ;interrupt.c: 552: PDC1L = (char) (duty << 2);
 14098  0010E0  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14099  0010E2  46E8               	rlncf	wreg,f,c
 14100  0010E4  0BFC               	andlw	252
 14101  0010E6  6E77               	movwf	3959,c	;volatile
 14102                           
 14103                           ;interrupt.c: 553: PDC1H = (char) ((duty << 2) >> 8);
 14104  0010E8  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14105  0010EC  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14106  0010F0  90D8               	bcf	status,0,c
 14107  0010F2  3605               	rlcf	??i1_IRQ_ADC,f,c
 14108  0010F4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14109  0010F6  90D8               	bcf	status,0,c
 14110  0010F8  3605               	rlcf	??i1_IRQ_ADC,f,c
 14111  0010FA  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14112  0010FC  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14113  001100  6A06               	clrf	??i1_IRQ_ADC+1,c
 14114  001102  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14115  001104  6806               	setf	??i1_IRQ_ADC+1,c
 14116  001106  5005               	movf	??i1_IRQ_ADC,w,c
 14117  001108  6E76               	movwf	3958,c	;volatile
 14118                           
 14119                           ;interrupt.c: 555: break;
 14120  00110A  0012               	return	
 14121  00110C                     i1l6708:
 14122  00110C  0100               	movlb	0	; () banked
 14123  00110E  5196               	movf	_moteur_indice& (0+255),w,b	;volatile
 14124                           
 14125                           ; Switch size 1, requested type "speed"
 14126                           ; Number of cases is 3, Range of values is 1 to 3
 14127                           ; switch strategies available:
 14128                           ; Name         Instructions Cycles
 14129                           ; simple_byte           10     6 (average)
 14130                           ;	Chosen strategy is simple_byte
 14131  001110  0A01               	xorlw	1	; case 1
 14132  001112  E101 D734          	bz	i1l620
 14133  001116  0A03               	xorlw	3	; case 2
 14134  001118  E101 D774          	bz	i1l628
 14135  00111C  0A01               	xorlw	1	; case 3
 14136  00111E  E0B4               	bz	i1l635
 14137                           
 14138                           ; BSR set to: 0
 14139  001120  0012               	return		;funcret
 14140  001122                     __end_ofi1_IRQ_ADC:
 14141                           	opt stack 0
 14142                           tblptru	equ	0xFF8
 14143                           tblptrh	equ	0xFF7
 14144                           tblptrl	equ	0xFF6
 14145                           tablat	equ	0xFF5
 14146                           prodh	equ	0xFF4
 14147                           prodl	equ	0xFF3
 14148                           intcon	equ	0xFF2
 14149                           intcon2	equ	0xFF1
 14150                           intcon3	equ	0xFF0
 14151                           postinc0	equ	0xFEE
 14152                           wreg	equ	0xFE8
 14153                           indf1	equ	0xFE7
 14154                           postdec1	equ	0xFE5
 14155                           fsr1h	equ	0xFE2
 14156                           fsr1l	equ	0xFE1
 14157                           bsr	equ	0xFE0
 14158                           indf2	equ	0xFDF
 14159                           postinc2	equ	0xFDE
 14160                           postdec2	equ	0xFDD
 14161                           fsr2h	equ	0xFDA
 14162                           fsr2l	equ	0xFD9
 14163                           status	equ	0xFD8
 14164                           
 14165 ;; *************** function _SPI_ISR *****************
 14166 ;; Defined at:
 14167 ;;		line 169 in file "spi.c"
 14168 ;; Parameters:    Size  Location     Type
 14169 ;;		None
 14170 ;; Auto vars:     Size  Location     Type
 14171 ;;  i               1    6[COMRAM] unsigned char 
 14172 ;; Return value:  Size  Location     Type
 14173 ;;                  1    wreg      void 
 14174 ;; Registers used:
 14175 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14176 ;; Tracked objects:
 14177 ;;		On entry : 0/0
 14178 ;;		On exit  : 0/0
 14179 ;;		Unchanged: 0/0
 14180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14181 ;;      Params:         0       0       0       0
 14182 ;;      Locals:         1       0       0       0
 14183 ;;      Temps:          2       0       0       0
 14184 ;;      Totals:         3       0       0       0
 14185 ;;Total ram usage:        3 bytes
 14186 ;; Hardware stack levels used:    1
 14187 ;; Hardware stack levels required when called:    5
 14188 ;; This function calls:
 14189 ;;		Nothing
 14190 ;; This function is called by:
 14191 ;;		_LOW_PRIORITY_IRQ
 14192 ;; This function uses a non-reentrant model
 14193 ;;
 14194                           
 14195                           	psect	text89
 14196  001258                     __ptext89:
 14197                           	opt stack 0
 14198  001258                     _SPI_ISR:
 14199                           	opt stack 14
 14200                           
 14201                           ;spi.c: 171: unsigned char i;
 14202                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;incstack = 0
 14206  001258  969E               	bcf	3998,3,c	;volatile
 14207                           
 14208                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 14209  00125A  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 14210                           
 14211                           ;spi.c: 180: switch(SPI_MODE){
 14212  00125E  D075               	goto	i1l6528
 14213  001260                     i1l6492:
 14214                           
 14215                           ;spi.c: 196: if (i!=0x0D){
 14216  001260  0E0D               	movlw	13
 14217  001262  1807               	xorwf	SPI_ISR@i,w,c
 14218  001264  E012               	bz	i1l1661
 14219                           
 14220                           ;spi.c: 197: spiTxIndex++;
 14221  001266  2A44               	incf	_spiTxIndex,f,c	;volatile
 14222                           
 14223                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 14224  001268  0E40               	movlw	low _spiTxBuffer
 14225  00126A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14226  00126C  6ED9               	movwf	fsr2l,c
 14227  00126E  6ADA               	clrf	fsr2h,c
 14228  001270  0E01               	movlw	high _spiTxBuffer
 14229  001272  22DA               	addwfc	fsr2h,f,c
 14230  001274  50DF               	movf	indf2,w,c
 14231  001276  E009               	bz	i1l1661
 14232                           
 14233                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 14234  001278  0E40               	movlw	low _spiTxBuffer
 14235  00127A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14236  00127C  6ED9               	movwf	fsr2l,c
 14237  00127E  6ADA               	clrf	fsr2h,c
 14238  001280  0E01               	movlw	high _spiTxBuffer
 14239  001282  22DA               	addwfc	fsr2h,f,c
 14240  001284  50DF               	movf	indf2,w,c
 14241  001286  6EC9               	movwf	4041,c	;volatile
 14242                           
 14243                           ;spi.c: 201: } else {
 14244  001288  0012               	return	
 14245  00128A                     i1l1661:
 14246                           
 14247                           ;spi.c: 202: SPI_MODE = 0;
 14248  00128A  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14249  00128C  0012               	return	
 14250  00128E                     i1l6500:
 14251                           
 14252                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 14253  00128E  0E00               	movlw	low _spiRxBuffer
 14254  001290  2443               	addwf	_spiRxIndex,w,c	;volatile
 14255  001292  6ED9               	movwf	fsr2l,c
 14256  001294  6ADA               	clrf	fsr2h,c
 14257  001296  0E02               	movlw	high _spiRxBuffer
 14258  001298  22DA               	addwfc	fsr2h,f,c
 14259  00129A  C007  FFDF         	movff	SPI_ISR@i,indf2
 14260                           
 14261                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 14262  00129E  0E00               	movlw	low _spiRxBuffer
 14263  0012A0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14264  0012A2  6ED9               	movwf	fsr2l,c
 14265  0012A4  6ADA               	clrf	fsr2h,c
 14266  0012A6  0E02               	movlw	high _spiRxBuffer
 14267  0012A8  22DA               	addwfc	fsr2h,f,c
 14268  0012AA  50DF               	movf	indf2,w,c
 14269  0012AC  0E01               	movlw	1
 14270  0012AE  A4D8               	btfss	status,2,c
 14271  0012B0  0E00               	movlw	0
 14272  0012B2  6E05               	movwf	??_SPI_ISR& (0+255),c
 14273  0012B4  0E00               	movlw	low _spiRxBuffer
 14274  0012B6  2443               	addwf	_spiRxIndex,w,c	;volatile
 14275  0012B8  6ED9               	movwf	fsr2l,c
 14276  0012BA  6ADA               	clrf	fsr2h,c
 14277  0012BC  0E02               	movlw	high _spiRxBuffer
 14278  0012BE  22DA               	addwfc	fsr2h,f,c
 14279  0012C0  0E0D               	movlw	13
 14280  0012C2  18DE               	xorwf	postinc2,w,c
 14281  0012C4  0E01               	movlw	1
 14282  0012C6  A4D8               	btfss	status,2,c
 14283  0012C8  0E00               	movlw	0
 14284  0012CA  1005               	iorwf	??_SPI_ISR,w,c
 14285  0012CC  A0E8               	btfss	wreg,0,c
 14286  0012CE  D031               	goto	i1l6524
 14287                           
 14288                           ;spi.c: 223: if (spiRxIndex != 0) {
 14289  0012D0  5043               	movf	_spiRxIndex,w,c	;volatile
 14290  0012D2  E015               	bz	i1l6512
 14291                           
 14292                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 14293  0012D4  6A07               	clrf	SPI_ISR@i,c
 14294  0012D6  D00F               	goto	i1l6510
 14295  0012D8                     i1l6506:
 14296                           
 14297                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 14298  0012D8  0E00               	movlw	low _spiRxBuffer
 14299  0012DA  2407               	addwf	SPI_ISR@i,w,c
 14300  0012DC  6ED9               	movwf	fsr2l,c
 14301  0012DE  6ADA               	clrf	fsr2h,c
 14302  0012E0  0E02               	movlw	high _spiRxBuffer
 14303  0012E2  22DA               	addwfc	fsr2h,f,c
 14304  0012E4  0E00               	movlw	low _SPI_RX_TEXT
 14305  0012E6  2407               	addwf	SPI_ISR@i,w,c
 14306  0012E8  6EE1               	movwf	fsr1l,c
 14307  0012EA  6AE2               	clrf	fsr1h,c
 14308  0012EC  0E01               	movlw	high _SPI_RX_TEXT
 14309  0012EE  22E2               	addwfc	fsr1h,f,c
 14310  0012F0  CFDF FFE7          	movff	indf2,indf1
 14311  0012F4  2A07               	incf	SPI_ISR@i,f,c
 14312  0012F6                     i1l6510:
 14313  0012F6  5043               	movf	_spiRxIndex,w,c	;volatile
 14314  0012F8  5C07               	subwf	SPI_ISR@i,w,c
 14315  0012FA  E3EE               	bnc	i1l6506
 14316                           
 14317                           ;spi.c: 226: }
 14318                           ;spi.c: 227: SPI_full = 1;
 14319  0012FC  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14320  0012FE                     i1l6512:
 14321                           
 14322                           ;spi.c: 228: }
 14323                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 14324  0012FE  0E00               	movlw	low _SPI_RX_TEXT
 14325  001300  2443               	addwf	_spiRxIndex,w,c	;volatile
 14326  001302  6ED9               	movwf	fsr2l,c
 14327  001304  6ADA               	clrf	fsr2h,c
 14328  001306  0E01               	movlw	high _SPI_RX_TEXT
 14329  001308  22DA               	addwfc	fsr2h,f,c
 14330  00130A  0E00               	movlw	0
 14331  00130C  6ADF               	clrf	indf2,c
 14332                           
 14333                           ;spi.c: 230: spiRxIndex = 0;
 14334  00130E  6A43               	clrf	_spiRxIndex,c	;volatile
 14335                           
 14336                           ;spi.c: 231: } else {
 14337  001310  0012               	return	
 14338  001312                     i1l6516:
 14339                           
 14340                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 14341  001312  5043               	movf	_spiRxIndex,w,c	;volatile
 14342  001314  6E05               	movwf	??_SPI_ISR& (0+255),c
 14343  001316  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14344  001318  2A05               	incf	??_SPI_ISR,f,c
 14345  00131A  0E00               	movlw	0
 14346  00131C  2206               	addwfc	??_SPI_ISR+1,f,c
 14347  00131E  0E40               	movlw	64
 14348  001320  1805               	xorwf	??_SPI_ISR,w,c
 14349  001322  1006               	iorwf	??_SPI_ISR+1,w,c
 14350  001324  E104               	bnz	i1l6520
 14351                           
 14352                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 14353  001326  0101               	movlb	1	; () banked
 14354  001328  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 14355                           
 14356                           ;spi.c: 236: spiRxIndex = 0;
 14357  00132A  6A43               	clrf	_spiRxIndex,c	;volatile
 14358                           
 14359                           ;spi.c: 239: } else {
 14360  00132C  0012               	return	
 14361  00132E                     i1l6520:
 14362                           
 14363                           ;spi.c: 240: spiRxIndex++;
 14364  00132E  2A43               	incf	_spiRxIndex,f,c	;volatile
 14365  001330  0012               	return	
 14366  001332                     i1l6524:
 14367  001332  0E01               	movlw	1
 14368  001334  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14369  001336  0E00               	movlw	0
 14370  001338  6E05               	movwf	??_SPI_ISR& (0+255),c
 14371  00133A  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14372                           
 14373                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14374                           ; Switch size 1, requested type "speed"
 14375                           ; Number of cases is 1, Range of values is 0 to 0
 14376                           ; switch strategies available:
 14377                           ; Name         Instructions Cycles
 14378                           ; simple_byte            4     3 (average)
 14379                           ;	Chosen strategy is simple_byte
 14380  00133C  5006               	movf	??_SPI_ISR+1,w,c
 14381  00133E  A4D8               	btfss	status,2,c
 14382  001340  0012               	return	
 14383                           
 14384                           ; Switch size 1, requested type "speed"
 14385                           ; Number of cases is 2, Range of values is 0 to 1
 14386                           ; switch strategies available:
 14387                           ; Name         Instructions Cycles
 14388                           ; simple_byte            7     4 (average)
 14389                           ;	Chosen strategy is simple_byte
 14390  001342  5005               	movf	??_SPI_ISR,w,c
 14391  001344  E0E6               	bz	i1l6516
 14392  001346  0A01               	xorlw	1	; case 1
 14393  001348  0012               	return	
 14394  00134A                     i1l6528:
 14395  00134A  0E01               	movlw	1
 14396  00134C  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14397  00134E  0E00               	movlw	0
 14398  001350  6E05               	movwf	??_SPI_ISR& (0+255),c
 14399  001352  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14400                           
 14401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14402                           ; Switch size 1, requested type "speed"
 14403                           ; Number of cases is 1, Range of values is 0 to 0
 14404                           ; switch strategies available:
 14405                           ; Name         Instructions Cycles
 14406                           ; simple_byte            4     3 (average)
 14407                           ;	Chosen strategy is simple_byte
 14408  001354  5006               	movf	??_SPI_ISR+1,w,c
 14409  001356  A4D8               	btfss	status,2,c
 14410  001358  0012               	return	
 14411                           
 14412                           ; Switch size 1, requested type "speed"
 14413                           ; Number of cases is 2, Range of values is 0 to 1
 14414                           ; switch strategies available:
 14415                           ; Name         Instructions Cycles
 14416                           ; simple_byte            7     4 (average)
 14417                           ;	Chosen strategy is simple_byte
 14418  00135A  5005               	movf	??_SPI_ISR,w,c
 14419  00135C  E098               	bz	i1l6500
 14420  00135E  0A01               	xorlw	1	; case 1
 14421  001360  E101 D77E          	bz	i1l6492
 14422  001364  0012               	return		;funcret
 14423  001366                     __end_of_SPI_ISR:
 14424                           	opt stack 0
 14425                           tblptru	equ	0xFF8
 14426                           tblptrh	equ	0xFF7
 14427                           tblptrl	equ	0xFF6
 14428                           tablat	equ	0xFF5
 14429                           prodh	equ	0xFF4
 14430                           prodl	equ	0xFF3
 14431                           intcon	equ	0xFF2
 14432                           intcon2	equ	0xFF1
 14433                           intcon3	equ	0xFF0
 14434                           postinc0	equ	0xFEE
 14435                           wreg	equ	0xFE8
 14436                           indf1	equ	0xFE7
 14437                           postdec1	equ	0xFE5
 14438                           fsr1h	equ	0xFE2
 14439                           fsr1l	equ	0xFE1
 14440                           bsr	equ	0xFE0
 14441                           indf2	equ	0xFDF
 14442                           postinc2	equ	0xFDE
 14443                           postdec2	equ	0xFDD
 14444                           fsr2h	equ	0xFDA
 14445                           fsr2l	equ	0xFD9
 14446                           status	equ	0xFD8
 14447                           
 14448 ;; *************** function _EUSART1_Transmit_ISR *****************
 14449 ;; Defined at:
 14450 ;;		line 552 in file "eusart.c"
 14451 ;; Parameters:    Size  Location     Type
 14452 ;;		None
 14453 ;; Auto vars:     Size  Location     Type
 14454 ;;		None
 14455 ;; Return value:  Size  Location     Type
 14456 ;;                  1    wreg      void 
 14457 ;; Registers used:
 14458 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14459 ;; Tracked objects:
 14460 ;;		On entry : 0/0
 14461 ;;		On exit  : 0/0
 14462 ;;		Unchanged: 0/0
 14463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14464 ;;      Params:         0       0       0       0
 14465 ;;      Locals:         0       0       0       0
 14466 ;;      Temps:          0       0       0       0
 14467 ;;      Totals:         0       0       0       0
 14468 ;;Total ram usage:        0 bytes
 14469 ;; Hardware stack levels used:    1
 14470 ;; Hardware stack levels required when called:    5
 14471 ;; This function calls:
 14472 ;;		Nothing
 14473 ;; This function is called by:
 14474 ;;		_LOW_PRIORITY_IRQ
 14475 ;; This function uses a non-reentrant model
 14476 ;;
 14477                           
 14478                           	psect	text90
 14479  001FF8                     __ptext90:
 14480                           	opt stack 0
 14481  001FF8                     _EUSART1_Transmit_ISR:
 14482                           	opt stack 14
 14483                           
 14484                           ;eusart.c: 554: eusart1TxIndex++;
 14485                           
 14486                           ;incstack = 0
 14487  001FF8  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 14488                           
 14489                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 14490  001FFA  0E80               	movlw	low _eusart1TxBuffer
 14491  001FFC  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 14492  001FFE  6ED9               	movwf	fsr2l,c
 14493  002000  6ADA               	clrf	fsr2h,c
 14494  002002  0E01               	movlw	high _eusart1TxBuffer
 14495  002004  22DA               	addwfc	fsr2h,f,c
 14496  002006  50DF               	movf	indf2,w,c
 14497  002008  E009               	bz	i1l1341
 14498                           
 14499                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 14500  00200A  0E80               	movlw	low _eusart1TxBuffer
 14501  00200C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 14502  00200E  6ED9               	movwf	fsr2l,c
 14503  002010  6ADA               	clrf	fsr2h,c
 14504  002012  0E01               	movlw	high _eusart1TxBuffer
 14505  002014  22DA               	addwfc	fsr2h,f,c
 14506  002016  50DF               	movf	indf2,w,c
 14507  002018  6EAD               	movwf	4013,c	;volatile
 14508                           
 14509                           ;eusart.c: 574: } else {
 14510  00201A  0012               	return	
 14511  00201C                     i1l1341:
 14512                           
 14513                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 14514  00201C  989D               	bcf	3997,4,c	;volatile
 14515  00201E  0012               	return		;funcret
 14516  002020                     __end_of_EUSART1_Transmit_ISR:
 14517                           	opt stack 0
 14518                           tblptru	equ	0xFF8
 14519                           tblptrh	equ	0xFF7
 14520                           tblptrl	equ	0xFF6
 14521                           tablat	equ	0xFF5
 14522                           prodh	equ	0xFF4
 14523                           prodl	equ	0xFF3
 14524                           intcon	equ	0xFF2
 14525                           intcon2	equ	0xFF1
 14526                           intcon3	equ	0xFF0
 14527                           postinc0	equ	0xFEE
 14528                           wreg	equ	0xFE8
 14529                           indf1	equ	0xFE7
 14530                           postdec1	equ	0xFE5
 14531                           fsr1h	equ	0xFE2
 14532                           fsr1l	equ	0xFE1
 14533                           bsr	equ	0xFE0
 14534                           indf2	equ	0xFDF
 14535                           postinc2	equ	0xFDE
 14536                           postdec2	equ	0xFDD
 14537                           fsr2h	equ	0xFDA
 14538                           fsr2l	equ	0xFD9
 14539                           status	equ	0xFD8
 14540                           
 14541 ;; *************** function _EUSART1_Receive_ISR *****************
 14542 ;; Defined at:
 14543 ;;		line 597 in file "eusart.c"
 14544 ;; Parameters:    Size  Location     Type
 14545 ;;		None
 14546 ;; Auto vars:     Size  Location     Type
 14547 ;;  i               1    6[COMRAM] unsigned char 
 14548 ;; Return value:  Size  Location     Type
 14549 ;;                  1    wreg      void 
 14550 ;; Registers used:
 14551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14552 ;; Tracked objects:
 14553 ;;		On entry : 0/0
 14554 ;;		On exit  : 0/0
 14555 ;;		Unchanged: 0/0
 14556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14557 ;;      Params:         0       0       0       0
 14558 ;;      Locals:         1       0       0       0
 14559 ;;      Temps:          2       0       0       0
 14560 ;;      Totals:         3       0       0       0
 14561 ;;Total ram usage:        3 bytes
 14562 ;; Hardware stack levels used:    1
 14563 ;; Hardware stack levels required when called:    6
 14564 ;; This function calls:
 14565 ;;		_EUSART1_Erreur_Get
 14566 ;; This function is called by:
 14567 ;;		_LOW_PRIORITY_IRQ
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           	psect	text91
 14572  001366                     __ptext91:
 14573                           	opt stack 0
 14574  001366                     _EUSART1_Receive_ISR:
 14575                           	opt stack 13
 14576                           
 14577                           ;eusart.c: 600: unsigned char i;
 14578                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 14579                           
 14580                           ;incstack = 0
 14581  001366  9A9E               	bcf	3998,5,c	;volatile
 14582                           
 14583                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 14584  001368  A2AB               	btfss	4011,1,c	;volatile
 14585  00136A  D004               	goto	i1l6548
 14586                           
 14587                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 14588  00136C  9EAB               	bcf	4011,7,c	;volatile
 14589                           
 14590                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 14591  00136E  8EAB               	bsf	4011,7,c	;volatile
 14592                           
 14593                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 14594  001370  98AB               	bcf	4011,4,c	;volatile
 14595                           
 14596                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 14597  001372  88AB               	bsf	4011,4,c	;volatile
 14598  001374                     i1l6548:
 14599                           
 14600                           ;eusart.c: 610: }
 14601                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 14602  001374  0E40               	movlw	low _eusart1RxBuffer
 14603  001376  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14604  001378  6ED9               	movwf	fsr2l,c
 14605  00137A  6ADA               	clrf	fsr2h,c
 14606  00137C  0E02               	movlw	high _eusart1RxBuffer
 14607  00137E  22DA               	addwfc	fsr2h,f,c
 14608  001380  CFAE FFDF          	movff	4014,indf2	;volatile
 14609                           
 14610                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 14611  001384  0E40               	movlw	low _eusart1RxBuffer
 14612  001386  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14613  001388  6ED9               	movwf	fsr2l,c
 14614  00138A  6ADA               	clrf	fsr2h,c
 14615  00138C  0E02               	movlw	high _eusart1RxBuffer
 14616  00138E  22DA               	addwfc	fsr2h,f,c
 14617  001390  50DF               	movf	indf2,w,c
 14618  001392  0E01               	movlw	1
 14619  001394  A4D8               	btfss	status,2,c
 14620  001396  0E00               	movlw	0
 14621  001398  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14622  00139A  0E40               	movlw	low _eusart1RxBuffer
 14623  00139C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14624  00139E  6ED9               	movwf	fsr2l,c
 14625  0013A0  6ADA               	clrf	fsr2h,c
 14626  0013A2  0E02               	movlw	high _eusart1RxBuffer
 14627  0013A4  22DA               	addwfc	fsr2h,f,c
 14628  0013A6  0E0D               	movlw	13
 14629  0013A8  18DE               	xorwf	postinc2,w,c
 14630  0013AA  0E01               	movlw	1
 14631  0013AC  A4D8               	btfss	status,2,c
 14632  0013AE  0E00               	movlw	0
 14633  0013B0  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 14634  0013B2  A0E8               	btfss	wreg,0,c
 14635  0013B4  D032               	goto	i1l6576
 14636                           
 14637                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 14638  0013B6  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14639  0013B8  E015               	bz	i1l6560
 14640                           
 14641                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 14642  0013BA  6A07               	clrf	EUSART1_Receive_ISR@i,c
 14643  0013BC  D00F               	goto	i1l6558
 14644  0013BE                     i1l6554:
 14645                           
 14646                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 14647  0013BE  0E40               	movlw	low _eusart1RxBuffer
 14648  0013C0  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 14649  0013C2  6ED9               	movwf	fsr2l,c
 14650  0013C4  6ADA               	clrf	fsr2h,c
 14651  0013C6  0E02               	movlw	high _eusart1RxBuffer
 14652  0013C8  22DA               	addwfc	fsr2h,f,c
 14653  0013CA  0EC0               	movlw	low _UART_RX_TEXT
 14654  0013CC  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 14655  0013CE  6EE1               	movwf	fsr1l,c
 14656  0013D0  6AE2               	clrf	fsr1h,c
 14657  0013D2  0E01               	movlw	high _UART_RX_TEXT
 14658  0013D4  22E2               	addwfc	fsr1h,f,c
 14659  0013D6  CFDF FFE7          	movff	indf2,indf1
 14660  0013DA  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 14661  0013DC                     i1l6558:
 14662  0013DC  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14663  0013DE  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 14664  0013E0  E3EE               	bnc	i1l6554
 14665                           
 14666                           ;eusart.c: 623: }
 14667                           ;eusart.c: 624: RX1_full = 1;
 14668  0013E2  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 14669  0013E4                     i1l6560:
 14670                           
 14671                           ;eusart.c: 625: }
 14672                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 14673  0013E4  0EC0               	movlw	low _UART_RX_TEXT
 14674  0013E6  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14675  0013E8  6ED9               	movwf	fsr2l,c
 14676  0013EA  6ADA               	clrf	fsr2h,c
 14677  0013EC  0E01               	movlw	high _UART_RX_TEXT
 14678  0013EE  22DA               	addwfc	fsr2h,f,c
 14679  0013F0  0E00               	movlw	0
 14680  0013F2  6ADF               	clrf	indf2,c
 14681                           
 14682                           ;eusart.c: 629: eusart1RxIndex = 0;
 14683  0013F4  6A45               	clrf	_eusart1RxIndex,c	;volatile
 14684                           
 14685                           ;eusart.c: 631: } else {
 14686  0013F6  0012               	return	
 14687  0013F8                     i1l6564:
 14688                           
 14689                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 14690  0013F8  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14691  0013FA  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14692  0013FC  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 14693  0013FE  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 14694  001400  0E00               	movlw	0
 14695  001402  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 14696  001404  0E40               	movlw	64
 14697  001406  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 14698  001408  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 14699  00140A  E105               	bnz	i1l6570
 14700                           
 14701                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 14702  00140C  0101               	movlb	1	; () banked
 14703  00140E  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 14704                           
 14705                           ;eusart.c: 636: eusart1RxIndex = 0;
 14706  001410  6A45               	clrf	_eusart1RxIndex,c	;volatile
 14707                           
 14708                           ;eusart.c: 638: EUSART1_Erreur_Get();
 14709  001412  EFF1  F011         	goto	_EUSART1_Erreur_Get	;wreg free
 14710  001416                     i1l6570:
 14711                           
 14712                           ;eusart.c: 640: eusart1RxIndex++;
 14713  001416  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 14714  001418  0012               	return	
 14715  00141A                     i1l6576:
 14716  00141A  0E01               	movlw	1
 14717  00141C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 14718  00141E  0E00               	movlw	0
 14719  001420  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14720  001422  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 14721                           
 14722                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14723                           ; Switch size 1, requested type "speed"
 14724                           ; Number of cases is 1, Range of values is 0 to 0
 14725                           ; switch strategies available:
 14726                           ; Name         Instructions Cycles
 14727                           ; simple_byte            4     3 (average)
 14728                           ;	Chosen strategy is simple_byte
 14729  001424  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 14730  001426  A4D8               	btfss	status,2,c
 14731  001428  0012               	return	
 14732                           
 14733                           ; Switch size 1, requested type "speed"
 14734                           ; Number of cases is 2, Range of values is 0 to 1
 14735                           ; switch strategies available:
 14736                           ; Name         Instructions Cycles
 14737                           ; simple_byte            7     4 (average)
 14738                           ;	Chosen strategy is simple_byte
 14739  00142A  5005               	movf	??_EUSART1_Receive_ISR,w,c
 14740  00142C  E0E5               	bz	i1l6564
 14741  00142E  0A01               	xorlw	1	; case 1
 14742  001430  E102 EFF1  F011    	bz	_EUSART1_Erreur_Get
 14743  001436  0012               	return		;funcret
 14744  001438                     __end_of_EUSART1_Receive_ISR:
 14745                           	opt stack 0
 14746                           tblptru	equ	0xFF8
 14747                           tblptrh	equ	0xFF7
 14748                           tblptrl	equ	0xFF6
 14749                           tablat	equ	0xFF5
 14750                           prodh	equ	0xFF4
 14751                           prodl	equ	0xFF3
 14752                           intcon	equ	0xFF2
 14753                           intcon2	equ	0xFF1
 14754                           intcon3	equ	0xFF0
 14755                           postinc0	equ	0xFEE
 14756                           wreg	equ	0xFE8
 14757                           indf1	equ	0xFE7
 14758                           postdec1	equ	0xFE5
 14759                           fsr1h	equ	0xFE2
 14760                           fsr1l	equ	0xFE1
 14761                           bsr	equ	0xFE0
 14762                           indf2	equ	0xFDF
 14763                           postinc2	equ	0xFDE
 14764                           postdec2	equ	0xFDD
 14765                           fsr2h	equ	0xFDA
 14766                           fsr2l	equ	0xFD9
 14767                           status	equ	0xFD8
 14768                           
 14769 ;; *************** function _EUSART1_Erreur_Get *****************
 14770 ;; Defined at:
 14771 ;;		line 585 in file "eusart.c"
 14772 ;; Parameters:    Size  Location     Type
 14773 ;;		None
 14774 ;; Auto vars:     Size  Location     Type
 14775 ;;		None
 14776 ;; Return value:  Size  Location     Type
 14777 ;;                  1    wreg      void 
 14778 ;; Registers used:
 14779 ;;		None
 14780 ;; Tracked objects:
 14781 ;;		On entry : 0/1
 14782 ;;		On exit  : 0/0
 14783 ;;		Unchanged: 0/0
 14784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14785 ;;      Params:         0       0       0       0
 14786 ;;      Locals:         0       0       0       0
 14787 ;;      Temps:          0       0       0       0
 14788 ;;      Totals:         0       0       0       0
 14789 ;;Total ram usage:        0 bytes
 14790 ;; Hardware stack levels used:    1
 14791 ;; Hardware stack levels required when called:    5
 14792 ;; This function calls:
 14793 ;;		Nothing
 14794 ;; This function is called by:
 14795 ;;		_EUSART1_Receive_ISR
 14796 ;; This function uses a non-reentrant model
 14797 ;;
 14798                           
 14799                           	psect	text92
 14800  0023E2                     __ptext92:
 14801                           	opt stack 0
 14802  0023E2                     _EUSART1_Erreur_Get:
 14803                           	opt stack 13
 14804                           
 14805                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 14806                           
 14807                           ;incstack = 0
 14808  0023E2  848B               	bsf	3979,2,c	;volatile
 14809                           
 14810                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 14811  0023E4  948B               	bcf	3979,2,c	;volatile
 14812                           
 14813                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 14814  0023E6  848B               	bsf	3979,2,c	;volatile
 14815  0023E8  0012               	return		;funcret
 14816  0023EA                     __end_of_EUSART1_Erreur_Get:
 14817                           	opt stack 0
 14818                           tblptru	equ	0xFF8
 14819                           tblptrh	equ	0xFF7
 14820                           tblptrl	equ	0xFF6
 14821                           tablat	equ	0xFF5
 14822                           prodh	equ	0xFF4
 14823                           prodl	equ	0xFF3
 14824                           intcon	equ	0xFF2
 14825                           intcon2	equ	0xFF1
 14826                           intcon3	equ	0xFF0
 14827                           postinc0	equ	0xFEE
 14828                           wreg	equ	0xFE8
 14829                           indf1	equ	0xFE7
 14830                           postdec1	equ	0xFE5
 14831                           fsr1h	equ	0xFE2
 14832                           fsr1l	equ	0xFE1
 14833                           bsr	equ	0xFE0
 14834                           indf2	equ	0xFDF
 14835                           postinc2	equ	0xFDE
 14836                           postdec2	equ	0xFDD
 14837                           fsr2h	equ	0xFDA
 14838                           fsr2l	equ	0xFD9
 14839                           status	equ	0xFD8
 14840                           
 14841 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 14842 ;; Defined at:
 14843 ;;		line 970 in file "interrupt.c"
 14844 ;; Parameters:    Size  Location     Type
 14845 ;;		None
 14846 ;; Auto vars:     Size  Location     Type
 14847 ;;		None
 14848 ;; Return value:  Size  Location     Type
 14849 ;;                  1    wreg      void 
 14850 ;; Registers used:
 14851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14852 ;; Tracked objects:
 14853 ;;		On entry : 0/0
 14854 ;;		On exit  : 0/0
 14855 ;;		Unchanged: 0/0
 14856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14857 ;;      Params:         0       0       0       0
 14858 ;;      Locals:         0       0       0       0
 14859 ;;      Temps:          2       0       0       0
 14860 ;;      Totals:         2       0       0       0
 14861 ;;Total ram usage:        2 bytes
 14862 ;; Hardware stack levels used:    1
 14863 ;; Hardware stack levels required when called:    4
 14864 ;; This function calls:
 14865 ;;		i2_IRQ_CAPOT
 14866 ;;		i2_IRQ_I_MOTEUR_1
 14867 ;;		i2_IRQ_I_MOTEUR_2
 14868 ;;		i2_IRQ_TIMER2
 14869 ;; This function is called by:
 14870 ;;		Interrupt level 2
 14871 ;; This function uses a non-reentrant model
 14872 ;;
 14873                           
 14874                           	psect	intcode
 14875  000008                     __pintcode:
 14876                           	opt stack 0
 14877  000008                     _HIGH_PRIORITY_IRQ:
 14878                           	opt stack 11
 14879                           
 14880                           ;incstack = 0
 14881  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14882  00000A  EF81  F00E         	goto	int_func
 14883                           tblptru	equ	0xFF8
 14884                           tblptrh	equ	0xFF7
 14885                           tblptrl	equ	0xFF6
 14886                           tablat	equ	0xFF5
 14887                           prodh	equ	0xFF4
 14888                           prodl	equ	0xFF3
 14889                           intcon	equ	0xFF2
 14890                           intcon2	equ	0xFF1
 14891                           intcon3	equ	0xFF0
 14892                           postinc0	equ	0xFEE
 14893                           wreg	equ	0xFE8
 14894                           indf1	equ	0xFE7
 14895                           postdec1	equ	0xFE5
 14896                           fsr1h	equ	0xFE2
 14897                           fsr1l	equ	0xFE1
 14898                           bsr	equ	0xFE0
 14899                           indf2	equ	0xFDF
 14900                           postinc2	equ	0xFDE
 14901                           postdec2	equ	0xFDD
 14902                           fsr2h	equ	0xFDA
 14903                           fsr2l	equ	0xFD9
 14904                           status	equ	0xFD8
 14905                           
 14906                           	psect	intcode_body
 14907  001D02                     __pintcode_body:
 14908                           	opt stack 11
 14909  001D02                     int_func:
 14910                           	opt stack 11
 14911  001D02  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 14912  001D06  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 14913                           
 14914                           ;interrupt.c: 973: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 14915  001D0A  B29D               	btfsc	3997,1,c	;volatile
 14916  001D0C  A29E               	btfss	3998,1,c	;volatile
 14917  001D0E  D003               	goto	i2l706
 14918                           
 14919                           ;interrupt.c: 974: IRQ_TIMER2();
 14920  001D10  EC04  F012         	call	i2_IRQ_TIMER2	;wreg free
 14921                           
 14922                           ;interrupt.c: 980: }
 14923  001D14  D011               	goto	i2l713
 14924  001D16                     i2l706:
 14925                           
 14926                           ;interrupt.c: 981: else
 14927                           ;interrupt.c: 982: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 14928  001D16  B8F2               	btfsc	intcon,4,c	;volatile
 14929  001D18  A2F2               	btfss	intcon,1,c	;volatile
 14930  001D1A  D003               	goto	i2l708
 14931                           
 14932                           ;interrupt.c: 983: {
 14933                           ;interrupt.c: 984: IRQ_CAPOT();
 14934  001D1C  ECD8  F011         	call	i2_IRQ_CAPOT	;wreg free
 14935                           
 14936                           ;interrupt.c: 999: } else
 14937  001D20  D00B               	goto	i2l713
 14938  001D22                     i2l708:
 14939                           
 14940                           ;interrupt.c: 1000: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 14941  001D22  B6F0               	btfsc	intcon3,3,c	;volatile
 14942  001D24  A0F0               	btfss	intcon3,0,c	;volatile
 14943  001D26  D003               	goto	i2l710
 14944                           
 14945                           ;interrupt.c: 1006: IRQ_I_MOTEUR_1();
 14946  001D28  ECEE  F010         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 14947                           
 14948                           ;interrupt.c: 1018: } else
 14949  001D2C  D005               	goto	i2l713
 14950  001D2E                     i2l710:
 14951                           
 14952                           ;interrupt.c: 1019: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 14953  001D2E  B8F0               	btfsc	intcon3,4,c	;volatile
 14954  001D30  A2F0               	btfss	intcon3,1,c	;volatile
 14955  001D32  D002               	goto	i2l713
 14956                           
 14957                           ;interrupt.c: 1025: IRQ_I_MOTEUR_2();
 14958  001D34  EC26  F011         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 14959  001D38                     i2l713:
 14960  001D38  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 14961  001D3C  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 14962  001D40  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14963  001D42  0011               	retfie		f
 14964  001D44                     __end_of_HIGH_PRIORITY_IRQ:
 14965                           	opt stack 0
 14966                           tblptru	equ	0xFF8
 14967                           tblptrh	equ	0xFF7
 14968                           tblptrl	equ	0xFF6
 14969                           tablat	equ	0xFF5
 14970                           prodh	equ	0xFF4
 14971                           prodl	equ	0xFF3
 14972                           intcon	equ	0xFF2
 14973                           intcon2	equ	0xFF1
 14974                           intcon3	equ	0xFF0
 14975                           postinc0	equ	0xFEE
 14976                           wreg	equ	0xFE8
 14977                           indf1	equ	0xFE7
 14978                           postdec1	equ	0xFE5
 14979                           fsr1h	equ	0xFE2
 14980                           fsr1l	equ	0xFE1
 14981                           bsr	equ	0xFE0
 14982                           indf2	equ	0xFDF
 14983                           postinc2	equ	0xFDE
 14984                           postdec2	equ	0xFDD
 14985                           fsr2h	equ	0xFDA
 14986                           fsr2l	equ	0xFD9
 14987                           status	equ	0xFD8
 14988                           
 14989 ;; *************** function i2_IRQ_TIMER2 *****************
 14990 ;; Defined at:
 14991 ;;		line 895 in file "interrupt.c"
 14992 ;; Parameters:    Size  Location     Type
 14993 ;;		None
 14994 ;; Auto vars:     Size  Location     Type
 14995 ;;		None
 14996 ;; Return value:  Size  Location     Type
 14997 ;;                  1    wreg      void 
 14998 ;; Registers used:
 14999 ;;		None
 15000 ;; Tracked objects:
 15001 ;;		On entry : 0/0
 15002 ;;		On exit  : 0/0
 15003 ;;		Unchanged: 0/0
 15004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15005 ;;      Params:         0       0       0       0
 15006 ;;      Locals:         0       0       0       0
 15007 ;;      Temps:          0       0       0       0
 15008 ;;      Totals:         0       0       0       0
 15009 ;;Total ram usage:        0 bytes
 15010 ;; Hardware stack levels used:    1
 15011 ;; This function calls:
 15012 ;;		Nothing
 15013 ;; This function is called by:
 15014 ;;		_HIGH_PRIORITY_IRQ
 15015 ;; This function uses a non-reentrant model
 15016 ;;
 15017                           
 15018                           	psect	text94
 15019  002408                     __ptext94:
 15020                           	opt stack 0
 15021  002408                     i2_IRQ_TIMER2:
 15022                           	opt stack 14
 15023                           
 15024                           ;interrupt.c: 896: PIR1bits.TMR2IF = 0;
 15025                           
 15026                           ;incstack = 0
 15027  002408  929E               	bcf	3998,1,c	;volatile
 15028                           
 15029                           ;interrupt.c: 899: GODONE = 1;
 15030  00240A  82C2               	bsf	4034,1,c	;volatile
 15031  00240C  0012               	return		;funcret
 15032  00240E                     __end_ofi2_IRQ_TIMER2:
 15033                           	opt stack 0
 15034                           tblptru	equ	0xFF8
 15035                           tblptrh	equ	0xFF7
 15036                           tblptrl	equ	0xFF6
 15037                           tablat	equ	0xFF5
 15038                           prodh	equ	0xFF4
 15039                           prodl	equ	0xFF3
 15040                           intcon	equ	0xFF2
 15041                           intcon2	equ	0xFF1
 15042                           intcon3	equ	0xFF0
 15043                           postinc0	equ	0xFEE
 15044                           wreg	equ	0xFE8
 15045                           indf1	equ	0xFE7
 15046                           postdec1	equ	0xFE5
 15047                           fsr1h	equ	0xFE2
 15048                           fsr1l	equ	0xFE1
 15049                           bsr	equ	0xFE0
 15050                           indf2	equ	0xFDF
 15051                           postinc2	equ	0xFDE
 15052                           postdec2	equ	0xFDD
 15053                           fsr2h	equ	0xFDA
 15054                           fsr2l	equ	0xFD9
 15055                           status	equ	0xFD8
 15056                           
 15057 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15058 ;; Defined at:
 15059 ;;		line 924 in file "interrupt.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;		None
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;		None
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      void 
 15066 ;; Registers used:
 15067 ;;		wreg, status,2, status,0
 15068 ;; Tracked objects:
 15069 ;;		On entry : 0/0
 15070 ;;		On exit  : 0/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15073 ;;      Params:         0       0       0       0
 15074 ;;      Locals:         0       0       0       0
 15075 ;;      Temps:          0       0       0       0
 15076 ;;      Totals:         0       0       0       0
 15077 ;;Total ram usage:        0 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; This function calls:
 15080 ;;		Nothing
 15081 ;; This function is called by:
 15082 ;;		_HIGH_PRIORITY_IRQ
 15083 ;; This function uses a non-reentrant model
 15084 ;;
 15085                           
 15086                           	psect	text95
 15087  00224C                     __ptext95:
 15088                           	opt stack 0
 15089  00224C                     i2_IRQ_I_MOTEUR_2:
 15090                           	opt stack 14
 15091                           
 15092                           ;interrupt.c: 929: LATCbits.LATC1 = 0;
 15093                           
 15094                           ;incstack = 0
 15095  00224C  928B               	bcf	3979,1,c	;volatile
 15096                           
 15097                           ;interrupt.c: 931: while(TMR2 > 0) __nop();
 15098  00224E  D001               	goto	i2l4598
 15099  002250                     i2l699:
 15100  002250  F000               	nop	
 15101  002252                     i2l4598:
 15102  002252  50CC               	movf	4044,w,c	;volatile
 15103  002254  E1FD               	bnz	i2l699
 15104                           
 15105                           ;interrupt.c: 933: LATCbits.LATC1 = 1;
 15106  002256  828B               	bsf	3979,1,c	;volatile
 15107                           
 15108                           ;interrupt.c: 947: LATCbits.LATC2^=1;
 15109  002258  748B               	btg	3979,2,c	;volatile
 15110                           
 15111                           ;interrupt.c: 948: INTCON3bits.INT2IF = 0;
 15112  00225A  92F0               	bcf	intcon3,1,c	;volatile
 15113                           
 15114                           ;interrupt.c: 952: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 15115  00225C  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 15116  00225E  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 15117  002260  0012               	return		;funcret
 15118  002262                     __end_ofi2_IRQ_I_MOTEUR_2:
 15119                           	opt stack 0
 15120                           tblptru	equ	0xFF8
 15121                           tblptrh	equ	0xFF7
 15122                           tblptrl	equ	0xFF6
 15123                           tablat	equ	0xFF5
 15124                           prodh	equ	0xFF4
 15125                           prodl	equ	0xFF3
 15126                           intcon	equ	0xFF2
 15127                           intcon2	equ	0xFF1
 15128                           intcon3	equ	0xFF0
 15129                           postinc0	equ	0xFEE
 15130                           wreg	equ	0xFE8
 15131                           indf1	equ	0xFE7
 15132                           postdec1	equ	0xFE5
 15133                           fsr1h	equ	0xFE2
 15134                           fsr1l	equ	0xFE1
 15135                           bsr	equ	0xFE0
 15136                           indf2	equ	0xFDF
 15137                           postinc2	equ	0xFDE
 15138                           postdec2	equ	0xFDD
 15139                           fsr2h	equ	0xFDA
 15140                           fsr2l	equ	0xFD9
 15141                           status	equ	0xFD8
 15142                           
 15143 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 15144 ;; Defined at:
 15145 ;;		line 910 in file "interrupt.c"
 15146 ;; Parameters:    Size  Location     Type
 15147 ;;		None
 15148 ;; Auto vars:     Size  Location     Type
 15149 ;;		None
 15150 ;; Return value:  Size  Location     Type
 15151 ;;                  1    wreg      void 
 15152 ;; Registers used:
 15153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15154 ;; Tracked objects:
 15155 ;;		On entry : 0/0
 15156 ;;		On exit  : 0/0
 15157 ;;		Unchanged: 0/0
 15158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15159 ;;      Params:         0       0       0       0
 15160 ;;      Locals:         0       0       0       0
 15161 ;;      Temps:          0       0       0       0
 15162 ;;      Totals:         0       0       0       0
 15163 ;;Total ram usage:        0 bytes
 15164 ;; Hardware stack levels used:    1
 15165 ;; Hardware stack levels required when called:    3
 15166 ;; This function calls:
 15167 ;;		i2_Alarme_On
 15168 ;; This function is called by:
 15169 ;;		_HIGH_PRIORITY_IRQ
 15170 ;; This function uses a non-reentrant model
 15171 ;;
 15172                           
 15173                           	psect	text96
 15174  0021DC                     __ptext96:
 15175                           	opt stack 0
 15176  0021DC                     i2_IRQ_I_MOTEUR_1:
 15177                           	opt stack 11
 15178                           
 15179                           ;interrupt.c: 911: INTCON3bits.INT1IF = 0;
 15180                           
 15181                           ;incstack = 0
 15182  0021DC  90F0               	bcf	intcon3,0,c	;volatile
 15183                           
 15184                           ;interrupt.c: 912: Compteur_IRQ_I_Moteur_1 += 1;
 15185  0021DE  0100               	movlb	0	; () banked
 15186  0021E0  2B89               	incf	_Compteur_IRQ_I_Moteur_1& (0+255),f,b	;volatile
 15187                           
 15188                           ; BSR set to: 0
 15189                           ;interrupt.c: 913: if (Compteur_IRQ_I_Moteur_1 == 0) {
 15190  0021E2  5189               	movf	_Compteur_IRQ_I_Moteur_1& (0+255),w,b	;volatile
 15191  0021E4  A4D8               	btfss	status,2,c
 15192  0021E6  0012               	return	
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;interrupt.c: 914: LATCbits.LATC2 = 1;
 15196  0021E8  848B               	bsf	3979,2,c	;volatile
 15197                           
 15198                           ;interrupt.c: 916: LATCbits.LATC0 = 0;
 15199  0021EA  908B               	bcf	3979,0,c	;volatile
 15200                           
 15201                           ;interrupt.c: 917: LATCbits.LATC1 = 0;
 15202  0021EC  928B               	bcf	3979,1,c	;volatile
 15203                           
 15204                           ; BSR set to: 0
 15205                           ;interrupt.c: 919: Alarme_On(1);
 15206  0021EE  0E01               	movlw	1
 15207  0021F0  EF97  F011         	goto	i2_Alarme_On
 15208  0021F4                     __end_ofi2_IRQ_I_MOTEUR_1:
 15209                           	opt stack 0
 15210                           tblptru	equ	0xFF8
 15211                           tblptrh	equ	0xFF7
 15212                           tblptrl	equ	0xFF6
 15213                           tablat	equ	0xFF5
 15214                           prodh	equ	0xFF4
 15215                           prodl	equ	0xFF3
 15216                           intcon	equ	0xFF2
 15217                           intcon2	equ	0xFF1
 15218                           intcon3	equ	0xFF0
 15219                           postinc0	equ	0xFEE
 15220                           wreg	equ	0xFE8
 15221                           indf1	equ	0xFE7
 15222                           postdec1	equ	0xFE5
 15223                           fsr1h	equ	0xFE2
 15224                           fsr1l	equ	0xFE1
 15225                           bsr	equ	0xFE0
 15226                           indf2	equ	0xFDF
 15227                           postinc2	equ	0xFDE
 15228                           postdec2	equ	0xFDD
 15229                           fsr2h	equ	0xFDA
 15230                           fsr2l	equ	0xFD9
 15231                           status	equ	0xFD8
 15232                           
 15233 ;; *************** function i2_Alarme_On *****************
 15234 ;; Defined at:
 15235 ;;		line 18 in file "alarme.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;  alarme_new_v    1    wreg     unsigned char 
 15238 ;; Auto vars:     Size  Location     Type
 15239 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 15240 ;; Return value:  Size  Location     Type
 15241 ;;                  1    wreg      void 
 15242 ;; Registers used:
 15243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15244 ;; Tracked objects:
 15245 ;;		On entry : 3F/0
 15246 ;;		On exit  : 0/0
 15247 ;;		Unchanged: 0/0
 15248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15249 ;;      Params:         0       0       0       0
 15250 ;;      Locals:         1       0       0       0
 15251 ;;      Temps:          0       0       0       0
 15252 ;;      Totals:         1       0       0       0
 15253 ;;Total ram usage:        1 bytes
 15254 ;; Hardware stack levels used:    1
 15255 ;; Hardware stack levels required when called:    2
 15256 ;; This function calls:
 15257 ;;		i2_Coupe_Moteur
 15258 ;;		i2_Etat_Update
 15259 ;; This function is called by:
 15260 ;;		i2_IRQ_I_MOTEUR_1
 15261 ;; This function uses a non-reentrant model
 15262 ;;
 15263                           
 15264                           	psect	text97
 15265  00232E                     __ptext97:
 15266                           	opt stack 0
 15267  00232E                     i2_Alarme_On:
 15268                           	opt stack 11
 15269                           
 15270                           ;incstack = 0
 15271                           ;i2Alarme_On@alarme_new_value stored from wreg
 15272  00232E  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 15273                           
 15274                           ;alarme.c: 22: Etat_Update(1);
 15275  002330  0E01               	movlw	1
 15276  002332  ECAA  F010         	call	i2_Etat_Update
 15277                           
 15278                           ;alarme.c: 23: Alarme = alarme_new_value;
 15279  002336  C002  F0A7         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 15280                           
 15281                           ;alarme.c: 24: Coupe_Moteur();
 15282  00233A  EF31  F011         	goto	i2_Coupe_Moteur	;wreg free
 15283  00233E                     __end_ofi2_Alarme_On:
 15284                           	opt stack 0
 15285                           tblptru	equ	0xFF8
 15286                           tblptrh	equ	0xFF7
 15287                           tblptrl	equ	0xFF6
 15288                           tablat	equ	0xFF5
 15289                           prodh	equ	0xFF4
 15290                           prodl	equ	0xFF3
 15291                           intcon	equ	0xFF2
 15292                           intcon2	equ	0xFF1
 15293                           intcon3	equ	0xFF0
 15294                           postinc0	equ	0xFEE
 15295                           wreg	equ	0xFE8
 15296                           indf1	equ	0xFE7
 15297                           postdec1	equ	0xFE5
 15298                           fsr1h	equ	0xFE2
 15299                           fsr1l	equ	0xFE1
 15300                           bsr	equ	0xFE0
 15301                           indf2	equ	0xFDF
 15302                           postinc2	equ	0xFDE
 15303                           postdec2	equ	0xFDD
 15304                           fsr2h	equ	0xFDA
 15305                           fsr2l	equ	0xFD9
 15306                           status	equ	0xFD8
 15307                           
 15308 ;; *************** function i2_Coupe_Moteur *****************
 15309 ;; Defined at:
 15310 ;;		line 277 in file "action.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		cstack
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15324 ;;      Params:         0       0       0       0
 15325 ;;      Locals:         0       0       0       0
 15326 ;;      Temps:          0       0       0       0
 15327 ;;      Totals:         0       0       0       0
 15328 ;;Total ram usage:        0 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; Hardware stack levels required when called:    1
 15331 ;; This function calls:
 15332 ;;		i2_TIMER2_Off
 15333 ;; This function is called by:
 15334 ;;		i2_Alarme_On
 15335 ;; This function uses a non-reentrant model
 15336 ;;
 15337                           
 15338                           	psect	text98
 15339  002262                     __ptext98:
 15340                           	opt stack 0
 15341  002262                     i2_Coupe_Moteur:
 15342                           	opt stack 11
 15343                           
 15344                           ;action.c: 278: TIMER2_Off();
 15345                           
 15346                           ;incstack = 0
 15347  002262  EC07  F012         	call	i2_TIMER2_Off	;wreg free
 15348                           
 15349                           ;action.c: 283: LATEbits.LATE2 = 0;
 15350  002266  948D               	bcf	3981,2,c	;volatile
 15351                           
 15352                           ;action.c: 290: LATCbits.LATC0 = 0;
 15353  002268  908B               	bcf	3979,0,c	;volatile
 15354                           
 15355                           ;action.c: 291: LATCbits.LATC1 = 0;
 15356  00226A  928B               	bcf	3979,1,c	;volatile
 15357                           
 15358                           ;action.c: 292: OVDCOND = 0b00000000;
 15359  00226C  6A6B               	clrf	3947,c	;volatile
 15360                           
 15361                           ;action.c: 293: LATD4 = 0;LATD5 = 0;
 15362  00226E  988C               	bcf	3980,4,c	;volatile
 15363  002270  9A8C               	bcf	3980,5,c	;volatile
 15364                           
 15365                           ;action.c: 294: LATD6 = 0;LATD7 = 0;
 15366  002272  9C8C               	bcf	3980,6,c	;volatile
 15367  002274  9E8C               	bcf	3980,7,c	;volatile
 15368  002276  0012               	return		;funcret
 15369  002278                     __end_ofi2_Coupe_Moteur:
 15370                           	opt stack 0
 15371                           tblptru	equ	0xFF8
 15372                           tblptrh	equ	0xFF7
 15373                           tblptrl	equ	0xFF6
 15374                           tablat	equ	0xFF5
 15375                           prodh	equ	0xFF4
 15376                           prodl	equ	0xFF3
 15377                           intcon	equ	0xFF2
 15378                           intcon2	equ	0xFF1
 15379                           intcon3	equ	0xFF0
 15380                           postinc0	equ	0xFEE
 15381                           wreg	equ	0xFE8
 15382                           indf1	equ	0xFE7
 15383                           postdec1	equ	0xFE5
 15384                           fsr1h	equ	0xFE2
 15385                           fsr1l	equ	0xFE1
 15386                           bsr	equ	0xFE0
 15387                           indf2	equ	0xFDF
 15388                           postinc2	equ	0xFDE
 15389                           postdec2	equ	0xFDD
 15390                           fsr2h	equ	0xFDA
 15391                           fsr2l	equ	0xFD9
 15392                           status	equ	0xFD8
 15393                           
 15394 ;; *************** function i2_TIMER2_Off *****************
 15395 ;; Defined at:
 15396 ;;		line 165 in file "timer.c"
 15397 ;; Parameters:    Size  Location     Type
 15398 ;;		None
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;		None
 15401 ;; Return value:  Size  Location     Type
 15402 ;;                  1    wreg      void 
 15403 ;; Registers used:
 15404 ;;		None
 15405 ;; Tracked objects:
 15406 ;;		On entry : 0/0
 15407 ;;		On exit  : 0/0
 15408 ;;		Unchanged: 0/0
 15409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15410 ;;      Params:         0       0       0       0
 15411 ;;      Locals:         0       0       0       0
 15412 ;;      Temps:          0       0       0       0
 15413 ;;      Totals:         0       0       0       0
 15414 ;;Total ram usage:        0 bytes
 15415 ;; Hardware stack levels used:    1
 15416 ;; This function calls:
 15417 ;;		Nothing
 15418 ;; This function is called by:
 15419 ;;		i2_Coupe_Moteur
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           	psect	text99
 15424  00240E                     __ptext99:
 15425                           	opt stack 0
 15426  00240E                     i2_TIMER2_Off:
 15427                           	opt stack 11
 15428                           
 15429                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 15430                           
 15431                           ;incstack = 0
 15432  00240E  929D               	bcf	3997,1,c	;volatile
 15433                           
 15434                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 15435  002410  929E               	bcf	3998,1,c	;volatile
 15436  002412  0012               	return		;funcret
 15437  002414                     __end_ofi2_TIMER2_Off:
 15438                           	opt stack 0
 15439                           tblptru	equ	0xFF8
 15440                           tblptrh	equ	0xFF7
 15441                           tblptrl	equ	0xFF6
 15442                           tablat	equ	0xFF5
 15443                           prodh	equ	0xFF4
 15444                           prodl	equ	0xFF3
 15445                           intcon	equ	0xFF2
 15446                           intcon2	equ	0xFF1
 15447                           intcon3	equ	0xFF0
 15448                           postinc0	equ	0xFEE
 15449                           wreg	equ	0xFE8
 15450                           indf1	equ	0xFE7
 15451                           postdec1	equ	0xFE5
 15452                           fsr1h	equ	0xFE2
 15453                           fsr1l	equ	0xFE1
 15454                           bsr	equ	0xFE0
 15455                           indf2	equ	0xFDF
 15456                           postinc2	equ	0xFDE
 15457                           postdec2	equ	0xFDD
 15458                           fsr2h	equ	0xFDA
 15459                           fsr2l	equ	0xFD9
 15460                           status	equ	0xFD8
 15461                           
 15462 ;; *************** function i2_IRQ_CAPOT *****************
 15463 ;; Defined at:
 15464 ;;		line 902 in file "interrupt.c"
 15465 ;; Parameters:    Size  Location     Type
 15466 ;;		None
 15467 ;; Auto vars:     Size  Location     Type
 15468 ;;		None
 15469 ;; Return value:  Size  Location     Type
 15470 ;;                  1    wreg      void 
 15471 ;; Registers used:
 15472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15473 ;; Tracked objects:
 15474 ;;		On entry : 0/0
 15475 ;;		On exit  : 0/0
 15476 ;;		Unchanged: 0/0
 15477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15478 ;;      Params:         0       0       0       0
 15479 ;;      Locals:         0       0       0       0
 15480 ;;      Temps:          0       0       0       0
 15481 ;;      Totals:         0       0       0       0
 15482 ;;Total ram usage:        0 bytes
 15483 ;; Hardware stack levels used:    1
 15484 ;; Hardware stack levels required when called:    1
 15485 ;; This function calls:
 15486 ;;		i2_Etat_Update
 15487 ;; This function is called by:
 15488 ;;		_HIGH_PRIORITY_IRQ
 15489 ;; This function uses a non-reentrant model
 15490 ;;
 15491                           
 15492                           	psect	text100
 15493  0023B0                     __ptext100:
 15494                           	opt stack 0
 15495  0023B0                     i2_IRQ_CAPOT:
 15496                           	opt stack 13
 15497                           
 15498                           ;interrupt.c: 903: INT0IF = 0;
 15499                           
 15500                           ;incstack = 0
 15501  0023B0  92F2               	bcf	intcon,1,c	;volatile
 15502                           
 15503                           ;interrupt.c: 905: if(PORTAbits.RA2==1){
 15504  0023B2  A480               	btfss	3968,2,c	;volatile
 15505  0023B4  0012               	return	
 15506                           
 15507                           ;interrupt.c: 906: Etat_Update(2);
 15508  0023B6  0E02               	movlw	2
 15509  0023B8  EFAA  F010         	goto	i2_Etat_Update
 15510  0023BC                     __end_ofi2_IRQ_CAPOT:
 15511                           	opt stack 0
 15512                           tblptru	equ	0xFF8
 15513                           tblptrh	equ	0xFF7
 15514                           tblptrl	equ	0xFF6
 15515                           tablat	equ	0xFF5
 15516                           prodh	equ	0xFF4
 15517                           prodl	equ	0xFF3
 15518                           intcon	equ	0xFF2
 15519                           intcon2	equ	0xFF1
 15520                           intcon3	equ	0xFF0
 15521                           postinc0	equ	0xFEE
 15522                           wreg	equ	0xFE8
 15523                           indf1	equ	0xFE7
 15524                           postdec1	equ	0xFE5
 15525                           fsr1h	equ	0xFE2
 15526                           fsr1l	equ	0xFE1
 15527                           bsr	equ	0xFE0
 15528                           indf2	equ	0xFDF
 15529                           postinc2	equ	0xFDE
 15530                           postdec2	equ	0xFDD
 15531                           fsr2h	equ	0xFDA
 15532                           fsr2l	equ	0xFD9
 15533                           status	equ	0xFD8
 15534                           
 15535 ;; *************** function i2_Etat_Update *****************
 15536 ;; Defined at:
 15537 ;;		line 67 in file "action.c"
 15538 ;; Parameters:    Size  Location     Type
 15539 ;;  etat_new_val    1    wreg     unsigned char 
 15540 ;; Auto vars:     Size  Location     Type
 15541 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 15542 ;; Return value:  Size  Location     Type
 15543 ;;                  1    wreg      void 
 15544 ;; Registers used:
 15545 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15546 ;; Tracked objects:
 15547 ;;		On entry : 0/0
 15548 ;;		On exit  : 0/0
 15549 ;;		Unchanged: 0/0
 15550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15551 ;;      Params:         0       0       0       0
 15552 ;;      Locals:         1       0       0       0
 15553 ;;      Temps:          0       0       0       0
 15554 ;;      Totals:         1       0       0       0
 15555 ;;Total ram usage:        1 bytes
 15556 ;; Hardware stack levels used:    1
 15557 ;; This function calls:
 15558 ;;		Nothing
 15559 ;; This function is called by:
 15560 ;;		i2_IRQ_CAPOT
 15561 ;;		i2_Alarme_On
 15562 ;; This function uses a non-reentrant model
 15563 ;;
 15564                           
 15565                           	psect	text101
 15566  002154                     __ptext101:
 15567                           	opt stack 0
 15568  002154                     i2_Etat_Update:
 15569                           	opt stack 12
 15570                           
 15571                           ;incstack = 0
 15572                           ;i2Etat_Update@etat_new_value stored from wreg
 15573  002154  6E01               	movwf	i2Etat_Update@etat_new_value,c
 15574                           
 15575                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 15576  002156  504D               	movf	_Etat_Precedent_Index,w,c
 15577  002158  0F6A               	addlw	low _Etat_Log
 15578  00215A  6ED9               	movwf	fsr2l,c
 15579  00215C  6ADA               	clrf	fsr2h,c
 15580  00215E  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 15581                           
 15582                           ;action.c: 69: Etat = etat_new_value;
 15583  002162  C001  F0A8         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 15584                           
 15585                           ;action.c: 70: Etat_Precedent_Index++;
 15586  002166  2A4D               	incf	_Etat_Precedent_Index,f,c
 15587                           
 15588                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 15589  002168  0E0A               	movlw	10
 15590  00216A  184D               	xorwf	_Etat_Precedent_Index,w,c
 15591  00216C  B4D8               	btfsc	status,2,c
 15592                           
 15593                           ;action.c: 72: Etat_Precedent_Index = 0;
 15594  00216E  6A4D               	clrf	_Etat_Precedent_Index,c
 15595  002170  0012               	return		;funcret
 15596  002172                     __end_ofi2_Etat_Update:
 15597                           	opt stack 0
 15598                           tblptru	equ	0xFF8
 15599                           tblptrh	equ	0xFF7
 15600                           tblptrl	equ	0xFF6
 15601                           tablat	equ	0xFF5
 15602                           prodh	equ	0xFF4
 15603                           prodl	equ	0xFF3
 15604                           intcon	equ	0xFF2
 15605                           intcon2	equ	0xFF1
 15606                           intcon3	equ	0xFF0
 15607                           postinc0	equ	0xFEE
 15608                           wreg	equ	0xFE8
 15609                           indf1	equ	0xFE7
 15610                           postdec1	equ	0xFE5
 15611                           fsr1h	equ	0xFE2
 15612                           fsr1l	equ	0xFE1
 15613                           bsr	equ	0xFE0
 15614                           indf2	equ	0xFDF
 15615                           postinc2	equ	0xFDE
 15616                           postdec2	equ	0xFDD
 15617                           fsr2h	equ	0xFDA
 15618                           fsr2l	equ	0xFD9
 15619                           status	equ	0xFD8
 15620                           tblptru	equ	0xFF8
 15621                           tblptrh	equ	0xFF7
 15622                           tblptrl	equ	0xFF6
 15623                           tablat	equ	0xFF5
 15624                           prodh	equ	0xFF4
 15625                           prodl	equ	0xFF3
 15626                           intcon	equ	0xFF2
 15627                           intcon2	equ	0xFF1
 15628                           intcon3	equ	0xFF0
 15629                           postinc0	equ	0xFEE
 15630                           wreg	equ	0xFE8
 15631                           indf1	equ	0xFE7
 15632                           postdec1	equ	0xFE5
 15633                           fsr1h	equ	0xFE2
 15634                           fsr1l	equ	0xFE1
 15635                           bsr	equ	0xFE0
 15636                           indf2	equ	0xFDF
 15637                           postinc2	equ	0xFDE
 15638                           postdec2	equ	0xFDD
 15639                           fsr2h	equ	0xFDA
 15640                           fsr2l	equ	0xFD9
 15641                           status	equ	0xFD8
 15642                           
 15643                           	psect	rparam
 15644  0000                     tblptru	equ	0xFF8
 15645                           tblptrh	equ	0xFF7
 15646                           tblptrl	equ	0xFF6
 15647                           tablat	equ	0xFF5
 15648                           prodh	equ	0xFF4
 15649                           prodl	equ	0xFF3
 15650                           intcon	equ	0xFF2
 15651                           intcon2	equ	0xFF1
 15652                           intcon3	equ	0xFF0
 15653                           postinc0	equ	0xFEE
 15654                           wreg	equ	0xFE8
 15655                           indf1	equ	0xFE7
 15656                           postdec1	equ	0xFE5
 15657                           fsr1h	equ	0xFE2
 15658                           fsr1l	equ	0xFE1
 15659                           bsr	equ	0xFE0
 15660                           indf2	equ	0xFDF
 15661                           postinc2	equ	0xFDE
 15662                           postdec2	equ	0xFDD
 15663                           fsr2h	equ	0xFDA
 15664                           fsr2l	equ	0xFD9
 15665                           status	equ	0xFD8
 15666                           
 15667                           	psect	temp
 15668  000051                     btemp:
 15669                           	opt stack 0
 15670  000051                     	ds	1
 15671  0000                     int$flags	set	btemp
 15672                           tblptru	equ	0xFF8
 15673                           tblptrh	equ	0xFF7
 15674                           tblptrl	equ	0xFF6
 15675                           tablat	equ	0xFF5
 15676                           prodh	equ	0xFF4
 15677                           prodl	equ	0xFF3
 15678                           intcon	equ	0xFF2
 15679                           intcon2	equ	0xFF1
 15680                           intcon3	equ	0xFF0
 15681                           postinc0	equ	0xFEE
 15682                           wreg	equ	0xFE8
 15683                           indf1	equ	0xFE7
 15684                           postdec1	equ	0xFE5
 15685                           fsr1h	equ	0xFE2
 15686                           fsr1l	equ	0xFE1
 15687                           bsr	equ	0xFE0
 15688                           indf2	equ	0xFDF
 15689                           postinc2	equ	0xFDE
 15690                           postdec2	equ	0xFDD
 15691                           fsr2h	equ	0xFDA
 15692                           fsr2l	equ	0xFD9
 15693                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         536
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     20     160
    BANK1           256      0     256
    BANK2           239     10     138

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Apparait->_Etat_Update
    _IRQ_I_MOTEUR_1->_Alarme_On
    _Alarme_On->_Etat_Update
    _IRQ_CAPOT->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update
    i2_IRQ_CAPOT->i2_Etat_Update

Critical Paths under _main in BANK0

    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  200710
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                     _Init_Metalhome
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Metalhome                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  200611
                                              9 BANK2      1     1      0
                        _Buzzer_Etat
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
              _Mouvement_X_Metalhome
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   39905
                                              6 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26258
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X_Metalhome                                7     7      0   26351
                                              4 BANK2      1     1      0
                  _Capteur_Capot_Off
        _Check_List_Moteur_Metalhome
                       _Coupe_Moteur
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Metalhome                          0     0      0   26258
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   53639
                                              4 BANK2      3     1      2
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      62
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   26289
                          _Alarme_On
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40236
                                              6 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13163
                                              4 BANK2      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26589
                                              4 BANK2      1     1      0
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13098
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13098
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13098
                                             63 COMRAM     3     3      0
                                             13 BANK0      7     0      7
                                              0 BANK2      4     4      0
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     434
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     357
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                            _SPI_ISR
                      i1_Etat_Update
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     110
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      44
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Buzzer_Etat
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Etat_Update
           _IRQ_PION_Metal_Disparait
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Etat_Update
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Etat_Update
             _IRQ_PION_Metal_Disparait
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Etat_Update
             _IRQ_PION_Metal_Disparait
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_X_Metalhome
       _Capteur_Capot_Off
       _Check_List_Moteur_Metalhome
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Etat_Update
               _IRQ_PION_Metal_Disparait
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Etat_Update
           _IRQ_PION_Metal_Disparait
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Etat_Update
             _IRQ_PION_Metal_Disparait
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_Metalhome
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _SPI_ISR
   i1_Etat_Update
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2EE      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK2            EF      0       0       8        0.0%
BANK2               EF      A      8A       9       57.7%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     14      A0       4      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27A       5        0.0%
DATA                 0      0     27A      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 18 08:07:58 2018

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l260 0CC8  
                                                   l270 0D6A  
                                                   l249 0C2C  
                                                   l610 19DA  
                                                   l620 0DD8  
                                                   l532 2356  
                                                   l622 0E0C  
                                                   l286 1D86  
                                                   l607 19A6  
                                                   l635 0EE2  
                                                   l628 0E5E  
                                                   l588 1AD6  
                                                   l699 220E  
                                                   l990 1DEE  
                                                   l977 203E  
                                                   _GIE 007F97  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009D  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 2414  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0287  
                                                  l1015 17A4  
                                                  l1031 1154  
                                                  l1008 1742  
                                                  l1050 1204  
                                                  l1026 16FA  
                                                  l1019 1698  
                                                  l1061 17E2  
                                                  l1049 124C  
                                                  l1330 14F4  
                                                  l1420 046A  
                                                  l1504 0796  
                                                  l1432 058E  
                                                  l1506 07AC  
                                                  l1450 0620  
                                                  l1434 0592  
                                                  l1435 0598  
                                                  l1436 05D4  
                                                  l1437 05D6  
                                                  l1429 0560  
                                                  l2175 1CF8  
                                                  l1720 08C8  
                                                  l1480 072C  
                                                  l1464 068E  
                                                  l2185 1D78  
                                                  l1386 0182  
                                                  l1735 0988  
                                                  l1753 0A5E  
                                                  l1754 0A62  
                                                  l1589 2348  
                                                  l7200 0F3A  
                                                  l7104 1B00  
                                                  l7204 0F66  
                                                  l7124 19AA  
                                                  l7132 19BE  
                                                  l7118 199A  
                                                  l7240 1872  
                                                  l7160 0E2A  
                                                  l7064 2210  
                                                  l7144 19E2  
                                                  l8200 11CC  
                                                  l7170 0E86  
                                                  l7154 0E00  
                                                  l7090 1ADC  
                                                  l7218 21A2  
                                                  l7402 08D0  
                                                  l8202 11D4  
                                                  l7260 18B2  
                                                  l7252 189C  
                                                  l7244 187E  
                                                  l7236 1866  
                                                  l7164 0E32  
                                                  l7084 1AC4  
                                                  l7420 0958  
                                                  l7412 08FE  
                                                  l8132 2060  
                                                  l8220 1214  
                                                  l8212 11F8  
                                                  l8060 1EE6  
                                                  l8052 1ECE  
                                                  l7246 1886  
                                                  l7182 0EB6  
                                                  l7174 0E90  
                                                  l7270 1CC8  
                                                  l7510 0ACA  
                                                  l7406 08D6  
                                                  l8070 1EFE  
                                                  l8230 1234  
                                                  l8206 11E4  
                                                  l8302 1840  
                                                  l7248 188A  
                                                  l7256 18A6  
                                                  l7192 0F14  
                                                  l7096 1AEE  
                                                  l7088 1AD0  
                                                  l7272 1CD0  
                                                  l7520 0B54  
                                                  l7512 0AD0  
                                                  l7504 0AB4  
                                                  l7440 09C4  
                                                  l7424 095C  
                                                  l8400 1746  
                                                  _ADIF 007CF6  
                                                  l7178 0EAE  
                                                  l7282 1CEE  
                                                  l7274 1CD4  
                                                  l7290 1D50  
                                                  l7514 0B12  
                                                  l7522 0B5E  
                                                  l7530 0B88  
                                                  l7602 032E  
                                                  l8226 1226  
                                                  l8234 1242  
                                                  l8242 227E  
                                                  l7380 1532  
                                                  l7196 0F32  
                                                  l7188 0F0A  
                                                  l7292 1D58  
                                                  l7460 09F4  
                                                  l7436 09B0  
                                                  l7620 03AC  
                                                  l7612 0368  
                                                  l7604 034C  
                                                  l7540 00F8  
                                                  l8076 1F14  
                                                  l7294 1D5C  
                                                  l7526 0B6A  
                                                  l7454 09F0  
                                                  l7446 09C8  
                                                  l7470 0A1C  
                                                  l7542 010E  
                                                  l8158 1158  
                                                  l8334 169C  
                                                  l8246 2284  
                                                  l7384 1548  
                                                  l7376 14FE  
                                                  l7472 0A26  
                                                  l7528 0B70  
                                                  l7800 0760  
                                                  l7720 066A  
                                                  l7712 0658  
                                                  l7632 044C  
                                                  l7616 038A  
                                                  l7608 035A  
                                                  l7640 0474  
                                                  l7544 0116  
                                                  l8192 11B2  
                                                  l8184 1194  
                                                  l7298 1D6E  
                                                  l7802 076C  
                                                  l7642 04A4  
                                                  l7626 03CE  
                                                  l7570 01FC  
                                                  l7538 00DE  
                                                  l8434 1796  
                                                  l8194 11B6  
                                                  l8266 17E6  
                                                  l8362 16DA  
                                                  l8610 0CB6  
                                                  l7396 08B4  
                                                  l7820 07BA  
                                                  l7804 0772  
                                                  l7812 0784  
                                                  l7724 0670  
                                                  l7708 0652  
                                                  l7652 054E  
                                                  l7644 04AA  
                                                  l7628 041C  
                                                  l7580 023C  
                                                  l7564 01CC  
                                                  l7556 0186  
                                                  l7548 0156  
                                                  l7900 1E54  
                                                  l8428 1784  
                                                  l8292 1820  
                                                  l8620 0CE4  
                                                  l8452 1440  
                                                  l7478 0A3C  
                                                  l7822 07C0  
                                                  l7814 07A4  
                                                  l7734 0682  
                                                  l7654 0554  
                                                  l7582 025A  
                                                  l7574 0214  
                                                  l8630 0CF2  
                                                  l8534 0B92  
                                                  l7488 0A7C  
                                                  l7496 0A96  
                                                  l7808 0778  
                                                  l7760 06DE  
                                                  l7744 06C0  
                                                  l7672 05E4  
                                                  l7664 059E  
                                                  l7656 055A  
                                                  l7648 04C2  
                                                  l7568 01F0  
                                                  l7904 1E5C  
                                                  l8368 16EC  
                                                  l8560 0BEC  
                                                  l8552 0BCE  
                                                  l8536 0B9C  
                                                  l7498 0A9C  
                                                  l7818 07B2  
                                                  l7770 06F0  
                                                  l7666 05C8  
                                                  l7594 02D0  
                                                  l7586 0278  
                                                  l7578 0234  
                                                  l8298 1832  
                                                  l8618 0CD4  
                                                  l7756 06D8  
                                                  l7748 06C6  
                                                  l7772 06FC  
                                                  l7684 05FC  
                                                  l7676 05EA  
                                                  l7596 02EE  
                                                  l7588 02AA  
                                                  l7828 07CC  
                                                  l7916 1F36  
                                                  l8636 0D16  
                                                  l8580 0C38  
                                                  l8572 0C1A  
                                                  l8556 0BE0  
                                                  _ADON 007E10  
                                                  l7782 073A  
                                                  l7774 0702  
                                                  l7598 030C  
                                                  l7918 1F3A  
                                                  l8662 0D74  
                                                  l8654 0D48  
                                                  l8646 0D24  
                                                  l8582 0C48  
                                                  l7784 0740  
                                                  l7792 0748  
                                                  l7688 0602  
                                                  l8664 0D84  
                                                  l8656 0D5E  
                                                  l8672 0DB4  
                                                  l7794 0754  
                                                  l7778 0738  
                                                  l7698 0614  
                                                  l8666 0D94  
                                                  l8594 0C76  
                                                  l7796 075A  
                                                  l7788 0742  
                                                  l7892 1E40  
                                                  l8668 0DA4  
                                                  l7894 1E44  
                                                  l7878 2204  
                                                  l8598 0C88  
                                                  l7888 1E3A  
                                                  STR_1 3CB9  
                                                  STR_2 3BB7  
                                                  STR_3 3CEC  
                                                  STR_4 3C9B  
                                                  STR_5 3CF9  
                                                  STR_6 3CB9  
                                                  STR_7 3C6A  
                                                  STR_8 3CBC  
                                                  STR_9 3CB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0F7C  
                                      ??i2_Coupe_Moteur 0001  
                                                  _IOFS 007E9A  
                                                  u5230 0F04  
                                                  u5150 0DFA  
                                                  _PEIE 007F96  
                                                  u5190 0E80  
                                                  u5650 01C6  
                                                  _PR5H 000F91  
                                                  _PR5L 000F90  
                                                  u6607 15D8  
                                                  u6617 15EA  
                                                  u6627 15FC  
                                                  u6637 160E  
                                                  u6647 1620  
                                                  u6657 1632  
                                                  u6667 1644  
                                                  u6587 15B4  
                                                  u5875 07A0  
                                                  u5876 07A2  
                                                  u6677 1656  
                                                  u6597 15C6  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 2420  
                                    _Detection_Pion_Off 23DA  
                                         _nb_s_bequille 004C  
                                       _Option_Multitas 027E  
                                                  _Etat 00A8  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 1D82  
                               IRQ_Execution@IRQ_Indice 0012  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 1366  
                                 __end_of_IRQ_Execution 1C1E  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 00EB  
                           __end_of_EUSART1_RX_T3_LOCAL 08AC  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00D6  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A4  
                                       __end_of_Init_IT 1E2C  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 000C  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 009C  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 232E  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0010  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 22EE  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0010  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 231E  
            _Surveillance_Consommation_Moteur_1_Activer 22DE  
                                    __size_ofi1_IRQ_PWM 0004  
                               ??_Mouvement_X_Metalhome 0043  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 231E  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0010  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 22DE  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0010  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 230E  
            _Surveillance_Consommation_Moteur_2_Activer 22CE  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0286  
                                       __end_of___lbdiv 1E60  
                                                 STR_10 3C16  
                                                 STR_11 3CDB  
                                       __end_of___awmod 18BC  
                                        _Bequille_I_Max 004A  
                                      _LOW_PRIORITY_IRQ 0018  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 000C  
                                       __end_of___lwdiv 1D02  
                                         _Init_Moteur_1 22AE  
                                         _Init_Moteur_2 229E  
                                       __end_of___lwmod 1D82  
                                                 i1l610 1A3E  
                                                 i1l620 0F7E  
                                                 i1l532 2364  
                                                 i1l622 0FB2  
                                                 i1l607 1A0A  
                                                 i1l635 1088  
                                                 i1l651 0054  
                                                 i1l628 1004  
                                                 i1l661 0094  
                                                 i1l653 0060  
                                                 i1l663 00A0  
                                                 i1l655 006C  
                                                 i1l648 004A  
                                                 i1l665 00AC  
                                                 i1l657 0088  
                                                 i1l658 007C  
                                                 i1l588 1B34  
                                                 i1l668 00B6  
                                                 i2l710 1D2E  
                                                 i2l713 1D38  
                                                 i2l706 1D16  
                                                 i2l708 1D22  
                                                 i2l699 2250  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                         _Init_Variable 1438  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 233E  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 1F50  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0B92  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 1FF8  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3BAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 2136  
                                       __end_of_isdigit 21AA  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0286  
                                                 status 000FD8  
                                     _Mouvement_Startup 004E  
                                       __end_of_sprintf 0B92  
                          __end_of_EUSART1_Check_Buffer 1FA8  
                                       ___lbdiv@divisor 000F  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 002E  
                          __size_of_Check_List_Moteur_2 0026  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 23EA  
                                       __initialization 1C6E  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 00FA  
                                  EUSART1_RX_T3_LOCAL@B 00FB  
                                  EUSART1_RX_T3_LOCAL@C 00FC  
                                  EUSART1_RX_T3_LOCAL@D 00FD  
                                  EUSART1_RX_T3_LOCAL@E 00FE  
                                  EUSART1_RX_T3_LOCAL@F 00FF  
                                      __end_of_Etat_Get 1EC6  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1C6E  
                                          __end_of_main 1DBE  
                                   __end_of_Init_TIMER0 20F8  
                                   __end_of_Init_TIMER2 21C4  
                                   __end_of_Init_TIMER5 1FD0  
                                      __end_of_Init_ADC 2118  
                                      __end_of_Init_SPI 20B6  
                                      __end_of_Init_PWM 218E  
                                 __end_of_delay_n_100ms 228C  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0288  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                                        _Init_Metalhome 23BC  
                          _Consigne_Max_Moteur_Bequille 0091  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 1DF8  
                            _Check_List_Moteur_Bequille 1DBE  
                           __end_of_EUSART1_Buffer_Send 15AE  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1341 201C  
                                                i1l1661 128A  
                                                i1l6500 128E  
                                                i1l6510 12F6  
                                     __end_of_IRQ_CAPOT 23B0  
                                                i1l6520 132E  
                                                i1l6512 12FE  
                                                i1l6506 12D8  
                                                i1l6602 1B4C  
                                                i1l6610 1B5E  
                                                i1l6516 1312  
                                                i1l6524 1332  
                                                i1l6700 10D8  
                                                i1l6622 19FE  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6560 13E4  
                                                i1l6528 134A  
                                                i1l6704 10E0  
                                                i1l6570 1416  
                                                i1l6554 13BE  
                                                i1l6564 13F8  
                                                i1l6548 1374  
                                                i1l6492 1260  
                                                i1l6708 110C  
                                                i1l6628 1A0E  
                                                i1l6636 1A22  
                                                i1l6558 13DC  
                                                i1l6590 1B22  
                                                i1l6576 141A  
                                                i1l6664 0FD0  
                                                i1l6648 1A46  
                                                i1l6682 1054  
                                                i1l6674 102C  
                                                i1l6658 0FA6  
                                                i1l6594 1B2E  
                                                i1l6692 10B0  
                                                i1l6668 0FD8  
                                                i1l6596 1B3A  
                                                i1l6686 105C  
                                                i1l6678 1036  
                                                i1l6696 10BA  
                                                i2l4598 2252  
                                     __end_ofi1_IRQ_ADC 1122  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 2424  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 0006  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 0289  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A2  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A7  
                                      __end_of_delay_1s 1FF8  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 220A  
                                 _Consigne_Max_Moteur_X 0093  
                                 _Consigne_Max_Moteur_Z 0092  
                                     __end_of_TIMER2_On 23F0  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 170E  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 235A  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0288  
                                                ___wmul 206C  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 2380  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 2374  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0286  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1C76  
                                                clear_1 1C88  
                                                clear_2 1C94  
                                                clear_3 1CA4  
                                __end_of_Init_Metalhome 23C6  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 2236  
                                           _Etat_Update 2118  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3BA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00EC  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 2398  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 238C  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 22FE  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 1D44  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 1CAA  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 20D8  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 20D8  
                                           _Init_TIMER2 21AA  
                                           _Init_TIMER5 1FA8  
                                         ___rparam_used 000001  
                                         ?i2_IRQ_TIMER2 0001  
                  __size_of_Check_List_Moteur_Metalhome 0030  
                                     _Capteur_Capot_Off 2418  
                                         __end_of_Cycle 0DD6  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 00F9  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                       ?_Init_Metalhome 0001  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 2398  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 1922  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 2154  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 1F7C  
                                __size_ofi1_IRQ_TIMER_0 005E  
                                __size_ofi1_IRQ_TIMER_5 0064  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 1438  
                                   __end_of_Mouvement_X 1258  
                                   __end_of_Mouvement_Z 170E  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F6  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0090  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 234C  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00D6  
                             __end_of_Capteur_Capot_Off 241C  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_of_IRQ_TIMER_0 005E  
                                  __size_of_IRQ_TIMER_5 0064  
                               __size_ofi1_Coupe_Moteur 0016  
                                  __size_ofi2_IRQ_CAPOT 000C  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0089  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                        __size_of_Mouvement_X_Metalhome 009C  
                                 __end_ofi2_Etat_Update 2172  
                                   _Check_List_Moteur_1 1EF6  
                                   _Check_List_Moteur_2 2020  
                         __end_of_Mouvement_X_Metalhome 1854  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0DD6  
                                               _P4_busy 00AA  
                                               _IRQ_PWM 241C  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 23F6  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 0099  
                                               _SPI_ISR 1258  
                              Mouvement_X@type_consigne 0284  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 1D3C  
                                 __end_ofi1_Buzzer_Etat 2368  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1B6E  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A0  
                                     delay_s@delay_time 0284  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 238C  
                                    __end_of_TIMER2_Off 2402  
                                    __end_of_TIMER5_Off 23D0  
                                      _consigne_pwm_max 008B  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 1DF8  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1B10  
                                         i1_IRQ_TIMER_5 19EC  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00A9  
                                               ___lbdiv 1E2C  
                                               ___awmod 1854  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                 __size_of_Coupe_Moteur 0016  
                                       __size_of___wmul 0026  
                          __size_of_EUSART1_RX_T3_LOCAL 07D2  
                                 __end_of_Etat_Intitule 1E94  
                                               ___lwdiv 1CB8  
                                               ___lwmod 1D44  
                                         _type_consigne 008F  
                                               __pcinit 1C6E  
                                               _delay_s 1F24  
                                               __ramtop 0300  
                                               __ptext0 1D82  
                                               _nb_Pion 009F  
                                               __ptext1 1438  
                                               __ptext2 1FA8  
                                               __ptext3 21AA  
                                               __ptext4 20D8  
                                               __ptext5 2092  
                                               __ptext6 18BC  
                          __end_of_Init_Moteur_Bequille 22CE  
                                               __ptext7 2172  
                                               __ptext8 23BC  
                                               __ptext9 1DF8  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 23E2  
                                           _Mouvement_X 1122  
                                           _Mouvement_Z 1664  
                                     __end_of_hexpowers 3BB7  
                                  _Init_Input_Capture_0 20B6  
                        _Capteur_Capot_Compteur_Temps_S 009B  
                                               _dpowers 3BA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 23FC  
                                               _isdigit 218E  
                                   _EUSART1_IT_ACTIVATE 2368  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1C1E  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0012  
                                          _Consigne_Max 0094  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08AC  
                                        __pintcode_body 1D02  
                                  end_of_initialization 1CAA  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004D  
                                         __Lmediumconst 3BA4  
                                               int_func 1D02  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 2220  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 23A4  
                                             i1_IRQ_ADC 0F7C  
                    _Surveillance_Consommation_Moteur_1 0049  
                    _Surveillance_Consommation_Moteur_2 0048  
                                             i1_IRQ_PWM 2420  
                               __size_ofi2_Coupe_Moteur 0016  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 21F4  
                                             _TIMER2_On 23EA  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 009E  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A3  
                                  __end_ofi1_TIMER2_Off 2408  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 23DA  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 240E  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                          ?_Check_List_Moteur_Metalhome 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0018  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 234C  
                                      _nb_100ms_platine 00A1  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 2414  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 0285  
                                   __end_of_delay_100ms 1664  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 0285  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 2046  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008C  
                                         _IRQ_Execution 1BCA  
                                             _Alarme_On 22EE  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0287  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 2236  
                                      ??_Init_Metalhome 000F  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 2092  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1C6E  
                                 __end_of_Stop_Moteur_1 2418  
                                             _Init_Port 18BC  
                              _IRQ_PION_Metal_Disparait 23F6  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                         ??_Check_List_Moteur_Metalhome 0043  
                                       _delay_s_counter 008A  
                             __end_of_Detection_Pion_On 206C  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 1F50  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 224C  
                                  _Init_Moteur_Bequille 22BE  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 003A  
                                         _delay_n_100ms 2278  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005C  
                                 __end_of_Init_Moteur_1 22BE  
                                 __end_of_Init_Moteur_2 22AE  
                                 __end_of_Init_Variable 14F4  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 0098  
                                _Image_Courant_Moteur_2 0097  
                                         __pcstackBANK0 00EC  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 228C  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 15AE  
                                            ?_Init_Port 0001  
                                          _isdigit$3714 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00DA  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F5  
                                           sprintf@prec 00F2  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0002  
                                           ??_IRQ_CAPOT 0010  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 2262  
                                             __pintcode 0008  
                                         __pmediumconst 3BA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0018  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                             __ptext100 23B0  
                                             __ptext101 2154  
                                              ?___lbdiv 000F  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 00F9  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008D  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A6  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 0284  
                                          ?_Mouvement_Z 0286  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0244  
                                  __size_of_Etat_Update 001E  
                                 _Mouvement_X_Metalhome 17B8  
                                             _hexpowers 3BAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 21DC  
                                      i2_IRQ_I_MOTEUR_2 224C  
                                          i1_TIMER2_Off 2402  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 23D0  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 2278  
                                              _PIE3bits 000FA3  
                                __size_ofi2_Etat_Update 001E  
                                              i1u451_20 0FA0  
                                              i1u455_20 1026  
                                          i2_IRQ_TIMER2 2408  
                                              i1u459_20 10AA  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 0280  
                                   __end_of_IRQ_TIMER_0 1B10  
                                   __end_of_IRQ_TIMER_5 19EC  
                                   __end_ofi2_IRQ_CAPOT 23BC  
                                              _SPI_MODE 0278  
                                          i2_TIMER2_Off 240E  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 23E2  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 14F4  
                                         i1_Etat_Update 2136  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0096  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1F24  
                           __end_of_Check_List_Moteur_2 2046  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 1E94  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 20F8  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 2092  
                                              _Init_PWM 2172  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009A  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1AB2  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 1A50  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 1988  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 1922  
                                   __end_ofi1_Alarme_On 230E  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                        Mouvement_X_Metalhome@direction 0284  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 233E  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                            ??_IRQ_PION_Metal_Disparait 000F  
                                      __size_of_delay_s 002C  
                              __end_of_SPI_Check_Buffer 1F7C  
                                    __end_of_u_Init_PWM 1BCA  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F0  
                                            sprintf@val 00F3  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 2154  
                                ?_Mouvement_X_Metalhome 0001  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 1FD0  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 20B6  
                                              __ptext11 20F8  
                                              __ptext20 1EC6  
                                              __ptext12 1C1E  
                                              __ptext21 1122  
                                              __ptext13 2368  
                                              __ptext30 2418  
                                              __ptext22 2374  
                                              __ptext14 0B92  
                                              __ptext31 170E  
                                              __ptext23 2414  
                                              __ptext15 2278  
                                              __ptext40 23DA  
                                              __ptext32 1B6E  
                                              __ptext24 22AE  
                                              __ptext16 1664  
                                              __ptext41 1DBE  
                                              __ptext33 1F24  
                                              __ptext25 1A50  
                                              __ptext17 229E  
                                              __ptext50 1CB8  
                                              __ptext42 1E2C  
                                              __ptext34 2380  
                                              __ptext26 2046  
                                              __ptext18 2020  
                                              __ptext51 1FD0  
                                              __ptext43 1F50  
                                              __ptext35 23EA  
                                              __ptext27 233E  
                                              __ptext19 17B8  
                                              __ptext60 23F0  
                                              __ptext52 15AE  
                                              __ptext44 1F7C  
                                              __ptext36 238C  
                                              __ptext28 1EF6  
                                              __ptext61 241C  
                                              __ptext53 1BCA  
                                              __ptext45 00DA  
                                              __ptext37 22BE  
                                              __ptext29 228C  
                                              __ptext70 2118  
                                              __ptext62 23F6  
                                              __ptext54 1988  
                                              __ptext46 08AC  
                                              __ptext38 21F4  
                                              __ptext71 0DD6  
                                              __ptext63 2398  
                                              __ptext55 23C6  
                                              __ptext47 218E  
                                              __ptext39 1922  
                                              __ptext80 22FE  
                                              __ptext72 1E60  
                                              __ptext64 220A  
                                              __ptext56 234C  
                                              __ptext48 206C  
                                              __ptext81 2136  
                                              __ptext73 1E94  
                                              __ptext65 21C4  
                                              __ptext57 1AB2  
                                              __ptext49 1D44  
                                              __ptext90 1FF8  
                                              __ptext82 2236  
                                              __ptext74 1854  
                                              __ptext66 22EE  
                                              __ptext58 22CE  
                                              __ptext91 1366  
                                              __ptext83 2402  
                                              __ptext75 14F4  
                                              __ptext67 2220  
                                              __ptext59 22DE  
                                              __ptext92 23E2  
                                              __ptext84 1B10  
                                              __ptext68 23FC  
                                              __ptext85 230E  
                                              __ptext77 19EC  
                                              __ptext69 23A4  
                                              __ptext94 2408  
                                              __ptext86 231E  
                                              __ptext78 23D0  
                                              __ptext95 224C  
                                              __ptext87 2420  
                                              __ptext79 235A  
                                              __ptext96 21DC  
                                              __ptext88 0F7C  
                                              __ptext97 232E  
                                              __ptext89 1258  
                                              __ptext98 2262  
                                              __ptext99 240E  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 2374  
                                          _UART_TX_TEXT 00AB  
                                      __size_of_sprintf 02E6  
                                              _consigne 0095  
                                         i1_Buzzer_Etat 235A  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 003C  
                                           _IRQ_TIMER_0 1AB2  
                                           _IRQ_TIMER_5 1988  
                          __size_of_Detection_Pion_Init 000E  
                                           i2_IRQ_CAPOT 23B0  
                              __end_of_Capteur_Capot_On 229E  
                                        _IRQ_I_MOTEUR_1 21C4  
                                        _IRQ_I_MOTEUR_2 220A  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 004B  
                                         _Etat_Intitule 1E60  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 1366  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00BE  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                                  __size_of_Mouvement_X 0136  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 17B8  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 008E  
                                           i1_Alarme_On 22FE  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F1  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 23A4  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0286  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1B6E  
                                 __end_ofi1_IRQ_TIMER_5 1A50  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 232E  
                          __end_of_EUSART1_Transmit_ISR 2020  
                                __end_of_IRQ_I_MOTEUR_1 21DC  
                                __end_of_IRQ_I_MOTEUR_2 2220  
                                            _IRQ_TIMER2 23F0  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 00A5  
                              __end_ofi2_IRQ_I_MOTEUR_1 21F4  
                              __end_ofi2_IRQ_I_MOTEUR_2 2262  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 2380  
                                            _TIMER2_Off 23FC  
                                            _TIMER5_Off 23C6  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F8  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                               __size_of_Init_Metalhome 000A  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                   __end_of_Check_List_Moteur_Metalhome 1EF6  
                           _Check_List_Moteur_Metalhome 1EC6  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 0284  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
