

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Mon May 13 06:35:00 2019

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.42
   128                           ; Generated 13/04/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F4431 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162                           	psect	mediumconst
   163  003EA4                     __pmediumconst:
   164                           	opt stack 0
   165  003EA4  00                 	db	0
   166  003EA5                     _dpowers:
   167                           	opt stack 0
   168  003EA5  0001               	dw	1
   169  003EA7  000A               	dw	10
   170  003EA9  0064               	dw	100
   171  003EAB  03E8               	dw	1000
   172  003EAD  2710               	dw	10000
   173  003EAF                     __end_of_dpowers:
   174                           	opt stack 0
   175  003EAF                     _hexpowers:
   176                           	opt stack 0
   177  003EAF  0001               	dw	1
   178  003EB1  0010               	dw	16
   179  003EB3  0100               	dw	256
   180  003EB5  1000               	dw	4096
   181  003EB7                     __end_of_hexpowers:
   182                           	opt stack 0
   183  0000                     _SSPCONbits	set	4038
   184  0000                     _SSPSTATbits	set	4039
   185  0000                     _RCREG1	set	4014
   186  0000                     _SSPBUF	set	4041
   187  0000                     _TXREG1	set	4013
   188  0000                     _TXSTA1	set	4012
   189  0000                     _RCSTA1	set	4011
   190  0000                     _BAUDCON	set	4010
   191  0000                     _RCSTA1bits	set	4011
   192  0000                     _SPBRGH	set	4016
   193  0000                     _SPBRG	set	4015
   194  0000                     _TXSTA1bits	set	4012
   195  0000                     _BAUDCONbits	set	4010
   196  0000                     _PR5L	set	3984
   197  0000                     _PR5H	set	3985
   198  0000                     _TMR5H	set	3976
   199  0000                     _TMR5L	set	3975
   200  0000                     _T5CONbits	set	4023
   201  0000                     _PR2	set	4043
   202  0000                     _T2CONbits	set	4042
   203  0000                     _T2CON	set	4042
   204  0000                     _TMR0L	set	4054
   205  0000                     _TMR0H	set	4055
   206  0000                     _T0CONbits	set	4053
   207  0000                     _LATEbits	set	3981
   208  0000                     _SEVTCMPL	set	3953
   209  0000                     _SEVTCMPH	set	3952
   210  0000                     _PWMCON0bits	set	3951
   211  0000                     _PTCON0bits	set	3967
   212  0000                     _PTCON1bits	set	3966
   213  0000                     _OVDCONS	set	3946
   214  0000                     _OVDCOND	set	3947
   215  0000                     _DTCON	set	3949
   216  0000                     _PWMCON1	set	3950
   217  0000                     _PWMCON0	set	3951
   218  0000                     _PTCON1	set	3966
   219  0000                     _PTCON0	set	3967
   220  0000                     _PTPERH	set	3962
   221  0000                     _LATE	set	3981
   222  0000                     _LATD	set	3980
   223  0000                     _LATC	set	3979
   224  0000                     _LATB	set	3978
   225  0000                     _LATA	set	3977
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISE	set	3990
   228  0000                     _TRISDbits	set	3989
   229  0000                     _TRISD	set	3989
   230  0000                     _TRISCbits	set	3988
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISBbits	set	3987
   233  0000                     _TRISB	set	3987
   234  0000                     _TRISAbits	set	3986
   235  0000                     _TRISA	set	3986
   236  0000                     _TMR2	set	4044
   237  0000                     _LATCbits	set	3979
   238  0000                     _RCREG	set	4014
   239  0000                     _PIR1bits	set	3998
   240  0000                     _PDC1H	set	3958
   241  0000                     _PDC1L	set	3959
   242  0000                     _PDC0H	set	3960
   243  0000                     _PDC0L	set	3961
   244  0000                     _PTPERL	set	3963
   245  0000                     _PORTAbits	set	3968
   246  0000                     _PORTCbits	set	3970
   247  0000                     _CAP2CONbits	set	3938
   248  0000                     _PIR3bits	set	4004
   249  0000                     _IPR3bits	set	4005
   250  0000                     _PIE3bits	set	4003
   251  0000                     _CAP1CONbits	set	3939
   252  0000                     _RCONbits	set	4048
   253  0000                     _INTCON3bits	set	4080
   254  0000                     _INTCON2bits	set	4081
   255  0000                     _INTCONbits	set	4082
   256  0000                     _LATAbits	set	3977
   257  0000                     _ADRESH	set	4036
   258  0000                     _IPR1bits	set	3999
   259  0000                     _PIE1bits	set	3997
   260  0000                     _ADCON3bits	set	3994
   261  0000                     _ADCON1bits	set	4033
   262  0000                     _ADCON0bits	set	4034
   263  0000                     _ANSEL1	set	4025
   264  0000                     _ANSEL0	set	4024
   265  0000                     _ADCHS	set	3993
   266  0000                     _ADCON3	set	3994
   267  0000                     _ADCON2bits	set	4032
   268  0000                     _ADCON2	set	4032
   269  0000                     _ADCON1	set	4033
   270  0000                     _ADCON0	set	4034
   271  0000                     _OSCCON	set	4051
   272  0000                     _PORTBbits	set	3969
   273  0000                     _TRMT1	set	32097
   274  0000                     _LATC5	set	31837
   275  0000                     _GIE	set	32663
   276  0000                     _PEIE	set	32662
   277  0000                     _TMR2IF	set	31985
   278  0000                     _LATD7	set	31847
   279  0000                     _LATD6	set	31846
   280  0000                     _LATD5	set	31845
   281  0000                     _LATD4	set	31844
   282  0000                     _SEVTDIR	set	31603
   283  0000                     _INT0IF	set	32657
   284  0000                     _PTIF	set	32036
   285  0000                     _GODONE	set	32273
   286  0000                     _ADIF	set	31990
   287  0000                     _ADON	set	32272
   288  0000                     _IOFS	set	32410
   289  003EB7                     STR_2:
   290  003EB7  63                 	db	99	;'c'
   291  003EB8  6F                 	db	111	;'o'
   292  003EB9  6E                 	db	110	;'n'
   293  003EBA  73                 	db	115	;'s'
   294  003EBB  69                 	db	105	;'i'
   295  003EBC  67                 	db	103	;'g'
   296  003EBD  6E                 	db	110	;'n'
   297  003EBE  65                 	db	101	;'e'
   298  003EBF  3D                 	db	61	;'='
   299  003EC0  25                 	db	37
   300  003EC1  64                 	db	100	;'d'
   301  003EC2  20                 	db	32
   302  003EC3  69                 	db	105	;'i'
   303  003EC4  5F                 	db	95	;'_'
   304  003EC5  31                 	db	49	;'1'
   305  003EC6  3D                 	db	61	;'='
   306  003EC7  25                 	db	37
   307  003EC8  64                 	db	100	;'d'
   308  003EC9  20                 	db	32
   309  003ECA  69                 	db	105	;'i'
   310  003ECB  5F                 	db	95	;'_'
   311  003ECC  32                 	db	50	;'2'
   312  003ECD  3D                 	db	61	;'='
   313  003ECE  25                 	db	37
   314  003ECF  64                 	db	100	;'d'
   315  003ED0  20                 	db	32
   316  003ED1  64                 	db	100	;'d'
   317  003ED2  75                 	db	117	;'u'
   318  003ED3  74                 	db	116	;'t'
   319  003ED4  79                 	db	121	;'y'
   320  003ED5  3D                 	db	61	;'='
   321  003ED6  25                 	db	37
   322  003ED7  64                 	db	100	;'d'
   323  003ED8  20                 	db	32
   324  003ED9  65                 	db	101	;'e'
   325  003EDA  72                 	db	114	;'r'
   326  003EDB  72                 	db	114	;'r'
   327  003EDC  65                 	db	101	;'e'
   328  003EDD  75                 	db	117	;'u'
   329  003EDE  72                 	db	114	;'r'
   330  003EDF  3D                 	db	61	;'='
   331  003EE0  25                 	db	37
   332  003EE1  64                 	db	100	;'d'
   333  003EE2  20                 	db	32
   334  003EE3  50                 	db	80	;'P'
   335  003EE4  61                 	db	97	;'a'
   336  003EE5  74                 	db	116	;'t'
   337  003EE6  69                 	db	105	;'i'
   338  003EE7  6E                 	db	110	;'n'
   339  003EE8  61                 	db	97	;'a'
   340  003EE9  67                 	db	103	;'g'
   341  003EEA  65                 	db	101	;'e'
   342  003EEB  5F                 	db	95	;'_'
   343  003EEC  4E                 	db	78	;'N'
   344  003EED  62                 	db	98	;'b'
   345  003EEE  5F                 	db	95	;'_'
   346  003EEF  45                 	db	69	;'E'
   347  003EF0  73                 	db	115	;'s'
   348  003EF1  73                 	db	115	;'s'
   349  003EF2  61                 	db	97	;'a'
   350  003EF3  69                 	db	105	;'i'
   351  003EF4  3D                 	db	61	;'='
   352  003EF5  25                 	db	37
   353  003EF6  64                 	db	100	;'d'
   354  003EF7  20                 	db	32
   355  003EF8  43                 	db	67	;'C'
   356  003EF9  61                 	db	97	;'a'
   357  003EFA  70                 	db	112	;'p'
   358  003EFB  74                 	db	116	;'t'
   359  003EFC  65                 	db	101	;'e'
   360  003EFD  75                 	db	117	;'u'
   361  003EFE  72                 	db	114	;'r'
   362  003EFF  5F                 	db	95	;'_'
   363  003F00  43                 	db	67	;'C'
   364  003F01  61                 	db	97	;'a'
   365  003F02  70                 	db	112	;'p'
   366  003F03  6F                 	db	111	;'o'
   367  003F04  74                 	db	116	;'t'
   368  003F05  5F                 	db	95	;'_'
   369  003F06  4E                 	db	78	;'N'
   370  003F07  62                 	db	98	;'b'
   371  003F08  5F                 	db	95	;'_'
   372  003F09  45                 	db	69	;'E'
   373  003F0A  76                 	db	118	;'v'
   374  003F0B  65                 	db	101	;'e'
   375  003F0C  6E                 	db	110	;'n'
   376  003F0D  65                 	db	101	;'e'
   377  003F0E  6D                 	db	109	;'m'
   378  003F0F  65                 	db	101	;'e'
   379  003F10  6E                 	db	110	;'n'
   380  003F11  74                 	db	116	;'t'
   381  003F12  3D                 	db	61	;'='
   382  003F13  25                 	db	37
   383  003F14  64                 	db	100	;'d'
   384  003F15  00                 	db	0
   385  003F16                     STR_10:
   386  003F16  25                 	db	37
   387  003F17  30                 	db	48	;'0'
   388  003F18  32                 	db	50	;'2'
   389  003F19  58                 	db	88	;'X'
   390  003F1A  20                 	db	32
   391  003F1B  25                 	db	37
   392  003F1C  30                 	db	48	;'0'
   393  003F1D  32                 	db	50	;'2'
   394  003F1E  58                 	db	88	;'X'
   395  003F1F  20                 	db	32
   396  003F20  25                 	db	37
   397  003F21  30                 	db	48	;'0'
   398  003F22  32                 	db	50	;'2'
   399  003F23  58                 	db	88	;'X'
   400  003F24  20                 	db	32
   401  003F25  25                 	db	37
   402  003F26  30                 	db	48	;'0'
   403  003F27  32                 	db	50	;'2'
   404  003F28  58                 	db	88	;'X'
   405  003F29  20                 	db	32
   406  003F2A  25                 	db	37
   407  003F2B  30                 	db	48	;'0'
   408  003F2C  32                 	db	50	;'2'
   409  003F2D  58                 	db	88	;'X'
   410  003F2E  20                 	db	32
   411  003F2F  25                 	db	37
   412  003F30  30                 	db	48	;'0'
   413  003F31  32                 	db	50	;'2'
   414  003F32  58                 	db	88	;'X'
   415  003F33  20                 	db	32
   416  003F34  25                 	db	37
   417  003F35  30                 	db	48	;'0'
   418  003F36  32                 	db	50	;'2'
   419  003F37  58                 	db	88	;'X'
   420  003F38  20                 	db	32
   421  003F39  25                 	db	37
   422  003F3A  30                 	db	48	;'0'
   423  003F3B  32                 	db	50	;'2'
   424  003F3C  58                 	db	88	;'X'
   425  003F3D  20                 	db	32
   426  003F3E  25                 	db	37
   427  003F3F  30                 	db	48	;'0'
   428  003F40  32                 	db	50	;'2'
   429  003F41  58                 	db	88	;'X'
   430  003F42  20                 	db	32
   431  003F43  25                 	db	37
   432  003F44  30                 	db	48	;'0'
   433  003F45  32                 	db	50	;'2'
   434  003F46  58                 	db	88	;'X'
   435  003F47  20                 	db	32
   436  003F48  25                 	db	37
   437  003F49  30                 	db	48	;'0'
   438  003F4A  32                 	db	50	;'2'
   439  003F4B  58                 	db	88	;'X'
   440  003F4C  20                 	db	32
   441  003F4D  25                 	db	37
   442  003F4E  30                 	db	48	;'0'
   443  003F4F  31                 	db	49	;'1'
   444  003F50  58                 	db	88	;'X'
   445  003F51  20                 	db	32
   446  003F52  25                 	db	37
   447  003F53  30                 	db	48	;'0'
   448  003F54  31                 	db	49	;'1'
   449  003F55  58                 	db	88	;'X'
   450  003F56  20                 	db	32
   451  003F57  25                 	db	37
   452  003F58  30                 	db	48	;'0'
   453  003F59  31                 	db	49	;'1'
   454  003F5A  58                 	db	88	;'X'
   455  003F5B  20                 	db	32
   456  003F5C  25                 	db	37
   457  003F5D  30                 	db	48	;'0'
   458  003F5E  32                 	db	50	;'2'
   459  003F5F  58                 	db	88	;'X'
   460  003F60  25                 	db	37
   461  003F61  30                 	db	48	;'0'
   462  003F62  32                 	db	50	;'2'
   463  003F63  58                 	db	88	;'X'
   464  003F64  20                 	db	32
   465  003F65  25                 	db	37
   466  003F66  30                 	db	48	;'0'
   467  003F67  32                 	db	50	;'2'
   468  003F68  58                 	db	88	;'X'
   469  003F69  00                 	db	0
   470  003F6A                     STR_7:
   471  003F6A  63                 	db	99	;'c'
   472  003F6B  6F                 	db	111	;'o'
   473  003F6C  6E                 	db	110	;'n'
   474  003F6D  73                 	db	115	;'s'
   475  003F6E  69                 	db	105	;'i'
   476  003F6F  67                 	db	103	;'g'
   477  003F70  6E                 	db	110	;'n'
   478  003F71  65                 	db	101	;'e'
   479  003F72  3D                 	db	61	;'='
   480  003F73  25                 	db	37
   481  003F74  64                 	db	100	;'d'
   482  003F75  20                 	db	32
   483  003F76  70                 	db	112	;'p'
   484  003F77  61                 	db	97	;'a'
   485  003F78  74                 	db	116	;'t'
   486  003F79  69                 	db	105	;'i'
   487  003F7A  6E                 	db	110	;'n'
   488  003F7B  3D                 	db	61	;'='
   489  003F7C  25                 	db	37
   490  003F7D  64                 	db	100	;'d'
   491  003F7E  20                 	db	32
   492  003F7F  70                 	db	112	;'p'
   493  003F80  69                 	db	105	;'i'
   494  003F81  6F                 	db	111	;'o'
   495  003F82  6E                 	db	110	;'n'
   496  003F83  3D                 	db	61	;'='
   497  003F84  25                 	db	37
   498  003F85  64                 	db	100	;'d'
   499  003F86  20                 	db	32
   500  003F87  70                 	db	112	;'p'
   501  003F88  6C                 	db	108	;'l'
   502  003F89  61                 	db	97	;'a'
   503  003F8A  74                 	db	116	;'t'
   504  003F8B  69                 	db	105	;'i'
   505  003F8C  6E                 	db	110	;'n'
   506  003F8D  65                 	db	101	;'e'
   507  003F8E  3D                 	db	61	;'='
   508  003F8F  25                 	db	37
   509  003F90  64                 	db	100	;'d'
   510  003F91  20                 	db	32
   511  003F92  70                 	db	112	;'p'
   512  003F93  65                 	db	101	;'e'
   513  003F94  6C                 	db	108	;'l'
   514  003F95  6C                 	db	108	;'l'
   515  003F96  65                 	db	101	;'e'
   516  003F97  3D                 	db	61	;'='
   517  003F98  25                 	db	37
   518  003F99  64                 	db	100	;'d'
   519  003F9A  00                 	db	0
   520  003F9B                     STR_4:
   521  003F9B  6E                 	db	110	;'n'
   522  003F9C  62                 	db	98	;'b'
   523  003F9D  5F                 	db	95	;'_'
   524  003F9E  73                 	db	115	;'s'
   525  003F9F  3D                 	db	61	;'='
   526  003FA0  25                 	db	37
   527  003FA1  64                 	db	100	;'d'
   528  003FA2  20                 	db	32
   529  003FA3  6E                 	db	110	;'n'
   530  003FA4  62                 	db	98	;'b'
   531  003FA5  5F                 	db	95	;'_'
   532  003FA6  50                 	db	80	;'P'
   533  003FA7  69                 	db	105	;'i'
   534  003FA8  6F                 	db	111	;'o'
   535  003FA9  6E                 	db	110	;'n'
   536  003FAA  3D                 	db	61	;'='
   537  003FAB  25                 	db	37
   538  003FAC  64                 	db	100	;'d'
   539  003FAD  20                 	db	32
   540  003FAE  6E                 	db	110	;'n'
   541  003FAF  62                 	db	98	;'b'
   542  003FB0  5F                 	db	95	;'_'
   543  003FB1  54                 	db	84	;'T'
   544  003FB2  69                 	db	105	;'i'
   545  003FB3  6D                 	db	109	;'m'
   546  003FB4  65                 	db	101	;'e'
   547  003FB5  72                 	db	114	;'r'
   548  003FB6  5F                 	db	95	;'_'
   549  003FB7  35                 	db	53	;'5'
   550  003FB8  3D                 	db	61	;'='
   551  003FB9  25                 	db	37
   552  003FBA  64                 	db	100	;'d'
   553  003FBB  00                 	db	0
   554  003FBC                     STR_8:
   555  003FBC  45                 	db	69	;'E'
   556  003FBD  74                 	db	116	;'t'
   557  003FBE  61                 	db	97	;'a'
   558  003FBF  74                 	db	116	;'t'
   559  003FC0  3D                 	db	61	;'='
   560  003FC1  25                 	db	37
   561  003FC2  64                 	db	100	;'d'
   562  003FC3  20                 	db	32
   563  003FC4  6E                 	db	110	;'n'
   564  003FC5  62                 	db	98	;'b'
   565  003FC6  5F                 	db	95	;'_'
   566  003FC7  73                 	db	115	;'s'
   567  003FC8  5F                 	db	95	;'_'
   568  003FC9  66                 	db	102	;'f'
   569  003FCA  6F                 	db	111	;'o'
   570  003FCB  6E                 	db	110	;'n'
   571  003FCC  63                 	db	99	;'c'
   572  003FCD  74                 	db	116	;'t'
   573  003FCE  69                 	db	105	;'i'
   574  003FCF  6F                 	db	111	;'o'
   575  003FD0  6E                 	db	110	;'n'
   576  003FD1  6E                 	db	110	;'n'
   577  003FD2  65                 	db	101	;'e'
   578  003FD3  6D                 	db	109	;'m'
   579  003FD4  65                 	db	101	;'e'
   580  003FD5  6E                 	db	110	;'n'
   581  003FD6  74                 	db	116	;'t'
   582  003FD7  3D                 	db	61	;'='
   583  003FD8  25                 	db	37
   584  003FD9  64                 	db	100	;'d'
   585  003FDA  00                 	db	0
   586  003FDB                     STR_11:
   587  003FDB  30                 	db	48	;'0'
   588  003FDC  31                 	db	49	;'1'
   589  003FDD  32                 	db	50	;'2'
   590  003FDE  33                 	db	51	;'3'
   591  003FDF  34                 	db	52	;'4'
   592  003FE0  35                 	db	53	;'5'
   593  003FE1  36                 	db	54	;'6'
   594  003FE2  37                 	db	55	;'7'
   595  003FE3  38                 	db	56	;'8'
   596  003FE4  39                 	db	57	;'9'
   597  003FE5  41                 	db	65	;'A'
   598  003FE6  42                 	db	66	;'B'
   599  003FE7  43                 	db	67	;'C'
   600  003FE8  44                 	db	68	;'D'
   601  003FE9  45                 	db	69	;'E'
   602  003FEA  46                 	db	70	;'F'
   603  003FEB  00                 	db	0
   604  003FEC                     STR_3:
   605  003FEC  25                 	db	37
   606  003FED  30                 	db	48	;'0'
   607  003FEE  32                 	db	50	;'2'
   608  003FEF  58                 	db	88	;'X'
   609  003FF0  25                 	db	37
   610  003FF1  30                 	db	48	;'0'
   611  003FF2  32                 	db	50	;'2'
   612  003FF3  58                 	db	88	;'X'
   613  003FF4  25                 	db	37
   614  003FF5  30                 	db	48	;'0'
   615  003FF6  32                 	db	50	;'2'
   616  003FF7  58                 	db	88	;'X'
   617  003FF8  00                 	db	0
   618  003FF9                     STR_5:
   619  003FF9  25                 	db	37
   620  003FFA  30                 	db	48	;'0'
   621  003FFB  31                 	db	49	;'1'
   622  003FFC  58                 	db	88	;'X'
   623  003FFD  00                 	db	0
   624  0000                     
   625                           ; #config settings
   626  003FFE  00                 	db	0	; dummy byte at the end
   627  0000                     
   628                           	psect	cinit
   629  001FDE                     __pcinit:
   630                           	opt stack 0
   631  001FDE                     start_initialization:
   632                           	opt stack 0
   633  001FDE                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Clear objects allocated to BANK2 (128 bytes)
   637  001FDE  EE02  F000         	lfsr	0,__pbssBANK2
   638  001FE2  0E80               	movlw	128
   639  001FE4                     clear_0:
   640  001FE4  6AEE               	clrf	postinc0,c
   641  001FE6  06E8               	decf	wreg,f,c
   642  001FE8  E1FD               	bnz	clear_0
   643                           
   644                           ; Clear objects allocated to BANK1 (256 bytes)
   645  001FEA  EE01  F000         	lfsr	0,__pbssBANK1
   646  001FEE  EE11 F000          	lfsr	1,256
   647  001FF2                     clear_1:
   648  001FF2  6AEE               	clrf	postinc0,c
   649  001FF4  50E5               	movf	postdec1,w,c
   650  001FF6  50E1               	movf	fsr1l,w,c
   651  001FF8  E1FC               	bnz	clear_1
   652  001FFA  50E2               	movf	fsr1h,w,c
   653  001FFC  E1FA               	bnz	clear_1
   654                           
   655                           ; Clear objects allocated to BANK0 (141 bytes)
   656  001FFE  EE00  F060         	lfsr	0,__pbssBANK0
   657  002002  0E8D               	movlw	141
   658  002004                     clear_2:
   659  002004  6AEE               	clrf	postinc0,c
   660  002006  06E8               	decf	wreg,f,c
   661  002008  E1FD               	bnz	clear_2
   662                           
   663                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   664  00200A  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   665  00200C  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   666                           
   667                           ; Clear objects allocated to COMRAM (12 bytes)
   668  00200E  EE00  F043         	lfsr	0,__pbssCOMRAM
   669  002012  0E0C               	movlw	12
   670  002014                     clear_3:
   671  002014  6AEE               	clrf	postinc0,c
   672  002016  06E8               	decf	wreg,f,c
   673  002018  E1FD               	bnz	clear_3
   674  00201A                     end_of_initialization:
   675                           	opt stack 0
   676  00201A                     __end_of__initialization:
   677                           	opt stack 0
   678  00201A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   679  00201C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   680  00201E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   681  002020  6EF8               	movwf	tblptru,c
   682  002022  0100               	movlb	0
   683  002024  EF9C  F010         	goto	_main	;jump to C main() function
   684                           tblptru	equ	0xFF8
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1h	equ	0xFE2
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bitbssCOMRAM
   692  000278                     __pbitbssCOMRAM:
   693                           	opt stack 0
   694  000278                     _SPI_MODE:
   695                           	opt stack 0
   696  000278                     	ds	1
   697  000279                     _UART_TEST:
   698                           	opt stack 0
   699  000279                     	ds	1
   700  00027A                     _SPI_full:
   701                           	opt stack 0
   702  00027A                     	ds	1
   703  00027B                     _RX1_full:
   704                           	opt stack 0
   705  00027B                     	ds	1
   706  00027C                     _RX1_ABR:
   707                           	opt stack 0
   708  00027C                     	ds	1
   709  00027D                     _Option_Pailleux:
   710                           	opt stack 0
   711  00027D                     	ds	1
   712  00027E                     _Option_Multitas:
   713                           	opt stack 0
   714  00027E                     	ds	1
   715  00027F                     _Nouvelle_Valeur_ADC:
   716                           	opt stack 0
   717  00027F                     	ds	1
   718  000280                     _Detecteur_Pion:
   719                           	opt stack 0
   720  000280                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1h	equ	0xFE2
   726                           fsr1l	equ	0xFE1
   727                           
   728                           	psect	bssCOMRAM
   729  000043                     __pbssCOMRAM:
   730                           	opt stack 0
   731  000043                     _spiRxIndex:
   732                           	opt stack 0
   733  000043                     	ds	1
   734  000044                     _spiTxIndex:
   735                           	opt stack 0
   736  000044                     	ds	1
   737  000045                     _eusart1RxIndex:
   738                           	opt stack 0
   739  000045                     	ds	1
   740  000046                     _eusart1TxIndex:
   741                           	opt stack 0
   742  000046                     	ds	1
   743  000047                     _Compteur_IRQ_I_Moteur_2:
   744                           	opt stack 0
   745  000047                     	ds	1
   746  000048                     _Compteur_IRQ_I_Moteur_1:
   747                           	opt stack 0
   748  000048                     	ds	1
   749  000049                     _Consigne_en_A:
   750                           	opt stack 0
   751  000049                     	ds	1
   752  00004A                     _Capteur_Capot_Nb_Evenement_Autoriser:
   753                           	opt stack 0
   754  00004A                     	ds	1
   755  00004B                     _nb_s_fonctionnement:
   756                           	opt stack 0
   757  00004B                     	ds	1
   758  00004C                     _Etat_Precedent_Index:
   759                           	opt stack 0
   760  00004C                     	ds	1
   761  00004D                     _Mouvement_Startup:
   762                           	opt stack 0
   763  00004D                     	ds	1
   764  00004E                     _nb_100ms_platine_backup:
   765                           	opt stack 0
   766  00004E                     	ds	1
   767                           tblptru	equ	0xFF8
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           postdec1	equ	0xFE5
   771                           fsr1h	equ	0xFE2
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	bssBANK0
   775  000060                     __pbssBANK0:
   776                           	opt stack 0
   777  000060                     _eusart1TxBuffer_Test:
   778                           	opt stack 0
   779  000060                     	ds	10
   780  00006A                     _Etat_Log:
   781                           	opt stack 0
   782  00006A                     	ds	10
   783  000074                     _DVT_Tableau_Pause:
   784                           	opt stack 0
   785  000074                     	ds	6
   786  00007A                     lecture_I_Mot2@Resul:
   787                           	opt stack 0
   788  00007A                     	ds	2
   789  00007C                     lecture_I_Mot1@Resul:
   790                           	opt stack 0
   791  00007C                     	ds	2
   792  00007E                     _erreur_accumulator_max:
   793                           	opt stack 0
   794  00007E                     	ds	2
   795  000080                     _PID_out:
   796                           	opt stack 0
   797  000080                     	ds	2
   798  000082                     _erreur_accumulator:
   799                           	opt stack 0
   800  000082                     	ds	2
   801  000084                     _erreur:
   802                           	opt stack 0
   803  000084                     	ds	2
   804  000086                     _duty:
   805                           	opt stack 0
   806  000086                     	ds	2
   807  000088                     _TIMER0_Etat:
   808                           	opt stack 0
   809  000088                     	ds	1
   810  000089                     _Surveillance_Capteur_Pion:
   811                           	opt stack 0
   812  000089                     	ds	1
   813  00008A                     _Surveillance_Consommation_Moteur_2:
   814                           	opt stack 0
   815  00008A                     	ds	1
   816  00008B                     _Surveillance_Consommation_Moteur_1:
   817                           	opt stack 0
   818  00008B                     	ds	1
   819  00008C                     _delay_s_counter:
   820                           	opt stack 0
   821  00008C                     	ds	1
   822  00008D                     _consigne_pwm_max:
   823                           	opt stack 0
   824  00008D                     	ds	1
   825  00008E                     _consigne_pwm:
   826                           	opt stack 0
   827  00008E                     	ds	1
   828  00008F                     _direction:
   829                           	opt stack 0
   830  00008F                     	ds	1
   831  000090                     _mouvement_option:
   832                           	opt stack 0
   833  000090                     	ds	1
   834  000091                     _type_consigne:
   835                           	opt stack 0
   836  000091                     	ds	1
   837  000092                     _Bequille_I_Max:
   838                           	opt stack 0
   839  000092                     	ds	1
   840  000093                     _Pelle_I_Max:
   841                           	opt stack 0
   842  000093                     	ds	1
   843  000094                     _Consigne_Max_Moteur_Bequille:
   844                           	opt stack 0
   845  000094                     	ds	1
   846  000095                     _Consigne_Max_Moteur_Z:
   847                           	opt stack 0
   848  000095                     	ds	1
   849  000096                     _Consigne_Max_Moteur_X:
   850                           	opt stack 0
   851  000096                     	ds	1
   852  000097                     _Consigne_Max:
   853                           	opt stack 0
   854  000097                     	ds	1
   855  000098                     _consigne:
   856                           	opt stack 0
   857  000098                     	ds	1
   858  000099                     _moteur_indice:
   859                           	opt stack 0
   860  000099                     	ds	1
   861  00009A                     _Image_Courant_Moteur_2:
   862                           	opt stack 0
   863  00009A                     	ds	1
   864  00009B                     _Image_Courant_Moteur_1:
   865                           	opt stack 0
   866  00009B                     	ds	1
   867  00009C                     _Patinage_Nb_Essai_Autoriser:
   868                           	opt stack 0
   869  00009C                     	ds	1
   870  00009D                     _Patinage_Nb_Essai:
   871                           	opt stack 0
   872  00009D                     	ds	1
   873  00009E                     _Capteur_Capot_Compteur_Temps_S:
   874                           	opt stack 0
   875  00009E                     	ds	1
   876  00009F                     _Capteur_Capot_Nb_Evenement:
   877                           	opt stack 0
   878  00009F                     	ds	1
   879  0000A0                     _nb_Pion_Objectif:
   880                           	opt stack 0
   881  0000A0                     	ds	1
   882  0000A1                     _nb_Pion:
   883                           	opt stack 0
   884  0000A1                     	ds	1
   885  0000A2                     _nb_s_bequille:
   886                           	opt stack 0
   887  0000A2                     	ds	1
   888  0000A3                     _nb_s_pelle:
   889                           	opt stack 0
   890  0000A3                     	ds	1
   891  0000A4                     _nb_100ms_platine:
   892                           	opt stack 0
   893  0000A4                     	ds	1
   894  0000A5                     _nb_100ms_pion:
   895                           	opt stack 0
   896  0000A5                     	ds	1
   897  0000A6                     _nb_100ms_Timer_5:
   898                           	opt stack 0
   899  0000A6                     	ds	1
   900  0000A7                     _nb_s_patinage:
   901                           	opt stack 0
   902  0000A7                     	ds	1
   903  0000A8                     _nb_s_fonctionnement_souhaiter:
   904                           	opt stack 0
   905  0000A8                     	ds	1
   906  0000A9                     _Alarme:
   907                           	opt stack 0
   908  0000A9                     	ds	1
   909  0000AA                     _Etat:
   910                           	opt stack 0
   911  0000AA                     	ds	1
   912  0000AB                     _Version:
   913                           	opt stack 0
   914  0000AB                     	ds	1
   915  0000AC                     _P4_busy:
   916                           	opt stack 0
   917  0000AC                     	ds	1
   918  0000AD                     _UART_TX_TEXT:
   919                           	opt stack 0
   920  0000AD                     	ds	64
   921                           tblptru	equ	0xFF8
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           
   928                           	psect	bssBANK1
   929  000100                     __pbssBANK1:
   930                           	opt stack 0
   931  000100                     _SPI_RX_TEXT:
   932                           	opt stack 0
   933  000100                     	ds	64
   934  000140                     _spiTxBuffer:
   935                           	opt stack 0
   936  000140                     	ds	64
   937  000180                     _eusart1TxBuffer:
   938                           	opt stack 0
   939  000180                     	ds	64
   940  0001C0                     _UART_RX_TEXT:
   941                           	opt stack 0
   942  0001C0                     	ds	64
   943                           tblptru	equ	0xFF8
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec1	equ	0xFE5
   947                           fsr1h	equ	0xFE2
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK2
   951  000200                     __pbssBANK2:
   952                           	opt stack 0
   953  000200                     _spiRxBuffer:
   954                           	opt stack 0
   955  000200                     	ds	64
   956  000240                     _eusart1RxBuffer:
   957                           	opt stack 0
   958  000240                     	ds	64
   959                           tblptru	equ	0xFF8
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postdec1	equ	0xFE5
   963                           fsr1h	equ	0xFE2
   964                           fsr1l	equ	0xFE1
   965                           
   966                           	psect	cstackBANK2
   967  000280                     __pcstackBANK2:
   968                           	opt stack 0
   969  000280                     EUSART1_RX_T3_LOCAL@Da:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x0
   973  000280                     	ds	1
   974  000281                     EUSART1_RX_T3_LOCAL@A:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x1
   978  000281                     	ds	1
   979  000282                     EUSART1_RX_T3_LOCAL@B:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x2
   983  000282                     	ds	1
   984  000283                     EUSART1_RX_T3_LOCAL@C:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x3
   988  000283                     	ds	1
   989  000284                     EUSART1_RX_T3_LOCAL@D:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x4
   993  000284                     	ds	1
   994  000285                     EUSART1_RX_T3_LOCAL@E:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x5
   998  000285                     	ds	1
   999  000286                     EUSART1_RX_T3_LOCAL@F:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x6
  1003  000286                     	ds	1
  1004  000287                     Mouvement_Bequille@type_consigne:
  1005                           	opt stack 0
  1006  000287                     Mouvement_Z@type_consigne:
  1007                           	opt stack 0
  1008  000287                     Mouvement_X@direction:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x7
  1012  000287                     	ds	1
  1013  000288                     Mouvement_Bequille@option:
  1014                           	opt stack 0
  1015  000288                     Mouvement_Z@option:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x8
  1019  000288                     	ds	1
  1020  000289                     Mouvement_Bequille@direction:
  1021                           	opt stack 0
  1022  000289                     Mouvement_Z@direction:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x9
  1026  000289                     	ds	1
  1027  00028A                     Cycle@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0xA
  1031  00028A                     	ds	1
  1032                           tblptru	equ	0xFF8
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1h	equ	0xFE2
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  0000ED                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  0000ED                     ??_sprintf:
  1043  0000ED                     ___fttol@sign1:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x0
  1047  0000ED                     	ds	1
  1048  0000EE                     ___fttol@lval:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x1
  1052  0000EE                     	ds	3
  1053  0000F1                     sprintf@idx:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x4
  1057  0000F1                     	ds	1
  1058  0000F2                     sprintf@ap:
  1059                           	opt stack 0
  1060  0000F2                     ___fttol@exp1:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x5
  1064  0000F2                     	ds	1
  1065  0000F3                     sprintf@prec:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x6
  1069  0000F3                     	ds	1
  1070  0000F4                     sprintf@val:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x7
  1074  0000F4                     	ds	2
  1075  0000F6                     sprintf@flag:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x9
  1079  0000F6                     	ds	1
  1080  0000F7                     sprintf@width:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0xA
  1084  0000F7                     	ds	2
  1085  0000F9                     sprintf@c:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0xC
  1089  0000F9                     	ds	1
  1090  0000FA                     ??_EUSART1_RX_T3_LOCAL:
  1091                           
  1092                           ; 1 bytes @ 0xD
  1093  0000FA                     	ds	4
  1094  0000FE                     ??_Check_List_Moteur_Bequille:
  1095  0000FE                     Mouvement_X@type_consigne:
  1096                           	opt stack 0
  1097  0000FE                     delay_s@delay_time:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x11
  1101  0000FE                     	ds	1
  1102  0000FF                     Mouvement_X@option:
  1103                           	opt stack 0
  1104  0000FF                     delay_s@Timer_0_Etat_Prealable:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x12
  1108  0000FF                     	ds	1
  1109                           tblptru	equ	0xFF8
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postdec1	equ	0xFE5
  1113                           fsr1h	equ	0xFE2
  1114                           fsr1l	equ	0xFE1
  1115                           
  1116                           	psect	cstackCOMRAM
  1117  000001                     __pcstackCOMRAM:
  1118                           	opt stack 0
  1119  000001                     i2Etat_Update@etat_new_value:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x0
  1123  000001                     	ds	1
  1124  000002                     i2Alarme_On@alarme_new_value:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x1
  1128  000002                     	ds	1
  1129  000003                     ??_HIGH_PRIORITY_IRQ:
  1130  000003                     
  1131                           ; 1 bytes @ 0x2
  1132  000003                     	ds	2
  1133  000005                     ??_SPI_ISR:
  1134  000005                     ??_EUSART1_Receive_ISR:
  1135  000005                     ??i1_IRQ_ADC:
  1136  000005                     i1Buzzer_Etat@Activation:
  1137                           	opt stack 0
  1138  000005                     i1Etat_Update@etat_new_value:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x4
  1142  000005                     	ds	1
  1143  000006                     i1Alarme_On@alarme_new_value:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5
  1147  000006                     	ds	1
  1148  000007                     EUSART1_Receive_ISR@i:
  1149                           	opt stack 0
  1150  000007                     SPI_ISR@i:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x6
  1154  000007                     	ds	1
  1155  000008                     ??_LOW_PRIORITY_IRQ:
  1156                           
  1157                           ; 1 bytes @ 0x7
  1158  000008                     	ds	7
  1159  00000F                     ??_IRQ_ADC:
  1160  00000F                     ??_delay_100ms:
  1161  00000F                     ??_isdigit:
  1162  00000F                     ?___wmul:
  1163                           	opt stack 0
  1164  00000F                     ?___awmod:
  1165                           	opt stack 0
  1166  00000F                     ?___lwdiv:
  1167                           	opt stack 0
  1168  00000F                     ?___ftpack:
  1169                           	opt stack 0
  1170  00000F                     Init_Variable@i:
  1171                           	opt stack 0
  1172  00000F                     Buzzer_Etat@Activation:
  1173                           	opt stack 0
  1174  00000F                     Etat_Intitule@Etat_Number:
  1175                           	opt stack 0
  1176  00000F                     Etat_Update@etat_new_value:
  1177                           	opt stack 0
  1178  00000F                     EUSART1_Buffer_Send@text:
  1179                           	opt stack 0
  1180  00000F                     ___lbdiv@divisor:
  1181                           	opt stack 0
  1182  00000F                     ___wmul@multiplier:
  1183                           	opt stack 0
  1184  00000F                     ___awmod@dividend:
  1185                           	opt stack 0
  1186  00000F                     ___lwdiv@dividend:
  1187                           	opt stack 0
  1188  00000F                     ___ftpack@arg:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0xE
  1192  00000F                     	ds	1
  1193  000010                     delay_n_100ms@nb_100ms:
  1194                           	opt stack 0
  1195  000010                     Alarme_On@alarme_new_value:
  1196                           	opt stack 0
  1197  000010                     _isdigit$3659:
  1198                           	opt stack 0
  1199  000010                     ___lbdiv@dividend:
  1200                           	opt stack 0
  1201  000010                     EUSART1_Buffer_Send@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0xF
  1205  000010                     	ds	1
  1206  000011                     delay_n_100ms@i:
  1207                           	opt stack 0
  1208  000011                     isdigit@c:
  1209                           	opt stack 0
  1210  000011                     ___lbdiv@counter:
  1211                           	opt stack 0
  1212  000011                     ___wmul@multiplicand:
  1213                           	opt stack 0
  1214  000011                     ___awmod@divisor:
  1215                           	opt stack 0
  1216  000011                     ___lwdiv@divisor:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x10
  1220  000011                     	ds	1
  1221  000012                     IRQ_Execution@IRQ_Indice:
  1222                           	opt stack 0
  1223  000012                     ___ftpack@exp:
  1224                           	opt stack 0
  1225  000012                     ___lbdiv@quotient:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x11
  1229  000012                     	ds	1
  1230  000013                     ___awmod@counter:
  1231                           	opt stack 0
  1232  000013                     ___ftpack@sign:
  1233                           	opt stack 0
  1234  000013                     ___lwdiv@counter:
  1235                           	opt stack 0
  1236  000013                     ___wmul@product:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x12
  1240  000013                     	ds	1
  1241  000014                     ??___ftpack:
  1242  000014                     ___awmod@sign:
  1243                           	opt stack 0
  1244  000014                     ___lwdiv@quotient:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x13
  1248  000014                     	ds	1
  1249  000015                     ??_Etat_Get:
  1250                           
  1251                           ; 1 bytes @ 0x14
  1252  000015                     	ds	1
  1253  000016                     ?___lwmod:
  1254                           	opt stack 0
  1255  000016                     ___lwmod@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x15
  1259  000016                     	ds	1
  1260  000017                     ?___lbtoft:
  1261                           	opt stack 0
  1262  000017                     Etat_Get@Etat_Indice:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  000017                     	ds	1
  1267  000018                     ___lwmod@divisor:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x17
  1271  000018                     	ds	2
  1272  00001A                     ___lbtoft@c:
  1273                           	opt stack 0
  1274  00001A                     ___lwmod@counter:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x19
  1278  00001A                     	ds	1
  1279  00001B                     ?_sprintf:
  1280                           	opt stack 0
  1281  00001B                     ?___ftmul:
  1282                           	opt stack 0
  1283  00001B                     sprintf@sp:
  1284                           	opt stack 0
  1285  00001B                     ___ftmul@f1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x1A
  1289  00001B                     	ds	1
  1290  00001C                     sprintf@f:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x1B
  1294  00001C                     	ds	2
  1295  00001E                     ___ftmul@f2:
  1296                           	opt stack 0
  1297                           
  1298                           ; 3 bytes @ 0x1D
  1299  00001E                     	ds	3
  1300  000021                     ??___ftmul:
  1301                           
  1302                           ; 1 bytes @ 0x20
  1303  000021                     	ds	3
  1304  000024                     ___ftmul@exp:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x23
  1308  000024                     	ds	1
  1309  000025                     ___ftmul@sign:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x24
  1313  000025                     	ds	1
  1314  000026                     ___ftmul@f3_as_product:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x25
  1318  000026                     	ds	3
  1319  000029                     ?___ftdiv:
  1320                           	opt stack 0
  1321  000029                     ___ftdiv@f1:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x28
  1325  000029                     	ds	3
  1326  00002C                     ___ftdiv@f2:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x2B
  1330  00002C                     	ds	3
  1331  00002F                     ??___ftdiv:
  1332                           
  1333                           ; 1 bytes @ 0x2E
  1334  00002F                     	ds	3
  1335  000032                     ___ftdiv@cntr:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x31
  1339  000032                     	ds	1
  1340  000033                     ___ftdiv@f3:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x32
  1344  000033                     	ds	3
  1345  000036                     ___ftdiv@exp:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x35
  1349  000036                     	ds	1
  1350  000037                     ___ftdiv@sign:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x36
  1354  000037                     	ds	1
  1355  000038                     ?___fttol:
  1356                           	opt stack 0
  1357  000038                     ___fttol@f1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x37
  1361  000038                     	ds	4
  1362  00003C                     ??___fttol:
  1363                           
  1364                           ; 1 bytes @ 0x3B
  1365  00003C                     	ds	4
  1366  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x3F
  1370  000040                     	ds	1
  1371  000041                     EUSART1_RX_T3_LOCAL@i:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x40
  1375  000041                     	ds	2
  1376  000043                     tblptru	equ	0xFF8
  1377                           postinc0	equ	0xFEE
  1378                           wreg	equ	0xFE8
  1379                           postdec1	equ	0xFE5
  1380                           fsr1h	equ	0xFE2
  1381                           fsr1l	equ	0xFE1
  1382                           
  1383                           ; 1 bytes @ 0x42
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 623 in file "MOTEUR.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1403 ;;      Params:         0       0       0       0
  1404 ;;      Locals:         0       0       0       0
  1405 ;;      Temps:          0       0       0       0
  1406 ;;      Totals:         0       0       0       0
  1407 ;;Total ram usage:        0 bytes
  1408 ;; Hardware stack levels required when called:   20
  1409 ;; This function calls:
  1410 ;;		_Cycle
  1411 ;;		_EUSART1_Initialize
  1412 ;;		_Init_ADC
  1413 ;;		_Init_IT
  1414 ;;		_Init_PWM
  1415 ;;		_Init_Port
  1416 ;;		_Init_SPI
  1417 ;;		_Init_TIMER0
  1418 ;;		_Init_TIMER2
  1419 ;;		_Init_TIMER5
  1420 ;;		_Init_Variable
  1421 ;; This function is called by:
  1422 ;;		Startup code after reset
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text0
  1427  002138                     __ptext0:
  1428                           	opt stack 0
  1429  002138                     _main:
  1430                           	opt stack 11
  1431                           
  1432                           ;MOTEUR.c: 625: OSCCON = 0b01110000;
  1433                           
  1434                           ;incstack = 0
  1435  002138  0E70               	movlw	112
  1436  00213A  6ED3               	movwf	4051,c	;volatile
  1437  00213C                     l283:
  1438  00213C  A4D3               	btfss	4051,2,c	;volatile
  1439  00213E  D7FE               	goto	l283
  1440                           
  1441                           ;MOTEUR.c: 636: Init_Variable();
  1442  002140  ECA8  F00A         	call	_Init_Variable	;wreg free
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;MOTEUR.c: 640: Init_Port();
  1446  002144  EC59  F00E         	call	_Init_Port	;wreg free
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;MOTEUR.c: 675: Init_IT();
  1450  002148  ECB8  F010         	call	_Init_IT	;wreg free
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;MOTEUR.c: 694: EUSART1_Initialize();
  1454  00214C  EC9F  F00F         	call	_EUSART1_Initialize	;wreg free
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;MOTEUR.c: 695: Init_SPI();
  1458  002150  ECDA  F011         	call	_Init_SPI	;wreg free
  1459                           
  1460                           ;MOTEUR.c: 699: Init_ADC();
  1461  002154  EC1F  F012         	call	_Init_ADC	;wreg free
  1462                           
  1463                           ;MOTEUR.c: 701: Init_TIMER0();
  1464  002158  EC0F  F012         	call	_Init_TIMER0	;wreg free
  1465                           
  1466                           ;MOTEUR.c: 702: Init_TIMER2();
  1467  00215C  EC87  F012         	call	_Init_TIMER2	;wreg free
  1468                           
  1469                           ;MOTEUR.c: 703: Init_TIMER5();
  1470  002160  EC65  F011         	call	_Init_TIMER5	;wreg free
  1471                           
  1472                           ;MOTEUR.c: 706: Init_PWM();
  1473  002164  EC6B  F012         	call	_Init_PWM	;wreg free
  1474                           
  1475                           ;MOTEUR.c: 768: Cycle();
  1476  002168  ECDF  F005         	call	_Cycle	;wreg free
  1477  00216C  EF67  F000         	goto	start
  1478  002170                     __end_of_main:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1h	equ	0xFE2
  1485                           fsr1l	equ	0xFE1
  1486                           
  1487 ;; *************** function _Init_Variable *****************
  1488 ;; Defined at:
  1489 ;;		line 144 in file "MOTEUR.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  i               1   14[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 3F/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1503 ;;      Params:         0       0       0       0
  1504 ;;      Locals:         1       0       0       0
  1505 ;;      Temps:          0       0       0       0
  1506 ;;      Totals:         1       0       0       0
  1507 ;;Total ram usage:        1 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:   11
  1510 ;; This function calls:
  1511 ;;		_Detection_Pion_Init
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text1
  1518  001550                     __ptext1:
  1519                           	opt stack 0
  1520  001550                     _Init_Variable:
  1521                           	opt stack 19
  1522                           
  1523                           ;MOTEUR.c: 192: Batterie_mV = 0;
  1524                           
  1525                           ;incstack = 0
  1526  001550  0E0C               	movlw	12
  1527  001552  0100               	movlb	0	; () banked
  1528  001554  6FAB               	movwf	_Version& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;MOTEUR.c: 195: unsigned char i;
  1532                           ;MOTEUR.c: 197: for (i = 0; i < 10; i++) {
  1533  001556  6A0F               	clrf	Init_Variable@i,c
  1534  001558                     l8943:
  1535                           
  1536                           ;MOTEUR.c: 198: Etat_Log[i] = 255;
  1537  001558  500F               	movf	Init_Variable@i,w,c
  1538  00155A  0F6A               	addlw	low _Etat_Log
  1539  00155C  6ED9               	movwf	fsr2l,c
  1540  00155E  6ADA               	clrf	fsr2h,c
  1541  001560  68DF               	setf	indf2,c
  1542  001562  2A0F               	incf	Init_Variable@i,f,c
  1543  001564  0E09               	movlw	9
  1544  001566  640F               	cpfsgt	Init_Variable@i,c
  1545  001568  D7F7               	goto	l8943
  1546                           
  1547                           ;MOTEUR.c: 201: }
  1548                           ;MOTEUR.c: 203: Etat_Precedent_Index = 0;
  1549  00156A  6A4C               	clrf	_Etat_Precedent_Index,c
  1550                           
  1551                           ;MOTEUR.c: 204: Etat = 255;
  1552  00156C  0100               	movlb	0	; () banked
  1553  00156E  69AA               	setf	_Etat& (0+255),b	;volatile
  1554                           
  1555                           ;MOTEUR.c: 207: Alarme = 0;
  1556  001570  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  1557                           
  1558                           ;MOTEUR.c: 209: nb_s_fonctionnement_souhaiter = 0;
  1559  001572  6BA8               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1560                           
  1561                           ;MOTEUR.c: 210: nb_s_fonctionnement = 0;
  1562  001574  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;MOTEUR.c: 213: nb_s_patinage = 90;
  1566  001576  0E5A               	movlw	90
  1567  001578  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1568                           
  1569                           ;MOTEUR.c: 214: nb_s_patinage = 45;
  1570  00157A  0E2D               	movlw	45
  1571  00157C  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1572                           
  1573                           ;MOTEUR.c: 215: nb_s_patinage = 50;
  1574  00157E  0E32               	movlw	50
  1575  001580  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;MOTEUR.c: 218: nb_100ms_Timer_5 = 0;
  1579  001582  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1580                           
  1581                           ;MOTEUR.c: 220: nb_100ms_pion = 2;
  1582  001584  0E02               	movlw	2
  1583  001586  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  1584                           
  1585                           ;MOTEUR.c: 221: nb_100ms_platine = 30;
  1586  001588  0E1E               	movlw	30
  1587  00158A  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  1588                           
  1589                           ;MOTEUR.c: 223: nb_s_pelle = 30;
  1590  00158C  6FA3               	movwf	_nb_s_pelle& (0+255),b
  1591                           
  1592                           ;MOTEUR.c: 224: nb_s_bequille = 10;
  1593  00158E  0E0A               	movlw	10
  1594  001590  6FA2               	movwf	_nb_s_bequille& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;MOTEUR.c: 226: Detecteur_Pion = 0;
  1598  001592  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;MOTEUR.c: 227: nb_Pion = 0;
  1602  001594  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;MOTEUR.c: 228: nb_Pion_Objectif = 0;
  1606  001596  6BA0               	clrf	_nb_Pion_Objectif& (0+255),b
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;MOTEUR.c: 229: Mouvement_Startup = 0;
  1610  001598  6A4D               	clrf	_Mouvement_Startup,c
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;MOTEUR.c: 231: delay_s_counter = 0;
  1614  00159A  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  1615                           
  1616                           ;MOTEUR.c: 233: moteur_indice = 1;
  1617  00159C  0E01               	movlw	1
  1618  00159E  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;MOTEUR.c: 234: consigne = 0;
  1622  0015A0  6B98               	clrf	_consigne& (0+255),b	;volatile
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;MOTEUR.c: 235: direction = 0;
  1626  0015A2  6B8F               	clrf	_direction& (0+255),b	;volatile
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;MOTEUR.c: 236: mouvement_option = 0;
  1630  0015A4  6B90               	clrf	_mouvement_option& (0+255),b
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;MOTEUR.c: 237: Option_Multitas = 0;
  1634  0015A6  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;MOTEUR.c: 238: type_consigne = 0;
  1638  0015A8  6B91               	clrf	_type_consigne& (0+255),b
  1639                           
  1640                           ;MOTEUR.c: 239: Consigne_Max = 20 * 5;
  1641  0015AA  0E64               	movlw	100
  1642  0015AC  6F97               	movwf	_Consigne_Max& (0+255),b	;volatile
  1643                           
  1644                           ;MOTEUR.c: 240: Consigne_Max_Moteur_X = 20 * 5;
  1645  0015AE  6F96               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1646                           
  1647                           ;MOTEUR.c: 241: Consigne_Max_Moteur_Z = 20 * 5;
  1648  0015B0  6F95               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1649                           
  1650                           ;MOTEUR.c: 244: Moteur_I_Max = 100;
  1651  0015B2  6F94               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1652                           
  1653                           ;MOTEUR.c: 245: Pelle_I_Max = 45;
  1654  0015B4  0E2D               	movlw	45
  1655  0015B6  6F93               	movwf	_Pelle_I_Max& (0+255),b
  1656                           
  1657                           ;MOTEUR.c: 246: Bequille_I_Max = 22;
  1658  0015B8  0E16               	movlw	22
  1659  0015BA  6F92               	movwf	_Bequille_I_Max& (0+255),b
  1660                           
  1661                           ;MOTEUR.c: 249: Consigne_en_A = 4;
  1662  0015BC  0E04               	movlw	4
  1663  0015BE  6E49               	movwf	_Consigne_en_A,c
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;MOTEUR.c: 250: consigne = (char) (Consigne_en_A * 5);
  1667  0015C0  5049               	movf	_Consigne_en_A,w,c
  1668  0015C2  0D05               	mullw	5
  1669  0015C4  CFF3 F098          	movff	prodl,_consigne	;volatile
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;MOTEUR.c: 253: Patinage_Nb_Essai_Autoriser = 3;
  1673  0015C8  0E03               	movlw	3
  1674  0015CA  6F9C               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;MOTEUR.c: 254: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1678  0015CC  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;MOTEUR.c: 255: Capteur_Capot_Compteur_Temps_S = 0;
  1682  0015CE  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;MOTEUR.c: 256: Patinage_Nb_Essai = 0;
  1686  0015D0  6B9D               	clrf	_Patinage_Nb_Essai& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;MOTEUR.c: 257: Capteur_Capot_Nb_Evenement = 0;
  1690  0015D2  6B9F               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;MOTEUR.c: 263: consigne_moteur_3 = 50;
  1694  0015D4  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;MOTEUR.c: 265: Surveillance_Consommation_Moteur_1 = 0;
  1698  0015D6  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;MOTEUR.c: 266: Surveillance_Consommation_Moteur_2 = 0;
  1702  0015D8  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;MOTEUR.c: 268: Detection_Pion_Init();
  1706  0015DA  ECE2  F012         	call	_Detection_Pion_Init	;wreg free
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;MOTEUR.c: 276: Compteur_IRQ_I_Moteur_1 = 0;
  1710  0015DE  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;MOTEUR.c: 277: Compteur_IRQ_I_Moteur_2 = 0;
  1714  0015E0  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;MOTEUR.c: 294: DVT_Compteur = 0;
  1718  0015E2  6BAC               	clrf	_P4_busy& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;MOTEUR.c: 296: DVT_Tableau_Pause[0] = 9;
  1722  0015E4  0E09               	movlw	9
  1723  0015E6  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;MOTEUR.c: 297: DVT_Tableau_Pause[1] = 7;
  1727  0015E8  0E07               	movlw	7
  1728  0015EA  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;MOTEUR.c: 298: DVT_Tableau_Pause[2] = 6;
  1732  0015EC  0E06               	movlw	6
  1733  0015EE  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;MOTEUR.c: 299: DVT_Tableau_Pause[3] = 5;
  1737  0015F0  0E05               	movlw	5
  1738  0015F2  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;MOTEUR.c: 300: DVT_Tableau_Pause[4] = 4;
  1742  0015F4  0E04               	movlw	4
  1743  0015F6  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;MOTEUR.c: 310: Multitas_Courant_Max = 20 * 5 ;
  1747  0015F8  0E03               	movlw	3
  1748  0015FA  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;MOTEUR.c: 313: UART_TEST = 0;
  1752  0015FC  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;MOTEUR.c: 314: RX1_ABR = 0;
  1756  0015FE  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;MOTEUR.c: 315: RX1_full = 0;
  1760  001600  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;MOTEUR.c: 316: SPI_full = 0;
  1764  001602  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;MOTEUR.c: 318: spiRxIndex = 0;
  1768  001604  6A43               	clrf	_spiRxIndex,c	;volatile
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;MOTEUR.c: 319: spiTxIndex = 0;
  1772  001606  6A44               	clrf	_spiTxIndex,c	;volatile
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;MOTEUR.c: 320: SPI_MODE = 0;
  1776  001608  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1777                           
  1778                           ; BSR set to: 0
  1779  00160A  0012               	return		;funcret
  1780  00160C                     __end_of_Init_Variable:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           prodl	equ	0xFF3
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           
  1793 ;; *************** function _Init_TIMER5 *****************
  1794 ;; Defined at:
  1795 ;;		line 183 in file "timer.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1809 ;;      Params:         0       0       0       0
  1810 ;;      Locals:         0       0       0       0
  1811 ;;      Temps:          0       0       0       0
  1812 ;;      Totals:         0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:   10
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text2
  1824  0022CA                     __ptext2:
  1825                           	opt stack 0
  1826  0022CA                     _Init_TIMER5:
  1827                           	opt stack 20
  1828                           
  1829                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;incstack = 0
  1833  0022CA  9EB7               	bcf	4023,7,c	;volatile
  1834                           
  1835                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1836  0022CC  8CB7               	bsf	4023,6,c	;volatile
  1837                           
  1838                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1839  0022CE  9AB7               	bcf	4023,5,c	;volatile
  1840                           
  1841                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1842  0022D0  0E18               	movlw	24
  1843  0022D2  12B7               	iorwf	4023,f,c	;volatile
  1844                           
  1845                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1846  0022D4  84B7               	bsf	4023,2,c	;volatile
  1847                           
  1848                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1849  0022D6  92B7               	bcf	4023,1,c	;volatile
  1850                           
  1851                           ;timer.c: 218: TMR5L = 0;
  1852  0022D8  6A87               	clrf	3975,c	;volatile
  1853                           
  1854                           ;timer.c: 219: TMR5H = 0;
  1855  0022DA  6A88               	clrf	3976,c	;volatile
  1856                           
  1857                           ;timer.c: 221: PR5H = 0x61;
  1858  0022DC  0E61               	movlw	97
  1859  0022DE  6E91               	movwf	3985,c	;volatile
  1860                           
  1861                           ;timer.c: 222: PR5L = 0xA8;
  1862  0022E0  0EA8               	movlw	168
  1863  0022E2  6E90               	movwf	3984,c	;volatile
  1864                           
  1865                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1866  0022E4  90B7               	bcf	4023,0,c	;volatile
  1867                           
  1868                           ;timer.c: 228: TMR5L = 0;
  1869  0022E6  6A87               	clrf	3975,c	;volatile
  1870                           
  1871                           ;timer.c: 229: TMR5H = 0;
  1872  0022E8  6A88               	clrf	3976,c	;volatile
  1873                           
  1874                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1875  0022EA  90A5               	bcf	4005,0,c	;volatile
  1876                           
  1877                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1878  0022EC  80A3               	bsf	4003,0,c	;volatile
  1879                           
  1880                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1881  0022EE  90A4               	bcf	4004,0,c	;volatile
  1882  0022F0  0012               	return		;funcret
  1883  0022F2                     __end_of_Init_TIMER5:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           prodl	equ	0xFF3
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1h	equ	0xFE2
  1891                           fsr1l	equ	0xFE1
  1892                           indf2	equ	0xFDF
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           
  1896 ;; *************** function _Init_TIMER2 *****************
  1897 ;; Defined at:
  1898 ;;		line 133 in file "timer.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          0       0       0       0
  1915 ;;      Totals:         0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:   10
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text3
  1927  00250E                     __ptext3:
  1928                           	opt stack 0
  1929  00250E                     _Init_TIMER2:
  1930                           	opt stack 20
  1931                           
  1932                           ;timer.c: 138: T2CON = 0b00100100;
  1933                           
  1934                           ;incstack = 0
  1935  00250E  0E24               	movlw	36
  1936  002510  6ECA               	movwf	4042,c	;volatile
  1937                           
  1938                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1939  002512  50CA               	movf	4042,w,c	;volatile
  1940  002514  0B87               	andlw	-121
  1941  002516  0940               	iorlw	64
  1942  002518  6ECA               	movwf	4042,c	;volatile
  1943                           
  1944                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1945  00251A  0EFC               	movlw	-4
  1946  00251C  16CA               	andwf	4042,f,c	;volatile
  1947                           
  1948                           ;timer.c: 149: PR2 = 200;
  1949  00251E  0EC8               	movlw	200
  1950  002520  6ECB               	movwf	4043,c	;volatile
  1951                           
  1952                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1953  002522  929F               	bcf	3999,1,c	;volatile
  1954                           
  1955                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1956  002524  829F               	bsf	3999,1,c	;volatile
  1957  002526  0CC8               	retlw	200	;funcret
  1958  002528                     __end_of_Init_TIMER2:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           prodl	equ	0xFF3
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           indf2	equ	0xFDF
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           
  1971 ;; *************** function _Init_TIMER0 *****************
  1972 ;; Defined at:
  1973 ;;		line 21 in file "timer.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1987 ;;      Params:         0       0       0       0
  1988 ;;      Locals:         0       0       0       0
  1989 ;;      Temps:          0       0       0       0
  1990 ;;      Totals:         0       0       0       0
  1991 ;;Total ram usage:        0 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:   10
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text4
  2002  00241E                     __ptext4:
  2003                           	opt stack 0
  2004  00241E                     _Init_TIMER0:
  2005                           	opt stack 20
  2006                           
  2007                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  2008                           
  2009                           ;incstack = 0
  2010  00241E  9ED5               	bcf	4053,7,c	;volatile
  2011                           
  2012                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  2013  002420  9CD5               	bcf	4053,6,c	;volatile
  2014                           
  2015                           ;timer.c: 33: T0CONbits.T0CS = 0;
  2016  002422  9AD5               	bcf	4053,5,c	;volatile
  2017                           
  2018                           ;timer.c: 37: T0CONbits.T0SE = 0;
  2019  002424  98D5               	bcf	4053,4,c	;volatile
  2020                           
  2021                           ;timer.c: 41: T0CONbits.PSA = 0;
  2022  002426  96D5               	bcf	4053,3,c	;volatile
  2023                           
  2024                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  2025  002428  0E07               	movlw	7
  2026  00242A  12D5               	iorwf	4053,f,c	;volatile
  2027                           
  2028                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  2029  00242C  12D5               	iorwf	4053,f,c	;volatile
  2030                           
  2031                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  2032  00242E  50D5               	movf	4053,w,c	;volatile
  2033  002430  0BF8               	andlw	-8
  2034  002432  0904               	iorlw	4
  2035  002434  6ED5               	movwf	4053,c	;volatile
  2036                           
  2037                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  2038  002436  94F1               	bcf	intcon2,2,c	;volatile
  2039                           
  2040                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  2041  002438  9AF2               	bcf	intcon,5,c	;volatile
  2042                           
  2043                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  2044  00243A  94F2               	bcf	intcon,2,c	;volatile
  2045  00243C  0012               	return		;funcret
  2046  00243E                     __end_of_Init_TIMER0:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           intcon2	equ	0xFF1
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1h	equ	0xFE2
  2056                           fsr1l	equ	0xFE1
  2057                           indf2	equ	0xFDF
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           
  2061 ;; *************** function _Init_SPI *****************
  2062 ;; Defined at:
  2063 ;;		line 24 in file "spi.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;		None
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;		None
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2
  2072 ;; Tracked objects:
  2073 ;;		On entry : 3F/0
  2074 ;;		On exit  : 3F/0
  2075 ;;		Unchanged: 3F/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2077 ;;      Params:         0       0       0       0
  2078 ;;      Locals:         0       0       0       0
  2079 ;;      Temps:          0       0       0       0
  2080 ;;      Totals:         0       0       0       0
  2081 ;;Total ram usage:        0 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:   10
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_main
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text5
  2092  0023B4                     __ptext5:
  2093                           	opt stack 0
  2094  0023B4                     _Init_SPI:
  2095                           	opt stack 20
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  2099                           
  2100                           ;incstack = 0
  2101  0023B4  8695               	bsf	3989,3,c	;volatile
  2102                           
  2103                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2104  0023B6  8495               	bsf	3989,2,c	;volatile
  2105                           
  2106                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2107  0023B8  9295               	bcf	3989,1,c	;volatile
  2108                           
  2109                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2110  0023BA  9EC7               	bcf	4039,7,c	;volatile
  2111                           
  2112                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2113  0023BC  9CC7               	bcf	4039,6,c	;volatile
  2114                           
  2115                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2116  0023BE  8CC7               	bsf	4039,6,c	;volatile
  2117                           
  2118                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2119  0023C0  9EC6               	bcf	4038,7,c	;volatile
  2120                           
  2121                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2122  0023C2  9CC6               	bcf	4038,6,c	;volatile
  2123                           
  2124                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2125  0023C4  8AC6               	bsf	4038,5,c	;volatile
  2126                           
  2127                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2128  0023C6  88C6               	bsf	4038,4,c	;volatile
  2129                           
  2130                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2131  0023C8  98C6               	bcf	4038,4,c	;volatile
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2135  0023CA  50C6               	movf	4038,w,c	;volatile
  2136  0023CC  0BF0               	andlw	-16
  2137  0023CE  0905               	iorlw	5
  2138  0023D0  6EC6               	movwf	4038,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2142  0023D2  969E               	bcf	3998,3,c	;volatile
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2146  0023D4  869D               	bsf	3997,3,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149  0023D6  0012               	return		;funcret
  2150  0023D8                     __end_of_Init_SPI:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1h	equ	0xFE2
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           
  2165 ;; *************** function _Init_Port *****************
  2166 ;; Defined at:
  2167 ;;		line 14 in file "init.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2
  2176 ;; Tracked objects:
  2177 ;;		On entry : 3F/0
  2178 ;;		On exit  : 3F/0
  2179 ;;		Unchanged: 3F/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2181 ;;      Params:         0       0       0       0
  2182 ;;      Locals:         0       0       0       0
  2183 ;;      Temps:          0       0       0       0
  2184 ;;      Totals:         0       0       0       0
  2185 ;;Total ram usage:        0 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:   10
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text6
  2196  001CB2                     __ptext6:
  2197                           	opt stack 0
  2198  001CB2                     _Init_Port:
  2199                           	opt stack 20
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;init.c: 24: TRISA = 0b11111111;
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;incstack = 0
  2206  001CB2  6892               	setf	3986,c	;volatile
  2207                           
  2208                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2209  001CB4  8092               	bsf	3986,0,c	;volatile
  2210                           
  2211                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2212  001CB6  8292               	bsf	3986,1,c	;volatile
  2213                           
  2214                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2215  001CB8  8492               	bsf	3986,2,c	;volatile
  2216                           
  2217                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2218  001CBA  8692               	bsf	3986,3,c	;volatile
  2219                           
  2220                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2221  001CBC  8892               	bsf	3986,4,c	;volatile
  2222                           
  2223                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2224  001CBE  8A92               	bsf	3986,5,c	;volatile
  2225                           
  2226                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2227  001CC0  9C92               	bcf	3986,6,c	;volatile
  2228                           
  2229                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2230  001CC2  8E92               	bsf	3986,7,c	;volatile
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;init.c: 33: TRISB = 0b11111010;
  2234  001CC4  0EFA               	movlw	250
  2235  001CC6  6E93               	movwf	3987,c	;volatile
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2239  001CC8  9093               	bcf	3987,0,c	;volatile
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2243  001CCA  8293               	bsf	3987,1,c	;volatile
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2247  001CCC  9493               	bcf	3987,2,c	;volatile
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2251  001CCE  8693               	bsf	3987,3,c	;volatile
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2255  001CD0  8893               	bsf	3987,4,c	;volatile
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2259  001CD2  8A93               	bsf	3987,5,c	;volatile
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2263  001CD4  8C93               	bsf	3987,6,c	;volatile
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2267  001CD6  8E93               	bsf	3987,7,c	;volatile
  2268                           
  2269                           ;init.c: 42: TRISC = 0b11011100;
  2270  001CD8  0EDC               	movlw	220
  2271  001CDA  6E94               	movwf	3988,c	;volatile
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2275  001CDC  9094               	bcf	3988,0,c	;volatile
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2279  001CDE  9294               	bcf	3988,1,c	;volatile
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2283  001CE0  9494               	bcf	3988,2,c	;volatile
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2287  001CE2  8694               	bsf	3988,3,c	;volatile
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2291  001CE4  8894               	bsf	3988,4,c	;volatile
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2295  001CE6  8A94               	bsf	3988,5,c	;volatile
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2299  001CE8  9C94               	bcf	3988,6,c	;volatile
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2303  001CEA  8E94               	bsf	3988,7,c	;volatile
  2304                           
  2305                           ;init.c: 51: TRISD = 0b00001111;
  2306  001CEC  0E0F               	movlw	15
  2307  001CEE  6E95               	movwf	3989,c	;volatile
  2308                           
  2309                           ;init.c: 52: TRISD = 0b00000111;
  2310  001CF0  0E07               	movlw	7
  2311  001CF2  6E95               	movwf	3989,c	;volatile
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2315  001CF4  8095               	bsf	3989,0,c	;volatile
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2319  001CF6  8295               	bsf	3989,1,c	;volatile
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2323  001CF8  8495               	bsf	3989,2,c	;volatile
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2327  001CFA  9695               	bcf	3989,3,c	;volatile
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2331  001CFC  9895               	bcf	3989,4,c	;volatile
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2335  001CFE  9A95               	bcf	3989,5,c	;volatile
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2339  001D00  9C95               	bcf	3989,6,c	;volatile
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2343  001D02  9E95               	bcf	3989,7,c	;volatile
  2344                           
  2345                           ;init.c: 62: TRISE = 0b00000111;
  2346  001D04  6E96               	movwf	3990,c	;volatile
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2350  001D06  8096               	bsf	3990,0,c	;volatile
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2354  001D08  8296               	bsf	3990,1,c	;volatile
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2358  001D0A  9496               	bcf	3990,2,c	;volatile
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;init.c: 78: LATA = 0b00000000;
  2362  001D0C  6A89               	clrf	3977,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;init.c: 79: LATB = 0b00000000;
  2366  001D0E  6A8A               	clrf	3978,c	;volatile
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;init.c: 80: LATC = 0b00000000;
  2370  001D10  6A8B               	clrf	3979,c	;volatile
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;init.c: 81: LATD = 0b00000000;
  2374  001D12  6A8C               	clrf	3980,c	;volatile
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;init.c: 82: LATE = 0b00000000;
  2378  001D14  6A8D               	clrf	3981,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381  001D16  0012               	return		;funcret
  2382  001D18                     __end_of_Init_Port:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           intcon2	equ	0xFF1
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           
  2397 ;; *************** function _Init_PWM *****************
  2398 ;; Defined at:
  2399 ;;		line 14 in file "pwm.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2413 ;;      Params:         0       0       0       0
  2414 ;;      Locals:         0       0       0       0
  2415 ;;      Temps:          0       0       0       0
  2416 ;;      Totals:         0       0       0       0
  2417 ;;Total ram usage:        0 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:   10
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text7
  2428  0024D6                     __ptext7:
  2429                           	opt stack 0
  2430  0024D6                     _Init_PWM:
  2431                           	opt stack 20
  2432                           
  2433                           ;pwm.c: 15: PTPERL = 99;
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;incstack = 0
  2437  0024D6  0E63               	movlw	99
  2438  0024D8  6E7B               	movwf	3963,c	;volatile
  2439                           
  2440                           ;pwm.c: 16: PTPERH = 0;
  2441  0024DA  6A7A               	clrf	3962,c	;volatile
  2442                           
  2443                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2444  0024DC  6A7F               	clrf	3967,c	;volatile
  2445                           
  2446                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2447  0024DE  0E80               	movlw	128
  2448  0024E0  6E7E               	movwf	3966,c	;volatile
  2449                           
  2450                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2451  0024E2  0E3F               	movlw	63
  2452  0024E4  6E6F               	movwf	3951,c	;volatile
  2453                           
  2454                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2455  0024E6  6A6E               	clrf	3950,c	;volatile
  2456                           
  2457                           ;pwm.c: 25: DTCON = 0b00000000;
  2458  0024E8  6A6D               	clrf	3949,c	;volatile
  2459                           
  2460                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2461  0024EA  0E05               	movlw	5
  2462  0024EC  6E6B               	movwf	3947,c	;volatile
  2463                           
  2464                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2465  0024EE  6A6A               	clrf	3946,c	;volatile
  2466  0024F0  0012               	return		;funcret
  2467  0024F2                     __end_of_Init_PWM:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           prodl	equ	0xFF3
  2471                           intcon	equ	0xFF2
  2472                           intcon2	equ	0xFF1
  2473                           postinc0	equ	0xFEE
  2474                           wreg	equ	0xFE8
  2475                           postdec1	equ	0xFE5
  2476                           fsr1h	equ	0xFE2
  2477                           fsr1l	equ	0xFE1
  2478                           indf2	equ	0xFDF
  2479                           fsr2h	equ	0xFDA
  2480                           fsr2l	equ	0xFD9
  2481                           
  2482 ;; *************** function _Init_IT *****************
  2483 ;; Defined at:
  2484 ;;		line 70 in file "interrupt.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 3F/0
  2495 ;;		On exit  : 3F/0
  2496 ;;		Unchanged: 3F/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         0       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          0       0       0       0
  2501 ;;      Totals:         0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:   11
  2505 ;; This function calls:
  2506 ;;		_Init_Input_Capture_0
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text8
  2513  002170                     __ptext8:
  2514                           	opt stack 0
  2515  002170                     _Init_IT:
  2516                           	opt stack 19
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2520                           
  2521                           ;incstack = 0
  2522  002170  8EF2               	bsf	intcon,7,c	;volatile
  2523                           
  2524                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2525  002172  8CF2               	bsf	intcon,6,c	;volatile
  2526                           
  2527                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2528  002174  9AF2               	bcf	intcon,5,c	;volatile
  2529                           
  2530                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2531  002176  98F2               	bcf	intcon,4,c	;volatile
  2532                           
  2533                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2534  002178  96F2               	bcf	intcon,3,c	;volatile
  2535                           
  2536                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2537  00217A  94F2               	bcf	intcon,2,c	;volatile
  2538                           
  2539                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2540  00217C  92F2               	bcf	intcon,1,c	;volatile
  2541                           
  2542                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2543  00217E  90F2               	bcf	intcon,0,c	;volatile
  2544                           
  2545                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2546  002180  8EF1               	bsf	intcon2,7,c	;volatile
  2547                           
  2548                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2549  002182  8CF1               	bsf	intcon2,6,c	;volatile
  2550                           
  2551                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2552  002184  9CF1               	bcf	intcon2,6,c	;volatile
  2553                           
  2554                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2555  002186  8AF1               	bsf	intcon2,5,c	;volatile
  2556                           
  2557                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2558  002188  88F1               	bsf	intcon2,4,c	;volatile
  2559                           
  2560                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2561  00218A  94F1               	bcf	intcon2,2,c	;volatile
  2562                           
  2563                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2564  00218C  90F1               	bcf	intcon2,0,c	;volatile
  2565                           
  2566                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2567  00218E  8EF0               	bsf	intcon3,7,c	;volatile
  2568                           
  2569                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2570  002190  8CF0               	bsf	intcon3,6,c	;volatile
  2571                           
  2572                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2573  002192  98F0               	bcf	intcon3,4,c	;volatile
  2574                           
  2575                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2576  002194  96F0               	bcf	intcon3,3,c	;volatile
  2577                           
  2578                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2579  002196  92F0               	bcf	intcon3,1,c	;volatile
  2580                           
  2581                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2582  002198  90F0               	bcf	intcon3,0,c	;volatile
  2583                           
  2584                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2585  00219A  8ED0               	bsf	4048,7,c	;volatile
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;interrupt.c: 125: Init_Input_Capture_0();
  2589  00219C  ECFE  F011         	call	_Init_Input_Capture_0	;wreg free
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2593  0021A0  969F               	bcf	3999,3,c	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596  0021A2  0012               	return		;funcret
  2597  0021A4                     __end_of_Init_IT:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           intcon2	equ	0xFF1
  2603                           intcon3	equ	0xFF0
  2604                           postinc0	equ	0xFEE
  2605                           wreg	equ	0xFE8
  2606                           postdec1	equ	0xFE5
  2607                           fsr1h	equ	0xFE2
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           
  2613 ;; *************** function _Init_Input_Capture_0 *****************
  2614 ;; Defined at:
  2615 ;;		line 139 in file "interrupt.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2
  2624 ;; Tracked objects:
  2625 ;;		On entry : 3F/0
  2626 ;;		On exit  : 3F/0
  2627 ;;		Unchanged: 3F/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2629 ;;      Params:         0       0       0       0
  2630 ;;      Locals:         0       0       0       0
  2631 ;;      Temps:          0       0       0       0
  2632 ;;      Totals:         0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:   10
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_Init_IT
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text9
  2644  0023FC                     __ptext9:
  2645                           	opt stack 0
  2646  0023FC                     _Init_Input_Capture_0:
  2647                           	opt stack 19
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;incstack = 0
  2654  0023FC  9C63               	bcf	3939,6,c	;volatile
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2658  0023FE  5063               	movf	3939,w,c	;volatile
  2659  002400  0BF0               	andlw	-16
  2660  002402  0908               	iorlw	8
  2661  002404  6E63               	movwf	3939,c	;volatile
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2665  002406  92A3               	bcf	4003,1,c	;volatile
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2669  002408  92A5               	bcf	4005,1,c	;volatile
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2673  00240A  92A4               	bcf	4004,1,c	;volatile
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2677  00240C  9C62               	bcf	3938,6,c	;volatile
  2678                           
  2679                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2680  00240E  5062               	movf	3938,w,c	;volatile
  2681  002410  0BF0               	andlw	-16
  2682  002412  0908               	iorlw	8
  2683  002414  6E62               	movwf	3938,c	;volatile
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2687  002416  94A3               	bcf	4003,2,c	;volatile
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2691  002418  94A5               	bcf	4005,2,c	;volatile
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2695  00241A  94A4               	bcf	4004,2,c	;volatile
  2696                           
  2697                           ; BSR set to: 0
  2698  00241C  0012               	return		;funcret
  2699  00241E                     __end_of_Init_Input_Capture_0:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           prodl	equ	0xFF3
  2703                           intcon	equ	0xFF2
  2704                           intcon2	equ	0xFF1
  2705                           intcon3	equ	0xFF0
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1h	equ	0xFE2
  2710                           fsr1l	equ	0xFE1
  2711                           indf2	equ	0xFDF
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           
  2715 ;; *************** function _Init_ADC *****************
  2716 ;; Defined at:
  2717 ;;		line 14 in file "adc.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;		None
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2731 ;;      Params:         0       0       0       0
  2732 ;;      Locals:         0       0       0       0
  2733 ;;      Temps:          0       0       0       0
  2734 ;;      Totals:         0       0       0       0
  2735 ;;Total ram usage:        0 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:   10
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_main
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text10
  2746  00243E                     __ptext10:
  2747                           	opt stack 0
  2748  00243E                     _Init_ADC:
  2749                           	opt stack 20
  2750                           
  2751                           ;adc.c: 15: ADCON0 = 0b00000000;
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;incstack = 0
  2755  00243E  6AC2               	clrf	4034,c	;volatile
  2756                           
  2757                           ;adc.c: 16: ADCON1 = 0b00000000;
  2758  002440  6AC1               	clrf	4033,c	;volatile
  2759                           
  2760                           ;adc.c: 17: ADCON2 = 0b10010100;
  2761  002442  0E94               	movlw	148
  2762  002444  6EC0               	movwf	4032,c	;volatile
  2763                           
  2764                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2765  002446  50C0               	movf	4032,w,c	;volatile
  2766  002448  0BF8               	andlw	-8
  2767  00244A  0901               	iorlw	1
  2768  00244C  6EC0               	movwf	4032,c	;volatile
  2769                           
  2770                           ;adc.c: 19: ADCON3 = 0b11000000;
  2771  00244E  0EC0               	movlw	192
  2772  002450  6E9A               	movwf	3994,c	;volatile
  2773                           
  2774                           ;adc.c: 20: ADCHS = 0b00000000;
  2775  002452  6A99               	clrf	3993,c	;volatile
  2776                           
  2777                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2778  002454  0E03               	movlw	3
  2779  002456  6EB8               	movwf	4024,c	;volatile
  2780                           
  2781                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2782  002458  6AB9               	clrf	4025,c	;volatile
  2783                           
  2784                           ;adc.c: 24: ADON = 1;
  2785  00245A  80C2               	bsf	4034,0,c	;volatile
  2786  00245C  0012               	return		;funcret
  2787  00245E                     __end_of_Init_ADC:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           intcon2	equ	0xFF1
  2793                           intcon3	equ	0xFF0
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           postdec1	equ	0xFE5
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           
  2803 ;; *************** function _EUSART1_Initialize *****************
  2804 ;; Defined at:
  2805 ;;		line 299 in file "eusart.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 3F/0
  2816 ;;		On exit  : 3F/0
  2817 ;;		Unchanged: 3F/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2819 ;;      Params:         0       0       0       0
  2820 ;;      Locals:         0       0       0       0
  2821 ;;      Temps:          0       0       0       0
  2822 ;;      Totals:         0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:   11
  2826 ;; This function calls:
  2827 ;;		_EUSART1_IT_ACTIVATE
  2828 ;; This function is called by:
  2829 ;;		_main
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text11
  2834  001F3E                     __ptext11:
  2835                           	opt stack 0
  2836  001F3E                     _EUSART1_Initialize:
  2837                           	opt stack 19
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2841                           
  2842                           ;incstack = 0
  2843  001F3E  9A9D               	bcf	3997,5,c	;volatile
  2844                           
  2845                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2846  001F40  989D               	bcf	3997,4,c	;volatile
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;eusart.c: 307: BAUDCON = 0x48;
  2850  001F42  0E48               	movlw	72
  2851  001F44  6EAA               	movwf	4010,c	;volatile
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2855  001F46  86AA               	bsf	4010,3,c	;volatile
  2856                           
  2857                           ;eusart.c: 313: RCSTA1 = 0x80;
  2858  001F48  0E80               	movlw	128
  2859  001F4A  6EAB               	movwf	4011,c	;volatile
  2860                           
  2861                           ;eusart.c: 316: TXSTA1 = 0x24;
  2862  001F4C  0E24               	movlw	36
  2863  001F4E  6EAC               	movwf	4012,c	;volatile
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2867  001F50  98AC               	bcf	4012,4,c	;volatile
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2871  001F52  84AC               	bsf	4012,2,c	;volatile
  2872                           
  2873                           ;eusart.c: 321: SPBRG = 0x22;
  2874  001F54  0E22               	movlw	34
  2875  001F56  6EAF               	movwf	4015,c	;volatile
  2876                           
  2877                           ;eusart.c: 322: SPBRG = 0x11;
  2878  001F58  0E11               	movlw	17
  2879  001F5A  6EAF               	movwf	4015,c	;volatile
  2880                           
  2881                           ;eusart.c: 323: SPBRG = 0x12;
  2882  001F5C  0E12               	movlw	18
  2883  001F5E  6EAF               	movwf	4015,c	;volatile
  2884                           
  2885                           ;eusart.c: 324: SPBRG = 0x10;
  2886  001F60  0E10               	movlw	16
  2887  001F62  6EAF               	movwf	4015,c	;volatile
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;eusart.c: 328: SPBRGH = 0x00;
  2891  001F64  6AB0               	clrf	4016,c	;volatile
  2892                           
  2893                           ;eusart.c: 330: SPBRG = 0x0B;
  2894  001F66  0E0B               	movlw	11
  2895  001F68  6EAF               	movwf	4015,c	;volatile
  2896                           
  2897                           ;eusart.c: 331: SPBRGH = 0x33;
  2898  001F6A  0E33               	movlw	51
  2899  001F6C  6EB0               	movwf	4016,c	;volatile
  2900                           
  2901                           ;eusart.c: 333: SPBRG = 205;
  2902  001F6E  0ECD               	movlw	205
  2903  001F70  6EAF               	movwf	4015,c	;volatile
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;eusart.c: 334: SPBRGH = 0x00;
  2907  001F72  6AB0               	clrf	4016,c	;volatile
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2911  001F74  96AA               	bcf	4010,3,c	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2915  001F76  94AC               	bcf	4012,2,c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2919  001F78  98AC               	bcf	4012,4,c	;volatile
  2920                           
  2921                           ;eusart.c: 343: SPBRG = 12;
  2922  001F7A  0E0C               	movlw	12
  2923  001F7C  6EAF               	movwf	4015,c	;volatile
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;eusart.c: 344: SPBRGH = 0x00;
  2927  001F7E  6AB0               	clrf	4016,c	;volatile
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;eusart.c: 397: eusart1TxIndex = 0;
  2931  001F80  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;eusart.c: 398: eusart1RxIndex = 0;
  2935  001F82  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2939  001F84  989F               	bcf	3999,4,c	;volatile
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2943  001F86  9A9F               	bcf	3999,5,c	;volatile
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;eusart.c: 431: RX1_full = 0;
  2947  001F88  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2951  001F8A  EF7B  F013         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2952  001F8E                     __end_of_EUSART1_Initialize:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           intcon2	equ	0xFF1
  2958                           intcon3	equ	0xFF0
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           indf2	equ	0xFDF
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           
  2968 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2969 ;; Defined at:
  2970 ;;		line 232 in file "eusart.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		None
  2979 ;; Tracked objects:
  2980 ;;		On entry : 3F/0
  2981 ;;		On exit  : 3F/0
  2982 ;;		Unchanged: 3F/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2984 ;;      Params:         0       0       0       0
  2985 ;;      Locals:         0       0       0       0
  2986 ;;      Temps:          0       0       0       0
  2987 ;;      Totals:         0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:   10
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_EUSART1_Initialize
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text12
  2999  0026F6                     __ptext12:
  3000                           	opt stack 0
  3001  0026F6                     _EUSART1_IT_ACTIVATE:
  3002                           	opt stack 19
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;incstack = 0
  3009  0026F6  88AB               	bsf	4011,4,c	;volatile
  3010                           
  3011                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  3012  0026F8  9A9E               	bcf	3998,5,c	;volatile
  3013                           
  3014                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  3015  0026FA  8A9D               	bsf	3997,5,c	;volatile
  3016                           
  3017                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  3018  0026FC  989E               	bcf	3998,4,c	;volatile
  3019                           
  3020                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  3021  0026FE  889D               	bsf	3997,4,c	;volatile
  3022                           
  3023                           ; BSR set to: 0
  3024  002700  0012               	return		;funcret
  3025  002702                     __end_of_EUSART1_IT_ACTIVATE:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           prodl	equ	0xFF3
  3029                           intcon	equ	0xFF2
  3030                           intcon2	equ	0xFF1
  3031                           intcon3	equ	0xFF0
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           indf2	equ	0xFDF
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           
  3041 ;; *************** function _Cycle *****************
  3042 ;; Defined at:
  3043 ;;		line 329 in file "MOTEUR.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  i               1   10[BANK2 ] unsigned char 
  3048 ;;  j               1    0        unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3058 ;;      Params:         0       0       0       0
  3059 ;;      Locals:         0       0       0       1
  3060 ;;      Temps:          0       0       0       0
  3061 ;;      Totals:         0       0       0       1
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:   19
  3065 ;; This function calls:
  3066 ;;		_Alarme_On
  3067 ;;		_Buzzer_Etat
  3068 ;;		_Coupe_Moteur
  3069 ;;		_EUSART1_Check_Buffer
  3070 ;;		_Etat_Get
  3071 ;;		_Etat_Update
  3072 ;;		_Mouvement_Bequille
  3073 ;;		_Mouvement_X
  3074 ;;		_Mouvement_Z
  3075 ;;		_SPI_Check_Buffer
  3076 ;;		_delay_n_100ms
  3077 ;;		_delay_s
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text13
  3084  000BBE                     __ptext13:
  3085                           	opt stack 0
  3086  000BBE                     _Cycle:
  3087                           	opt stack 11
  3088  000BBE                     
  3089                           ;MOTEUR.c: 363: EUSART1_Check_Buffer();
  3090  000BBE  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  3091                           
  3092                           ;MOTEUR.c: 365: SPI_Check_Buffer();
  3093  000BC2  EC39  F011         	call	_SPI_Check_Buffer	;wreg free
  3094                           
  3095                           ;MOTEUR.c: 368: if (PORTBbits.RB4==0){
  3096  000BC6  B881               	btfsc	3969,4,c	;volatile
  3097  000BC8  D11F               	goto	l9167
  3098  000BCA  D10D               	goto	l9165
  3099  000BCC                     l9031:
  3100                           
  3101                           ;MOTEUR.c: 380: delay_s(1);
  3102  000BCC  0E01               	movlw	1
  3103  000BCE  ECB4  F011         	call	_delay_s
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;MOTEUR.c: 384: if (Option_Multitas == 0) {
  3107  000BD2  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3108  000BD4  D01C               	goto	l9051
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;MOTEUR.c: 387: Mouvement_X(0, 1, 0x02 | 0x60);
  3112  000BD6  0E01               	movlw	1
  3113  000BD8  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3114  000BDA  0E62               	movlw	98
  3115  000BDC  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3116  000BDE  0E00               	movlw	0
  3117  000BE0  ECB0  F008         	call	_Mouvement_X
  3118                           
  3119                           ;MOTEUR.c: 391: Patinage_Nb_Essai -= 1;
  3120  000BE4  0100               	movlb	0	; () banked
  3121  000BE6  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;MOTEUR.c: 392: if (Patinage_Nb_Essai > 0) {
  3125  000BE8  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3126  000BEA  E008               	bz	l9047
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;MOTEUR.c: 393: nb_s_fonctionnement = 0;
  3130  000BEC  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;MOTEUR.c: 398: delay_s(3);
  3134  000BEE  0E03               	movlw	3
  3135  000BF0  ECB4  F011         	call	_delay_s
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;MOTEUR.c: 399: Etat_Update(2);
  3139  000BF4  0E02               	movlw	2
  3140  000BF6  EC3E  F012         	call	_Etat_Update
  3141                           
  3142                           ;MOTEUR.c: 400: } else {
  3143  000BFA  D7E1               	goto	l9025
  3144  000BFC                     l9047:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;MOTEUR.c: 401: Etat_Update(2);
  3148  000BFC  0E02               	movlw	2
  3149  000BFE  EC3E  F012         	call	_Etat_Update
  3150                           
  3151                           ;MOTEUR.c: 403: P4_busy = 0;
  3152  000C02  0100               	movlb	0	; () banked
  3153  000C04  6BAC               	clrf	_P4_busy& (0+255),b
  3154                           
  3155                           ;MOTEUR.c: 404: Etat_Update(7);
  3156  000C06  0E07               	movlw	7
  3157  000C08  EC3E  F012         	call	_Etat_Update
  3158  000C0C  D7D8               	goto	l9025
  3159  000C0E                     l9051:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;MOTEUR.c: 409: Etat_Update(0);
  3163  000C0E  0E00               	movlw	0
  3164  000C10  EC3E  F012         	call	_Etat_Update
  3165                           
  3166                           ;MOTEUR.c: 411: P4_busy = 0;
  3167  000C14  0100               	movlb	0	; () banked
  3168  000C16  6BAC               	clrf	_P4_busy& (0+255),b
  3169  000C18  D7D2               	goto	l9025
  3170  000C1A                     l9055:
  3171                           
  3172                           ;MOTEUR.c: 419: delay_s(1);
  3173  000C1A  0E01               	movlw	1
  3174  000C1C  ECB4  F011         	call	_delay_s
  3175                           
  3176                           ;MOTEUR.c: 422: Mouvement_X(1, 1, 0x02 | 0x60);
  3177  000C20  0E01               	movlw	1
  3178  000C22  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3179  000C24  0E62               	movlw	98
  3180  000C26  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3181  000C28  0E01               	movlw	1
  3182  000C2A  ECB0  F008         	call	_Mouvement_X
  3183                           
  3184                           ;MOTEUR.c: 423: Patinage_Nb_Essai -= 1;
  3185  000C2E  0100               	movlb	0	; () banked
  3186  000C30  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;MOTEUR.c: 424: if (Patinage_Nb_Essai > 0) {
  3190  000C32  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3191  000C34  E008               	bz	l9067
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;MOTEUR.c: 425: nb_s_fonctionnement = 0;
  3195  000C36  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;MOTEUR.c: 426: delay_s(3);
  3199  000C38  0E03               	movlw	3
  3200  000C3A  ECB4  F011         	call	_delay_s
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;MOTEUR.c: 427: Etat_Update(3);
  3204  000C3E  0E03               	movlw	3
  3205  000C40  EC3E  F012         	call	_Etat_Update
  3206                           
  3207                           ;MOTEUR.c: 428: } else {
  3208  000C44  D7BC               	goto	l9025
  3209  000C46                     l9067:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;MOTEUR.c: 429: Etat_Update(3);
  3213  000C46  0E03               	movlw	3
  3214  000C48  EC3E  F012         	call	_Etat_Update
  3215                           
  3216                           ;MOTEUR.c: 431: P4_busy = 0;
  3217  000C4C  0100               	movlb	0	; () banked
  3218  000C4E  6BAC               	clrf	_P4_busy& (0+255),b
  3219                           
  3220                           ;MOTEUR.c: 432: Etat_Update(7);
  3221  000C50  0E07               	movlw	7
  3222  000C52  EC3E  F012         	call	_Etat_Update
  3223  000C56  D7B3               	goto	l9025
  3224  000C58                     l248:
  3225                           
  3226                           ;MOTEUR.c: 436: P4_busy = 0;
  3227  000C58  0100               	movlb	0	; () banked
  3228  000C5A  6BAC               	clrf	_P4_busy& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;MOTEUR.c: 437: Etat_Update(70);
  3232  000C5C  0E46               	movlw	70
  3233  000C5E  EC3E  F012         	call	_Etat_Update
  3234                           
  3235                           ;MOTEUR.c: 438: break;
  3236  000C62  D7AD               	goto	l9025
  3237  000C64                     l9075:
  3238                           
  3239                           ; BSR set to: 0
  3240  000C64  0E01               	movlw	1
  3241  000C66  EC20  F011         	call	_Etat_Get
  3242                           
  3243                           ; Switch size 1, requested type "speed"
  3244                           ; Number of cases is 2, Range of values is 2 to 3
  3245                           ; switch strategies available:
  3246                           ; Name         Instructions Cycles
  3247                           ; simple_byte            7     4 (average)
  3248                           ;	Chosen strategy is simple_byte
  3249  000C6A  0A02               	xorlw	2	; case 2
  3250  000C6C  E0AF               	bz	l9031
  3251  000C6E  0A01               	xorlw	1	; case 3
  3252  000C70  E0D4               	bz	l9055
  3253  000C72  D7F2               	goto	l248
  3254  000C74                     l9077:
  3255                           
  3256                           ;MOTEUR.c: 459: delay_s(1);
  3257  000C74  0E01               	movlw	1
  3258  000C76  ECB4  F011         	call	_delay_s
  3259                           
  3260                           ;MOTEUR.c: 462: Mouvement_X(0, 1, 0x02 | 0x60);
  3261  000C7A  0E01               	movlw	1
  3262  000C7C  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3263  000C7E  0E62               	movlw	98
  3264  000C80  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3265  000C82  0E00               	movlw	0
  3266  000C84  ECB0  F008         	call	_Mouvement_X
  3267                           
  3268                           ;MOTEUR.c: 463: Capteur_Capot_Nb_Evenement -= 1;
  3269  000C88  0100               	movlb	0	; () banked
  3270  000C8A  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;MOTEUR.c: 464: if (Capteur_Capot_Nb_Evenement > 0) {
  3274  000C8C  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3275  000C8E  E008               	bz	l9089
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;MOTEUR.c: 465: Capteur_Capot_Compteur_Temps_S = 0;
  3279  000C90  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;MOTEUR.c: 466: delay_s(3);
  3283  000C92  0E03               	movlw	3
  3284  000C94  ECB4  F011         	call	_delay_s
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;MOTEUR.c: 467: Etat_Update(2);
  3288  000C98  0E02               	movlw	2
  3289  000C9A  EC3E  F012         	call	_Etat_Update
  3290                           
  3291                           ;MOTEUR.c: 468: } else {
  3292  000C9E  D78F               	goto	l9025
  3293  000CA0                     l9089:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;MOTEUR.c: 469: Etat_Update(2);
  3297  000CA0  0E02               	movlw	2
  3298  000CA2  EC3E  F012         	call	_Etat_Update
  3299                           
  3300                           ;MOTEUR.c: 472: P4_busy = 0;
  3301  000CA6  0100               	movlb	0	; () banked
  3302  000CA8  6BAC               	clrf	_P4_busy& (0+255),b
  3303                           
  3304                           ;MOTEUR.c: 473: Etat_Update(7);
  3305  000CAA  0E07               	movlw	7
  3306  000CAC  EC3E  F012         	call	_Etat_Update
  3307  000CB0  D786               	goto	l9025
  3308  000CB2                     l9093:
  3309                           
  3310                           ;MOTEUR.c: 478: delay_s(1);
  3311  000CB2  0E01               	movlw	1
  3312  000CB4  ECB4  F011         	call	_delay_s
  3313                           
  3314                           ;MOTEUR.c: 481: Mouvement_X(1, 1, 0x02 | 0x60);
  3315  000CB8  0E01               	movlw	1
  3316  000CBA  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3317  000CBC  0E62               	movlw	98
  3318  000CBE  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3319  000CC0  0E01               	movlw	1
  3320  000CC2  ECB0  F008         	call	_Mouvement_X
  3321                           
  3322                           ;MOTEUR.c: 482: Capteur_Capot_Nb_Evenement -= 1;
  3323  000CC6  0100               	movlb	0	; () banked
  3324  000CC8  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;MOTEUR.c: 483: if (Capteur_Capot_Nb_Evenement > 0) {
  3328  000CCA  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3329  000CCC  E008               	bz	l9105
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;MOTEUR.c: 484: Capteur_Capot_Compteur_Temps_S = 0;
  3333  000CCE  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;MOTEUR.c: 485: delay_s(3);
  3337  000CD0  0E03               	movlw	3
  3338  000CD2  ECB4  F011         	call	_delay_s
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;MOTEUR.c: 486: Etat_Update(3);
  3342  000CD6  0E03               	movlw	3
  3343  000CD8  EC3E  F012         	call	_Etat_Update
  3344                           
  3345                           ;MOTEUR.c: 487: } else {
  3346  000CDC  D770               	goto	l9025
  3347  000CDE                     l9105:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;MOTEUR.c: 488: Etat_Update(3);
  3351  000CDE  0E03               	movlw	3
  3352  000CE0  EC3E  F012         	call	_Etat_Update
  3353                           
  3354                           ;MOTEUR.c: 490: P4_busy = 0;
  3355  000CE4  0100               	movlb	0	; () banked
  3356  000CE6  6BAC               	clrf	_P4_busy& (0+255),b
  3357                           
  3358                           ;MOTEUR.c: 493: Etat_Update(77);
  3359  000CE8  0E4D               	movlw	77
  3360  000CEA  EC3E  F012         	call	_Etat_Update
  3361  000CEE  D767               	goto	l9025
  3362  000CF0                     l259:
  3363                           
  3364                           ;MOTEUR.c: 498: P4_busy = 0;
  3365  000CF0  0100               	movlb	0	; () banked
  3366  000CF2  6BAC               	clrf	_P4_busy& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;MOTEUR.c: 499: Etat_Update(70);
  3370  000CF4  0E46               	movlw	70
  3371  000CF6  EC3E  F012         	call	_Etat_Update
  3372                           
  3373                           ;MOTEUR.c: 500: break;
  3374  000CFA  D761               	goto	l9025
  3375  000CFC                     l9113:
  3376                           
  3377                           ; BSR set to: 0
  3378  000CFC  0E01               	movlw	1
  3379  000CFE  EC20  F011         	call	_Etat_Get
  3380                           
  3381                           ; Switch size 1, requested type "speed"
  3382                           ; Number of cases is 2, Range of values is 2 to 3
  3383                           ; switch strategies available:
  3384                           ; Name         Instructions Cycles
  3385                           ; simple_byte            7     4 (average)
  3386                           ;	Chosen strategy is simple_byte
  3387  000D02  0A02               	xorlw	2	; case 2
  3388  000D04  E0B7               	bz	l9077
  3389  000D06  0A01               	xorlw	1	; case 3
  3390  000D08  E0D4               	bz	l9093
  3391  000D0A  D7F2               	goto	l259
  3392  000D0C                     l9115:
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;MOTEUR.c: 514: P4_busy = 1;
  3396  000D0C  0E01               	movlw	1
  3397  000D0E  6FAC               	movwf	_P4_busy& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;MOTEUR.c: 515: Etat_Update(77);
  3401  000D10  0E4D               	movlw	77
  3402  000D12  EC3E  F012         	call	_Etat_Update
  3403                           
  3404                           ;MOTEUR.c: 516: for (i = 0; i < 4; i++) {
  3405  000D16  0102               	movlb	2	; () banked
  3406  000D18  6B8A               	clrf	Cycle@i& (0+255),b
  3407  000D1A                     l9125:
  3408                           
  3409                           ; BSR set to: 2
  3410                           ;MOTEUR.c: 517: Buzzer_Etat((unsigned char) 1);
  3411  000D1A  0E01               	movlw	1
  3412  000D1C  EC6D  F013         	call	_Buzzer_Etat
  3413                           
  3414                           ;MOTEUR.c: 518: delay_n_100ms(4);
  3415  000D20  0E04               	movlw	4
  3416  000D22  ECD8  F012         	call	_delay_n_100ms
  3417                           
  3418                           ;MOTEUR.c: 519: Buzzer_Etat((unsigned char) 0);
  3419  000D26  0E00               	movlw	0
  3420  000D28  EC6D  F013         	call	_Buzzer_Etat
  3421                           
  3422                           ;MOTEUR.c: 520: delay_n_100ms(2);
  3423  000D2C  0E02               	movlw	2
  3424  000D2E  ECD8  F012         	call	_delay_n_100ms
  3425  000D32  0102               	movlb	2	; () banked
  3426  000D34  2B8A               	incf	Cycle@i& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 2
  3429  000D36  0E03               	movlw	3
  3430  000D38  658A               	cpfsgt	Cycle@i& (0+255),b
  3431  000D3A  D7EF               	goto	l9125
  3432  000D3C  D740               	goto	l9025
  3433  000D3E                     l9131:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;MOTEUR.c: 525: P4_busy = 1;
  3437  000D3E  0E01               	movlw	1
  3438  000D40  6FAC               	movwf	_P4_busy& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;MOTEUR.c: 526: Etat_Update(77);
  3442  000D42  0E4D               	movlw	77
  3443  000D44  EC3E  F012         	call	_Etat_Update
  3444                           
  3445                           ;MOTEUR.c: 530: for (i = 0; i < 4; i++) {
  3446  000D48  0102               	movlb	2	; () banked
  3447  000D4A  6B8A               	clrf	Cycle@i& (0+255),b
  3448  000D4C                     l9141:
  3449                           
  3450                           ; BSR set to: 2
  3451                           ;MOTEUR.c: 531: Buzzer_Etat((unsigned char) 1);
  3452  000D4C  0E01               	movlw	1
  3453  000D4E  EC6D  F013         	call	_Buzzer_Etat
  3454                           
  3455                           ;MOTEUR.c: 532: delay_n_100ms(4);
  3456  000D52  0E04               	movlw	4
  3457  000D54  ECD8  F012         	call	_delay_n_100ms
  3458                           
  3459                           ;MOTEUR.c: 533: Buzzer_Etat((unsigned char) 0);
  3460  000D58  0E00               	movlw	0
  3461  000D5A  EC6D  F013         	call	_Buzzer_Etat
  3462                           
  3463                           ;MOTEUR.c: 534: delay_n_100ms(2);
  3464  000D5E  0E02               	movlw	2
  3465  000D60  ECD8  F012         	call	_delay_n_100ms
  3466  000D64  0102               	movlb	2	; () banked
  3467  000D66  2B8A               	incf	Cycle@i& (0+255),f,b
  3468                           
  3469                           ; BSR set to: 2
  3470  000D68  0E03               	movlw	3
  3471  000D6A  658A               	cpfsgt	Cycle@i& (0+255),b
  3472  000D6C  D7EF               	goto	l9141
  3473  000D6E  D727               	goto	l9025
  3474  000D70                     l9149:
  3475                           
  3476                           ; BSR set to: 0
  3477  000D70  51A9               	movf	_Alarme& (0+255),w,b	;volatile
  3478                           
  3479                           ; Switch size 1, requested type "speed"
  3480                           ; Number of cases is 4, Range of values is 1 to 4
  3481                           ; switch strategies available:
  3482                           ; Name         Instructions Cycles
  3483                           ; simple_byte           13     7 (average)
  3484                           ;	Chosen strategy is simple_byte
  3485  000D72  0A01               	xorlw	1	; case 1
  3486  000D74  E0CB               	bz	l9115
  3487  000D76  0A03               	xorlw	3	; case 2
  3488  000D78  E0E2               	bz	l9131
  3489  000D7A  0A01               	xorlw	1	; case 3
  3490  000D7C  E101 D772          	bz	l9075
  3491  000D80  0A07               	xorlw	7	; case 4
  3492  000D82  E0BC               	bz	l9113
  3493  000D84  D71C               	goto	l9025
  3494  000D86                     l9151:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;MOTEUR.c: 556: Mouvement_X(direction, type_consigne, mouvement_option);
  3498  000D86  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3499  000D8A  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3500  000D8E  518F               	movf	_direction& (0+255),w,b	;volatile
  3501  000D90  ECB0  F008         	call	_Mouvement_X
  3502                           
  3503                           ;MOTEUR.c: 557: break;
  3504  000D94  D714               	goto	l9025
  3505  000D96                     l9153:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;MOTEUR.c: 562: Mouvement_X(direction, type_consigne, mouvement_option);
  3509  000D96  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3510  000D9A  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3511  000D9E  518F               	movf	_direction& (0+255),w,b	;volatile
  3512  000DA0  ECB0  F008         	call	_Mouvement_X
  3513                           
  3514                           ;MOTEUR.c: 564: break;
  3515  000DA4  D70C               	goto	l9025
  3516  000DA6                     l9155:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;MOTEUR.c: 568: Mouvement_Z(direction, type_consigne, mouvement_option);
  3520  000DA6  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3521  000DAA  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3522  000DAE  518F               	movf	_direction& (0+255),w,b	;volatile
  3523  000DB0  EC79  F00C         	call	_Mouvement_Z
  3524                           
  3525                           ;MOTEUR.c: 569: break;
  3526  000DB4  D704               	goto	l9025
  3527  000DB6                     l9157:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;MOTEUR.c: 574: Mouvement_Z(direction, type_consigne, mouvement_option);
  3531  000DB6  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3532  000DBA  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3533  000DBE  518F               	movf	_direction& (0+255),w,b	;volatile
  3534  000DC0  EC79  F00C         	call	_Mouvement_Z
  3535                           
  3536                           ;MOTEUR.c: 576: break;
  3537  000DC4  D6FC               	goto	l9025
  3538  000DC6                     l9159:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;MOTEUR.c: 581: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3542  000DC6  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3543  000DCA  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3544  000DCE  518F               	movf	_direction& (0+255),w,b	;volatile
  3545  000DD0  ECCE  F00C         	call	_Mouvement_Bequille
  3546                           
  3547                           ;MOTEUR.c: 583: break;
  3548  000DD4  D6F4               	goto	l9025
  3549  000DD6                     l9161:
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;MOTEUR.c: 589: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3553  000DD6  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3554  000DDA  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3555  000DDE  518F               	movf	_direction& (0+255),w,b	;volatile
  3556  000DE0  ECCE  F00C         	call	_Mouvement_Bequille
  3557                           
  3558                           ;MOTEUR.c: 592: break;
  3559  000DE4  D6EC               	goto	l9025
  3560  000DE6                     l9165:
  3561  000DE6  0100               	movlb	0	; () banked
  3562  000DE8  51AA               	movf	_Etat& (0+255),w,b	;volatile
  3563                           
  3564                           ; Switch size 1, requested type "speed"
  3565                           ; Number of cases is 7, Range of values is 1 to 9
  3566                           ; switch strategies available:
  3567                           ; Name         Instructions Cycles
  3568                           ; simple_byte           22    12 (average)
  3569                           ;	Chosen strategy is simple_byte
  3570  000DEA  0A01               	xorlw	1	; case 1
  3571  000DEC  E0C1               	bz	l9149
  3572  000DEE  0A03               	xorlw	3	; case 2
  3573  000DF0  E0CA               	bz	l9151
  3574  000DF2  0A01               	xorlw	1	; case 3
  3575  000DF4  E0D0               	bz	l9153
  3576  000DF6  0A07               	xorlw	7	; case 4
  3577  000DF8  E0DE               	bz	l9157
  3578  000DFA  0A01               	xorlw	1	; case 5
  3579  000DFC  E0D4               	bz	l9155
  3580  000DFE  0A0D               	xorlw	13	; case 8
  3581  000E00  E0EA               	bz	l9161
  3582  000E02  0A01               	xorlw	1	; case 9
  3583  000E04  E0E0               	bz	l9159
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;MOTEUR.c: 603: }else{
  3587  000E06  D6DB               	goto	l9025
  3588  000E08                     l9167:
  3589                           
  3590                           ;MOTEUR.c: 605: Coupe_Moteur();
  3591  000E08  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  3592                           
  3593                           ;MOTEUR.c: 606: Alarme_On(7);
  3594  000E0C  0E07               	movlw	7
  3595  000E0E  EC4E  F013         	call	_Alarme_On
  3596  000E12  D6D5               	goto	l9025
  3597  000E14                     __end_of_Cycle:
  3598                           	opt stack 0
  3599                           tblptru	equ	0xFF8
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           intcon2	equ	0xFF1
  3603                           intcon3	equ	0xFF0
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1h	equ	0xFE2
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           
  3613 ;; *************** function _delay_n_100ms *****************
  3614 ;; Defined at:
  3615 ;;		line 61 in file "horloge.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  nb_100ms        1    wreg     unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3620 ;;  i               1   16[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/2
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       0       0       0
  3631 ;;      Locals:         2       0       0       0
  3632 ;;      Temps:          0       0       0       0
  3633 ;;      Totals:         2       0       0       0
  3634 ;;Total ram usage:        2 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:   11
  3637 ;; This function calls:
  3638 ;;		_delay_100ms
  3639 ;; This function is called by:
  3640 ;;		_Cycle
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text14
  3645  0025B0                     __ptext14:
  3646                           	opt stack 0
  3647  0025B0                     _delay_n_100ms:
  3648                           	opt stack 18
  3649                           
  3650                           ;incstack = 0
  3651                           ;delay_n_100ms@nb_100ms stored from wreg
  3652  0025B0  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3653                           
  3654                           ;horloge.c: 62: unsigned char i;
  3655                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3656  0025B2  6A11               	clrf	delay_n_100ms@i,c
  3657  0025B4  D003               	goto	l8801
  3658  0025B6                     l8797:
  3659                           
  3660                           ;horloge.c: 64: delay_100ms();
  3661  0025B6  EC1E  F00C         	call	_delay_100ms	;wreg free
  3662  0025BA  2A11               	incf	delay_n_100ms@i,f,c
  3663  0025BC                     l8801:
  3664  0025BC  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3665  0025BE  5C11               	subwf	delay_n_100ms@i,w,c
  3666  0025C0  E3FA               	bnc	l8797
  3667  0025C2  0012               	return		;funcret
  3668  0025C4                     __end_of_delay_n_100ms:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           intcon2	equ	0xFF1
  3674                           intcon3	equ	0xFF0
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           
  3684 ;; *************** function _Mouvement_Z *****************
  3685 ;; Defined at:
  3686 ;;		line 982 in file "action.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  direction       1    wreg     unsigned char 
  3689 ;;  type_consign    1    7[BANK2 ] unsigned char 
  3690 ;;  option          1    8[BANK2 ] unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  direction       1    9[BANK2 ] unsigned char 
  3693 ;;  index           2    0        unsigned int 
  3694 ;;  Option_Temps    1    0        unsigned char 
  3695 ;;  i_max           1    0        unsigned char 
  3696 ;;  i_min           1    0        unsigned char 
  3697 ;;  i               1    0        unsigned char 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 3F/0
  3704 ;;		On exit  : 3F/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3707 ;;      Params:         0       0       0       2
  3708 ;;      Locals:         0       0       0       1
  3709 ;;      Temps:          0       0       0       0
  3710 ;;      Totals:         0       0       0       3
  3711 ;;Total ram usage:        3 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:   18
  3714 ;; This function calls:
  3715 ;;		_Check_List_Moteur_2
  3716 ;;		_Coupe_Moteur
  3717 ;;		_Detection_Pion_Off
  3718 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3719 ;;		_Init_Moteur_2
  3720 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3721 ;;		_TIMER2_On
  3722 ;;		_delay_s
  3723 ;;		_u_Init_PWM
  3724 ;; This function is called by:
  3725 ;;		_Cycle
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text15
  3730  0018F2                     __ptext15:
  3731                           	opt stack 0
  3732  0018F2                     _Mouvement_Z:
  3733                           	opt stack 11
  3734                           
  3735                           ;incstack = 0
  3736                           ;Mouvement_Z@direction stored from wreg
  3737  0018F2  0102               	movlb	2	; () banked
  3738  0018F4  6F89               	movwf	Mouvement_Z@direction& (0+255),b
  3739                           
  3740                           ;action.c: 983: unsigned char i, i_min, i_max;
  3741                           ;action.c: 984: unsigned char Option_Temps_S;
  3742                           ;action.c: 992: Surveillance_Consommation_Moteur_2_Desactiver();
  3743  0018F6  EC66  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;action.c: 994: Detection_Pion_Off();
  3747  0018FA  EC97  F013         	call	_Detection_Pion_Off	;wreg free
  3748                           
  3749                           ;action.c: 997: nb_s_pelle = option;
  3750  0018FE  C288  F0A3         	movff	Mouvement_Z@option,_nb_s_pelle
  3751                           
  3752                           ;action.c: 1000: consigne = 10;
  3753  001902  0E0A               	movlw	10
  3754  001904  0100               	movlb	0	; () banked
  3755  001906  6F98               	movwf	_consigne& (0+255),b	;volatile
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;action.c: 1011: index = 0;
  3759  001908  ECF0  F00E         	call	_u_Init_PWM	;wreg free
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;action.c: 1012: TMR2 = 0;
  3763  00190C  6ACC               	clrf	4044,c	;volatile
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;action.c: 1013: TMR2IF = 0;
  3767  00190E  929E               	bcf	3998,1,c	;volatile
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;action.c: 1019: LATEbits.LATE2 = 0;
  3771  001910  948D               	bcf	3981,2,c	;volatile
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;action.c: 1024: moteur_indice = 2;
  3775  001912  0E02               	movlw	2
  3776  001914  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;action.c: 1025: Init_ADC_Single_Shoot_I_Moteur_2();
  3780  001916  EC8C  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;action.c: 1028: if (direction == 1) {
  3784  00191A  0102               	movlb	2	; () banked
  3785  00191C  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3786  00191E  E103               	bnz	l1030
  3787                           
  3788                           ; BSR set to: 2
  3789                           ;action.c: 1029: LATD7 = 0;LATD6 = 1;
  3790  001920  9E8C               	bcf	3980,7,c	;volatile
  3791  001922  8C8C               	bsf	3980,6,c	;volatile
  3792                           
  3793                           ;action.c: 1030: } else {
  3794  001924  D002               	goto	l8825
  3795  001926                     l1030:
  3796                           
  3797                           ; BSR set to: 2
  3798                           ;action.c: 1031: LATD6 = 0;LATD7 = 1;
  3799  001926  9C8C               	bcf	3980,6,c	;volatile
  3800  001928  8E8C               	bsf	3980,7,c	;volatile
  3801  00192A                     l8825:
  3802                           
  3803                           ; BSR set to: 2
  3804                           ;action.c: 1032: }
  3805                           ;action.c: 1033: PDC1L = 1 << 2;
  3806  00192A  0E04               	movlw	4
  3807  00192C  6E77               	movwf	3959,c	;volatile
  3808                           
  3809                           ; BSR set to: 2
  3810                           ;action.c: 1034: PDC1H = 0;
  3811  00192E  6A76               	clrf	3958,c	;volatile
  3812                           
  3813                           ;action.c: 1035: OVDCOND = 0b00000100;
  3814  001930  0E04               	movlw	4
  3815  001932  6E6B               	movwf	3947,c	;volatile
  3816                           
  3817                           ; BSR set to: 2
  3818                           ;action.c: 1036: LATCbits.LATC1 = 1;
  3819  001934  828B               	bsf	3979,1,c	;volatile
  3820                           
  3821                           ;action.c: 1038: erreur = 1;
  3822  001936  0100               	movlb	0	; () banked
  3823  001938  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3824  00193A  0E01               	movlw	1
  3825  00193C  6F84               	movwf	_erreur& (0+255),b	;volatile
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;action.c: 1039: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3829  00193E  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3830  001940  46E8               	rlncf	wreg,f,c
  3831  001942  0BFC               	andlw	252
  3832  001944  6E77               	movwf	3959,c	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;action.c: 1040: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3836  001946  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3837  001948  46E8               	rlncf	wreg,f,c
  3838  00194A  0B03               	andlw	3
  3839  00194C  6E76               	movwf	3958,c	;volatile
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;action.c: 1043: erreur_accumulator = 0;
  3843  00194E  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3844  001950  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;action.c: 1046: Nouvelle_Valeur_ADC = 0;
  3848  001952  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;action.c: 1050: PIE3bits.PTIE = 0;
  3852  001954  98A3               	bcf	4003,4,c	;volatile
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;action.c: 1051: PIE1bits.ADIE = 1;
  3856  001956  8C9D               	bsf	3997,6,c	;volatile
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;action.c: 1052: PIE1bits.ADIE = 1;
  3860  001958  8C9D               	bsf	3997,6,c	;volatile
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;action.c: 1054: PEIE = 1;
  3864  00195A  8CF2               	bsf	intcon,6,c	;volatile
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;action.c: 1055: GIE = 1;
  3868  00195C  8EF2               	bsf	intcon,7,c	;volatile
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;action.c: 1056: TIMER2_On();
  3872  00195E  ECA7  F013         	call	_TIMER2_On	;wreg free
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;action.c: 1057: ADIF = 0;
  3876  001962  9C9E               	bcf	3998,6,c	;volatile
  3877                           
  3878                           ;action.c: 1074: Init_Moteur_2();
  3879  001964  EC2E  F013         	call	_Init_Moteur_2	;wreg free
  3880  001968                     l8853:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;action.c: 1078: Check_List_Moteur_2();
  3884  001968  ECD2  F010         	call	_Check_List_Moteur_2	;wreg free
  3885                           
  3886                           ;action.c: 1079: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat
      +                           == 4)));
  3887  00196C  0102               	movlb	2	; () banked
  3888  00196E  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3889  001970  E104               	bnz	l8859
  3890                           
  3891                           ; BSR set to: 2
  3892  001972  0E05               	movlw	5
  3893  001974  0100               	movlb	0	; () banked
  3894  001976  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3895  001978  E0F7               	bz	l8853
  3896  00197A                     l8859:
  3897  00197A  0102               	movlb	2	; () banked
  3898  00197C  5189               	movf	Mouvement_Z@direction& (0+255),w,b
  3899  00197E  E104               	bnz	l1037
  3900                           
  3901                           ; BSR set to: 2
  3902  001980  0E04               	movlw	4
  3903  001982  0100               	movlb	0	; () banked
  3904  001984  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3905  001986  E0F0               	bz	l8853
  3906  001988                     l1037:
  3907                           
  3908                           ;action.c: 1083: PIE3bits.PTIE = 0;
  3909  001988  98A3               	bcf	4003,4,c	;volatile
  3910                           
  3911                           ;action.c: 1084: PIE1bits.ADIE = 0;
  3912  00198A  9C9D               	bcf	3997,6,c	;volatile
  3913                           
  3914                           ;action.c: 1089: LATEbits.LATE2 = 0;
  3915  00198C  948D               	bcf	3981,2,c	;volatile
  3916                           
  3917                           ;action.c: 1096: Surveillance_Consommation_Moteur_2_Desactiver();
  3918  00198E  EC66  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;action.c: 1098: Coupe_Moteur();
  3922  001992  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  3923                           
  3924                           ;action.c: 1099: delay_s(1);
  3925  001996  0E01               	movlw	1
  3926  001998  EFB4  F011         	goto	_delay_s
  3927  00199C                     __end_of_Mouvement_Z:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           intcon3	equ	0xFF0
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           
  3943 ;; *************** function _Init_Moteur_2 *****************
  3944 ;; Defined at:
  3945 ;;		line 175 in file "action.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 3F/0
  3956 ;;		On exit  : 3F/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:   11
  3966 ;; This function calls:
  3967 ;;		_TIMER0_On
  3968 ;; This function is called by:
  3969 ;;		_Mouvement_Z
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text16
  3974  00265C                     __ptext16:
  3975                           	opt stack 0
  3976  00265C                     _Init_Moteur_2:
  3977                           	opt stack 17
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;action.c: 180: nb_s_fonctionnement = 0;
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;incstack = 0
  3984  00265C  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3985                           
  3986                           ;action.c: 181: nb_Pion = 0;
  3987  00265E  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  3988                           
  3989                           ;action.c: 182: nb_100ms_Timer_5 = 0;
  3990  002660  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;action.c: 183: TIMER0_On();
  3994  002662  ECA1  F012         	call	_TIMER0_On	;wreg free
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;action.c: 186: Compteur_IRQ_I_Moteur_2 = 0;
  3998  002666  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;action.c: 187: LATCbits.LATC2=0;
  4002  002668  948B               	bcf	3979,2,c	;volatile
  4003                           
  4004                           ; BSR set to: 0
  4005  00266A  0012               	return		;funcret
  4006  00266C                     __end_of_Init_Moteur_2:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           
  4022 ;; *************** function _Check_List_Moteur_2 *****************
  4023 ;; Defined at:
  4024 ;;		line 197 in file "action.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      void 
  4031 ;; Registers used:
  4032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4038 ;;      Params:         0       0       0       0
  4039 ;;      Locals:         0       0       0       0
  4040 ;;      Temps:          0       0       0       0
  4041 ;;      Totals:         0       0       0       0
  4042 ;;Total ram usage:        0 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:   17
  4045 ;; This function calls:
  4046 ;;		_Alarme_On
  4047 ;;		_Coupe_Moteur
  4048 ;;		_EUSART1_Check_Buffer
  4049 ;;		_Etat_Update
  4050 ;;		_SPI_Check_Buffer
  4051 ;; This function is called by:
  4052 ;;		_Mouvement_Z
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text17
  4057  0021A4                     __ptext17:
  4058                           	opt stack 0
  4059  0021A4                     _Check_List_Moteur_2:
  4060                           	opt stack 11
  4061                           
  4062                           ;action.c: 207: if (PORTBbits.RB4==0){
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;incstack = 0
  4066  0021A4  B881               	btfsc	3969,4,c	;volatile
  4067  0021A6  D013               	goto	l8635
  4068                           
  4069                           ;action.c: 211: EUSART1_Check_Buffer();
  4070  0021A8  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4071                           
  4072                           ;action.c: 212: SPI_Check_Buffer();
  4073  0021AC  EC39  F011         	call	_SPI_Check_Buffer	;wreg free
  4074                           
  4075                           ;action.c: 223: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  4076  0021B0  0100               	movlb	0	; () banked
  4077  0021B2  51A3               	movf	_nb_s_pelle& (0+255),w,b
  4078  0021B4  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4079  0021B6  E207               	bc	l983
  4080                           
  4081                           ; BSR set to: 0
  4082  0021B8  0E02               	movlw	2
  4083  0021BA  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  4084  0021BC  0C02               	retlw	2
  4085                           
  4086                           ; BSR set to: 0
  4087  0021BE  5193               	movf	_Pelle_I_Max& (0+255),w,b
  4088  0021C0  5D9A               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  4089  0021C2  A0D8               	btfss	status,0,c
  4090  0021C4  0012               	return	
  4091  0021C6                     l983:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;action.c: 227: P4_busy = 0;
  4095  0021C6  6BAC               	clrf	_P4_busy& (0+255),b
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;action.c: 228: Etat_Update(0);
  4099  0021C8  0E00               	movlw	0
  4100  0021CA  EF3E  F012         	goto	_Etat_Update
  4101  0021CE                     l8635:
  4102                           
  4103                           ;action.c: 237: Coupe_Moteur();
  4104  0021CE  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  4105                           
  4106                           ;action.c: 238: Alarme_On(7);
  4107  0021D2  0E07               	movlw	7
  4108  0021D4  EF4E  F013         	goto	_Alarme_On
  4109  0021D8                     __end_of_Check_List_Moteur_2:
  4110                           	opt stack 0
  4111                           tblptru	equ	0xFF8
  4112                           prodl	equ	0xFF3
  4113                           intcon	equ	0xFF2
  4114                           intcon2	equ	0xFF1
  4115                           intcon3	equ	0xFF0
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postdec1	equ	0xFE5
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           indf2	equ	0xFDF
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function _Mouvement_X *****************
  4127 ;; Defined at:
  4128 ;;		line 1117 in file "action.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  direction       1    wreg     unsigned char 
  4131 ;;  type_consign    1   17[BANK0 ] unsigned char 
  4132 ;;  option          1   18[BANK0 ] unsigned char 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  direction       1    7[BANK2 ] unsigned char 
  4135 ;;  index           2    0        unsigned int 
  4136 ;;  Option_Temps    1    0        unsigned char 
  4137 ;;  i_max           1    0        unsigned char 
  4138 ;;  i_min           1    0        unsigned char 
  4139 ;;  i               1    0        unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 3F/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4149 ;;      Params:         0       2       0       0
  4150 ;;      Locals:         0       0       0       1
  4151 ;;      Temps:          0       0       0       0
  4152 ;;      Totals:         0       2       0       1
  4153 ;;Total ram usage:        3 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:   18
  4156 ;; This function calls:
  4157 ;;		_Alarme_On
  4158 ;;		_Capteur_Capot_Off
  4159 ;;		_Capteur_Capot_On
  4160 ;;		_Check_List_Moteur_1
  4161 ;;		_Coupe_Moteur
  4162 ;;		_Detection_Pion_Init
  4163 ;;		_Detection_Pion_Off
  4164 ;;		_Detection_Pion_On
  4165 ;;		_EUSART1_Check_Buffer
  4166 ;;		_Etat_Update
  4167 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4168 ;;		_Init_Moteur_1
  4169 ;;		_SPI_Check_Buffer
  4170 ;;		_Stop_Moteur_1
  4171 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4172 ;;		_TIMER2_On
  4173 ;;		_u_Init_PWM
  4174 ;; This function is called by:
  4175 ;;		_Cycle
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text18
  4180  001160                     __ptext18:
  4181                           	opt stack 0
  4182  001160                     _Mouvement_X:
  4183                           	opt stack 11
  4184                           
  4185                           ;incstack = 0
  4186                           ;Mouvement_X@direction stored from wreg
  4187  001160  0102               	movlb	2	; () banked
  4188  001162  6F87               	movwf	Mouvement_X@direction& (0+255),b
  4189                           
  4190                           ;action.c: 1119: unsigned char i, i_min, i_max;
  4191                           ;action.c: 1120: unsigned char Option_Temps_S;
  4192                           ;action.c: 1130: consigne = 10;
  4193  001164  0E0A               	movlw	10
  4194  001166  0100               	movlb	0	; () banked
  4195  001168  6F98               	movwf	_consigne& (0+255),b	;volatile
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;action.c: 1137: Surveillance_Consommation_Moteur_1_Desactiver();
  4199  00116A  EC81  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;action.c: 1148: index = 0;
  4203  00116E  ECF0  F00E         	call	_u_Init_PWM	;wreg free
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;action.c: 1149: TMR2 = 0;
  4207  001172  6ACC               	clrf	4044,c	;volatile
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;action.c: 1150: TMR2IF = 0;
  4211  001174  929E               	bcf	3998,1,c	;volatile
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;action.c: 1155: if ((!(option & 0x02))
  4215                           ;action.c: 1158: ) {
  4216  001176  A3FF               	btfss	Mouvement_X@option& (0+255),1,b
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;action.c: 1160: Capteur_Capot_On();
  4220  001178  EC3E  F013         	call	_Capteur_Capot_On	;wreg free
  4221                           
  4222                           ;action.c: 1162: }
  4223                           ;action.c: 1170: moteur_indice = 1;
  4224  00117C  0E01               	movlw	1
  4225  00117E  0100               	movlb	0	; () banked
  4226  001180  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;action.c: 1171: Init_ADC_Single_Shoot_I_Moteur_1();
  4230  001182  ECBF  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;action.c: 1174: if (direction == 1) {
  4234  001186  0102               	movlb	2	; () banked
  4235  001188  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4236  00118A  E103               	bnz	l1042
  4237                           
  4238                           ; BSR set to: 2
  4239                           ;action.c: 1175: LATD5 = 0;LATD4 = 1;
  4240  00118C  9A8C               	bcf	3980,5,c	;volatile
  4241  00118E  888C               	bsf	3980,4,c	;volatile
  4242                           
  4243                           ;action.c: 1176: } else {
  4244  001190  D002               	goto	l8705
  4245  001192                     l1042:
  4246                           
  4247                           ; BSR set to: 2
  4248                           ;action.c: 1177: LATD4 = 0;LATD5 = 1;
  4249  001192  988C               	bcf	3980,4,c	;volatile
  4250  001194  8A8C               	bsf	3980,5,c	;volatile
  4251  001196                     l8705:
  4252                           
  4253                           ; BSR set to: 2
  4254                           ;action.c: 1178: }
  4255                           ;action.c: 1179: PDC0L = 1 << 2;
  4256  001196  0E04               	movlw	4
  4257  001198  6E79               	movwf	3961,c	;volatile
  4258                           
  4259                           ; BSR set to: 2
  4260                           ;action.c: 1180: PDC0H = 0;
  4261  00119A  6A78               	clrf	3960,c	;volatile
  4262                           
  4263                           ;action.c: 1181: OVDCOND = 0b00000001;
  4264  00119C  0E01               	movlw	1
  4265  00119E  6E6B               	movwf	3947,c	;volatile
  4266                           
  4267                           ; BSR set to: 2
  4268                           ;action.c: 1182: LATCbits.LATC0 = 1;
  4269  0011A0  808B               	bsf	3979,0,c	;volatile
  4270                           
  4271                           ;action.c: 1185: erreur = 1;
  4272  0011A2  0100               	movlb	0	; () banked
  4273  0011A4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4274  0011A6  6F84               	movwf	_erreur& (0+255),b	;volatile
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;action.c: 1186: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4278  0011A8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4279  0011AA  46E8               	rlncf	wreg,f,c
  4280  0011AC  0BFC               	andlw	252
  4281  0011AE  6E79               	movwf	3961,c	;volatile
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;action.c: 1187: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4285  0011B0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4286  0011B2  46E8               	rlncf	wreg,f,c
  4287  0011B4  0B03               	andlw	3
  4288  0011B6  6E78               	movwf	3960,c	;volatile
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;action.c: 1190: erreur_accumulator = 0;
  4292  0011B8  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4293  0011BA  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;action.c: 1193: Nouvelle_Valeur_ADC = 0;
  4297  0011BC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;action.c: 1203: PIE3bits.PTIE = 0;
  4301  0011BE  98A3               	bcf	4003,4,c	;volatile
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;action.c: 1204: PIE1bits.ADIE = 1;
  4305  0011C0  8C9D               	bsf	3997,6,c	;volatile
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;action.c: 1206: PEIE = 1;
  4309  0011C2  8CF2               	bsf	intcon,6,c	;volatile
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;action.c: 1207: GIE = 1;
  4313  0011C4  8EF2               	bsf	intcon,7,c	;volatile
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;action.c: 1208: TIMER2_On();
  4317  0011C6  ECA7  F013         	call	_TIMER2_On	;wreg free
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;action.c: 1209: ADIF = 0;
  4321  0011CA  9C9E               	bcf	3998,6,c	;volatile
  4322                           
  4323                           ;action.c: 1213: Init_Moteur_1();
  4324  0011CC  EC36  F013         	call	_Init_Moteur_1	;wreg free
  4325                           
  4326                           ;action.c: 1216: switch (type_consigne) {
  4327  0011D0  D05A               	goto	l8789
  4328  0011D2                     l8731:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;action.c: 1218: nb_Pion_Objectif = 2;
  4332  0011D2  0E02               	movlw	2
  4333  0011D4  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;action.c: 1220: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4337  0011D6  39FF               	swapf	Mouvement_X@option& (0+255),w,b
  4338  0011D8  0B0F               	andlw	15
  4339  0011DA  6FA8               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;action.c: 1224: if (option & 0x04) {
  4343  0011DC  A5FF               	btfss	Mouvement_X@option& (0+255),2,b
  4344  0011DE  D003               	goto	l8739
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;action.c: 1226: nb_s_fonctionnement_souhaiter *= 3;
  4348  0011E0  90D8               	bcf	status,0,c
  4349  0011E2  35A8               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4350  0011E4  27A8               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4351  0011E6                     l8739:
  4352                           
  4353                           ; BSR set to: 0
  4354                           ;action.c: 1228: }
  4355                           ;action.c: 1230: if (Option_Pailleux==1){
  4356  0011E6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4357  0011E8  D016               	goto	l8755
  4358  0011EA                     l8741:
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;action.c: 1241: EUSART1_Check_Buffer();
  4362  0011EA  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4363                           
  4364                           ;action.c: 1242: SPI_Check_Buffer();
  4365  0011EE  EC39  F011         	call	_SPI_Check_Buffer	;wreg free
  4366                           
  4367                           ;action.c: 1245: if (PORTBbits.RB4==1){
  4368  0011F2  A881               	btfss	3969,4,c	;volatile
  4369  0011F4  D005               	goto	l8749
  4370                           
  4371                           ;action.c: 1247: Coupe_Moteur();
  4372  0011F6  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  4373                           
  4374                           ;action.c: 1248: Alarme_On(7);
  4375  0011FA  0E07               	movlw	7
  4376  0011FC  EC4E  F013         	call	_Alarme_On
  4377  001200                     l8749:
  4378                           
  4379                           ;action.c: 1250: }
  4380                           ;action.c: 1261: } while(
  4381                           ;action.c: 1262: ((Etat == 2) | (Etat == 3))
  4382                           ;action.c: 1263: &&
  4383                           ;action.c: 1264: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4384                           ;action.c: 1265: )
  4385  001200  0E02               	movlw	2
  4386  001202  0100               	movlb	0	; () banked
  4387  001204  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4388  001206  E003               	bz	l8753
  4389                           
  4390                           ; BSR set to: 0
  4391  001208  0E03               	movlw	3
  4392  00120A  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4393  00120C  E10E               	bnz	l8761
  4394  00120E                     l8753:
  4395                           
  4396                           ; BSR set to: 0
  4397  00120E  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4398  001210  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4399  001212  E20B               	bc	l8761
  4400  001214  D7EA               	goto	l8741
  4401  001216                     l8755:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;action.c: 1275: EUSART1_Check_Buffer();
  4405  001216  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4406                           
  4407                           ;action.c: 1276: SPI_Check_Buffer();
  4408  00121A  EC39  F011         	call	_SPI_Check_Buffer	;wreg free
  4409                           
  4410                           ;action.c: 1279: } while((PORTBbits.RB4==0) && (nb_s_fonctionnement < nb_s_fonctionnemen
      +                          t_souhaiter));
  4411  00121E  B881               	btfsc	3969,4,c	;volatile
  4412  001220  D004               	goto	l8761
  4413  001222  0100               	movlb	0	; () banked
  4414  001224  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4415  001226  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4416  001228  E3F6               	bnc	l8755
  4417  00122A                     l8761:
  4418                           
  4419                           ;action.c: 1280: }
  4420                           ;action.c: 1284: Stop_Moteur_1();
  4421  00122A  ECB9  F013         	call	_Stop_Moteur_1	;wreg free
  4422                           
  4423                           ;action.c: 1285: Capteur_Capot_Off();
  4424  00122E  ECBB  F013         	call	_Capteur_Capot_Off	;wreg free
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;action.c: 1288: if ((Etat == 2) | (Etat == 3)) {
  4428  001232  0E02               	movlw	2
  4429  001234  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4430  001236  E003               	bz	l8767
  4431                           
  4432                           ; BSR set to: 0
  4433  001238  0E03               	movlw	3
  4434  00123A  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4435  00123C  E128               	bnz	l1063
  4436  00123E                     l8767:
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;action.c: 1290: Etat_Update(0);
  4440  00123E  0E00               	movlw	0
  4441  001240  EC3E  F012         	call	_Etat_Update
  4442                           
  4443                           ;action.c: 1291: P4_busy = 0;
  4444  001244  0100               	movlb	0	; () banked
  4445  001246  6BAC               	clrf	_P4_busy& (0+255),b
  4446  001248  D022               	goto	l1063
  4447  00124A                     l1064:
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;action.c: 1308: nb_Pion_Objectif = option;
  4451  00124A  C0FF  F0A0         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4452                           
  4453                           ;action.c: 1309: nb_Pion = 0;
  4454  00124E  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;action.c: 1317: Detection_Pion_Init();
  4458  001250  ECE2  F012         	call	_Detection_Pion_Init	;wreg free
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;action.c: 1318: Detection_Pion_On();
  4462  001254  ECA1  F011         	call	_Detection_Pion_On	;wreg free
  4463  001258                     l8775:
  4464                           
  4465                           ;action.c: 1341: Check_List_Moteur_1();
  4466  001258  EC23  F00D         	call	_Check_List_Moteur_1	;wreg free
  4467                           
  4468                           ;action.c: 1342: } while (
  4469                           ;action.c: 1343: ((direction == 1) && (Etat == 2))
  4470                           ;action.c: 1344: |
  4471                           ;action.c: 1345: ((direction == 0) && (Etat == 3))
  4472                           ;action.c: 1347: );
  4473  00125C  0102               	movlb	2	; () banked
  4474  00125E  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4475  001260  E104               	bnz	l8781
  4476                           
  4477                           ; BSR set to: 2
  4478  001262  0E02               	movlw	2
  4479  001264  0100               	movlb	0	; () banked
  4480  001266  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4481  001268  E0F7               	bz	l8775
  4482  00126A                     l8781:
  4483  00126A  0102               	movlb	2	; () banked
  4484  00126C  5187               	movf	Mouvement_X@direction& (0+255),w,b
  4485  00126E  E104               	bnz	l8785
  4486                           
  4487                           ; BSR set to: 2
  4488  001270  0E03               	movlw	3
  4489  001272  0100               	movlb	0	; () banked
  4490  001274  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4491  001276  E0F0               	bz	l8775
  4492  001278                     l8785:
  4493                           
  4494                           ;action.c: 1350: Detection_Pion_Off();
  4495  001278  EC97  F013         	call	_Detection_Pion_Off	;wreg free
  4496                           
  4497                           ;action.c: 1358: Stop_Moteur_1();
  4498  00127C  ECB9  F013         	call	_Stop_Moteur_1	;wreg free
  4499                           
  4500                           ;action.c: 1359: Capteur_Capot_Off();
  4501  001280  ECBB  F013         	call	_Capteur_Capot_Off	;wreg free
  4502                           
  4503                           ;action.c: 1361: break;
  4504  001284  D004               	goto	l1063
  4505  001286                     l8789:
  4506                           
  4507                           ; BSR set to: 0
  4508  001286  51FE               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4509                           
  4510                           ; Switch size 1, requested type "speed"
  4511                           ; Number of cases is 2, Range of values is 0 to 1
  4512                           ; switch strategies available:
  4513                           ; Name         Instructions Cycles
  4514                           ; simple_byte            7     4 (average)
  4515                           ;	Chosen strategy is simple_byte
  4516  001288  E0E0               	bz	l1064
  4517  00128A  0A01               	xorlw	1	; case 1
  4518  00128C  E0A2               	bz	l8731
  4519  00128E                     l1063:
  4520                           
  4521                           ; BSR set to: 0
  4522                           ;action.c: 1408: PIE3bits.PTIE = 0;
  4523  00128E  98A3               	bcf	4003,4,c	;volatile
  4524                           
  4525                           ;action.c: 1409: PIE1bits.ADIE = 0;
  4526  001290  9C9D               	bcf	3997,6,c	;volatile
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;action.c: 1411: Surveillance_Consommation_Moteur_1_Desactiver();
  4530  001292  EC81  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;action.c: 1413: Coupe_Moteur();
  4534  001296  EFEC  F012         	goto	_Coupe_Moteur	;wreg free
  4535  00129A                     __end_of_Mouvement_X:
  4536                           	opt stack 0
  4537                           tblptru	equ	0xFF8
  4538                           prodl	equ	0xFF3
  4539                           intcon	equ	0xFF2
  4540                           intcon2	equ	0xFF1
  4541                           intcon3	equ	0xFF0
  4542                           postinc0	equ	0xFEE
  4543                           wreg	equ	0xFE8
  4544                           postdec1	equ	0xFE5
  4545                           fsr1h	equ	0xFE2
  4546                           fsr1l	equ	0xFE1
  4547                           indf2	equ	0xFDF
  4548                           fsr2h	equ	0xFDA
  4549                           fsr2l	equ	0xFD9
  4550                           status	equ	0xFD8
  4551                           
  4552 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4553 ;; Defined at:
  4554 ;;		line 860 in file "interrupt.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		wreg, status,2
  4563 ;; Tracked objects:
  4564 ;;		On entry : 3F/0
  4565 ;;		On exit  : 3F/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4568 ;;      Params:         0       0       0       0
  4569 ;;      Locals:         0       0       0       0
  4570 ;;      Temps:          0       0       0       0
  4571 ;;      Totals:         0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; Hardware stack levels required when called:   10
  4575 ;; This function calls:
  4576 ;;		Nothing
  4577 ;; This function is called by:
  4578 ;;		_Mouvement_X
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           	psect	text19
  4583  002702                     __ptext19:
  4584                           	opt stack 0
  4585  002702                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4586                           	opt stack 18
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;interrupt.c: 862: if (Surveillance_Consommation_Moteur_1 != 0) {
  4590                           
  4591                           ;incstack = 0
  4592  002702  518B               	movf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
  4593  002704  B4D8               	btfsc	status,2,c
  4594  002706  0012               	return	
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;interrupt.c: 863: Surveillance_Consommation_Moteur_1 = 0;
  4598  002708  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  4599                           
  4600                           ;interrupt.c: 864: INTCON3bits.INT1IE = 0;
  4601  00270A  96F0               	bcf	intcon3,3,c	;volatile
  4602                           
  4603                           ; BSR set to: 0
  4604  00270C  0012               	return		;funcret
  4605  00270E                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           prodl	equ	0xFF3
  4609                           intcon	equ	0xFF2
  4610                           intcon2	equ	0xFF1
  4611                           intcon3	equ	0xFF0
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postdec1	equ	0xFE5
  4615                           fsr1h	equ	0xFE2
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _Stop_Moteur_1 *****************
  4623 ;; Defined at:
  4624 ;;		line 104 in file "action.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;		None
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;		None
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 3F/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4638 ;;      Params:         0       0       0       0
  4639 ;;      Locals:         0       0       0       0
  4640 ;;      Temps:          0       0       0       0
  4641 ;;      Totals:         0       0       0       0
  4642 ;;Total ram usage:        0 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:   11
  4645 ;; This function calls:
  4646 ;;		_TIMER0_Off
  4647 ;; This function is called by:
  4648 ;;		_Mouvement_X
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text20
  4653  002772                     __ptext20:
  4654                           	opt stack 0
  4655  002772                     _Stop_Moteur_1:
  4656                           	opt stack 17
  4657                           
  4658                           ;action.c: 106: TIMER0_Off();
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;incstack = 0
  4662  002772  EF87  F013         	goto	_TIMER0_Off	;wreg free
  4663  002776                     __end_of_Stop_Moteur_1:
  4664                           	opt stack 0
  4665                           tblptru	equ	0xFF8
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           intcon2	equ	0xFF1
  4669                           intcon3	equ	0xFF0
  4670                           postinc0	equ	0xFEE
  4671                           wreg	equ	0xFE8
  4672                           postdec1	equ	0xFE5
  4673                           fsr1h	equ	0xFE2
  4674                           fsr1l	equ	0xFE1
  4675                           indf2	equ	0xFDF
  4676                           fsr2h	equ	0xFDA
  4677                           fsr2l	equ	0xFD9
  4678                           status	equ	0xFD8
  4679                           
  4680 ;; *************** function _Init_Moteur_1 *****************
  4681 ;; Defined at:
  4682 ;;		line 84 in file "action.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;		None
  4685 ;; Auto vars:     Size  Location     Type
  4686 ;;		None
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  1    wreg      void 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, cstack
  4691 ;; Tracked objects:
  4692 ;;		On entry : 3F/0
  4693 ;;		On exit  : 3F/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4696 ;;      Params:         0       0       0       0
  4697 ;;      Locals:         0       0       0       0
  4698 ;;      Temps:          0       0       0       0
  4699 ;;      Totals:         0       0       0       0
  4700 ;;Total ram usage:        0 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:   11
  4703 ;; This function calls:
  4704 ;;		_TIMER0_On
  4705 ;; This function is called by:
  4706 ;;		_Mouvement_X
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text21
  4711  00266C                     __ptext21:
  4712                           	opt stack 0
  4713  00266C                     _Init_Moteur_1:
  4714                           	opt stack 17
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;action.c: 91: Capteur_Capot_Compteur_Temps_S = 0;
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;incstack = 0
  4721  00266C  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4722                           
  4723                           ;action.c: 94: nb_s_fonctionnement = 0;
  4724  00266E  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  4725                           
  4726                           ;action.c: 95: nb_Pion = 0;
  4727  002670  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4728                           
  4729                           ;action.c: 96: nb_100ms_Timer_5 = 0;
  4730  002672  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;action.c: 98: TIMER0_On();
  4734  002674  ECA1  F012         	call	_TIMER0_On	;wreg free
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;action.c: 101: Compteur_IRQ_I_Moteur_1 = 0;
  4738  002678  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  4739                           
  4740                           ; BSR set to: 0
  4741  00267A  0012               	return		;funcret
  4742  00267C                     __end_of_Init_Moteur_1:
  4743                           	opt stack 0
  4744                           tblptru	equ	0xFF8
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           intcon2	equ	0xFF1
  4748                           intcon3	equ	0xFF0
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           postdec1	equ	0xFE5
  4752                           fsr1h	equ	0xFE2
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  4760 ;; Defined at:
  4761 ;;		line 110 in file "adc.c"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, status,2
  4770 ;; Tracked objects:
  4771 ;;		On entry : 3F/0
  4772 ;;		On exit  : 3F/0
  4773 ;;		Unchanged: 3F/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4775 ;;      Params:         0       0       0       0
  4776 ;;      Locals:         0       0       0       0
  4777 ;;      Temps:          0       0       0       0
  4778 ;;      Totals:         0       0       0       0
  4779 ;;Total ram usage:        0 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:   10
  4782 ;; This function calls:
  4783 ;;		Nothing
  4784 ;; This function is called by:
  4785 ;;		_Mouvement_X
  4786 ;; This function uses a non-reentrant model
  4787 ;;
  4788                           
  4789                           	psect	text22
  4790  001D7E                     __ptext22:
  4791                           	opt stack 0
  4792  001D7E                     _Init_ADC_Single_Shoot_I_Moteur_1:
  4793                           	opt stack 18
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;incstack = 0
  4800  001D7E  9AC2               	bcf	4034,5,c	;volatile
  4801                           
  4802                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  4803  001D80  98C2               	bcf	4034,4,c	;volatile
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  4807  001D82  0EF3               	movlw	-13
  4808  001D84  16C2               	andwf	4034,f,c	;volatile
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;adc.c: 117: ADCON0bits.ADON = 0;
  4812  001D86  90C2               	bcf	4034,0,c	;volatile
  4813                           
  4814                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  4815  001D88  0E3F               	movlw	-193
  4816  001D8A  16C1               	andwf	4033,f,c	;volatile
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  4820  001D8C  98C1               	bcf	4033,4,c	;volatile
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;adc.c: 130: ADCON1 = 0b00000000;
  4824  001D8E  6AC1               	clrf	4033,c	;volatile
  4825                           
  4826                           ; BSR set to: 0
  4827                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  4828  001D90  9EC0               	bcf	4032,7,c	;volatile
  4829                           
  4830                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  4831  001D92  50C0               	movf	4032,w,c	;volatile
  4832  001D94  0B87               	andlw	-121
  4833  001D96  0910               	iorlw	16
  4834  001D98  6EC0               	movwf	4032,c	;volatile
  4835                           
  4836                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  4837  001D9A  50C0               	movf	4032,w,c	;volatile
  4838  001D9C  0BF8               	andlw	-8
  4839  001D9E  0904               	iorlw	4
  4840  001DA0  6EC0               	movwf	4032,c	;volatile
  4841                           
  4842                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  4843  001DA2  50C0               	movf	4032,w,c	;volatile
  4844  001DA4  0BF8               	andlw	-8
  4845  001DA6  0901               	iorlw	1
  4846  001DA8  6EC0               	movwf	4032,c	;volatile
  4847                           
  4848                           ;adc.c: 137: ADCON2 = 0b00010100;
  4849  001DAA  0E14               	movlw	20
  4850  001DAC  6EC0               	movwf	4032,c	;volatile
  4851                           
  4852                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  4853  001DAE  50C0               	movf	4032,w,c	;volatile
  4854  001DB0  0BF8               	andlw	-8
  4855  001DB2  0901               	iorlw	1
  4856  001DB4  6EC0               	movwf	4032,c	;volatile
  4857                           
  4858                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  4859  001DB6  0E3F               	movlw	-193
  4860  001DB8  169A               	andwf	3994,f,c	;volatile
  4861                           
  4862                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  4863  001DBA  509A               	movf	3994,w,c	;volatile
  4864  001DBC  0BE0               	andlw	-32
  4865  001DBE  0910               	iorlw	16
  4866  001DC0  6E9A               	movwf	3994,c	;volatile
  4867                           
  4868                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  4869  001DC2  0EE0               	movlw	-32
  4870  001DC4  169A               	andwf	3994,f,c	;volatile
  4871                           
  4872                           ;adc.c: 153: ADCON3 = 0b00010000;
  4873  001DC6  0E10               	movlw	16
  4874  001DC8  6E9A               	movwf	3994,c	;volatile
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;adc.c: 154: ADCON3 = 0x00;
  4878  001DCA  6A9A               	clrf	3994,c	;volatile
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;adc.c: 159: ADCHS = 0b00000000;
  4882  001DCC  6A99               	clrf	3993,c	;volatile
  4883                           
  4884                           ;adc.c: 160: ANSEL0 = 0b00000011;
  4885  001DCE  0E03               	movlw	3
  4886  001DD0  6EB8               	movwf	4024,c	;volatile
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;adc.c: 162: ANSEL1 = 0b00000000;
  4890  001DD2  6AB9               	clrf	4025,c	;volatile
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;adc.c: 171: PIE1bits.ADIE = 1;
  4894  001DD4  8C9D               	bsf	3997,6,c	;volatile
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;adc.c: 172: ADIF=0;
  4898  001DD6  9C9E               	bcf	3998,6,c	;volatile
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;adc.c: 173: IPR1bits.ADIP = 0;
  4902  001DD8  9C9F               	bcf	3999,6,c	;volatile
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;adc.c: 178: ADON = 1;
  4906  001DDA  80C2               	bsf	4034,0,c	;volatile
  4907                           
  4908                           ; BSR set to: 0
  4909                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  4910  001DDC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4911                           
  4912                           ; BSR set to: 0
  4913  001DDE  0012               	return		;funcret
  4914  001DE0                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  4915                           	opt stack 0
  4916                           tblptru	equ	0xFF8
  4917                           prodl	equ	0xFF3
  4918                           intcon	equ	0xFF2
  4919                           intcon2	equ	0xFF1
  4920                           intcon3	equ	0xFF0
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           postdec1	equ	0xFE5
  4924                           fsr1h	equ	0xFE2
  4925                           fsr1l	equ	0xFE1
  4926                           indf2	equ	0xFDF
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _Detection_Pion_On *****************
  4932 ;; Defined at:
  4933 ;;		line 29 in file "pion.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;		None
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;                  1    wreg      void 
  4940 ;; Registers used:
  4941 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 3F/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4947 ;;      Params:         0       0       0       0
  4948 ;;      Locals:         0       0       0       0
  4949 ;;      Temps:          0       0       0       0
  4950 ;;      Totals:         0       0       0       0
  4951 ;;Total ram usage:        0 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:   12
  4954 ;; This function calls:
  4955 ;;		_IRQ_PION_Metal_Apparait
  4956 ;; This function is called by:
  4957 ;;		_Mouvement_X
  4958 ;; This function uses a non-reentrant model
  4959 ;;
  4960                           
  4961                           	psect	text23
  4962  002342                     __ptext23:
  4963                           	opt stack 0
  4964  002342                     _Detection_Pion_On:
  4965                           	opt stack 16
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  4969                           
  4970                           ; BSR set to: 0
  4971                           ;incstack = 0
  4972  002342  92A4               	bcf	4004,1,c	;volatile
  4973                           
  4974                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  4975  002344  82A3               	bsf	4003,1,c	;volatile
  4976                           
  4977                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  4978  002346  92A4               	bcf	4004,1,c	;volatile
  4979                           
  4980                           ;pion.c: 64: Detecteur_Pion = 1;
  4981  002348  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  4982                           
  4983                           ;pion.c: 68: if (Option_Pailleux != 1) {
  4984  00234A  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4985                           
  4986                           ; BSR set to: 0
  4987                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  4988  00234C  B480               	btfsc	3968,2,c	;volatile
  4989  00234E  0012               	return	
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  4993  002350  0E1F               	movlw	31
  4994  002352  644E               	cpfsgt	_nb_100ms_platine_backup,c
  4995  002354  D003               	goto	l8679
  4996                           
  4997                           ; BSR set to: 0
  4998                           ;pion.c: 91: nb_100ms_platine = 255;
  4999  002356  69A4               	setf	_nb_100ms_platine& (0+255),b
  5000                           
  5001                           ;pion.c: 92: }else{
  5002  002358  EF2F  F012         	goto	_IRQ_PION_Metal_Apparait
  5003  00235C                     l8679:
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  5007  00235C  504E               	movf	_nb_100ms_platine_backup,w,c
  5008  00235E  0D08               	mullw	8
  5009  002360  CFF3 F0A4          	movff	prodl,_nb_100ms_platine
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;pion.c: 94: }
  5013                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  5014  002364  EF2F  F012         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  5015  002368                     __end_of_Detection_Pion_On:
  5016                           	opt stack 0
  5017                           tblptru	equ	0xFF8
  5018                           prodl	equ	0xFF3
  5019                           intcon	equ	0xFF2
  5020                           intcon2	equ	0xFF1
  5021                           intcon3	equ	0xFF0
  5022                           postinc0	equ	0xFEE
  5023                           wreg	equ	0xFE8
  5024                           postdec1	equ	0xFE5
  5025                           fsr1h	equ	0xFE2
  5026                           fsr1l	equ	0xFE1
  5027                           indf2	equ	0xFDF
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function _Detection_Pion_Init *****************
  5033 ;; Defined at:
  5034 ;;		line 13 in file "pion.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2
  5043 ;; Tracked objects:
  5044 ;;		On entry : 3F/0
  5045 ;;		On exit  : 3F/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5048 ;;      Params:         0       0       0       0
  5049 ;;      Locals:         0       0       0       0
  5050 ;;      Temps:          0       0       0       0
  5051 ;;      Totals:         0       0       0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:   10
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_Init_Variable
  5059 ;;		_Mouvement_X
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text24
  5064  0025C4                     __ptext24:
  5065                           	opt stack 0
  5066  0025C4                     _Detection_Pion_Init:
  5067                           	opt stack 19
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;pion.c: 15: if (PORTAbits.RA2 == 0) {
  5071                           
  5072                           ;incstack = 0
  5073  0025C4  B480               	btfsc	3968,2,c	;volatile
  5074  0025C6  D004               	goto	l8447
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  5078  0025C8  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;pion.c: 17: Mouvement_Startup = 1;
  5082  0025CA  0E01               	movlw	1
  5083  0025CC  6E4D               	movwf	_Mouvement_Startup,c
  5084                           
  5085                           ;pion.c: 18: } else {
  5086  0025CE  0C01               	retlw	1
  5087  0025D0                     l8447:
  5088                           
  5089                           ; BSR set to: 0
  5090                           ;pion.c: 19: Surveillance_Capteur_Pion = 1;
  5091  0025D0  0E01               	movlw	1
  5092  0025D2  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;pion.c: 20: Mouvement_Startup = 0;
  5096  0025D4  6A4D               	clrf	_Mouvement_Startup,c
  5097                           
  5098                           ; BSR set to: 0
  5099  0025D6  0012               	return		;funcret
  5100  0025D8                     __end_of_Detection_Pion_Init:
  5101                           	opt stack 0
  5102                           tblptru	equ	0xFF8
  5103                           prodl	equ	0xFF3
  5104                           intcon	equ	0xFF2
  5105                           intcon2	equ	0xFF1
  5106                           intcon3	equ	0xFF0
  5107                           postinc0	equ	0xFEE
  5108                           wreg	equ	0xFE8
  5109                           postdec1	equ	0xFE5
  5110                           fsr1h	equ	0xFE2
  5111                           fsr1l	equ	0xFE1
  5112                           indf2	equ	0xFDF
  5113                           fsr2h	equ	0xFDA
  5114                           fsr2l	equ	0xFD9
  5115                           status	equ	0xFD8
  5116                           
  5117 ;; *************** function _Check_List_Moteur_1 *****************
  5118 ;; Defined at:
  5119 ;;		line 111 in file "action.c"
  5120 ;; Parameters:    Size  Location     Type
  5121 ;;		None
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;		None
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      void 
  5126 ;; Registers used:
  5127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5133 ;;      Params:         0       0       0       0
  5134 ;;      Locals:         0       0       0       0
  5135 ;;      Temps:          0       0       0       0
  5136 ;;      Totals:         0       0       0       0
  5137 ;;Total ram usage:        0 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:   17
  5140 ;; This function calls:
  5141 ;;		_Alarme_On
  5142 ;;		_Coupe_Moteur
  5143 ;;		_EUSART1_Check_Buffer
  5144 ;;		_SPI_Check_Buffer
  5145 ;;		___ftdiv
  5146 ;;		___ftmul
  5147 ;;		___fttol
  5148 ;;		___lbtoft
  5149 ;; This function is called by:
  5150 ;;		_Mouvement_X
  5151 ;; This function uses a non-reentrant model
  5152 ;;
  5153                           
  5154                           	psect	text25
  5155  001A46                     __ptext25:
  5156                           	opt stack 0
  5157  001A46                     _Check_List_Moteur_1:
  5158                           	opt stack 11
  5159                           
  5160                           ;action.c: 115: if (PORTBbits.RB4==0){
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;incstack = 0
  5164  001A46  B881               	btfsc	3969,4,c	;volatile
  5165  001A48  D046               	goto	l8611
  5166                           
  5167                           ;action.c: 121: if(PORTCbits.RC4 == 0){
  5168  001A4A  A882               	btfss	3970,4,c	;volatile
  5169                           
  5170                           ;action.c: 122: Compteur_IRQ_I_Moteur_1 = 0;
  5171  001A4C  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  5172                           
  5173                           ;action.c: 123: }
  5174                           ;action.c: 126: EUSART1_Check_Buffer();
  5175  001A4E  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  5176                           
  5177                           ;action.c: 127: SPI_Check_Buffer();
  5178  001A52  EC39  F011         	call	_SPI_Check_Buffer	;wreg free
  5179                           
  5180                           ;action.c: 129: if (nb_s_fonctionnement > nb_s_patinage) {
  5181  001A56  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5182  001A58  0100               	movlb	0	; () banked
  5183  001A5A  5DA7               	subwf	_nb_s_patinage& (0+255),w,b
  5184  001A5C  E234               	bc	l8607
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;action.c: 143: if ((Mouvement_Startup == 1)&& (Option_Multitas==1)){
  5188  001A5E  044D               	decf	_Mouvement_Startup,w,c
  5189  001A60  E12F               	bnz	l8605
  5190                           
  5191                           ; BSR set to: 0
  5192  001A62  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  5193  001A64  D02D               	goto	l8605
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;action.c: 146: if (nb_s_fonctionnement > (unsigned char) (1.1 * 8 * nb_100ms_platine_ba
      +                          ckup / 10.0)){
  5197  001A66  6A2C               	clrf	___ftdiv@f2,c
  5198  001A68  0E20               	movlw	32
  5199  001A6A  6E2D               	movwf	___ftdiv@f2+1,c
  5200  001A6C  0E41               	movlw	65
  5201  001A6E  6E2E               	movwf	___ftdiv@f2+2,c
  5202  001A70  0ECD               	movlw	205
  5203  001A72  6E1E               	movwf	___ftmul@f2,c
  5204  001A74  0E0C               	movlw	12
  5205  001A76  6E1F               	movwf	___ftmul@f2+1,c
  5206  001A78  0E41               	movlw	65
  5207  001A7A  6E20               	movwf	___ftmul@f2+2,c
  5208  001A7C  504E               	movf	_nb_100ms_platine_backup,w,c
  5209  001A7E  ECEC  F011         	call	___lbtoft
  5210  001A82  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  5211  001A86  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  5212  001A8A  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  5213  001A8E  ECD4  F009         	call	___ftmul	;wreg free
  5214  001A92  C01B  F029         	movff	?___ftmul,___ftdiv@f1
  5215  001A96  C01C  F02A         	movff	?___ftmul+1,___ftdiv@f1+1
  5216  001A9A  C01D  F02B         	movff	?___ftmul+2,___ftdiv@f1+2
  5217  001A9E  EC64  F00B         	call	___ftdiv	;wreg free
  5218  001AA2  C029  F038         	movff	?___ftdiv,___fttol@f1
  5219  001AA6  C02A  F039         	movff	?___ftdiv+1,___fttol@f1+1
  5220  001AAA  C02B  F03A         	movff	?___ftdiv+2,___fttol@f1+2
  5221  001AAE  EC06  F00B         	call	___fttol	;wreg free
  5222  001AB2  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5223  001AB4  5C38               	subwf	?___fttol,w,c
  5224  001AB6  E207               	bc	l8607
  5225                           
  5226                           ; BSR set to: 0
  5227                           ;action.c: 147: Alarme_On(11);
  5228  001AB8  0E0B               	movlw	11
  5229  001ABA  EC4E  F013         	call	_Alarme_On
  5230  001ABE  D003               	goto	l8607
  5231  001AC0                     l8605:
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;action.c: 151: Alarme_On(3);
  5235  001AC0  0E03               	movlw	3
  5236  001AC2  EC4E  F013         	call	_Alarme_On
  5237  001AC6                     l8607:
  5238                           
  5239                           ;action.c: 152: }
  5240                           ;action.c: 153: }
  5241                           ;action.c: 156: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5242  001AC6  0EB4               	movlw	180
  5243  001AC8  0100               	movlb	0	; () banked
  5244  001ACA  659E               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5245  001ACC  0CB4               	retlw	180
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;action.c: 157: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5249  001ACE  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5250                           
  5251                           ;action.c: 158: Capteur_Capot_Compteur_Temps_S = 0;
  5252  001AD2  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5253  001AD4  0012               	return	
  5254  001AD6                     l8611:
  5255                           
  5256                           ;action.c: 165: Coupe_Moteur();
  5257  001AD6  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  5258                           
  5259                           ;action.c: 166: Alarme_On(7);
  5260  001ADA  0E07               	movlw	7
  5261  001ADC  EF4E  F013         	goto	_Alarme_On
  5262  001AE0                     __end_of_Check_List_Moteur_1:
  5263                           	opt stack 0
  5264                           tblptru	equ	0xFF8
  5265                           prodl	equ	0xFF3
  5266                           intcon	equ	0xFF2
  5267                           intcon2	equ	0xFF1
  5268                           intcon3	equ	0xFF0
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           postdec1	equ	0xFE5
  5272                           fsr1h	equ	0xFE2
  5273                           fsr1l	equ	0xFE1
  5274                           indf2	equ	0xFDF
  5275                           fsr2h	equ	0xFDA
  5276                           fsr2l	equ	0xFD9
  5277                           status	equ	0xFD8
  5278                           
  5279 ;; *************** function ___lbtoft *****************
  5280 ;; Defined at:
  5281 ;;		line 27 in file "/opt/microchip/xc8/v1.42/sources/common/lbtoft.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  c               1    wreg     unsigned char 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  c               1   25[COMRAM] unsigned char 
  5286 ;; Return value:  Size  Location     Type
  5287 ;;                  3   22[COMRAM] float 
  5288 ;; Registers used:
  5289 ;;		wreg, status,2, status,0, cstack
  5290 ;; Tracked objects:
  5291 ;;		On entry : 3F/0
  5292 ;;		On exit  : 0/0
  5293 ;;		Unchanged: 0/0
  5294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5295 ;;      Params:         3       0       0       0
  5296 ;;      Locals:         1       0       0       0
  5297 ;;      Temps:          0       0       0       0
  5298 ;;      Totals:         4       0       0       0
  5299 ;;Total ram usage:        4 bytes
  5300 ;; Hardware stack levels used:    1
  5301 ;; Hardware stack levels required when called:   11
  5302 ;; This function calls:
  5303 ;;		___ftpack
  5304 ;; This function is called by:
  5305 ;;		_Check_List_Moteur_1
  5306 ;; This function uses a non-reentrant model
  5307 ;;
  5308                           
  5309                           	psect	text26
  5310  0023D8                     __ptext26:
  5311                           	opt stack 0
  5312  0023D8                     ___lbtoft:
  5313                           	opt stack 16
  5314                           
  5315                           ;incstack = 0
  5316                           ;___lbtoft@c stored from wreg
  5317  0023D8  6E1A               	movwf	___lbtoft@c,c
  5318  0023DA  501A               	movf	___lbtoft@c,w,c
  5319  0023DC  6E0F               	movwf	___ftpack@arg,c
  5320  0023DE  6A10               	clrf	___ftpack@arg+1,c
  5321  0023E0  6A11               	clrf	___ftpack@arg+2,c
  5322  0023E2  0E8E               	movlw	142
  5323  0023E4  6E12               	movwf	___ftpack@exp,c
  5324  0023E6  0E00               	movlw	0
  5325  0023E8  6E13               	movwf	___ftpack@sign,c
  5326  0023EA  EC70  F00D         	call	___ftpack	;wreg free
  5327  0023EE  C00F  F017         	movff	?___ftpack,?___lbtoft
  5328  0023F2  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  5329  0023F6  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  5330  0023FA  0012               	return		;funcret
  5331  0023FC                     __end_of___lbtoft:
  5332                           	opt stack 0
  5333                           tblptru	equ	0xFF8
  5334                           prodl	equ	0xFF3
  5335                           intcon	equ	0xFF2
  5336                           intcon2	equ	0xFF1
  5337                           intcon3	equ	0xFF0
  5338                           postinc0	equ	0xFEE
  5339                           wreg	equ	0xFE8
  5340                           postdec1	equ	0xFE5
  5341                           fsr1h	equ	0xFE2
  5342                           fsr1l	equ	0xFE1
  5343                           indf2	equ	0xFDF
  5344                           fsr2h	equ	0xFDA
  5345                           fsr2l	equ	0xFD9
  5346                           status	equ	0xFD8
  5347                           
  5348 ;; *************** function ___fttol *****************
  5349 ;; Defined at:
  5350 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
  5351 ;; Parameters:    Size  Location     Type
  5352 ;;  f1              3   55[COMRAM] float 
  5353 ;; Auto vars:     Size  Location     Type
  5354 ;;  lval            4    1[BANK0 ] unsigned long 
  5355 ;;  exp1            1    5[BANK0 ] unsigned char 
  5356 ;;  sign1           1    0[BANK0 ] unsigned char 
  5357 ;; Return value:  Size  Location     Type
  5358 ;;                  4   55[COMRAM] long 
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 3F/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5366 ;;      Params:         4       0       0       0
  5367 ;;      Locals:         0       6       0       0
  5368 ;;      Temps:          5       0       0       0
  5369 ;;      Totals:         9       6       0       0
  5370 ;;Total ram usage:       15 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:   10
  5373 ;; This function calls:
  5374 ;;		Nothing
  5375 ;; This function is called by:
  5376 ;;		_Check_List_Moteur_1
  5377 ;; This function uses a non-reentrant model
  5378 ;;
  5379                           
  5380                           	psect	text27
  5381  00160C                     __ptext27:
  5382                           	opt stack 0
  5383  00160C                     ___fttol:
  5384                           	opt stack 17
  5385                           
  5386                           ;incstack = 0
  5387  00160C  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  5388  001610  6A3D               	clrf	(??___fttol+1)& (0+255),c
  5389  001612  6A3E               	clrf	(??___fttol+2)& (0+255),c
  5390  001614  3439               	rlcf	___fttol@f1+1,w,c
  5391  001616  363C               	rlcf	??___fttol& (0+255),f,c
  5392  001618  E301               	bnc	u6621
  5393  00161A  803D               	bsf	(??___fttol+1)& (0+255),0,c
  5394  00161C                     u6621:
  5395  00161C  503C               	movf	??___fttol,w,c
  5396  00161E  0100               	movlb	0	; () banked
  5397  001620  6FF2               	movwf	___fttol@exp1& (0+255),b
  5398  001622  51F2               	movf	___fttol@exp1& (0+255),w,b
  5399  001624  E105               	bnz	l8375
  5400  001626                     l8373:
  5401                           
  5402                           ; BSR set to: 0
  5403  001626  6A38               	clrf	?___fttol,c
  5404  001628  6A39               	clrf	?___fttol+1,c
  5405  00162A  6A3A               	clrf	?___fttol+2,c
  5406  00162C  6A3B               	clrf	?___fttol+3,c
  5407  00162E  0012               	return	
  5408  001630                     l8375:
  5409                           
  5410                           ; BSR set to: 0
  5411  001630  0E17               	movlw	23
  5412  001632  6E3C               	movwf	??___fttol& (0+255),c
  5413  001634  C038  F03D         	movff	___fttol@f1,??___fttol+1
  5414  001638  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  5415  00163C  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  5416  001640  283C               	incf	??___fttol,w,c
  5417  001642  6E40               	movwf	(??___fttol+4)& (0+255),c
  5418  001644  D004               	goto	u6640
  5419  001646                     u6645:
  5420  001646  90D8               	bcf	status,0,c
  5421  001648  323F               	rrcf	??___fttol+3,f,c
  5422  00164A  323E               	rrcf	??___fttol+2,f,c
  5423  00164C  323D               	rrcf	??___fttol+1,f,c
  5424  00164E                     u6640:
  5425  00164E  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  5426  001650  D7FA               	goto	u6645
  5427  001652  503D               	movf	??___fttol+1,w,c
  5428  001654  0100               	movlb	0	; () banked
  5429  001656  6FED               	movwf	___fttol@sign1& (0+255),b
  5430                           
  5431                           ; BSR set to: 0
  5432  001658  8E39               	bsf	___fttol@f1+1,7,c
  5433                           
  5434                           ; BSR set to: 0
  5435  00165A  6A3A               	clrf	___fttol@f1+2,c
  5436                           
  5437                           ; BSR set to: 0
  5438  00165C  5038               	movf	___fttol@f1,w,c
  5439  00165E  6FEE               	movwf	___fttol@lval& (0+255),b
  5440  001660  5039               	movf	___fttol@f1+1,w,c
  5441  001662  6FEF               	movwf	(___fttol@lval+1)& (0+255),b
  5442  001664  503A               	movf	___fttol@f1+2,w,c
  5443  001666  6FF0               	movwf	(___fttol@lval+2)& (0+255),b
  5444  001668  6BF1               	clrf	(___fttol@lval+3)& (0+255),b
  5445                           
  5446                           ; BSR set to: 0
  5447  00166A  0E8E               	movlw	142
  5448  00166C  5FF2               	subwf	___fttol@exp1& (0+255),f,b
  5449                           
  5450                           ; BSR set to: 0
  5451  00166E  AFF2               	btfss	___fttol@exp1& (0+255),7,b
  5452  001670  D00C               	goto	l8395
  5453                           
  5454                           ; BSR set to: 0
  5455  001672  51F2               	movf	___fttol@exp1& (0+255),w,b
  5456  001674  0A80               	xorlw	128
  5457  001676  0F8F               	addlw	143
  5458  001678  E3D6               	bnc	l8373
  5459  00167A                     l8391:
  5460                           
  5461                           ; BSR set to: 0
  5462  00167A  90D8               	bcf	status,0,c
  5463  00167C  33F1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5464  00167E  33F0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5465  001680  33EF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5466  001682  33EE               	rrcf	___fttol@lval& (0+255),f,b
  5467                           
  5468                           ; BSR set to: 0
  5469  001684  3FF2               	incfsz	___fttol@exp1& (0+255),f,b
  5470  001686  D7F9               	goto	l8391
  5471  001688  D00C               	goto	l8403
  5472  00168A                     l8395:
  5473                           
  5474                           ; BSR set to: 0
  5475  00168A  0E17               	movlw	23
  5476  00168C  65F2               	cpfsgt	___fttol@exp1& (0+255),b
  5477  00168E  D007               	goto	l8401
  5478  001690  D7CA               	goto	l8373
  5479  001692                     l8399:
  5480                           
  5481                           ; BSR set to: 0
  5482  001692  90D8               	bcf	status,0,c
  5483  001694  37EE               	rlcf	___fttol@lval& (0+255),f,b
  5484  001696  37EF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5485  001698  37F0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5486  00169A  37F1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5487  00169C  07F2               	decf	___fttol@exp1& (0+255),f,b
  5488  00169E                     l8401:
  5489                           
  5490                           ; BSR set to: 0
  5491  00169E  51F2               	movf	___fttol@exp1& (0+255),w,b
  5492  0016A0  E1F8               	bnz	l8399
  5493  0016A2                     l8403:
  5494                           
  5495                           ; BSR set to: 0
  5496  0016A2  51ED               	movf	___fttol@sign1& (0+255),w,b
  5497  0016A4  E008               	bz	l8407
  5498                           
  5499                           ; BSR set to: 0
  5500  0016A6  1FF1               	comf	(___fttol@lval+3)& (0+255),f,b
  5501  0016A8  1FF0               	comf	(___fttol@lval+2)& (0+255),f,b
  5502  0016AA  1FEF               	comf	(___fttol@lval+1)& (0+255),f,b
  5503  0016AC  6DEE               	negf	___fttol@lval& (0+255),b
  5504  0016AE  0E00               	movlw	0
  5505  0016B0  23EF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5506  0016B2  23F0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5507  0016B4  23F1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5508  0016B6                     l8407:
  5509                           
  5510                           ; BSR set to: 0
  5511  0016B6  C0EE  F038         	movff	___fttol@lval,?___fttol
  5512  0016BA  C0EF  F039         	movff	___fttol@lval+1,?___fttol+1
  5513  0016BE  C0F0  F03A         	movff	___fttol@lval+2,?___fttol+2
  5514  0016C2  C0F1  F03B         	movff	___fttol@lval+3,?___fttol+3
  5515                           
  5516                           ; BSR set to: 0
  5517  0016C6  0012               	return		;funcret
  5518  0016C8                     __end_of___fttol:
  5519                           	opt stack 0
  5520                           tblptru	equ	0xFF8
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           intcon2	equ	0xFF1
  5524                           intcon3	equ	0xFF0
  5525                           postinc0	equ	0xFEE
  5526                           wreg	equ	0xFE8
  5527                           postdec1	equ	0xFE5
  5528                           fsr1h	equ	0xFE2
  5529                           fsr1l	equ	0xFE1
  5530                           indf2	equ	0xFDF
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function ___ftmul *****************
  5536 ;; Defined at:
  5537 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  f1              3   26[COMRAM] float 
  5540 ;;  f2              3   29[COMRAM] float 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  5543 ;;  sign            1   36[COMRAM] unsigned char 
  5544 ;;  exp             1   35[COMRAM] unsigned char 
  5545 ;;  cntr            1    0        unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  3   26[COMRAM] float 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5555 ;;      Params:         6       0       0       0
  5556 ;;      Locals:         5       0       0       0
  5557 ;;      Temps:          3       0       0       0
  5558 ;;      Totals:        14       0       0       0
  5559 ;;Total ram usage:       14 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:   11
  5562 ;; This function calls:
  5563 ;;		___ftpack
  5564 ;; This function is called by:
  5565 ;;		_Check_List_Moteur_1
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text28
  5570  0013A8                     __ptext28:
  5571                           	opt stack 0
  5572  0013A8                     ___ftmul:
  5573                           	opt stack 16
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;incstack = 0
  5577  0013A8  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5578  0013AC  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5579  0013AE  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5580  0013B0  341C               	rlcf	___ftmul@f1+1,w,c
  5581  0013B2  3621               	rlcf	??___ftmul& (0+255),f,c
  5582  0013B4  E301               	bnc	u6571
  5583  0013B6  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5584  0013B8                     u6571:
  5585  0013B8  5021               	movf	??___ftmul,w,c
  5586  0013BA  6E24               	movwf	___ftmul@exp,c
  5587  0013BC  5024               	movf	___ftmul@exp,w,c
  5588  0013BE  E104               	bnz	l8337
  5589  0013C0  6A1B               	clrf	?___ftmul,c
  5590  0013C2  6A1C               	clrf	?___ftmul+1,c
  5591  0013C4  6A1D               	clrf	?___ftmul+2,c
  5592  0013C6  0012               	return	
  5593  0013C8                     l8337:
  5594  0013C8  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5595  0013CC  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5596  0013CE  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5597  0013D0  341F               	rlcf	___ftmul@f2+1,w,c
  5598  0013D2  3621               	rlcf	??___ftmul& (0+255),f,c
  5599  0013D4  E301               	bnc	u6591
  5600  0013D6  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5601  0013D8                     u6591:
  5602  0013D8  5021               	movf	??___ftmul,w,c
  5603  0013DA  6E25               	movwf	___ftmul@sign,c
  5604  0013DC  5025               	movf	___ftmul@sign,w,c
  5605  0013DE  E104               	bnz	l8341
  5606  0013E0  6A1B               	clrf	?___ftmul,c
  5607  0013E2  6A1C               	clrf	?___ftmul+1,c
  5608  0013E4  6A1D               	clrf	?___ftmul+2,c
  5609  0013E6  0012               	return	
  5610  0013E8                     l8341:
  5611  0013E8  5025               	movf	___ftmul@sign,w,c
  5612  0013EA  0F7B               	addlw	123
  5613  0013EC  2624               	addwf	___ftmul@exp,f,c
  5614  0013EE  C01D  F025         	movff	___ftmul@f1+2,___ftmul@sign
  5615  0013F2  5020               	movf	___ftmul@f2+2,w,c
  5616  0013F4  1A25               	xorwf	___ftmul@sign,f,c
  5617  0013F6  0E80               	movlw	128
  5618  0013F8  1625               	andwf	___ftmul@sign,f,c
  5619  0013FA  8E1C               	bsf	___ftmul@f1+1,7,c
  5620  0013FC  8E1F               	bsf	___ftmul@f2+1,7,c
  5621  0013FE  6A20               	clrf	___ftmul@f2+2,c
  5622  001400  6A1D               	clrf	___ftmul@f1+2,c
  5623  001402  501B               	movf	___ftmul@f1,w,c
  5624  001404  021E               	mulwf	___ftmul@f2,c
  5625  001406  CFF4 FFF3          	movff	prodh,prodl
  5626  00140A  6AF4               	clrf	prodh,c
  5627  00140C  CFF3 F026          	movff	prodl,___ftmul@f3_as_product
  5628  001410  CFF4 F027          	movff	prodh,___ftmul@f3_as_product+1
  5629  001414  6A28               	clrf	___ftmul@f3_as_product+2,c
  5630  001416  501B               	movf	___ftmul@f1,w,c
  5631  001418  021F               	mulwf	___ftmul@f2+1,c
  5632  00141A  50F3               	movf	prodl,w,c
  5633  00141C  2626               	addwf	___ftmul@f3_as_product,f,c
  5634  00141E  50F4               	movf	prodh,w,c
  5635  001420  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5636  001422  0E00               	movlw	0
  5637  001424  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5638  001426  501C               	movf	___ftmul@f1+1,w,c
  5639  001428  021E               	mulwf	___ftmul@f2,c
  5640  00142A  50F3               	movf	prodl,w,c
  5641  00142C  2626               	addwf	___ftmul@f3_as_product,f,c
  5642  00142E  50F4               	movf	prodh,w,c
  5643  001430  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5644  001432  0E00               	movlw	0
  5645  001434  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5646  001436  501C               	movf	___ftmul@f1+1,w,c
  5647  001438  021F               	mulwf	___ftmul@f2+1,c
  5648  00143A  50F3               	movf	prodl,w,c
  5649  00143C  2627               	addwf	___ftmul@f3_as_product+1,f,c
  5650  00143E  50F4               	movf	prodh,w,c
  5651  001440  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5652  001442  AE28               	btfss	___ftmul@f3_as_product+2,7,c
  5653  001444  D005               	goto	l2072
  5654  001446  90D8               	bcf	status,0,c
  5655  001448  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5656  00144A  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5657  00144C  3226               	rrcf	___ftmul@f3_as_product,f,c
  5658  00144E  2A24               	incf	___ftmul@exp,f,c
  5659  001450                     l2072:
  5660  001450  90D8               	bcf	status,0,c
  5661  001452  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5662  001454  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5663  001456  3226               	rrcf	___ftmul@f3_as_product,f,c
  5664  001458  C026  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  5665  00145C  C027  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5666  001460  C028  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5667  001464  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  5668  001468  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  5669  00146C  EC70  F00D         	call	___ftpack	;wreg free
  5670  001470  C00F  F01B         	movff	?___ftpack,?___ftmul
  5671  001474  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  5672  001478  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  5673  00147C  0012               	return		;funcret
  5674  00147E                     __end_of___ftmul:
  5675                           	opt stack 0
  5676                           tblptru	equ	0xFF8
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           intcon	equ	0xFF2
  5680                           intcon2	equ	0xFF1
  5681                           intcon3	equ	0xFF0
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           postdec1	equ	0xFE5
  5685                           fsr1h	equ	0xFE2
  5686                           fsr1l	equ	0xFE1
  5687                           indf2	equ	0xFDF
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function ___ftdiv *****************
  5693 ;; Defined at:
  5694 ;;		line 54 in file "/opt/microchip/xc8/v1.42/sources/common/ftdiv.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;  f1              3   40[COMRAM] float 
  5697 ;;  f2              3   43[COMRAM] float 
  5698 ;; Auto vars:     Size  Location     Type
  5699 ;;  f3              3   50[COMRAM] float 
  5700 ;;  sign            1   54[COMRAM] unsigned char 
  5701 ;;  exp             1   53[COMRAM] unsigned char 
  5702 ;;  cntr            1   49[COMRAM] unsigned char 
  5703 ;; Return value:  Size  Location     Type
  5704 ;;                  3   40[COMRAM] float 
  5705 ;; Registers used:
  5706 ;;		wreg, status,2, status,0, cstack
  5707 ;; Tracked objects:
  5708 ;;		On entry : 0/0
  5709 ;;		On exit  : 0/0
  5710 ;;		Unchanged: 0/0
  5711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5712 ;;      Params:         6       0       0       0
  5713 ;;      Locals:         6       0       0       0
  5714 ;;      Temps:          3       0       0       0
  5715 ;;      Totals:        15       0       0       0
  5716 ;;Total ram usage:       15 bytes
  5717 ;; Hardware stack levels used:    1
  5718 ;; Hardware stack levels required when called:   11
  5719 ;; This function calls:
  5720 ;;		___ftpack
  5721 ;; This function is called by:
  5722 ;;		_Check_List_Moteur_1
  5723 ;; This function uses a non-reentrant model
  5724 ;;
  5725                           
  5726                           	psect	text29
  5727  0016C8                     __ptext29:
  5728                           	opt stack 0
  5729  0016C8                     ___ftdiv:
  5730                           	opt stack 16
  5731                           
  5732                           ;incstack = 0
  5733  0016C8  C02B  F02F         	movff	___ftdiv@f1+2,??___ftdiv
  5734  0016CC  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5735  0016CE  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5736  0016D0  342A               	rlcf	___ftdiv@f1+1,w,c
  5737  0016D2  362F               	rlcf	??___ftdiv& (0+255),f,c
  5738  0016D4  E301               	bnc	u6521
  5739  0016D6  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5740  0016D8                     u6521:
  5741  0016D8  502F               	movf	??___ftdiv,w,c
  5742  0016DA  6E36               	movwf	___ftdiv@exp,c
  5743  0016DC  5036               	movf	___ftdiv@exp,w,c
  5744  0016DE  E104               	bnz	l8301
  5745  0016E0  6A29               	clrf	?___ftdiv,c
  5746  0016E2  6A2A               	clrf	?___ftdiv+1,c
  5747  0016E4  6A2B               	clrf	?___ftdiv+2,c
  5748  0016E6  0012               	return	
  5749  0016E8                     l8301:
  5750  0016E8  C02E  F02F         	movff	___ftdiv@f2+2,??___ftdiv
  5751  0016EC  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5752  0016EE  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5753  0016F0  342D               	rlcf	___ftdiv@f2+1,w,c
  5754  0016F2  362F               	rlcf	??___ftdiv& (0+255),f,c
  5755  0016F4  E301               	bnc	u6541
  5756  0016F6  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5757  0016F8                     u6541:
  5758  0016F8  502F               	movf	??___ftdiv,w,c
  5759  0016FA  6E37               	movwf	___ftdiv@sign,c
  5760  0016FC  5037               	movf	___ftdiv@sign,w,c
  5761  0016FE  E104               	bnz	l2056
  5762  001700  6A29               	clrf	?___ftdiv,c
  5763  001702  6A2A               	clrf	?___ftdiv+1,c
  5764  001704  6A2B               	clrf	?___ftdiv+2,c
  5765  001706  0012               	return	
  5766  001708                     l2056:
  5767  001708  6A33               	clrf	___ftdiv@f3,c
  5768  00170A  6A34               	clrf	___ftdiv@f3+1,c
  5769  00170C  6A35               	clrf	___ftdiv@f3+2,c
  5770  00170E  5037               	movf	___ftdiv@sign,w,c
  5771  001710  0F89               	addlw	137
  5772  001712  5E36               	subwf	___ftdiv@exp,f,c
  5773  001714  C02B  F037         	movff	___ftdiv@f1+2,___ftdiv@sign
  5774  001718  502E               	movf	___ftdiv@f2+2,w,c
  5775  00171A  1A37               	xorwf	___ftdiv@sign,f,c
  5776  00171C  0E80               	movlw	128
  5777  00171E  1637               	andwf	___ftdiv@sign,f,c
  5778  001720  8E2A               	bsf	___ftdiv@f1+1,7,c
  5779  001722  6A2B               	clrf	___ftdiv@f1+2,c
  5780  001724  8E2D               	bsf	___ftdiv@f2+1,7,c
  5781  001726  6A2E               	clrf	___ftdiv@f2+2,c
  5782  001728  0E18               	movlw	24
  5783  00172A  6E32               	movwf	___ftdiv@cntr,c
  5784  00172C                     l8319:
  5785  00172C  90D8               	bcf	status,0,c
  5786  00172E  3633               	rlcf	___ftdiv@f3,f,c
  5787  001730  3634               	rlcf	___ftdiv@f3+1,f,c
  5788  001732  3635               	rlcf	___ftdiv@f3+2,f,c
  5789  001734  502C               	movf	___ftdiv@f2,w,c
  5790  001736  5C29               	subwf	___ftdiv@f1,w,c
  5791  001738  502D               	movf	___ftdiv@f2+1,w,c
  5792  00173A  582A               	subwfb	___ftdiv@f1+1,w,c
  5793  00173C  502E               	movf	___ftdiv@f2+2,w,c
  5794  00173E  582B               	subwfb	___ftdiv@f1+2,w,c
  5795  001740  E307               	bnc	l2058
  5796  001742  502C               	movf	___ftdiv@f2,w,c
  5797  001744  5E29               	subwf	___ftdiv@f1,f,c
  5798  001746  502D               	movf	___ftdiv@f2+1,w,c
  5799  001748  5A2A               	subwfb	___ftdiv@f1+1,f,c
  5800  00174A  502E               	movf	___ftdiv@f2+2,w,c
  5801  00174C  5A2B               	subwfb	___ftdiv@f1+2,f,c
  5802  00174E  8033               	bsf	___ftdiv@f3,0,c
  5803  001750                     l2058:
  5804  001750  90D8               	bcf	status,0,c
  5805  001752  3629               	rlcf	___ftdiv@f1,f,c
  5806  001754  362A               	rlcf	___ftdiv@f1+1,f,c
  5807  001756  362B               	rlcf	___ftdiv@f1+2,f,c
  5808  001758  2E32               	decfsz	___ftdiv@cntr,f,c
  5809  00175A  D7E8               	goto	l8319
  5810  00175C  C033  F00F         	movff	___ftdiv@f3,___ftpack@arg
  5811  001760  C034  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5812  001764  C035  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5813  001768  C036  F012         	movff	___ftdiv@exp,___ftpack@exp
  5814  00176C  C037  F013         	movff	___ftdiv@sign,___ftpack@sign
  5815  001770  EC70  F00D         	call	___ftpack	;wreg free
  5816  001774  C00F  F029         	movff	?___ftpack,?___ftdiv
  5817  001778  C010  F02A         	movff	?___ftpack+1,?___ftdiv+1
  5818  00177C  C011  F02B         	movff	?___ftpack+2,?___ftdiv+2
  5819  001780  0012               	return		;funcret
  5820  001782                     __end_of___ftdiv:
  5821                           	opt stack 0
  5822                           tblptru	equ	0xFF8
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           intcon2	equ	0xFF1
  5827                           intcon3	equ	0xFF0
  5828                           postinc0	equ	0xFEE
  5829                           wreg	equ	0xFE8
  5830                           postdec1	equ	0xFE5
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           fsr2h	equ	0xFDA
  5835                           fsr2l	equ	0xFD9
  5836                           status	equ	0xFD8
  5837                           
  5838 ;; *************** function ___ftpack *****************
  5839 ;; Defined at:
  5840 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
  5841 ;; Parameters:    Size  Location     Type
  5842 ;;  arg             3   14[COMRAM] unsigned um
  5843 ;;  exp             1   17[COMRAM] unsigned char 
  5844 ;;  sign            1   18[COMRAM] unsigned char 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  3   14[COMRAM] float 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5856 ;;      Params:         5       0       0       0
  5857 ;;      Locals:         0       0       0       0
  5858 ;;      Temps:          3       0       0       0
  5859 ;;      Totals:         8       0       0       0
  5860 ;;Total ram usage:        8 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:   10
  5863 ;; This function calls:
  5864 ;;		Nothing
  5865 ;; This function is called by:
  5866 ;;		___ftdiv
  5867 ;;		___ftmul
  5868 ;;		___lbtoft
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text30
  5873  001AE0                     __ptext30:
  5874                           	opt stack 0
  5875  001AE0                     ___ftpack:
  5876                           	opt stack 16
  5877                           
  5878                           ;incstack = 0
  5879  001AE0  5012               	movf	___ftpack@exp,w,c
  5880  001AE2  E004               	bz	l1988
  5881  001AE4  500F               	movf	___ftpack@arg,w,c
  5882  001AE6  1010               	iorwf	___ftpack@arg+1,w,c
  5883  001AE8  1011               	iorwf	___ftpack@arg+2,w,c
  5884  001AEA  E109               	bnz	l8249
  5885  001AEC                     l1988:
  5886  001AEC  6A0F               	clrf	?___ftpack,c
  5887  001AEE  6A10               	clrf	?___ftpack+1,c
  5888  001AF0  6A11               	clrf	?___ftpack+2,c
  5889  001AF2  0012               	return	
  5890  001AF4                     l8247:
  5891  001AF4  2A12               	incf	___ftpack@exp,f,c
  5892  001AF6  90D8               	bcf	status,0,c
  5893  001AF8  3211               	rrcf	___ftpack@arg+2,f,c
  5894  001AFA  3210               	rrcf	___ftpack@arg+1,f,c
  5895  001AFC  320F               	rrcf	___ftpack@arg,f,c
  5896  001AFE                     l8249:
  5897  001AFE  6A14               	clrf	??___ftpack& (0+255),c
  5898  001B00  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5899  001B02  0EFE               	movlw	254
  5900  001B04  1411               	andwf	___ftpack@arg+2,w,c
  5901  001B06  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5902  001B08  5014               	movf	??___ftpack,w,c
  5903  001B0A  1015               	iorwf	??___ftpack+1,w,c
  5904  001B0C  1016               	iorwf	??___ftpack+2,w,c
  5905  001B0E  E00A               	bz	l8255
  5906  001B10  D7F1               	goto	l8247
  5907  001B12                     l8251:
  5908  001B12  2A12               	incf	___ftpack@exp,f,c
  5909  001B14  2A0F               	incf	___ftpack@arg,f,c
  5910  001B16  0E00               	movlw	0
  5911  001B18  2210               	addwfc	___ftpack@arg+1,f,c
  5912  001B1A  2211               	addwfc	___ftpack@arg+2,f,c
  5913  001B1C  90D8               	bcf	status,0,c
  5914  001B1E  3211               	rrcf	___ftpack@arg+2,f,c
  5915  001B20  3210               	rrcf	___ftpack@arg+1,f,c
  5916  001B22  320F               	rrcf	___ftpack@arg,f,c
  5917  001B24                     l8255:
  5918  001B24  6A14               	clrf	??___ftpack& (0+255),c
  5919  001B26  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5920  001B28  5011               	movf	___ftpack@arg+2,w,c
  5921  001B2A  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5922  001B2C  5014               	movf	??___ftpack,w,c
  5923  001B2E  1015               	iorwf	??___ftpack+1,w,c
  5924  001B30  1016               	iorwf	??___ftpack+2,w,c
  5925  001B32  E006               	bz	l8259
  5926  001B34  D7EE               	goto	l8251
  5927  001B36                     l8257:
  5928  001B36  0612               	decf	___ftpack@exp,f,c
  5929  001B38  90D8               	bcf	status,0,c
  5930  001B3A  360F               	rlcf	___ftpack@arg,f,c
  5931  001B3C  3610               	rlcf	___ftpack@arg+1,f,c
  5932  001B3E  3611               	rlcf	___ftpack@arg+2,f,c
  5933  001B40                     l8259:
  5934  001B40  BE10               	btfsc	___ftpack@arg+1,7,c
  5935  001B42  D003               	goto	l2000
  5936  001B44  0E02               	movlw	2
  5937  001B46  6012               	cpfslt	___ftpack@exp,c
  5938  001B48  D7F6               	goto	l8257
  5939  001B4A                     l2000:
  5940  001B4A  A012               	btfss	___ftpack@exp,0,c
  5941  001B4C  9E10               	bcf	___ftpack@arg+1,7,c
  5942  001B4E  90D8               	bcf	status,0,c
  5943  001B50  3212               	rrcf	___ftpack@exp,f,c
  5944  001B52  5012               	movf	___ftpack@exp,w,c
  5945  001B54  1211               	iorwf	___ftpack@arg+2,f,c
  5946  001B56  5013               	movf	___ftpack@sign,w,c
  5947  001B58  E001               	bz	l8273
  5948  001B5A  8E11               	bsf	___ftpack@arg+2,7,c
  5949  001B5C                     l8273:
  5950  001B5C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  5951  001B60  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  5952  001B64  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  5953  001B68  0012               	return		;funcret
  5954  001B6A                     __end_of___ftpack:
  5955                           	opt stack 0
  5956                           tblptru	equ	0xFF8
  5957                           prodh	equ	0xFF4
  5958                           prodl	equ	0xFF3
  5959                           intcon	equ	0xFF2
  5960                           intcon2	equ	0xFF1
  5961                           intcon3	equ	0xFF0
  5962                           postinc0	equ	0xFEE
  5963                           wreg	equ	0xFE8
  5964                           postdec1	equ	0xFE5
  5965                           fsr1h	equ	0xFE2
  5966                           fsr1l	equ	0xFE1
  5967                           indf2	equ	0xFDF
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972 ;; *************** function _Capteur_Capot_On *****************
  5973 ;; Defined at:
  5974 ;;		line 176 in file "interrupt.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;		None
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;		None
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      void 
  5981 ;; Registers used:
  5982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 3F/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5988 ;;      Params:         0       0       0       0
  5989 ;;      Locals:         0       0       0       0
  5990 ;;      Temps:          0       0       0       0
  5991 ;;      Totals:         0       0       0       0
  5992 ;;Total ram usage:        0 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:   11
  5995 ;; This function calls:
  5996 ;;		_Etat_Update
  5997 ;; This function is called by:
  5998 ;;		_Mouvement_X
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text31
  6003  00267C                     __ptext31:
  6004                           	opt stack 0
  6005  00267C                     _Capteur_Capot_On:
  6006                           	opt stack 17
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  6010                           
  6011                           ;incstack = 0
  6012  00267C  88F2               	bsf	intcon,4,c	;volatile
  6013                           
  6014                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  6015  00267E  92F2               	bcf	intcon,1,c	;volatile
  6016                           
  6017                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  6018  002680  B682               	btfsc	3970,3,c	;volatile
  6019  002682  0012               	return	
  6020                           
  6021                           ; BSR set to: 0
  6022                           ;interrupt.c: 185: P4_busy = 0;
  6023  002684  6BAC               	clrf	_P4_busy& (0+255),b
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;interrupt.c: 186: Etat_Update(77);
  6027  002686  0E4D               	movlw	77
  6028  002688  EF3E  F012         	goto	_Etat_Update
  6029  00268C                     __end_of_Capteur_Capot_On:
  6030                           	opt stack 0
  6031                           tblptru	equ	0xFF8
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon	equ	0xFF2
  6035                           intcon2	equ	0xFF1
  6036                           intcon3	equ	0xFF0
  6037                           postinc0	equ	0xFEE
  6038                           wreg	equ	0xFE8
  6039                           postdec1	equ	0xFE5
  6040                           fsr1h	equ	0xFE2
  6041                           fsr1l	equ	0xFE1
  6042                           indf2	equ	0xFDF
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _Capteur_Capot_Off *****************
  6048 ;; Defined at:
  6049 ;;		line 194 in file "interrupt.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;		None
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		None
  6058 ;; Tracked objects:
  6059 ;;		On entry : 3F/0
  6060 ;;		On exit  : 3F/0
  6061 ;;		Unchanged: 3F/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6063 ;;      Params:         0       0       0       0
  6064 ;;      Locals:         0       0       0       0
  6065 ;;      Temps:          0       0       0       0
  6066 ;;      Totals:         0       0       0       0
  6067 ;;Total ram usage:        0 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:   10
  6070 ;; This function calls:
  6071 ;;		Nothing
  6072 ;; This function is called by:
  6073 ;;		_Mouvement_X
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text32
  6078  002776                     __ptext32:
  6079                           	opt stack 0
  6080  002776                     _Capteur_Capot_Off:
  6081                           	opt stack 18
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  6085                           
  6086                           ;incstack = 0
  6087  002776  98F2               	bcf	intcon,4,c	;volatile
  6088                           
  6089                           ; BSR set to: 0
  6090  002778  0012               	return		;funcret
  6091  00277A                     __end_of_Capteur_Capot_Off:
  6092                           	opt stack 0
  6093                           tblptru	equ	0xFF8
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           intcon2	equ	0xFF1
  6098                           intcon3	equ	0xFF0
  6099                           postinc0	equ	0xFEE
  6100                           wreg	equ	0xFE8
  6101                           postdec1	equ	0xFE5
  6102                           fsr1h	equ	0xFE2
  6103                           fsr1l	equ	0xFE1
  6104                           indf2	equ	0xFDF
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _Mouvement_Bequille *****************
  6110 ;; Defined at:
  6111 ;;		line 849 in file "action.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  direction       1    wreg     unsigned char 
  6114 ;;  type_consign    1    7[BANK2 ] unsigned char 
  6115 ;;  option          1    8[BANK2 ] unsigned char 
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;  direction       1    9[BANK2 ] unsigned char 
  6118 ;;  index           2    0        unsigned int 
  6119 ;;  Option_Temps    1    0        unsigned char 
  6120 ;;  i_max           1    0        unsigned char 
  6121 ;;  i_min           1    0        unsigned char 
  6122 ;;  i               1    0        unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;                  1    wreg      void 
  6125 ;; Registers used:
  6126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 3F/0
  6129 ;;		On exit  : 3F/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6132 ;;      Params:         0       0       0       2
  6133 ;;      Locals:         0       0       0       1
  6134 ;;      Temps:          0       0       0       0
  6135 ;;      Totals:         0       0       0       3
  6136 ;;Total ram usage:        3 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:   18
  6139 ;; This function calls:
  6140 ;;		_Check_List_Moteur_Bequille
  6141 ;;		_Coupe_Moteur
  6142 ;;		_Detection_Pion_Off
  6143 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  6144 ;;		_Init_Moteur_Bequille
  6145 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  6146 ;;		_TIMER2_On
  6147 ;;		_delay_s
  6148 ;;		_u_Init_PWM
  6149 ;; This function is called by:
  6150 ;;		_Cycle
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text33
  6155  00199C                     __ptext33:
  6156                           	opt stack 0
  6157  00199C                     _Mouvement_Bequille:
  6158                           	opt stack 11
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;incstack = 0
  6162                           ;Mouvement_Bequille@direction stored from wreg
  6163  00199C  0102               	movlb	2	; () banked
  6164  00199E  6F89               	movwf	Mouvement_Bequille@direction& (0+255),b
  6165                           
  6166                           ;action.c: 850: unsigned char i, i_min, i_max;
  6167                           ;action.c: 851: unsigned char Option_Temps_S;
  6168                           ;action.c: 858: Surveillance_Consommation_Moteur_2_Desactiver();
  6169  0019A0  EC66  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;action.c: 860: Detection_Pion_Off();
  6173  0019A4  EC97  F013         	call	_Detection_Pion_Off	;wreg free
  6174                           
  6175                           ;action.c: 863: nb_s_bequille = option;
  6176  0019A8  C288  F0A2         	movff	Mouvement_Bequille@option,_nb_s_bequille
  6177                           
  6178                           ;action.c: 866: consigne = 10;
  6179  0019AC  0E0A               	movlw	10
  6180  0019AE  0100               	movlb	0	; () banked
  6181  0019B0  6F98               	movwf	_consigne& (0+255),b	;volatile
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;action.c: 877: index = 0;
  6185  0019B2  ECF0  F00E         	call	_u_Init_PWM	;wreg free
  6186                           
  6187                           ; BSR set to: 0
  6188                           ;action.c: 878: TMR2 = 0;
  6189  0019B6  6ACC               	clrf	4044,c	;volatile
  6190                           
  6191                           ; BSR set to: 0
  6192                           ;action.c: 879: TMR2IF = 0;
  6193  0019B8  929E               	bcf	3998,1,c	;volatile
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;action.c: 884: LATEbits.LATE2 = 1;
  6197  0019BA  848D               	bsf	3981,2,c	;volatile
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;action.c: 889: moteur_indice = 3;
  6201  0019BC  0E03               	movlw	3
  6202  0019BE  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;action.c: 890: Init_ADC_Single_Shoot_I_Moteur_2();
  6206  0019C0  EC8C  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;action.c: 893: if (direction == 0) {
  6210  0019C4  0102               	movlb	2	; () banked
  6211  0019C6  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6212  0019C8  E103               	bnz	l1019
  6213                           
  6214                           ; BSR set to: 2
  6215                           ;action.c: 894: LATD7 = 0;LATD6 = 1;
  6216  0019CA  9E8C               	bcf	3980,7,c	;volatile
  6217  0019CC  8C8C               	bsf	3980,6,c	;volatile
  6218                           
  6219                           ;action.c: 895: } else {
  6220  0019CE  D002               	goto	l8891
  6221  0019D0                     l1019:
  6222                           
  6223                           ; BSR set to: 2
  6224                           ;action.c: 896: LATD6 = 0;LATD7 = 1;
  6225  0019D0  9C8C               	bcf	3980,6,c	;volatile
  6226  0019D2  8E8C               	bsf	3980,7,c	;volatile
  6227  0019D4                     l8891:
  6228                           
  6229                           ; BSR set to: 2
  6230                           ;action.c: 897: }
  6231                           ;action.c: 898: PDC1L = 1 << 2;
  6232  0019D4  0E04               	movlw	4
  6233  0019D6  6E77               	movwf	3959,c	;volatile
  6234                           
  6235                           ; BSR set to: 2
  6236                           ;action.c: 899: PDC1H = 0;
  6237  0019D8  6A76               	clrf	3958,c	;volatile
  6238                           
  6239                           ;action.c: 900: OVDCOND = 0b00000100;
  6240  0019DA  0E04               	movlw	4
  6241  0019DC  6E6B               	movwf	3947,c	;volatile
  6242                           
  6243                           ; BSR set to: 2
  6244                           ;action.c: 901: LATCbits.LATC1 = 1;
  6245  0019DE  828B               	bsf	3979,1,c	;volatile
  6246                           
  6247                           ;action.c: 903: erreur = 1;
  6248  0019E0  0100               	movlb	0	; () banked
  6249  0019E2  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  6250  0019E4  0E01               	movlw	1
  6251  0019E6  6F84               	movwf	_erreur& (0+255),b	;volatile
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;action.c: 904: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  6255  0019E8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6256  0019EA  46E8               	rlncf	wreg,f,c
  6257  0019EC  0BFC               	andlw	252
  6258  0019EE  6E77               	movwf	3959,c	;volatile
  6259                           
  6260                           ; BSR set to: 0
  6261                           ;action.c: 905: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  6262  0019F0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6263  0019F2  46E8               	rlncf	wreg,f,c
  6264  0019F4  0B03               	andlw	3
  6265  0019F6  6E76               	movwf	3958,c	;volatile
  6266                           
  6267                           ; BSR set to: 0
  6268                           ;action.c: 908: erreur_accumulator = 0;
  6269  0019F8  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  6270  0019FA  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;action.c: 911: Nouvelle_Valeur_ADC = 0;
  6274  0019FC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;action.c: 915: PIE3bits.PTIE = 0;
  6278  0019FE  98A3               	bcf	4003,4,c	;volatile
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;action.c: 916: PIE1bits.ADIE = 1;
  6282  001A00  8C9D               	bsf	3997,6,c	;volatile
  6283                           
  6284                           ; BSR set to: 0
  6285                           ;action.c: 917: PIE1bits.ADIE = 1;
  6286  001A02  8C9D               	bsf	3997,6,c	;volatile
  6287                           
  6288                           ; BSR set to: 0
  6289                           ;action.c: 919: PEIE = 1;
  6290  001A04  8CF2               	bsf	intcon,6,c	;volatile
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;action.c: 920: GIE = 1;
  6294  001A06  8EF2               	bsf	intcon,7,c	;volatile
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;action.c: 921: TIMER2_On();
  6298  001A08  ECA7  F013         	call	_TIMER2_On	;wreg free
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;action.c: 922: ADIF = 0;
  6302  001A0C  9C9E               	bcf	3998,6,c	;volatile
  6303                           
  6304                           ;action.c: 939: Init_Moteur_Bequille();
  6305  001A0E  EC46  F013         	call	_Init_Moteur_Bequille	;wreg free
  6306  001A12                     l8919:
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;action.c: 943: Check_List_Moteur_Bequille();
  6310  001A12  EC39  F010         	call	_Check_List_Moteur_Bequille	;wreg free
  6311                           
  6312                           ;action.c: 944: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  6313  001A16  0102               	movlb	2	; () banked
  6314  001A18  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6315  001A1A  E104               	bnz	l8925
  6316                           
  6317                           ; BSR set to: 2
  6318  001A1C  0E08               	movlw	8
  6319  001A1E  0100               	movlb	0	; () banked
  6320  001A20  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6321  001A22  E0F7               	bz	l8919
  6322  001A24                     l8925:
  6323  001A24  0102               	movlb	2	; () banked
  6324  001A26  0589               	decf	Mouvement_Bequille@direction& (0+255),w,b
  6325  001A28  E104               	bnz	l1026
  6326                           
  6327                           ; BSR set to: 2
  6328  001A2A  0E09               	movlw	9
  6329  001A2C  0100               	movlb	0	; () banked
  6330  001A2E  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6331  001A30  E0F0               	bz	l8919
  6332  001A32                     l1026:
  6333                           
  6334                           ;action.c: 948: PIE3bits.PTIE = 0;
  6335  001A32  98A3               	bcf	4003,4,c	;volatile
  6336                           
  6337                           ;action.c: 949: PIE1bits.ADIE = 0;
  6338  001A34  9C9D               	bcf	3997,6,c	;volatile
  6339                           
  6340                           ;action.c: 955: LATEbits.LATE2 = 0;
  6341  001A36  948D               	bcf	3981,2,c	;volatile
  6342                           
  6343                           ;action.c: 960: Surveillance_Consommation_Moteur_2_Desactiver();
  6344  001A38  EC66  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;action.c: 962: Coupe_Moteur();
  6348  001A3C  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  6349                           
  6350                           ;action.c: 963: delay_s(1);
  6351  001A40  0E01               	movlw	1
  6352  001A42  EFB4  F011         	goto	_delay_s
  6353  001A46                     __end_of_Mouvement_Bequille:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           prodh	equ	0xFF4
  6357                           prodl	equ	0xFF3
  6358                           intcon	equ	0xFF2
  6359                           intcon2	equ	0xFF1
  6360                           intcon3	equ	0xFF0
  6361                           postinc0	equ	0xFEE
  6362                           wreg	equ	0xFE8
  6363                           postdec1	equ	0xFE5
  6364                           fsr1h	equ	0xFE2
  6365                           fsr1l	equ	0xFE1
  6366                           indf2	equ	0xFDF
  6367                           fsr2h	equ	0xFDA
  6368                           fsr2l	equ	0xFD9
  6369                           status	equ	0xFD8
  6370                           
  6371 ;; *************** function _u_Init_PWM *****************
  6372 ;; Defined at:
  6373 ;;		line 56 in file "pwm.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;		None
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0
  6382 ;; Tracked objects:
  6383 ;;		On entry : 3F/0
  6384 ;;		On exit  : 3F/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6387 ;;      Params:         0       0       0       0
  6388 ;;      Locals:         0       0       0       0
  6389 ;;      Temps:          0       0       0       0
  6390 ;;      Totals:         0       0       0       0
  6391 ;;Total ram usage:        0 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:   10
  6394 ;; This function calls:
  6395 ;;		Nothing
  6396 ;; This function is called by:
  6397 ;;		_Mouvement_Bequille
  6398 ;;		_Mouvement_Z
  6399 ;;		_Mouvement_X
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text34
  6404  001DE0                     __ptext34:
  6405                           	opt stack 0
  6406  001DE0                     _u_Init_PWM:
  6407                           	opt stack 18
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  6411                           
  6412                           ; BSR set to: 0
  6413                           ;incstack = 0
  6414  001DE0  9E7E               	bcf	3966,7,c	;volatile
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;pwm.c: 64: PDC0L = 1 << 2;
  6418  001DE2  0E04               	movlw	4
  6419  001DE4  6E79               	movwf	3961,c	;volatile
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;pwm.c: 65: PDC0H = 0;
  6423  001DE6  6A78               	clrf	3960,c	;volatile
  6424                           
  6425                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  6426  001DE8  0E1F               	movlw	31
  6427  001DEA  6E7B               	movwf	3963,c	;volatile
  6428                           
  6429                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  6430  001DEC  0E3F               	movlw	63
  6431  001DEE  6E7B               	movwf	3963,c	;volatile
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  6435  001DF0  287B               	incf	3963,w,c	;volatile
  6436  001DF2  6F8D               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  6440  001DF4  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  6441  001DF6  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;pwm.c: 87: PTPERH = 0;
  6445  001DF8  6A7A               	clrf	3962,c	;volatile
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;pwm.c: 94: PTCON0 = 0b00000011;
  6449  001DFA  0E03               	movlw	3
  6450  001DFC  6E7F               	movwf	3967,c	;volatile
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  6454  001DFE  0E0F               	movlw	-241
  6455  001E00  167F               	andwf	3967,f,c	;volatile
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  6459  001E02  0EF3               	movlw	-13
  6460  001E04  167F               	andwf	3967,f,c	;volatile
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  6464  001E06  507F               	movf	3967,w,c	;volatile
  6465  001E08  0BFC               	andlw	-4
  6466  001E0A  0902               	iorlw	2
  6467  001E0C  6E7F               	movwf	3967,c	;volatile
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;pwm.c: 116: PTCON1 = 0b10000000;
  6471  001E0E  0E80               	movlw	128
  6472  001E10  6E7E               	movwf	3966,c	;volatile
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  6476  001E12  506F               	movf	3951,w,c	;volatile
  6477  001E14  0B8F               	andlw	-113
  6478  001E16  0910               	iorlw	16
  6479  001E18  6E6F               	movwf	3951,c	;volatile
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  6483  001E1A  0E0F               	movlw	15
  6484  001E1C  126F               	iorwf	3951,f,c	;volatile
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  6488  001E1E  0E3F               	movlw	63
  6489  001E20  6E6F               	movwf	3951,c	;volatile
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  6493  001E22  6A6E               	clrf	3950,c	;volatile
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  6497  001E24  0E01               	movlw	1
  6498  001E26  6E6E               	movwf	3950,c	;volatile
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;pwm.c: 155: DTCON = 0b00000000;
  6502  001E28  6A6D               	clrf	3949,c	;volatile
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;pwm.c: 156: OVDCOND = 0b00000101;
  6506  001E2A  0E05               	movlw	5
  6507  001E2C  6E6B               	movwf	3947,c	;volatile
  6508                           
  6509                           ; BSR set to: 0
  6510                           ;pwm.c: 158: OVDCONS = 0b00000000;
  6511  001E2E  6A6A               	clrf	3946,c	;volatile
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;pwm.c: 164: SEVTDIR = 0;
  6515  001E30  966E               	bcf	3950,3,c	;volatile
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;pwm.c: 166: SEVTCMPH = 0;
  6519  001E32  6A70               	clrf	3952,c	;volatile
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;pwm.c: 167: SEVTCMPL = 10;
  6523  001E34  0E0A               	movlw	10
  6524  001E36  6E71               	movwf	3953,c	;volatile
  6525                           
  6526                           ; BSR set to: 0
  6527  001E38  0C0A               	retlw	10	;funcret
  6528  001E3A                     __end_of_u_Init_PWM:
  6529                           	opt stack 0
  6530                           tblptru	equ	0xFF8
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           intcon2	equ	0xFF1
  6535                           intcon3	equ	0xFF0
  6536                           postinc0	equ	0xFEE
  6537                           wreg	equ	0xFE8
  6538                           postdec1	equ	0xFE5
  6539                           fsr1h	equ	0xFE2
  6540                           fsr1l	equ	0xFE1
  6541                           indf2	equ	0xFDF
  6542                           fsr2h	equ	0xFDA
  6543                           fsr2l	equ	0xFD9
  6544                           status	equ	0xFD8
  6545                           
  6546 ;; *************** function _delay_s *****************
  6547 ;; Defined at:
  6548 ;;		line 91 in file "horloge.c"
  6549 ;; Parameters:    Size  Location     Type
  6550 ;;  delay_time      1    wreg     unsigned char 
  6551 ;; Auto vars:     Size  Location     Type
  6552 ;;  delay_time      1   17[BANK0 ] unsigned char 
  6553 ;;  Timer_0_Etat    1   18[BANK0 ] unsigned char 
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 3F/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6563 ;;      Params:         0       0       0       0
  6564 ;;      Locals:         0       2       0       0
  6565 ;;      Temps:          0       0       0       0
  6566 ;;      Totals:         0       2       0       0
  6567 ;;Total ram usage:        2 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:   17
  6570 ;; This function calls:
  6571 ;;		_EUSART1_Check_Buffer
  6572 ;;		_TIMER0_Off
  6573 ;;		_TIMER0_On
  6574 ;; This function is called by:
  6575 ;;		_Cycle
  6576 ;;		_Mouvement_Bequille
  6577 ;;		_Mouvement_Z
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text35
  6582  002368                     __ptext35:
  6583                           	opt stack 0
  6584  002368                     _delay_s:
  6585                           	opt stack 12
  6586                           
  6587                           ; BSR set to: 0
  6588                           ;incstack = 0
  6589                           ;delay_s@delay_time stored from wreg
  6590  002368  0100               	movlb	0	; () banked
  6591  00236A  6FFE               	movwf	delay_s@delay_time& (0+255),b
  6592                           
  6593                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  6594                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  6595  00236C  C088  F0FF         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  6596                           
  6597                           ;horloge.c: 95: delay_s_counter = 0;
  6598  002370  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;horloge.c: 98: TIMER0_On();
  6602  002372  ECA1  F012         	call	_TIMER0_On	;wreg free
  6603                           
  6604                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  6605  002376  D002               	goto	l8457
  6606  002378                     l8455:
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;horloge.c: 101: EUSART1_Check_Buffer();
  6610  002378  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  6611  00237C                     l8457:
  6612  00237C  0100               	movlb	0	; () banked
  6613  00237E  51FE               	movf	delay_s@delay_time& (0+255),w,b
  6614  002380  5D8C               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  6615  002382  E3FA               	bnc	l8455
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;horloge.c: 104: }
  6619                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  6620  002384  51FF               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  6621  002386  B4D8               	btfsc	status,2,c
  6622                           
  6623                           ; BSR set to: 0
  6624  002388  EC87  F013         	call	_TIMER0_Off	;wreg free
  6625                           
  6626                           ; BSR set to: 0
  6627  00238C  0012               	return		;funcret
  6628  00238E                     __end_of_delay_s:
  6629                           	opt stack 0
  6630                           tblptru	equ	0xFF8
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           intcon2	equ	0xFF1
  6635                           intcon3	equ	0xFF0
  6636                           postinc0	equ	0xFEE
  6637                           wreg	equ	0xFE8
  6638                           postdec1	equ	0xFE5
  6639                           fsr1h	equ	0xFE2
  6640                           fsr1l	equ	0xFE1
  6641                           indf2	equ	0xFDF
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function _TIMER0_Off *****************
  6647 ;; Defined at:
  6648 ;;		line 111 in file "timer.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		None
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 3F/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6662 ;;      Params:         0       0       0       0
  6663 ;;      Locals:         0       0       0       0
  6664 ;;      Temps:          0       0       0       0
  6665 ;;      Totals:         0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:   10
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_Stop_Moteur_1
  6673 ;;		_delay_s
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           	psect	text36
  6678  00270E                     __ptext36:
  6679                           	opt stack 0
  6680  00270E                     _TIMER0_Off:
  6681                           	opt stack 18
  6682                           
  6683                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;incstack = 0
  6687  00270E  9ED5               	bcf	4053,7,c	;volatile
  6688                           
  6689                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  6690  002710  9AF2               	bcf	intcon,5,c	;volatile
  6691                           
  6692                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  6693  002712  94F2               	bcf	intcon,2,c	;volatile
  6694                           
  6695                           ;timer.c: 117: TIMER0_Etat = 0;
  6696  002714  0100               	movlb	0	; () banked
  6697  002716  6B88               	clrf	_TIMER0_Etat& (0+255),b
  6698                           
  6699                           ; BSR set to: 0
  6700  002718  0012               	return		;funcret
  6701  00271A                     __end_of_TIMER0_Off:
  6702                           	opt stack 0
  6703                           tblptru	equ	0xFF8
  6704                           prodh	equ	0xFF4
  6705                           prodl	equ	0xFF3
  6706                           intcon	equ	0xFF2
  6707                           intcon2	equ	0xFF1
  6708                           intcon3	equ	0xFF0
  6709                           postinc0	equ	0xFEE
  6710                           wreg	equ	0xFE8
  6711                           postdec1	equ	0xFE5
  6712                           fsr1h	equ	0xFE2
  6713                           fsr1l	equ	0xFE1
  6714                           indf2	equ	0xFDF
  6715                           fsr2h	equ	0xFDA
  6716                           fsr2l	equ	0xFD9
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function _TIMER2_On *****************
  6720 ;; Defined at:
  6721 ;;		line 158 in file "timer.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;                  1    wreg      void 
  6728 ;; Registers used:
  6729 ;;		None
  6730 ;; Tracked objects:
  6731 ;;		On entry : 3F/0
  6732 ;;		On exit  : 3F/0
  6733 ;;		Unchanged: 3F/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6735 ;;      Params:         0       0       0       0
  6736 ;;      Locals:         0       0       0       0
  6737 ;;      Temps:          0       0       0       0
  6738 ;;      Totals:         0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:   10
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		_Mouvement_Bequille
  6746 ;;		_Mouvement_Z
  6747 ;;		_Mouvement_X
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           	psect	text37
  6752  00274E                     __ptext37:
  6753                           	opt stack 0
  6754  00274E                     _TIMER2_On:
  6755                           	opt stack 18
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;incstack = 0
  6762  00274E  829D               	bsf	3997,1,c	;volatile
  6763                           
  6764                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  6765  002750  929E               	bcf	3998,1,c	;volatile
  6766                           
  6767                           ; BSR set to: 0
  6768  002752  0012               	return		;funcret
  6769  002754                     __end_of_TIMER2_On:
  6770                           	opt stack 0
  6771                           tblptru	equ	0xFF8
  6772                           prodh	equ	0xFF4
  6773                           prodl	equ	0xFF3
  6774                           intcon	equ	0xFF2
  6775                           intcon2	equ	0xFF1
  6776                           intcon3	equ	0xFF0
  6777                           postinc0	equ	0xFEE
  6778                           wreg	equ	0xFE8
  6779                           postdec1	equ	0xFE5
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  6788 ;; Defined at:
  6789 ;;		line 876 in file "interrupt.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;		None
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      void 
  6796 ;; Registers used:
  6797 ;;		wreg, status,2
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/2
  6800 ;;		On exit  : 3F/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6803 ;;      Params:         0       0       0       0
  6804 ;;      Locals:         0       0       0       0
  6805 ;;      Temps:          0       0       0       0
  6806 ;;      Totals:         0       0       0       0
  6807 ;;Total ram usage:        0 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:   10
  6810 ;; This function calls:
  6811 ;;		Nothing
  6812 ;; This function is called by:
  6813 ;;		_Mouvement_Bequille
  6814 ;;		_Mouvement_Z
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text38
  6819  0026CC                     __ptext38:
  6820                           	opt stack 0
  6821  0026CC                     _Surveillance_Consommation_Moteur_2_Desactiver:
  6822                           	opt stack 18
  6823                           
  6824                           ;interrupt.c: 877: if (Surveillance_Consommation_Moteur_2 != 0) {
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;incstack = 0
  6828  0026CC  0100               	movlb	0	; () banked
  6829  0026CE  518A               	movf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
  6830  0026D0  B4D8               	btfsc	status,2,c
  6831  0026D2  0012               	return	
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;interrupt.c: 878: Surveillance_Consommation_Moteur_2 = 0;
  6835  0026D4  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  6836                           
  6837                           ;interrupt.c: 879: INTCON3bits.INT2IE = 0;
  6838  0026D6  98F0               	bcf	intcon3,4,c	;volatile
  6839                           
  6840                           ; BSR set to: 0
  6841  0026D8  0012               	return		;funcret
  6842  0026DA                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  6843                           	opt stack 0
  6844                           tblptru	equ	0xFF8
  6845                           prodh	equ	0xFF4
  6846                           prodl	equ	0xFF3
  6847                           intcon	equ	0xFF2
  6848                           intcon2	equ	0xFF1
  6849                           intcon3	equ	0xFF0
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           postdec1	equ	0xFE5
  6853                           fsr1h	equ	0xFE2
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _Init_Moteur_Bequille *****************
  6861 ;; Defined at:
  6862 ;;		line 246 in file "action.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;		None
  6867 ;; Return value:  Size  Location     Type
  6868 ;;                  1    wreg      void 
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 3F/0
  6873 ;;		On exit  : 3F/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6876 ;;      Params:         0       0       0       0
  6877 ;;      Locals:         0       0       0       0
  6878 ;;      Temps:          0       0       0       0
  6879 ;;      Totals:         0       0       0       0
  6880 ;;Total ram usage:        0 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:   11
  6883 ;; This function calls:
  6884 ;;		_TIMER0_On
  6885 ;; This function is called by:
  6886 ;;		_Mouvement_Bequille
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text39
  6891  00268C                     __ptext39:
  6892                           	opt stack 0
  6893  00268C                     _Init_Moteur_Bequille:
  6894                           	opt stack 17
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;action.c: 251: nb_s_fonctionnement = 0;
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;incstack = 0
  6901  00268C  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  6902                           
  6903                           ;action.c: 252: nb_Pion = 0;
  6904  00268E  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  6905                           
  6906                           ;action.c: 253: nb_100ms_Timer_5 = 0;
  6907  002690  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;action.c: 254: TIMER0_On();
  6911  002692  ECA1  F012         	call	_TIMER0_On	;wreg free
  6912                           
  6913                           ; BSR set to: 0
  6914                           ;action.c: 256: INTCON3bits.INT2IE = 1;
  6915  002696  88F0               	bsf	intcon3,4,c	;volatile
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;action.c: 257: Compteur_IRQ_I_Moteur_2 = 0;
  6919  002698  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6920                           
  6921                           ; BSR set to: 0
  6922  00269A  0012               	return		;funcret
  6923  00269C                     __end_of_Init_Moteur_Bequille:
  6924                           	opt stack 0
  6925                           tblptru	equ	0xFF8
  6926                           prodh	equ	0xFF4
  6927                           prodl	equ	0xFF3
  6928                           intcon	equ	0xFF2
  6929                           intcon2	equ	0xFF1
  6930                           intcon3	equ	0xFF0
  6931                           postinc0	equ	0xFEE
  6932                           wreg	equ	0xFE8
  6933                           postdec1	equ	0xFE5
  6934                           fsr1h	equ	0xFE2
  6935                           fsr1l	equ	0xFE1
  6936                           indf2	equ	0xFDF
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function _TIMER0_On *****************
  6942 ;; Defined at:
  6943 ;;		line 87 in file "timer.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  1    wreg      void 
  6950 ;; Registers used:
  6951 ;;		wreg, status,2
  6952 ;; Tracked objects:
  6953 ;;		On entry : 3F/0
  6954 ;;		On exit  : 3F/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6957 ;;      Params:         0       0       0       0
  6958 ;;      Locals:         0       0       0       0
  6959 ;;      Temps:          0       0       0       0
  6960 ;;      Totals:         0       0       0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:   10
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_Init_Moteur_1
  6968 ;;		_Init_Moteur_2
  6969 ;;		_Init_Moteur_Bequille
  6970 ;;		_delay_s
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text40
  6975  002542                     __ptext40:
  6976                           	opt stack 0
  6977  002542                     _TIMER0_On:
  6978                           	opt stack 18
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;timer.c: 88: TMR0H=0;
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;incstack = 0
  6985  002542  6AD7               	clrf	4055,c	;volatile
  6986                           
  6987                           ;timer.c: 89: TMR0L=0;
  6988  002544  6AD6               	clrf	4054,c	;volatile
  6989                           
  6990                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6991  002546  BED5               	btfsc	4053,7,c	;volatile
  6992  002548  D004               	goto	l8293
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6996  00254A  8AF2               	bsf	intcon,5,c	;volatile
  6997                           
  6998                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6999  00254C  94F2               	bcf	intcon,2,c	;volatile
  7000                           
  7001                           ;timer.c: 94: LATC5=1;
  7002  00254E  8A8B               	bsf	3979,5,c	;volatile
  7003                           
  7004                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  7005  002550  8ED5               	bsf	4053,7,c	;volatile
  7006  002552                     l8293:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;timer.c: 97: }
  7010                           ;timer.c: 98: TIMER0_Etat = 1;
  7011  002552  0E01               	movlw	1
  7012  002554  6F88               	movwf	_TIMER0_Etat& (0+255),b
  7013                           
  7014                           ; BSR set to: 0
  7015  002556  0C01               	retlw	1	;funcret
  7016  002558                     __end_of_TIMER0_On:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           prodh	equ	0xFF4
  7020                           prodl	equ	0xFF3
  7021                           intcon	equ	0xFF2
  7022                           intcon2	equ	0xFF1
  7023                           intcon3	equ	0xFF0
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           postdec1	equ	0xFE5
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  7035 ;; Defined at:
  7036 ;;		line 192 in file "adc.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;		None
  7039 ;; Auto vars:     Size  Location     Type
  7040 ;;		None
  7041 ;; Return value:  Size  Location     Type
  7042 ;;                  1    wreg      void 
  7043 ;; Registers used:
  7044 ;;		wreg, status,2
  7045 ;; Tracked objects:
  7046 ;;		On entry : 3F/0
  7047 ;;		On exit  : 3F/0
  7048 ;;		Unchanged: 3F/0
  7049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7050 ;;      Params:         0       0       0       0
  7051 ;;      Locals:         0       0       0       0
  7052 ;;      Temps:          0       0       0       0
  7053 ;;      Totals:         0       0       0       0
  7054 ;;Total ram usage:        0 bytes
  7055 ;; Hardware stack levels used:    1
  7056 ;; Hardware stack levels required when called:   10
  7057 ;; This function calls:
  7058 ;;		Nothing
  7059 ;; This function is called by:
  7060 ;;		_Mouvement_Bequille
  7061 ;;		_Mouvement_Z
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text41
  7066  001D18                     __ptext41:
  7067                           	opt stack 0
  7068  001D18                     _Init_ADC_Single_Shoot_I_Moteur_2:
  7069                           	opt stack 18
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;incstack = 0
  7076  001D18  9AC2               	bcf	4034,5,c	;volatile
  7077                           
  7078                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  7079  001D1A  98C2               	bcf	4034,4,c	;volatile
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  7083  001D1C  50C2               	movf	4034,w,c	;volatile
  7084  001D1E  0BF3               	andlw	-13
  7085  001D20  0904               	iorlw	4
  7086  001D22  6EC2               	movwf	4034,c	;volatile
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;adc.c: 199: ADCON0bits.ADON = 0;
  7090  001D24  90C2               	bcf	4034,0,c	;volatile
  7091                           
  7092                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  7093  001D26  0E3F               	movlw	-193
  7094  001D28  16C1               	andwf	4033,f,c	;volatile
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  7098  001D2A  98C1               	bcf	4033,4,c	;volatile
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;adc.c: 212: ADCON1 = 0b00000000;
  7102  001D2C  6AC1               	clrf	4033,c	;volatile
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  7106  001D2E  9EC0               	bcf	4032,7,c	;volatile
  7107                           
  7108                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  7109  001D30  50C0               	movf	4032,w,c	;volatile
  7110  001D32  0B87               	andlw	-121
  7111  001D34  0910               	iorlw	16
  7112  001D36  6EC0               	movwf	4032,c	;volatile
  7113                           
  7114                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  7115  001D38  50C0               	movf	4032,w,c	;volatile
  7116  001D3A  0BF8               	andlw	-8
  7117  001D3C  0904               	iorlw	4
  7118  001D3E  6EC0               	movwf	4032,c	;volatile
  7119                           
  7120                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  7121  001D40  50C0               	movf	4032,w,c	;volatile
  7122  001D42  0BF8               	andlw	-8
  7123  001D44  0901               	iorlw	1
  7124  001D46  6EC0               	movwf	4032,c	;volatile
  7125                           
  7126                           ;adc.c: 219: ADCON2 = 0b00010100;
  7127  001D48  0E14               	movlw	20
  7128  001D4A  6EC0               	movwf	4032,c	;volatile
  7129                           
  7130                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  7131  001D4C  50C0               	movf	4032,w,c	;volatile
  7132  001D4E  0BF8               	andlw	-8
  7133  001D50  0901               	iorlw	1
  7134  001D52  6EC0               	movwf	4032,c	;volatile
  7135                           
  7136                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  7137  001D54  0E3F               	movlw	-193
  7138  001D56  169A               	andwf	3994,f,c	;volatile
  7139                           
  7140                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  7141  001D58  509A               	movf	3994,w,c	;volatile
  7142  001D5A  0BE0               	andlw	-32
  7143  001D5C  0910               	iorlw	16
  7144  001D5E  6E9A               	movwf	3994,c	;volatile
  7145                           
  7146                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  7147  001D60  0EE0               	movlw	-32
  7148  001D62  169A               	andwf	3994,f,c	;volatile
  7149                           
  7150                           ;adc.c: 235: ADCON3 = 0b00010000;
  7151  001D64  0E10               	movlw	16
  7152  001D66  6E9A               	movwf	3994,c	;volatile
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;adc.c: 236: ADCON3 = 0x00;
  7156  001D68  6A9A               	clrf	3994,c	;volatile
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;adc.c: 241: ADCHS = 0b00000000;
  7160  001D6A  6A99               	clrf	3993,c	;volatile
  7161                           
  7162                           ;adc.c: 242: ANSEL0 = 0b00000011;
  7163  001D6C  0E03               	movlw	3
  7164  001D6E  6EB8               	movwf	4024,c	;volatile
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;adc.c: 244: ANSEL1 = 0b00000000;
  7168  001D70  6AB9               	clrf	4025,c	;volatile
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;adc.c: 253: PIE1bits.ADIE = 1;
  7172  001D72  8C9D               	bsf	3997,6,c	;volatile
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;adc.c: 254: ADIF=0;
  7176  001D74  9C9E               	bcf	3998,6,c	;volatile
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;adc.c: 255: IPR1bits.ADIP = 0;
  7180  001D76  9C9F               	bcf	3999,6,c	;volatile
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;adc.c: 260: ADON = 1;
  7184  001D78  80C2               	bsf	4034,0,c	;volatile
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  7188  001D7A  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  7189                           
  7190                           ; BSR set to: 0
  7191  001D7C  0012               	return		;funcret
  7192  001D7E                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  7193                           	opt stack 0
  7194                           tblptru	equ	0xFF8
  7195                           prodh	equ	0xFF4
  7196                           prodl	equ	0xFF3
  7197                           intcon	equ	0xFF2
  7198                           intcon2	equ	0xFF1
  7199                           intcon3	equ	0xFF0
  7200                           postinc0	equ	0xFEE
  7201                           wreg	equ	0xFE8
  7202                           postdec1	equ	0xFE5
  7203                           fsr1h	equ	0xFE2
  7204                           fsr1l	equ	0xFE1
  7205                           indf2	equ	0xFDF
  7206                           fsr2h	equ	0xFDA
  7207                           fsr2l	equ	0xFD9
  7208                           status	equ	0xFD8
  7209                           
  7210 ;; *************** function _Detection_Pion_Off *****************
  7211 ;; Defined at:
  7212 ;;		line 126 in file "pion.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		None
  7221 ;; Tracked objects:
  7222 ;;		On entry : 3D/0
  7223 ;;		On exit  : 3D/0
  7224 ;;		Unchanged: 3D/0
  7225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7226 ;;      Params:         0       0       0       0
  7227 ;;      Locals:         0       0       0       0
  7228 ;;      Temps:          0       0       0       0
  7229 ;;      Totals:         0       0       0       0
  7230 ;;Total ram usage:        0 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:   10
  7233 ;; This function calls:
  7234 ;;		Nothing
  7235 ;; This function is called by:
  7236 ;;		_Mouvement_Bequille
  7237 ;;		_Mouvement_Z
  7238 ;;		_Mouvement_X
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           	psect	text42
  7243  00272E                     __ptext42:
  7244                           	opt stack 0
  7245  00272E                     _Detection_Pion_Off:
  7246                           	opt stack 18
  7247                           
  7248                           ;pion.c: 141: Detecteur_Pion = 0;
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;incstack = 0
  7252  00272E  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  7253                           
  7254                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  7255  002730  92A3               	bcf	4003,1,c	;volatile
  7256                           
  7257                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  7258  002732  92A4               	bcf	4004,1,c	;volatile
  7259  002734  0012               	return		;funcret
  7260  002736                     __end_of_Detection_Pion_Off:
  7261                           	opt stack 0
  7262                           tblptru	equ	0xFF8
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           intcon2	equ	0xFF1
  7267                           intcon3	equ	0xFF0
  7268                           postinc0	equ	0xFEE
  7269                           wreg	equ	0xFE8
  7270                           postdec1	equ	0xFE5
  7271                           fsr1h	equ	0xFE2
  7272                           fsr1l	equ	0xFE1
  7273                           indf2	equ	0xFDF
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278 ;; *************** function _Check_List_Moteur_Bequille *****************
  7279 ;; Defined at:
  7280 ;;		line 268 in file "action.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;		None
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;		None
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      void 
  7287 ;; Registers used:
  7288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7294 ;;      Params:         0       0       0       0
  7295 ;;      Locals:         0       0       0       0
  7296 ;;      Temps:          0       1       0       0
  7297 ;;      Totals:         0       1       0       0
  7298 ;;Total ram usage:        1 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:   17
  7301 ;; This function calls:
  7302 ;;		_Alarme_On
  7303 ;;		_Coupe_Moteur
  7304 ;;		_EUSART1_Check_Buffer
  7305 ;;		_Etat_Update
  7306 ;;		_SPI_Check_Buffer
  7307 ;;		___lbdiv
  7308 ;; This function is called by:
  7309 ;;		_Mouvement_Bequille
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text43
  7314  002072                     __ptext43:
  7315                           	opt stack 0
  7316  002072                     _Check_List_Moteur_Bequille:
  7317                           	opt stack 11
  7318                           
  7319                           ;action.c: 272: if (PORTBbits.RB4==0){
  7320                           
  7321                           ;incstack = 0
  7322  002072  B881               	btfsc	3969,4,c	;volatile
  7323  002074  D01C               	goto	l8663
  7324                           
  7325                           ;action.c: 277: if(PORTCbits.RC5 == 0){
  7326  002076  AA82               	btfss	3970,5,c	;volatile
  7327                           
  7328                           ;action.c: 278: Compteur_IRQ_I_Moteur_2 = 0;
  7329  002078  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  7330                           
  7331                           ;action.c: 279: }
  7332                           ;action.c: 283: EUSART1_Check_Buffer();
  7333  00207A  EC4F  F011         	call	_EUSART1_Check_Buffer	;wreg free
  7334                           
  7335                           ;action.c: 284: SPI_Check_Buffer();
  7336  00207E  EC39  F011         	call	_SPI_Check_Buffer	;wreg free
  7337                           
  7338                           ;action.c: 288: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  7339  002082  0100               	movlb	0	; () banked
  7340  002084  51A2               	movf	_nb_s_bequille& (0+255),w,b
  7341  002086  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  7342  002088  E20E               	bc	l998
  7343                           
  7344                           ; BSR set to: 0
  7345  00208A  0E02               	movlw	2
  7346  00208C  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  7347  00208E  0C02               	retlw	2
  7348                           
  7349                           ; BSR set to: 0
  7350  002090  0E05               	movlw	5
  7351  002092  6E0F               	movwf	___lbdiv@divisor,c
  7352  002094  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  7353  002096  ECEC  F010         	call	___lbdiv
  7354  00209A  0100               	movlb	0	; () banked
  7355  00209C  6FFE               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  7356  00209E  5192               	movf	_Bequille_I_Max& (0+255),w,b
  7357  0020A0  5DFE               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  7358  0020A2  A0D8               	btfss	status,0,c
  7359  0020A4  0012               	return	
  7360  0020A6                     l998:
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;action.c: 291: P4_busy = 0;
  7364  0020A6  6BAC               	clrf	_P4_busy& (0+255),b
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;action.c: 292: Etat_Update(0);
  7368  0020A8  0E00               	movlw	0
  7369  0020AA  EF3E  F012         	goto	_Etat_Update
  7370  0020AE                     l8663:
  7371                           
  7372                           ;action.c: 301: Coupe_Moteur();
  7373  0020AE  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  7374                           
  7375                           ;action.c: 302: Alarme_On(7);
  7376  0020B2  0E07               	movlw	7
  7377  0020B4  EF4E  F013         	goto	_Alarme_On
  7378  0020B8                     __end_of_Check_List_Moteur_Bequille:
  7379                           	opt stack 0
  7380                           tblptru	equ	0xFF8
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           intcon	equ	0xFF2
  7384                           intcon2	equ	0xFF1
  7385                           intcon3	equ	0xFF0
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           postdec1	equ	0xFE5
  7389                           fsr1h	equ	0xFE2
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           fsr2h	equ	0xFDA
  7393                           fsr2l	equ	0xFD9
  7394                           status	equ	0xFD8
  7395                           
  7396 ;; *************** function ___lbdiv *****************
  7397 ;; Defined at:
  7398 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  7399 ;; Parameters:    Size  Location     Type
  7400 ;;  dividend        1    wreg     unsigned char 
  7401 ;;  divisor         1   14[COMRAM] unsigned char 
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;  dividend        1   15[COMRAM] unsigned char 
  7404 ;;  quotient        1   17[COMRAM] unsigned char 
  7405 ;;  counter         1   16[COMRAM] unsigned char 
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      unsigned char 
  7408 ;; Registers used:
  7409 ;;		wreg, status,2, status,0
  7410 ;; Tracked objects:
  7411 ;;		On entry : 3F/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7415 ;;      Params:         1       0       0       0
  7416 ;;      Locals:         3       0       0       0
  7417 ;;      Temps:          0       0       0       0
  7418 ;;      Totals:         4       0       0       0
  7419 ;;Total ram usage:        4 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:   10
  7422 ;; This function calls:
  7423 ;;		Nothing
  7424 ;; This function is called by:
  7425 ;;		_Check_List_Moteur_Bequille
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text44
  7430  0021D8                     __ptext44:
  7431                           	opt stack 0
  7432  0021D8                     ___lbdiv:
  7433                           	opt stack 17
  7434                           
  7435                           ;incstack = 0
  7436                           ;___lbdiv@dividend stored from wreg
  7437  0021D8  6E10               	movwf	___lbdiv@dividend,c
  7438  0021DA  6A12               	clrf	___lbdiv@quotient,c
  7439  0021DC  500F               	movf	___lbdiv@divisor,w,c
  7440  0021DE  E014               	bz	l8433
  7441  0021E0  0E01               	movlw	1
  7442  0021E2  6E11               	movwf	___lbdiv@counter,c
  7443  0021E4  D003               	goto	l8421
  7444  0021E6                     l8417:
  7445  0021E6  90D8               	bcf	status,0,c
  7446  0021E8  360F               	rlcf	___lbdiv@divisor,f,c
  7447  0021EA  2A11               	incf	___lbdiv@counter,f,c
  7448  0021EC                     l8421:
  7449  0021EC  AE0F               	btfss	___lbdiv@divisor,7,c
  7450  0021EE  D7FB               	goto	l8417
  7451  0021F0                     l8423:
  7452  0021F0  90D8               	bcf	status,0,c
  7453  0021F2  3612               	rlcf	___lbdiv@quotient,f,c
  7454  0021F4  500F               	movf	___lbdiv@divisor,w,c
  7455  0021F6  5C10               	subwf	___lbdiv@dividend,w,c
  7456  0021F8  E303               	bnc	l8429
  7457  0021FA  500F               	movf	___lbdiv@divisor,w,c
  7458  0021FC  5E10               	subwf	___lbdiv@dividend,f,c
  7459  0021FE  8012               	bsf	___lbdiv@quotient,0,c
  7460  002200                     l8429:
  7461  002200  90D8               	bcf	status,0,c
  7462  002202  320F               	rrcf	___lbdiv@divisor,f,c
  7463  002204  2E11               	decfsz	___lbdiv@counter,f,c
  7464  002206  D7F4               	goto	l8423
  7465  002208                     l8433:
  7466  002208  5012               	movf	___lbdiv@quotient,w,c
  7467  00220A  0012               	return		;funcret
  7468  00220C                     __end_of___lbdiv:
  7469                           	opt stack 0
  7470                           tblptru	equ	0xFF8
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           intcon	equ	0xFF2
  7474                           intcon2	equ	0xFF1
  7475                           intcon3	equ	0xFF0
  7476                           postinc0	equ	0xFEE
  7477                           wreg	equ	0xFE8
  7478                           postdec1	equ	0xFE5
  7479                           fsr1h	equ	0xFE2
  7480                           fsr1l	equ	0xFE1
  7481                           indf2	equ	0xFDF
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _SPI_Check_Buffer *****************
  7487 ;; Defined at:
  7488 ;;		line 348 in file "spi.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;		None
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      void 
  7495 ;; Registers used:
  7496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7502 ;;      Params:         0       0       0       0
  7503 ;;      Locals:         0       0       0       0
  7504 ;;      Temps:          0       0       0       0
  7505 ;;      Totals:         0       0       0       0
  7506 ;;Total ram usage:        0 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:   16
  7509 ;; This function calls:
  7510 ;;		_EUSART1_RX_T3_LOCAL
  7511 ;; This function is called by:
  7512 ;;		_Cycle
  7513 ;;		_Check_List_Moteur_1
  7514 ;;		_Check_List_Moteur_2
  7515 ;;		_Check_List_Moteur_Bequille
  7516 ;;		_Mouvement_X
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text45
  7521  002272                     __ptext45:
  7522                           	opt stack 0
  7523  002272                     _SPI_Check_Buffer:
  7524                           	opt stack 13
  7525                           
  7526                           ;spi.c: 396: if (SPI_full == 1) {
  7527                           
  7528                           ;incstack = 0
  7529  002272  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7530  002274  0012               	return	
  7531                           
  7532                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  7533                           ;spi.c: 400: SPI_RX_TEXT[1],
  7534                           ;spi.c: 401: SPI_RX_TEXT[2],
  7535                           ;spi.c: 402: SPI_RX_TEXT[3],
  7536                           ;spi.c: 403: SPI_RX_TEXT[4],
  7537                           ;spi.c: 404: SPI_RX_TEXT[5],
  7538                           ;spi.c: 405: SPI_RX_TEXT[6],
  7539                           ;spi.c: 406: SPI_RX_TEXT[7]);
  7540  002276  C101  F280         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7541  00227A  C102  F281         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7542  00227E  C103  F282         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7543  002282  C104  F283         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7544  002286  C105  F284         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7545  00228A  C106  F285         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7546  00228E  C107  F286         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7547  002292  0101               	movlb	1	; () banked
  7548  002294  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  7549  002296  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7550                           
  7551                           ;spi.c: 408: SPI_full = 0;
  7552  00229A  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7553  00229C  0012               	return		;funcret
  7554  00229E                     __end_of_SPI_Check_Buffer:
  7555                           	opt stack 0
  7556                           tblptru	equ	0xFF8
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           intcon2	equ	0xFF1
  7561                           intcon3	equ	0xFF0
  7562                           postinc0	equ	0xFEE
  7563                           wreg	equ	0xFE8
  7564                           postdec1	equ	0xFE5
  7565                           fsr1h	equ	0xFE2
  7566                           fsr1l	equ	0xFE1
  7567                           indf2	equ	0xFDF
  7568                           fsr2h	equ	0xFDA
  7569                           fsr2l	equ	0xFD9
  7570                           status	equ	0xFD8
  7571                           
  7572 ;; *************** function _EUSART1_Check_Buffer *****************
  7573 ;; Defined at:
  7574 ;;		line 268 in file "eusart.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;		None
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      void 
  7581 ;; Registers used:
  7582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7588 ;;      Params:         0       0       0       0
  7589 ;;      Locals:         0       0       0       0
  7590 ;;      Temps:          0       0       0       0
  7591 ;;      Totals:         0       0       0       0
  7592 ;;Total ram usage:        0 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:   16
  7595 ;; This function calls:
  7596 ;;		_EUSART1_RX_T3_LOCAL
  7597 ;; This function is called by:
  7598 ;;		_Cycle
  7599 ;;		_Check_List_Moteur_1
  7600 ;;		_Check_List_Moteur_2
  7601 ;;		_Check_List_Moteur_Bequille
  7602 ;;		_Mouvement_X
  7603 ;;		_delay_s
  7604 ;; This function uses a non-reentrant model
  7605 ;;
  7606                           
  7607                           	psect	text46
  7608  00229E                     __ptext46:
  7609                           	opt stack 0
  7610  00229E                     _EUSART1_Check_Buffer:
  7611                           	opt stack 12
  7612                           
  7613                           ;eusart.c: 270: if (RX1_full == 1) {
  7614                           
  7615                           ;incstack = 0
  7616  00229E  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7617  0022A0  0012               	return	
  7618                           
  7619                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  7620                           ;eusart.c: 274: UART_RX_TEXT[1],
  7621                           ;eusart.c: 275: UART_RX_TEXT[2],
  7622                           ;eusart.c: 276: UART_RX_TEXT[3],
  7623                           ;eusart.c: 277: UART_RX_TEXT[4],
  7624                           ;eusart.c: 278: UART_RX_TEXT[5],
  7625                           ;eusart.c: 279: UART_RX_TEXT[6],
  7626                           ;eusart.c: 280: UART_RX_TEXT[7]);
  7627  0022A2  C1C1  F280         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7628  0022A6  C1C2  F281         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7629  0022AA  C1C3  F282         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7630  0022AE  C1C4  F283         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7631  0022B2  C1C5  F284         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7632  0022B6  C1C6  F285         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7633  0022BA  C1C7  F286         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7634  0022BE  0101               	movlb	1	; () banked
  7635  0022C0  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  7636  0022C2  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7637                           
  7638                           ;eusart.c: 282: RX1_full = 0;
  7639  0022C6  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7640  0022C8  0012               	return		;funcret
  7641  0022CA                     __end_of_EUSART1_Check_Buffer:
  7642                           	opt stack 0
  7643                           tblptru	equ	0xFF8
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           intcon2	equ	0xFF1
  7648                           intcon3	equ	0xFF0
  7649                           postinc0	equ	0xFEE
  7650                           wreg	equ	0xFE8
  7651                           postdec1	equ	0xFE5
  7652                           fsr1h	equ	0xFE2
  7653                           fsr1l	equ	0xFE1
  7654                           indf2	equ	0xFDF
  7655                           fsr2h	equ	0xFDA
  7656                           fsr2l	equ	0xFD9
  7657                           status	equ	0xFD8
  7658                           
  7659 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  7660 ;; Defined at:
  7661 ;;		line 822 in file "eusart.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;  Ad              1    wreg     unsigned char 
  7664 ;;  Da              1    0[BANK2 ] unsigned char 
  7665 ;;  A               1    1[BANK2 ] unsigned char 
  7666 ;;  B               1    2[BANK2 ] unsigned char 
  7667 ;;  C               1    3[BANK2 ] unsigned char 
  7668 ;;  D               1    4[BANK2 ] unsigned char 
  7669 ;;  E               1    5[BANK2 ] unsigned char 
  7670 ;;  F               1    6[BANK2 ] unsigned char 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;  Ad              1   63[COMRAM] unsigned char 
  7673 ;;  i               2   64[COMRAM] int 
  7674 ;;  Reponse         1    0        unsigned char 
  7675 ;; Return value:  Size  Location     Type
  7676 ;;                  1    wreg      void 
  7677 ;; Registers used:
  7678 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7679 ;; Tracked objects:
  7680 ;;		On entry : 3F/1
  7681 ;;		On exit  : 0/0
  7682 ;;		Unchanged: 0/0
  7683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7684 ;;      Params:         0       0       0       7
  7685 ;;      Locals:         3       0       0       0
  7686 ;;      Temps:          0       4       0       0
  7687 ;;      Totals:         3       4       0       7
  7688 ;;Total ram usage:       14 bytes
  7689 ;; Hardware stack levels used:    1
  7690 ;; Hardware stack levels required when called:   15
  7691 ;; This function calls:
  7692 ;;		_Alarme_On
  7693 ;;		_Coupe_Moteur
  7694 ;;		_EUSART1_Buffer_Send
  7695 ;;		_Etat_Get
  7696 ;;		_Etat_Intitule
  7697 ;;		_Etat_Update
  7698 ;;		_IRQ_Execution
  7699 ;;		___awmod
  7700 ;;		_delay_1s
  7701 ;;		_sprintf
  7702 ;; This function is called by:
  7703 ;;		_EUSART1_Check_Buffer
  7704 ;;		_SPI_Check_Buffer
  7705 ;; This function uses a non-reentrant model
  7706 ;;
  7707                           
  7708                           	psect	text47
  7709  0000D2                     __ptext47:
  7710                           	opt stack 0
  7711  0000D2                     _EUSART1_RX_T3_LOCAL:
  7712                           	opt stack 12
  7713                           
  7714                           ;incstack = 0
  7715                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  7716  0000D2  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  7717                           
  7718                           ;eusart.c: 823: int i;
  7719                           ;eusart.c: 824: unsigned char Reponse;
  7720                           ;eusart.c: 830: switch (Ad) {
  7721  0000D4  D391               	goto	l8209
  7722  0000D6                     l7919:
  7723                           
  7724                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  7725  0000D6  C280  F0FA         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  7726  0000DA  0ED0               	movlw	208
  7727  0000DC  0100               	movlb	0	; () banked
  7728  0000DE  27FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7729  0000E0  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7730  0000E2  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7731  0000E4  508B               	movf	3979,w,c	;volatile
  7732  0000E6  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7733  0000E8  0BFB               	andlw	-5
  7734  0000EA  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7735  0000EC  6E8B               	movwf	3979,c	;volatile
  7736                           
  7737                           ;eusart.c: 847: break;
  7738  0000EE  0012               	return	
  7739  0000F0                     l7921:
  7740                           
  7741                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  7742  0000F0  0EAD               	movlw	low _UART_TX_TEXT
  7743  0000F2  6E1B               	movwf	sprintf@sp,c
  7744  0000F4  0EB9               	movlw	low (STR_4+30)
  7745  0000F6  6E1C               	movwf	sprintf@f,c
  7746  0000F8  0E3F               	movlw	high (STR_4+30)
  7747  0000FA  6E1D               	movwf	sprintf@f+1,c
  7748  0000FC  C09B  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  7749  000100  6A1F               	clrf	?_sprintf+4,c
  7750  000102  EC6C  F004         	call	_sprintf	;wreg free
  7751  000106                     l7923:
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  7755  000106  0EAD               	movlw	low _UART_TX_TEXT
  7756  000108  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  7757  00010A  EFC1  F00B         	goto	_EUSART1_Buffer_Send	;wreg free
  7758  00010E                     l7925:
  7759                           
  7760                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  7761  00010E  0EAD               	movlw	low _UART_TX_TEXT
  7762  000110  6E1B               	movwf	sprintf@sp,c
  7763  000112  0EB7               	movlw	low STR_2
  7764  000114  6E1C               	movwf	sprintf@f,c
  7765  000116  0E3E               	movlw	high STR_2
  7766  000118  6E1D               	movwf	sprintf@f+1,c
  7767  00011A  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7768  00011E  6A1F               	clrf	?_sprintf+4,c
  7769  000120  C09B  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  7770  000124  6A21               	clrf	?_sprintf+6,c
  7771  000126  C09A  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  7772  00012A  6A23               	clrf	?_sprintf+8,c
  7773  00012C  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  7774  000130  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  7775  000134  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  7776  000138  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  7777  00013C  C09D  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  7778  000140  6A29               	clrf	?_sprintf+14,c
  7779  000142  C09F  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  7780  000146  6A2B               	clrf	?_sprintf+16,c
  7781  000148  EC6C  F004         	call	_sprintf	;wreg free
  7782  00014C  D7DC               	goto	l7923
  7783  00014E                     l7929:
  7784                           
  7785                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  7786  00014E  0EAD               	movlw	low _UART_TX_TEXT
  7787  000150  6E1B               	movwf	sprintf@sp,c
  7788  000152  0EEC               	movlw	low STR_3
  7789  000154  6E1C               	movwf	sprintf@f,c
  7790  000156  0E3F               	movlw	high STR_3
  7791  000158  6E1D               	movwf	sprintf@f+1,c
  7792  00015A  0E00               	movlw	0
  7793  00015C  EC20  F011         	call	_Etat_Get
  7794  000160  6E1E               	movwf	?_sprintf+3,c
  7795  000162  6A1F               	clrf	?_sprintf+4,c
  7796  000164  0E01               	movlw	1
  7797  000166  EC20  F011         	call	_Etat_Get
  7798  00016A  6E20               	movwf	?_sprintf+5,c
  7799  00016C  6A21               	clrf	?_sprintf+6,c
  7800  00016E  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7801  000172  6A23               	clrf	?_sprintf+8,c
  7802  000174  EC6C  F004         	call	_sprintf	;wreg free
  7803  000178  D7C6               	goto	l7923
  7804  00017A                     l1389:
  7805                           
  7806                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  7807  00017A  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  7808  00017C  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  7809  00017E                     l7937:
  7810                           
  7811                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  7812  00017E  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  7813  000180  08B6               	sublw	low (_UART_TX_TEXT+9)
  7814  000182  6ED9               	movwf	fsr2l,c
  7815  000184  6ADA               	clrf	fsr2h,c
  7816  000186  504C               	movf	_Etat_Precedent_Index,w,c
  7817  000188  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  7818  00018A  6E0F               	movwf	___awmod@dividend,c
  7819  00018C  0E00               	movlw	0
  7820  00018E  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  7821  000190  6E10               	movwf	___awmod@dividend+1,c
  7822  000192  6A12               	clrf	___awmod@divisor+1,c
  7823  000194  0E0A               	movlw	10
  7824  000196  6E11               	movwf	___awmod@divisor,c
  7825  000198  EC25  F00E         	call	___awmod	;wreg free
  7826  00019C  500F               	movf	?___awmod,w,c
  7827  00019E  0F6A               	addlw	low _Etat_Log
  7828  0001A0  6EE1               	movwf	fsr1l,c
  7829  0001A2  6AE2               	clrf	fsr1h,c
  7830  0001A4  50E7               	movf	indf1,w,c
  7831  0001A6  EC06  F011         	call	_Etat_Intitule
  7832  0001AA  6EDF               	movwf	indf2,c
  7833  0001AC  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  7834  0001AE  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  7835  0001B0  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  7836  0001B2  D7E5               	goto	l7937
  7837  0001B4  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  7838  0001B6  E103               	bnz	u6170
  7839  0001B8  0E0A               	movlw	10
  7840  0001BA  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  7841  0001BC  E3E0               	bnc	l7937
  7842  0001BE                     u6170:
  7843                           
  7844                           ;eusart.c: 882: }
  7845                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  7846  0001BE  0100               	movlb	0	; () banked
  7847  0001C0  6BB7               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  7848  0001C2  D7A1               	goto	l7923
  7849  0001C4                     l7945:
  7850                           
  7851                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  7852  0001C4  0EAD               	movlw	low _UART_TX_TEXT
  7853  0001C6  6E1B               	movwf	sprintf@sp,c
  7854  0001C8  0E9B               	movlw	low STR_4
  7855  0001CA  6E1C               	movwf	sprintf@f,c
  7856  0001CC  0E3F               	movlw	high STR_4
  7857  0001CE  6E1D               	movwf	sprintf@f+1,c
  7858  0001D0  C04B  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  7859  0001D4  6A1F               	clrf	?_sprintf+4,c
  7860  0001D6  C0A1  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  7861  0001DA  6A21               	clrf	?_sprintf+6,c
  7862  0001DC  C0A6  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  7863  0001E0  6A23               	clrf	?_sprintf+8,c
  7864  0001E2  EC6C  F004         	call	_sprintf	;wreg free
  7865  0001E6  D78F               	goto	l7923
  7866  0001E8                     l7949:
  7867                           
  7868                           ;eusart.c: 898: consigne = (char) (5 * Da);
  7869  0001E8  0102               	movlb	2	; () banked
  7870  0001EA  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7871  0001EC  0D05               	mullw	5
  7872  0001EE  CFF3 F098          	movff	prodl,_consigne	;volatile
  7873                           
  7874                           ;eusart.c: 900: break;
  7875  0001F2  0012               	return	
  7876  0001F4                     l7951:
  7877                           
  7878                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  7879  0001F4  0EAD               	movlw	low _UART_TX_TEXT
  7880  0001F6  6E1B               	movwf	sprintf@sp,c
  7881  0001F8  0EF9               	movlw	low STR_5
  7882  0001FA  6E1C               	movwf	sprintf@f,c
  7883  0001FC  0E3F               	movlw	high STR_5
  7884  0001FE  6E1D               	movwf	sprintf@f+1,c
  7885  000200  C0AC  F01E         	movff	_P4_busy,?_sprintf+3
  7886  000204  6A1F               	clrf	?_sprintf+4,c
  7887  000206  EC6C  F004         	call	_sprintf	;wreg free
  7888  00020A  D77D               	goto	l7923
  7889  00020C                     l7955:
  7890                           
  7891                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  7892  00020C  0EAD               	movlw	low _UART_TX_TEXT
  7893  00020E  6E1B               	movwf	sprintf@sp,c
  7894  000210  0EB9               	movlw	low (STR_4+30)
  7895  000212  6E1C               	movwf	sprintf@f,c
  7896  000214  0E3F               	movlw	high (STR_4+30)
  7897  000216  6E1D               	movwf	sprintf@f+1,c
  7898  000218  0102               	movlb	2	; () banked
  7899  00021A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7900  00021C  0FD0               	addlw	208
  7901  00021E  EC20  F011         	call	_Etat_Get
  7902  000222  6E1E               	movwf	?_sprintf+3,c
  7903  000224  6A1F               	clrf	?_sprintf+4,c
  7904  000226  EC6C  F004         	call	_sprintf	;wreg free
  7905  00022A  D76D               	goto	l7923
  7906  00022C                     l7959:
  7907                           
  7908                           ;eusart.c: 920: Etat_Update(Da);
  7909  00022C  0102               	movlb	2	; () banked
  7910  00022E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7911  000230  EF3E  F012         	goto	_Etat_Update
  7912  000234                     l7961:
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  7916  000234  0102               	movlb	2	; () banked
  7917  000236  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7918  000238  0D0A               	mullw	10
  7919  00023A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7920  00023E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7921  000240  0D64               	mullw	100
  7922  000242  50F3               	movf	prodl,w,c
  7923  000244  0100               	movlb	0	; () banked
  7924  000246  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7925  000248  0102               	movlb	2	; () banked
  7926  00024A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7927  00024C  0F30               	addlw	48
  7928  00024E  0100               	movlb	0	; () banked
  7929  000250  6F93               	movwf	_Pelle_I_Max& (0+255),b
  7930                           
  7931                           ;eusart.c: 943: break;
  7932  000252  0012               	return	
  7933  000254                     l7963:
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7937  000254  0102               	movlb	2	; () banked
  7938  000256  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7939  000258  0D0A               	mullw	10
  7940  00025A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7941  00025E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7942  000260  0D64               	mullw	100
  7943  000262  50F3               	movf	prodl,w,c
  7944  000264  0100               	movlb	0	; () banked
  7945  000266  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7946  000268  0102               	movlb	2	; () banked
  7947  00026A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7948  00026C  0F30               	addlw	48
  7949  00026E  0100               	movlb	0	; () banked
  7950  000270  6F92               	movwf	_Bequille_I_Max& (0+255),b
  7951                           
  7952                           ;eusart.c: 946: break;
  7953  000272  0012               	return	
  7954  000274                     l7967:
  7955  000274  0ED0               	movlw	208
  7956  000276  0100               	movlb	0	; () banked
  7957  000278  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7958  00027A  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7959  00027C  0102               	movlb	2	; () banked
  7960  00027E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7961  000280  0100               	movlb	0	; () banked
  7962  000282  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7963  000284  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7964  000286  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7965  000288  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7966  00028A  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7967  00028C  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7968                           
  7969                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7970                           ; Switch size 1, requested type "speed"
  7971                           ; Number of cases is 1, Range of values is 0 to 0
  7972                           ; switch strategies available:
  7973                           ; Name         Instructions Cycles
  7974                           ; simple_byte            4     3 (average)
  7975                           ;	Chosen strategy is simple_byte
  7976  00028E  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7977  000290  A4D8               	btfss	status,2,c
  7978  000292  0012               	return	
  7979                           
  7980                           ; BSR set to: 0
  7981                           ; Switch size 1, requested type "speed"
  7982                           ; Number of cases is 3, Range of values is 1 to 3
  7983                           ; switch strategies available:
  7984                           ; Name         Instructions Cycles
  7985                           ; simple_byte           10     6 (average)
  7986                           ;	Chosen strategy is simple_byte
  7987  000294  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7988  000296  0A01               	xorlw	1	; case 1
  7989  000298  B4D8               	btfsc	status,2,c
  7990  00029A  0012               	return	
  7991  00029C  0A03               	xorlw	3	; case 2
  7992  00029E  E0CA               	bz	l7961
  7993  0002A0  0A01               	xorlw	1	; case 3
  7994  0002A2  E0D8               	bz	l7963
  7995                           
  7996                           ; BSR set to: 0
  7997                           ;eusart.c: 949: break;
  7998  0002A4  0012               	return	
  7999  0002A6                     l7969:
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8003  0002A6  0102               	movlb	2	; () banked
  8004  0002A8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8005  0002AA  0D0A               	mullw	10
  8006  0002AC  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8007  0002B0  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8008  0002B2  0D64               	mullw	100
  8009  0002B4  50F3               	movf	prodl,w,c
  8010  0002B6  0100               	movlb	0	; () banked
  8011  0002B8  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8012  0002BA  0102               	movlb	2	; () banked
  8013  0002BC  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8014  0002BE  0F30               	addlw	48
  8015  0002C0  6E49               	movwf	_Consigne_en_A,c
  8016                           
  8017                           ; BSR set to: 2
  8018                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  8019  0002C2  C049  F098         	movff	_Consigne_en_A,_consigne	;volatile
  8020                           
  8021                           ; BSR set to: 2
  8022                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  8023  0002C6  C098  F097         	movff	_consigne,_Consigne_Max	;volatile
  8024                           
  8025                           ;eusart.c: 968: break;
  8026  0002CA  D0D6               	goto	l8021
  8027  0002CC                     l7975:
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8031  0002CC  0102               	movlb	2	; () banked
  8032  0002CE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8033  0002D0  0D0A               	mullw	10
  8034  0002D2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8035  0002D6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8036  0002D8  0D64               	mullw	100
  8037  0002DA  50F3               	movf	prodl,w,c
  8038  0002DC  0100               	movlb	0	; () banked
  8039  0002DE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8040  0002E0  0102               	movlb	2	; () banked
  8041  0002E2  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8042  0002E4  0F30               	addlw	48
  8043  0002E6  0100               	movlb	0	; () banked
  8044  0002E8  6FA7               	movwf	_nb_s_patinage& (0+255),b
  8045                           
  8046                           ;eusart.c: 971: break;
  8047  0002EA  D0C6               	goto	l8021
  8048  0002EC                     l7977:
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8052  0002EC  0102               	movlb	2	; () banked
  8053  0002EE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8054  0002F0  0D0A               	mullw	10
  8055  0002F2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8056  0002F6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8057  0002F8  0D64               	mullw	100
  8058  0002FA  50F3               	movf	prodl,w,c
  8059  0002FC  0100               	movlb	0	; () banked
  8060  0002FE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8061  000300  0102               	movlb	2	; () banked
  8062  000302  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8063  000304  0F30               	addlw	48
  8064  000306  0100               	movlb	0	; () banked
  8065  000308  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  8066                           
  8067                           ;eusart.c: 974: break;
  8068  00030A  D0B6               	goto	l8021
  8069  00030C                     l7979:
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  8073  00030C  0102               	movlb	2	; () banked
  8074  00030E  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8075  000310  0D0A               	mullw	10
  8076  000312  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8077  000316  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8078  000318  0D64               	mullw	100
  8079  00031A  50F3               	movf	prodl,w,c
  8080  00031C  0100               	movlb	0	; () banked
  8081  00031E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8082  000320  0102               	movlb	2	; () banked
  8083  000322  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8084  000324  0F30               	addlw	48
  8085  000326  0100               	movlb	0	; () banked
  8086  000328  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  8090  00032A  C0A4  F04E         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  8091                           
  8092                           ;eusart.c: 983: break;
  8093  00032E  D0A4               	goto	l8021
  8094  000330                     l7983:
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  8098  000330  0102               	movlb	2	; () banked
  8099  000332  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8100  000334  0D0A               	mullw	10
  8101  000336  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8102  00033A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8103  00033C  0D64               	mullw	100
  8104  00033E  50F3               	movf	prodl,w,c
  8105  000340  0100               	movlb	0	; () banked
  8106  000342  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8107  000344  0102               	movlb	2	; () banked
  8108  000346  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8109  000348  0F30               	addlw	48
  8110  00034A  0100               	movlb	0	; () banked
  8111  00034C  6FA3               	movwf	_nb_s_pelle& (0+255),b
  8112                           
  8113                           ;eusart.c: 986: break;
  8114  00034E  D094               	goto	l8021
  8115  000350                     l7985:
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  8119  000350  0102               	movlb	2	; () banked
  8120  000352  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8121  000354  0FD0               	addlw	208
  8122  000356  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  8123                           
  8124                           ; BSR set to: 2
  8125                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8126  000358  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8127                           
  8128                           ;eusart.c: 990: break;
  8129  00035C  D08D               	goto	l8021
  8130  00035E                     l7989:
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  8134  00035E  0102               	movlb	2	; () banked
  8135  000360  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8136  000362  0FD0               	addlw	208
  8137  000364  0100               	movlb	0	; () banked
  8138  000366  6F9D               	movwf	_Patinage_Nb_Essai& (0+255),b
  8139                           
  8140                           ; BSR set to: 0
  8141                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8142  000368  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8143                           
  8144                           ;eusart.c: 994: break;
  8145  00036C  D085               	goto	l8021
  8146  00036E                     l7993:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8150  00036E  0102               	movlb	2	; () banked
  8151  000370  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8152  000372  0D0A               	mullw	10
  8153  000374  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8154  000378  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8155  00037A  0D64               	mullw	100
  8156  00037C  50F3               	movf	prodl,w,c
  8157  00037E  0100               	movlb	0	; () banked
  8158  000380  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8159  000382  0102               	movlb	2	; () banked
  8160  000384  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8161  000386  0F30               	addlw	48
  8162  000388  6E49               	movwf	_Consigne_en_A,c
  8163                           
  8164                           ; BSR set to: 2
  8165                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  8166  00038A  C049  F096         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  8167                           
  8168                           ;eusart.c: 1000: break;
  8169  00038E  D074               	goto	l8021
  8170  000390                     l7997:
  8171                           
  8172                           ; BSR set to: 0
  8173                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8174  000390  0102               	movlb	2	; () banked
  8175  000392  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8176  000394  0D0A               	mullw	10
  8177  000396  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8178  00039A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8179  00039C  0D64               	mullw	100
  8180  00039E  50F3               	movf	prodl,w,c
  8181  0003A0  0100               	movlb	0	; () banked
  8182  0003A2  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8183  0003A4  0102               	movlb	2	; () banked
  8184  0003A6  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8185  0003A8  0F30               	addlw	48
  8186  0003AA  6E49               	movwf	_Consigne_en_A,c
  8187                           
  8188                           ; BSR set to: 2
  8189                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  8190  0003AC  C049  F095         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  8191                           
  8192                           ;eusart.c: 1006: break;
  8193  0003B0  D063               	goto	l8021
  8194  0003B2                     l8001:
  8195                           
  8196                           ; BSR set to: 0
  8197                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8198  0003B2  0102               	movlb	2	; () banked
  8199  0003B4  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8200  0003B6  0D0A               	mullw	10
  8201  0003B8  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8202  0003BC  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8203  0003BE  0D64               	mullw	100
  8204  0003C0  50F3               	movf	prodl,w,c
  8205  0003C2  0100               	movlb	0	; () banked
  8206  0003C4  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8207  0003C6  0102               	movlb	2	; () banked
  8208  0003C8  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8209  0003CA  0F30               	addlw	48
  8210  0003CC  6E49               	movwf	_Consigne_en_A,c
  8211                           
  8212                           ; BSR set to: 2
  8213                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  8214  0003CE  C049  F094         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  8215                           
  8216                           ;eusart.c: 1012: break;
  8217  0003D2  D052               	goto	l8021
  8218  0003D4                     l8007:
  8219  0003D4  0ED0               	movlw	208
  8220  0003D6  0100               	movlb	0	; () banked
  8221  0003D8  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8222  0003DA  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8223  0003DC  0102               	movlb	2	; () banked
  8224  0003DE  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8225  0003E0  0100               	movlb	0	; () banked
  8226  0003E2  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8227  0003E4  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8228  0003E6  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8229  0003E8  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8230  0003EA  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8231  0003EC  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8232                           
  8233                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8234                           ; Switch size 1, requested type "speed"
  8235                           ; Number of cases is 1, Range of values is 0 to 0
  8236                           ; switch strategies available:
  8237                           ; Name         Instructions Cycles
  8238                           ; simple_byte            4     3 (average)
  8239                           ;	Chosen strategy is simple_byte
  8240  0003EE  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8241  0003F0  E143               	bnz	l8021
  8242                           
  8243                           ; BSR set to: 0
  8244                           ; Switch size 1, requested type "speed"
  8245                           ; Number of cases is 10, Range of values is 0 to 9
  8246                           ; switch strategies available:
  8247                           ; Name         Instructions Cycles
  8248                           ; simple_byte           31    16 (average)
  8249                           ;	Chosen strategy is simple_byte
  8250  0003F2  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8251  0003F4  E101 D757          	bz	l7969
  8252  0003F8  0A01               	xorlw	1	; case 1
  8253  0003FA  E101 D767          	bz	l7975
  8254  0003FE  0A03               	xorlw	3	; case 2
  8255  000400  E101 D774          	bz	l7977
  8256  000404  0A01               	xorlw	1	; case 3
  8257  000406  E082               	bz	l7979
  8258  000408  0A07               	xorlw	7	; case 4
  8259  00040A  E092               	bz	l7983
  8260  00040C  0A01               	xorlw	1	; case 5
  8261  00040E  E0A0               	bz	l7985
  8262  000410  0A03               	xorlw	3	; case 6
  8263  000412  E0A5               	bz	l7989
  8264  000414  0A01               	xorlw	1	; case 7
  8265  000416  E0AB               	bz	l7993
  8266  000418  0A0F               	xorlw	15	; case 8
  8267  00041A  E0BA               	bz	l7997
  8268  00041C  0A01               	xorlw	1	; case 9
  8269  00041E  E0C9               	bz	l8001
  8270                           
  8271                           ; BSR set to: 0
  8272                           ;eusart.c: 1031: switch (Da - 0x30) {
  8273                           
  8274                           ;eusart.c: 1024: case 'V':
  8275  000420  D02B               	goto	l8021
  8276  000422                     l8009:
  8277                           
  8278                           ; BSR set to: 0
  8279                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  8280  000422  0EAD               	movlw	low _UART_TX_TEXT
  8281  000424  6E1B               	movwf	sprintf@sp,c
  8282  000426  0E6A               	movlw	low STR_7
  8283  000428  6E1C               	movwf	sprintf@f,c
  8284  00042A  0E3F               	movlw	high STR_7
  8285  00042C  6E1D               	movwf	sprintf@f+1,c
  8286  00042E  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  8287  000432  6A1F               	clrf	?_sprintf+4,c
  8288  000434  C0A7  F020         	movff	_nb_s_patinage,?_sprintf+5
  8289  000438  6A21               	clrf	?_sprintf+6,c
  8290  00043A  C0A5  F022         	movff	_nb_100ms_pion,?_sprintf+7
  8291  00043E  6A23               	clrf	?_sprintf+8,c
  8292  000440  C0A4  F024         	movff	_nb_100ms_platine,?_sprintf+9
  8293  000444  6A25               	clrf	?_sprintf+10,c
  8294  000446  C0A3  F026         	movff	_nb_s_pelle,?_sprintf+11
  8295  00044A  6A27               	clrf	?_sprintf+12,c
  8296  00044C  EC6C  F004         	call	_sprintf	;wreg free
  8297  000450  D65A               	goto	l7923
  8298  000452                     l8013:
  8299                           
  8300                           ; BSR set to: 0
  8301                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  8302  000452  0EAD               	movlw	low _UART_TX_TEXT
  8303  000454  6E1B               	movwf	sprintf@sp,c
  8304  000456  0EBC               	movlw	low STR_8
  8305  000458  6E1C               	movwf	sprintf@f,c
  8306  00045A  0E3F               	movlw	high STR_8
  8307  00045C  6E1D               	movwf	sprintf@f+1,c
  8308  00045E  C0AA  F01E         	movff	_Etat,?_sprintf+3	;volatile
  8309  000462  6A1F               	clrf	?_sprintf+4,c
  8310  000464  C04B  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  8311  000468  6A21               	clrf	?_sprintf+6,c
  8312  00046A  EC6C  F004         	call	_sprintf	;wreg free
  8313  00046E  D64B               	goto	l7923
  8314  000470                     l1423:
  8315                           
  8316                           ; BSR set to: 0
  8317                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  8318  000470  C281  F0AD         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  8319                           
  8320                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  8321  000474  6BAE               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  8322  000476  D647               	goto	l7923
  8323  000478                     l8021:
  8324  000478  0ED0               	movlw	208
  8325  00047A  0100               	movlb	0	; () banked
  8326  00047C  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8327  00047E  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8328  000480  0102               	movlb	2	; () banked
  8329  000482  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8330  000484  0100               	movlb	0	; () banked
  8331  000486  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8332  000488  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8333  00048A  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8334  00048C  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8335  00048E  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8336  000490  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8337                           
  8338                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8339                           ; Switch size 1, requested type "speed"
  8340                           ; Number of cases is 1, Range of values is 0 to 0
  8341                           ; switch strategies available:
  8342                           ; Name         Instructions Cycles
  8343                           ; simple_byte            4     3 (average)
  8344                           ;	Chosen strategy is simple_byte
  8345  000492  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8346  000494  A4D8               	btfss	status,2,c
  8347  000496  0012               	return	
  8348                           
  8349                           ; BSR set to: 0
  8350                           ; Switch size 1, requested type "speed"
  8351                           ; Number of cases is 3, Range of values is 0 to 9
  8352                           ; switch strategies available:
  8353                           ; Name         Instructions Cycles
  8354                           ; simple_byte           10     6 (average)
  8355                           ;	Chosen strategy is simple_byte
  8356  000498  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8357  00049A  E0C3               	bz	l8009
  8358  00049C  0A01               	xorlw	1	; case 1
  8359  00049E  E0D9               	bz	l8013
  8360  0004A0  0A08               	xorlw	8	; case 9
  8361  0004A2  A4D8               	btfss	status,2,c
  8362  0004A4  0012               	return	
  8363  0004A6  D7E4               	goto	l1423
  8364  0004A8                     l8023:
  8365                           
  8366                           ;eusart.c: 1062: Alarme_On(8);
  8367  0004A8  0E08               	movlw	8
  8368  0004AA  EF4E  F013         	goto	_Alarme_On
  8369  0004AE                     l8025:
  8370                           
  8371                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  8372  0004AE  0EAD               	movlw	low _UART_TX_TEXT
  8373  0004B0  6E1B               	movwf	sprintf@sp,c
  8374  0004B2  0EB9               	movlw	low (STR_4+30)
  8375  0004B4  6E1C               	movwf	sprintf@f,c
  8376  0004B6  0E3F               	movlw	high (STR_4+30)
  8377  0004B8  6E1D               	movwf	sprintf@f+1,c
  8378  0004BA  C0AB  F01E         	movff	_Version,?_sprintf+3
  8379  0004BE  6A1F               	clrf	?_sprintf+4,c
  8380  0004C0  EC6C  F004         	call	_sprintf	;wreg free
  8381  0004C4  D620               	goto	l7923
  8382  0004C6                     l8029:
  8383                           
  8384                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  8385  0004C6  0EAD               	movlw	low _UART_TX_TEXT
  8386  0004C8  6E1B               	movwf	sprintf@sp,c
  8387  0004CA  0E16               	movlw	low STR_10
  8388  0004CC  6E1C               	movwf	sprintf@f,c
  8389  0004CE  0E3F               	movlw	high STR_10
  8390  0004D0  6E1D               	movwf	sprintf@f+1,c
  8391  0004D2  0E00               	movlw	0
  8392  0004D4  EC20  F011         	call	_Etat_Get
  8393  0004D8  6E1E               	movwf	?_sprintf+3,c
  8394  0004DA  6A1F               	clrf	?_sprintf+4,c
  8395  0004DC  0E01               	movlw	1
  8396  0004DE  EC20  F011         	call	_Etat_Get
  8397  0004E2  6E20               	movwf	?_sprintf+5,c
  8398  0004E4  6A21               	clrf	?_sprintf+6,c
  8399  0004E6  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  8400  0004EA  6A23               	clrf	?_sprintf+8,c
  8401  0004EC  C0A1  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  8402  0004F0  6A25               	clrf	?_sprintf+10,c
  8403  0004F2  C09B  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  8404  0004F6  6A27               	clrf	?_sprintf+12,c
  8405  0004F8  C09A  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  8406  0004FC  6A29               	clrf	?_sprintf+14,c
  8407  0004FE  C098  F02A         	movff	_consigne,?_sprintf+15	;volatile
  8408  000502  6A2B               	clrf	?_sprintf+16,c
  8409  000504  C0A7  F02C         	movff	_nb_s_patinage,?_sprintf+17
  8410  000508  6A2D               	clrf	?_sprintf+18,c
  8411  00050A  C0A5  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  8412  00050E  6A2F               	clrf	?_sprintf+20,c
  8413  000510  C0A4  F030         	movff	_nb_100ms_platine,?_sprintf+21
  8414  000514  6A31               	clrf	?_sprintf+22,c
  8415  000516  C0A3  F032         	movff	_nb_s_pelle,?_sprintf+23
  8416  00051A  6A33               	clrf	?_sprintf+24,c
  8417  00051C  0E01               	movlw	1
  8418  00051E  A480               	btfss	3968,2,c	;volatile
  8419  000520  0E00               	movlw	0
  8420  000522  6E34               	movwf	?_sprintf+25,c
  8421  000524  6A35               	clrf	?_sprintf+26,c
  8422  000526  0E01               	movlw	1
  8423  000528  A682               	btfss	3970,3,c	;volatile
  8424  00052A  0E00               	movlw	0
  8425  00052C  6E36               	movwf	?_sprintf+27,c
  8426  00052E  6A37               	clrf	?_sprintf+28,c
  8427  000530  0E01               	movlw	1
  8428  000532  A48D               	btfss	3981,2,c	;volatile
  8429  000534  0E00               	movlw	0
  8430  000536  6E38               	movwf	?_sprintf+29,c
  8431  000538  6A39               	clrf	?_sprintf+30,c
  8432  00053A  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  8433  00053E  6A3B               	clrf	?_sprintf+32,c
  8434  000540  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  8435  000544  6A3D               	clrf	?_sprintf+34,c
  8436  000546  C0AB  F03E         	movff	_Version,?_sprintf+35
  8437  00054A  6A3F               	clrf	?_sprintf+36,c
  8438  00054C  EC6C  F004         	call	_sprintf	;wreg free
  8439  000550  D5DA               	goto	l7923
  8440  000552                     l8033:
  8441                           
  8442                           ;eusart.c: 1148: Alarme_On(7);
  8443  000552  0E07               	movlw	7
  8444  000554  EF4E  F013         	goto	_Alarme_On
  8445  000558                     l8035:
  8446                           
  8447                           ;eusart.c: 1155: Etat_Update(0);
  8448  000558  0E00               	movlw	0
  8449  00055A  EC3E  F012         	call	_Etat_Update
  8450  00055E                     l8037:
  8451                           
  8452                           ;eusart.c: 1157: P4_busy = 0;
  8453  00055E  0100               	movlb	0	; () banked
  8454  000560  6BAC               	clrf	_P4_busy& (0+255),b
  8455                           
  8456                           ;eusart.c: 1161: break;
  8457  000562  0012               	return	
  8458  000564                     l1432:
  8459                           
  8460                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  8461  000564  A682               	btfss	3970,3,c	;volatile
  8462  000566  D0DB               	goto	l8153
  8463                           
  8464                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  8465  000568  0102               	movlb	2	; () banked
  8466  00056A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8467  00056C  0FD0               	addlw	208
  8468  00056E  0100               	movlb	0	; () banked
  8469  000570  6F8F               	movwf	_direction& (0+255),b	;volatile
  8470                           
  8471                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  8472  000572  0102               	movlb	2	; () banked
  8473  000574  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8474  000576  0FD0               	addlw	208
  8475  000578  0100               	movlb	0	; () banked
  8476  00057A  6F91               	movwf	_type_consigne& (0+255),b
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8480  00057C  0102               	movlb	2	; () banked
  8481  00057E  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8482  000580  0D0A               	mullw	10
  8483  000582  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8484  000586  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8485  000588  0D64               	mullw	100
  8486  00058A  50F3               	movf	prodl,w,c
  8487  00058C  0100               	movlb	0	; () banked
  8488  00058E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8489  000590  0102               	movlb	2	; () banked
  8490  000592  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8491  000594  0F30               	addlw	48
  8492  000596  0100               	movlb	0	; () banked
  8493  000598  6F90               	movwf	_mouvement_option& (0+255),b
  8494                           
  8495                           ;eusart.c: 1180: switch (E - 0x30) {
  8496  00059A  D008               	goto	l8045
  8497  00059C                     l1435:
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;eusart.c: 1182: Option_Multitas = 1;
  8501  00059C  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8502  00059E  D004               	goto	L1
  8503  0005A0                     l1437:
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;eusart.c: 1186: Option_Multitas = 0;
  8507  0005A0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8508                           
  8509                           ;eusart.c: 1187: Option_Pailleux = 1;
  8510  0005A2  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8511                           
  8512                           ;eusart.c: 1188: break;
  8513  0005A4  D017               	goto	l8047
  8514  0005A6                     l1438:
  8515                           
  8516                           ; BSR set to: 0
  8517                           ;eusart.c: 1192: Option_Multitas = 0;
  8518  0005A6  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8519  0005A8                     L1:
  8520                           
  8521                           ;eusart.c: 1193: Option_Pailleux = 0;
  8522  0005A8  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8523                           
  8524                           ;eusart.c: 1194: }
  8525  0005AA  D014               	goto	l8047
  8526  0005AC                     l8045:
  8527                           
  8528                           ; BSR set to: 0
  8529  0005AC  0ED0               	movlw	208
  8530  0005AE  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8531  0005B0  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8532  0005B2  0102               	movlb	2	; () banked
  8533  0005B4  5185               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8534  0005B6  0100               	movlb	0	; () banked
  8535  0005B8  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8536  0005BA  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8537  0005BC  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8538  0005BE  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8539  0005C0  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8540  0005C2  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8541                           
  8542                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8543                           ; Switch size 1, requested type "speed"
  8544                           ; Number of cases is 1, Range of values is 0 to 0
  8545                           ; switch strategies available:
  8546                           ; Name         Instructions Cycles
  8547                           ; simple_byte            4     3 (average)
  8548                           ;	Chosen strategy is simple_byte
  8549  0005C4  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8550  0005C6  E1EF               	bnz	l1438
  8551                           
  8552                           ; BSR set to: 0
  8553                           ; Switch size 1, requested type "speed"
  8554                           ; Number of cases is 2, Range of values is 1 to 2
  8555                           ; switch strategies available:
  8556                           ; Name         Instructions Cycles
  8557                           ; simple_byte            7     4 (average)
  8558                           ;	Chosen strategy is simple_byte
  8559  0005C8  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8560  0005CA  0A01               	xorlw	1	; case 1
  8561  0005CC  E0E7               	bz	l1435
  8562  0005CE  0A03               	xorlw	3	; case 2
  8563  0005D0  E0E7               	bz	l1437
  8564  0005D2  D7E9               	goto	l1438
  8565  0005D4                     l8047:
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  8569  0005D4  0E31               	movlw	49
  8570  0005D6  0102               	movlb	2	; () banked
  8571  0005D8  1985               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8572  0005DA  E102               	bnz	l1439
  8573                           
  8574                           ; BSR set to: 2
  8575                           ;eusart.c: 1200: Option_Multitas = 1;
  8576  0005DC  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8577                           
  8578                           ;eusart.c: 1202: } else {
  8579  0005DE  D001               	goto	l1440
  8580  0005E0                     l1439:
  8581                           
  8582                           ; BSR set to: 2
  8583                           ;eusart.c: 1203: Option_Multitas = 0;
  8584  0005E0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8585  0005E2                     l1440:
  8586                           
  8587                           ; BSR set to: 2
  8588                           ;eusart.c: 1204: }
  8589                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8590  0005E2  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8591                           
  8592                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8593  0005E6  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8594                           
  8595                           ; BSR set to: 2
  8596                           ;eusart.c: 1214: P4_busy = 1;
  8597  0005EA  0E01               	movlw	1
  8598  0005EC  0100               	movlb	0	; () banked
  8599  0005EE  6FAC               	movwf	_P4_busy& (0+255),b
  8600                           
  8601                           ;eusart.c: 1215: switch (direction) {
  8602  0005F0  D018               	goto	l8079
  8603  0005F2                     l8053:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;eusart.c: 1218: if (Etat == 0) {
  8607  0005F2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8608  0005F4  E101               	bnz	l8057
  8609  0005F6  D0B7               	goto	l8163
  8610  0005F8                     l8057:
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;eusart.c: 1223: if (Etat != 2) {
  8614  0005F8  0E02               	movlw	2
  8615  0005FA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8616  0005FC  B4D8               	btfsc	status,2,c
  8617  0005FE  0012               	return	
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;eusart.c: 1224: Coupe_Moteur();
  8621  000600  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  8622                           
  8623                           ;eusart.c: 1225: delay_1s();
  8624  000604  EC79  F011         	call	_delay_1s	;wreg free
  8625  000608  D0AE               	goto	l8163
  8626  00060A                     l8065:
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;eusart.c: 1233: if (Etat == 0) {
  8630  00060A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8631  00060C  E101               	bnz	l8069
  8632  00060E  D0AF               	goto	l8169
  8633  000610                     l8069:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;eusart.c: 1236: if (Etat != 3) {
  8637  000610  0E03               	movlw	3
  8638  000612  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8639  000614  B4D8               	btfsc	status,2,c
  8640  000616  0012               	return	
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;eusart.c: 1237: Coupe_Moteur();
  8644  000618  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  8645                           
  8646                           ;eusart.c: 1238: delay_1s();
  8647  00061C  EC79  F011         	call	_delay_1s	;wreg free
  8648  000620  D0A6               	goto	l8169
  8649  000622                     l8079:
  8650                           
  8651                           ; BSR set to: 0
  8652  000622  518F               	movf	_direction& (0+255),w,b	;volatile
  8653                           
  8654                           ; Switch size 1, requested type "speed"
  8655                           ; Number of cases is 2, Range of values is 0 to 1
  8656                           ; switch strategies available:
  8657                           ; Name         Instructions Cycles
  8658                           ; simple_byte            7     4 (average)
  8659                           ;	Chosen strategy is simple_byte
  8660  000624  E0F2               	bz	l8065
  8661  000626  0A01               	xorlw	1	; case 1
  8662  000628  A4D8               	btfss	status,2,c
  8663  00062A  0012               	return	
  8664  00062C  D7E2               	goto	l8053
  8665  00062E                     l1453:
  8666                           
  8667                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  8668  00062E  A682               	btfss	3970,3,c	;volatile
  8669  000630  D076               	goto	l8153
  8670                           
  8671                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  8672  000632  0102               	movlb	2	; () banked
  8673  000634  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8674  000636  0FD0               	addlw	208
  8675  000638  0100               	movlb	0	; () banked
  8676  00063A  6F8F               	movwf	_direction& (0+255),b	;volatile
  8677                           
  8678                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  8679  00063C  0102               	movlb	2	; () banked
  8680  00063E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8681  000640  0FD0               	addlw	208
  8682  000642  0100               	movlb	0	; () banked
  8683  000644  6F91               	movwf	_type_consigne& (0+255),b
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8687  000646  0102               	movlb	2	; () banked
  8688  000648  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8689  00064A  0D0A               	mullw	10
  8690  00064C  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8691  000650  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8692  000652  0D64               	mullw	100
  8693  000654  50F3               	movf	prodl,w,c
  8694  000656  0100               	movlb	0	; () banked
  8695  000658  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8696  00065A  0102               	movlb	2	; () banked
  8697  00065C  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8698  00065E  0F30               	addlw	48
  8699  000660  0100               	movlb	0	; () banked
  8700  000662  6F90               	movwf	_mouvement_option& (0+255),b
  8701                           
  8702                           ; BSR set to: 0
  8703                           ;eusart.c: 1269: P4_busy = 1;
  8704  000664  0E01               	movlw	1
  8705  000666  6FAC               	movwf	_P4_busy& (0+255),b
  8706                           
  8707                           ;eusart.c: 1270: switch (direction) {
  8708  000668  D018               	goto	l8115
  8709  00066A                     l8089:
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;eusart.c: 1274: if (Etat == 0) {
  8713  00066A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8714  00066C  E101               	bnz	l8093
  8715  00066E  D088               	goto	l8175
  8716  000670                     l8093:
  8717                           
  8718                           ; BSR set to: 0
  8719                           ;eusart.c: 1277: if (Etat != 5) {
  8720  000670  0E05               	movlw	5
  8721  000672  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8722  000674  B4D8               	btfsc	status,2,c
  8723  000676  0012               	return	
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;eusart.c: 1278: Coupe_Moteur();
  8727  000678  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  8728                           
  8729                           ;eusart.c: 1279: delay_1s();
  8730  00067C  EC79  F011         	call	_delay_1s	;wreg free
  8731  000680  D07F               	goto	l8175
  8732  000682                     l8101:
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;eusart.c: 1299: if (Etat == 0) {
  8736  000682  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8737  000684  E101               	bnz	l8105
  8738  000686  D07F               	goto	l8177
  8739  000688                     l8105:
  8740                           
  8741                           ; BSR set to: 0
  8742                           ;eusart.c: 1302: if (Etat != 4) {
  8743  000688  0E04               	movlw	4
  8744  00068A  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8745  00068C  B4D8               	btfsc	status,2,c
  8746  00068E  0012               	return	
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;eusart.c: 1303: Coupe_Moteur();
  8750  000690  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  8751                           
  8752                           ;eusart.c: 1304: delay_1s();
  8753  000694  EC79  F011         	call	_delay_1s	;wreg free
  8754  000698  D076               	goto	l8177
  8755  00069A                     l8115:
  8756                           
  8757                           ; BSR set to: 0
  8758  00069A  518F               	movf	_direction& (0+255),w,b	;volatile
  8759                           
  8760                           ; Switch size 1, requested type "speed"
  8761                           ; Number of cases is 2, Range of values is 0 to 1
  8762                           ; switch strategies available:
  8763                           ; Name         Instructions Cycles
  8764                           ; simple_byte            7     4 (average)
  8765                           ;	Chosen strategy is simple_byte
  8766  00069C  E0F2               	bz	l8101
  8767  00069E  0A01               	xorlw	1	; case 1
  8768  0006A0  A4D8               	btfss	status,2,c
  8769  0006A2  0012               	return	
  8770  0006A4  D7E2               	goto	l8089
  8771  0006A6                     l1467:
  8772                           
  8773                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  8774  0006A6  A682               	btfss	3970,3,c	;volatile
  8775  0006A8  D03A               	goto	l8153
  8776                           
  8777                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  8778  0006AA  0102               	movlb	2	; () banked
  8779  0006AC  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8780  0006AE  0FD0               	addlw	208
  8781  0006B0  0100               	movlb	0	; () banked
  8782  0006B2  6F8F               	movwf	_direction& (0+255),b	;volatile
  8783                           
  8784                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  8785  0006B4  0102               	movlb	2	; () banked
  8786  0006B6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8787  0006B8  0FD0               	addlw	208
  8788  0006BA  0100               	movlb	0	; () banked
  8789  0006BC  6F91               	movwf	_type_consigne& (0+255),b
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8793  0006BE  0102               	movlb	2	; () banked
  8794  0006C0  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8795  0006C2  0D0A               	mullw	10
  8796  0006C4  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8797  0006C8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8798  0006CA  0D64               	mullw	100
  8799  0006CC  50F3               	movf	prodl,w,c
  8800  0006CE  0100               	movlb	0	; () banked
  8801  0006D0  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8802  0006D2  0102               	movlb	2	; () banked
  8803  0006D4  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8804  0006D6  0F30               	addlw	48
  8805  0006D8  0100               	movlb	0	; () banked
  8806  0006DA  6F90               	movwf	_mouvement_option& (0+255),b
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;eusart.c: 1341: P4_busy = 1;
  8810  0006DC  0E01               	movlw	1
  8811  0006DE  6FAC               	movwf	_P4_busy& (0+255),b
  8812                           
  8813                           ;eusart.c: 1342: switch (direction) {
  8814  0006E0  D018               	goto	l8151
  8815  0006E2                     l8125:
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;eusart.c: 1348: if (Etat == 0) {
  8819  0006E2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8820  0006E4  E101               	bnz	l8129
  8821  0006E6  D058               	goto	l8183
  8822  0006E8                     l8129:
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;eusart.c: 1351: if (Etat != 9) {
  8826  0006E8  0E09               	movlw	9
  8827  0006EA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8828  0006EC  B4D8               	btfsc	status,2,c
  8829  0006EE  0012               	return	
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;eusart.c: 1352: Coupe_Moteur();
  8833  0006F0  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  8834                           
  8835                           ;eusart.c: 1353: delay_1s();
  8836  0006F4  EC79  F011         	call	_delay_1s	;wreg free
  8837  0006F8  D04F               	goto	l8183
  8838  0006FA                     l8137:
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;eusart.c: 1371: if (Etat == 0) {
  8842  0006FA  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8843  0006FC  E101               	bnz	l8141
  8844  0006FE  D04F               	goto	l8185
  8845  000700                     l8141:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;eusart.c: 1374: if (Etat != 8) {
  8849  000700  0E08               	movlw	8
  8850  000702  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8851  000704  B4D8               	btfsc	status,2,c
  8852  000706  0012               	return	
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;eusart.c: 1375: Coupe_Moteur();
  8856  000708  ECEC  F012         	call	_Coupe_Moteur	;wreg free
  8857                           
  8858                           ;eusart.c: 1376: delay_1s();
  8859  00070C  EC79  F011         	call	_delay_1s	;wreg free
  8860  000710  D046               	goto	l8185
  8861  000712                     l8151:
  8862                           
  8863                           ; BSR set to: 0
  8864  000712  518F               	movf	_direction& (0+255),w,b	;volatile
  8865                           
  8866                           ; Switch size 1, requested type "speed"
  8867                           ; Number of cases is 2, Range of values is 0 to 1
  8868                           ; switch strategies available:
  8869                           ; Name         Instructions Cycles
  8870                           ; simple_byte            7     4 (average)
  8871                           ;	Chosen strategy is simple_byte
  8872  000714  E0F2               	bz	l8137
  8873  000716  0A01               	xorlw	1	; case 1
  8874  000718  A4D8               	btfss	status,2,c
  8875  00071A  0012               	return	
  8876  00071C  D7E2               	goto	l8125
  8877  00071E                     l8153:
  8878                           
  8879                           ;eusart.c: 1392: Alarme_On(4);
  8880  00071E  0E04               	movlw	4
  8881  000720  EF4E  F013         	goto	_Alarme_On
  8882  000724                     l8155:
  8883                           
  8884                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  8885  000724  0102               	movlb	2	; () banked
  8886  000726  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8887  000728  0FD0               	addlw	208
  8888  00072A  0100               	movlb	0	; () banked
  8889  00072C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  8890                           
  8891                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  8892  00072E  0102               	movlb	2	; () banked
  8893  000730  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8894  000732  0FD0               	addlw	208
  8895  000734  0100               	movlb	0	; () banked
  8896  000736  6F8F               	movwf	_direction& (0+255),b	;volatile
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8900  000738  0102               	movlb	2	; () banked
  8901  00073A  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8902  00073C  0D0A               	mullw	10
  8903  00073E  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8904  000742  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8905  000744  0D64               	mullw	100
  8906  000746  50F3               	movf	prodl,w,c
  8907  000748  0100               	movlb	0	; () banked
  8908  00074A  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8909  00074C  0102               	movlb	2	; () banked
  8910  00074E  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8911  000750  0F30               	addlw	48
  8912  000752  0100               	movlb	0	; () banked
  8913  000754  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  8914                           
  8915                           ;eusart.c: 1410: switch (moteur_indice) {
  8916  000756  D02C               	goto	l8193
  8917  000758                     l1483:
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;eusart.c: 1412: Alarme = 0;
  8921  000758  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  8922                           
  8923                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8924  00075A  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8925                           
  8926                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8927  00075E  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8928                           
  8929                           ;eusart.c: 1416: switch (direction) {
  8930  000762  D008               	goto	l8173
  8931  000764                     l8159:
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;eusart.c: 1419: if (Etat == 0) {
  8935  000764  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8936  000766                     l8163:
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;eusart.c: 1425: Etat_Update(2);
  8940  000766  0E02               	movlw	2
  8941  000768  EF3E  F012         	goto	_Etat_Update
  8942  00076C                     l8165:
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;eusart.c: 1430: if (Etat == 0) {
  8946  00076C  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8947  00076E                     l8169:
  8948                           
  8949                           ; BSR set to: 0
  8950                           ;eusart.c: 1434: Etat_Update(3);
  8951  00076E  0E03               	movlw	3
  8952  000770  EF3E  F012         	goto	_Etat_Update
  8953  000774                     l8173:
  8954                           
  8955                           ; BSR set to: 0
  8956  000774  518F               	movf	_direction& (0+255),w,b	;volatile
  8957                           
  8958                           ; Switch size 1, requested type "speed"
  8959                           ; Number of cases is 2, Range of values is 0 to 1
  8960                           ; switch strategies available:
  8961                           ; Name         Instructions Cycles
  8962                           ; simple_byte            7     4 (average)
  8963                           ;	Chosen strategy is simple_byte
  8964  000776  E0FA               	bz	l8165
  8965  000778  0A01               	xorlw	1	; case 1
  8966  00077A  A4D8               	btfss	status,2,c
  8967  00077C  0012               	return	
  8968  00077E  D7F2               	goto	l8159
  8969  000780                     l8175:
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;eusart.c: 1451: Etat_Update(5);
  8973  000780  0E05               	movlw	5
  8974  000782  EF3E  F012         	goto	_Etat_Update
  8975  000786                     l8177:
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;eusart.c: 1456: Etat_Update(4);
  8979  000786  0E04               	movlw	4
  8980  000788  EF3E  F012         	goto	_Etat_Update
  8981  00078C                     l8181:
  8982                           
  8983                           ; BSR set to: 0
  8984  00078C  518F               	movf	_direction& (0+255),w,b	;volatile
  8985                           
  8986                           ; Switch size 1, requested type "speed"
  8987                           ; Number of cases is 2, Range of values is 0 to 1
  8988                           ; switch strategies available:
  8989                           ; Name         Instructions Cycles
  8990                           ; simple_byte            7     4 (average)
  8991                           ;	Chosen strategy is simple_byte
  8992  00078E  E0FB               	bz	l8177
  8993  000790  0A01               	xorlw	1	; case 1
  8994  000792  A4D8               	btfss	status,2,c
  8995  000794  0012               	return	
  8996  000796  D7F4               	goto	l8175
  8997  000798                     l8183:
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;eusart.c: 1473: Etat_Update(9);
  9001  000798  0E09               	movlw	9
  9002  00079A  EF3E  F012         	goto	_Etat_Update
  9003  00079E                     l8185:
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;eusart.c: 1478: Etat_Update(8);
  9007  00079E  0E08               	movlw	8
  9008  0007A0  EF3E  F012         	goto	_Etat_Update
  9009  0007A4                     l8189:
  9010                           
  9011                           ; BSR set to: 0
  9012  0007A4  518F               	movf	_direction& (0+255),w,b	;volatile
  9013                           
  9014                           ; Switch size 1, requested type "speed"
  9015                           ; Number of cases is 2, Range of values is 0 to 1
  9016                           ; switch strategies available:
  9017                           ; Name         Instructions Cycles
  9018                           ; simple_byte            7     4 (average)
  9019                           ;	Chosen strategy is simple_byte
  9020  0007A6  E0FB               	bz	l8185
  9021  0007A8  0A01               	xorlw	1	; case 1
  9022  0007AA  A4D8               	btfss	status,2,c
  9023  0007AC  0012               	return	
  9024  0007AE  D7F4               	goto	l8183
  9025  0007B0                     l8193:
  9026                           
  9027                           ; BSR set to: 0
  9028  0007B0  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
  9029                           
  9030                           ; Switch size 1, requested type "speed"
  9031                           ; Number of cases is 3, Range of values is 1 to 3
  9032                           ; switch strategies available:
  9033                           ; Name         Instructions Cycles
  9034                           ; simple_byte           10     6 (average)
  9035                           ;	Chosen strategy is simple_byte
  9036  0007B2  0A01               	xorlw	1	; case 1
  9037  0007B4  E0D1               	bz	l1483
  9038  0007B6  0A03               	xorlw	3	; case 2
  9039  0007B8  E0E9               	bz	l8181
  9040  0007BA  0A01               	xorlw	1	; case 3
  9041  0007BC  A4D8               	btfss	status,2,c
  9042  0007BE  0012               	return	
  9043  0007C0  D7F1               	goto	l8189
  9044  0007C2                     l1507:
  9045                           
  9046                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  9047  0007C2  0102               	movlb	2	; () banked
  9048  0007C4  B180               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  9049  0007C6  D002               	bra	u6395
  9050  0007C8  948D               	bcf	3981,2,c	;volatile
  9051  0007CA  D001               	bra	u6396
  9052  0007CC                     u6395:
  9053  0007CC  848D               	bsf	3981,2,c	;volatile
  9054  0007CE                     u6396:
  9055                           
  9056                           ;eusart.c: 1507: break;
  9057  0007CE  0012               	return	
  9058  0007D0                     l8195:
  9059                           
  9060                           ;eusart.c: 1510: Etat_Update(0);
  9061  0007D0  0E00               	movlw	0
  9062  0007D2  EC3E  F012         	call	_Etat_Update
  9063  0007D6  D6C3               	goto	l8037
  9064  0007D8                     l1509:
  9065                           
  9066                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  9067  0007D8  C280  F04B         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  9068                           
  9069                           ;eusart.c: 1522: break;
  9070  0007DC  0012               	return	
  9071  0007DE                     l8199:
  9072                           
  9073                           ;eusart.c: 1528: IRQ_Execution(Da);
  9074  0007DE  0102               	movlb	2	; () banked
  9075  0007E0  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  9076  0007E2  EF75  F00F         	goto	_IRQ_Execution
  9077  0007E6                     l8201:
  9078                           
  9079                           ;eusart.c: 1536: Etat_Update(0);
  9080  0007E6  0E00               	movlw	0
  9081  0007E8  EF3E  F012         	goto	_Etat_Update
  9082  0007EC                     l8203:
  9083                           
  9084                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  9085  0007EC  0E0D               	movlw	13
  9086  0007EE  0102               	movlb	2	; () banked
  9087  0007F0  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  9088  0007F2  A4D8               	btfss	status,2,c
  9089                           
  9090                           ; BSR set to: 2
  9091                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  9092  0007F4  848B               	bsf	3979,2,c	;volatile
  9093  0007F6  0012               	return	
  9094  0007F8                     l8209:
  9095  0007F8  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  9096                           
  9097                           ; Switch size 1, requested type "speed"
  9098                           ; Number of cases is 38, Range of values is 48 to 118
  9099                           ; switch strategies available:
  9100                           ; Name         Instructions Cycles
  9101                           ; simple_byte          115    58 (average)
  9102                           ;	Chosen strategy is simple_byte
  9103  0007FA  0A30               	xorlw	48	; case 48
  9104  0007FC  E0F4               	bz	l8201
  9105  0007FE  0A01               	xorlw	1	; case 49
  9106  000800  B4D8               	btfsc	status,2,c
  9107  000802  0012               	return	
  9108  000804  0A03               	xorlw	3	; case 50
  9109  000806  B4D8               	btfsc	status,2,c
  9110  000808  0012               	return	
  9111  00080A  0A01               	xorlw	1	; case 51
  9112  00080C  B4D8               	btfsc	status,2,c
  9113  00080E  0012               	return	
  9114  000810  0A07               	xorlw	7	; case 52
  9115  000812  B4D8               	btfsc	status,2,c
  9116  000814  0012               	return	
  9117  000816  0A01               	xorlw	1	; case 53
  9118  000818  B4D8               	btfsc	status,2,c
  9119  00081A  0012               	return	
  9120  00081C  0A03               	xorlw	3	; case 54
  9121  00081E  B4D8               	btfsc	status,2,c
  9122  000820  0012               	return	
  9123  000822  0A01               	xorlw	1	; case 55
  9124  000824  B4D8               	btfsc	status,2,c
  9125  000826  0012               	return	
  9126  000828  0A76               	xorlw	118	; case 65
  9127  00082A  E102 EFEC  F012    	bz	_Coupe_Moteur
  9128  000830  0A03               	xorlw	3	; case 66
  9129  000832  E101 D738          	bz	l1467
  9130  000836  0A06               	xorlw	6	; case 68
  9131  000838  B4D8               	btfsc	status,2,c
  9132  00083A  0012               	return	
  9133  00083C  0A01               	xorlw	1	; case 69
  9134  00083E  E101 D4E5          	bz	l7955
  9135  000842  0A03               	xorlw	3	; case 70
  9136  000844  B4D8               	btfsc	status,2,c
  9137  000846  0012               	return	
  9138  000848  0A0E               	xorlw	14	; case 72
  9139  00084A  E101 D685          	bz	l8035
  9140  00084E  0A01               	xorlw	1	; case 73
  9141  000850  E0C6               	bz	l8199
  9142  000852  0A05               	xorlw	5	; case 76
  9143  000854  E101 D43F          	bz	l7919
  9144  000858  0A01               	xorlw	1	; case 77
  9145  00085A  E101 D763          	bz	l8155
  9146  00085E  0A1D               	xorlw	29	; case 80
  9147  000860  E101 D5B8          	bz	l8007
  9148  000864  0A02               	xorlw	2	; case 82
  9149  000866  E0AD               	bz	l1507
  9150  000868  0A01               	xorlw	1	; case 83
  9151  00086A  E101 D62C          	bz	l8029
  9152  00086E  0A07               	xorlw	7	; case 84
  9153  000870  E101 D61A          	bz	l8023
  9154  000874  0A01               	xorlw	1	; case 85
  9155  000876  B4D8               	btfsc	status,2,c
  9156  000878  0012               	return	
  9157  00087A  0A03               	xorlw	3	; case 86
  9158  00087C  E101 D5FC          	bz	l8021
  9159  000880  0A01               	xorlw	1	; case 87
  9160  000882  E101 D666          	bz	l8033
  9161  000886  0A0F               	xorlw	15	; case 88
  9162  000888  E101 D66C          	bz	l1432
  9163  00088C  0A02               	xorlw	2	; case 90
  9164  00088E  E101 D6CE          	bz	l1453
  9165  000892  0A38               	xorlw	56	; case 98
  9166  000894  E101 D4AE          	bz	l7951
  9167  000898  0A01               	xorlw	1	; case 99
  9168  00089A  E101 D4A5          	bz	l7949
  9169  00089E  0A06               	xorlw	6	; case 101
  9170  0008A0  E101 D4C4          	bz	l7959
  9171  0008A4  0A03               	xorlw	3	; case 102
  9172  0008A6  E098               	bz	l1509
  9173  0008A8  0A0F               	xorlw	15	; case 105
  9174  0008AA  E101 D421          	bz	l7921
  9175  0008AE  0A05               	xorlw	5	; case 108
  9176  0008B0  E101 D463          	bz	l1389
  9177  0008B4  0A01               	xorlw	1	; case 109
  9178  0008B6  E101 D4DD          	bz	l7967
  9179  0008BA  0A1D               	xorlw	29	; case 112
  9180  0008BC  E101 D427          	bz	l7925
  9181  0008C0  0A01               	xorlw	1	; case 113
  9182  0008C2  E101 D47F          	bz	l7945
  9183  0008C6  0A03               	xorlw	3	; case 114
  9184  0008C8  E083               	bz	l8195
  9185  0008CA  0A01               	xorlw	1	; case 115
  9186  0008CC  E101 D43F          	bz	l7929
  9187  0008D0  0A05               	xorlw	5	; case 118
  9188  0008D2  E101 D5EC          	bz	l8025
  9189  0008D6  D78A               	goto	l8203
  9190  0008D8                     __end_of_EUSART1_RX_T3_LOCAL:
  9191                           	opt stack 0
  9192                           tblptru	equ	0xFF8
  9193                           prodh	equ	0xFF4
  9194                           prodl	equ	0xFF3
  9195                           intcon	equ	0xFF2
  9196                           intcon2	equ	0xFF1
  9197                           intcon3	equ	0xFF0
  9198                           postinc0	equ	0xFEE
  9199                           wreg	equ	0xFE8
  9200                           indf1	equ	0xFE7
  9201                           postdec1	equ	0xFE5
  9202                           fsr1h	equ	0xFE2
  9203                           fsr1l	equ	0xFE1
  9204                           indf2	equ	0xFDF
  9205                           fsr2h	equ	0xFDA
  9206                           fsr2l	equ	0xFD9
  9207                           status	equ	0xFD8
  9208                           
  9209 ;; *************** function _sprintf *****************
  9210 ;; Defined at:
  9211 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;  sp              1   26[COMRAM] PTR unsigned char 
  9214 ;;		 -> UART_TX_TEXT(64), 
  9215 ;;  f               2   27[COMRAM] PTR const unsigned char 
  9216 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  9217 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  9218 ;;		 -> STR_2(95), STR_1(3), 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  idx             1    4[BANK0 ] unsigned char 
  9221 ;;  tmpval          4    0        struct .
  9222 ;;  cp              3    0        PTR const unsigned char 
  9223 ;;  width           2   10[BANK0 ] int 
  9224 ;;  val             2    7[BANK0 ] unsigned int 
  9225 ;;  len             2    0        unsigned int 
  9226 ;;  c               1   12[BANK0 ] char 
  9227 ;;  flag            1    9[BANK0 ] unsigned char 
  9228 ;;  prec            1    6[BANK0 ] char 
  9229 ;;  ap              1    5[BANK0 ] PTR void [1]
  9230 ;;		 -> ?_sprintf(2), 
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  2   26[COMRAM] int 
  9233 ;; Registers used:
  9234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/1
  9237 ;;		On exit  : 3F/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9240 ;;      Params:        37       0       0       0
  9241 ;;      Locals:         0       9       0       0
  9242 ;;      Temps:          0       4       0       0
  9243 ;;      Totals:        37      13       0       0
  9244 ;;Total ram usage:       50 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:   11
  9247 ;; This function calls:
  9248 ;;		___lwdiv
  9249 ;;		___lwmod
  9250 ;;		___wmul
  9251 ;;		_isdigit
  9252 ;; This function is called by:
  9253 ;;		_EUSART1_RX_T3_LOCAL
  9254 ;; This function uses a non-reentrant model
  9255 ;;
  9256                           
  9257                           	psect	text48
  9258  0008D8                     __ptext48:
  9259                           	opt stack 0
  9260  0008D8                     _sprintf:
  9261                           	opt stack 15
  9262                           
  9263                           ;doprnt.c: 494: va_list ap;
  9264                           ;doprnt.c: 499: signed char c;
  9265                           ;doprnt.c: 501: int width;
  9266                           ;doprnt.c: 506: signed char prec;
  9267                           ;doprnt.c: 508: unsigned char flag;
  9268                           ;doprnt.c: 523: union {
  9269                           ;doprnt.c: 524: unsigned long vd;
  9270                           ;doprnt.c: 525: double integ;
  9271                           ;doprnt.c: 526: } tmpval;
  9272                           ;doprnt.c: 528: unsigned int val;
  9273                           ;doprnt.c: 529: unsigned len;
  9274                           ;doprnt.c: 530: const char * cp;
  9275                           ;doprnt.c: 533: *ap = __va_start();
  9276                           
  9277                           ;incstack = 0
  9278  0008D8  0E1E               	movlw	low (?_sprintf+3)
  9279  0008DA  0100               	movlb	0	; () banked
  9280  0008DC  6FF2               	movwf	sprintf@ap& (0+255),b
  9281                           
  9282                           ;doprnt.c: 536: while(c = *f++) {
  9283  0008DE  D15E               	goto	l7909
  9284  0008E0                     l7777:
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;doprnt.c: 538: if(c != '%')
  9288  0008E0  0E25               	movlw	37
  9289  0008E2  19F9               	xorwf	sprintf@c& (0+255),w,b
  9290  0008E4  E007               	bz	l1723
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;doprnt.c: 540: {
  9294                           ;doprnt.c: 541: ((*sp++ = (c)));
  9295  0008E6  501B               	movf	sprintf@sp,w,c
  9296  0008E8  6ED9               	movwf	fsr2l,c
  9297  0008EA  6ADA               	clrf	fsr2h,c
  9298  0008EC  C0F9  FFDF         	movff	sprintf@c,indf2
  9299                           
  9300                           ; BSR set to: 0
  9301  0008F0  2A1B               	incf	sprintf@sp,f,c
  9302                           
  9303                           ;doprnt.c: 542: continue;
  9304  0008F2  D154               	goto	l7909
  9305  0008F4                     l1723:
  9306                           
  9307                           ; BSR set to: 0
  9308                           ;doprnt.c: 543: }
  9309                           ;doprnt.c: 546: width = 0;
  9310  0008F4  6BF7               	clrf	sprintf@width& (0+255),b
  9311  0008F6  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9312                           
  9313                           ;doprnt.c: 548: flag = 0;
  9314  0008F8  6BF6               	clrf	sprintf@flag& (0+255),b
  9315  0008FA  D003               	goto	l7787
  9316  0008FC                     l7783:
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;doprnt.c: 580: flag |= 0x04;
  9320  0008FC  85F6               	bsf	sprintf@flag& (0+255),2,b
  9321                           
  9322                           ;doprnt.c: 581: f++;
  9323  0008FE  4A1C               	infsnz	sprintf@f,f,c
  9324  000900  2A1D               	incf	sprintf@f+1,f,c
  9325  000902                     l7787:
  9326                           
  9327                           ; BSR set to: 0
  9328  000902  C01C  FFF6         	movff	sprintf@f,tblptrl
  9329  000906  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9330  00090A                     	if	0	;tblptru may be non-zero
  9331  00090A                     	endif
  9332  00090A                     	if	0	;tblptru may be non-zero
  9333  00090A                     	endif
  9334  00090A  0008               	tblrd		*
  9335  00090C  50F5               	movf	tablat,w,c
  9336                           
  9337                           ; Switch size 1, requested type "speed"
  9338                           ; Number of cases is 1, Range of values is 48 to 48
  9339                           ; switch strategies available:
  9340                           ; Name         Instructions Cycles
  9341                           ; simple_byte            4     3 (average)
  9342                           ;	Chosen strategy is simple_byte
  9343  00090E  0A30               	xorlw	48	; case 48
  9344  000910  E0F5               	bz	l7783
  9345                           
  9346                           ; BSR set to: 0
  9347                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9348  000912  C01C  FFF6         	movff	sprintf@f,tblptrl
  9349  000916  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9350  00091A                     	if	0	;tblptru may be non-zero
  9351  00091A                     	endif
  9352  00091A                     	if	0	;tblptru may be non-zero
  9353  00091A                     	endif
  9354  00091A  0008               	tblrd		*
  9355  00091C  50F5               	movf	tablat,w,c
  9356  00091E  EC79  F012         	call	_isdigit
  9357  000922  E332               	bnc	l7805
  9358                           
  9359                           ;doprnt.c: 598: width = 0;
  9360  000924  0100               	movlb	0	; () banked
  9361  000926  6BF7               	clrf	sprintf@width& (0+255),b
  9362  000928  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9363  00092A                     l7793:
  9364                           
  9365                           ;doprnt.c: 600: width *= 10;
  9366  00092A  C0F7  F00F         	movff	sprintf@width,___wmul@multiplier
  9367  00092E  C0F8  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  9368  000932  6A12               	clrf	___wmul@multiplicand+1,c
  9369  000934  0E0A               	movlw	10
  9370  000936  6E11               	movwf	___wmul@multiplicand,c
  9371  000938  ECC7  F011         	call	___wmul	;wreg free
  9372  00093C  C00F  F0F7         	movff	?___wmul,sprintf@width
  9373  000940  C010  F0F8         	movff	?___wmul+1,sprintf@width+1
  9374                           
  9375                           ;doprnt.c: 601: width += *f++ - '0';
  9376  000944  0ED0               	movlw	208
  9377  000946  0100               	movlb	0	; () banked
  9378  000948  6FED               	movwf	??_sprintf& (0+255),b
  9379  00094A  69EE               	setf	(??_sprintf+1)& (0+255),b
  9380  00094C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9381  000950  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9382  000954                     	if	0	;tblptru may be non-zero
  9383  000954                     	endif
  9384  000954                     	if	0	;tblptru may be non-zero
  9385  000954                     	endif
  9386  000954  0008               	tblrd		*
  9387  000956  50F5               	movf	tablat,w,c
  9388  000958  6FEF               	movwf	(??_sprintf+2)& (0+255),b
  9389  00095A  6BF0               	clrf	(??_sprintf+3)& (0+255),b
  9390  00095C  51ED               	movf	??_sprintf& (0+255),w,b
  9391  00095E  27EF               	addwf	(??_sprintf+2)& (0+255),f,b
  9392  000960  51EE               	movf	(??_sprintf+1)& (0+255),w,b
  9393  000962  23F0               	addwfc	(??_sprintf+3)& (0+255),f,b
  9394  000964  51EF               	movf	(??_sprintf+2)& (0+255),w,b
  9395  000966  27F7               	addwf	sprintf@width& (0+255),f,b
  9396  000968  51F0               	movf	(??_sprintf+3)& (0+255),w,b
  9397  00096A  23F8               	addwfc	(sprintf@width+1)& (0+255),f,b
  9398                           
  9399                           ; BSR set to: 0
  9400  00096C  4A1C               	infsnz	sprintf@f,f,c
  9401  00096E  2A1D               	incf	sprintf@f+1,f,c
  9402                           
  9403                           ; BSR set to: 0
  9404                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9405  000970  C01C  FFF6         	movff	sprintf@f,tblptrl
  9406  000974  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9407  000978                     	if	0	;tblptru may be non-zero
  9408  000978                     	endif
  9409  000978                     	if	0	;tblptru may be non-zero
  9410  000978                     	endif
  9411  000978  0008               	tblrd		*
  9412  00097A  50F5               	movf	tablat,w,c
  9413  00097C  EC79  F012         	call	_isdigit
  9414  000980  E303               	bnc	l7805
  9415  000982  D7D3               	goto	l7793
  9416  000984                     l7801:
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;doprnt.c: 718: case 'x':
  9420                           ;doprnt.c: 721: flag |= 0x80;
  9421  000984  8FF6               	bsf	sprintf@flag& (0+255),7,b
  9422                           
  9423                           ;doprnt.c: 723: break;
  9424  000986  D016               	goto	l1738
  9425  000988                     l7805:
  9426  000988  C01C  FFF6         	movff	sprintf@f,tblptrl
  9427  00098C  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9428  000990  4A1C               	infsnz	sprintf@f,f,c
  9429  000992  2A1D               	incf	sprintf@f+1,f,c
  9430  000994                     	if	0	;tblptru may be non-zero
  9431  000994                     	endif
  9432  000994                     	if	0	;tblptru may be non-zero
  9433  000994                     	endif
  9434  000994  0008               	tblrd		*
  9435  000996  CFF5 F0F9          	movff	tablat,sprintf@c
  9436  00099A  0100               	movlb	0	; () banked
  9437  00099C  51F9               	movf	sprintf@c& (0+255),w,b
  9438                           
  9439                           ; Switch size 1, requested type "speed"
  9440                           ; Number of cases is 5, Range of values is 0 to 120
  9441                           ; switch strategies available:
  9442                           ; Name         Instructions Cycles
  9443                           ; simple_byte           16     9 (average)
  9444                           ;	Chosen strategy is simple_byte
  9445  00099E  E101 D109          	bz	l7911
  9446  0009A2  0A58               	xorlw	88	; case 88
  9447  0009A4  E0EF               	bz	l7801
  9448  0009A6  0A3C               	xorlw	60	; case 100
  9449  0009A8  E005               	bz	l1738
  9450  0009AA  0A0D               	xorlw	13	; case 105
  9451  0009AC  E003               	bz	l1738
  9452  0009AE  0A11               	xorlw	17	; case 120
  9453  0009B0  E0E9               	bz	l7801
  9454  0009B2  D0F4               	goto	l7909
  9455  0009B4                     l1738:
  9456                           
  9457                           ; BSR set to: 0
  9458                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9459  0009B4  BFF6               	btfsc	sprintf@flag& (0+255),7,b
  9460  0009B6  D012               	goto	l7817
  9461                           
  9462                           ; BSR set to: 0
  9463                           ;doprnt.c: 1253: {
  9464                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9465  0009B8  51F2               	movf	sprintf@ap& (0+255),w,b
  9466  0009BA  6ED9               	movwf	fsr2l,c
  9467  0009BC  6ADA               	clrf	fsr2h,c
  9468  0009BE  CFDE F0F4          	movff	postinc2,sprintf@val
  9469  0009C2  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9470                           
  9471                           ; BSR set to: 0
  9472  0009C6  0E02               	movlw	2
  9473  0009C8  27F2               	addwf	sprintf@ap& (0+255),f,b
  9474                           
  9475                           ; BSR set to: 0
  9476                           ;doprnt.c: 1261: if((int)val < 0) {
  9477  0009CA  AFF5               	btfss	(sprintf@val+1)& (0+255),7,b
  9478  0009CC  D03D               	goto	l7851
  9479                           
  9480                           ; BSR set to: 0
  9481                           ;doprnt.c: 1262: flag |= 0x03;
  9482  0009CE  0E03               	movlw	3
  9483  0009D0  13F6               	iorwf	sprintf@flag& (0+255),f,b
  9484                           
  9485                           ; BSR set to: 0
  9486                           ;doprnt.c: 1263: val = -val;
  9487  0009D2  6DF4               	negf	sprintf@val& (0+255),b
  9488  0009D4  1FF5               	comf	(sprintf@val+1)& (0+255),f,b
  9489  0009D6  B0D8               	btfsc	status,0,c
  9490  0009D8  2BF5               	incf	(sprintf@val+1)& (0+255),f,b
  9491  0009DA  D036               	goto	l7851
  9492  0009DC                     l7817:
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;doprnt.c: 1268: else
  9496                           ;doprnt.c: 1273: {
  9497                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9498  0009DC  51F2               	movf	sprintf@ap& (0+255),w,b
  9499  0009DE  6ED9               	movwf	fsr2l,c
  9500  0009E0  6ADA               	clrf	fsr2h,c
  9501  0009E2  CFDE F0F4          	movff	postinc2,sprintf@val
  9502  0009E6  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9503                           
  9504                           ; BSR set to: 0
  9505  0009EA  0E02               	movlw	2
  9506  0009EC  27F2               	addwf	sprintf@ap& (0+255),f,b
  9507  0009EE  D02C               	goto	l7851
  9508  0009F0                     l7821:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9512  0009F0  0E01               	movlw	1
  9513  0009F2  6FF9               	movwf	sprintf@c& (0+255),b
  9514  0009F4                     l7827:
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;doprnt.c: 1306: if(val < dpowers[c])
  9518  0009F4  51F9               	movf	sprintf@c& (0+255),w,b
  9519  0009F6  0D02               	mullw	2
  9520  0009F8  0EA5               	movlw	low _dpowers
  9521  0009FA  24F3               	addwf	prodl,w,c
  9522  0009FC  6EF6               	movwf	tblptrl,c
  9523  0009FE  0E3E               	movlw	high _dpowers
  9524  000A00  20F4               	addwfc	prodh,w,c
  9525  000A02  6EF7               	movwf	tblptrh,c
  9526  000A04                     	if	0	;There are less than 3 active tblptr bytes
  9527  000A04                     	endif
  9528  000A04  0009               	tblrd		*+
  9529  000A06  50F5               	movf	tablat,w,c
  9530  000A08  5DF4               	subwf	sprintf@val& (0+255),w,b
  9531  000A0A  0009               	tblrd		*+
  9532  000A0C  50F5               	movf	tablat,w,c
  9533  000A0E  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9534  000A10  E320               	bnc	l7853
  9535                           
  9536                           ; BSR set to: 0
  9537  000A12  2BF9               	incf	sprintf@c& (0+255),f,b
  9538                           
  9539                           ; BSR set to: 0
  9540  000A14  0E05               	movlw	5
  9541  000A16  19F9               	xorwf	sprintf@c& (0+255),w,b
  9542  000A18  E01C               	bz	l7853
  9543  000A1A  D7EC               	goto	l7827
  9544  000A1C                     l7835:
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9548  000A1C  0E01               	movlw	1
  9549  000A1E  6FF9               	movwf	sprintf@c& (0+255),b
  9550  000A20                     l7841:
  9551                           
  9552                           ; BSR set to: 0
  9553                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9554  000A20  51F9               	movf	sprintf@c& (0+255),w,b
  9555  000A22  0D02               	mullw	2
  9556  000A24  0EAF               	movlw	low _hexpowers
  9557  000A26  24F3               	addwf	prodl,w,c
  9558  000A28  6EF6               	movwf	tblptrl,c
  9559  000A2A  0E3E               	movlw	high _hexpowers
  9560  000A2C  20F4               	addwfc	prodh,w,c
  9561  000A2E  6EF7               	movwf	tblptrh,c
  9562  000A30                     	if	0	;There are less than 3 active tblptr bytes
  9563  000A30                     	endif
  9564  000A30  0009               	tblrd		*+
  9565  000A32  50F5               	movf	tablat,w,c
  9566  000A34  5DF4               	subwf	sprintf@val& (0+255),w,b
  9567  000A36  0009               	tblrd		*+
  9568  000A38  50F5               	movf	tablat,w,c
  9569  000A3A  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9570  000A3C  E30A               	bnc	l7853
  9571                           
  9572                           ; BSR set to: 0
  9573  000A3E  2BF9               	incf	sprintf@c& (0+255),f,b
  9574                           
  9575                           ; BSR set to: 0
  9576  000A40  0E04               	movlw	4
  9577  000A42  19F9               	xorwf	sprintf@c& (0+255),w,b
  9578  000A44  E006               	bz	l7853
  9579  000A46  D7EC               	goto	l7841
  9580  000A48                     l7851:
  9581                           
  9582                           ; BSR set to: 0
  9583  000A48  51F6               	movf	sprintf@flag& (0+255),w,b
  9584  000A4A  0B80               	andlw	128
  9585                           
  9586                           ; Switch size 1, requested type "speed"
  9587                           ; Number of cases is 2, Range of values is 0 to 128
  9588                           ; switch strategies available:
  9589                           ; Name         Instructions Cycles
  9590                           ; simple_byte            7     4 (average)
  9591                           ;	Chosen strategy is simple_byte
  9592  000A4C  E0D1               	bz	l7821
  9593  000A4E  0A80               	xorlw	128	; case 128
  9594  000A50  E0E5               	bz	l7835
  9595  000A52                     l7853:
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9599  000A52  51F7               	movf	sprintf@width& (0+255),w,b
  9600  000A54  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9601  000A56  E008               	bz	l7859
  9602                           
  9603                           ; BSR set to: 0
  9604  000A58  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9605  000A5C  0E03               	movlw	3
  9606  000A5E  17ED               	andwf	??_sprintf& (0+255),f,b
  9607  000A60  E003               	bz	l7859
  9608                           
  9609                           ; BSR set to: 0
  9610                           ;doprnt.c: 1346: width--;
  9611  000A62  07F7               	decf	sprintf@width& (0+255),f,b
  9612  000A64  A0D8               	btfss	status,0,c
  9613  000A66  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9614  000A68                     l7859:
  9615                           
  9616                           ; BSR set to: 0
  9617                           ;doprnt.c: 1381: if(width > c)
  9618  000A68  0E80               	movlw	128
  9619  000A6A  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9620  000A6C  0E7F               	movlw	127
  9621  000A6E  6FED               	movwf	??_sprintf& (0+255),b
  9622  000A70  51F7               	movf	sprintf@width& (0+255),w,b
  9623  000A72  5DF9               	subwf	sprintf@c& (0+255),w,b
  9624  000A74  51F8               	movf	(sprintf@width+1)& (0+255),w,b
  9625  000A76  0A80               	xorlw	128
  9626  000A78  59ED               	subwfb	??_sprintf& (0+255),w,b
  9627  000A7A  E207               	bc	l1756
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;doprnt.c: 1382: width -= c;
  9631  000A7C  51F9               	movf	sprintf@c& (0+255),w,b
  9632  000A7E  5FF7               	subwf	sprintf@width& (0+255),f,b
  9633  000A80  0E00               	movlw	0
  9634  000A82  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9635  000A84  0EFF               	movlw	255
  9636  000A86  5BF8               	subwfb	(sprintf@width+1)& (0+255),f,b
  9637  000A88  D002               	goto	l1757
  9638  000A8A                     l1756:
  9639                           
  9640                           ; BSR set to: 0
  9641                           ;doprnt.c: 1383: else
  9642                           ;doprnt.c: 1384: width = 0;
  9643  000A8A  6BF7               	clrf	sprintf@width& (0+255),b
  9644  000A8C  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9645  000A8E                     l1757:
  9646                           
  9647                           ; BSR set to: 0
  9648                           ;doprnt.c: 1387: if(flag & 0x04) {
  9649  000A8E  A5F6               	btfss	sprintf@flag& (0+255),2,b
  9650  000A90  D018               	goto	l7877
  9651                           
  9652                           ; BSR set to: 0
  9653                           ;doprnt.c: 1392: if(flag & 0x03)
  9654  000A92  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9655  000A96  0E03               	movlw	3
  9656  000A98  17ED               	andwf	??_sprintf& (0+255),f,b
  9657  000A9A  E006               	bz	l7869
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9661  000A9C  501B               	movf	sprintf@sp,w,c
  9662  000A9E  6ED9               	movwf	fsr2l,c
  9663  000AA0  6ADA               	clrf	fsr2h,c
  9664  000AA2  0E2D               	movlw	45
  9665  000AA4  6EDF               	movwf	indf2,c
  9666                           
  9667                           ; BSR set to: 0
  9668  000AA6  2A1B               	incf	sprintf@sp,f,c
  9669  000AA8                     l7869:
  9670                           
  9671                           ; BSR set to: 0
  9672                           ;doprnt.c: 1415: if(width)
  9673  000AA8  51F7               	movf	sprintf@width& (0+255),w,b
  9674  000AAA  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9675  000AAC  E024               	bz	l7891
  9676                           
  9677                           ; BSR set to: 0
  9678                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9679  000AAE  501B               	movf	sprintf@sp,w,c
  9680  000AB0  6ED9               	movwf	fsr2l,c
  9681  000AB2  6ADA               	clrf	fsr2h,c
  9682  000AB4  0E30               	movlw	48
  9683  000AB6  6EDF               	movwf	indf2,c
  9684                           
  9685                           ; BSR set to: 0
  9686  000AB8  2A1B               	incf	sprintf@sp,f,c
  9687                           
  9688                           ; BSR set to: 0
  9689                           ;doprnt.c: 1418: while(--width);
  9690  000ABA  07F7               	decf	sprintf@width& (0+255),f,b
  9691  000ABC  A0D8               	btfss	status,0,c
  9692  000ABE  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9693  000AC0  D7F3               	goto	l7869
  9694  000AC2                     l7877:
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;doprnt.c: 1422: {
  9698                           ;doprnt.c: 1424: if(width
  9699                           ;doprnt.c: 1428: )
  9700  000AC2  51F7               	movf	sprintf@width& (0+255),w,b
  9701  000AC4  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9702  000AC6  E00C               	bz	l7885
  9703  000AC8                     l7879:
  9704                           
  9705                           ; BSR set to: 0
  9706                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9707  000AC8  501B               	movf	sprintf@sp,w,c
  9708  000ACA  6ED9               	movwf	fsr2l,c
  9709  000ACC  6ADA               	clrf	fsr2h,c
  9710  000ACE  0E20               	movlw	32
  9711  000AD0  6EDF               	movwf	indf2,c
  9712                           
  9713                           ; BSR set to: 0
  9714  000AD2  2A1B               	incf	sprintf@sp,f,c
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;doprnt.c: 1431: while(--width);
  9718  000AD4  07F7               	decf	sprintf@width& (0+255),f,b
  9719  000AD6  A0D8               	btfss	status,0,c
  9720  000AD8  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9721  000ADA  51F7               	movf	sprintf@width& (0+255),w,b
  9722  000ADC  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9723  000ADE  E1F4               	bnz	l7879
  9724  000AE0                     l7885:
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;doprnt.c: 1438: if(flag & 0x03)
  9728  000AE0  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9729  000AE4  0E03               	movlw	3
  9730  000AE6  17ED               	andwf	??_sprintf& (0+255),f,b
  9731  000AE8  E006               	bz	l7891
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9735  000AEA  501B               	movf	sprintf@sp,w,c
  9736  000AEC  6ED9               	movwf	fsr2l,c
  9737  000AEE  6ADA               	clrf	fsr2h,c
  9738  000AF0  0E2D               	movlw	45
  9739  000AF2  6EDF               	movwf	indf2,c
  9740                           
  9741                           ; BSR set to: 0
  9742  000AF4  2A1B               	incf	sprintf@sp,f,c
  9743  000AF6                     l7891:
  9744                           
  9745                           ; BSR set to: 0
  9746                           ;doprnt.c: 1469: }
  9747                           ;doprnt.c: 1472: prec = c;
  9748  000AF6  C0F9  F0F3         	movff	sprintf@c,sprintf@prec
  9749                           
  9750                           ;doprnt.c: 1474: while(prec--) {
  9751  000AFA  D04D               	goto	l7907
  9752  000AFC                     l7893:
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9756  000AFC  51F3               	movf	sprintf@prec& (0+255),w,b
  9757  000AFE  0D02               	mullw	2
  9758  000B00  0EA5               	movlw	low _dpowers
  9759  000B02  24F3               	addwf	prodl,w,c
  9760  000B04  6EF6               	movwf	tblptrl,c
  9761  000B06  0E3E               	movlw	high _dpowers
  9762  000B08  20F4               	addwfc	prodh,w,c
  9763  000B0A  6EF7               	movwf	tblptrh,c
  9764  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  9765  000B0C                     	endif
  9766  000B0C  0009               	tblrd		*+
  9767  000B0E  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9768  000B12  000A               	tblrd		*-
  9769  000B14  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9770  000B18  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9771  000B1C  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9772  000B20  EC14  F010         	call	___lwdiv	;wreg free
  9773  000B24  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  9774  000B28  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  9775  000B2C  6A19               	clrf	___lwmod@divisor+1,c
  9776  000B2E  0E0A               	movlw	10
  9777  000B30  6E18               	movwf	___lwmod@divisor,c
  9778  000B32  EC7D  F010         	call	___lwmod	;wreg free
  9779  000B36  5016               	movf	?___lwmod,w,c
  9780  000B38  0F30               	addlw	48
  9781  000B3A  6FF9               	movwf	sprintf@c& (0+255),b
  9782                           
  9783                           ;doprnt.c: 1491: break;
  9784  000B3C  D026               	goto	l7903
  9785  000B3E                     l7895:
  9786                           
  9787                           ; BSR set to: 0
  9788                           ;doprnt.c: 1499: {
  9789                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9790  000B3E  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9791  000B42  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9792  000B46  51F3               	movf	sprintf@prec& (0+255),w,b
  9793  000B48  0D02               	mullw	2
  9794  000B4A  0EAF               	movlw	low _hexpowers
  9795  000B4C  24F3               	addwf	prodl,w,c
  9796  000B4E  6EF6               	movwf	tblptrl,c
  9797  000B50  0E3E               	movlw	high _hexpowers
  9798  000B52  20F4               	addwfc	prodh,w,c
  9799  000B54  6EF7               	movwf	tblptrh,c
  9800  000B56                     	if	0	;There are less than 3 active tblptr bytes
  9801  000B56                     	endif
  9802  000B56  0009               	tblrd		*+
  9803  000B58  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9804  000B5C  000A               	tblrd		*-
  9805  000B5E  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9806  000B62  EC14  F010         	call	___lwdiv	;wreg free
  9807  000B66  500F               	movf	?___lwdiv,w,c
  9808  000B68  0B0F               	andlw	15
  9809  000B6A  6FF1               	movwf	sprintf@idx& (0+255),b
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  9813  000B6C  0EDB               	movlw	low STR_11
  9814  000B6E  25F1               	addwf	sprintf@idx& (0+255),w,b
  9815  000B70  6EF6               	movwf	tblptrl,c
  9816  000B72  6AF7               	clrf	tblptrh,c
  9817  000B74  0E3F               	movlw	high STR_11
  9818  000B76  22F7               	addwfc	tblptrh,f,c
  9819  000B78                     	if	0	;There are less than 3 active tblptr bytes
  9820  000B78                     	endif
  9821  000B78  0008               	tblrd		*
  9822  000B7A  CFF5 F0F9          	movff	tablat,sprintf@c
  9823                           
  9824                           ;doprnt.c: 1508: }
  9825                           ;doprnt.c: 1510: break;
  9826  000B7E  D005               	goto	l7903
  9827  000B80                     l7901:
  9828                           
  9829                           ; BSR set to: 0
  9830  000B80  51F6               	movf	sprintf@flag& (0+255),w,b
  9831  000B82  0B80               	andlw	128
  9832                           
  9833                           ; Switch size 1, requested type "speed"
  9834                           ; Number of cases is 2, Range of values is 0 to 128
  9835                           ; switch strategies available:
  9836                           ; Name         Instructions Cycles
  9837                           ; simple_byte            7     4 (average)
  9838                           ;	Chosen strategy is simple_byte
  9839  000B84  E0BB               	bz	l7893
  9840  000B86  0A80               	xorlw	128	; case 128
  9841  000B88  E0DA               	bz	l7895
  9842  000B8A                     l7903:
  9843                           
  9844                           ; BSR set to: 0
  9845                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9846  000B8A  501B               	movf	sprintf@sp,w,c
  9847  000B8C  6ED9               	movwf	fsr2l,c
  9848  000B8E  6ADA               	clrf	fsr2h,c
  9849  000B90  C0F9  FFDF         	movff	sprintf@c,indf2
  9850                           
  9851                           ; BSR set to: 0
  9852  000B94  2A1B               	incf	sprintf@sp,f,c
  9853  000B96                     l7907:
  9854                           
  9855                           ; BSR set to: 0
  9856  000B96  07F3               	decf	sprintf@prec& (0+255),f,b
  9857  000B98  29F3               	incf	sprintf@prec& (0+255),w,b
  9858  000B9A  E1F2               	bnz	l7901
  9859  000B9C                     l7909:
  9860                           
  9861                           ; BSR set to: 0
  9862  000B9C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9863  000BA0  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9864  000BA4  4A1C               	infsnz	sprintf@f,f,c
  9865  000BA6  2A1D               	incf	sprintf@f+1,f,c
  9866  000BA8                     	if	0	;tblptru may be non-zero
  9867  000BA8                     	endif
  9868  000BA8                     	if	0	;tblptru may be non-zero
  9869  000BA8                     	endif
  9870  000BA8  0008               	tblrd		*
  9871  000BAA  CFF5 F0F9          	movff	tablat,sprintf@c
  9872  000BAE  51F9               	movf	sprintf@c& (0+255),w,b
  9873  000BB0  E001 D696          	bnz	l7777
  9874  000BB4                     l7911:
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;doprnt.c: 1538: *sp = 0;
  9878  000BB4  501B               	movf	sprintf@sp,w,c
  9879  000BB6  6ED9               	movwf	fsr2l,c
  9880  000BB8  6ADA               	clrf	fsr2h,c
  9881  000BBA  6ADF               	clrf	indf2,c
  9882                           
  9883                           ; BSR set to: 0
  9884  000BBC  0C00               	retlw	0	;funcret
  9885  000BBE                     __end_of_sprintf:
  9886                           	opt stack 0
  9887                           tblptru	equ	0xFF8
  9888                           tblptrh	equ	0xFF7
  9889                           tblptrl	equ	0xFF6
  9890                           tablat	equ	0xFF5
  9891                           prodh	equ	0xFF4
  9892                           prodl	equ	0xFF3
  9893                           intcon	equ	0xFF2
  9894                           intcon2	equ	0xFF1
  9895                           intcon3	equ	0xFF0
  9896                           postinc0	equ	0xFEE
  9897                           wreg	equ	0xFE8
  9898                           indf1	equ	0xFE7
  9899                           postdec1	equ	0xFE5
  9900                           fsr1h	equ	0xFE2
  9901                           fsr1l	equ	0xFE1
  9902                           indf2	equ	0xFDF
  9903                           postinc2	equ	0xFDE
  9904                           postdec2	equ	0xFDD
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _isdigit *****************
  9910 ;; Defined at:
  9911 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  c               1    wreg     unsigned char 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;  c               1   16[COMRAM] unsigned char 
  9916 ;; Return value:  Size  Location     Type
  9917 ;;		None               void
  9918 ;; Registers used:
  9919 ;;		wreg, status,2, status,0
  9920 ;; Tracked objects:
  9921 ;;		On entry : 3F/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9925 ;;      Params:         0       0       0       0
  9926 ;;      Locals:         2       0       0       0
  9927 ;;      Temps:          1       0       0       0
  9928 ;;      Totals:         3       0       0       0
  9929 ;;Total ram usage:        3 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:   10
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_sprintf
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text49
  9940  0024F2                     __ptext49:
  9941                           	opt stack 0
  9942  0024F2                     _isdigit:
  9943                           	opt stack 15
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;incstack = 0
  9947                           ;isdigit@c stored from wreg
  9948  0024F2  6E11               	movwf	isdigit@c,c
  9949  0024F4  6A10               	clrf	_isdigit$3659,c
  9950  0024F6  0E3A               	movlw	58
  9951  0024F8  6011               	cpfslt	isdigit@c,c
  9952  0024FA  D005               	goto	l7599
  9953  0024FC  0E2F               	movlw	47
  9954  0024FE  6411               	cpfsgt	isdigit@c,c
  9955  002500  D002               	goto	l7599
  9956  002502  0E01               	movlw	1
  9957  002504  6E10               	movwf	_isdigit$3659,c
  9958  002506                     l7599:
  9959  002506  C010  F00F         	movff	_isdigit$3659,??_isdigit
  9960  00250A  300F               	rrcf	??_isdigit,w,c
  9961  00250C  0012               	return		;funcret
  9962  00250E                     __end_of_isdigit:
  9963                           	opt stack 0
  9964                           tblptru	equ	0xFF8
  9965                           tblptrh	equ	0xFF7
  9966                           tblptrl	equ	0xFF6
  9967                           tablat	equ	0xFF5
  9968                           prodh	equ	0xFF4
  9969                           prodl	equ	0xFF3
  9970                           intcon	equ	0xFF2
  9971                           intcon2	equ	0xFF1
  9972                           intcon3	equ	0xFF0
  9973                           postinc0	equ	0xFEE
  9974                           wreg	equ	0xFE8
  9975                           indf1	equ	0xFE7
  9976                           postdec1	equ	0xFE5
  9977                           fsr1h	equ	0xFE2
  9978                           fsr1l	equ	0xFE1
  9979                           indf2	equ	0xFDF
  9980                           postinc2	equ	0xFDE
  9981                           postdec2	equ	0xFDD
  9982                           fsr2h	equ	0xFDA
  9983                           fsr2l	equ	0xFD9
  9984                           status	equ	0xFD8
  9985                           
  9986 ;; *************** function ___wmul *****************
  9987 ;; Defined at:
  9988 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9989 ;; Parameters:    Size  Location     Type
  9990 ;;  multiplier      2   14[COMRAM] unsigned int 
  9991 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9992 ;; Auto vars:     Size  Location     Type
  9993 ;;  product         2   18[COMRAM] unsigned int 
  9994 ;; Return value:  Size  Location     Type
  9995 ;;                  2   14[COMRAM] unsigned int 
  9996 ;; Registers used:
  9997 ;;		wreg, status,2, status,0, prodl, prodh
  9998 ;; Tracked objects:
  9999 ;;		On entry : 0/0
 10000 ;;		On exit  : 0/0
 10001 ;;		Unchanged: 0/0
 10002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10003 ;;      Params:         4       0       0       0
 10004 ;;      Locals:         2       0       0       0
 10005 ;;      Temps:          0       0       0       0
 10006 ;;      Totals:         6       0       0       0
 10007 ;;Total ram usage:        6 bytes
 10008 ;; Hardware stack levels used:    1
 10009 ;; Hardware stack levels required when called:   10
 10010 ;; This function calls:
 10011 ;;		Nothing
 10012 ;; This function is called by:
 10013 ;;		_sprintf
 10014 ;; This function uses a non-reentrant model
 10015 ;;
 10016                           
 10017                           	psect	text50
 10018  00238E                     __ptext50:
 10019                           	opt stack 0
 10020  00238E                     ___wmul:
 10021                           	opt stack 15
 10022                           
 10023                           ;incstack = 0
 10024  00238E  500F               	movf	___wmul@multiplier,w,c
 10025  002390  0211               	mulwf	___wmul@multiplicand,c
 10026  002392  CFF3 F013          	movff	prodl,___wmul@product
 10027  002396  CFF4 F014          	movff	prodh,___wmul@product+1
 10028  00239A  500F               	movf	___wmul@multiplier,w,c
 10029  00239C  0212               	mulwf	___wmul@multiplicand+1,c
 10030  00239E  50F3               	movf	prodl,w,c
 10031  0023A0  2614               	addwf	___wmul@product+1,f,c
 10032  0023A2  5010               	movf	___wmul@multiplier+1,w,c
 10033  0023A4  0211               	mulwf	___wmul@multiplicand,c
 10034  0023A6  50F3               	movf	prodl,w,c
 10035  0023A8  2614               	addwf	___wmul@product+1,f,c
 10036  0023AA  C013  F00F         	movff	___wmul@product,?___wmul
 10037  0023AE  C014  F010         	movff	___wmul@product+1,?___wmul+1
 10038  0023B2  0012               	return		;funcret
 10039  0023B4                     __end_of___wmul:
 10040                           	opt stack 0
 10041                           tblptru	equ	0xFF8
 10042                           tblptrh	equ	0xFF7
 10043                           tblptrl	equ	0xFF6
 10044                           tablat	equ	0xFF5
 10045                           prodh	equ	0xFF4
 10046                           prodl	equ	0xFF3
 10047                           intcon	equ	0xFF2
 10048                           intcon2	equ	0xFF1
 10049                           intcon3	equ	0xFF0
 10050                           postinc0	equ	0xFEE
 10051                           wreg	equ	0xFE8
 10052                           indf1	equ	0xFE7
 10053                           postdec1	equ	0xFE5
 10054                           fsr1h	equ	0xFE2
 10055                           fsr1l	equ	0xFE1
 10056                           indf2	equ	0xFDF
 10057                           postinc2	equ	0xFDE
 10058                           postdec2	equ	0xFDD
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function ___lwmod *****************
 10064 ;; Defined at:
 10065 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;  dividend        2   21[COMRAM] unsigned int 
 10068 ;;  divisor         2   23[COMRAM] unsigned int 
 10069 ;; Auto vars:     Size  Location     Type
 10070 ;;  counter         1   25[COMRAM] unsigned char 
 10071 ;; Return value:  Size  Location     Type
 10072 ;;                  2   21[COMRAM] unsigned int 
 10073 ;; Registers used:
 10074 ;;		wreg, status,2, status,0
 10075 ;; Tracked objects:
 10076 ;;		On entry : 3F/0
 10077 ;;		On exit  : 3F/0
 10078 ;;		Unchanged: 3F/0
 10079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10080 ;;      Params:         4       0       0       0
 10081 ;;      Locals:         1       0       0       0
 10082 ;;      Temps:          0       0       0       0
 10083 ;;      Totals:         5       0       0       0
 10084 ;;Total ram usage:        5 bytes
 10085 ;; Hardware stack levels used:    1
 10086 ;; Hardware stack levels required when called:   10
 10087 ;; This function calls:
 10088 ;;		Nothing
 10089 ;; This function is called by:
 10090 ;;		_sprintf
 10091 ;; This function uses a non-reentrant model
 10092 ;;
 10093                           
 10094                           	psect	text51
 10095  0020FA                     __ptext51:
 10096                           	opt stack 0
 10097  0020FA                     ___lwmod:
 10098                           	opt stack 15
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ;incstack = 0
 10103  0020FA  5018               	movf	___lwmod@divisor,w,c
 10104  0020FC  1019               	iorwf	___lwmod@divisor+1,w,c
 10105  0020FE  E017               	bz	l2188
 10106                           
 10107                           ; BSR set to: 0
 10108  002100  0E01               	movlw	1
 10109  002102  6E1A               	movwf	___lwmod@counter,c
 10110  002104  D004               	goto	l7673
 10111  002106                     l7671:
 10112                           
 10113                           ; BSR set to: 0
 10114  002106  90D8               	bcf	status,0,c
 10115  002108  3618               	rlcf	___lwmod@divisor,f,c
 10116  00210A  3619               	rlcf	___lwmod@divisor+1,f,c
 10117  00210C  2A1A               	incf	___lwmod@counter,f,c
 10118  00210E                     l7673:
 10119                           
 10120                           ; BSR set to: 0
 10121  00210E  AE19               	btfss	___lwmod@divisor+1,7,c
 10122  002110  D7FA               	goto	l7671
 10123  002112                     l7675:
 10124                           
 10125                           ; BSR set to: 0
 10126  002112  5018               	movf	___lwmod@divisor,w,c
 10127  002114  5C16               	subwf	___lwmod@dividend,w,c
 10128  002116  5019               	movf	___lwmod@divisor+1,w,c
 10129  002118  5817               	subwfb	___lwmod@dividend+1,w,c
 10130  00211A  E304               	bnc	l7679
 10131                           
 10132                           ; BSR set to: 0
 10133  00211C  5018               	movf	___lwmod@divisor,w,c
 10134  00211E  5E16               	subwf	___lwmod@dividend,f,c
 10135  002120  5019               	movf	___lwmod@divisor+1,w,c
 10136  002122  5A17               	subwfb	___lwmod@dividend+1,f,c
 10137  002124                     l7679:
 10138                           
 10139                           ; BSR set to: 0
 10140  002124  90D8               	bcf	status,0,c
 10141  002126  3219               	rrcf	___lwmod@divisor+1,f,c
 10142  002128  3218               	rrcf	___lwmod@divisor,f,c
 10143                           
 10144                           ; BSR set to: 0
 10145  00212A  2E1A               	decfsz	___lwmod@counter,f,c
 10146  00212C  D7F2               	goto	l7675
 10147  00212E                     l2188:
 10148                           
 10149                           ; BSR set to: 0
 10150  00212E  C016  F016         	movff	___lwmod@dividend,?___lwmod
 10151  002132  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 10152                           
 10153                           ; BSR set to: 0
 10154  002136  0012               	return		;funcret
 10155  002138                     __end_of___lwmod:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           intcon	equ	0xFF2
 10164                           intcon2	equ	0xFF1
 10165                           intcon3	equ	0xFF0
 10166                           postinc0	equ	0xFEE
 10167                           wreg	equ	0xFE8
 10168                           indf1	equ	0xFE7
 10169                           postdec1	equ	0xFE5
 10170                           fsr1h	equ	0xFE2
 10171                           fsr1l	equ	0xFE1
 10172                           indf2	equ	0xFDF
 10173                           postinc2	equ	0xFDE
 10174                           postdec2	equ	0xFDD
 10175                           fsr2h	equ	0xFDA
 10176                           fsr2l	equ	0xFD9
 10177                           status	equ	0xFD8
 10178                           
 10179 ;; *************** function ___lwdiv *****************
 10180 ;; Defined at:
 10181 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
 10182 ;; Parameters:    Size  Location     Type
 10183 ;;  dividend        2   14[COMRAM] unsigned int 
 10184 ;;  divisor         2   16[COMRAM] unsigned int 
 10185 ;; Auto vars:     Size  Location     Type
 10186 ;;  quotient        2   19[COMRAM] unsigned int 
 10187 ;;  counter         1   18[COMRAM] unsigned char 
 10188 ;; Return value:  Size  Location     Type
 10189 ;;                  2   14[COMRAM] unsigned int 
 10190 ;; Registers used:
 10191 ;;		wreg, status,2, status,0
 10192 ;; Tracked objects:
 10193 ;;		On entry : 3F/0
 10194 ;;		On exit  : 3F/0
 10195 ;;		Unchanged: 3F/0
 10196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10197 ;;      Params:         4       0       0       0
 10198 ;;      Locals:         3       0       0       0
 10199 ;;      Temps:          0       0       0       0
 10200 ;;      Totals:         7       0       0       0
 10201 ;;Total ram usage:        7 bytes
 10202 ;; Hardware stack levels used:    1
 10203 ;; Hardware stack levels required when called:   10
 10204 ;; This function calls:
 10205 ;;		Nothing
 10206 ;; This function is called by:
 10207 ;;		_sprintf
 10208 ;; This function uses a non-reentrant model
 10209 ;;
 10210                           
 10211                           	psect	text52
 10212  002028                     __ptext52:
 10213                           	opt stack 0
 10214  002028                     ___lwdiv:
 10215                           	opt stack 15
 10216                           
 10217                           ; BSR set to: 0
 10218                           
 10219                           ; BSR set to: 0
 10220                           ;incstack = 0
 10221  002028  6A14               	clrf	___lwdiv@quotient,c
 10222  00202A  6A15               	clrf	___lwdiv@quotient+1,c
 10223                           
 10224                           ; BSR set to: 0
 10225  00202C  5011               	movf	___lwdiv@divisor,w,c
 10226  00202E  1012               	iorwf	___lwdiv@divisor+1,w,c
 10227  002030  E01B               	bz	l2178
 10228                           
 10229                           ; BSR set to: 0
 10230  002032  0E01               	movlw	1
 10231  002034  6E13               	movwf	___lwdiv@counter,c
 10232  002036  D004               	goto	l7653
 10233  002038                     l7651:
 10234                           
 10235                           ; BSR set to: 0
 10236  002038  90D8               	bcf	status,0,c
 10237  00203A  3611               	rlcf	___lwdiv@divisor,f,c
 10238  00203C  3612               	rlcf	___lwdiv@divisor+1,f,c
 10239  00203E  2A13               	incf	___lwdiv@counter,f,c
 10240  002040                     l7653:
 10241                           
 10242                           ; BSR set to: 0
 10243  002040  AE12               	btfss	___lwdiv@divisor+1,7,c
 10244  002042  D7FA               	goto	l7651
 10245  002044                     l7655:
 10246                           
 10247                           ; BSR set to: 0
 10248  002044  90D8               	bcf	status,0,c
 10249  002046  3614               	rlcf	___lwdiv@quotient,f,c
 10250  002048  3615               	rlcf	___lwdiv@quotient+1,f,c
 10251                           
 10252                           ; BSR set to: 0
 10253  00204A  5011               	movf	___lwdiv@divisor,w,c
 10254  00204C  5C0F               	subwf	___lwdiv@dividend,w,c
 10255  00204E  5012               	movf	___lwdiv@divisor+1,w,c
 10256  002050  5810               	subwfb	___lwdiv@dividend+1,w,c
 10257  002052  E305               	bnc	l7663
 10258                           
 10259                           ; BSR set to: 0
 10260  002054  5011               	movf	___lwdiv@divisor,w,c
 10261  002056  5E0F               	subwf	___lwdiv@dividend,f,c
 10262  002058  5012               	movf	___lwdiv@divisor+1,w,c
 10263  00205A  5A10               	subwfb	___lwdiv@dividend+1,f,c
 10264                           
 10265                           ; BSR set to: 0
 10266  00205C  8014               	bsf	___lwdiv@quotient,0,c
 10267  00205E                     l7663:
 10268                           
 10269                           ; BSR set to: 0
 10270  00205E  90D8               	bcf	status,0,c
 10271  002060  3212               	rrcf	___lwdiv@divisor+1,f,c
 10272  002062  3211               	rrcf	___lwdiv@divisor,f,c
 10273                           
 10274                           ; BSR set to: 0
 10275  002064  2E13               	decfsz	___lwdiv@counter,f,c
 10276  002066  D7EE               	goto	l7655
 10277  002068                     l2178:
 10278                           
 10279                           ; BSR set to: 0
 10280  002068  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 10281  00206C  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10282                           
 10283                           ; BSR set to: 0
 10284  002070  0012               	return		;funcret
 10285  002072                     __end_of___lwdiv:
 10286                           	opt stack 0
 10287                           tblptru	equ	0xFF8
 10288                           tblptrh	equ	0xFF7
 10289                           tblptrl	equ	0xFF6
 10290                           tablat	equ	0xFF5
 10291                           prodh	equ	0xFF4
 10292                           prodl	equ	0xFF3
 10293                           intcon	equ	0xFF2
 10294                           intcon2	equ	0xFF1
 10295                           intcon3	equ	0xFF0
 10296                           postinc0	equ	0xFEE
 10297                           wreg	equ	0xFE8
 10298                           indf1	equ	0xFE7
 10299                           postdec1	equ	0xFE5
 10300                           fsr1h	equ	0xFE2
 10301                           fsr1l	equ	0xFE1
 10302                           indf2	equ	0xFDF
 10303                           postinc2	equ	0xFDE
 10304                           postdec2	equ	0xFDD
 10305                           fsr2h	equ	0xFDA
 10306                           fsr2l	equ	0xFD9
 10307                           status	equ	0xFD8
 10308                           
 10309 ;; *************** function _delay_1s *****************
 10310 ;; Defined at:
 10311 ;;		line 76 in file "horloge.c"
 10312 ;; Parameters:    Size  Location     Type
 10313 ;;		None
 10314 ;; Auto vars:     Size  Location     Type
 10315 ;;		None
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      void 
 10318 ;; Registers used:
 10319 ;;		wreg, cstack
 10320 ;; Tracked objects:
 10321 ;;		On entry : 0/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10325 ;;      Params:         0       0       0       0
 10326 ;;      Locals:         0       0       0       0
 10327 ;;      Temps:          0       0       0       0
 10328 ;;      Totals:         0       0       0       0
 10329 ;;Total ram usage:        0 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:   11
 10332 ;; This function calls:
 10333 ;;		_delay_100ms
 10334 ;; This function is called by:
 10335 ;;		_EUSART1_RX_T3_LOCAL
 10336 ;; This function uses a non-reentrant model
 10337 ;;
 10338                           
 10339                           	psect	text53
 10340  0022F2                     __ptext53:
 10341                           	opt stack 0
 10342  0022F2                     _delay_1s:
 10343                           	opt stack 15
 10344                           
 10345                           ;horloge.c: 77: delay_100ms();
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;incstack = 0
 10349  0022F2  EC1E  F00C         	call	_delay_100ms	;wreg free
 10350                           
 10351                           ;horloge.c: 78: delay_100ms();
 10352  0022F6  EC1E  F00C         	call	_delay_100ms	;wreg free
 10353                           
 10354                           ;horloge.c: 79: delay_100ms();
 10355  0022FA  EC1E  F00C         	call	_delay_100ms	;wreg free
 10356                           
 10357                           ;horloge.c: 80: delay_100ms();
 10358  0022FE  EC1E  F00C         	call	_delay_100ms	;wreg free
 10359                           
 10360                           ;horloge.c: 81: delay_100ms();
 10361  002302  EC1E  F00C         	call	_delay_100ms	;wreg free
 10362                           
 10363                           ;horloge.c: 82: delay_100ms();
 10364  002306  EC1E  F00C         	call	_delay_100ms	;wreg free
 10365                           
 10366                           ;horloge.c: 83: delay_100ms();
 10367  00230A  EC1E  F00C         	call	_delay_100ms	;wreg free
 10368                           
 10369                           ;horloge.c: 84: delay_100ms();
 10370  00230E  EC1E  F00C         	call	_delay_100ms	;wreg free
 10371                           
 10372                           ;horloge.c: 85: delay_100ms();
 10373  002312  EC1E  F00C         	call	_delay_100ms	;wreg free
 10374                           
 10375                           ;horloge.c: 86: delay_100ms();
 10376  002316  EF1E  F00C         	goto	_delay_100ms	;wreg free
 10377  00231A                     __end_of_delay_1s:
 10378                           	opt stack 0
 10379                           tblptru	equ	0xFF8
 10380                           tblptrh	equ	0xFF7
 10381                           tblptrl	equ	0xFF6
 10382                           tablat	equ	0xFF5
 10383                           prodh	equ	0xFF4
 10384                           prodl	equ	0xFF3
 10385                           intcon	equ	0xFF2
 10386                           intcon2	equ	0xFF1
 10387                           intcon3	equ	0xFF0
 10388                           postinc0	equ	0xFEE
 10389                           wreg	equ	0xFE8
 10390                           indf1	equ	0xFE7
 10391                           postdec1	equ	0xFE5
 10392                           fsr1h	equ	0xFE2
 10393                           fsr1l	equ	0xFE1
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           fsr2h	equ	0xFDA
 10398                           fsr2l	equ	0xFD9
 10399                           status	equ	0xFD8
 10400                           
 10401 ;; *************** function _delay_100ms *****************
 10402 ;; Defined at:
 10403 ;;		line 46 in file "horloge.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;		None
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      void 
 10410 ;; Registers used:
 10411 ;;		wreg
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/2
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10417 ;;      Params:         0       0       0       0
 10418 ;;      Locals:         0       0       0       0
 10419 ;;      Temps:          1       0       0       0
 10420 ;;      Totals:         1       0       0       0
 10421 ;;Total ram usage:        1 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:   10
 10424 ;; This function calls:
 10425 ;;		Nothing
 10426 ;; This function is called by:
 10427 ;;		_delay_n_100ms
 10428 ;;		_delay_1s
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           	psect	text54
 10433  00183C                     __ptext54:
 10434                           	opt stack 0
 10435  00183C                     _delay_100ms:
 10436                           	opt stack 15
 10437                           
 10438                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
 10439                           
 10440                           ;incstack = 0
 10441  00183C  0E1A               	movlw	26
 10442  00183E  6E0F               	movwf	??_delay_100ms& (0+255),c
 10443  001840  0EF8               	movlw	248
 10444  001842                     u7357:
 10445  001842  2EE8               	decfsz	wreg,f,c
 10446  001844  D7FE               	bra	u7357
 10447  001846  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10448  001848  D7FC               	bra	u7357
 10449  00184A  F000 F000          	nop2	
 10450                           
 10451                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
 10452  00184E  0E1A               	movlw	26
 10453  001850  6E0F               	movwf	??_delay_100ms& (0+255),c
 10454  001852  0EF8               	movlw	248
 10455  001854                     u7367:
 10456  001854  2EE8               	decfsz	wreg,f,c
 10457  001856  D7FE               	bra	u7367
 10458  001858  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10459  00185A  D7FC               	bra	u7367
 10460  00185C  F000 F000          	nop2	
 10461                           
 10462                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
 10463  001860  0E1A               	movlw	26
 10464  001862  6E0F               	movwf	??_delay_100ms& (0+255),c
 10465  001864  0EF8               	movlw	248
 10466  001866                     u7377:
 10467  001866  2EE8               	decfsz	wreg,f,c
 10468  001868  D7FE               	bra	u7377
 10469  00186A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10470  00186C  D7FC               	bra	u7377
 10471  00186E  F000 F000          	nop2	
 10472                           
 10473                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
 10474  001872  0E1A               	movlw	26
 10475  001874  6E0F               	movwf	??_delay_100ms& (0+255),c
 10476  001876  0EF8               	movlw	248
 10477  001878                     u7387:
 10478  001878  2EE8               	decfsz	wreg,f,c
 10479  00187A  D7FE               	bra	u7387
 10480  00187C  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10481  00187E  D7FC               	bra	u7387
 10482  001880  F000 F000          	nop2	
 10483                           
 10484                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
 10485  001884  0E1A               	movlw	26
 10486  001886  6E0F               	movwf	??_delay_100ms& (0+255),c
 10487  001888  0EF8               	movlw	248
 10488  00188A                     u7397:
 10489  00188A  2EE8               	decfsz	wreg,f,c
 10490  00188C  D7FE               	bra	u7397
 10491  00188E  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10492  001890  D7FC               	bra	u7397
 10493  001892  F000 F000          	nop2	
 10494                           
 10495                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
 10496  001896  0E1A               	movlw	26
 10497  001898  6E0F               	movwf	??_delay_100ms& (0+255),c
 10498  00189A  0EF8               	movlw	248
 10499  00189C                     u7407:
 10500  00189C  2EE8               	decfsz	wreg,f,c
 10501  00189E  D7FE               	bra	u7407
 10502  0018A0  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10503  0018A2  D7FC               	bra	u7407
 10504  0018A4  F000 F000          	nop2	
 10505                           
 10506                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
 10507  0018A8  0E1A               	movlw	26
 10508  0018AA  6E0F               	movwf	??_delay_100ms& (0+255),c
 10509  0018AC  0EF8               	movlw	248
 10510  0018AE                     u7417:
 10511  0018AE  2EE8               	decfsz	wreg,f,c
 10512  0018B0  D7FE               	bra	u7417
 10513  0018B2  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10514  0018B4  D7FC               	bra	u7417
 10515  0018B6  F000 F000          	nop2	
 10516                           
 10517                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
 10518  0018BA  0E1A               	movlw	26
 10519  0018BC  6E0F               	movwf	??_delay_100ms& (0+255),c
 10520  0018BE  0EF8               	movlw	248
 10521  0018C0                     u7427:
 10522  0018C0  2EE8               	decfsz	wreg,f,c
 10523  0018C2  D7FE               	bra	u7427
 10524  0018C4  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10525  0018C6  D7FC               	bra	u7427
 10526  0018C8  F000 F000          	nop2	
 10527                           
 10528                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
 10529  0018CC  0E1A               	movlw	26
 10530  0018CE  6E0F               	movwf	??_delay_100ms& (0+255),c
 10531  0018D0  0EF8               	movlw	248
 10532  0018D2                     u7437:
 10533  0018D2  2EE8               	decfsz	wreg,f,c
 10534  0018D4  D7FE               	bra	u7437
 10535  0018D6  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10536  0018D8  D7FC               	bra	u7437
 10537  0018DA  F000 F000          	nop2	
 10538                           
 10539                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
 10540  0018DE  0E1A               	movlw	26
 10541  0018E0  6E0F               	movwf	??_delay_100ms& (0+255),c
 10542  0018E2  0EF8               	movlw	248
 10543  0018E4                     u7447:
 10544  0018E4  2EE8               	decfsz	wreg,f,c
 10545  0018E6  D7FE               	bra	u7447
 10546  0018E8  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10547  0018EA  D7FC               	bra	u7447
 10548  0018EC  F000 F000          	nop2	
 10549  0018F0  0012               	return		;funcret
 10550  0018F2                     __end_of_delay_100ms:
 10551                           	opt stack 0
 10552                           tblptru	equ	0xFF8
 10553                           tblptrh	equ	0xFF7
 10554                           tblptrl	equ	0xFF6
 10555                           tablat	equ	0xFF5
 10556                           prodh	equ	0xFF4
 10557                           prodl	equ	0xFF3
 10558                           intcon	equ	0xFF2
 10559                           intcon2	equ	0xFF1
 10560                           intcon3	equ	0xFF0
 10561                           postinc0	equ	0xFEE
 10562                           wreg	equ	0xFE8
 10563                           indf1	equ	0xFE7
 10564                           postdec1	equ	0xFE5
 10565                           fsr1h	equ	0xFE2
 10566                           fsr1l	equ	0xFE1
 10567                           indf2	equ	0xFDF
 10568                           postinc2	equ	0xFDE
 10569                           postdec2	equ	0xFDD
 10570                           fsr2h	equ	0xFDA
 10571                           fsr2l	equ	0xFD9
 10572                           status	equ	0xFD8
 10573                           
 10574 ;; *************** function _IRQ_Execution *****************
 10575 ;; Defined at:
 10576 ;;		line 40 in file "interrupt.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;  IRQ_Indice      1    wreg     unsigned char 
 10579 ;; Auto vars:     Size  Location     Type
 10580 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
 10581 ;; Return value:  Size  Location     Type
 10582 ;;                  1    wreg      void 
 10583 ;; Registers used:
 10584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10585 ;; Tracked objects:
 10586 ;;		On entry : 3F/2
 10587 ;;		On exit  : 0/0
 10588 ;;		Unchanged: 0/0
 10589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10590 ;;      Params:         0       0       0       0
 10591 ;;      Locals:         1       0       0       0
 10592 ;;      Temps:          0       0       0       0
 10593 ;;      Totals:         1       0       0       0
 10594 ;;Total ram usage:        1 bytes
 10595 ;; Hardware stack levels used:    1
 10596 ;; Hardware stack levels required when called:   14
 10597 ;; This function calls:
 10598 ;;		_IRQ_ADC
 10599 ;;		_IRQ_CAPOT
 10600 ;;		_IRQ_I_MOTEUR_1
 10601 ;;		_IRQ_I_MOTEUR_2
 10602 ;;		_IRQ_PION_Metal_Apparait
 10603 ;;		_IRQ_PION_Metal_Disparait
 10604 ;;		_IRQ_PWM
 10605 ;;		_IRQ_TIMER2
 10606 ;;		_IRQ_TIMER_0
 10607 ;;		_IRQ_TIMER_5
 10608 ;; This function is called by:
 10609 ;;		_EUSART1_RX_T3_LOCAL
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           	psect	text55
 10614  001EEA                     __ptext55:
 10615                           	opt stack 0
 10616  001EEA                     _IRQ_Execution:
 10617                           	opt stack 12
 10618                           
 10619                           ;incstack = 0
 10620                           ;IRQ_Execution@IRQ_Indice stored from wreg
 10621  001EEA  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
 10622                           
 10623                           ;interrupt.c: 62: break;
 10624                           
 10625                           ;interrupt.c: 60: break;
 10626                           
 10627                           ;interrupt.c: 58: break;
 10628                           
 10629                           ;interrupt.c: 56: break;
 10630                           
 10631                           ;interrupt.c: 54: break;
 10632                           
 10633                           ;interrupt.c: 52: break;
 10634                           
 10635                           ;interrupt.c: 50: break;
 10636                           
 10637                           ;interrupt.c: 48: break;
 10638                           
 10639                           ;interrupt.c: 46: break;
 10640                           
 10641                           ;interrupt.c: 44: break;
 10642                           
 10643                           ;interrupt.c: 41: switch (IRQ_Indice) {
 10644  001EEC  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
 10645                           
 10646                           ; Switch size 1, requested type "speed"
 10647                           ; Number of cases is 10, Range of values is 0 to 9
 10648                           ; switch strategies available:
 10649                           ; Name         Instructions Cycles
 10650                           ; simple_byte           31    16 (average)
 10651                           ;	Chosen strategy is simple_byte
 10652  001EEE  E102 EF9B  F013    	bz	_IRQ_CAPOT
 10653  001EF4  0A01               	xorlw	1	; case 1
 10654  001EF6  E102 EFB7  F012    	bz	_IRQ_I_MOTEUR_1
 10655  001EFC  0A03               	xorlw	3	; case 2
 10656  001EFE  E102 EFAC  F012    	bz	_IRQ_I_MOTEUR_2
 10657  001F04  0A01               	xorlw	1	; case 3
 10658  001F06  E102 EF2F  F012    	bz	_IRQ_PION_Metal_Apparait
 10659  001F0C  0A07               	xorlw	7	; case 4
 10660  001F0E  E102 EF94  F012    	bz	_IRQ_PION_Metal_Disparait
 10661  001F14  0A01               	xorlw	1	; case 5
 10662  001F16  E102 EF1D  F00F    	bz	_IRQ_TIMER_0
 10663  001F1C  0A03               	xorlw	3	; case 6
 10664  001F1E  E102 EFAA  F013    	bz	_IRQ_TIMER2
 10665  001F24  0A01               	xorlw	1	; case 7
 10666  001F26  E102 EFB5  F00D    	bz	_IRQ_TIMER_5
 10667  001F2C  0A0F               	xorlw	15	; case 8
 10668  001F2E  E102 EF0A  F007    	bz	_IRQ_ADC
 10669  001F34  0A01               	xorlw	1	; case 9
 10670  001F36  E102 EFBD  F013    	bz	_IRQ_PWM
 10671  001F3C  0012               	return		;funcret
 10672  001F3E                     __end_of_IRQ_Execution:
 10673                           	opt stack 0
 10674                           tblptru	equ	0xFF8
 10675                           tblptrh	equ	0xFF7
 10676                           tblptrl	equ	0xFF6
 10677                           tablat	equ	0xFF5
 10678                           prodh	equ	0xFF4
 10679                           prodl	equ	0xFF3
 10680                           intcon	equ	0xFF2
 10681                           intcon2	equ	0xFF1
 10682                           intcon3	equ	0xFF0
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           indf1	equ	0xFE7
 10686                           postdec1	equ	0xFE5
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _IRQ_TIMER_5 *****************
 10697 ;; Defined at:
 10698 ;;		line 409 in file "interrupt.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;		None
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;		None
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      void 
 10705 ;; Registers used:
 10706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/2
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10712 ;;      Params:         0       0       0       0
 10713 ;;      Locals:         0       0       0       0
 10714 ;;      Temps:          0       0       0       0
 10715 ;;      Totals:         0       0       0       0
 10716 ;;Total ram usage:        0 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:   13
 10719 ;; This function calls:
 10720 ;;		_Alarme_On
 10721 ;;		_Buzzer_Etat
 10722 ;;		_Etat_Update
 10723 ;;		_TIMER5_Off
 10724 ;; This function is called by:
 10725 ;;		_IRQ_Execution
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           	psect	text56
 10730  001B6A                     __ptext56:
 10731                           	opt stack 0
 10732  001B6A                     _IRQ_TIMER_5:
 10733                           	opt stack 12
 10734                           
 10735                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 10736                           
 10737                           ;incstack = 0
 10738  001B6A  90A4               	bcf	4004,0,c	;volatile
 10739                           
 10740                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 10741  001B6C  0100               	movlb	0	; () banked
 10742  001B6E  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 10743                           
 10744                           ; BSR set to: 0
 10745                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 10746  001B70  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 10747  001B72  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10748  001B74  E115               	bnz	l7509
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 10752  001B76  044D               	decf	_Mouvement_Startup,w,c
 10753  001B78  E001               	bz	l7495
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;interrupt.c: 418: nb_Pion += 1;
 10757  001B7A  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 10758  001B7C                     l7495:
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;interrupt.c: 419: }
 10762                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 10763  001B7C  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 10767  001B7E  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10768  001B80  E003               	bz	l607
 10769                           
 10770                           ; BSR set to: 0
 10771  001B82  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10772  001B84  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 10773  001B86  E202               	bc	l7501
 10774  001B88                     l607:
 10775                           
 10776                           ; BSR set to: 0
 10777  001B88  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 10778  001B8A  0012               	return	
 10779  001B8C                     l7501:
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 10783  001B8C  0E00               	movlw	0
 10784  001B8E  EC6D  F013         	call	_Buzzer_Etat
 10785                           
 10786                           ;interrupt.c: 430: P4_busy = 0;
 10787  001B92  0100               	movlb	0	; () banked
 10788  001B94  6BAC               	clrf	_P4_busy& (0+255),b
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;interrupt.c: 431: TIMER5_Off();
 10792  001B96  EC8D  F013         	call	_TIMER5_Off	;wreg free
 10793                           
 10794                           ;interrupt.c: 432: Etat_Update(0);
 10795  001B9A  0E00               	movlw	0
 10796  001B9C  EF3E  F012         	goto	_Etat_Update
 10797  001BA0                     l7509:
 10798                           
 10799                           ; BSR set to: 0
 10800  001BA0  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 10801  001BA2  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10802  001BA4  A4D8               	btfss	status,2,c
 10803  001BA6  0012               	return	
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 10807  001BA8  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 10808  001BAA  E10E               	bnz	l610
 10809                           
 10810                           ; BSR set to: 0
 10811  001BAC  B480               	btfsc	3968,2,c	;volatile
 10812  001BAE  D00C               	goto	l610
 10813                           
 10814                           ; BSR set to: 0
 10815  001BB0  044D               	decf	_Mouvement_Startup,w,c
 10816  001BB2  E10A               	bnz	l610
 10817                           
 10818                           ; BSR set to: 0
 10819                           ;interrupt.c: 460: if (Option_Multitas==1){
 10820  001BB4  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 10821  001BB6  D004               	goto	l7521
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;interrupt.c: 461: Alarme_On(11);
 10825  001BB8  0E0B               	movlw	11
 10826  001BBA  EC4E  F013         	call	_Alarme_On
 10827                           
 10828                           ;interrupt.c: 462: }else{
 10829  001BBE  D008               	goto	l7525
 10830  001BC0                     l7521:
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;interrupt.c: 463: Alarme_On(6);
 10834  001BC0  0E06               	movlw	6
 10835  001BC2  EC4E  F013         	call	_Alarme_On
 10836  001BC6  D004               	goto	l7525
 10837  001BC8                     l610:
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;interrupt.c: 467: P4_busy = 0;
 10841  001BC8  6BAC               	clrf	_P4_busy& (0+255),b
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;interrupt.c: 468: Etat_Update(6);
 10845  001BCA  0E06               	movlw	6
 10846  001BCC  EC3E  F012         	call	_Etat_Update
 10847  001BD0                     l7525:
 10848                           
 10849                           ;interrupt.c: 471: }
 10850                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 10851  001BD0  0E00               	movlw	0
 10852  001BD2  EC6D  F013         	call	_Buzzer_Etat
 10853                           
 10854                           ;interrupt.c: 474: TIMER5_Off();
 10855  001BD6  EF8D  F013         	goto	_TIMER5_Off	;wreg free
 10856  001BDA                     __end_of_IRQ_TIMER_5:
 10857                           	opt stack 0
 10858                           tblptru	equ	0xFF8
 10859                           tblptrh	equ	0xFF7
 10860                           tblptrl	equ	0xFF6
 10861                           tablat	equ	0xFF5
 10862                           prodh	equ	0xFF4
 10863                           prodl	equ	0xFF3
 10864                           intcon	equ	0xFF2
 10865                           intcon2	equ	0xFF1
 10866                           intcon3	equ	0xFF0
 10867                           postinc0	equ	0xFEE
 10868                           wreg	equ	0xFE8
 10869                           indf1	equ	0xFE7
 10870                           postdec1	equ	0xFE5
 10871                           fsr1h	equ	0xFE2
 10872                           fsr1l	equ	0xFE1
 10873                           indf2	equ	0xFDF
 10874                           postinc2	equ	0xFDE
 10875                           postdec2	equ	0xFDD
 10876                           fsr2h	equ	0xFDA
 10877                           fsr2l	equ	0xFD9
 10878                           status	equ	0xFD8
 10879                           
 10880 ;; *************** function _IRQ_TIMER_0 *****************
 10881 ;; Defined at:
 10882 ;;		line 361 in file "interrupt.c"
 10883 ;; Parameters:    Size  Location     Type
 10884 ;;		None
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;		None
 10887 ;; Return value:  Size  Location     Type
 10888 ;;                  1    wreg      void 
 10889 ;; Registers used:
 10890 ;;		wreg, status,2, status,0, cstack
 10891 ;; Tracked objects:
 10892 ;;		On entry : 0/2
 10893 ;;		On exit  : 3F/0
 10894 ;;		Unchanged: 0/0
 10895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10896 ;;      Params:         0       0       0       0
 10897 ;;      Locals:         0       0       0       0
 10898 ;;      Temps:          0       0       0       0
 10899 ;;      Totals:         0       0       0       0
 10900 ;;Total ram usage:        0 bytes
 10901 ;; Hardware stack levels used:    1
 10902 ;; Hardware stack levels required when called:   11
 10903 ;; This function calls:
 10904 ;;		_Surveillance_Consommation_Moteur_1_Activer
 10905 ;;		_Surveillance_Consommation_Moteur_2_Activer
 10906 ;; This function is called by:
 10907 ;;		_IRQ_Execution
 10908 ;; This function uses a non-reentrant model
 10909 ;;
 10910                           
 10911                           	psect	text57
 10912  001E3A                     __ptext57:
 10913                           	opt stack 0
 10914  001E3A                     _IRQ_TIMER_0:
 10915                           	opt stack 14
 10916                           
 10917                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 10918                           
 10919                           ;incstack = 0
 10920  001E3A  94F2               	bcf	intcon,2,c	;volatile
 10921                           
 10922                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 10923  001E3C  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 10924                           
 10925                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 10926  001E3E  0100               	movlb	0	; () banked
 10927  001E40  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 10928                           
 10929                           ;interrupt.c: 366: delay_s_counter += 1;
 10930  001E42  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 10934  001E44  0E02               	movlw	2
 10935  001E46  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 10936  001E48  E01C               	bz	l7481
 10937  001E4A  0012               	return	
 10938  001E4C                     l7461:
 10939                           
 10940                           ; BSR set to: 0
 10941                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 10942  001E4C  EC13  F013         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10946  001E50  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10947  001E52  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10948  001E54  E203               	bc	l588
 10949  001E56                     l7465:
 10950                           
 10951                           ; BSR set to: 0
 10952                           ;interrupt.c: 381: consigne = Consigne_Max;
 10953  001E56  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 10954                           
 10955                           ;interrupt.c: 382: } else {
 10956  001E5A  0012               	return	
 10957  001E5C                     l588:
 10958                           
 10959                           ; BSR set to: 0
 10960                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 10961  001E5C  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10962  001E60  0012               	return	
 10963  001E62                     l7467:
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 10967  001E62  EC0A  F013         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10968                           
 10969                           ; BSR set to: 0
 10970                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10971  001E66  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10972  001E68  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10973  001E6A  E3F5               	bnc	l7465
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 10977  001E6C  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10978  001E70  0012               	return	
 10979  001E72                     l7473:
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 10983  001E72  EC0A  F013         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10987  001E76  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10988  001E78  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10989  001E7A  E3ED               	bnc	l7465
 10990                           
 10991                           ; BSR set to: 0
 10992                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 10993  001E7C  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10994  001E80  0012               	return	
 10995  001E82                     l7481:
 10996                           
 10997                           ; BSR set to: 0
 10998  001E82  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 10999                           
 11000                           ; Switch size 1, requested type "speed"
 11001                           ; Number of cases is 3, Range of values is 1 to 3
 11002                           ; switch strategies available:
 11003                           ; Name         Instructions Cycles
 11004                           ; simple_byte           10     6 (average)
 11005                           ;	Chosen strategy is simple_byte
 11006  001E84  0A01               	xorlw	1	; case 1
 11007  001E86  E0E2               	bz	l7461
 11008  001E88  0A03               	xorlw	3	; case 2
 11009  001E8A  E0EB               	bz	l7467
 11010  001E8C  0A01               	xorlw	1	; case 3
 11011  001E8E  E0F1               	bz	l7473
 11012                           
 11013                           ; BSR set to: 0
 11014  001E90  0012               	return		;funcret
 11015  001E92                     __end_of_IRQ_TIMER_0:
 11016                           	opt stack 0
 11017                           tblptru	equ	0xFF8
 11018                           tblptrh	equ	0xFF7
 11019                           tblptrl	equ	0xFF6
 11020                           tablat	equ	0xFF5
 11021                           prodh	equ	0xFF4
 11022                           prodl	equ	0xFF3
 11023                           intcon	equ	0xFF2
 11024                           intcon2	equ	0xFF1
 11025                           intcon3	equ	0xFF0
 11026                           postinc0	equ	0xFEE
 11027                           wreg	equ	0xFE8
 11028                           indf1	equ	0xFE7
 11029                           postdec1	equ	0xFE5
 11030                           fsr1h	equ	0xFE2
 11031                           fsr1l	equ	0xFE1
 11032                           indf2	equ	0xFDF
 11033                           postinc2	equ	0xFDE
 11034                           postdec2	equ	0xFDD
 11035                           fsr2h	equ	0xFDA
 11036                           fsr2l	equ	0xFD9
 11037                           status	equ	0xFD8
 11038                           
 11039 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 11040 ;; Defined at:
 11041 ;;		line 868 in file "interrupt.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;		None
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;		None
 11046 ;; Return value:  Size  Location     Type
 11047 ;;                  1    wreg      void 
 11048 ;; Registers used:
 11049 ;;		wreg, status,2, status,0
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 3F/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11055 ;;      Params:         0       0       0       0
 11056 ;;      Locals:         0       0       0       0
 11057 ;;      Temps:          0       0       0       0
 11058 ;;      Totals:         0       0       0       0
 11059 ;;Total ram usage:        0 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:   10
 11062 ;; This function calls:
 11063 ;;		Nothing
 11064 ;; This function is called by:
 11065 ;;		_IRQ_TIMER_0
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           	psect	text58
 11070  002614                     __ptext58:
 11071                           	opt stack 0
 11072  002614                     _Surveillance_Consommation_Moteur_2_Activer:
 11073                           	opt stack 14
 11074                           
 11075                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;incstack = 0
 11079  002614  0100               	movlb	0	; () banked
 11080  002616  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 11081  002618  B4D8               	btfsc	status,2,c
 11082  00261A  0012               	return	
 11083                           
 11084                           ; BSR set to: 0
 11085                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 11086  00261C  0E01               	movlw	1
 11087  00261E  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 11091  002620  92F0               	bcf	intcon3,1,c	;volatile
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 11095  002622  88F0               	bsf	intcon3,4,c	;volatile
 11096                           
 11097                           ; BSR set to: 0
 11098  002624  0C01               	retlw	1	;funcret
 11099  002626                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           intcon2	equ	0xFF1
 11109                           intcon3	equ	0xFF0
 11110                           postinc0	equ	0xFEE
 11111                           wreg	equ	0xFE8
 11112                           indf1	equ	0xFE7
 11113                           postdec1	equ	0xFE5
 11114                           fsr1h	equ	0xFE2
 11115                           fsr1l	equ	0xFE1
 11116                           indf2	equ	0xFDF
 11117                           postinc2	equ	0xFDE
 11118                           postdec2	equ	0xFDD
 11119                           fsr2h	equ	0xFDA
 11120                           fsr2l	equ	0xFD9
 11121                           status	equ	0xFD8
 11122                           
 11123 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 11124 ;; Defined at:
 11125 ;;		line 852 in file "interrupt.c"
 11126 ;; Parameters:    Size  Location     Type
 11127 ;;		None
 11128 ;; Auto vars:     Size  Location     Type
 11129 ;;		None
 11130 ;; Return value:  Size  Location     Type
 11131 ;;                  1    wreg      void 
 11132 ;; Registers used:
 11133 ;;		wreg, status,2, status,0
 11134 ;; Tracked objects:
 11135 ;;		On entry : 0/0
 11136 ;;		On exit  : 3F/0
 11137 ;;		Unchanged: 0/0
 11138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11139 ;;      Params:         0       0       0       0
 11140 ;;      Locals:         0       0       0       0
 11141 ;;      Temps:          0       0       0       0
 11142 ;;      Totals:         0       0       0       0
 11143 ;;Total ram usage:        0 bytes
 11144 ;; Hardware stack levels used:    1
 11145 ;; Hardware stack levels required when called:   10
 11146 ;; This function calls:
 11147 ;;		Nothing
 11148 ;; This function is called by:
 11149 ;;		_IRQ_TIMER_0
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           	psect	text59
 11154  002626                     __ptext59:
 11155                           	opt stack 0
 11156  002626                     _Surveillance_Consommation_Moteur_1_Activer:
 11157                           	opt stack 14
 11158                           
 11159                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;incstack = 0
 11163  002626  0100               	movlb	0	; () banked
 11164  002628  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 11165  00262A  B4D8               	btfsc	status,2,c
 11166  00262C  0012               	return	
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 11170  00262E  0E01               	movlw	1
 11171  002630  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 11172                           
 11173                           ; BSR set to: 0
 11174                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 11175  002632  90F0               	bcf	intcon3,0,c	;volatile
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 11179  002634  86F0               	bsf	intcon3,3,c	;volatile
 11180                           
 11181                           ; BSR set to: 0
 11182  002636  0C01               	retlw	1	;funcret
 11183  002638                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 11184                           	opt stack 0
 11185                           tblptru	equ	0xFF8
 11186                           tblptrh	equ	0xFF7
 11187                           tblptrl	equ	0xFF6
 11188                           tablat	equ	0xFF5
 11189                           prodh	equ	0xFF4
 11190                           prodl	equ	0xFF3
 11191                           intcon	equ	0xFF2
 11192                           intcon2	equ	0xFF1
 11193                           intcon3	equ	0xFF0
 11194                           postinc0	equ	0xFEE
 11195                           wreg	equ	0xFE8
 11196                           indf1	equ	0xFE7
 11197                           postdec1	equ	0xFE5
 11198                           fsr1h	equ	0xFE2
 11199                           fsr1l	equ	0xFE1
 11200                           indf2	equ	0xFDF
 11201                           postinc2	equ	0xFDE
 11202                           postdec2	equ	0xFDD
 11203                           fsr2h	equ	0xFDA
 11204                           fsr2l	equ	0xFD9
 11205                           status	equ	0xFD8
 11206                           
 11207 ;; *************** function _IRQ_TIMER2 *****************
 11208 ;; Defined at:
 11209 ;;		line 883 in file "interrupt.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;		None
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;		None
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  1    wreg      void 
 11216 ;; Registers used:
 11217 ;;		None
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/2
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11223 ;;      Params:         0       0       0       0
 11224 ;;      Locals:         0       0       0       0
 11225 ;;      Temps:          0       0       0       0
 11226 ;;      Totals:         0       0       0       0
 11227 ;;Total ram usage:        0 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:   10
 11230 ;; This function calls:
 11231 ;;		Nothing
 11232 ;; This function is called by:
 11233 ;;		_IRQ_Execution
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	text60
 11238  002754                     __ptext60:
 11239                           	opt stack 0
 11240  002754                     _IRQ_TIMER2:
 11241                           	opt stack 15
 11242                           
 11243                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 11244                           
 11245                           ; BSR set to: 0
 11246                           ;incstack = 0
 11247  002754  929E               	bcf	3998,1,c	;volatile
 11248                           
 11249                           ;interrupt.c: 887: GODONE = 1;
 11250  002756  82C2               	bsf	4034,1,c	;volatile
 11251  002758  0012               	return		;funcret
 11252  00275A                     __end_of_IRQ_TIMER2:
 11253                           	opt stack 0
 11254                           tblptru	equ	0xFF8
 11255                           tblptrh	equ	0xFF7
 11256                           tblptrl	equ	0xFF6
 11257                           tablat	equ	0xFF5
 11258                           prodh	equ	0xFF4
 11259                           prodl	equ	0xFF3
 11260                           intcon	equ	0xFF2
 11261                           intcon2	equ	0xFF1
 11262                           intcon3	equ	0xFF0
 11263                           postinc0	equ	0xFEE
 11264                           wreg	equ	0xFE8
 11265                           indf1	equ	0xFE7
 11266                           postdec1	equ	0xFE5
 11267                           fsr1h	equ	0xFE2
 11268                           fsr1l	equ	0xFE1
 11269                           indf2	equ	0xFDF
 11270                           postinc2	equ	0xFDE
 11271                           postdec2	equ	0xFDD
 11272                           fsr2h	equ	0xFDA
 11273                           fsr2l	equ	0xFD9
 11274                           status	equ	0xFD8
 11275                           
 11276 ;; *************** function _IRQ_PWM *****************
 11277 ;; Defined at:
 11278 ;;		line 481 in file "interrupt.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;		None
 11281 ;; Auto vars:     Size  Location     Type
 11282 ;;		None
 11283 ;; Return value:  Size  Location     Type
 11284 ;;                  1    wreg      void 
 11285 ;; Registers used:
 11286 ;;		None
 11287 ;; Tracked objects:
 11288 ;;		On entry : 0/2
 11289 ;;		On exit  : 0/0
 11290 ;;		Unchanged: 0/0
 11291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11292 ;;      Params:         0       0       0       0
 11293 ;;      Locals:         0       0       0       0
 11294 ;;      Temps:          0       0       0       0
 11295 ;;      Totals:         0       0       0       0
 11296 ;;Total ram usage:        0 bytes
 11297 ;; Hardware stack levels used:    1
 11298 ;; Hardware stack levels required when called:   10
 11299 ;; This function calls:
 11300 ;;		Nothing
 11301 ;; This function is called by:
 11302 ;;		_IRQ_Execution
 11303 ;; This function uses a non-reentrant model
 11304 ;;
 11305                           
 11306                           	psect	text61
 11307  00277A                     __ptext61:
 11308                           	opt stack 0
 11309  00277A                     _IRQ_PWM:
 11310                           	opt stack 15
 11311                           
 11312                           ;interrupt.c: 483: PTIF = 0;
 11313                           
 11314                           ;incstack = 0
 11315  00277A  98A4               	bcf	4004,4,c	;volatile
 11316  00277C  0012               	return		;funcret
 11317  00277E                     __end_of_IRQ_PWM:
 11318                           	opt stack 0
 11319                           tblptru	equ	0xFF8
 11320                           tblptrh	equ	0xFF7
 11321                           tblptrl	equ	0xFF6
 11322                           tablat	equ	0xFF5
 11323                           prodh	equ	0xFF4
 11324                           prodl	equ	0xFF3
 11325                           intcon	equ	0xFF2
 11326                           intcon2	equ	0xFF1
 11327                           intcon3	equ	0xFF0
 11328                           postinc0	equ	0xFEE
 11329                           wreg	equ	0xFE8
 11330                           indf1	equ	0xFE7
 11331                           postdec1	equ	0xFE5
 11332                           fsr1h	equ	0xFE2
 11333                           fsr1l	equ	0xFE1
 11334                           indf2	equ	0xFDF
 11335                           postinc2	equ	0xFDE
 11336                           postdec2	equ	0xFDD
 11337                           fsr2h	equ	0xFDA
 11338                           fsr2l	equ	0xFD9
 11339                           status	equ	0xFD8
 11340                           
 11341 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 11342 ;; Defined at:
 11343 ;;		line 287 in file "interrupt.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  1    wreg      void 
 11350 ;; Registers used:
 11351 ;;		wreg, status,2, status,0, cstack
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/2
 11354 ;;		On exit  : 3F/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11357 ;;      Params:         0       0       0       0
 11358 ;;      Locals:         0       0       0       0
 11359 ;;      Temps:          0       0       0       0
 11360 ;;      Totals:         0       0       0       0
 11361 ;;Total ram usage:        0 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:   11
 11364 ;; This function calls:
 11365 ;;		_Buzzer_Etat
 11366 ;;		_TIMER5_Off
 11367 ;; This function is called by:
 11368 ;;		_IRQ_Execution
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           	psect	text62
 11373  002528                     __ptext62:
 11374                           	opt stack 0
 11375  002528                     _IRQ_PION_Metal_Disparait:
 11376                           	opt stack 14
 11377                           
 11378                           ;interrupt.c: 289: Buzzer_Etat((unsigned char) 0);
 11379                           
 11380                           ;incstack = 0
 11381  002528  0E00               	movlw	0
 11382  00252A  EC6D  F013         	call	_Buzzer_Etat
 11383                           
 11384                           ;interrupt.c: 290: PIE3bits.IC2QEIE = 0;
 11385  00252E  94A3               	bcf	4003,2,c	;volatile
 11386                           
 11387                           ;interrupt.c: 291: PIR3bits.IC2QEIF = 0;
 11388  002530  94A4               	bcf	4004,2,c	;volatile
 11389                           
 11390                           ;interrupt.c: 293: TIMER5_Off();
 11391  002532  EC8D  F013         	call	_TIMER5_Off	;wreg free
 11392                           
 11393                           ;interrupt.c: 295: nb_100ms_Timer_5 = 0;
 11394  002536  0100               	movlb	0	; () banked
 11395  002538  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;interrupt.c: 299: nb_100ms_platine = nb_100ms_platine_backup;
 11399  00253A  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;interrupt.c: 301: Mouvement_Startup = 0;
 11403  00253E  6A4D               	clrf	_Mouvement_Startup,c
 11404                           
 11405                           ; BSR set to: 0
 11406  002540  0012               	return		;funcret
 11407  002542                     __end_of_IRQ_PION_Metal_Disparait:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           intcon2	equ	0xFF1
 11417                           intcon3	equ	0xFF0
 11418                           postinc0	equ	0xFEE
 11419                           wreg	equ	0xFE8
 11420                           indf1	equ	0xFE7
 11421                           postdec1	equ	0xFE5
 11422                           fsr1h	equ	0xFE2
 11423                           fsr1l	equ	0xFE1
 11424                           indf2	equ	0xFDF
 11425                           postinc2	equ	0xFDE
 11426                           postdec2	equ	0xFDD
 11427                           fsr2h	equ	0xFDA
 11428                           fsr2l	equ	0xFD9
 11429                           status	equ	0xFD8
 11430                           
 11431 ;; *************** function _TIMER5_Off *****************
 11432 ;; Defined at:
 11433 ;;		line 263 in file "timer.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;		None
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;		None
 11438 ;; Return value:  Size  Location     Type
 11439 ;;                  1    wreg      void 
 11440 ;; Registers used:
 11441 ;;		None
 11442 ;; Tracked objects:
 11443 ;;		On entry : 0/0
 11444 ;;		On exit  : 0/0
 11445 ;;		Unchanged: 0/0
 11446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11447 ;;      Params:         0       0       0       0
 11448 ;;      Locals:         0       0       0       0
 11449 ;;      Temps:          0       0       0       0
 11450 ;;      Totals:         0       0       0       0
 11451 ;;Total ram usage:        0 bytes
 11452 ;; Hardware stack levels used:    1
 11453 ;; Hardware stack levels required when called:   10
 11454 ;; This function calls:
 11455 ;;		Nothing
 11456 ;; This function is called by:
 11457 ;;		_IRQ_PION_Metal_Disparait
 11458 ;;		_IRQ_TIMER_5
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text63
 11463  00271A                     __ptext63:
 11464                           	opt stack 0
 11465  00271A                     _TIMER5_Off:
 11466                           	opt stack 14
 11467                           
 11468                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;incstack = 0
 11472  00271A  90B7               	bcf	4023,0,c	;volatile
 11473                           
 11474                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 11475  00271C  90A4               	bcf	4004,0,c	;volatile
 11476                           
 11477                           ;timer.c: 268: TMR5L = 0;
 11478  00271E  6A87               	clrf	3975,c	;volatile
 11479                           
 11480                           ;timer.c: 269: TMR5H = 0;
 11481  002720  6A88               	clrf	3976,c	;volatile
 11482  002722  0012               	return		;funcret
 11483  002724                     __end_of_TIMER5_Off:
 11484                           	opt stack 0
 11485                           tblptru	equ	0xFF8
 11486                           tblptrh	equ	0xFF7
 11487                           tblptrl	equ	0xFF6
 11488                           tablat	equ	0xFF5
 11489                           prodh	equ	0xFF4
 11490                           prodl	equ	0xFF3
 11491                           intcon	equ	0xFF2
 11492                           intcon2	equ	0xFF1
 11493                           intcon3	equ	0xFF0
 11494                           postinc0	equ	0xFEE
 11495                           wreg	equ	0xFE8
 11496                           indf1	equ	0xFE7
 11497                           postdec1	equ	0xFE5
 11498                           fsr1h	equ	0xFE2
 11499                           fsr1l	equ	0xFE1
 11500                           indf2	equ	0xFDF
 11501                           postinc2	equ	0xFDE
 11502                           postdec2	equ	0xFDD
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 11508 ;; Defined at:
 11509 ;;		line 268 in file "interrupt.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;		None
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;		None
 11514 ;; Return value:  Size  Location     Type
 11515 ;;                  1    wreg      void 
 11516 ;; Registers used:
 11517 ;;		wreg, status,2, status,0, cstack
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11523 ;;      Params:         0       0       0       0
 11524 ;;      Locals:         0       0       0       0
 11525 ;;      Temps:          0       0       0       0
 11526 ;;      Totals:         0       0       0       0
 11527 ;;Total ram usage:        0 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:   11
 11530 ;; This function calls:
 11531 ;;		_Buzzer_Etat
 11532 ;;		_TIMER5_On
 11533 ;; This function is called by:
 11534 ;;		_IRQ_Execution
 11535 ;;		_Detection_Pion_On
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           	psect	text64
 11540  00245E                     __ptext64:
 11541                           	opt stack 0
 11542  00245E                     _IRQ_PION_Metal_Apparait:
 11543                           	opt stack 14
 11544                           
 11545                           ;interrupt.c: 270: Buzzer_Etat((unsigned char) 1);
 11546                           
 11547                           ;incstack = 0
 11548  00245E  0E01               	movlw	1
 11549  002460  EC6D  F013         	call	_Buzzer_Etat
 11550                           
 11551                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 11552  002464  92A4               	bcf	4004,1,c	;volatile
 11553                           
 11554                           ;interrupt.c: 273: PIR3bits.IC2QEIF = 0;
 11555  002466  94A4               	bcf	4004,2,c	;volatile
 11556                           
 11557                           ;interrupt.c: 274: if (PIE3bits.IC2QEIE == 1) {
 11558  002468  A4A3               	btfss	4003,2,c	;volatile
 11559  00246A  D005               	goto	l577
 11560                           
 11561                           ;interrupt.c: 275: Alarme = 10;
 11562  00246C  0E0A               	movlw	10
 11563  00246E  0100               	movlb	0	; () banked
 11564  002470  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 11565                           
 11566                           ;interrupt.c: 276: } else {
 11567  002472  EFBF  F013         	goto	_TIMER5_On
 11568  002476                     l577:
 11569                           
 11570                           ;interrupt.c: 278: PIE3bits.IC2QEIE = 1;
 11571  002476  84A3               	bsf	4003,2,c	;volatile
 11572                           
 11573                           ;interrupt.c: 279: }
 11574                           ;interrupt.c: 281: TIMER5_On();
 11575  002478  EFBF  F013         	goto	_TIMER5_On	;wreg free
 11576  00247C                     __end_of_IRQ_PION_Metal_Apparait:
 11577                           	opt stack 0
 11578                           tblptru	equ	0xFF8
 11579                           tblptrh	equ	0xFF7
 11580                           tblptrl	equ	0xFF6
 11581                           tablat	equ	0xFF5
 11582                           prodh	equ	0xFF4
 11583                           prodl	equ	0xFF3
 11584                           intcon	equ	0xFF2
 11585                           intcon2	equ	0xFF1
 11586                           intcon3	equ	0xFF0
 11587                           postinc0	equ	0xFEE
 11588                           wreg	equ	0xFE8
 11589                           indf1	equ	0xFE7
 11590                           postdec1	equ	0xFE5
 11591                           fsr1h	equ	0xFE2
 11592                           fsr1l	equ	0xFE1
 11593                           indf2	equ	0xFDF
 11594                           postinc2	equ	0xFDE
 11595                           postdec2	equ	0xFDD
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function _TIMER5_On *****************
 11601 ;; Defined at:
 11602 ;;		line 253 in file "timer.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;		None
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;		None
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		None
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11616 ;;      Params:         0       0       0       0
 11617 ;;      Locals:         0       0       0       0
 11618 ;;      Temps:          0       0       0       0
 11619 ;;      Totals:         0       0       0       0
 11620 ;;Total ram usage:        0 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:   10
 11623 ;; This function calls:
 11624 ;;		Nothing
 11625 ;; This function is called by:
 11626 ;;		_IRQ_PION_Metal_Apparait
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text65
 11631  00277E                     __ptext65:
 11632                           	opt stack 0
 11633  00277E                     _TIMER5_On:
 11634                           	opt stack 14
 11635                           
 11636                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 11637                           
 11638                           ;incstack = 0
 11639  00277E  80B7               	bsf	4023,0,c	;volatile
 11640  002780  0012               	return		;funcret
 11641  002782                     __end_of_TIMER5_On:
 11642                           	opt stack 0
 11643                           tblptru	equ	0xFF8
 11644                           tblptrh	equ	0xFF7
 11645                           tblptrl	equ	0xFF6
 11646                           tablat	equ	0xFF5
 11647                           prodh	equ	0xFF4
 11648                           prodl	equ	0xFF3
 11649                           intcon	equ	0xFF2
 11650                           intcon2	equ	0xFF1
 11651                           intcon3	equ	0xFF0
 11652                           postinc0	equ	0xFEE
 11653                           wreg	equ	0xFE8
 11654                           indf1	equ	0xFE7
 11655                           postdec1	equ	0xFE5
 11656                           fsr1h	equ	0xFE2
 11657                           fsr1l	equ	0xFE1
 11658                           indf2	equ	0xFDF
 11659                           postinc2	equ	0xFDE
 11660                           postdec2	equ	0xFDD
 11661                           fsr2h	equ	0xFDA
 11662                           fsr2l	equ	0xFD9
 11663                           status	equ	0xFD8
 11664                           
 11665 ;; *************** function _Buzzer_Etat *****************
 11666 ;; Defined at:
 11667 ;;		line 29 in file "interrupt.c"
 11668 ;; Parameters:    Size  Location     Type
 11669 ;;  Activation      1    wreg     unsigned char 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  Activation      1   14[COMRAM] unsigned char 
 11672 ;; Return value:  Size  Location     Type
 11673 ;;                  1    wreg      void 
 11674 ;; Registers used:
 11675 ;;		wreg, status,2, status,0
 11676 ;; Tracked objects:
 11677 ;;		On entry : 0/2
 11678 ;;		On exit  : 0/0
 11679 ;;		Unchanged: 0/0
 11680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11681 ;;      Params:         0       0       0       0
 11682 ;;      Locals:         1       0       0       0
 11683 ;;      Temps:          0       0       0       0
 11684 ;;      Totals:         1       0       0       0
 11685 ;;Total ram usage:        1 bytes
 11686 ;; Hardware stack levels used:    1
 11687 ;; Hardware stack levels required when called:   10
 11688 ;; This function calls:
 11689 ;;		Nothing
 11690 ;; This function is called by:
 11691 ;;		_Cycle
 11692 ;;		_IRQ_PION_Metal_Apparait
 11693 ;;		_IRQ_PION_Metal_Disparait
 11694 ;;		_IRQ_TIMER_5
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           	psect	text66
 11699  0026DA                     __ptext66:
 11700                           	opt stack 0
 11701  0026DA                     _Buzzer_Etat:
 11702                           	opt stack 14
 11703                           
 11704                           ;incstack = 0
 11705                           ;Buzzer_Etat@Activation stored from wreg
 11706  0026DA  6E0F               	movwf	Buzzer_Etat@Activation,c
 11707                           
 11708                           ;interrupt.c: 30: if (Activation == 1) {
 11709  0026DC  040F               	decf	Buzzer_Etat@Activation,w,c
 11710  0026DE  E102               	bnz	l531
 11711                           
 11712                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 11713  0026E0  8C89               	bsf	3977,6,c	;volatile
 11714                           
 11715                           ;interrupt.c: 33: } else {
 11716  0026E2  0012               	return	
 11717  0026E4                     l531:
 11718                           
 11719                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 11720  0026E4  9C89               	bcf	3977,6,c	;volatile
 11721  0026E6  0012               	return		;funcret
 11722  0026E8                     __end_of_Buzzer_Etat:
 11723                           	opt stack 0
 11724                           tblptru	equ	0xFF8
 11725                           tblptrh	equ	0xFF7
 11726                           tblptrl	equ	0xFF6
 11727                           tablat	equ	0xFF5
 11728                           prodh	equ	0xFF4
 11729                           prodl	equ	0xFF3
 11730                           intcon	equ	0xFF2
 11731                           intcon2	equ	0xFF1
 11732                           intcon3	equ	0xFF0
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           indf1	equ	0xFE7
 11736                           postdec1	equ	0xFE5
 11737                           fsr1h	equ	0xFE2
 11738                           fsr1l	equ	0xFE1
 11739                           indf2	equ	0xFDF
 11740                           postinc2	equ	0xFDE
 11741                           postdec2	equ	0xFDD
 11742                           fsr2h	equ	0xFDA
 11743                           fsr2l	equ	0xFD9
 11744                           status	equ	0xFD8
 11745                           
 11746 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 11747 ;; Defined at:
 11748 ;;		line 909 in file "interrupt.c"
 11749 ;; Parameters:    Size  Location     Type
 11750 ;;		None
 11751 ;; Auto vars:     Size  Location     Type
 11752 ;;		None
 11753 ;; Return value:  Size  Location     Type
 11754 ;;                  1    wreg      void 
 11755 ;; Registers used:
 11756 ;;		wreg, status,2, status,0
 11757 ;; Tracked objects:
 11758 ;;		On entry : 0/2
 11759 ;;		On exit  : 0/0
 11760 ;;		Unchanged: 0/0
 11761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11762 ;;      Params:         0       0       0       0
 11763 ;;      Locals:         0       0       0       0
 11764 ;;      Temps:          0       0       0       0
 11765 ;;      Totals:         0       0       0       0
 11766 ;;Total ram usage:        0 bytes
 11767 ;; Hardware stack levels used:    1
 11768 ;; Hardware stack levels required when called:   10
 11769 ;; This function calls:
 11770 ;;		Nothing
 11771 ;; This function is called by:
 11772 ;;		_IRQ_Execution
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           	psect	text67
 11777  002558                     __ptext67:
 11778                           	opt stack 0
 11779  002558                     _IRQ_I_MOTEUR_2:
 11780                           	opt stack 15
 11781                           
 11782                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 11783                           
 11784                           ;incstack = 0
 11785  002558  928B               	bcf	3979,1,c	;volatile
 11786                           
 11787                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 11788  00255A  D001               	goto	l7421
 11789  00255C                     l699:
 11790  00255C  F000               	nop	
 11791  00255E                     l7421:
 11792  00255E  50CC               	movf	4044,w,c	;volatile
 11793  002560  E1FD               	bnz	l699
 11794                           
 11795                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 11796  002562  828B               	bsf	3979,1,c	;volatile
 11797                           
 11798                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 11799  002564  748B               	btg	3979,2,c	;volatile
 11800                           
 11801                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 11802  002566  92F0               	bcf	intcon3,1,c	;volatile
 11803                           
 11804                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 11805  002568  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 11806  00256A  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 11807  00256C  0012               	return		;funcret
 11808  00256E                     __end_of_IRQ_I_MOTEUR_2:
 11809                           	opt stack 0
 11810                           tblptru	equ	0xFF8
 11811                           tblptrh	equ	0xFF7
 11812                           tblptrl	equ	0xFF6
 11813                           tablat	equ	0xFF5
 11814                           prodh	equ	0xFF4
 11815                           prodl	equ	0xFF3
 11816                           intcon	equ	0xFF2
 11817                           intcon2	equ	0xFF1
 11818                           intcon3	equ	0xFF0
 11819                           postinc0	equ	0xFEE
 11820                           wreg	equ	0xFE8
 11821                           indf1	equ	0xFE7
 11822                           postdec1	equ	0xFE5
 11823                           fsr1h	equ	0xFE2
 11824                           fsr1l	equ	0xFE1
 11825                           indf2	equ	0xFDF
 11826                           postinc2	equ	0xFDE
 11827                           postdec2	equ	0xFDD
 11828                           fsr2h	equ	0xFDA
 11829                           fsr2l	equ	0xFD9
 11830                           status	equ	0xFD8
 11831                           
 11832 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 11833 ;; Defined at:
 11834 ;;		line 895 in file "interrupt.c"
 11835 ;; Parameters:    Size  Location     Type
 11836 ;;		None
 11837 ;; Auto vars:     Size  Location     Type
 11838 ;;		None
 11839 ;; Return value:  Size  Location     Type
 11840 ;;                  1    wreg      void 
 11841 ;; Registers used:
 11842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11843 ;; Tracked objects:
 11844 ;;		On entry : 0/2
 11845 ;;		On exit  : 0/0
 11846 ;;		Unchanged: 0/0
 11847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11848 ;;      Params:         0       0       0       0
 11849 ;;      Locals:         0       0       0       0
 11850 ;;      Temps:          0       0       0       0
 11851 ;;      Totals:         0       0       0       0
 11852 ;;Total ram usage:        0 bytes
 11853 ;; Hardware stack levels used:    1
 11854 ;; Hardware stack levels required when called:   13
 11855 ;; This function calls:
 11856 ;;		_Alarme_On
 11857 ;; This function is called by:
 11858 ;;		_IRQ_Execution
 11859 ;; This function uses a non-reentrant model
 11860 ;;
 11861                           
 11862                           	psect	text68
 11863  00256E                     __ptext68:
 11864                           	opt stack 0
 11865  00256E                     _IRQ_I_MOTEUR_1:
 11866                           	opt stack 12
 11867                           
 11868                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 11869                           
 11870                           ;incstack = 0
 11871  00256E  90F0               	bcf	intcon3,0,c	;volatile
 11872                           
 11873                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 11874  002570  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 11875                           
 11876                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 11877  002572  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 11878  002574  A4D8               	btfss	status,2,c
 11879  002576  0012               	return	
 11880                           
 11881                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 11882  002578  848B               	bsf	3979,2,c	;volatile
 11883                           
 11884                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 11885  00257A  908B               	bcf	3979,0,c	;volatile
 11886                           
 11887                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 11888  00257C  928B               	bcf	3979,1,c	;volatile
 11889                           
 11890                           ;interrupt.c: 904: Alarme_On(1);
 11891  00257E  0E01               	movlw	1
 11892  002580  EF4E  F013         	goto	_Alarme_On
 11893  002584                     __end_of_IRQ_I_MOTEUR_1:
 11894                           	opt stack 0
 11895                           tblptru	equ	0xFF8
 11896                           tblptrh	equ	0xFF7
 11897                           tblptrl	equ	0xFF6
 11898                           tablat	equ	0xFF5
 11899                           prodh	equ	0xFF4
 11900                           prodl	equ	0xFF3
 11901                           intcon	equ	0xFF2
 11902                           intcon2	equ	0xFF1
 11903                           intcon3	equ	0xFF0
 11904                           postinc0	equ	0xFEE
 11905                           wreg	equ	0xFE8
 11906                           indf1	equ	0xFE7
 11907                           postdec1	equ	0xFE5
 11908                           fsr1h	equ	0xFE2
 11909                           fsr1l	equ	0xFE1
 11910                           indf2	equ	0xFDF
 11911                           postinc2	equ	0xFDE
 11912                           postdec2	equ	0xFDD
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _IRQ_CAPOT *****************
 11918 ;; Defined at:
 11919 ;;		line 890 in file "interrupt.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;		None
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  1    wreg      void 
 11926 ;; Registers used:
 11927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/2
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11933 ;;      Params:         0       0       0       0
 11934 ;;      Locals:         0       0       0       0
 11935 ;;      Temps:          0       0       0       0
 11936 ;;      Totals:         0       0       0       0
 11937 ;;Total ram usage:        0 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:   13
 11940 ;; This function calls:
 11941 ;;		_Alarme_On
 11942 ;; This function is called by:
 11943 ;;		_IRQ_Execution
 11944 ;; This function uses a non-reentrant model
 11945 ;;
 11946                           
 11947                           	psect	text69
 11948  002736                     __ptext69:
 11949                           	opt stack 0
 11950  002736                     _IRQ_CAPOT:
 11951                           	opt stack 12
 11952                           
 11953                           ;interrupt.c: 891: INT0IF = 0;
 11954                           
 11955                           ;incstack = 0
 11956  002736  92F2               	bcf	intcon,1,c	;volatile
 11957                           
 11958                           ;interrupt.c: 892: Alarme_On(4);
 11959  002738  0E04               	movlw	4
 11960  00273A  EF4E  F013         	goto	_Alarme_On
 11961  00273E                     __end_of_IRQ_CAPOT:
 11962                           	opt stack 0
 11963                           tblptru	equ	0xFF8
 11964                           tblptrh	equ	0xFF7
 11965                           tblptrl	equ	0xFF6
 11966                           tablat	equ	0xFF5
 11967                           prodh	equ	0xFF4
 11968                           prodl	equ	0xFF3
 11969                           intcon	equ	0xFF2
 11970                           intcon2	equ	0xFF1
 11971                           intcon3	equ	0xFF0
 11972                           postinc0	equ	0xFEE
 11973                           wreg	equ	0xFE8
 11974                           indf1	equ	0xFE7
 11975                           postdec1	equ	0xFE5
 11976                           fsr1h	equ	0xFE2
 11977                           fsr1l	equ	0xFE1
 11978                           indf2	equ	0xFDF
 11979                           postinc2	equ	0xFDE
 11980                           postdec2	equ	0xFDD
 11981                           fsr2h	equ	0xFDA
 11982                           fsr2l	equ	0xFD9
 11983                           status	equ	0xFD8
 11984                           
 11985 ;; *************** function _Alarme_On *****************
 11986 ;; Defined at:
 11987 ;;		line 18 in file "alarme.c"
 11988 ;; Parameters:    Size  Location     Type
 11989 ;;  alarme_new_v    1    wreg     unsigned char 
 11990 ;; Auto vars:     Size  Location     Type
 11991 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11992 ;; Return value:  Size  Location     Type
 11993 ;;                  1    wreg      void 
 11994 ;; Registers used:
 11995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11996 ;; Tracked objects:
 11997 ;;		On entry : 0/0
 11998 ;;		On exit  : 0/0
 11999 ;;		Unchanged: 0/0
 12000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12001 ;;      Params:         0       0       0       0
 12002 ;;      Locals:         1       0       0       0
 12003 ;;      Temps:          0       0       0       0
 12004 ;;      Totals:         1       0       0       0
 12005 ;;Total ram usage:        1 bytes
 12006 ;; Hardware stack levels used:    1
 12007 ;; Hardware stack levels required when called:   12
 12008 ;; This function calls:
 12009 ;;		_Coupe_Moteur
 12010 ;;		_Etat_Update
 12011 ;; This function is called by:
 12012 ;;		_Cycle
 12013 ;;		_IRQ_TIMER_5
 12014 ;;		_IRQ_CAPOT
 12015 ;;		_IRQ_I_MOTEUR_1
 12016 ;;		_Check_List_Moteur_1
 12017 ;;		_Check_List_Moteur_2
 12018 ;;		_Check_List_Moteur_Bequille
 12019 ;;		_Mouvement_X
 12020 ;;		_EUSART1_RX_T3_LOCAL
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           	psect	text70
 12025  00269C                     __ptext70:
 12026                           	opt stack 0
 12027  00269C                     _Alarme_On:
 12028                           	opt stack 12
 12029                           
 12030                           ;incstack = 0
 12031                           ;Alarme_On@alarme_new_value stored from wreg
 12032  00269C  6E10               	movwf	Alarme_On@alarme_new_value,c
 12033                           
 12034                           ;alarme.c: 22: Etat_Update(1);
 12035  00269E  0E01               	movlw	1
 12036  0026A0  EC3E  F012         	call	_Etat_Update
 12037                           
 12038                           ;alarme.c: 23: Alarme = alarme_new_value;
 12039  0026A4  C010  F0A9         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 12040                           
 12041                           ;alarme.c: 24: Coupe_Moteur();
 12042  0026A8  EFEC  F012         	goto	_Coupe_Moteur	;wreg free
 12043  0026AC                     __end_of_Alarme_On:
 12044                           	opt stack 0
 12045                           tblptru	equ	0xFF8
 12046                           tblptrh	equ	0xFF7
 12047                           tblptrl	equ	0xFF6
 12048                           tablat	equ	0xFF5
 12049                           prodh	equ	0xFF4
 12050                           prodl	equ	0xFF3
 12051                           intcon	equ	0xFF2
 12052                           intcon2	equ	0xFF1
 12053                           intcon3	equ	0xFF0
 12054                           postinc0	equ	0xFEE
 12055                           wreg	equ	0xFE8
 12056                           indf1	equ	0xFE7
 12057                           postdec1	equ	0xFE5
 12058                           fsr1h	equ	0xFE2
 12059                           fsr1l	equ	0xFE1
 12060                           indf2	equ	0xFDF
 12061                           postinc2	equ	0xFDE
 12062                           postdec2	equ	0xFDD
 12063                           fsr2h	equ	0xFDA
 12064                           fsr2l	equ	0xFD9
 12065                           status	equ	0xFD8
 12066                           
 12067 ;; *************** function _Etat_Update *****************
 12068 ;; Defined at:
 12069 ;;		line 74 in file "action.c"
 12070 ;; Parameters:    Size  Location     Type
 12071 ;;  etat_new_val    1    wreg     unsigned char 
 12072 ;; Auto vars:     Size  Location     Type
 12073 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  1    wreg      void 
 12076 ;; Registers used:
 12077 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12083 ;;      Params:         0       0       0       0
 12084 ;;      Locals:         1       0       0       0
 12085 ;;      Temps:          0       0       0       0
 12086 ;;      Totals:         1       0       0       0
 12087 ;;Total ram usage:        1 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:   10
 12090 ;; This function calls:
 12091 ;;		Nothing
 12092 ;; This function is called by:
 12093 ;;		_Cycle
 12094 ;;		_Capteur_Capot_On
 12095 ;;		_IRQ_TIMER_5
 12096 ;;		_Check_List_Moteur_2
 12097 ;;		_Check_List_Moteur_Bequille
 12098 ;;		_Mouvement_X
 12099 ;;		_EUSART1_RX_T3_LOCAL
 12100 ;;		_Alarme_On
 12101 ;; This function uses a non-reentrant model
 12102 ;;
 12103                           
 12104                           	psect	text71
 12105  00247C                     __ptext71:
 12106                           	opt stack 0
 12107  00247C                     _Etat_Update:
 12108                           	opt stack 14
 12109                           
 12110                           ;incstack = 0
 12111                           ;Etat_Update@etat_new_value stored from wreg
 12112  00247C  6E0F               	movwf	Etat_Update@etat_new_value,c
 12113                           
 12114                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 12115  00247E  504C               	movf	_Etat_Precedent_Index,w,c
 12116  002480  0F6A               	addlw	low _Etat_Log
 12117  002482  6ED9               	movwf	fsr2l,c
 12118  002484  6ADA               	clrf	fsr2h,c
 12119  002486  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 12120                           
 12121                           ;action.c: 76: Etat = etat_new_value;
 12122  00248A  C00F  F0AA         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 12123                           
 12124                           ;action.c: 77: Etat_Precedent_Index++;
 12125  00248E  2A4C               	incf	_Etat_Precedent_Index,f,c
 12126                           
 12127                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 12128  002490  0E0A               	movlw	10
 12129  002492  184C               	xorwf	_Etat_Precedent_Index,w,c
 12130  002494  B4D8               	btfsc	status,2,c
 12131                           
 12132                           ;action.c: 79: Etat_Precedent_Index = 0;
 12133  002496  6A4C               	clrf	_Etat_Precedent_Index,c
 12134  002498  0012               	return		;funcret
 12135  00249A                     __end_of_Etat_Update:
 12136                           	opt stack 0
 12137                           tblptru	equ	0xFF8
 12138                           tblptrh	equ	0xFF7
 12139                           tblptrl	equ	0xFF6
 12140                           tablat	equ	0xFF5
 12141                           prodh	equ	0xFF4
 12142                           prodl	equ	0xFF3
 12143                           intcon	equ	0xFF2
 12144                           intcon2	equ	0xFF1
 12145                           intcon3	equ	0xFF0
 12146                           postinc0	equ	0xFEE
 12147                           wreg	equ	0xFE8
 12148                           indf1	equ	0xFE7
 12149                           postdec1	equ	0xFE5
 12150                           fsr1h	equ	0xFE2
 12151                           fsr1l	equ	0xFE1
 12152                           indf2	equ	0xFDF
 12153                           postinc2	equ	0xFDE
 12154                           postdec2	equ	0xFDD
 12155                           fsr2h	equ	0xFDA
 12156                           fsr2l	equ	0xFD9
 12157                           status	equ	0xFD8
 12158                           
 12159 ;; *************** function _Coupe_Moteur *****************
 12160 ;; Defined at:
 12161 ;;		line 309 in file "action.c"
 12162 ;; Parameters:    Size  Location     Type
 12163 ;;		None
 12164 ;; Auto vars:     Size  Location     Type
 12165 ;;		None
 12166 ;; Return value:  Size  Location     Type
 12167 ;;                  1    wreg      void 
 12168 ;; Registers used:
 12169 ;;		cstack
 12170 ;; Tracked objects:
 12171 ;;		On entry : 0/0
 12172 ;;		On exit  : 0/0
 12173 ;;		Unchanged: 0/0
 12174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12175 ;;      Params:         0       0       0       0
 12176 ;;      Locals:         0       0       0       0
 12177 ;;      Temps:          0       0       0       0
 12178 ;;      Totals:         0       0       0       0
 12179 ;;Total ram usage:        0 bytes
 12180 ;; Hardware stack levels used:    1
 12181 ;; Hardware stack levels required when called:   11
 12182 ;; This function calls:
 12183 ;;		_TIMER2_Off
 12184 ;; This function is called by:
 12185 ;;		_Cycle
 12186 ;;		_Check_List_Moteur_1
 12187 ;;		_Check_List_Moteur_2
 12188 ;;		_Check_List_Moteur_Bequille
 12189 ;;		_Mouvement_Bequille
 12190 ;;		_Mouvement_Z
 12191 ;;		_Mouvement_X
 12192 ;;		_EUSART1_RX_T3_LOCAL
 12193 ;;		_Alarme_On
 12194 ;; This function uses a non-reentrant model
 12195 ;;
 12196                           
 12197                           	psect	text72
 12198  0025D8                     __ptext72:
 12199                           	opt stack 0
 12200  0025D8                     _Coupe_Moteur:
 12201                           	opt stack 12
 12202                           
 12203                           ;action.c: 310: TIMER2_Off();
 12204                           
 12205                           ;incstack = 0
 12206  0025D8  ECAD  F013         	call	_TIMER2_Off	;wreg free
 12207                           
 12208                           ;action.c: 322: LATCbits.LATC0 = 0;
 12209  0025DC  908B               	bcf	3979,0,c	;volatile
 12210                           
 12211                           ;action.c: 323: LATCbits.LATC1 = 0;
 12212  0025DE  928B               	bcf	3979,1,c	;volatile
 12213                           
 12214                           ;action.c: 324: OVDCOND = 0b00000000;
 12215  0025E0  6A6B               	clrf	3947,c	;volatile
 12216                           
 12217                           ;action.c: 325: LATD4 = 0;LATD5 = 0;
 12218  0025E2  988C               	bcf	3980,4,c	;volatile
 12219  0025E4  9A8C               	bcf	3980,5,c	;volatile
 12220                           
 12221                           ;action.c: 326: LATD6 = 0;LATD7 = 0;
 12222  0025E6  9C8C               	bcf	3980,6,c	;volatile
 12223  0025E8  9E8C               	bcf	3980,7,c	;volatile
 12224  0025EA  0012               	return		;funcret
 12225  0025EC                     __end_of_Coupe_Moteur:
 12226                           	opt stack 0
 12227                           tblptru	equ	0xFF8
 12228                           tblptrh	equ	0xFF7
 12229                           tblptrl	equ	0xFF6
 12230                           tablat	equ	0xFF5
 12231                           prodh	equ	0xFF4
 12232                           prodl	equ	0xFF3
 12233                           intcon	equ	0xFF2
 12234                           intcon2	equ	0xFF1
 12235                           intcon3	equ	0xFF0
 12236                           postinc0	equ	0xFEE
 12237                           wreg	equ	0xFE8
 12238                           indf1	equ	0xFE7
 12239                           postdec1	equ	0xFE5
 12240                           fsr1h	equ	0xFE2
 12241                           fsr1l	equ	0xFE1
 12242                           indf2	equ	0xFDF
 12243                           postinc2	equ	0xFDE
 12244                           postdec2	equ	0xFDD
 12245                           fsr2h	equ	0xFDA
 12246                           fsr2l	equ	0xFD9
 12247                           status	equ	0xFD8
 12248                           
 12249 ;; *************** function _TIMER2_Off *****************
 12250 ;; Defined at:
 12251 ;;		line 165 in file "timer.c"
 12252 ;; Parameters:    Size  Location     Type
 12253 ;;		None
 12254 ;; Auto vars:     Size  Location     Type
 12255 ;;		None
 12256 ;; Return value:  Size  Location     Type
 12257 ;;                  1    wreg      void 
 12258 ;; Registers used:
 12259 ;;		None
 12260 ;; Tracked objects:
 12261 ;;		On entry : 0/0
 12262 ;;		On exit  : 0/0
 12263 ;;		Unchanged: 0/0
 12264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12265 ;;      Params:         0       0       0       0
 12266 ;;      Locals:         0       0       0       0
 12267 ;;      Temps:          0       0       0       0
 12268 ;;      Totals:         0       0       0       0
 12269 ;;Total ram usage:        0 bytes
 12270 ;; Hardware stack levels used:    1
 12271 ;; Hardware stack levels required when called:   10
 12272 ;; This function calls:
 12273 ;;		Nothing
 12274 ;; This function is called by:
 12275 ;;		_Coupe_Moteur
 12276 ;; This function uses a non-reentrant model
 12277 ;;
 12278                           
 12279                           	psect	text73
 12280  00275A                     __ptext73:
 12281                           	opt stack 0
 12282  00275A                     _TIMER2_Off:
 12283                           	opt stack 12
 12284                           
 12285                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 12286                           
 12287                           ;incstack = 0
 12288  00275A  929D               	bcf	3997,1,c	;volatile
 12289                           
 12290                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 12291  00275C  929E               	bcf	3998,1,c	;volatile
 12292  00275E  0012               	return		;funcret
 12293  002760                     __end_of_TIMER2_Off:
 12294                           	opt stack 0
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           intcon	equ	0xFF2
 12302                           intcon2	equ	0xFF1
 12303                           intcon3	equ	0xFF0
 12304                           postinc0	equ	0xFEE
 12305                           wreg	equ	0xFE8
 12306                           indf1	equ	0xFE7
 12307                           postdec1	equ	0xFE5
 12308                           fsr1h	equ	0xFE2
 12309                           fsr1l	equ	0xFE1
 12310                           indf2	equ	0xFDF
 12311                           postinc2	equ	0xFDE
 12312                           postdec2	equ	0xFDD
 12313                           fsr2h	equ	0xFDA
 12314                           fsr2l	equ	0xFD9
 12315                           status	equ	0xFD8
 12316                           
 12317 ;; *************** function _IRQ_ADC *****************
 12318 ;; Defined at:
 12319 ;;		line 486 in file "interrupt.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;		None
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;		None
 12324 ;; Return value:  Size  Location     Type
 12325 ;;                  1    wreg      void 
 12326 ;; Registers used:
 12327 ;;		wreg, status,2, status,0
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/2
 12330 ;;		On exit  : 3F/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12333 ;;      Params:         0       0       0       0
 12334 ;;      Locals:         0       0       0       0
 12335 ;;      Temps:          3       0       0       0
 12336 ;;      Totals:         3       0       0       0
 12337 ;;Total ram usage:        3 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:   10
 12340 ;; This function calls:
 12341 ;;		Nothing
 12342 ;; This function is called by:
 12343 ;;		_IRQ_Execution
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           	psect	text74
 12348  000E14                     __ptext74:
 12349                           	opt stack 0
 12350  000E14                     _IRQ_ADC:
 12351                           	opt stack 15
 12352                           
 12353                           ;interrupt.c: 487: switch (moteur_indice) {
 12354                           
 12355                           ;incstack = 0
 12356  000E14  D0C7               	goto	l7585
 12357  000E16                     l622:
 12358                           
 12359                           ; BSR set to: 0
 12360                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 12361  000E16  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 12362                           
 12363                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 12364  000E1A  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12365                           
 12366                           ;interrupt.c: 492: ADIF = 0;
 12367  000E1C  9C9E               	bcf	3998,6,c	;volatile
 12368                           
 12369                           ; BSR set to: 0
 12370                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 12371  000E1E  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 12372  000E20  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12373  000E22  6F84               	movwf	_erreur& (0+255),b	;volatile
 12374  000E24  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12375  000E26  A0D8               	btfss	status,0,c
 12376  000E28  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12377                           
 12378                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 12379  000E2A  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12380  000E2C  D008               	goto	l7535
 12381  000E2E  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12382  000E30  E103               	bnz	u5670
 12383  000E32  0E0A               	movlw	10
 12384  000E34  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12385  000E36  E303               	bnc	l7535
 12386  000E38                     u5670:
 12387                           
 12388                           ; BSR set to: 0
 12389  000E38  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12390  000E3A  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12391  000E3C  D006               	goto	l624
 12392  000E3E                     l7535:
 12393                           
 12394                           ; BSR set to: 0
 12395                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 12396  000E3E  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12397  000E40  D004               	goto	l624
 12398                           
 12399                           ; BSR set to: 0
 12400  000E42  5184               	movf	_erreur& (0+255),w,b	;volatile
 12401  000E44  2786               	addwf	_duty& (0+255),f,b	;volatile
 12402  000E46  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12403  000E48  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 12404  000E4A                     l624:
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 12408  000E4A  507B               	movf	3963,w,c	;volatile
 12409  000E4C  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12410  000E4E  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12411  000E50  5186               	movf	_duty& (0+255),w,b	;volatile
 12412  000E52  5C0F               	subwf	??_IRQ_ADC,w,c
 12413  000E54  5010               	movf	??_IRQ_ADC+1,w,c
 12414  000E56  0A80               	xorlw	128
 12415  000E58  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12416  000E5A  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12417  000E5C  0A80               	xorlw	128
 12418  000E5E  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12419  000E60  E203               	bc	l7541
 12420                           
 12421                           ; BSR set to: 0
 12422  000E62  CF7B F086          	movff	3963,_duty	;volatile
 12423  000E66  D003               	goto	L2
 12424  000E68                     l7541:
 12425                           
 12426                           ; BSR set to: 0
 12427                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 12428  000E68  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12429  000E6A  D002               	goto	l7545
 12430                           
 12431                           ; BSR set to: 0
 12432  000E6C  6B86               	clrf	_duty& (0+255),b	;volatile
 12433  000E6E                     L2:
 12434  000E6E  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12435  000E70                     l7545:
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 12439  000E70  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12440  000E72  46E8               	rlncf	wreg,f,c
 12441  000E74  0BFC               	andlw	252
 12442  000E76  6E79               	movwf	3961,c	;volatile
 12443                           
 12444                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 12445  000E78  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12446  000E7C  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12447  000E80  90D8               	bcf	status,0,c
 12448  000E82  360F               	rlcf	??_IRQ_ADC,f,c
 12449  000E84  3610               	rlcf	??_IRQ_ADC+1,f,c
 12450  000E86  90D8               	bcf	status,0,c
 12451  000E88  360F               	rlcf	??_IRQ_ADC,f,c
 12452  000E8A  3610               	rlcf	??_IRQ_ADC+1,f,c
 12453  000E8C  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12454  000E90  6A10               	clrf	??_IRQ_ADC+1,c
 12455  000E92  BE0F               	btfsc	??_IRQ_ADC,7,c
 12456  000E94  6810               	setf	??_IRQ_ADC+1,c
 12457  000E96  500F               	movf	??_IRQ_ADC,w,c
 12458  000E98  6E78               	movwf	3960,c	;volatile
 12459                           
 12460                           ;interrupt.c: 508: break;
 12461  000E9A  0012               	return	
 12462  000E9C                     l630:
 12463                           
 12464                           ; BSR set to: 0
 12465                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 12466  000E9C  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12467                           
 12468                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 12469  000EA0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12470                           
 12471                           ;interrupt.c: 518: ADIF = 0;
 12472  000EA2  9C9E               	bcf	3998,6,c	;volatile
 12473                           
 12474                           ; BSR set to: 0
 12475                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 12476  000EA4  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12477  000EA6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12478  000EA8  6F84               	movwf	_erreur& (0+255),b	;volatile
 12479  000EAA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12480  000EAC  A0D8               	btfss	status,0,c
 12481  000EAE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12482                           
 12483                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 12484  000EB0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12485  000EB2  D008               	goto	l7551
 12486  000EB4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12487  000EB6  E103               	bnz	u5710
 12488  000EB8  0E0A               	movlw	10
 12489  000EBA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12490  000EBC  E303               	bnc	l7551
 12491  000EBE                     u5710:
 12492                           
 12493                           ; BSR set to: 0
 12494  000EBE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12495  000EC0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12496  000EC2  D005               	goto	l7555
 12497  000EC4                     l7551:
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 12501  000EC4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12502  000EC6  D003               	goto	l7555
 12503                           
 12504                           ; BSR set to: 0
 12505  000EC8  0786               	decf	_duty& (0+255),f,b	;volatile
 12506  000ECA  A0D8               	btfss	status,0,c
 12507  000ECC  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12508  000ECE                     l7555:
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 12512  000ECE  507B               	movf	3963,w,c	;volatile
 12513  000ED0  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12514  000ED2  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12515  000ED4  5186               	movf	_duty& (0+255),w,b	;volatile
 12516  000ED6  5C0F               	subwf	??_IRQ_ADC,w,c
 12517  000ED8  5010               	movf	??_IRQ_ADC+1,w,c
 12518  000EDA  0A80               	xorlw	128
 12519  000EDC  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12520  000EDE  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12521  000EE0  0A80               	xorlw	128
 12522  000EE2  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12523  000EE4  E203               	bc	l7559
 12524                           
 12525                           ; BSR set to: 0
 12526  000EE6  CF7B F086          	movff	3963,_duty	;volatile
 12527  000EEA  D003               	goto	L3
 12528  000EEC                     l7559:
 12529                           
 12530                           ; BSR set to: 0
 12531                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 12532  000EEC  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12533  000EEE  D002               	goto	l7563
 12534                           
 12535                           ; BSR set to: 0
 12536  000EF0  6B86               	clrf	_duty& (0+255),b	;volatile
 12537  000EF2                     L3:
 12538  000EF2  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12539  000EF4                     l7563:
 12540                           
 12541                           ; BSR set to: 0
 12542                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 12543  000EF4  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12544  000EF6  46E8               	rlncf	wreg,f,c
 12545  000EF8  0BFC               	andlw	252
 12546  000EFA  6E77               	movwf	3959,c	;volatile
 12547                           
 12548                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 12549  000EFC  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12550  000F00  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12551  000F04  90D8               	bcf	status,0,c
 12552  000F06  360F               	rlcf	??_IRQ_ADC,f,c
 12553  000F08  3610               	rlcf	??_IRQ_ADC+1,f,c
 12554  000F0A  90D8               	bcf	status,0,c
 12555  000F0C  360F               	rlcf	??_IRQ_ADC,f,c
 12556  000F0E  3610               	rlcf	??_IRQ_ADC+1,f,c
 12557  000F10  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12558  000F14  6A10               	clrf	??_IRQ_ADC+1,c
 12559  000F16  BE0F               	btfsc	??_IRQ_ADC,7,c
 12560  000F18  6810               	setf	??_IRQ_ADC+1,c
 12561  000F1A  500F               	movf	??_IRQ_ADC,w,c
 12562  000F1C  6E76               	movwf	3958,c	;volatile
 12563                           
 12564                           ;interrupt.c: 532: break;
 12565  000F1E  0012               	return	
 12566  000F20                     l637:
 12567                           
 12568                           ; BSR set to: 0
 12569                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 12570  000F20  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12571                           
 12572                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 12573  000F24  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12574                           
 12575                           ;interrupt.c: 539: ADIF = 0;
 12576  000F26  9C9E               	bcf	3998,6,c	;volatile
 12577                           
 12578                           ; BSR set to: 0
 12579                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 12580  000F28  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12581  000F2A  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12582  000F2C  6F84               	movwf	_erreur& (0+255),b	;volatile
 12583  000F2E  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12584  000F30  A0D8               	btfss	status,0,c
 12585  000F32  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12586                           
 12587                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 12588  000F34  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12589  000F36  D008               	goto	l7569
 12590  000F38  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12591  000F3A  E103               	bnz	u5750
 12592  000F3C  0E0A               	movlw	10
 12593  000F3E  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12594  000F40  E303               	bnc	l7569
 12595  000F42                     u5750:
 12596                           
 12597                           ; BSR set to: 0
 12598  000F42  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12599  000F44  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12600  000F46  D005               	goto	l7573
 12601  000F48                     l7569:
 12602                           
 12603                           ; BSR set to: 0
 12604                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 12605  000F48  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12606  000F4A  D003               	goto	l7573
 12607                           
 12608                           ; BSR set to: 0
 12609  000F4C  0786               	decf	_duty& (0+255),f,b	;volatile
 12610  000F4E  A0D8               	btfss	status,0,c
 12611  000F50  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12612  000F52                     l7573:
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 12616  000F52  507B               	movf	3963,w,c	;volatile
 12617  000F54  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12618  000F56  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12619  000F58  5186               	movf	_duty& (0+255),w,b	;volatile
 12620  000F5A  5C0F               	subwf	??_IRQ_ADC,w,c
 12621  000F5C  5010               	movf	??_IRQ_ADC+1,w,c
 12622  000F5E  0A80               	xorlw	128
 12623  000F60  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12624  000F62  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12625  000F64  0A80               	xorlw	128
 12626  000F66  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12627  000F68  E203               	bc	l7577
 12628                           
 12629                           ; BSR set to: 0
 12630  000F6A  CF7B F086          	movff	3963,_duty	;volatile
 12631  000F6E  D003               	goto	L4
 12632  000F70                     l7577:
 12633                           
 12634                           ; BSR set to: 0
 12635                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 12636  000F70  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12637  000F72  D002               	goto	l7581
 12638                           
 12639                           ; BSR set to: 0
 12640  000F74  6B86               	clrf	_duty& (0+255),b	;volatile
 12641  000F76                     L4:
 12642  000F76  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12643  000F78                     l7581:
 12644                           
 12645                           ; BSR set to: 0
 12646                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 12647  000F78  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12648  000F7A  46E8               	rlncf	wreg,f,c
 12649  000F7C  0BFC               	andlw	252
 12650  000F7E  6E77               	movwf	3959,c	;volatile
 12651                           
 12652                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 12653  000F80  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12654  000F84  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12655  000F88  90D8               	bcf	status,0,c
 12656  000F8A  360F               	rlcf	??_IRQ_ADC,f,c
 12657  000F8C  3610               	rlcf	??_IRQ_ADC+1,f,c
 12658  000F8E  90D8               	bcf	status,0,c
 12659  000F90  360F               	rlcf	??_IRQ_ADC,f,c
 12660  000F92  3610               	rlcf	??_IRQ_ADC+1,f,c
 12661  000F94  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12662  000F98  6A10               	clrf	??_IRQ_ADC+1,c
 12663  000F9A  BE0F               	btfsc	??_IRQ_ADC,7,c
 12664  000F9C  6810               	setf	??_IRQ_ADC+1,c
 12665  000F9E  500F               	movf	??_IRQ_ADC,w,c
 12666  000FA0  6E76               	movwf	3958,c	;volatile
 12667                           
 12668                           ;interrupt.c: 553: break;
 12669  000FA2  0012               	return	
 12670  000FA4                     l7585:
 12671  000FA4  0100               	movlb	0	; () banked
 12672  000FA6  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 12673                           
 12674                           ; Switch size 1, requested type "speed"
 12675                           ; Number of cases is 3, Range of values is 1 to 3
 12676                           ; switch strategies available:
 12677                           ; Name         Instructions Cycles
 12678                           ; simple_byte           10     6 (average)
 12679                           ;	Chosen strategy is simple_byte
 12680  000FA8  0A01               	xorlw	1	; case 1
 12681  000FAA  E101 D734          	bz	l622
 12682  000FAE  0A03               	xorlw	3	; case 2
 12683  000FB0  E101 D774          	bz	l630
 12684  000FB4  0A01               	xorlw	1	; case 3
 12685  000FB6  E0B4               	bz	l637
 12686                           
 12687                           ; BSR set to: 0
 12688  000FB8  0012               	return		;funcret
 12689  000FBA                     __end_of_IRQ_ADC:
 12690                           	opt stack 0
 12691                           tblptru	equ	0xFF8
 12692                           tblptrh	equ	0xFF7
 12693                           tblptrl	equ	0xFF6
 12694                           tablat	equ	0xFF5
 12695                           prodh	equ	0xFF4
 12696                           prodl	equ	0xFF3
 12697                           intcon	equ	0xFF2
 12698                           intcon2	equ	0xFF1
 12699                           intcon3	equ	0xFF0
 12700                           postinc0	equ	0xFEE
 12701                           wreg	equ	0xFE8
 12702                           indf1	equ	0xFE7
 12703                           postdec1	equ	0xFE5
 12704                           fsr1h	equ	0xFE2
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           fsr2h	equ	0xFDA
 12710                           fsr2l	equ	0xFD9
 12711                           status	equ	0xFD8
 12712                           
 12713 ;; *************** function _Etat_Intitule *****************
 12714 ;; Defined at:
 12715 ;;		line 29 in file "action.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  Etat_Number     1    wreg     unsigned char 
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  1    wreg      unsigned char 
 12722 ;; Registers used:
 12723 ;;		wreg, status,2, status,0
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/1
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12729 ;;      Params:         0       0       0       0
 12730 ;;      Locals:         1       0       0       0
 12731 ;;      Temps:          0       0       0       0
 12732 ;;      Totals:         1       0       0       0
 12733 ;;Total ram usage:        1 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; Hardware stack levels required when called:   10
 12736 ;; This function calls:
 12737 ;;		Nothing
 12738 ;; This function is called by:
 12739 ;;		_EUSART1_RX_T3_LOCAL
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           	psect	text75
 12744  00220C                     __ptext75:
 12745                           	opt stack 0
 12746  00220C                     _Etat_Intitule:
 12747                           	opt stack 16
 12748                           
 12749                           ; BSR set to: 0
 12750                           ;incstack = 0
 12751                           ;Etat_Intitule@Etat_Number stored from wreg
 12752  00220C  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 12753                           
 12754                           ;action.c: 31: switch (Etat_Number) {
 12755  00220E  500F               	movf	Etat_Intitule@Etat_Number,w,c
 12756                           
 12757                           ; Switch size 1, requested type "speed"
 12758                           ; Number of cases is 8, Range of values is 0 to 255
 12759                           ; switch strategies available:
 12760                           ; Name         Instructions Cycles
 12761                           ; simple_byte           25    13 (average)
 12762                           ;	Chosen strategy is simple_byte
 12763  002210  B4D8               	btfsc	status,2,c
 12764  002212  0C49               	retlw	73
 12765  002214  0A01               	xorlw	1	; case 1
 12766  002216  B4D8               	btfsc	status,2,c
 12767  002218  0C21               	retlw	33
 12768  00221A  0A03               	xorlw	3	; case 2
 12769  00221C  B4D8               	btfsc	status,2,c
 12770  00221E  0C41               	retlw	65
 12771  002220  0A01               	xorlw	1	; case 3
 12772  002222  B4D8               	btfsc	status,2,c
 12773  002224  0C52               	retlw	82
 12774  002226  0A07               	xorlw	7	; case 4
 12775  002228  B4D8               	btfsc	status,2,c
 12776  00222A  0C4C               	retlw	76
 12777  00222C  0A01               	xorlw	1	; case 5
 12778  00222E  B4D8               	btfsc	status,2,c
 12779  002230  0C42               	retlw	66
 12780  002232  0A03               	xorlw	3	; case 6
 12781  002234  B4D8               	btfsc	status,2,c
 12782  002236  0C50               	retlw	80
 12783  002238  0AF9               	xorlw	249	; case 255
 12784  00223A  B4D8               	btfsc	status,2,c
 12785  00223C  0C48               	retlw	72
 12786  00223E  0C20               	retlw	32
 12787  002240                     __end_of_Etat_Intitule:
 12788                           	opt stack 0
 12789                           tblptru	equ	0xFF8
 12790                           tblptrh	equ	0xFF7
 12791                           tblptrl	equ	0xFF6
 12792                           tablat	equ	0xFF5
 12793                           prodh	equ	0xFF4
 12794                           prodl	equ	0xFF3
 12795                           intcon	equ	0xFF2
 12796                           intcon2	equ	0xFF1
 12797                           intcon3	equ	0xFF0
 12798                           postinc0	equ	0xFEE
 12799                           wreg	equ	0xFE8
 12800                           indf1	equ	0xFE7
 12801                           postdec1	equ	0xFE5
 12802                           fsr1h	equ	0xFE2
 12803                           fsr1l	equ	0xFE1
 12804                           indf2	equ	0xFDF
 12805                           postinc2	equ	0xFDE
 12806                           postdec2	equ	0xFDD
 12807                           fsr2h	equ	0xFDA
 12808                           fsr2l	equ	0xFD9
 12809                           status	equ	0xFD8
 12810                           
 12811 ;; *************** function _Etat_Get *****************
 12812 ;; Defined at:
 12813 ;;		line 49 in file "action.c"
 12814 ;; Parameters:    Size  Location     Type
 12815 ;;  Etat_Indice     1    wreg     unsigned char 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 12818 ;; Return value:  Size  Location     Type
 12819 ;;                  1    wreg      unsigned char 
 12820 ;; Registers used:
 12821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : 0/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12827 ;;      Params:         0       0       0       0
 12828 ;;      Locals:         1       0       0       0
 12829 ;;      Temps:          2       0       0       0
 12830 ;;      Totals:         3       0       0       0
 12831 ;;Total ram usage:        3 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:   11
 12834 ;; This function calls:
 12835 ;;		___awmod
 12836 ;; This function is called by:
 12837 ;;		_Cycle
 12838 ;;		_EUSART1_RX_T3_LOCAL
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           	psect	text76
 12843  002240                     __ptext76:
 12844                           	opt stack 0
 12845  002240                     _Etat_Get:
 12846                           	opt stack 15
 12847                           
 12848                           ;incstack = 0
 12849                           ;Etat_Get@Etat_Indice stored from wreg
 12850  002240  6E17               	movwf	Etat_Get@Etat_Indice,c
 12851                           
 12852                           ;action.c: 62: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 12853  002242  5017               	movf	Etat_Get@Etat_Indice,w,c
 12854  002244  C04C  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 12855  002248  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 12856  00224A  5E15               	subwf	??_Etat_Get,f,c
 12857  00224C  0E00               	movlw	0
 12858  00224E  5A16               	subwfb	??_Etat_Get+1,f,c
 12859  002250  0E09               	movlw	9
 12860  002252  2415               	addwf	??_Etat_Get,w,c
 12861  002254  6E0F               	movwf	___awmod@dividend,c
 12862  002256  0E00               	movlw	0
 12863  002258  2016               	addwfc	??_Etat_Get+1,w,c
 12864  00225A  6E10               	movwf	___awmod@dividend+1,c
 12865  00225C  6A12               	clrf	___awmod@divisor+1,c
 12866  00225E  0E0A               	movlw	10
 12867  002260  6E11               	movwf	___awmod@divisor,c
 12868  002262  EC25  F00E         	call	___awmod	;wreg free
 12869  002266  500F               	movf	?___awmod,w,c
 12870  002268  0F6A               	addlw	low _Etat_Log
 12871  00226A  6ED9               	movwf	fsr2l,c
 12872  00226C  6ADA               	clrf	fsr2h,c
 12873  00226E  50DF               	movf	indf2,w,c
 12874  002270  0012               	return		;funcret
 12875  002272                     __end_of_Etat_Get:
 12876                           	opt stack 0
 12877                           tblptru	equ	0xFF8
 12878                           tblptrh	equ	0xFF7
 12879                           tblptrl	equ	0xFF6
 12880                           tablat	equ	0xFF5
 12881                           prodh	equ	0xFF4
 12882                           prodl	equ	0xFF3
 12883                           intcon	equ	0xFF2
 12884                           intcon2	equ	0xFF1
 12885                           intcon3	equ	0xFF0
 12886                           postinc0	equ	0xFEE
 12887                           wreg	equ	0xFE8
 12888                           indf1	equ	0xFE7
 12889                           postdec1	equ	0xFE5
 12890                           fsr1h	equ	0xFE2
 12891                           fsr1l	equ	0xFE1
 12892                           indf2	equ	0xFDF
 12893                           postinc2	equ	0xFDE
 12894                           postdec2	equ	0xFDD
 12895                           fsr2h	equ	0xFDA
 12896                           fsr2l	equ	0xFD9
 12897                           status	equ	0xFD8
 12898                           
 12899 ;; *************** function ___awmod *****************
 12900 ;; Defined at:
 12901 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;  dividend        2   14[COMRAM] int 
 12904 ;;  divisor         2   16[COMRAM] int 
 12905 ;; Auto vars:     Size  Location     Type
 12906 ;;  sign            1   19[COMRAM] unsigned char 
 12907 ;;  counter         1   18[COMRAM] unsigned char 
 12908 ;; Return value:  Size  Location     Type
 12909 ;;                  2   14[COMRAM] int 
 12910 ;; Registers used:
 12911 ;;		wreg, status,2, status,0
 12912 ;; Tracked objects:
 12913 ;;		On entry : 0/1
 12914 ;;		On exit  : 0/0
 12915 ;;		Unchanged: 0/0
 12916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12917 ;;      Params:         4       0       0       0
 12918 ;;      Locals:         2       0       0       0
 12919 ;;      Temps:          0       0       0       0
 12920 ;;      Totals:         6       0       0       0
 12921 ;;Total ram usage:        6 bytes
 12922 ;; Hardware stack levels used:    1
 12923 ;; Hardware stack levels required when called:   10
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_Etat_Get
 12928 ;;		_EUSART1_RX_T3_LOCAL
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           	psect	text77
 12933  001C4A                     __ptext77:
 12934                           	opt stack 0
 12935  001C4A                     ___awmod:
 12936                           	opt stack 16
 12937                           
 12938                           ;incstack = 0
 12939  001C4A  6A14               	clrf	___awmod@sign,c
 12940  001C4C  AE10               	btfss	___awmod@dividend+1,7,c
 12941  001C4E  D006               	goto	l7617
 12942  001C50  6C0F               	negf	___awmod@dividend,c
 12943  001C52  1E10               	comf	___awmod@dividend+1,f,c
 12944  001C54  B0D8               	btfsc	status,0,c
 12945  001C56  2A10               	incf	___awmod@dividend+1,f,c
 12946  001C58  0E01               	movlw	1
 12947  001C5A  6E14               	movwf	___awmod@sign,c
 12948  001C5C                     l7617:
 12949  001C5C  AE12               	btfss	___awmod@divisor+1,7,c
 12950  001C5E  D004               	goto	l7621
 12951  001C60  6C11               	negf	___awmod@divisor,c
 12952  001C62  1E12               	comf	___awmod@divisor+1,f,c
 12953  001C64  B0D8               	btfsc	status,0,c
 12954  001C66  2A12               	incf	___awmod@divisor+1,f,c
 12955  001C68                     l7621:
 12956  001C68  5011               	movf	___awmod@divisor,w,c
 12957  001C6A  1012               	iorwf	___awmod@divisor+1,w,c
 12958  001C6C  E017               	bz	l7637
 12959  001C6E  0E01               	movlw	1
 12960  001C70  6E13               	movwf	___awmod@counter,c
 12961  001C72  D004               	goto	l7627
 12962  001C74                     l7625:
 12963  001C74  90D8               	bcf	status,0,c
 12964  001C76  3611               	rlcf	___awmod@divisor,f,c
 12965  001C78  3612               	rlcf	___awmod@divisor+1,f,c
 12966  001C7A  2A13               	incf	___awmod@counter,f,c
 12967  001C7C                     l7627:
 12968  001C7C  AE12               	btfss	___awmod@divisor+1,7,c
 12969  001C7E  D7FA               	goto	l7625
 12970  001C80                     l7629:
 12971  001C80  5011               	movf	___awmod@divisor,w,c
 12972  001C82  5C0F               	subwf	___awmod@dividend,w,c
 12973  001C84  5012               	movf	___awmod@divisor+1,w,c
 12974  001C86  5810               	subwfb	___awmod@dividend+1,w,c
 12975  001C88  E304               	bnc	l7633
 12976  001C8A  5011               	movf	___awmod@divisor,w,c
 12977  001C8C  5E0F               	subwf	___awmod@dividend,f,c
 12978  001C8E  5012               	movf	___awmod@divisor+1,w,c
 12979  001C90  5A10               	subwfb	___awmod@dividend+1,f,c
 12980  001C92                     l7633:
 12981  001C92  90D8               	bcf	status,0,c
 12982  001C94  3212               	rrcf	___awmod@divisor+1,f,c
 12983  001C96  3211               	rrcf	___awmod@divisor,f,c
 12984  001C98  2E13               	decfsz	___awmod@counter,f,c
 12985  001C9A  D7F2               	goto	l7629
 12986  001C9C                     l7637:
 12987  001C9C  5014               	movf	___awmod@sign,w,c
 12988  001C9E  E004               	bz	l7641
 12989  001CA0  6C0F               	negf	___awmod@dividend,c
 12990  001CA2  1E10               	comf	___awmod@dividend+1,f,c
 12991  001CA4  B0D8               	btfsc	status,0,c
 12992  001CA6  2A10               	incf	___awmod@dividend+1,f,c
 12993  001CA8                     l7641:
 12994  001CA8  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12995  001CAC  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12996  001CB0  0012               	return		;funcret
 12997  001CB2                     __end_of___awmod:
 12998                           	opt stack 0
 12999                           tblptru	equ	0xFF8
 13000                           tblptrh	equ	0xFF7
 13001                           tblptrl	equ	0xFF6
 13002                           tablat	equ	0xFF5
 13003                           prodh	equ	0xFF4
 13004                           prodl	equ	0xFF3
 13005                           intcon	equ	0xFF2
 13006                           intcon2	equ	0xFF1
 13007                           intcon3	equ	0xFF0
 13008                           postinc0	equ	0xFEE
 13009                           wreg	equ	0xFE8
 13010                           indf1	equ	0xFE7
 13011                           postdec1	equ	0xFE5
 13012                           fsr1h	equ	0xFE2
 13013                           fsr1l	equ	0xFE1
 13014                           indf2	equ	0xFDF
 13015                           postinc2	equ	0xFDE
 13016                           postdec2	equ	0xFDD
 13017                           fsr2h	equ	0xFDA
 13018                           fsr2l	equ	0xFD9
 13019                           status	equ	0xFD8
 13020                           
 13021 ;; *************** function _EUSART1_Buffer_Send *****************
 13022 ;; Defined at:
 13023 ;;		line 511 in file "eusart.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  text            1   14[COMRAM] PTR unsigned char 
 13026 ;;		 -> UART_TX_TEXT(64), 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  i               2   15[COMRAM] unsigned int 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;                  1    wreg      void 
 13031 ;; Registers used:
 13032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13038 ;;      Params:         1       0       0       0
 13039 ;;      Locals:         2       0       0       0
 13040 ;;      Temps:          0       0       0       0
 13041 ;;      Totals:         3       0       0       0
 13042 ;;Total ram usage:        3 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:   10
 13045 ;; This function calls:
 13046 ;;		Nothing
 13047 ;; This function is called by:
 13048 ;;		_EUSART1_RX_T3_LOCAL
 13049 ;; This function uses a non-reentrant model
 13050 ;;
 13051                           
 13052                           	psect	text78
 13053  001782                     __ptext78:
 13054                           	opt stack 0
 13055  001782                     _EUSART1_Buffer_Send:
 13056                           	opt stack 16
 13057  001782                     l1333:
 13058  001782  A2AC               	btfss	4012,1,c	;volatile
 13059  001784  D7FE               	goto	l1333
 13060                           
 13061                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 13062  001786  6A10               	clrf	EUSART1_Buffer_Send@i,c
 13063  001788  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 13064  00178A  D01A               	goto	l7761
 13065  00178C                     l7757:
 13066                           
 13067                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 13068  00178C  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13069  00178E  0FAD               	addlw	low _UART_TX_TEXT
 13070  001790  6ED9               	movwf	fsr2l,c
 13071  001792  6ADA               	clrf	fsr2h,c
 13072  001794  0E80               	movlw	low _eusart1TxBuffer
 13073  001796  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13074  001798  6EE1               	movwf	fsr1l,c
 13075  00179A  0E01               	movlw	high _eusart1TxBuffer
 13076  00179C  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13077  00179E  6EE2               	movwf	fsr1h,c
 13078  0017A0  CFDF FFE7          	movff	indf2,indf1
 13079                           
 13080                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 13081  0017A4  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13082  0017A6  0FAD               	addlw	low _UART_TX_TEXT
 13083  0017A8  6ED9               	movwf	fsr2l,c
 13084  0017AA  6ADA               	clrf	fsr2h,c
 13085  0017AC  0E40               	movlw	low _spiTxBuffer
 13086  0017AE  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13087  0017B0  6EE1               	movwf	fsr1l,c
 13088  0017B2  0E01               	movlw	high _spiTxBuffer
 13089  0017B4  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13090  0017B6  6EE2               	movwf	fsr1h,c
 13091  0017B8  CFDF FFE7          	movff	indf2,indf1
 13092  0017BC  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 13093  0017BE  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 13094  0017C0                     l7761:
 13095  0017C0  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 13096  0017C2  E109               	bnz	l7765
 13097  0017C4  0E40               	movlw	64
 13098  0017C6  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 13099  0017C8  E206               	bc	l7765
 13100  0017CA  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13101  0017CC  0FAD               	addlw	low _UART_TX_TEXT
 13102  0017CE  6ED9               	movwf	fsr2l,c
 13103  0017D0  6ADA               	clrf	fsr2h,c
 13104  0017D2  50DF               	movf	indf2,w,c
 13105  0017D4  E1DB               	bnz	l7757
 13106  0017D6                     l7765:
 13107                           
 13108                           ;eusart.c: 526: }
 13109                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 13110  0017D6  0E80               	movlw	low _eusart1TxBuffer
 13111  0017D8  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13112  0017DA  6ED9               	movwf	fsr2l,c
 13113  0017DC  0E01               	movlw	high _eusart1TxBuffer
 13114  0017DE  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13115  0017E0  6EDA               	movwf	fsr2h,c
 13116  0017E2  0E0D               	movlw	13
 13117  0017E4  6EDF               	movwf	indf2,c
 13118                           
 13119                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 13120  0017E6  0E40               	movlw	low _spiTxBuffer
 13121  0017E8  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13122  0017EA  6ED9               	movwf	fsr2l,c
 13123  0017EC  0E01               	movlw	high _spiTxBuffer
 13124  0017EE  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13125  0017F0  6EDA               	movwf	fsr2h,c
 13126  0017F2  0E0D               	movlw	13
 13127  0017F4  6EDF               	movwf	indf2,c
 13128                           
 13129                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 13130  0017F6  0E81               	movlw	low (_eusart1TxBuffer+1)
 13131  0017F8  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13132  0017FA  6ED9               	movwf	fsr2l,c
 13133  0017FC  0E01               	movlw	high (_eusart1TxBuffer+1)
 13134  0017FE  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13135  001800  6EDA               	movwf	fsr2h,c
 13136  001802  6ADF               	clrf	indf2,c
 13137                           
 13138                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 13139  001804  0E41               	movlw	low (_spiTxBuffer+1)
 13140  001806  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13141  001808  6ED9               	movwf	fsr2l,c
 13142  00180A  0E01               	movlw	high (_spiTxBuffer+1)
 13143  00180C  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13144  00180E  6EDA               	movwf	fsr2h,c
 13145  001810  6ADF               	clrf	indf2,c
 13146                           
 13147                           ;eusart.c: 537: eusart1TxIndex = 0;
 13148  001812  6A46               	clrf	_eusart1TxIndex,c	;volatile
 13149                           
 13150                           ;eusart.c: 538: spiTxIndex = 0;
 13151  001814  6A44               	clrf	_spiTxIndex,c	;volatile
 13152                           
 13153                           ;eusart.c: 540: SPI_MODE = 1;
 13154  001816  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 13155                           
 13156                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 13157  001818  0E40               	movlw	low _spiTxBuffer
 13158  00181A  2444               	addwf	_spiTxIndex,w,c	;volatile
 13159  00181C  6ED9               	movwf	fsr2l,c
 13160  00181E  6ADA               	clrf	fsr2h,c
 13161  001820  0E01               	movlw	high _spiTxBuffer
 13162  001822  22DA               	addwfc	fsr2h,f,c
 13163  001824  50DF               	movf	indf2,w,c
 13164  001826  6EC9               	movwf	4041,c	;volatile
 13165                           
 13166                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 13167  001828  0E80               	movlw	low _eusart1TxBuffer
 13168  00182A  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 13169  00182C  6ED9               	movwf	fsr2l,c
 13170  00182E  6ADA               	clrf	fsr2h,c
 13171  001830  0E01               	movlw	high _eusart1TxBuffer
 13172  001832  22DA               	addwfc	fsr2h,f,c
 13173  001834  50DF               	movf	indf2,w,c
 13174  001836  6EAD               	movwf	4013,c	;volatile
 13175                           
 13176                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 13177  001838  889D               	bsf	3997,4,c	;volatile
 13178  00183A  0012               	return		;funcret
 13179  00183C                     __end_of_EUSART1_Buffer_Send:
 13180                           	opt stack 0
 13181                           tblptru	equ	0xFF8
 13182                           tblptrh	equ	0xFF7
 13183                           tblptrl	equ	0xFF6
 13184                           tablat	equ	0xFF5
 13185                           prodh	equ	0xFF4
 13186                           prodl	equ	0xFF3
 13187                           intcon	equ	0xFF2
 13188                           intcon2	equ	0xFF1
 13189                           intcon3	equ	0xFF0
 13190                           postinc0	equ	0xFEE
 13191                           wreg	equ	0xFE8
 13192                           indf1	equ	0xFE7
 13193                           postdec1	equ	0xFE5
 13194                           fsr1h	equ	0xFE2
 13195                           fsr1l	equ	0xFE1
 13196                           indf2	equ	0xFDF
 13197                           postinc2	equ	0xFDE
 13198                           postdec2	equ	0xFDD
 13199                           fsr2h	equ	0xFDA
 13200                           fsr2l	equ	0xFD9
 13201                           status	equ	0xFD8
 13202                           
 13203 ;; *************** function _LOW_PRIORITY_IRQ *****************
 13204 ;; Defined at:
 13205 ;;		line 559 in file "interrupt.c"
 13206 ;; Parameters:    Size  Location     Type
 13207 ;;		None
 13208 ;; Auto vars:     Size  Location     Type
 13209 ;;		None
 13210 ;; Return value:  Size  Location     Type
 13211 ;;                  1    wreg      void 
 13212 ;; Registers used:
 13213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13214 ;; Tracked objects:
 13215 ;;		On entry : 0/0
 13216 ;;		On exit  : 0/0
 13217 ;;		Unchanged: 0/0
 13218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13219 ;;      Params:         0       0       0       0
 13220 ;;      Locals:         0       0       0       0
 13221 ;;      Temps:          7       0       0       0
 13222 ;;      Totals:         7       0       0       0
 13223 ;;Total ram usage:        7 bytes
 13224 ;; Hardware stack levels used:    1
 13225 ;; Hardware stack levels required when called:    9
 13226 ;; This function calls:
 13227 ;;		_EUSART1_Receive_ISR
 13228 ;;		_EUSART1_Transmit_ISR
 13229 ;;		_IRQ_PION_CHANGEMENT_ETAT
 13230 ;;		_SPI_ISR
 13231 ;;		i1_IRQ_ADC
 13232 ;;		i1_IRQ_PWM
 13233 ;;		i1_IRQ_TIMER_0
 13234 ;;		i1_IRQ_TIMER_5
 13235 ;; This function is called by:
 13236 ;;		Interrupt level 1
 13237 ;; This function uses a non-reentrant model
 13238 ;;
 13239                           
 13240                           	psect	intcodelo
 13241  000018                     __pintcodelo:
 13242                           	opt stack 0
 13243  000018                     _LOW_PRIORITY_IRQ:
 13244                           	opt stack 11
 13245                           
 13246                           ;incstack = 0
 13247  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13248  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 13249  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 13250  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 13251  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 13252  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 13253  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 13254  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 13255                           
 13256                           ;interrupt.c: 562: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 13257  000036  B2A3               	btfsc	4003,1,c	;volatile
 13258  000038  A2A4               	btfss	4004,1,c	;volatile
 13259  00003A  D003               	goto	i1l650
 13260                           
 13261                           ;interrupt.c: 564: IRQ_PION_CHANGEMENT_ETAT();
 13262  00003C  ECC7  F00F         	call	_IRQ_PION_CHANGEMENT_ETAT	;wreg free
 13263                           
 13264                           ;interrupt.c: 579: } else
 13265  000040  D036               	goto	i1l669
 13266  000042                     i1l650:
 13267                           
 13268                           ;interrupt.c: 581: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 13269  000042  B4A3               	btfsc	4003,2,c	;volatile
 13270  000044  A4A4               	btfss	4004,2,c	;volatile
 13271  000046  D002               	goto	i1l652
 13272                           
 13273                           ;interrupt.c: 582: PIR3bits.IC2QEIF = 0;
 13274  000048  94A4               	bcf	4004,2,c	;volatile
 13275                           
 13276                           ;interrupt.c: 594: } else
 13277  00004A  D031               	goto	i1l669
 13278  00004C                     i1l652:
 13279                           
 13280                           ;interrupt.c: 595: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 13281  00004C  B69D               	btfsc	3997,3,c	;volatile
 13282  00004E  A69E               	btfss	3998,3,c	;volatile
 13283  000050  D003               	goto	i1l654
 13284                           
 13285                           ;interrupt.c: 596: SPI_ISR();
 13286  000052  EC4D  F009         	call	_SPI_ISR	;wreg free
 13287                           
 13288                           ;interrupt.c: 598: } else
 13289  000056  D02B               	goto	i1l669
 13290  000058                     i1l654:
 13291                           
 13292                           ;interrupt.c: 599: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13293  000058  B89D               	btfsc	3997,4,c	;volatile
 13294  00005A  A89E               	btfss	3998,4,c	;volatile
 13295  00005C  D003               	goto	i1l656
 13296                           
 13297                           ;interrupt.c: 600: EUSART1_Transmit_ISR();
 13298  00005E  EC8D  F011         	call	_EUSART1_Transmit_ISR	;wreg free
 13299                           
 13300                           ;interrupt.c: 602: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13301  000062  D025               	goto	i1l669
 13302  000064                     i1l656:
 13303  000064  BA9D               	btfsc	3997,5,c	;volatile
 13304  000066  AA9E               	btfss	3998,5,c	;volatile
 13305  000068  D00B               	goto	i1l658
 13306                           
 13307                           ;interrupt.c: 603: if (RX1_ABR==0){
 13308  00006A  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13309  00006C  D003               	goto	i1l659
 13310                           
 13311                           ;interrupt.c: 604: EUSART1_Receive_ISR();
 13312  00006E  EC3F  F00A         	call	_EUSART1_Receive_ISR	;wreg free
 13313                           
 13314                           ;interrupt.c: 605: }else{
 13315  000072  D01D               	goto	i1l669
 13316  000074                     i1l659:
 13317                           
 13318                           ;interrupt.c: 606: eusart1RxIndex = RCREG;
 13319  000074  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 13320                           
 13321                           ;interrupt.c: 607: eusart1RxIndex = 0;
 13322  000078  6A45               	clrf	_eusart1RxIndex,c	;volatile
 13323                           
 13324                           ;interrupt.c: 608: PIR1bits.RC1IF = 0;
 13325  00007A  9A9E               	bcf	3998,5,c	;volatile
 13326                           
 13327                           ;interrupt.c: 609: RX1_ABR = 0;}
 13328  00007C  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13329                           
 13330                           ;interrupt.c: 611: } else
 13331  00007E  D017               	goto	i1l669
 13332  000080                     i1l658:
 13333                           
 13334                           ;interrupt.c: 615: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 13335  000080  BAF2               	btfsc	intcon,5,c	;volatile
 13336  000082  A4F2               	btfss	intcon,2,c	;volatile
 13337  000084  D003               	goto	i1l662
 13338                           
 13339                           ;interrupt.c: 616: IRQ_TIMER_0();
 13340  000086  EC49  F00F         	call	i1_IRQ_TIMER_0	;wreg free
 13341                           
 13342                           ;interrupt.c: 622: } else
 13343  00008A  D011               	goto	i1l669
 13344  00008C                     i1l662:
 13345                           
 13346                           ;interrupt.c: 625: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 13347  00008C  B0A3               	btfsc	4003,0,c	;volatile
 13348  00008E  A0A4               	btfss	4004,0,c	;volatile
 13349  000090  D003               	goto	i1l664
 13350                           
 13351                           ;interrupt.c: 626: IRQ_TIMER_5();
 13352  000092  ECED  F00D         	call	i1_IRQ_TIMER_5	;wreg free
 13353                           
 13354                           ;interrupt.c: 648: } else
 13355  000096  D00B               	goto	i1l669
 13356  000098                     i1l664:
 13357                           
 13358                           ;interrupt.c: 650: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 13359  000098  B8A3               	btfsc	4003,4,c	;volatile
 13360  00009A  A8A4               	btfss	4004,4,c	;volatile
 13361  00009C  D003               	goto	i1l666
 13362                           
 13363                           ;interrupt.c: 651: IRQ_PWM();
 13364  00009E  ECC1  F013         	call	i1_IRQ_PWM	;wreg free
 13365                           
 13366                           ;interrupt.c: 655: } else
 13367  0000A2  D005               	goto	i1l669
 13368  0000A4                     i1l666:
 13369                           
 13370                           ;interrupt.c: 660: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 13371  0000A4  BC9D               	btfsc	3997,6,c	;volatile
 13372  0000A6  AC9E               	btfss	3998,6,c	;volatile
 13373  0000A8  D002               	goto	i1l669
 13374                           
 13375                           ;interrupt.c: 667: IRQ_ADC();
 13376  0000AA  ECDD  F007         	call	i1_IRQ_ADC	;wreg free
 13377  0000AE                     i1l669:
 13378  0000AE  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 13379  0000B2  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 13380  0000B6  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 13381  0000BA  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 13382  0000BE  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 13383  0000C2  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 13384  0000C6  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 13385  0000CA  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13386  0000CC  0010               	retfie	
 13387  0000CE                     __end_of_LOW_PRIORITY_IRQ:
 13388                           	opt stack 0
 13389                           tblptru	equ	0xFF8
 13390                           tblptrh	equ	0xFF7
 13391                           tblptrl	equ	0xFF6
 13392                           tablat	equ	0xFF5
 13393                           prodh	equ	0xFF4
 13394                           prodl	equ	0xFF3
 13395                           intcon	equ	0xFF2
 13396                           intcon2	equ	0xFF1
 13397                           intcon3	equ	0xFF0
 13398                           postinc0	equ	0xFEE
 13399                           wreg	equ	0xFE8
 13400                           indf1	equ	0xFE7
 13401                           postdec1	equ	0xFE5
 13402                           fsr1h	equ	0xFE2
 13403                           fsr1l	equ	0xFE1
 13404                           bsr	equ	0xFE0
 13405                           indf2	equ	0xFDF
 13406                           postinc2	equ	0xFDE
 13407                           postdec2	equ	0xFDD
 13408                           fsr2h	equ	0xFDA
 13409                           fsr2l	equ	0xFD9
 13410                           status	equ	0xFD8
 13411                           
 13412 ;; *************** function i1_IRQ_TIMER_5 *****************
 13413 ;; Defined at:
 13414 ;;		line 409 in file "interrupt.c"
 13415 ;; Parameters:    Size  Location     Type
 13416 ;;		None
 13417 ;; Auto vars:     Size  Location     Type
 13418 ;;		None
 13419 ;; Return value:  Size  Location     Type
 13420 ;;                  1    wreg      void 
 13421 ;; Registers used:
 13422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/0
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13428 ;;      Params:         0       0       0       0
 13429 ;;      Locals:         0       0       0       0
 13430 ;;      Temps:          0       0       0       0
 13431 ;;      Totals:         0       0       0       0
 13432 ;;Total ram usage:        0 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    8
 13435 ;; This function calls:
 13436 ;;		i1_Alarme_On
 13437 ;;		i1_Buzzer_Etat
 13438 ;;		i1_Etat_Update
 13439 ;;		i1_TIMER5_Off
 13440 ;; This function is called by:
 13441 ;;		_LOW_PRIORITY_IRQ
 13442 ;; This function uses a non-reentrant model
 13443 ;;
 13444                           
 13445                           	psect	text80
 13446  001BDA                     __ptext80:
 13447                           	opt stack 0
 13448  001BDA                     i1_IRQ_TIMER_5:
 13449                           	opt stack 11
 13450                           
 13451                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 13452                           
 13453                           ;incstack = 0
 13454  001BDA  90A4               	bcf	4004,0,c	;volatile
 13455                           
 13456                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 13457  001BDC  0100               	movlb	0	; () banked
 13458  001BDE  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 13462  001BE0  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 13463  001BE2  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13464  001BE4  E115               	bnz	i1l6993
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 13468  001BE6  044D               	decf	_Mouvement_Startup,w,c
 13469  001BE8  E001               	bz	i1l6979
 13470                           
 13471                           ; BSR set to: 0
 13472                           ;interrupt.c: 418: nb_Pion += 1;
 13473  001BEA  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 13474  001BEC                     i1l6979:
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;interrupt.c: 419: }
 13478                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 13479  001BEC  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 13483  001BEE  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13484  001BF0  E003               	bz	i1l607
 13485                           
 13486                           ; BSR set to: 0
 13487  001BF2  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13488  001BF4  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 13489  001BF6  E202               	bc	i1l6985
 13490  001BF8                     i1l607:
 13491                           
 13492                           ; BSR set to: 0
 13493  001BF8  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 13494  001BFA  0012               	return	
 13495  001BFC                     i1l6985:
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 13499  001BFC  0E00               	movlw	0
 13500  001BFE  EC74  F013         	call	i1_Buzzer_Etat
 13501                           
 13502                           ;interrupt.c: 430: P4_busy = 0;
 13503  001C02  0100               	movlb	0	; () banked
 13504  001C04  6BAC               	clrf	_P4_busy& (0+255),b
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;interrupt.c: 431: TIMER5_Off();
 13508  001C06  EC92  F013         	call	i1_TIMER5_Off	;wreg free
 13509                           
 13510                           ;interrupt.c: 432: Etat_Update(0);
 13511  001C0A  0E00               	movlw	0
 13512  001C0C  EF4D  F012         	goto	i1_Etat_Update
 13513  001C10                     i1l6993:
 13514                           
 13515                           ; BSR set to: 0
 13516  001C10  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 13517  001C12  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13518  001C14  A4D8               	btfss	status,2,c
 13519  001C16  0012               	return	
 13520                           
 13521                           ; BSR set to: 0
 13522                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 13523  001C18  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 13524  001C1A  E10E               	bnz	i1l610
 13525                           
 13526                           ; BSR set to: 0
 13527  001C1C  B480               	btfsc	3968,2,c	;volatile
 13528  001C1E  D00C               	goto	i1l610
 13529                           
 13530                           ; BSR set to: 0
 13531  001C20  044D               	decf	_Mouvement_Startup,w,c
 13532  001C22  E10A               	bnz	i1l610
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;interrupt.c: 460: if (Option_Multitas==1){
 13536  001C24  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 13537  001C26  D004               	goto	i1l7005
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;interrupt.c: 461: Alarme_On(11);
 13541  001C28  0E0B               	movlw	11
 13542  001C2A  EC56  F013         	call	i1_Alarme_On
 13543                           
 13544                           ;interrupt.c: 462: }else{
 13545  001C2E  D008               	goto	i1l7009
 13546  001C30                     i1l7005:
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;interrupt.c: 463: Alarme_On(6);
 13550  001C30  0E06               	movlw	6
 13551  001C32  EC56  F013         	call	i1_Alarme_On
 13552  001C36  D004               	goto	i1l7009
 13553  001C38                     i1l610:
 13554                           
 13555                           ; BSR set to: 0
 13556                           ;interrupt.c: 467: P4_busy = 0;
 13557  001C38  6BAC               	clrf	_P4_busy& (0+255),b
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;interrupt.c: 468: Etat_Update(6);
 13561  001C3A  0E06               	movlw	6
 13562  001C3C  EC4D  F012         	call	i1_Etat_Update
 13563  001C40                     i1l7009:
 13564                           
 13565                           ;interrupt.c: 471: }
 13566                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 13567  001C40  0E00               	movlw	0
 13568  001C42  EC74  F013         	call	i1_Buzzer_Etat
 13569                           
 13570                           ;interrupt.c: 474: TIMER5_Off();
 13571  001C46  EF92  F013         	goto	i1_TIMER5_Off	;wreg free
 13572  001C4A                     __end_ofi1_IRQ_TIMER_5:
 13573                           	opt stack 0
 13574                           tblptru	equ	0xFF8
 13575                           tblptrh	equ	0xFF7
 13576                           tblptrl	equ	0xFF6
 13577                           tablat	equ	0xFF5
 13578                           prodh	equ	0xFF4
 13579                           prodl	equ	0xFF3
 13580                           intcon	equ	0xFF2
 13581                           intcon2	equ	0xFF1
 13582                           intcon3	equ	0xFF0
 13583                           postinc0	equ	0xFEE
 13584                           wreg	equ	0xFE8
 13585                           indf1	equ	0xFE7
 13586                           postdec1	equ	0xFE5
 13587                           fsr1h	equ	0xFE2
 13588                           fsr1l	equ	0xFE1
 13589                           bsr	equ	0xFE0
 13590                           indf2	equ	0xFDF
 13591                           postinc2	equ	0xFDE
 13592                           postdec2	equ	0xFDD
 13593                           fsr2h	equ	0xFDA
 13594                           fsr2l	equ	0xFD9
 13595                           status	equ	0xFD8
 13596                           
 13597 ;; *************** function i1_Alarme_On *****************
 13598 ;; Defined at:
 13599 ;;		line 18 in file "alarme.c"
 13600 ;; Parameters:    Size  Location     Type
 13601 ;;  alarme_new_v    1    wreg     unsigned char 
 13602 ;; Auto vars:     Size  Location     Type
 13603 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;                  1    wreg      void 
 13606 ;; Registers used:
 13607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13608 ;; Tracked objects:
 13609 ;;		On entry : 3F/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13613 ;;      Params:         0       0       0       0
 13614 ;;      Locals:         1       0       0       0
 13615 ;;      Temps:          0       0       0       0
 13616 ;;      Totals:         1       0       0       0
 13617 ;;Total ram usage:        1 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    7
 13620 ;; This function calls:
 13621 ;;		i1_Coupe_Moteur
 13622 ;;		i1_Etat_Update
 13623 ;; This function is called by:
 13624 ;;		i1_IRQ_TIMER_5
 13625 ;; This function uses a non-reentrant model
 13626 ;;
 13627                           
 13628                           	psect	text81
 13629  0026AC                     __ptext81:
 13630                           	opt stack 0
 13631  0026AC                     i1_Alarme_On:
 13632                           	opt stack 11
 13633                           
 13634                           ;incstack = 0
 13635                           ;i1Alarme_On@alarme_new_value stored from wreg
 13636  0026AC  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 13637                           
 13638                           ;alarme.c: 22: Etat_Update(1);
 13639  0026AE  0E01               	movlw	1
 13640  0026B0  EC4D  F012         	call	i1_Etat_Update
 13641                           
 13642                           ;alarme.c: 23: Alarme = alarme_new_value;
 13643  0026B4  C006  F0A9         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 13644                           
 13645                           ;alarme.c: 24: Coupe_Moteur();
 13646  0026B8  EFF6  F012         	goto	i1_Coupe_Moteur	;wreg free
 13647  0026BC                     __end_ofi1_Alarme_On:
 13648                           	opt stack 0
 13649                           tblptru	equ	0xFF8
 13650                           tblptrh	equ	0xFF7
 13651                           tblptrl	equ	0xFF6
 13652                           tablat	equ	0xFF5
 13653                           prodh	equ	0xFF4
 13654                           prodl	equ	0xFF3
 13655                           intcon	equ	0xFF2
 13656                           intcon2	equ	0xFF1
 13657                           intcon3	equ	0xFF0
 13658                           postinc0	equ	0xFEE
 13659                           wreg	equ	0xFE8
 13660                           indf1	equ	0xFE7
 13661                           postdec1	equ	0xFE5
 13662                           fsr1h	equ	0xFE2
 13663                           fsr1l	equ	0xFE1
 13664                           bsr	equ	0xFE0
 13665                           indf2	equ	0xFDF
 13666                           postinc2	equ	0xFDE
 13667                           postdec2	equ	0xFDD
 13668                           fsr2h	equ	0xFDA
 13669                           fsr2l	equ	0xFD9
 13670                           status	equ	0xFD8
 13671                           
 13672 ;; *************** function i1_Etat_Update *****************
 13673 ;; Defined at:
 13674 ;;		line 74 in file "action.c"
 13675 ;; Parameters:    Size  Location     Type
 13676 ;;  etat_new_val    1    wreg     unsigned char 
 13677 ;; Auto vars:     Size  Location     Type
 13678 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 13679 ;; Return value:  Size  Location     Type
 13680 ;;                  1    wreg      void 
 13681 ;; Registers used:
 13682 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13683 ;; Tracked objects:
 13684 ;;		On entry : 0/0
 13685 ;;		On exit  : 0/0
 13686 ;;		Unchanged: 0/0
 13687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13688 ;;      Params:         0       0       0       0
 13689 ;;      Locals:         1       0       0       0
 13690 ;;      Temps:          0       0       0       0
 13691 ;;      Totals:         1       0       0       0
 13692 ;;Total ram usage:        1 bytes
 13693 ;; Hardware stack levels used:    1
 13694 ;; Hardware stack levels required when called:    5
 13695 ;; This function calls:
 13696 ;;		Nothing
 13697 ;; This function is called by:
 13698 ;;		i1_IRQ_TIMER_5
 13699 ;;		i1_Alarme_On
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text82
 13704  00249A                     __ptext82:
 13705                           	opt stack 0
 13706  00249A                     i1_Etat_Update:
 13707                           	opt stack 13
 13708                           
 13709                           ;incstack = 0
 13710                           ;i1Etat_Update@etat_new_value stored from wreg
 13711  00249A  6E05               	movwf	i1Etat_Update@etat_new_value,c
 13712                           
 13713                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 13714  00249C  504C               	movf	_Etat_Precedent_Index,w,c
 13715  00249E  0F6A               	addlw	low _Etat_Log
 13716  0024A0  6ED9               	movwf	fsr2l,c
 13717  0024A2  6ADA               	clrf	fsr2h,c
 13718  0024A4  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 13719                           
 13720                           ;action.c: 76: Etat = etat_new_value;
 13721  0024A8  C005  F0AA         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 13722                           
 13723                           ;action.c: 77: Etat_Precedent_Index++;
 13724  0024AC  2A4C               	incf	_Etat_Precedent_Index,f,c
 13725                           
 13726                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 13727  0024AE  0E0A               	movlw	10
 13728  0024B0  184C               	xorwf	_Etat_Precedent_Index,w,c
 13729  0024B2  B4D8               	btfsc	status,2,c
 13730                           
 13731                           ;action.c: 79: Etat_Precedent_Index = 0;
 13732  0024B4  6A4C               	clrf	_Etat_Precedent_Index,c
 13733  0024B6  0012               	return		;funcret
 13734  0024B8                     __end_ofi1_Etat_Update:
 13735                           	opt stack 0
 13736                           tblptru	equ	0xFF8
 13737                           tblptrh	equ	0xFF7
 13738                           tblptrl	equ	0xFF6
 13739                           tablat	equ	0xFF5
 13740                           prodh	equ	0xFF4
 13741                           prodl	equ	0xFF3
 13742                           intcon	equ	0xFF2
 13743                           intcon2	equ	0xFF1
 13744                           intcon3	equ	0xFF0
 13745                           postinc0	equ	0xFEE
 13746                           wreg	equ	0xFE8
 13747                           indf1	equ	0xFE7
 13748                           postdec1	equ	0xFE5
 13749                           fsr1h	equ	0xFE2
 13750                           fsr1l	equ	0xFE1
 13751                           bsr	equ	0xFE0
 13752                           indf2	equ	0xFDF
 13753                           postinc2	equ	0xFDE
 13754                           postdec2	equ	0xFDD
 13755                           fsr2h	equ	0xFDA
 13756                           fsr2l	equ	0xFD9
 13757                           status	equ	0xFD8
 13758                           
 13759 ;; *************** function i1_Coupe_Moteur *****************
 13760 ;; Defined at:
 13761 ;;		line 309 in file "action.c"
 13762 ;; Parameters:    Size  Location     Type
 13763 ;;		None
 13764 ;; Auto vars:     Size  Location     Type
 13765 ;;		None
 13766 ;; Return value:  Size  Location     Type
 13767 ;;                  1    wreg      void 
 13768 ;; Registers used:
 13769 ;;		cstack
 13770 ;; Tracked objects:
 13771 ;;		On entry : 0/0
 13772 ;;		On exit  : 0/0
 13773 ;;		Unchanged: 0/0
 13774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13775 ;;      Params:         0       0       0       0
 13776 ;;      Locals:         0       0       0       0
 13777 ;;      Temps:          0       0       0       0
 13778 ;;      Totals:         0       0       0       0
 13779 ;;Total ram usage:        0 bytes
 13780 ;; Hardware stack levels used:    1
 13781 ;; Hardware stack levels required when called:    6
 13782 ;; This function calls:
 13783 ;;		i1_TIMER2_Off
 13784 ;; This function is called by:
 13785 ;;		i1_Alarme_On
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           	psect	text83
 13790  0025EC                     __ptext83:
 13791                           	opt stack 0
 13792  0025EC                     i1_Coupe_Moteur:
 13793                           	opt stack 11
 13794                           
 13795                           ;action.c: 310: TIMER2_Off();
 13796                           
 13797                           ;incstack = 0
 13798  0025EC  ECB0  F013         	call	i1_TIMER2_Off	;wreg free
 13799                           
 13800                           ;action.c: 322: LATCbits.LATC0 = 0;
 13801  0025F0  908B               	bcf	3979,0,c	;volatile
 13802                           
 13803                           ;action.c: 323: LATCbits.LATC1 = 0;
 13804  0025F2  928B               	bcf	3979,1,c	;volatile
 13805                           
 13806                           ;action.c: 324: OVDCOND = 0b00000000;
 13807  0025F4  6A6B               	clrf	3947,c	;volatile
 13808                           
 13809                           ;action.c: 325: LATD4 = 0;LATD5 = 0;
 13810  0025F6  988C               	bcf	3980,4,c	;volatile
 13811  0025F8  9A8C               	bcf	3980,5,c	;volatile
 13812                           
 13813                           ;action.c: 326: LATD6 = 0;LATD7 = 0;
 13814  0025FA  9C8C               	bcf	3980,6,c	;volatile
 13815  0025FC  9E8C               	bcf	3980,7,c	;volatile
 13816  0025FE  0012               	return		;funcret
 13817  002600                     __end_ofi1_Coupe_Moteur:
 13818                           	opt stack 0
 13819                           tblptru	equ	0xFF8
 13820                           tblptrh	equ	0xFF7
 13821                           tblptrl	equ	0xFF6
 13822                           tablat	equ	0xFF5
 13823                           prodh	equ	0xFF4
 13824                           prodl	equ	0xFF3
 13825                           intcon	equ	0xFF2
 13826                           intcon2	equ	0xFF1
 13827                           intcon3	equ	0xFF0
 13828                           postinc0	equ	0xFEE
 13829                           wreg	equ	0xFE8
 13830                           indf1	equ	0xFE7
 13831                           postdec1	equ	0xFE5
 13832                           fsr1h	equ	0xFE2
 13833                           fsr1l	equ	0xFE1
 13834                           bsr	equ	0xFE0
 13835                           indf2	equ	0xFDF
 13836                           postinc2	equ	0xFDE
 13837                           postdec2	equ	0xFDD
 13838                           fsr2h	equ	0xFDA
 13839                           fsr2l	equ	0xFD9
 13840                           status	equ	0xFD8
 13841                           
 13842 ;; *************** function i1_TIMER2_Off *****************
 13843 ;; Defined at:
 13844 ;;		line 165 in file "timer.c"
 13845 ;; Parameters:    Size  Location     Type
 13846 ;;		None
 13847 ;; Auto vars:     Size  Location     Type
 13848 ;;		None
 13849 ;; Return value:  Size  Location     Type
 13850 ;;                  1    wreg      void 
 13851 ;; Registers used:
 13852 ;;		None
 13853 ;; Tracked objects:
 13854 ;;		On entry : 0/0
 13855 ;;		On exit  : 0/0
 13856 ;;		Unchanged: 0/0
 13857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13858 ;;      Params:         0       0       0       0
 13859 ;;      Locals:         0       0       0       0
 13860 ;;      Temps:          0       0       0       0
 13861 ;;      Totals:         0       0       0       0
 13862 ;;Total ram usage:        0 bytes
 13863 ;; Hardware stack levels used:    1
 13864 ;; Hardware stack levels required when called:    5
 13865 ;; This function calls:
 13866 ;;		Nothing
 13867 ;; This function is called by:
 13868 ;;		i1_Coupe_Moteur
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872                           	psect	text84
 13873  002760                     __ptext84:
 13874                           	opt stack 0
 13875  002760                     i1_TIMER2_Off:
 13876                           	opt stack 11
 13877                           
 13878                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 13879                           
 13880                           ;incstack = 0
 13881  002760  929D               	bcf	3997,1,c	;volatile
 13882                           
 13883                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 13884  002762  929E               	bcf	3998,1,c	;volatile
 13885  002764  0012               	return		;funcret
 13886  002766                     __end_ofi1_TIMER2_Off:
 13887                           	opt stack 0
 13888                           tblptru	equ	0xFF8
 13889                           tblptrh	equ	0xFF7
 13890                           tblptrl	equ	0xFF6
 13891                           tablat	equ	0xFF5
 13892                           prodh	equ	0xFF4
 13893                           prodl	equ	0xFF3
 13894                           intcon	equ	0xFF2
 13895                           intcon2	equ	0xFF1
 13896                           intcon3	equ	0xFF0
 13897                           postinc0	equ	0xFEE
 13898                           wreg	equ	0xFE8
 13899                           indf1	equ	0xFE7
 13900                           postdec1	equ	0xFE5
 13901                           fsr1h	equ	0xFE2
 13902                           fsr1l	equ	0xFE1
 13903                           bsr	equ	0xFE0
 13904                           indf2	equ	0xFDF
 13905                           postinc2	equ	0xFDE
 13906                           postdec2	equ	0xFDD
 13907                           fsr2h	equ	0xFDA
 13908                           fsr2l	equ	0xFD9
 13909                           status	equ	0xFD8
 13910                           
 13911 ;; *************** function i1_IRQ_TIMER_0 *****************
 13912 ;; Defined at:
 13913 ;;		line 361 in file "interrupt.c"
 13914 ;; Parameters:    Size  Location     Type
 13915 ;;		None
 13916 ;; Auto vars:     Size  Location     Type
 13917 ;;		None
 13918 ;; Return value:  Size  Location     Type
 13919 ;;                  1    wreg      void 
 13920 ;; Registers used:
 13921 ;;		wreg, status,2, status,0, cstack
 13922 ;; Tracked objects:
 13923 ;;		On entry : 0/0
 13924 ;;		On exit  : 3F/0
 13925 ;;		Unchanged: 0/0
 13926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13927 ;;      Params:         0       0       0       0
 13928 ;;      Locals:         0       0       0       0
 13929 ;;      Temps:          0       0       0       0
 13930 ;;      Totals:         0       0       0       0
 13931 ;;Total ram usage:        0 bytes
 13932 ;; Hardware stack levels used:    1
 13933 ;; Hardware stack levels required when called:    6
 13934 ;; This function calls:
 13935 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 13936 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 13937 ;; This function is called by:
 13938 ;;		_LOW_PRIORITY_IRQ
 13939 ;; This function uses a non-reentrant model
 13940 ;;
 13941                           
 13942                           	psect	text85
 13943  001E92                     __ptext85:
 13944                           	opt stack 0
 13945  001E92                     i1_IRQ_TIMER_0:
 13946                           	opt stack 13
 13947                           
 13948                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 13949                           
 13950                           ;incstack = 0
 13951  001E92  94F2               	bcf	intcon,2,c	;volatile
 13952                           
 13953                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 13954  001E94  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 13955                           
 13956                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 13957  001E96  0100               	movlb	0	; () banked
 13958  001E98  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 13959                           
 13960                           ;interrupt.c: 366: delay_s_counter += 1;
 13961  001E9A  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 13965  001E9C  0E02               	movlw	2
 13966  001E9E  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 13967  001EA0  E01C               	bz	i1l6967
 13968  001EA2  0012               	return	
 13969  001EA4                     i1l6947:
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 13973  001EA4  EC25  F013         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13974                           
 13975                           ; BSR set to: 0
 13976                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13977  001EA8  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13978  001EAA  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13979  001EAC  E203               	bc	i1l588
 13980  001EAE                     i1l6951:
 13981                           
 13982                           ; BSR set to: 0
 13983                           ;interrupt.c: 381: consigne = Consigne_Max;
 13984  001EAE  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 13985                           
 13986                           ;interrupt.c: 382: } else {
 13987  001EB2  0012               	return	
 13988  001EB4                     i1l588:
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 13992  001EB4  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13993  001EB8  0012               	return	
 13994  001EBA                     i1l6953:
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 13998  001EBA  EC1C  F013         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 14002  001EBE  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 14003  001EC0  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 14004  001EC2  E3F5               	bnc	i1l6951
 14005                           
 14006                           ; BSR set to: 0
 14007                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 14008  001EC4  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 14009  001EC8  0012               	return	
 14010  001ECA                     i1l6959:
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 14014  001ECA  EC1C  F013         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 14015                           
 14016                           ; BSR set to: 0
 14017                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 14018  001ECE  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 14019  001ED0  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 14020  001ED2  E3ED               	bnc	i1l6951
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 14024  001ED4  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 14025  001ED8  0012               	return	
 14026  001EDA                     i1l6967:
 14027                           
 14028                           ; BSR set to: 0
 14029  001EDA  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 14030                           
 14031                           ; Switch size 1, requested type "speed"
 14032                           ; Number of cases is 3, Range of values is 1 to 3
 14033                           ; switch strategies available:
 14034                           ; Name         Instructions Cycles
 14035                           ; simple_byte           10     6 (average)
 14036                           ;	Chosen strategy is simple_byte
 14037  001EDC  0A01               	xorlw	1	; case 1
 14038  001EDE  E0E2               	bz	i1l6947
 14039  001EE0  0A03               	xorlw	3	; case 2
 14040  001EE2  E0EB               	bz	i1l6953
 14041  001EE4  0A01               	xorlw	1	; case 3
 14042  001EE6  E0F1               	bz	i1l6959
 14043                           
 14044                           ; BSR set to: 0
 14045  001EE8  0012               	return		;funcret
 14046  001EEA                     __end_ofi1_IRQ_TIMER_0:
 14047                           	opt stack 0
 14048                           tblptru	equ	0xFF8
 14049                           tblptrh	equ	0xFF7
 14050                           tblptrl	equ	0xFF6
 14051                           tablat	equ	0xFF5
 14052                           prodh	equ	0xFF4
 14053                           prodl	equ	0xFF3
 14054                           intcon	equ	0xFF2
 14055                           intcon2	equ	0xFF1
 14056                           intcon3	equ	0xFF0
 14057                           postinc0	equ	0xFEE
 14058                           wreg	equ	0xFE8
 14059                           indf1	equ	0xFE7
 14060                           postdec1	equ	0xFE5
 14061                           fsr1h	equ	0xFE2
 14062                           fsr1l	equ	0xFE1
 14063                           bsr	equ	0xFE0
 14064                           indf2	equ	0xFDF
 14065                           postinc2	equ	0xFDE
 14066                           postdec2	equ	0xFDD
 14067                           fsr2h	equ	0xFDA
 14068                           fsr2l	equ	0xFD9
 14069                           status	equ	0xFD8
 14070                           
 14071 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 14072 ;; Defined at:
 14073 ;;		line 868 in file "interrupt.c"
 14074 ;; Parameters:    Size  Location     Type
 14075 ;;		None
 14076 ;; Auto vars:     Size  Location     Type
 14077 ;;		None
 14078 ;; Return value:  Size  Location     Type
 14079 ;;                  1    wreg      void 
 14080 ;; Registers used:
 14081 ;;		wreg, status,2, status,0
 14082 ;; Tracked objects:
 14083 ;;		On entry : 0/0
 14084 ;;		On exit  : 3F/0
 14085 ;;		Unchanged: 0/0
 14086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14087 ;;      Params:         0       0       0       0
 14088 ;;      Locals:         0       0       0       0
 14089 ;;      Temps:          0       0       0       0
 14090 ;;      Totals:         0       0       0       0
 14091 ;;Total ram usage:        0 bytes
 14092 ;; Hardware stack levels used:    1
 14093 ;; Hardware stack levels required when called:    5
 14094 ;; This function calls:
 14095 ;;		Nothing
 14096 ;; This function is called by:
 14097 ;;		i1_IRQ_TIMER_0
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           	psect	text86
 14102  002638                     __ptext86:
 14103                           	opt stack 0
 14104  002638                     i1_Surveillance_Consommation_Moteur_2_Activer:
 14105                           	opt stack 13
 14106                           
 14107                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;incstack = 0
 14111  002638  0100               	movlb	0	; () banked
 14112  00263A  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 14113  00263C  B4D8               	btfsc	status,2,c
 14114  00263E  0012               	return	
 14115                           
 14116                           ; BSR set to: 0
 14117                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 14118  002640  0E01               	movlw	1
 14119  002642  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 14120                           
 14121                           ; BSR set to: 0
 14122                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 14123  002644  92F0               	bcf	intcon3,1,c	;volatile
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 14127  002646  88F0               	bsf	intcon3,4,c	;volatile
 14128                           
 14129                           ; BSR set to: 0
 14130  002648  0C01               	retlw	1	;funcret
 14131  00264A                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 14132                           	opt stack 0
 14133                           tblptru	equ	0xFF8
 14134                           tblptrh	equ	0xFF7
 14135                           tblptrl	equ	0xFF6
 14136                           tablat	equ	0xFF5
 14137                           prodh	equ	0xFF4
 14138                           prodl	equ	0xFF3
 14139                           intcon	equ	0xFF2
 14140                           intcon2	equ	0xFF1
 14141                           intcon3	equ	0xFF0
 14142                           postinc0	equ	0xFEE
 14143                           wreg	equ	0xFE8
 14144                           indf1	equ	0xFE7
 14145                           postdec1	equ	0xFE5
 14146                           fsr1h	equ	0xFE2
 14147                           fsr1l	equ	0xFE1
 14148                           bsr	equ	0xFE0
 14149                           indf2	equ	0xFDF
 14150                           postinc2	equ	0xFDE
 14151                           postdec2	equ	0xFDD
 14152                           fsr2h	equ	0xFDA
 14153                           fsr2l	equ	0xFD9
 14154                           status	equ	0xFD8
 14155                           
 14156 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 14157 ;; Defined at:
 14158 ;;		line 852 in file "interrupt.c"
 14159 ;; Parameters:    Size  Location     Type
 14160 ;;		None
 14161 ;; Auto vars:     Size  Location     Type
 14162 ;;		None
 14163 ;; Return value:  Size  Location     Type
 14164 ;;                  1    wreg      void 
 14165 ;; Registers used:
 14166 ;;		wreg, status,2, status,0
 14167 ;; Tracked objects:
 14168 ;;		On entry : 0/0
 14169 ;;		On exit  : 3F/0
 14170 ;;		Unchanged: 0/0
 14171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14172 ;;      Params:         0       0       0       0
 14173 ;;      Locals:         0       0       0       0
 14174 ;;      Temps:          0       0       0       0
 14175 ;;      Totals:         0       0       0       0
 14176 ;;Total ram usage:        0 bytes
 14177 ;; Hardware stack levels used:    1
 14178 ;; Hardware stack levels required when called:    5
 14179 ;; This function calls:
 14180 ;;		Nothing
 14181 ;; This function is called by:
 14182 ;;		i1_IRQ_TIMER_0
 14183 ;; This function uses a non-reentrant model
 14184 ;;
 14185                           
 14186                           	psect	text87
 14187  00264A                     __ptext87:
 14188                           	opt stack 0
 14189  00264A                     i1_Surveillance_Consommation_Moteur_1_Activer:
 14190                           	opt stack 13
 14191                           
 14192                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;incstack = 0
 14196  00264A  0100               	movlb	0	; () banked
 14197  00264C  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 14198  00264E  B4D8               	btfsc	status,2,c
 14199  002650  0012               	return	
 14200                           
 14201                           ; BSR set to: 0
 14202                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 14203  002652  0E01               	movlw	1
 14204  002654  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 14208  002656  90F0               	bcf	intcon3,0,c	;volatile
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 14212  002658  86F0               	bsf	intcon3,3,c	;volatile
 14213                           
 14214                           ; BSR set to: 0
 14215  00265A  0C01               	retlw	1	;funcret
 14216  00265C                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 14217                           	opt stack 0
 14218                           tblptru	equ	0xFF8
 14219                           tblptrh	equ	0xFF7
 14220                           tblptrl	equ	0xFF6
 14221                           tablat	equ	0xFF5
 14222                           prodh	equ	0xFF4
 14223                           prodl	equ	0xFF3
 14224                           intcon	equ	0xFF2
 14225                           intcon2	equ	0xFF1
 14226                           intcon3	equ	0xFF0
 14227                           postinc0	equ	0xFEE
 14228                           wreg	equ	0xFE8
 14229                           indf1	equ	0xFE7
 14230                           postdec1	equ	0xFE5
 14231                           fsr1h	equ	0xFE2
 14232                           fsr1l	equ	0xFE1
 14233                           bsr	equ	0xFE0
 14234                           indf2	equ	0xFDF
 14235                           postinc2	equ	0xFDE
 14236                           postdec2	equ	0xFDD
 14237                           fsr2h	equ	0xFDA
 14238                           fsr2l	equ	0xFD9
 14239                           status	equ	0xFD8
 14240                           
 14241 ;; *************** function i1_IRQ_PWM *****************
 14242 ;; Defined at:
 14243 ;;		line 481 in file "interrupt.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;		None
 14246 ;; Auto vars:     Size  Location     Type
 14247 ;;		None
 14248 ;; Return value:  Size  Location     Type
 14249 ;;                  1    wreg      void 
 14250 ;; Registers used:
 14251 ;;		None
 14252 ;; Tracked objects:
 14253 ;;		On entry : 0/0
 14254 ;;		On exit  : 0/0
 14255 ;;		Unchanged: 0/0
 14256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14257 ;;      Params:         0       0       0       0
 14258 ;;      Locals:         0       0       0       0
 14259 ;;      Temps:          0       0       0       0
 14260 ;;      Totals:         0       0       0       0
 14261 ;;Total ram usage:        0 bytes
 14262 ;; Hardware stack levels used:    1
 14263 ;; Hardware stack levels required when called:    5
 14264 ;; This function calls:
 14265 ;;		Nothing
 14266 ;; This function is called by:
 14267 ;;		_LOW_PRIORITY_IRQ
 14268 ;; This function uses a non-reentrant model
 14269 ;;
 14270                           
 14271                           	psect	text88
 14272  002782                     __ptext88:
 14273                           	opt stack 0
 14274  002782                     i1_IRQ_PWM:
 14275                           	opt stack 14
 14276                           
 14277                           ;interrupt.c: 483: PTIF = 0;
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;incstack = 0
 14281  002782  98A4               	bcf	4004,4,c	;volatile
 14282  002784  0012               	return		;funcret
 14283  002786                     __end_ofi1_IRQ_PWM:
 14284                           	opt stack 0
 14285                           tblptru	equ	0xFF8
 14286                           tblptrh	equ	0xFF7
 14287                           tblptrl	equ	0xFF6
 14288                           tablat	equ	0xFF5
 14289                           prodh	equ	0xFF4
 14290                           prodl	equ	0xFF3
 14291                           intcon	equ	0xFF2
 14292                           intcon2	equ	0xFF1
 14293                           intcon3	equ	0xFF0
 14294                           postinc0	equ	0xFEE
 14295                           wreg	equ	0xFE8
 14296                           indf1	equ	0xFE7
 14297                           postdec1	equ	0xFE5
 14298                           fsr1h	equ	0xFE2
 14299                           fsr1l	equ	0xFE1
 14300                           bsr	equ	0xFE0
 14301                           indf2	equ	0xFDF
 14302                           postinc2	equ	0xFDE
 14303                           postdec2	equ	0xFDD
 14304                           fsr2h	equ	0xFDA
 14305                           fsr2l	equ	0xFD9
 14306                           status	equ	0xFD8
 14307                           
 14308 ;; *************** function i1_IRQ_ADC *****************
 14309 ;; Defined at:
 14310 ;;		line 486 in file "interrupt.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;		None
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;		None
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		wreg, status,2, status,0
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 3F/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14324 ;;      Params:         0       0       0       0
 14325 ;;      Locals:         0       0       0       0
 14326 ;;      Temps:          3       0       0       0
 14327 ;;      Totals:         3       0       0       0
 14328 ;;Total ram usage:        3 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    5
 14331 ;; This function calls:
 14332 ;;		Nothing
 14333 ;; This function is called by:
 14334 ;;		_LOW_PRIORITY_IRQ
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text89
 14339  000FBA                     __ptext89:
 14340                           	opt stack 0
 14341  000FBA                     i1_IRQ_ADC:
 14342                           	opt stack 14
 14343                           
 14344                           ;interrupt.c: 487: switch (moteur_indice) {
 14345                           
 14346                           ;incstack = 0
 14347  000FBA  D0C7               	goto	i1l7069
 14348  000FBC                     i1l622:
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 14352  000FBC  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 14353                           
 14354                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 14355  000FC0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14356                           
 14357                           ;interrupt.c: 492: ADIF = 0;
 14358  000FC2  9C9E               	bcf	3998,6,c	;volatile
 14359                           
 14360                           ; BSR set to: 0
 14361                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 14362  000FC4  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 14363  000FC6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14364  000FC8  6F84               	movwf	_erreur& (0+255),b	;volatile
 14365  000FCA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14366  000FCC  A0D8               	btfss	status,0,c
 14367  000FCE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14368                           
 14369                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 14370  000FD0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14371  000FD2  D008               	goto	i1l7019
 14372  000FD4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14373  000FD6  E103               	bnz	i1u505_20
 14374  000FD8  0E0A               	movlw	10
 14375  000FDA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14376  000FDC  E303               	bnc	i1l7019
 14377  000FDE                     i1u505_20:
 14378                           
 14379                           ; BSR set to: 0
 14380  000FDE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14381  000FE0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14382  000FE2  D006               	goto	i1l624
 14383  000FE4                     i1l7019:
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 14387  000FE4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14388  000FE6  D004               	goto	i1l624
 14389                           
 14390                           ; BSR set to: 0
 14391  000FE8  5184               	movf	_erreur& (0+255),w,b	;volatile
 14392  000FEA  2786               	addwf	_duty& (0+255),f,b	;volatile
 14393  000FEC  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14394  000FEE  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 14395  000FF0                     i1l624:
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 14399  000FF0  507B               	movf	3963,w,c	;volatile
 14400  000FF2  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14401  000FF4  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14402  000FF6  5186               	movf	_duty& (0+255),w,b	;volatile
 14403  000FF8  5C05               	subwf	??i1_IRQ_ADC,w,c
 14404  000FFA  5006               	movf	??i1_IRQ_ADC+1,w,c
 14405  000FFC  0A80               	xorlw	128
 14406  000FFE  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14407  001000  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14408  001002  0A80               	xorlw	128
 14409  001004  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14410  001006  E203               	bc	i1l7025
 14411                           
 14412                           ; BSR set to: 0
 14413  001008  CF7B F086          	movff	3963,_duty	;volatile
 14414  00100C  D003               	goto	L5
 14415  00100E                     i1l7025:
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 14419  00100E  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14420  001010  D002               	goto	i1l7029
 14421                           
 14422                           ; BSR set to: 0
 14423  001012  6B86               	clrf	_duty& (0+255),b	;volatile
 14424  001014                     L5:
 14425  001014  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14426  001016                     i1l7029:
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 14430  001016  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14431  001018  46E8               	rlncf	wreg,f,c
 14432  00101A  0BFC               	andlw	252
 14433  00101C  6E79               	movwf	3961,c	;volatile
 14434                           
 14435                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 14436  00101E  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14437  001022  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14438  001026  90D8               	bcf	status,0,c
 14439  001028  3605               	rlcf	??i1_IRQ_ADC,f,c
 14440  00102A  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14441  00102C  90D8               	bcf	status,0,c
 14442  00102E  3605               	rlcf	??i1_IRQ_ADC,f,c
 14443  001030  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14444  001032  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14445  001036  6A06               	clrf	??i1_IRQ_ADC+1,c
 14446  001038  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14447  00103A  6806               	setf	??i1_IRQ_ADC+1,c
 14448  00103C  5005               	movf	??i1_IRQ_ADC,w,c
 14449  00103E  6E78               	movwf	3960,c	;volatile
 14450                           
 14451                           ;interrupt.c: 508: break;
 14452  001040  0012               	return	
 14453  001042                     i1l630:
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 14457  001042  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14458                           
 14459                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 14460  001046  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14461                           
 14462                           ;interrupt.c: 518: ADIF = 0;
 14463  001048  9C9E               	bcf	3998,6,c	;volatile
 14464                           
 14465                           ; BSR set to: 0
 14466                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 14467  00104A  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14468  00104C  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14469  00104E  6F84               	movwf	_erreur& (0+255),b	;volatile
 14470  001050  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14471  001052  A0D8               	btfss	status,0,c
 14472  001054  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14473                           
 14474                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 14475  001056  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14476  001058  D008               	goto	i1l7035
 14477  00105A  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14478  00105C  E103               	bnz	i1u509_20
 14479  00105E  0E0A               	movlw	10
 14480  001060  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14481  001062  E303               	bnc	i1l7035
 14482  001064                     i1u509_20:
 14483                           
 14484                           ; BSR set to: 0
 14485  001064  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14486  001066  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14487  001068  D005               	goto	i1l7039
 14488  00106A                     i1l7035:
 14489                           
 14490                           ; BSR set to: 0
 14491                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 14492  00106A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14493  00106C  D003               	goto	i1l7039
 14494                           
 14495                           ; BSR set to: 0
 14496  00106E  0786               	decf	_duty& (0+255),f,b	;volatile
 14497  001070  A0D8               	btfss	status,0,c
 14498  001072  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14499  001074                     i1l7039:
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 14503  001074  507B               	movf	3963,w,c	;volatile
 14504  001076  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14505  001078  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14506  00107A  5186               	movf	_duty& (0+255),w,b	;volatile
 14507  00107C  5C05               	subwf	??i1_IRQ_ADC,w,c
 14508  00107E  5006               	movf	??i1_IRQ_ADC+1,w,c
 14509  001080  0A80               	xorlw	128
 14510  001082  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14511  001084  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14512  001086  0A80               	xorlw	128
 14513  001088  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14514  00108A  E203               	bc	i1l7043
 14515                           
 14516                           ; BSR set to: 0
 14517  00108C  CF7B F086          	movff	3963,_duty	;volatile
 14518  001090  D003               	goto	L6
 14519  001092                     i1l7043:
 14520                           
 14521                           ; BSR set to: 0
 14522                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 14523  001092  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14524  001094  D002               	goto	i1l7047
 14525                           
 14526                           ; BSR set to: 0
 14527  001096  6B86               	clrf	_duty& (0+255),b	;volatile
 14528  001098                     L6:
 14529  001098  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14530  00109A                     i1l7047:
 14531                           
 14532                           ; BSR set to: 0
 14533                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 14534  00109A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14535  00109C  46E8               	rlncf	wreg,f,c
 14536  00109E  0BFC               	andlw	252
 14537  0010A0  6E77               	movwf	3959,c	;volatile
 14538                           
 14539                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 14540  0010A2  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14541  0010A6  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14542  0010AA  90D8               	bcf	status,0,c
 14543  0010AC  3605               	rlcf	??i1_IRQ_ADC,f,c
 14544  0010AE  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14545  0010B0  90D8               	bcf	status,0,c
 14546  0010B2  3605               	rlcf	??i1_IRQ_ADC,f,c
 14547  0010B4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14548  0010B6  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14549  0010BA  6A06               	clrf	??i1_IRQ_ADC+1,c
 14550  0010BC  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14551  0010BE  6806               	setf	??i1_IRQ_ADC+1,c
 14552  0010C0  5005               	movf	??i1_IRQ_ADC,w,c
 14553  0010C2  6E76               	movwf	3958,c	;volatile
 14554                           
 14555                           ;interrupt.c: 532: break;
 14556  0010C4  0012               	return	
 14557  0010C6                     i1l637:
 14558                           
 14559                           ; BSR set to: 0
 14560                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 14561  0010C6  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14562                           
 14563                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 14564  0010CA  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14565                           
 14566                           ;interrupt.c: 539: ADIF = 0;
 14567  0010CC  9C9E               	bcf	3998,6,c	;volatile
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 14571  0010CE  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14572  0010D0  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14573  0010D2  6F84               	movwf	_erreur& (0+255),b	;volatile
 14574  0010D4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14575  0010D6  A0D8               	btfss	status,0,c
 14576  0010D8  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14577                           
 14578                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 14579  0010DA  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14580  0010DC  D008               	goto	i1l7053
 14581  0010DE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14582  0010E0  E103               	bnz	i1u513_20
 14583  0010E2  0E0A               	movlw	10
 14584  0010E4  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14585  0010E6  E303               	bnc	i1l7053
 14586  0010E8                     i1u513_20:
 14587                           
 14588                           ; BSR set to: 0
 14589  0010E8  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14590  0010EA  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14591  0010EC  D005               	goto	i1l7057
 14592  0010EE                     i1l7053:
 14593                           
 14594                           ; BSR set to: 0
 14595                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 14596  0010EE  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14597  0010F0  D003               	goto	i1l7057
 14598                           
 14599                           ; BSR set to: 0
 14600  0010F2  0786               	decf	_duty& (0+255),f,b	;volatile
 14601  0010F4  A0D8               	btfss	status,0,c
 14602  0010F6  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14603  0010F8                     i1l7057:
 14604                           
 14605                           ; BSR set to: 0
 14606                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 14607  0010F8  507B               	movf	3963,w,c	;volatile
 14608  0010FA  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14609  0010FC  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14610  0010FE  5186               	movf	_duty& (0+255),w,b	;volatile
 14611  001100  5C05               	subwf	??i1_IRQ_ADC,w,c
 14612  001102  5006               	movf	??i1_IRQ_ADC+1,w,c
 14613  001104  0A80               	xorlw	128
 14614  001106  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14615  001108  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14616  00110A  0A80               	xorlw	128
 14617  00110C  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14618  00110E  E203               	bc	i1l7061
 14619                           
 14620                           ; BSR set to: 0
 14621  001110  CF7B F086          	movff	3963,_duty	;volatile
 14622  001114  D003               	goto	L7
 14623  001116                     i1l7061:
 14624                           
 14625                           ; BSR set to: 0
 14626                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 14627  001116  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14628  001118  D002               	goto	i1l7065
 14629                           
 14630                           ; BSR set to: 0
 14631  00111A  6B86               	clrf	_duty& (0+255),b	;volatile
 14632  00111C                     L7:
 14633  00111C  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14634  00111E                     i1l7065:
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 14638  00111E  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14639  001120  46E8               	rlncf	wreg,f,c
 14640  001122  0BFC               	andlw	252
 14641  001124  6E77               	movwf	3959,c	;volatile
 14642                           
 14643                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 14644  001126  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14645  00112A  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14646  00112E  90D8               	bcf	status,0,c
 14647  001130  3605               	rlcf	??i1_IRQ_ADC,f,c
 14648  001132  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14649  001134  90D8               	bcf	status,0,c
 14650  001136  3605               	rlcf	??i1_IRQ_ADC,f,c
 14651  001138  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14652  00113A  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14653  00113E  6A06               	clrf	??i1_IRQ_ADC+1,c
 14654  001140  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14655  001142  6806               	setf	??i1_IRQ_ADC+1,c
 14656  001144  5005               	movf	??i1_IRQ_ADC,w,c
 14657  001146  6E76               	movwf	3958,c	;volatile
 14658                           
 14659                           ;interrupt.c: 553: break;
 14660  001148  0012               	return	
 14661  00114A                     i1l7069:
 14662  00114A  0100               	movlb	0	; () banked
 14663  00114C  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 14664                           
 14665                           ; Switch size 1, requested type "speed"
 14666                           ; Number of cases is 3, Range of values is 1 to 3
 14667                           ; switch strategies available:
 14668                           ; Name         Instructions Cycles
 14669                           ; simple_byte           10     6 (average)
 14670                           ;	Chosen strategy is simple_byte
 14671  00114E  0A01               	xorlw	1	; case 1
 14672  001150  E101 D734          	bz	i1l622
 14673  001154  0A03               	xorlw	3	; case 2
 14674  001156  E101 D774          	bz	i1l630
 14675  00115A  0A01               	xorlw	1	; case 3
 14676  00115C  E0B4               	bz	i1l637
 14677                           
 14678                           ; BSR set to: 0
 14679  00115E  0012               	return		;funcret
 14680  001160                     __end_ofi1_IRQ_ADC:
 14681                           	opt stack 0
 14682                           tblptru	equ	0xFF8
 14683                           tblptrh	equ	0xFF7
 14684                           tblptrl	equ	0xFF6
 14685                           tablat	equ	0xFF5
 14686                           prodh	equ	0xFF4
 14687                           prodl	equ	0xFF3
 14688                           intcon	equ	0xFF2
 14689                           intcon2	equ	0xFF1
 14690                           intcon3	equ	0xFF0
 14691                           postinc0	equ	0xFEE
 14692                           wreg	equ	0xFE8
 14693                           indf1	equ	0xFE7
 14694                           postdec1	equ	0xFE5
 14695                           fsr1h	equ	0xFE2
 14696                           fsr1l	equ	0xFE1
 14697                           bsr	equ	0xFE0
 14698                           indf2	equ	0xFDF
 14699                           postinc2	equ	0xFDE
 14700                           postdec2	equ	0xFDD
 14701                           fsr2h	equ	0xFDA
 14702                           fsr2l	equ	0xFD9
 14703                           status	equ	0xFD8
 14704                           
 14705 ;; *************** function _SPI_ISR *****************
 14706 ;; Defined at:
 14707 ;;		line 169 in file "spi.c"
 14708 ;; Parameters:    Size  Location     Type
 14709 ;;		None
 14710 ;; Auto vars:     Size  Location     Type
 14711 ;;  i               1    6[COMRAM] unsigned char 
 14712 ;; Return value:  Size  Location     Type
 14713 ;;                  1    wreg      void 
 14714 ;; Registers used:
 14715 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14716 ;; Tracked objects:
 14717 ;;		On entry : 0/0
 14718 ;;		On exit  : 0/0
 14719 ;;		Unchanged: 0/0
 14720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14721 ;;      Params:         0       0       0       0
 14722 ;;      Locals:         1       0       0       0
 14723 ;;      Temps:          2       0       0       0
 14724 ;;      Totals:         3       0       0       0
 14725 ;;Total ram usage:        3 bytes
 14726 ;; Hardware stack levels used:    1
 14727 ;; Hardware stack levels required when called:    5
 14728 ;; This function calls:
 14729 ;;		Nothing
 14730 ;; This function is called by:
 14731 ;;		_LOW_PRIORITY_IRQ
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           	psect	text90
 14736  00129A                     __ptext90:
 14737                           	opt stack 0
 14738  00129A                     _SPI_ISR:
 14739                           	opt stack 14
 14740                           
 14741                           ;spi.c: 171: unsigned char i;
 14742                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 14743                           
 14744                           ; BSR set to: 0
 14745                           ;incstack = 0
 14746  00129A  969E               	bcf	3998,3,c	;volatile
 14747                           
 14748                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 14749  00129C  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 14750                           
 14751                           ;spi.c: 180: switch(SPI_MODE){
 14752  0012A0  D075               	goto	i1l6885
 14753  0012A2                     i1l6849:
 14754                           
 14755                           ;spi.c: 196: if (i!=0x0D){
 14756  0012A2  0E0D               	movlw	13
 14757  0012A4  1807               	xorwf	SPI_ISR@i,w,c
 14758  0012A6  E012               	bz	i1l1664
 14759                           
 14760                           ;spi.c: 197: spiTxIndex++;
 14761  0012A8  2A44               	incf	_spiTxIndex,f,c	;volatile
 14762                           
 14763                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 14764  0012AA  0E40               	movlw	low _spiTxBuffer
 14765  0012AC  2444               	addwf	_spiTxIndex,w,c	;volatile
 14766  0012AE  6ED9               	movwf	fsr2l,c
 14767  0012B0  6ADA               	clrf	fsr2h,c
 14768  0012B2  0E01               	movlw	high _spiTxBuffer
 14769  0012B4  22DA               	addwfc	fsr2h,f,c
 14770  0012B6  50DF               	movf	indf2,w,c
 14771  0012B8  E009               	bz	i1l1664
 14772                           
 14773                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 14774  0012BA  0E40               	movlw	low _spiTxBuffer
 14775  0012BC  2444               	addwf	_spiTxIndex,w,c	;volatile
 14776  0012BE  6ED9               	movwf	fsr2l,c
 14777  0012C0  6ADA               	clrf	fsr2h,c
 14778  0012C2  0E01               	movlw	high _spiTxBuffer
 14779  0012C4  22DA               	addwfc	fsr2h,f,c
 14780  0012C6  50DF               	movf	indf2,w,c
 14781  0012C8  6EC9               	movwf	4041,c	;volatile
 14782                           
 14783                           ;spi.c: 201: } else {
 14784  0012CA  0012               	return	
 14785  0012CC                     i1l1664:
 14786                           
 14787                           ;spi.c: 202: SPI_MODE = 0;
 14788  0012CC  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14789  0012CE  0012               	return	
 14790  0012D0                     i1l6857:
 14791                           
 14792                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 14793  0012D0  0E00               	movlw	low _spiRxBuffer
 14794  0012D2  2443               	addwf	_spiRxIndex,w,c	;volatile
 14795  0012D4  6ED9               	movwf	fsr2l,c
 14796  0012D6  6ADA               	clrf	fsr2h,c
 14797  0012D8  0E02               	movlw	high _spiRxBuffer
 14798  0012DA  22DA               	addwfc	fsr2h,f,c
 14799  0012DC  C007  FFDF         	movff	SPI_ISR@i,indf2
 14800                           
 14801                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 14802  0012E0  0E00               	movlw	low _spiRxBuffer
 14803  0012E2  2443               	addwf	_spiRxIndex,w,c	;volatile
 14804  0012E4  6ED9               	movwf	fsr2l,c
 14805  0012E6  6ADA               	clrf	fsr2h,c
 14806  0012E8  0E02               	movlw	high _spiRxBuffer
 14807  0012EA  22DA               	addwfc	fsr2h,f,c
 14808  0012EC  50DF               	movf	indf2,w,c
 14809  0012EE  0E01               	movlw	1
 14810  0012F0  A4D8               	btfss	status,2,c
 14811  0012F2  0E00               	movlw	0
 14812  0012F4  6E05               	movwf	??_SPI_ISR& (0+255),c
 14813  0012F6  0E00               	movlw	low _spiRxBuffer
 14814  0012F8  2443               	addwf	_spiRxIndex,w,c	;volatile
 14815  0012FA  6ED9               	movwf	fsr2l,c
 14816  0012FC  6ADA               	clrf	fsr2h,c
 14817  0012FE  0E02               	movlw	high _spiRxBuffer
 14818  001300  22DA               	addwfc	fsr2h,f,c
 14819  001302  0E0D               	movlw	13
 14820  001304  18DE               	xorwf	postinc2,w,c
 14821  001306  0E01               	movlw	1
 14822  001308  A4D8               	btfss	status,2,c
 14823  00130A  0E00               	movlw	0
 14824  00130C  1005               	iorwf	??_SPI_ISR,w,c
 14825  00130E  A0E8               	btfss	wreg,0,c
 14826  001310  D031               	goto	i1l6881
 14827                           
 14828                           ;spi.c: 223: if (spiRxIndex != 0) {
 14829  001312  5043               	movf	_spiRxIndex,w,c	;volatile
 14830  001314  E015               	bz	i1l6869
 14831                           
 14832                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 14833  001316  6A07               	clrf	SPI_ISR@i,c
 14834  001318  D00F               	goto	i1l6867
 14835  00131A                     i1l6863:
 14836                           
 14837                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 14838  00131A  0E00               	movlw	low _spiRxBuffer
 14839  00131C  2407               	addwf	SPI_ISR@i,w,c
 14840  00131E  6ED9               	movwf	fsr2l,c
 14841  001320  6ADA               	clrf	fsr2h,c
 14842  001322  0E02               	movlw	high _spiRxBuffer
 14843  001324  22DA               	addwfc	fsr2h,f,c
 14844  001326  0E00               	movlw	low _SPI_RX_TEXT
 14845  001328  2407               	addwf	SPI_ISR@i,w,c
 14846  00132A  6EE1               	movwf	fsr1l,c
 14847  00132C  6AE2               	clrf	fsr1h,c
 14848  00132E  0E01               	movlw	high _SPI_RX_TEXT
 14849  001330  22E2               	addwfc	fsr1h,f,c
 14850  001332  CFDF FFE7          	movff	indf2,indf1
 14851  001336  2A07               	incf	SPI_ISR@i,f,c
 14852  001338                     i1l6867:
 14853  001338  5043               	movf	_spiRxIndex,w,c	;volatile
 14854  00133A  5C07               	subwf	SPI_ISR@i,w,c
 14855  00133C  E3EE               	bnc	i1l6863
 14856                           
 14857                           ;spi.c: 226: }
 14858                           ;spi.c: 227: SPI_full = 1;
 14859  00133E  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14860  001340                     i1l6869:
 14861                           
 14862                           ;spi.c: 228: }
 14863                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 14864  001340  0E00               	movlw	low _SPI_RX_TEXT
 14865  001342  2443               	addwf	_spiRxIndex,w,c	;volatile
 14866  001344  6ED9               	movwf	fsr2l,c
 14867  001346  6ADA               	clrf	fsr2h,c
 14868  001348  0E01               	movlw	high _SPI_RX_TEXT
 14869  00134A  22DA               	addwfc	fsr2h,f,c
 14870  00134C  0E00               	movlw	0
 14871  00134E  6ADF               	clrf	indf2,c
 14872                           
 14873                           ;spi.c: 230: spiRxIndex = 0;
 14874  001350  6A43               	clrf	_spiRxIndex,c	;volatile
 14875                           
 14876                           ;spi.c: 231: } else {
 14877  001352  0012               	return	
 14878  001354                     i1l6873:
 14879                           
 14880                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 14881  001354  5043               	movf	_spiRxIndex,w,c	;volatile
 14882  001356  6E05               	movwf	??_SPI_ISR& (0+255),c
 14883  001358  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14884  00135A  2A05               	incf	??_SPI_ISR,f,c
 14885  00135C  0E00               	movlw	0
 14886  00135E  2206               	addwfc	??_SPI_ISR+1,f,c
 14887  001360  0E40               	movlw	64
 14888  001362  1805               	xorwf	??_SPI_ISR,w,c
 14889  001364  1006               	iorwf	??_SPI_ISR+1,w,c
 14890  001366  E104               	bnz	i1l6877
 14891                           
 14892                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 14893  001368  0101               	movlb	1	; () banked
 14894  00136A  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 14895                           
 14896                           ;spi.c: 236: spiRxIndex = 0;
 14897  00136C  6A43               	clrf	_spiRxIndex,c	;volatile
 14898                           
 14899                           ;spi.c: 239: } else {
 14900  00136E  0012               	return	
 14901  001370                     i1l6877:
 14902                           
 14903                           ;spi.c: 240: spiRxIndex++;
 14904  001370  2A43               	incf	_spiRxIndex,f,c	;volatile
 14905  001372  0012               	return	
 14906  001374                     i1l6881:
 14907  001374  0E01               	movlw	1
 14908  001376  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14909  001378  0E00               	movlw	0
 14910  00137A  6E05               	movwf	??_SPI_ISR& (0+255),c
 14911  00137C  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14912                           
 14913                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14914                           ; Switch size 1, requested type "speed"
 14915                           ; Number of cases is 1, Range of values is 0 to 0
 14916                           ; switch strategies available:
 14917                           ; Name         Instructions Cycles
 14918                           ; simple_byte            4     3 (average)
 14919                           ;	Chosen strategy is simple_byte
 14920  00137E  5006               	movf	??_SPI_ISR+1,w,c
 14921  001380  A4D8               	btfss	status,2,c
 14922  001382  0012               	return	
 14923                           
 14924                           ; Switch size 1, requested type "speed"
 14925                           ; Number of cases is 2, Range of values is 0 to 1
 14926                           ; switch strategies available:
 14927                           ; Name         Instructions Cycles
 14928                           ; simple_byte            7     4 (average)
 14929                           ;	Chosen strategy is simple_byte
 14930  001384  5005               	movf	??_SPI_ISR,w,c
 14931  001386  E0E6               	bz	i1l6873
 14932  001388  0A01               	xorlw	1	; case 1
 14933  00138A  0012               	return	
 14934  00138C                     i1l6885:
 14935  00138C  0E01               	movlw	1
 14936  00138E  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14937  001390  0E00               	movlw	0
 14938  001392  6E05               	movwf	??_SPI_ISR& (0+255),c
 14939  001394  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14940                           
 14941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14942                           ; Switch size 1, requested type "speed"
 14943                           ; Number of cases is 1, Range of values is 0 to 0
 14944                           ; switch strategies available:
 14945                           ; Name         Instructions Cycles
 14946                           ; simple_byte            4     3 (average)
 14947                           ;	Chosen strategy is simple_byte
 14948  001396  5006               	movf	??_SPI_ISR+1,w,c
 14949  001398  A4D8               	btfss	status,2,c
 14950  00139A  0012               	return	
 14951                           
 14952                           ; Switch size 1, requested type "speed"
 14953                           ; Number of cases is 2, Range of values is 0 to 1
 14954                           ; switch strategies available:
 14955                           ; Name         Instructions Cycles
 14956                           ; simple_byte            7     4 (average)
 14957                           ;	Chosen strategy is simple_byte
 14958  00139C  5005               	movf	??_SPI_ISR,w,c
 14959  00139E  E098               	bz	i1l6857
 14960  0013A0  0A01               	xorlw	1	; case 1
 14961  0013A2  E101 D77E          	bz	i1l6849
 14962  0013A6  0012               	return		;funcret
 14963  0013A8                     __end_of_SPI_ISR:
 14964                           	opt stack 0
 14965                           tblptru	equ	0xFF8
 14966                           tblptrh	equ	0xFF7
 14967                           tblptrl	equ	0xFF6
 14968                           tablat	equ	0xFF5
 14969                           prodh	equ	0xFF4
 14970                           prodl	equ	0xFF3
 14971                           intcon	equ	0xFF2
 14972                           intcon2	equ	0xFF1
 14973                           intcon3	equ	0xFF0
 14974                           postinc0	equ	0xFEE
 14975                           wreg	equ	0xFE8
 14976                           indf1	equ	0xFE7
 14977                           postdec1	equ	0xFE5
 14978                           fsr1h	equ	0xFE2
 14979                           fsr1l	equ	0xFE1
 14980                           bsr	equ	0xFE0
 14981                           indf2	equ	0xFDF
 14982                           postinc2	equ	0xFDE
 14983                           postdec2	equ	0xFDD
 14984                           fsr2h	equ	0xFDA
 14985                           fsr2l	equ	0xFD9
 14986                           status	equ	0xFD8
 14987                           
 14988 ;; *************** function _IRQ_PION_CHANGEMENT_ETAT *****************
 14989 ;; Defined at:
 14990 ;;		line 199 in file "interrupt.c"
 14991 ;; Parameters:    Size  Location     Type
 14992 ;;		None
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;		None
 14995 ;; Return value:  Size  Location     Type
 14996 ;;                  1    wreg      void 
 14997 ;; Registers used:
 14998 ;;		wreg, status,2, status,0, cstack
 14999 ;; Tracked objects:
 15000 ;;		On entry : 0/0
 15001 ;;		On exit  : 0/0
 15002 ;;		Unchanged: 0/0
 15003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15004 ;;      Params:         0       0       0       0
 15005 ;;      Locals:         0       0       0       0
 15006 ;;      Temps:          0       0       0       0
 15007 ;;      Totals:         0       0       0       0
 15008 ;;Total ram usage:        0 bytes
 15009 ;; Hardware stack levels used:    1
 15010 ;; Hardware stack levels required when called:    6
 15011 ;; This function calls:
 15012 ;;		i1_Buzzer_Etat
 15013 ;;		i1_TIMER5_Off
 15014 ;;		i1_TIMER5_On
 15015 ;; This function is called by:
 15016 ;;		_LOW_PRIORITY_IRQ
 15017 ;; This function uses a non-reentrant model
 15018 ;;
 15019                           
 15020                           	psect	text91
 15021  001F8E                     __ptext91:
 15022                           	opt stack 0
 15023  001F8E                     _IRQ_PION_CHANGEMENT_ETAT:
 15024                           	opt stack 13
 15025                           
 15026                           ;interrupt.c: 200: PIR3bits.IC1IF = 0;
 15027                           
 15028                           ;incstack = 0
 15029  001F8E  92A4               	bcf	4004,1,c	;volatile
 15030                           
 15031                           ;interrupt.c: 203: switch (Surveillance_Capteur_Pion) {
 15032  001F90  D020               	goto	i1l6845
 15033  001F92                     i1l566:
 15034                           
 15035                           ; BSR set to: 0
 15036                           ;interrupt.c: 208: if (PORTAbits.RA2 == 0) {
 15037  001F92  B480               	btfsc	3968,2,c	;volatile
 15038  001F94  D004               	goto	i1l6815
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;interrupt.c: 209: Surveillance_Capteur_Pion = 0;
 15042  001F96  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 15043                           
 15044                           ; BSR set to: 0
 15045                           ;interrupt.c: 210: TIMER5_On();
 15046  001F98  ECC3  F013         	call	i1_TIMER5_On	;wreg free
 15047  001F9C  D011               	goto	i1l6829
 15048  001F9E                     i1l6815:
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;interrupt.c: 214: Surveillance_Capteur_Pion = 1;
 15052  001F9E  0E01               	movlw	1
 15053  001FA0  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 15054                           
 15055                           ;interrupt.c: 215: Alarme = 9;
 15056  001FA2  0E09               	movlw	9
 15057  001FA4  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15058  001FA6                     i1l6817:
 15059                           
 15060                           ;interrupt.c: 217: TIMER5_Off();
 15061  001FA6  EC92  F013         	call	i1_TIMER5_Off	;wreg free
 15062                           
 15063                           ;interrupt.c: 219: nb_100ms_Timer_5 = 0;
 15064  001FAA  0100               	movlb	0	; () banked
 15065  001FAC  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;interrupt.c: 222: nb_100ms_platine = nb_100ms_platine_backup;
 15069  001FAE  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 15070                           
 15071                           ; BSR set to: 0
 15072                           ;interrupt.c: 223: Mouvement_Startup = 0;
 15073  001FB2  6A4D               	clrf	_Mouvement_Startup,c
 15074  001FB4  0012               	return	
 15075  001FB6                     i1l570:
 15076                           
 15077                           ; BSR set to: 0
 15078                           ;interrupt.c: 234: if (PORTAbits.RA2 == 0) {
 15079  001FB6  B480               	btfsc	3968,2,c	;volatile
 15080  001FB8  D006               	goto	i1l6831
 15081                           
 15082                           ; BSR set to: 0
 15083                           ;interrupt.c: 235: Surveillance_Capteur_Pion = 0;
 15084  001FBA  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;interrupt.c: 236: Alarme = 5;
 15088  001FBC  0E05               	movlw	5
 15089  001FBE  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15090  001FC0                     i1l6829:
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;interrupt.c: 238: Buzzer_Etat((unsigned char) 1);
 15094  001FC0  0E01               	movlw	1
 15095  001FC2  EF74  F013         	goto	i1_Buzzer_Etat
 15096  001FC6                     i1l6831:
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;interrupt.c: 240: Surveillance_Capteur_Pion = 1;
 15100  001FC6  0E01               	movlw	1
 15101  001FC8  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;interrupt.c: 242: Buzzer_Etat((unsigned char) 0);
 15105  001FCA  0E00               	movlw	0
 15106  001FCC  EC74  F013         	call	i1_Buzzer_Etat
 15107  001FD0  D7EA               	goto	i1l6817
 15108  001FD2                     i1l6845:
 15109  001FD2  0100               	movlb	0	; () banked
 15110  001FD4  5189               	movf	_Surveillance_Capteur_Pion& (0+255),w,b
 15111                           
 15112                           ; Switch size 1, requested type "speed"
 15113                           ; Number of cases is 2, Range of values is 0 to 1
 15114                           ; switch strategies available:
 15115                           ; Name         Instructions Cycles
 15116                           ; simple_byte            7     4 (average)
 15117                           ;	Chosen strategy is simple_byte
 15118  001FD6  E0EF               	bz	i1l570
 15119  001FD8  0A01               	xorlw	1	; case 1
 15120  001FDA  E0DB               	bz	i1l566
 15121  001FDC  0012               	return		;funcret
 15122  001FDE                     __end_of_IRQ_PION_CHANGEMENT_ETAT:
 15123                           	opt stack 0
 15124                           tblptru	equ	0xFF8
 15125                           tblptrh	equ	0xFF7
 15126                           tblptrl	equ	0xFF6
 15127                           tablat	equ	0xFF5
 15128                           prodh	equ	0xFF4
 15129                           prodl	equ	0xFF3
 15130                           intcon	equ	0xFF2
 15131                           intcon2	equ	0xFF1
 15132                           intcon3	equ	0xFF0
 15133                           postinc0	equ	0xFEE
 15134                           wreg	equ	0xFE8
 15135                           indf1	equ	0xFE7
 15136                           postdec1	equ	0xFE5
 15137                           fsr1h	equ	0xFE2
 15138                           fsr1l	equ	0xFE1
 15139                           bsr	equ	0xFE0
 15140                           indf2	equ	0xFDF
 15141                           postinc2	equ	0xFDE
 15142                           postdec2	equ	0xFDD
 15143                           fsr2h	equ	0xFDA
 15144                           fsr2l	equ	0xFD9
 15145                           status	equ	0xFD8
 15146                           
 15147 ;; *************** function i1_TIMER5_On *****************
 15148 ;; Defined at:
 15149 ;;		line 253 in file "timer.c"
 15150 ;; Parameters:    Size  Location     Type
 15151 ;;		None
 15152 ;; Auto vars:     Size  Location     Type
 15153 ;;		None
 15154 ;; Return value:  Size  Location     Type
 15155 ;;                  1    wreg      void 
 15156 ;; Registers used:
 15157 ;;		None
 15158 ;; Tracked objects:
 15159 ;;		On entry : 3F/0
 15160 ;;		On exit  : 3F/0
 15161 ;;		Unchanged: 3F/0
 15162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15163 ;;      Params:         0       0       0       0
 15164 ;;      Locals:         0       0       0       0
 15165 ;;      Temps:          0       0       0       0
 15166 ;;      Totals:         0       0       0       0
 15167 ;;Total ram usage:        0 bytes
 15168 ;; Hardware stack levels used:    1
 15169 ;; Hardware stack levels required when called:    5
 15170 ;; This function calls:
 15171 ;;		Nothing
 15172 ;; This function is called by:
 15173 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15174 ;; This function uses a non-reentrant model
 15175 ;;
 15176                           
 15177                           	psect	text92
 15178  002786                     __ptext92:
 15179                           	opt stack 0
 15180  002786                     i1_TIMER5_On:
 15181                           	opt stack 13
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 15185                           
 15186                           ;incstack = 0
 15187  002786  80B7               	bsf	4023,0,c	;volatile
 15188                           
 15189                           ; BSR set to: 0
 15190  002788  0012               	return		;funcret
 15191  00278A                     __end_ofi1_TIMER5_On:
 15192                           	opt stack 0
 15193                           tblptru	equ	0xFF8
 15194                           tblptrh	equ	0xFF7
 15195                           tblptrl	equ	0xFF6
 15196                           tablat	equ	0xFF5
 15197                           prodh	equ	0xFF4
 15198                           prodl	equ	0xFF3
 15199                           intcon	equ	0xFF2
 15200                           intcon2	equ	0xFF1
 15201                           intcon3	equ	0xFF0
 15202                           postinc0	equ	0xFEE
 15203                           wreg	equ	0xFE8
 15204                           indf1	equ	0xFE7
 15205                           postdec1	equ	0xFE5
 15206                           fsr1h	equ	0xFE2
 15207                           fsr1l	equ	0xFE1
 15208                           bsr	equ	0xFE0
 15209                           indf2	equ	0xFDF
 15210                           postinc2	equ	0xFDE
 15211                           postdec2	equ	0xFDD
 15212                           fsr2h	equ	0xFDA
 15213                           fsr2l	equ	0xFD9
 15214                           status	equ	0xFD8
 15215                           
 15216 ;; *************** function i1_TIMER5_Off *****************
 15217 ;; Defined at:
 15218 ;;		line 263 in file "timer.c"
 15219 ;; Parameters:    Size  Location     Type
 15220 ;;		None
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;		None
 15223 ;; Return value:  Size  Location     Type
 15224 ;;                  1    wreg      void 
 15225 ;; Registers used:
 15226 ;;		None
 15227 ;; Tracked objects:
 15228 ;;		On entry : 0/0
 15229 ;;		On exit  : 0/0
 15230 ;;		Unchanged: 0/0
 15231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15232 ;;      Params:         0       0       0       0
 15233 ;;      Locals:         0       0       0       0
 15234 ;;      Temps:          0       0       0       0
 15235 ;;      Totals:         0       0       0       0
 15236 ;;Total ram usage:        0 bytes
 15237 ;; Hardware stack levels used:    1
 15238 ;; Hardware stack levels required when called:    5
 15239 ;; This function calls:
 15240 ;;		Nothing
 15241 ;; This function is called by:
 15242 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15243 ;;		i1_IRQ_TIMER_5
 15244 ;; This function uses a non-reentrant model
 15245 ;;
 15246                           
 15247                           	psect	text93
 15248  002724                     __ptext93:
 15249                           	opt stack 0
 15250  002724                     i1_TIMER5_Off:
 15251                           	opt stack 13
 15252                           
 15253                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 15254                           
 15255                           ; BSR set to: 0
 15256                           ;incstack = 0
 15257  002724  90B7               	bcf	4023,0,c	;volatile
 15258                           
 15259                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 15260  002726  90A4               	bcf	4004,0,c	;volatile
 15261                           
 15262                           ;timer.c: 268: TMR5L = 0;
 15263  002728  6A87               	clrf	3975,c	;volatile
 15264                           
 15265                           ;timer.c: 269: TMR5H = 0;
 15266  00272A  6A88               	clrf	3976,c	;volatile
 15267  00272C  0012               	return		;funcret
 15268  00272E                     __end_ofi1_TIMER5_Off:
 15269                           	opt stack 0
 15270                           tblptru	equ	0xFF8
 15271                           tblptrh	equ	0xFF7
 15272                           tblptrl	equ	0xFF6
 15273                           tablat	equ	0xFF5
 15274                           prodh	equ	0xFF4
 15275                           prodl	equ	0xFF3
 15276                           intcon	equ	0xFF2
 15277                           intcon2	equ	0xFF1
 15278                           intcon3	equ	0xFF0
 15279                           postinc0	equ	0xFEE
 15280                           wreg	equ	0xFE8
 15281                           indf1	equ	0xFE7
 15282                           postdec1	equ	0xFE5
 15283                           fsr1h	equ	0xFE2
 15284                           fsr1l	equ	0xFE1
 15285                           bsr	equ	0xFE0
 15286                           indf2	equ	0xFDF
 15287                           postinc2	equ	0xFDE
 15288                           postdec2	equ	0xFDD
 15289                           fsr2h	equ	0xFDA
 15290                           fsr2l	equ	0xFD9
 15291                           status	equ	0xFD8
 15292                           
 15293 ;; *************** function i1_Buzzer_Etat *****************
 15294 ;; Defined at:
 15295 ;;		line 29 in file "interrupt.c"
 15296 ;; Parameters:    Size  Location     Type
 15297 ;;  Activation      1    wreg     unsigned char 
 15298 ;; Auto vars:     Size  Location     Type
 15299 ;;  Activation      1    4[COMRAM] unsigned char 
 15300 ;; Return value:  Size  Location     Type
 15301 ;;                  1    wreg      void 
 15302 ;; Registers used:
 15303 ;;		wreg, status,2, status,0
 15304 ;; Tracked objects:
 15305 ;;		On entry : 0/0
 15306 ;;		On exit  : 0/0
 15307 ;;		Unchanged: 0/0
 15308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15309 ;;      Params:         0       0       0       0
 15310 ;;      Locals:         1       0       0       0
 15311 ;;      Temps:          0       0       0       0
 15312 ;;      Totals:         1       0       0       0
 15313 ;;Total ram usage:        1 bytes
 15314 ;; Hardware stack levels used:    1
 15315 ;; Hardware stack levels required when called:    5
 15316 ;; This function calls:
 15317 ;;		Nothing
 15318 ;; This function is called by:
 15319 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15320 ;;		i1_IRQ_TIMER_5
 15321 ;; This function uses a non-reentrant model
 15322 ;;
 15323                           
 15324                           	psect	text94
 15325  0026E8                     __ptext94:
 15326                           	opt stack 0
 15327  0026E8                     i1_Buzzer_Etat:
 15328                           	opt stack 13
 15329                           
 15330                           ;incstack = 0
 15331                           ;i1Buzzer_Etat@Activation stored from wreg
 15332  0026E8  6E05               	movwf	i1Buzzer_Etat@Activation,c
 15333                           
 15334                           ;interrupt.c: 30: if (Activation == 1) {
 15335  0026EA  0405               	decf	i1Buzzer_Etat@Activation,w,c
 15336  0026EC  E102               	bnz	i1l531
 15337                           
 15338                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 15339  0026EE  8C89               	bsf	3977,6,c	;volatile
 15340                           
 15341                           ;interrupt.c: 33: } else {
 15342  0026F0  0012               	return	
 15343  0026F2                     i1l531:
 15344                           
 15345                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 15346  0026F2  9C89               	bcf	3977,6,c	;volatile
 15347  0026F4  0012               	return		;funcret
 15348  0026F6                     __end_ofi1_Buzzer_Etat:
 15349                           	opt stack 0
 15350                           tblptru	equ	0xFF8
 15351                           tblptrh	equ	0xFF7
 15352                           tblptrl	equ	0xFF6
 15353                           tablat	equ	0xFF5
 15354                           prodh	equ	0xFF4
 15355                           prodl	equ	0xFF3
 15356                           intcon	equ	0xFF2
 15357                           intcon2	equ	0xFF1
 15358                           intcon3	equ	0xFF0
 15359                           postinc0	equ	0xFEE
 15360                           wreg	equ	0xFE8
 15361                           indf1	equ	0xFE7
 15362                           postdec1	equ	0xFE5
 15363                           fsr1h	equ	0xFE2
 15364                           fsr1l	equ	0xFE1
 15365                           bsr	equ	0xFE0
 15366                           indf2	equ	0xFDF
 15367                           postinc2	equ	0xFDE
 15368                           postdec2	equ	0xFDD
 15369                           fsr2h	equ	0xFDA
 15370                           fsr2l	equ	0xFD9
 15371                           status	equ	0xFD8
 15372                           
 15373 ;; *************** function _EUSART1_Transmit_ISR *****************
 15374 ;; Defined at:
 15375 ;;		line 552 in file "eusart.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;		None
 15378 ;; Auto vars:     Size  Location     Type
 15379 ;;		None
 15380 ;; Return value:  Size  Location     Type
 15381 ;;                  1    wreg      void 
 15382 ;; Registers used:
 15383 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15384 ;; Tracked objects:
 15385 ;;		On entry : 0/0
 15386 ;;		On exit  : 0/0
 15387 ;;		Unchanged: 0/0
 15388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15389 ;;      Params:         0       0       0       0
 15390 ;;      Locals:         0       0       0       0
 15391 ;;      Temps:          0       0       0       0
 15392 ;;      Totals:         0       0       0       0
 15393 ;;Total ram usage:        0 bytes
 15394 ;; Hardware stack levels used:    1
 15395 ;; Hardware stack levels required when called:    5
 15396 ;; This function calls:
 15397 ;;		Nothing
 15398 ;; This function is called by:
 15399 ;;		_LOW_PRIORITY_IRQ
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           	psect	text95
 15404  00231A                     __ptext95:
 15405                           	opt stack 0
 15406  00231A                     _EUSART1_Transmit_ISR:
 15407                           	opt stack 14
 15408                           
 15409                           ;eusart.c: 554: eusart1TxIndex++;
 15410                           
 15411                           ;incstack = 0
 15412  00231A  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 15413                           
 15414                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 15415  00231C  0E80               	movlw	low _eusart1TxBuffer
 15416  00231E  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15417  002320  6ED9               	movwf	fsr2l,c
 15418  002322  6ADA               	clrf	fsr2h,c
 15419  002324  0E01               	movlw	high _eusart1TxBuffer
 15420  002326  22DA               	addwfc	fsr2h,f,c
 15421  002328  50DF               	movf	indf2,w,c
 15422  00232A  E009               	bz	i1l1344
 15423                           
 15424                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 15425  00232C  0E80               	movlw	low _eusart1TxBuffer
 15426  00232E  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15427  002330  6ED9               	movwf	fsr2l,c
 15428  002332  6ADA               	clrf	fsr2h,c
 15429  002334  0E01               	movlw	high _eusart1TxBuffer
 15430  002336  22DA               	addwfc	fsr2h,f,c
 15431  002338  50DF               	movf	indf2,w,c
 15432  00233A  6EAD               	movwf	4013,c	;volatile
 15433                           
 15434                           ;eusart.c: 574: } else {
 15435  00233C  0012               	return	
 15436  00233E                     i1l1344:
 15437                           
 15438                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 15439  00233E  989D               	bcf	3997,4,c	;volatile
 15440  002340  0012               	return		;funcret
 15441  002342                     __end_of_EUSART1_Transmit_ISR:
 15442                           	opt stack 0
 15443                           tblptru	equ	0xFF8
 15444                           tblptrh	equ	0xFF7
 15445                           tblptrl	equ	0xFF6
 15446                           tablat	equ	0xFF5
 15447                           prodh	equ	0xFF4
 15448                           prodl	equ	0xFF3
 15449                           intcon	equ	0xFF2
 15450                           intcon2	equ	0xFF1
 15451                           intcon3	equ	0xFF0
 15452                           postinc0	equ	0xFEE
 15453                           wreg	equ	0xFE8
 15454                           indf1	equ	0xFE7
 15455                           postdec1	equ	0xFE5
 15456                           fsr1h	equ	0xFE2
 15457                           fsr1l	equ	0xFE1
 15458                           bsr	equ	0xFE0
 15459                           indf2	equ	0xFDF
 15460                           postinc2	equ	0xFDE
 15461                           postdec2	equ	0xFDD
 15462                           fsr2h	equ	0xFDA
 15463                           fsr2l	equ	0xFD9
 15464                           status	equ	0xFD8
 15465                           
 15466 ;; *************** function _EUSART1_Receive_ISR *****************
 15467 ;; Defined at:
 15468 ;;		line 597 in file "eusart.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;		None
 15471 ;; Auto vars:     Size  Location     Type
 15472 ;;  i               1    6[COMRAM] unsigned char 
 15473 ;; Return value:  Size  Location     Type
 15474 ;;                  1    wreg      void 
 15475 ;; Registers used:
 15476 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15477 ;; Tracked objects:
 15478 ;;		On entry : 0/0
 15479 ;;		On exit  : 0/0
 15480 ;;		Unchanged: 0/0
 15481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15482 ;;      Params:         0       0       0       0
 15483 ;;      Locals:         1       0       0       0
 15484 ;;      Temps:          2       0       0       0
 15485 ;;      Totals:         3       0       0       0
 15486 ;;Total ram usage:        3 bytes
 15487 ;; Hardware stack levels used:    1
 15488 ;; Hardware stack levels required when called:    6
 15489 ;; This function calls:
 15490 ;;		_EUSART1_Erreur_Get
 15491 ;; This function is called by:
 15492 ;;		_LOW_PRIORITY_IRQ
 15493 ;; This function uses a non-reentrant model
 15494 ;;
 15495                           
 15496                           	psect	text96
 15497  00147E                     __ptext96:
 15498                           	opt stack 0
 15499  00147E                     _EUSART1_Receive_ISR:
 15500                           	opt stack 13
 15501                           
 15502                           ;eusart.c: 600: unsigned char i;
 15503                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 15504                           
 15505                           ;incstack = 0
 15506  00147E  9A9E               	bcf	3998,5,c	;volatile
 15507                           
 15508                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 15509  001480  A2AB               	btfss	4011,1,c	;volatile
 15510  001482  D004               	goto	i1l6905
 15511                           
 15512                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 15513  001484  9EAB               	bcf	4011,7,c	;volatile
 15514                           
 15515                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 15516  001486  8EAB               	bsf	4011,7,c	;volatile
 15517                           
 15518                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 15519  001488  98AB               	bcf	4011,4,c	;volatile
 15520                           
 15521                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 15522  00148A  88AB               	bsf	4011,4,c	;volatile
 15523  00148C                     i1l6905:
 15524                           
 15525                           ;eusart.c: 610: }
 15526                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 15527  00148C  0E40               	movlw	low _eusart1RxBuffer
 15528  00148E  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15529  001490  6ED9               	movwf	fsr2l,c
 15530  001492  6ADA               	clrf	fsr2h,c
 15531  001494  0E02               	movlw	high _eusart1RxBuffer
 15532  001496  22DA               	addwfc	fsr2h,f,c
 15533  001498  CFAE FFDF          	movff	4014,indf2	;volatile
 15534                           
 15535                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 15536  00149C  0E40               	movlw	low _eusart1RxBuffer
 15537  00149E  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15538  0014A0  6ED9               	movwf	fsr2l,c
 15539  0014A2  6ADA               	clrf	fsr2h,c
 15540  0014A4  0E02               	movlw	high _eusart1RxBuffer
 15541  0014A6  22DA               	addwfc	fsr2h,f,c
 15542  0014A8  50DF               	movf	indf2,w,c
 15543  0014AA  0E01               	movlw	1
 15544  0014AC  A4D8               	btfss	status,2,c
 15545  0014AE  0E00               	movlw	0
 15546  0014B0  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15547  0014B2  0E40               	movlw	low _eusart1RxBuffer
 15548  0014B4  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15549  0014B6  6ED9               	movwf	fsr2l,c
 15550  0014B8  6ADA               	clrf	fsr2h,c
 15551  0014BA  0E02               	movlw	high _eusart1RxBuffer
 15552  0014BC  22DA               	addwfc	fsr2h,f,c
 15553  0014BE  0E0D               	movlw	13
 15554  0014C0  18DE               	xorwf	postinc2,w,c
 15555  0014C2  0E01               	movlw	1
 15556  0014C4  A4D8               	btfss	status,2,c
 15557  0014C6  0E00               	movlw	0
 15558  0014C8  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 15559  0014CA  A0E8               	btfss	wreg,0,c
 15560  0014CC  D032               	goto	i1l6933
 15561                           
 15562                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 15563  0014CE  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15564  0014D0  E015               	bz	i1l6917
 15565                           
 15566                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 15567  0014D2  6A07               	clrf	EUSART1_Receive_ISR@i,c
 15568  0014D4  D00F               	goto	i1l6915
 15569  0014D6                     i1l6911:
 15570                           
 15571                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 15572  0014D6  0E40               	movlw	low _eusart1RxBuffer
 15573  0014D8  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15574  0014DA  6ED9               	movwf	fsr2l,c
 15575  0014DC  6ADA               	clrf	fsr2h,c
 15576  0014DE  0E02               	movlw	high _eusart1RxBuffer
 15577  0014E0  22DA               	addwfc	fsr2h,f,c
 15578  0014E2  0EC0               	movlw	low _UART_RX_TEXT
 15579  0014E4  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15580  0014E6  6EE1               	movwf	fsr1l,c
 15581  0014E8  6AE2               	clrf	fsr1h,c
 15582  0014EA  0E01               	movlw	high _UART_RX_TEXT
 15583  0014EC  22E2               	addwfc	fsr1h,f,c
 15584  0014EE  CFDF FFE7          	movff	indf2,indf1
 15585  0014F2  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 15586  0014F4                     i1l6915:
 15587  0014F4  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15588  0014F6  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 15589  0014F8  E3EE               	bnc	i1l6911
 15590                           
 15591                           ;eusart.c: 623: }
 15592                           ;eusart.c: 624: RX1_full = 1;
 15593  0014FA  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15594  0014FC                     i1l6917:
 15595                           
 15596                           ;eusart.c: 625: }
 15597                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 15598  0014FC  0EC0               	movlw	low _UART_RX_TEXT
 15599  0014FE  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15600  001500  6ED9               	movwf	fsr2l,c
 15601  001502  6ADA               	clrf	fsr2h,c
 15602  001504  0E01               	movlw	high _UART_RX_TEXT
 15603  001506  22DA               	addwfc	fsr2h,f,c
 15604  001508  0E00               	movlw	0
 15605  00150A  6ADF               	clrf	indf2,c
 15606                           
 15607                           ;eusart.c: 629: eusart1RxIndex = 0;
 15608  00150C  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15609                           
 15610                           ;eusart.c: 631: } else {
 15611  00150E  0012               	return	
 15612  001510                     i1l6921:
 15613                           
 15614                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 15615  001510  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15616  001512  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15617  001514  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15618  001516  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 15619  001518  0E00               	movlw	0
 15620  00151A  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 15621  00151C  0E40               	movlw	64
 15622  00151E  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 15623  001520  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 15624  001522  E105               	bnz	i1l6927
 15625                           
 15626                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 15627  001524  0101               	movlb	1	; () banked
 15628  001526  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 15629                           
 15630                           ;eusart.c: 636: eusart1RxIndex = 0;
 15631  001528  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15632                           
 15633                           ;eusart.c: 638: EUSART1_Erreur_Get();
 15634  00152A  EF9F  F013         	goto	_EUSART1_Erreur_Get	;wreg free
 15635  00152E                     i1l6927:
 15636                           
 15637                           ;eusart.c: 640: eusart1RxIndex++;
 15638  00152E  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 15639  001530  0012               	return	
 15640  001532                     i1l6933:
 15641  001532  0E01               	movlw	1
 15642  001534  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15643  001536  0E00               	movlw	0
 15644  001538  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15645  00153A  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15646                           
 15647                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15648                           ; Switch size 1, requested type "speed"
 15649                           ; Number of cases is 1, Range of values is 0 to 0
 15650                           ; switch strategies available:
 15651                           ; Name         Instructions Cycles
 15652                           ; simple_byte            4     3 (average)
 15653                           ;	Chosen strategy is simple_byte
 15654  00153C  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 15655  00153E  A4D8               	btfss	status,2,c
 15656  001540  0012               	return	
 15657                           
 15658                           ; Switch size 1, requested type "speed"
 15659                           ; Number of cases is 2, Range of values is 0 to 1
 15660                           ; switch strategies available:
 15661                           ; Name         Instructions Cycles
 15662                           ; simple_byte            7     4 (average)
 15663                           ;	Chosen strategy is simple_byte
 15664  001542  5005               	movf	??_EUSART1_Receive_ISR,w,c
 15665  001544  E0E5               	bz	i1l6921
 15666  001546  0A01               	xorlw	1	; case 1
 15667  001548  E102 EF9F  F013    	bz	_EUSART1_Erreur_Get
 15668  00154E  0012               	return		;funcret
 15669  001550                     __end_of_EUSART1_Receive_ISR:
 15670                           	opt stack 0
 15671                           tblptru	equ	0xFF8
 15672                           tblptrh	equ	0xFF7
 15673                           tblptrl	equ	0xFF6
 15674                           tablat	equ	0xFF5
 15675                           prodh	equ	0xFF4
 15676                           prodl	equ	0xFF3
 15677                           intcon	equ	0xFF2
 15678                           intcon2	equ	0xFF1
 15679                           intcon3	equ	0xFF0
 15680                           postinc0	equ	0xFEE
 15681                           wreg	equ	0xFE8
 15682                           indf1	equ	0xFE7
 15683                           postdec1	equ	0xFE5
 15684                           fsr1h	equ	0xFE2
 15685                           fsr1l	equ	0xFE1
 15686                           bsr	equ	0xFE0
 15687                           indf2	equ	0xFDF
 15688                           postinc2	equ	0xFDE
 15689                           postdec2	equ	0xFDD
 15690                           fsr2h	equ	0xFDA
 15691                           fsr2l	equ	0xFD9
 15692                           status	equ	0xFD8
 15693                           
 15694 ;; *************** function _EUSART1_Erreur_Get *****************
 15695 ;; Defined at:
 15696 ;;		line 585 in file "eusart.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;		None
 15699 ;; Auto vars:     Size  Location     Type
 15700 ;;		None
 15701 ;; Return value:  Size  Location     Type
 15702 ;;                  1    wreg      void 
 15703 ;; Registers used:
 15704 ;;		None
 15705 ;; Tracked objects:
 15706 ;;		On entry : 0/1
 15707 ;;		On exit  : 0/0
 15708 ;;		Unchanged: 0/0
 15709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15710 ;;      Params:         0       0       0       0
 15711 ;;      Locals:         0       0       0       0
 15712 ;;      Temps:          0       0       0       0
 15713 ;;      Totals:         0       0       0       0
 15714 ;;Total ram usage:        0 bytes
 15715 ;; Hardware stack levels used:    1
 15716 ;; Hardware stack levels required when called:    5
 15717 ;; This function calls:
 15718 ;;		Nothing
 15719 ;; This function is called by:
 15720 ;;		_EUSART1_Receive_ISR
 15721 ;; This function uses a non-reentrant model
 15722 ;;
 15723                           
 15724                           	psect	text97
 15725  00273E                     __ptext97:
 15726                           	opt stack 0
 15727  00273E                     _EUSART1_Erreur_Get:
 15728                           	opt stack 13
 15729                           
 15730                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 15731                           
 15732                           ;incstack = 0
 15733  00273E  848B               	bsf	3979,2,c	;volatile
 15734                           
 15735                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 15736  002740  948B               	bcf	3979,2,c	;volatile
 15737                           
 15738                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 15739  002742  848B               	bsf	3979,2,c	;volatile
 15740  002744  0012               	return		;funcret
 15741  002746                     __end_of_EUSART1_Erreur_Get:
 15742                           	opt stack 0
 15743                           tblptru	equ	0xFF8
 15744                           tblptrh	equ	0xFF7
 15745                           tblptrl	equ	0xFF6
 15746                           tablat	equ	0xFF5
 15747                           prodh	equ	0xFF4
 15748                           prodl	equ	0xFF3
 15749                           intcon	equ	0xFF2
 15750                           intcon2	equ	0xFF1
 15751                           intcon3	equ	0xFF0
 15752                           postinc0	equ	0xFEE
 15753                           wreg	equ	0xFE8
 15754                           indf1	equ	0xFE7
 15755                           postdec1	equ	0xFE5
 15756                           fsr1h	equ	0xFE2
 15757                           fsr1l	equ	0xFE1
 15758                           bsr	equ	0xFE0
 15759                           indf2	equ	0xFDF
 15760                           postinc2	equ	0xFDE
 15761                           postdec2	equ	0xFDD
 15762                           fsr2h	equ	0xFDA
 15763                           fsr2l	equ	0xFD9
 15764                           status	equ	0xFD8
 15765                           
 15766 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 15767 ;; Defined at:
 15768 ;;		line 955 in file "interrupt.c"
 15769 ;; Parameters:    Size  Location     Type
 15770 ;;		None
 15771 ;; Auto vars:     Size  Location     Type
 15772 ;;		None
 15773 ;; Return value:  Size  Location     Type
 15774 ;;                  1    wreg      void 
 15775 ;; Registers used:
 15776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15777 ;; Tracked objects:
 15778 ;;		On entry : 0/0
 15779 ;;		On exit  : 0/0
 15780 ;;		Unchanged: 0/0
 15781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15782 ;;      Params:         0       0       0       0
 15783 ;;      Locals:         0       0       0       0
 15784 ;;      Temps:          2       0       0       0
 15785 ;;      Totals:         2       0       0       0
 15786 ;;Total ram usage:        2 bytes
 15787 ;; Hardware stack levels used:    1
 15788 ;; Hardware stack levels required when called:    4
 15789 ;; This function calls:
 15790 ;;		i2_IRQ_CAPOT
 15791 ;;		i2_IRQ_I_MOTEUR_1
 15792 ;;		i2_IRQ_I_MOTEUR_2
 15793 ;;		i2_IRQ_TIMER2
 15794 ;; This function is called by:
 15795 ;;		Interrupt level 2
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           	psect	intcode
 15800  000008                     __pintcode:
 15801                           	opt stack 0
 15802  000008                     _HIGH_PRIORITY_IRQ:
 15803                           	opt stack 11
 15804                           
 15805                           ;incstack = 0
 15806  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15807  00000A  EF5C  F010         	goto	int_func
 15808                           tblptru	equ	0xFF8
 15809                           tblptrh	equ	0xFF7
 15810                           tblptrl	equ	0xFF6
 15811                           tablat	equ	0xFF5
 15812                           prodh	equ	0xFF4
 15813                           prodl	equ	0xFF3
 15814                           intcon	equ	0xFF2
 15815                           intcon2	equ	0xFF1
 15816                           intcon3	equ	0xFF0
 15817                           postinc0	equ	0xFEE
 15818                           wreg	equ	0xFE8
 15819                           indf1	equ	0xFE7
 15820                           postdec1	equ	0xFE5
 15821                           fsr1h	equ	0xFE2
 15822                           fsr1l	equ	0xFE1
 15823                           bsr	equ	0xFE0
 15824                           indf2	equ	0xFDF
 15825                           postinc2	equ	0xFDE
 15826                           postdec2	equ	0xFDD
 15827                           fsr2h	equ	0xFDA
 15828                           fsr2l	equ	0xFD9
 15829                           status	equ	0xFD8
 15830                           
 15831                           	psect	intcode_body
 15832  0020B8                     __pintcode_body:
 15833                           	opt stack 11
 15834  0020B8                     int_func:
 15835                           	opt stack 11
 15836  0020B8  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 15837  0020BC  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 15838                           
 15839                           ;interrupt.c: 958: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 15840  0020C0  B29D               	btfsc	3997,1,c	;volatile
 15841  0020C2  A29E               	btfss	3998,1,c	;volatile
 15842  0020C4  D003               	goto	i2l706
 15843                           
 15844                           ;interrupt.c: 959: IRQ_TIMER2();
 15845  0020C6  ECB3  F013         	call	i2_IRQ_TIMER2	;wreg free
 15846                           
 15847                           ;interrupt.c: 965: }
 15848  0020CA  D011               	goto	i2l713
 15849  0020CC                     i2l706:
 15850                           
 15851                           ;interrupt.c: 966: else
 15852                           ;interrupt.c: 967: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 15853  0020CC  B8F2               	btfsc	intcon,4,c	;volatile
 15854  0020CE  A2F2               	btfss	intcon,1,c	;volatile
 15855  0020D0  D003               	goto	i2l708
 15856                           
 15857                           ;interrupt.c: 968: {
 15858                           ;interrupt.c: 969: IRQ_CAPOT();
 15859  0020D2  ECA3  F013         	call	i2_IRQ_CAPOT	;wreg free
 15860                           
 15861                           ;interrupt.c: 984: } else
 15862  0020D6  D00B               	goto	i2l713
 15863  0020D8                     i2l708:
 15864                           
 15865                           ;interrupt.c: 985: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 15866  0020D8  B6F0               	btfsc	intcon3,3,c	;volatile
 15867  0020DA  A0F0               	btfss	intcon3,0,c	;volatile
 15868  0020DC  D003               	goto	i2l710
 15869                           
 15870                           ;interrupt.c: 991: IRQ_I_MOTEUR_1();
 15871  0020DE  ECCD  F012         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 15872                           
 15873                           ;interrupt.c: 1003: } else
 15874  0020E2  D005               	goto	i2l713
 15875  0020E4                     i2l710:
 15876                           
 15877                           ;interrupt.c: 1004: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 15878  0020E4  B8F0               	btfsc	intcon3,4,c	;volatile
 15879  0020E6  A2F0               	btfss	intcon3,1,c	;volatile
 15880  0020E8  D002               	goto	i2l713
 15881                           
 15882                           ;interrupt.c: 1010: IRQ_I_MOTEUR_2();
 15883  0020EA  ECC2  F012         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 15884  0020EE                     i2l713:
 15885  0020EE  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 15886  0020F2  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 15887  0020F6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15888  0020F8  0011               	retfie		f
 15889  0020FA                     __end_of_HIGH_PRIORITY_IRQ:
 15890                           	opt stack 0
 15891                           tblptru	equ	0xFF8
 15892                           tblptrh	equ	0xFF7
 15893                           tblptrl	equ	0xFF6
 15894                           tablat	equ	0xFF5
 15895                           prodh	equ	0xFF4
 15896                           prodl	equ	0xFF3
 15897                           intcon	equ	0xFF2
 15898                           intcon2	equ	0xFF1
 15899                           intcon3	equ	0xFF0
 15900                           postinc0	equ	0xFEE
 15901                           wreg	equ	0xFE8
 15902                           indf1	equ	0xFE7
 15903                           postdec1	equ	0xFE5
 15904                           fsr1h	equ	0xFE2
 15905                           fsr1l	equ	0xFE1
 15906                           bsr	equ	0xFE0
 15907                           indf2	equ	0xFDF
 15908                           postinc2	equ	0xFDE
 15909                           postdec2	equ	0xFDD
 15910                           fsr2h	equ	0xFDA
 15911                           fsr2l	equ	0xFD9
 15912                           status	equ	0xFD8
 15913                           
 15914 ;; *************** function i2_IRQ_TIMER2 *****************
 15915 ;; Defined at:
 15916 ;;		line 883 in file "interrupt.c"
 15917 ;; Parameters:    Size  Location     Type
 15918 ;;		None
 15919 ;; Auto vars:     Size  Location     Type
 15920 ;;		None
 15921 ;; Return value:  Size  Location     Type
 15922 ;;                  1    wreg      void 
 15923 ;; Registers used:
 15924 ;;		None
 15925 ;; Tracked objects:
 15926 ;;		On entry : 0/0
 15927 ;;		On exit  : 0/0
 15928 ;;		Unchanged: 0/0
 15929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15930 ;;      Params:         0       0       0       0
 15931 ;;      Locals:         0       0       0       0
 15932 ;;      Temps:          0       0       0       0
 15933 ;;      Totals:         0       0       0       0
 15934 ;;Total ram usage:        0 bytes
 15935 ;; Hardware stack levels used:    1
 15936 ;; This function calls:
 15937 ;;		Nothing
 15938 ;; This function is called by:
 15939 ;;		_HIGH_PRIORITY_IRQ
 15940 ;; This function uses a non-reentrant model
 15941 ;;
 15942                           
 15943                           	psect	text99
 15944  002766                     __ptext99:
 15945                           	opt stack 0
 15946  002766                     i2_IRQ_TIMER2:
 15947                           	opt stack 14
 15948                           
 15949                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 15950                           
 15951                           ;incstack = 0
 15952  002766  929E               	bcf	3998,1,c	;volatile
 15953                           
 15954                           ;interrupt.c: 887: GODONE = 1;
 15955  002768  82C2               	bsf	4034,1,c	;volatile
 15956  00276A  0012               	return		;funcret
 15957  00276C                     __end_ofi2_IRQ_TIMER2:
 15958                           	opt stack 0
 15959                           tblptru	equ	0xFF8
 15960                           tblptrh	equ	0xFF7
 15961                           tblptrl	equ	0xFF6
 15962                           tablat	equ	0xFF5
 15963                           prodh	equ	0xFF4
 15964                           prodl	equ	0xFF3
 15965                           intcon	equ	0xFF2
 15966                           intcon2	equ	0xFF1
 15967                           intcon3	equ	0xFF0
 15968                           postinc0	equ	0xFEE
 15969                           wreg	equ	0xFE8
 15970                           indf1	equ	0xFE7
 15971                           postdec1	equ	0xFE5
 15972                           fsr1h	equ	0xFE2
 15973                           fsr1l	equ	0xFE1
 15974                           bsr	equ	0xFE0
 15975                           indf2	equ	0xFDF
 15976                           postinc2	equ	0xFDE
 15977                           postdec2	equ	0xFDD
 15978                           fsr2h	equ	0xFDA
 15979                           fsr2l	equ	0xFD9
 15980                           status	equ	0xFD8
 15981                           
 15982 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15983 ;; Defined at:
 15984 ;;		line 909 in file "interrupt.c"
 15985 ;; Parameters:    Size  Location     Type
 15986 ;;		None
 15987 ;; Auto vars:     Size  Location     Type
 15988 ;;		None
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  1    wreg      void 
 15991 ;; Registers used:
 15992 ;;		wreg, status,2, status,0
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15998 ;;      Params:         0       0       0       0
 15999 ;;      Locals:         0       0       0       0
 16000 ;;      Temps:          0       0       0       0
 16001 ;;      Totals:         0       0       0       0
 16002 ;;Total ram usage:        0 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; This function calls:
 16005 ;;		Nothing
 16006 ;; This function is called by:
 16007 ;;		_HIGH_PRIORITY_IRQ
 16008 ;; This function uses a non-reentrant model
 16009 ;;
 16010                           
 16011                           	psect	text100
 16012  002584                     __ptext100:
 16013                           	opt stack 0
 16014  002584                     i2_IRQ_I_MOTEUR_2:
 16015                           	opt stack 14
 16016                           
 16017                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 16018                           
 16019                           ;incstack = 0
 16020  002584  928B               	bcf	3979,1,c	;volatile
 16021                           
 16022                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 16023  002586  D001               	goto	i2l4781
 16024  002588                     i2l699:
 16025  002588  F000               	nop	
 16026  00258A                     i2l4781:
 16027  00258A  50CC               	movf	4044,w,c	;volatile
 16028  00258C  E1FD               	bnz	i2l699
 16029                           
 16030                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 16031  00258E  828B               	bsf	3979,1,c	;volatile
 16032                           
 16033                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 16034  002590  748B               	btg	3979,2,c	;volatile
 16035                           
 16036                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 16037  002592  92F0               	bcf	intcon3,1,c	;volatile
 16038                           
 16039                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 16040  002594  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 16041  002596  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 16042  002598  0012               	return		;funcret
 16043  00259A                     __end_ofi2_IRQ_I_MOTEUR_2:
 16044                           	opt stack 0
 16045                           tblptru	equ	0xFF8
 16046                           tblptrh	equ	0xFF7
 16047                           tblptrl	equ	0xFF6
 16048                           tablat	equ	0xFF5
 16049                           prodh	equ	0xFF4
 16050                           prodl	equ	0xFF3
 16051                           intcon	equ	0xFF2
 16052                           intcon2	equ	0xFF1
 16053                           intcon3	equ	0xFF0
 16054                           postinc0	equ	0xFEE
 16055                           wreg	equ	0xFE8
 16056                           indf1	equ	0xFE7
 16057                           postdec1	equ	0xFE5
 16058                           fsr1h	equ	0xFE2
 16059                           fsr1l	equ	0xFE1
 16060                           bsr	equ	0xFE0
 16061                           indf2	equ	0xFDF
 16062                           postinc2	equ	0xFDE
 16063                           postdec2	equ	0xFDD
 16064                           fsr2h	equ	0xFDA
 16065                           fsr2l	equ	0xFD9
 16066                           status	equ	0xFD8
 16067                           
 16068 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 16069 ;; Defined at:
 16070 ;;		line 895 in file "interrupt.c"
 16071 ;; Parameters:    Size  Location     Type
 16072 ;;		None
 16073 ;; Auto vars:     Size  Location     Type
 16074 ;;		None
 16075 ;; Return value:  Size  Location     Type
 16076 ;;                  1    wreg      void 
 16077 ;; Registers used:
 16078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16079 ;; Tracked objects:
 16080 ;;		On entry : 0/0
 16081 ;;		On exit  : 0/0
 16082 ;;		Unchanged: 0/0
 16083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16084 ;;      Params:         0       0       0       0
 16085 ;;      Locals:         0       0       0       0
 16086 ;;      Temps:          0       0       0       0
 16087 ;;      Totals:         0       0       0       0
 16088 ;;Total ram usage:        0 bytes
 16089 ;; Hardware stack levels used:    1
 16090 ;; Hardware stack levels required when called:    3
 16091 ;; This function calls:
 16092 ;;		i2_Alarme_On
 16093 ;; This function is called by:
 16094 ;;		_HIGH_PRIORITY_IRQ
 16095 ;; This function uses a non-reentrant model
 16096 ;;
 16097                           
 16098                           	psect	text101
 16099  00259A                     __ptext101:
 16100                           	opt stack 0
 16101  00259A                     i2_IRQ_I_MOTEUR_1:
 16102                           	opt stack 11
 16103                           
 16104                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 16105                           
 16106                           ;incstack = 0
 16107  00259A  90F0               	bcf	intcon3,0,c	;volatile
 16108                           
 16109                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 16110  00259C  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 16111                           
 16112                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 16113  00259E  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 16114  0025A0  A4D8               	btfss	status,2,c
 16115  0025A2  0012               	return	
 16116                           
 16117                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 16118  0025A4  848B               	bsf	3979,2,c	;volatile
 16119                           
 16120                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 16121  0025A6  908B               	bcf	3979,0,c	;volatile
 16122                           
 16123                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 16124  0025A8  928B               	bcf	3979,1,c	;volatile
 16125                           
 16126                           ;interrupt.c: 904: Alarme_On(1);
 16127  0025AA  0E01               	movlw	1
 16128  0025AC  EF5E  F013         	goto	i2_Alarme_On
 16129  0025B0                     __end_ofi2_IRQ_I_MOTEUR_1:
 16130                           	opt stack 0
 16131                           tblptru	equ	0xFF8
 16132                           tblptrh	equ	0xFF7
 16133                           tblptrl	equ	0xFF6
 16134                           tablat	equ	0xFF5
 16135                           prodh	equ	0xFF4
 16136                           prodl	equ	0xFF3
 16137                           intcon	equ	0xFF2
 16138                           intcon2	equ	0xFF1
 16139                           intcon3	equ	0xFF0
 16140                           postinc0	equ	0xFEE
 16141                           wreg	equ	0xFE8
 16142                           indf1	equ	0xFE7
 16143                           postdec1	equ	0xFE5
 16144                           fsr1h	equ	0xFE2
 16145                           fsr1l	equ	0xFE1
 16146                           bsr	equ	0xFE0
 16147                           indf2	equ	0xFDF
 16148                           postinc2	equ	0xFDE
 16149                           postdec2	equ	0xFDD
 16150                           fsr2h	equ	0xFDA
 16151                           fsr2l	equ	0xFD9
 16152                           status	equ	0xFD8
 16153                           
 16154 ;; *************** function i2_IRQ_CAPOT *****************
 16155 ;; Defined at:
 16156 ;;		line 890 in file "interrupt.c"
 16157 ;; Parameters:    Size  Location     Type
 16158 ;;		None
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;		None
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  1    wreg      void 
 16163 ;; Registers used:
 16164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16165 ;; Tracked objects:
 16166 ;;		On entry : 0/0
 16167 ;;		On exit  : 0/0
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16170 ;;      Params:         0       0       0       0
 16171 ;;      Locals:         0       0       0       0
 16172 ;;      Temps:          0       0       0       0
 16173 ;;      Totals:         0       0       0       0
 16174 ;;Total ram usage:        0 bytes
 16175 ;; Hardware stack levels used:    1
 16176 ;; Hardware stack levels required when called:    3
 16177 ;; This function calls:
 16178 ;;		i2_Alarme_On
 16179 ;; This function is called by:
 16180 ;;		_HIGH_PRIORITY_IRQ
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           	psect	text102
 16185  002746                     __ptext102:
 16186                           	opt stack 0
 16187  002746                     i2_IRQ_CAPOT:
 16188                           	opt stack 11
 16189                           
 16190                           ;interrupt.c: 891: INT0IF = 0;
 16191                           
 16192                           ;incstack = 0
 16193  002746  92F2               	bcf	intcon,1,c	;volatile
 16194                           
 16195                           ;interrupt.c: 892: Alarme_On(4);
 16196  002748  0E04               	movlw	4
 16197  00274A  EF5E  F013         	goto	i2_Alarme_On
 16198  00274E                     __end_ofi2_IRQ_CAPOT:
 16199                           	opt stack 0
 16200                           tblptru	equ	0xFF8
 16201                           tblptrh	equ	0xFF7
 16202                           tblptrl	equ	0xFF6
 16203                           tablat	equ	0xFF5
 16204                           prodh	equ	0xFF4
 16205                           prodl	equ	0xFF3
 16206                           intcon	equ	0xFF2
 16207                           intcon2	equ	0xFF1
 16208                           intcon3	equ	0xFF0
 16209                           postinc0	equ	0xFEE
 16210                           wreg	equ	0xFE8
 16211                           indf1	equ	0xFE7
 16212                           postdec1	equ	0xFE5
 16213                           fsr1h	equ	0xFE2
 16214                           fsr1l	equ	0xFE1
 16215                           bsr	equ	0xFE0
 16216                           indf2	equ	0xFDF
 16217                           postinc2	equ	0xFDE
 16218                           postdec2	equ	0xFDD
 16219                           fsr2h	equ	0xFDA
 16220                           fsr2l	equ	0xFD9
 16221                           status	equ	0xFD8
 16222                           
 16223 ;; *************** function i2_Alarme_On *****************
 16224 ;; Defined at:
 16225 ;;		line 18 in file "alarme.c"
 16226 ;; Parameters:    Size  Location     Type
 16227 ;;  alarme_new_v    1    wreg     unsigned char 
 16228 ;; Auto vars:     Size  Location     Type
 16229 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 16230 ;; Return value:  Size  Location     Type
 16231 ;;                  1    wreg      void 
 16232 ;; Registers used:
 16233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16234 ;; Tracked objects:
 16235 ;;		On entry : 0/0
 16236 ;;		On exit  : 0/0
 16237 ;;		Unchanged: 0/0
 16238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16239 ;;      Params:         0       0       0       0
 16240 ;;      Locals:         1       0       0       0
 16241 ;;      Temps:          0       0       0       0
 16242 ;;      Totals:         1       0       0       0
 16243 ;;Total ram usage:        1 bytes
 16244 ;; Hardware stack levels used:    1
 16245 ;; Hardware stack levels required when called:    2
 16246 ;; This function calls:
 16247 ;;		i2_Coupe_Moteur
 16248 ;;		i2_Etat_Update
 16249 ;; This function is called by:
 16250 ;;		i2_IRQ_CAPOT
 16251 ;;		i2_IRQ_I_MOTEUR_1
 16252 ;; This function uses a non-reentrant model
 16253 ;;
 16254                           
 16255                           	psect	text103
 16256  0026BC                     __ptext103:
 16257                           	opt stack 0
 16258  0026BC                     i2_Alarme_On:
 16259                           	opt stack 11
 16260                           
 16261                           ;incstack = 0
 16262                           ;i2Alarme_On@alarme_new_value stored from wreg
 16263  0026BC  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 16264                           
 16265                           ;alarme.c: 22: Etat_Update(1);
 16266  0026BE  0E01               	movlw	1
 16267  0026C0  EC5C  F012         	call	i2_Etat_Update
 16268                           
 16269                           ;alarme.c: 23: Alarme = alarme_new_value;
 16270  0026C4  C002  F0A9         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 16271                           
 16272                           ;alarme.c: 24: Coupe_Moteur();
 16273  0026C8  EF00  F013         	goto	i2_Coupe_Moteur	;wreg free
 16274  0026CC                     __end_ofi2_Alarme_On:
 16275                           	opt stack 0
 16276                           tblptru	equ	0xFF8
 16277                           tblptrh	equ	0xFF7
 16278                           tblptrl	equ	0xFF6
 16279                           tablat	equ	0xFF5
 16280                           prodh	equ	0xFF4
 16281                           prodl	equ	0xFF3
 16282                           intcon	equ	0xFF2
 16283                           intcon2	equ	0xFF1
 16284                           intcon3	equ	0xFF0
 16285                           postinc0	equ	0xFEE
 16286                           wreg	equ	0xFE8
 16287                           indf1	equ	0xFE7
 16288                           postdec1	equ	0xFE5
 16289                           fsr1h	equ	0xFE2
 16290                           fsr1l	equ	0xFE1
 16291                           bsr	equ	0xFE0
 16292                           indf2	equ	0xFDF
 16293                           postinc2	equ	0xFDE
 16294                           postdec2	equ	0xFDD
 16295                           fsr2h	equ	0xFDA
 16296                           fsr2l	equ	0xFD9
 16297                           status	equ	0xFD8
 16298                           
 16299 ;; *************** function i2_Etat_Update *****************
 16300 ;; Defined at:
 16301 ;;		line 74 in file "action.c"
 16302 ;; Parameters:    Size  Location     Type
 16303 ;;  etat_new_val    1    wreg     unsigned char 
 16304 ;; Auto vars:     Size  Location     Type
 16305 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 16306 ;; Return value:  Size  Location     Type
 16307 ;;                  1    wreg      void 
 16308 ;; Registers used:
 16309 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16310 ;; Tracked objects:
 16311 ;;		On entry : 0/0
 16312 ;;		On exit  : 0/0
 16313 ;;		Unchanged: 0/0
 16314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16315 ;;      Params:         0       0       0       0
 16316 ;;      Locals:         1       0       0       0
 16317 ;;      Temps:          0       0       0       0
 16318 ;;      Totals:         1       0       0       0
 16319 ;;Total ram usage:        1 bytes
 16320 ;; Hardware stack levels used:    1
 16321 ;; This function calls:
 16322 ;;		Nothing
 16323 ;; This function is called by:
 16324 ;;		i2_Alarme_On
 16325 ;; This function uses a non-reentrant model
 16326 ;;
 16327                           
 16328                           	psect	text104
 16329  0024B8                     __ptext104:
 16330                           	opt stack 0
 16331  0024B8                     i2_Etat_Update:
 16332                           	opt stack 12
 16333                           
 16334                           ;incstack = 0
 16335                           ;i2Etat_Update@etat_new_value stored from wreg
 16336  0024B8  6E01               	movwf	i2Etat_Update@etat_new_value,c
 16337                           
 16338                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 16339  0024BA  504C               	movf	_Etat_Precedent_Index,w,c
 16340  0024BC  0F6A               	addlw	low _Etat_Log
 16341  0024BE  6ED9               	movwf	fsr2l,c
 16342  0024C0  6ADA               	clrf	fsr2h,c
 16343  0024C2  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 16344                           
 16345                           ;action.c: 76: Etat = etat_new_value;
 16346  0024C6  C001  F0AA         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 16347                           
 16348                           ;action.c: 77: Etat_Precedent_Index++;
 16349  0024CA  2A4C               	incf	_Etat_Precedent_Index,f,c
 16350                           
 16351                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 16352  0024CC  0E0A               	movlw	10
 16353  0024CE  184C               	xorwf	_Etat_Precedent_Index,w,c
 16354  0024D0  B4D8               	btfsc	status,2,c
 16355                           
 16356                           ;action.c: 79: Etat_Precedent_Index = 0;
 16357  0024D2  6A4C               	clrf	_Etat_Precedent_Index,c
 16358  0024D4  0012               	return		;funcret
 16359  0024D6                     __end_ofi2_Etat_Update:
 16360                           	opt stack 0
 16361                           tblptru	equ	0xFF8
 16362                           tblptrh	equ	0xFF7
 16363                           tblptrl	equ	0xFF6
 16364                           tablat	equ	0xFF5
 16365                           prodh	equ	0xFF4
 16366                           prodl	equ	0xFF3
 16367                           intcon	equ	0xFF2
 16368                           intcon2	equ	0xFF1
 16369                           intcon3	equ	0xFF0
 16370                           postinc0	equ	0xFEE
 16371                           wreg	equ	0xFE8
 16372                           indf1	equ	0xFE7
 16373                           postdec1	equ	0xFE5
 16374                           fsr1h	equ	0xFE2
 16375                           fsr1l	equ	0xFE1
 16376                           bsr	equ	0xFE0
 16377                           indf2	equ	0xFDF
 16378                           postinc2	equ	0xFDE
 16379                           postdec2	equ	0xFDD
 16380                           fsr2h	equ	0xFDA
 16381                           fsr2l	equ	0xFD9
 16382                           status	equ	0xFD8
 16383                           
 16384 ;; *************** function i2_Coupe_Moteur *****************
 16385 ;; Defined at:
 16386 ;;		line 309 in file "action.c"
 16387 ;; Parameters:    Size  Location     Type
 16388 ;;		None
 16389 ;; Auto vars:     Size  Location     Type
 16390 ;;		None
 16391 ;; Return value:  Size  Location     Type
 16392 ;;                  1    wreg      void 
 16393 ;; Registers used:
 16394 ;;		cstack
 16395 ;; Tracked objects:
 16396 ;;		On entry : 0/0
 16397 ;;		On exit  : 0/0
 16398 ;;		Unchanged: 0/0
 16399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16400 ;;      Params:         0       0       0       0
 16401 ;;      Locals:         0       0       0       0
 16402 ;;      Temps:          0       0       0       0
 16403 ;;      Totals:         0       0       0       0
 16404 ;;Total ram usage:        0 bytes
 16405 ;; Hardware stack levels used:    1
 16406 ;; Hardware stack levels required when called:    1
 16407 ;; This function calls:
 16408 ;;		i2_TIMER2_Off
 16409 ;; This function is called by:
 16410 ;;		i2_Alarme_On
 16411 ;; This function uses a non-reentrant model
 16412 ;;
 16413                           
 16414                           	psect	text105
 16415  002600                     __ptext105:
 16416                           	opt stack 0
 16417  002600                     i2_Coupe_Moteur:
 16418                           	opt stack 11
 16419                           
 16420                           ;action.c: 310: TIMER2_Off();
 16421                           
 16422                           ;incstack = 0
 16423  002600  ECB6  F013         	call	i2_TIMER2_Off	;wreg free
 16424                           
 16425                           ;action.c: 322: LATCbits.LATC0 = 0;
 16426  002604  908B               	bcf	3979,0,c	;volatile
 16427                           
 16428                           ;action.c: 323: LATCbits.LATC1 = 0;
 16429  002606  928B               	bcf	3979,1,c	;volatile
 16430                           
 16431                           ;action.c: 324: OVDCOND = 0b00000000;
 16432  002608  6A6B               	clrf	3947,c	;volatile
 16433                           
 16434                           ;action.c: 325: LATD4 = 0;LATD5 = 0;
 16435  00260A  988C               	bcf	3980,4,c	;volatile
 16436  00260C  9A8C               	bcf	3980,5,c	;volatile
 16437                           
 16438                           ;action.c: 326: LATD6 = 0;LATD7 = 0;
 16439  00260E  9C8C               	bcf	3980,6,c	;volatile
 16440  002610  9E8C               	bcf	3980,7,c	;volatile
 16441  002612  0012               	return		;funcret
 16442  002614                     __end_ofi2_Coupe_Moteur:
 16443                           	opt stack 0
 16444                           tblptru	equ	0xFF8
 16445                           tblptrh	equ	0xFF7
 16446                           tblptrl	equ	0xFF6
 16447                           tablat	equ	0xFF5
 16448                           prodh	equ	0xFF4
 16449                           prodl	equ	0xFF3
 16450                           intcon	equ	0xFF2
 16451                           intcon2	equ	0xFF1
 16452                           intcon3	equ	0xFF0
 16453                           postinc0	equ	0xFEE
 16454                           wreg	equ	0xFE8
 16455                           indf1	equ	0xFE7
 16456                           postdec1	equ	0xFE5
 16457                           fsr1h	equ	0xFE2
 16458                           fsr1l	equ	0xFE1
 16459                           bsr	equ	0xFE0
 16460                           indf2	equ	0xFDF
 16461                           postinc2	equ	0xFDE
 16462                           postdec2	equ	0xFDD
 16463                           fsr2h	equ	0xFDA
 16464                           fsr2l	equ	0xFD9
 16465                           status	equ	0xFD8
 16466                           
 16467 ;; *************** function i2_TIMER2_Off *****************
 16468 ;; Defined at:
 16469 ;;		line 165 in file "timer.c"
 16470 ;; Parameters:    Size  Location     Type
 16471 ;;		None
 16472 ;; Auto vars:     Size  Location     Type
 16473 ;;		None
 16474 ;; Return value:  Size  Location     Type
 16475 ;;                  1    wreg      void 
 16476 ;; Registers used:
 16477 ;;		None
 16478 ;; Tracked objects:
 16479 ;;		On entry : 0/0
 16480 ;;		On exit  : 0/0
 16481 ;;		Unchanged: 0/0
 16482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16483 ;;      Params:         0       0       0       0
 16484 ;;      Locals:         0       0       0       0
 16485 ;;      Temps:          0       0       0       0
 16486 ;;      Totals:         0       0       0       0
 16487 ;;Total ram usage:        0 bytes
 16488 ;; Hardware stack levels used:    1
 16489 ;; This function calls:
 16490 ;;		Nothing
 16491 ;; This function is called by:
 16492 ;;		i2_Coupe_Moteur
 16493 ;; This function uses a non-reentrant model
 16494 ;;
 16495                           
 16496                           	psect	text106
 16497  00276C                     __ptext106:
 16498                           	opt stack 0
 16499  00276C                     i2_TIMER2_Off:
 16500                           	opt stack 11
 16501                           
 16502                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 16503                           
 16504                           ;incstack = 0
 16505  00276C  929D               	bcf	3997,1,c	;volatile
 16506                           
 16507                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 16508  00276E  929E               	bcf	3998,1,c	;volatile
 16509  002770  0012               	return		;funcret
 16510  002772                     __end_ofi2_TIMER2_Off:
 16511                           	opt stack 0
 16512                           tblptru	equ	0xFF8
 16513                           tblptrh	equ	0xFF7
 16514                           tblptrl	equ	0xFF6
 16515                           tablat	equ	0xFF5
 16516                           prodh	equ	0xFF4
 16517                           prodl	equ	0xFF3
 16518                           intcon	equ	0xFF2
 16519                           intcon2	equ	0xFF1
 16520                           intcon3	equ	0xFF0
 16521                           postinc0	equ	0xFEE
 16522                           wreg	equ	0xFE8
 16523                           indf1	equ	0xFE7
 16524                           postdec1	equ	0xFE5
 16525                           fsr1h	equ	0xFE2
 16526                           fsr1l	equ	0xFE1
 16527                           bsr	equ	0xFE0
 16528                           indf2	equ	0xFDF
 16529                           postinc2	equ	0xFDE
 16530                           postdec2	equ	0xFDD
 16531                           fsr2h	equ	0xFDA
 16532                           fsr2l	equ	0xFD9
 16533                           status	equ	0xFD8
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           intcon2	equ	0xFF1
 16542                           intcon3	equ	0xFF0
 16543                           postinc0	equ	0xFEE
 16544                           wreg	equ	0xFE8
 16545                           indf1	equ	0xFE7
 16546                           postdec1	equ	0xFE5
 16547                           fsr1h	equ	0xFE2
 16548                           fsr1l	equ	0xFE1
 16549                           bsr	equ	0xFE0
 16550                           indf2	equ	0xFDF
 16551                           postinc2	equ	0xFDE
 16552                           postdec2	equ	0xFDD
 16553                           fsr2h	equ	0xFDA
 16554                           fsr2l	equ	0xFD9
 16555                           status	equ	0xFD8
 16556                           
 16557                           	psect	rparam
 16558  0000                     tblptru	equ	0xFF8
 16559                           tblptrh	equ	0xFF7
 16560                           tblptrl	equ	0xFF6
 16561                           tablat	equ	0xFF5
 16562                           prodh	equ	0xFF4
 16563                           prodl	equ	0xFF3
 16564                           intcon	equ	0xFF2
 16565                           intcon2	equ	0xFF1
 16566                           intcon3	equ	0xFF0
 16567                           postinc0	equ	0xFEE
 16568                           wreg	equ	0xFE8
 16569                           indf1	equ	0xFE7
 16570                           postdec1	equ	0xFE5
 16571                           fsr1h	equ	0xFE2
 16572                           fsr1l	equ	0xFE1
 16573                           bsr	equ	0xFE0
 16574                           indf2	equ	0xFDF
 16575                           postinc2	equ	0xFDE
 16576                           postdec2	equ	0xFDD
 16577                           fsr2h	equ	0xFDA
 16578                           fsr2l	equ	0xFD9
 16579                           status	equ	0xFD8
 16580                           
 16581                           	psect	temp
 16582  000051                     btemp:
 16583                           	opt stack 0
 16584  000051                     	ds	1
 16585  0000                     int$flags	set	btemp
 16586                           tblptru	equ	0xFF8
 16587                           tblptrh	equ	0xFF7
 16588                           tblptrl	equ	0xFF6
 16589                           tablat	equ	0xFF5
 16590                           prodh	equ	0xFF4
 16591                           prodl	equ	0xFF3
 16592                           intcon	equ	0xFF2
 16593                           intcon2	equ	0xFF1
 16594                           intcon3	equ	0xFF0
 16595                           postinc0	equ	0xFEE
 16596                           wreg	equ	0xFE8
 16597                           indf1	equ	0xFE7
 16598                           postdec1	equ	0xFE5
 16599                           fsr1h	equ	0xFE2
 16600                           fsr1l	equ	0xFE1
 16601                           bsr	equ	0xFE0
 16602                           indf2	equ	0xFDF
 16603                           postinc2	equ	0xFDE
 16604                           postdec2	equ	0xFDD
 16605                           fsr2h	equ	0xFDA
 16606                           fsr2l	equ	0xFD9
 16607                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         537
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     19     160
    BANK1           256      0     256
    BANK2           256     11     139

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Disparait->_Buzzer_Etat
    _IRQ_PION_Metal_Apparait->_Buzzer_Etat
    _IRQ_I_MOTEUR_1->_Alarme_On
    _IRQ_CAPOT->_Alarme_On
    _Alarme_On->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update
    _IRQ_PION_CHANGEMENT_ETAT->i1_Buzzer_Etat

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_IRQ_CAPOT->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update

Critical Paths under _main in BANK0

    _Cycle->_Mouvement_X
    _Cycle->_delay_s
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  186153
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  186054
                                             10 BANK2      1     1      0
                          _Alarme_On
                        _Buzzer_Etat
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   40091
                                              7 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26413
                          _Alarme_On
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   64875
                                             17 BANK0      2     0      2
                                              7 BANK2      1     1      0
                          _Alarme_On
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      31
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   37041
                          _Alarme_On
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2864
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     461
                                             55 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3786
                                             26 COMRAM    14     8      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3579
                                             40 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2833
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40422
                                              7 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13194
                                             17 BANK0      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26744
                                             17 BANK0      1     1      0
                          _Alarme_On
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13129
                                             63 COMRAM     3     3      0
                                             13 BANK0      4     4      0
                                              0 BANK2      7     0      7
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     465
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0      31
                        _Buzzer_Etat
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      31
                        _Buzzer_Etat
                          _TIMER5_On
 ---------------------------------------------------------------------------------
 (7) _TIMER5_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     335
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
           _IRQ_PION_CHANGEMENT_ETAT
                            _SPI_ISR
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _IRQ_PION_CHANGEMENT_ETAT                            0     0      0      22
                      i1_Buzzer_Etat
                       i1_TIMER5_Off
                        i1_TIMER5_On
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_On                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     132
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Alarme_On
       _Coupe_Moteur
         _TIMER2_Off
       _Etat_Update
     _Buzzer_Etat
     _Coupe_Moteur
       _TIMER2_Off
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Alarme_On
         _Coupe_Moteur
           _TIMER2_Off
         _Etat_Update
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Buzzer_Etat
           _TIMER5_On
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _IRQ_PION_CHANGEMENT_ETAT
     i1_Buzzer_Etat
     i1_TIMER5_Off
     i1_TIMER5_On
   _SPI_ISR
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      B      8B       9       54.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      A0       5      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27B       3        0.0%
DATA                 0      0     27B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon May 13 06:35:00 2019

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l248 0C58  
                                                   l610 1BC8  
                                                   l531 26E4  
                                                   l259 0CF0  
                                                   l283 213C  
                                                   l630 0E9C  
                                                   l622 0E16  
                                                   l607 1B88  
                                                   l624 0E4A  
                                                   l637 0F20  
                                                   l577 2476  
                                                   l588 1E5C  
                                                   l699 255C  
                                                   l983 21C6  
                                                   _GIE 007F97  
                                                   l998 20A6  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009F  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 2772  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0288  
                                          ___ftdiv@cntr 0032  
                                          ___ftdiv@sign 0037  
                                                  l1030 1926  
                                                  l2000 1B4A  
                                                  l1026 1A32  
                                                  l1042 1192  
                                                  l1019 19D0  
                                                  l1037 1988  
                                                  l1063 128E  
                                                  l1064 124A  
                                                  l1333 1782  
                                                  l1423 0470  
                                                  l1440 05E2  
                                                  l1432 0564  
                                                  l2056 1708  
                                                  l2072 1450  
                                                  l2058 1750  
                                                  l1507 07C2  
                                                  l1435 059C  
                                                  l1509 07D8  
                                                  l1453 062E  
                                                  l1437 05A0  
                                                  l1438 05A6  
                                                  l1439 05E0  
                                                  l2178 2068  
                                                  l1723 08F4  
                                                  l1483 0758  
                                                  l1467 06A6  
                                                  l2188 212E  
                                                  l1389 017A  
                                                  l1738 09B4  
                                                  l1756 0A8A  
                                                  l1757 0A8E  
                                                  l8001 03B2  
                                                  l1988 1AEC  
                                                  l8101 0682  
                                                  l8013 0452  
                                                  l8021 0478  
                                                  l8023 04A8  
                                                  l8007 03D4  
                                                  l8201 07E6  
                                                  l8105 0688  
                                                  l8033 0552  
                                                  l8025 04AE  
                                                  l8009 0422  
                                                  l8203 07EC  
                                                  l8115 069A  
                                                  l8035 0558  
                                                  l7421 255E  
                                                  l7501 1B8C  
                                                  l8141 0700  
                                                  l8125 06E2  
                                                  l8053 05F2  
                                                  l8045 05AC  
                                                  l8037 055E  
                                                  l8029 04C6  
                                                  l8301 16E8  
                                                  l8151 0712  
                                                  l8047 05D4  
                                                  l9031 0BCC  
                                                  _ADIF 007CF6  
                                                  l7521 1BC0  
                                                  l8137 06FA  
                                                  l8129 06E8  
                                                  l8153 071E  
                                                  l8065 060A  
                                                  l8057 05F8  
                                                  l8209 07F8  
                                                  l8401 169E  
                                                  l9113 0CFC  
                                                  l9105 0CDE  
                                                  l9025 0BBE  
                                                  l8163 0766  
                                                  l8155 0724  
                                                  l8251 1B12  
                                                  l8403 16A2  
                                                  l9131 0D3E  
                                                  l9115 0D0C  
                                                  l9051 0C0E  
                                                  l7621 1C68  
                                                  l7541 0E68  
                                                  l7461 1E4C  
                                                  l7525 1BD0  
                                                  l7509 1BA0  
                                                  l8181 078C  
                                                  l8165 076C  
                                                  l8173 0774  
                                                  l8093 0670  
                                                  l8069 0610  
                                                  l8421 21EC  
                                                  l8341 13E8  
                                                  l9141 0D4C  
                                                  l9125 0D1A  
                                                  l7551 0EC4  
                                                  l7535 0E3E  
                                                  l8183 0798  
                                                  l8175 0780  
                                                  l8159 0764  
                                                  l8079 0622  
                                                  l8423 21F0  
                                                  l8255 1B24  
                                                  l8247 1AF4  
                                                  l8319 172C  
                                                  l8407 16B6  
                                                  l9151 0D86  
                                                  l9055 0C1A  
                                                  l9047 0BFC  
                                                  l7641 1CA8  
                                                  l7633 1C92  
                                                  l7625 1C74  
                                                  l7617 1C5C  
                                                  l7545 0E70  
                                                  l7473 1E72  
                                                  l7465 1E56  
                                                  l7481 1E82  
                                                  l7801 0984  
                                                  l8185 079E  
                                                  l8177 0786  
                                                  l8169 076E  
                                                  l8193 07B0  
                                                  l8089 066A  
                                                  l8417 21E6  
                                                  l8433 2208  
                                                  l8273 1B5C  
                                                  l8257 1B36  
                                                  l8249 1AFE  
                                                  l8337 13C8  
                                                  l9161 0DD6  
                                                  l9153 0D96  
                                                  l7627 1C7C  
                                                  l7563 0EF4  
                                                  l7555 0ECE  
                                                  l7467 1E62  
                                                  l7651 2038  
                                                  l8195 07D0  
                                                  l8259 1B40  
                                                  l8611 1AD6  
                                                  l9155 0DA6  
                                                  l9075 0C64  
                                                  l9067 0C46  
                                                  l7629 1C80  
                                                  l7637 1C9C  
                                                  l7581 0F78  
                                                  l7573 0F52  
                                                  l7653 2040  
                                                  l7901 0B80  
                                                  l7821 09F0  
                                                  l7805 0988  
                                                  l8189 07A4  
                                                  l8429 2200  
                                                  l8293 2552  
                                                  l8373 1626  
                                                  l8605 1AC0  
                                                  l9157 0DB6  
                                                  l9149 0D70  
                                                  l9093 0CB2  
                                                  l9077 0C74  
                                                  l9165 0DE6  
                                                  l7559 0EEC  
                                                  l7495 1B7C  
                                                  l7663 205E  
                                                  l7655 2044  
                                                  l7671 2106  
                                                  l7903 0B8A  
                                                  l7911 0BB4  
                                                  l8199 07DE  
                                                  l8455 2378  
                                                  l8391 167A  
                                                  l8375 1630  
                                                  l8607 1AC6  
                                                  l8447 25D0  
                                                  l9159 0DC6  
                                                  l9167 0E08  
                                                  l7761 17C0  
                                                  l7577 0F70  
                                                  l7569 0F48  
                                                  l7585 0FA4  
                                                  l7673 210E  
                                                  l7841 0A20  
                                                  l7817 09DC  
                                                  l7921 00F0  
                                                  l8457 237C  
                                                  l8705 1196  
                                                  l8801 25BC  
                                                  l9089 0CA0  
                                                  l7675 2112  
                                                  l7907 0B96  
                                                  l7835 0A1C  
                                                  l7827 09F4  
                                                  l7851 0A48  
                                                  l7923 0106  
                                                  l8395 168A  
                                                  l8731 11D2  
                                                  l8635 21CE  
                                                  _ADON 007E10  
                                                  l7765 17D6  
                                                  l7757 178C  
                                                  l7853 0A52  
                                                  l7909 0B9C  
                                                  l7925 010E  
                                                  l8741 11EA  
                                                  l7679 2124  
                                                  l7599 2506  
                                                  l7783 08FC  
                                                  l7951 01F4  
                                                  l7919 00D6  
                                                  l8663 20AE  
                                                  l8399 1692  
                                                  l7793 092A  
                                                  l7777 08E0  
                                                  l7961 0234  
                                                  l7945 01C4  
                                                  l7937 017E  
                                                  l7929 014E  
                                                  l8761 122A  
                                                  l8753 120E  
                                                  l8825 192A  
                                                  l7891 0AF6  
                                                  l7859 0A68  
                                                  l7787 0902  
                                                  l7963 0254  
                                                  l7955 020C  
                                                  l8755 1216  
                                                  l8739 11E6  
                                                  l7893 0AFC  
                                                  l7885 0AE0  
                                                  l7869 0AA8  
                                                  l7877 0AC2  
                                                  l7949 01E8  
                                                  l8925 1A24  
                                                  l8781 126A  
                                                  l8749 1200  
                                                  l8853 1968  
                                                  l7895 0B3E  
                                                  l7879 0AC8  
                                                  l7983 0330  
                                                  l7975 02CC  
                                                  l7967 0274  
                                                  l7959 022C  
                                                  l8919 1A12  
                                                  l8679 235C  
                                                  l8775 1258  
                                                  l8767 123E  
                                                  l8943 1558  
                                                  l7993 036E  
                                                  l7985 0350  
                                                  l7977 02EC  
                                                  l7969 02A6  
                                                  l8785 1278  
                                                  l7979 030C  
                                                  l8891 19D4  
                                                  l8859 197A  
                                                  l7997 0390  
                                                  l7989 035E  
                                                  l8789 1286  
                                                  l8797 25B6  
                                                  STR_1 3FB9  
                                                  STR_2 3EB7  
                                                  STR_3 3FEC  
                                                  STR_4 3F9B  
                                                  STR_5 3FF9  
                                                  STR_6 3FB9  
                                                  STR_7 3F6A  
                                                  STR_8 3FBC  
                                                  STR_9 3FB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0FBA  
                                      ??i2_Coupe_Moteur 0001  
                                                  _IOFS 007E9A  
                                                  _PEIE 007F96  
                                                  u6170 01BE  
                                                  u5710 0EBE  
                                                  u6521 16D8  
                                                  _PR5H 000F91  
                                                  u6541 16F8  
                                                  u6621 161C  
                                                  u5750 0F42  
                                                  u5670 0E38  
                                                  _PR5L 000F90  
                                                  u7407 189C  
                                                  u6640 164E  
                                                  u7417 18AE  
                                                  u7427 18C0  
                                                  u6395 07CC  
                                                  u6571 13B8  
                                                  u6396 07CE  
                                                  u7437 18D2  
                                                  u7357 1842  
                                                  u6645 1646  
                                                  u7447 18E4  
                                                  u7367 1854  
                                                  u6591 13D8  
                                                  u7377 1866  
                                                  u7387 1878  
                                                  u7397 188A  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 277E  
                                    _Detection_Pion_Off 272E  
                                         _nb_s_bequille 00A2  
                                       _Option_Multitas 027E  
                                                  _Etat 00AA  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 2138  
                               IRQ_Execution@IRQ_Indice 0012  
                                          ___ftpack@arg 000F  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 13A8  
                                 __end_of_IRQ_Execution 1F3E  
                                          ___ftpack@exp 0012  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 004E  
                           __end_of_EUSART1_RX_T3_LOCAL 08D8  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00CE  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                          ___ftmul@sign 0025  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A7  
                                       __end_of_Init_IT 21A4  
                                          ___fttol@exp1 00F2  
                                          ___fttol@lval 00EE  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 0008  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 004A  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 265C  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 2638  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0012  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 264A  
            _Surveillance_Consommation_Moteur_1_Activer 2626  
                                    __size_ofi1_IRQ_PWM 0004  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 264A  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 2626  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0012  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 2638  
            _Surveillance_Consommation_Moteur_2_Activer 2614  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0287  
                                       __end_of___lbdiv 220C  
                                                 STR_10 3F16  
                                                 STR_11 3FDB  
                                       __end_of___awmod 1CB2  
                                        _Bequille_I_Max 0092  
                                       __end_of___ftdiv 1782  
                                      _LOW_PRIORITY_IRQ 0018  
                                       __end_of___ftmul 147E  
                                       __end_of___fttol 16C8  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 001E  
                                       __end_of___lwdiv 2072  
                                         _Init_Moteur_1 266C  
                                         _Init_Moteur_2 265C  
                                       __end_of___lwmod 2138  
                                                 i1l610 1C38  
                                                 i1l531 26F2  
                                                 i1l630 1042  
                                                 i1l622 0FBC  
                                                 i1l607 1BF8  
                                                 i1l624 0FF0  
                                                 i1l570 1FB6  
                                                 i1l650 0042  
                                                 i1l652 004C  
                                                 i1l637 10C6  
                                                 i1l566 1F92  
                                                 i1l662 008C  
                                                 i1l654 0058  
                                                 i1l664 0098  
                                                 i1l656 0064  
                                                 i1l666 00A4  
                                                 i1l658 0080  
                                                 i1l659 0074  
                                                 i1l588 1EB4  
                                                 i1l669 00AE  
                                                 i2l710 20E4  
                                                 i2l713 20EE  
                                                 i2l706 20CC  
                                                 i2l708 20D8  
                                                 i2l699 2588  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                    __size_of_TIMER5_On 0004  
                                         _Init_Variable 1550  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 25C4  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 238E  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0BBE  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 231A  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3EAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 249A  
                                       __end_of_isdigit 250E  
                                         ___ftpack@sign 0013  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0287  
                                                 status 000FD8  
                                     _Mouvement_Startup 004D  
                                       __end_of_sprintf 0BBE  
                          __end_of_EUSART1_Check_Buffer 22CA  
                                       ___lbdiv@divisor 000F  
                                          ?i1_TIMER5_On 0001  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 009A  
                          __size_of_Check_List_Moteur_2 0034  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 2746  
                                       __initialization 1FDE  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 0281  
                                  EUSART1_RX_T3_LOCAL@B 0282  
                                  EUSART1_RX_T3_LOCAL@C 0283  
                                  EUSART1_RX_T3_LOCAL@D 0284  
                                  EUSART1_RX_T3_LOCAL@E 0285  
                                  EUSART1_RX_T3_LOCAL@F 0286  
                                      __end_of_Etat_Get 2272  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1F8E  
                                          __end_of_main 2170  
                                   __end_of_Init_TIMER0 243E  
                                   __end_of_Init_TIMER2 2528  
                                   __end_of_Init_TIMER5 22F2  
                                      __end_of_Init_ADC 245E  
                            ??_IRQ_PION_CHANGEMENT_ETAT 0006  
                                      __end_of_Init_SPI 23D8  
                                      __end_of_Init_PWM 24F2  
                                 __end_of_delay_n_100ms 25C4  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0289  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                         ___fttol@sign1 00ED  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                          _Consigne_Max_Moteur_Bequille 0094  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 20B8  
                            _Check_List_Moteur_Bequille 2072  
                           __end_of_EUSART1_Buffer_Send 183C  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                      __end_of___ftpack 1B6A  
                                      __end_of___lbtoft 23FC  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1344 233E  
                                                i1l1664 12CC  
                                                i1l7005 1C30  
                                                i1l7025 100E  
                                                i1l7009 1C40  
                                                i1l7043 1092  
                                                i1l7035 106A  
                                                i1l7019 0FE4  
                                                i1l7061 1116  
                                                i1l7053 10EE  
                                                i1l7029 1016  
                                     __end_of_IRQ_CAPOT 273E  
                                                i1l7047 109A  
                                                i1l7039 1074  
                                                i1l7065 111E  
                                                i1l7057 10F8  
                                                i1l7069 114A  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6911 14D6  
                                                i1l6831 1FC6  
                                                i1l6815 1F9E  
                                                i1l6921 1510  
                                                i1l6905 148C  
                                                i1l6817 1FA6  
                                                i1l6915 14F4  
                                                i1l6917 14FC  
                                                i1l6933 1532  
                                                i1l6829 1FC0  
                                                i1l6845 1FD2  
                                                i1l6927 152E  
                                                i1l6863 131A  
                                                i1l6951 1EAE  
                                                i1l6873 1354  
                                                i1l6881 1374  
                                                i1l6857 12D0  
                                                i1l6849 12A2  
                                                i1l6953 1EBA  
                                                i1l6867 1338  
                                                i1l6947 1EA4  
                                                i1l6877 1370  
                                                i1l6869 1340  
                                                i1l6885 138C  
                                                i1l6959 1ECA  
                                                i1l6967 1EDA  
                                                i1l6985 1BFC  
                                                i1l6993 1C10  
                                                i1l6979 1BEC  
                                                i2l4781 258A  
                                     __end_ofi1_IRQ_ADC 1160  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 2786  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 001A  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 028A  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A5  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A9  
                                      __end_of_delay_1s 231A  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 2558  
                                 _Consigne_Max_Moteur_X 0096  
                                 _Consigne_Max_Moteur_Z 0095  
                                     __end_of_TIMER2_On 2754  
                                     __end_of_TIMER5_On 2782  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 199C  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 26E8  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0289  
                                                ___wmul 238E  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 270E  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 2702  
                                             ??___ftdiv 002F  
                                             ??___ftmul 0021  
                                             ??___fttol 003C  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0287  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1FE4  
                                                clear_1 1FF2  
                                                clear_2 2004  
                                                clear_3 2014  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 25EC  
                                 ___ftmul@f3_as_product 0026  
                                           _Etat_Update 247C  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3EA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00ED  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 26DA  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000E  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 26CC  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 26AC  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 20FA  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 201A  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 241E  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 241E  
                                           _Init_TIMER2 250E  
                                           _Init_TIMER5 22CA  
                                         ___rparam_used 000001  
                                            ___ftdiv@f1 0029  
                                            ___ftdiv@f2 002C  
                                            ___ftdiv@f3 0033  
                                         ?i2_IRQ_TIMER2 0001  
                                            ___lbtoft@c 001A  
                                            ___ftmul@f1 001B  
                                            ___ftmul@f2 001E  
                                     _Capteur_Capot_Off 2776  
                                         __end_of_Cycle 0E14  
                                            ___fttol@f1 0038  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 0280  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 245E  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 1D18  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 24B8  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 229E  
                                __size_ofi1_IRQ_TIMER_0 0058  
                                __size_ofi1_IRQ_TIMER_5 0070  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 1550  
                                   __end_of_Mouvement_X 129A  
                                   __end_of_Mouvement_Z 199C  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F7  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0093  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 26DA  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00CE  
                             __end_of_Capteur_Capot_Off 277A  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_ofi1_TIMER5_On 0004  
                                  __size_of_IRQ_TIMER_0 0058  
                                  __size_of_IRQ_TIMER_5 0070  
                               __size_ofi1_Coupe_Moteur 0014  
                                  __size_ofi2_IRQ_CAPOT 0008  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0048  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                             ?___ftpack 000F  
                                             ?___lbtoft 0017  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                                 __end_ofi2_Etat_Update 24D6  
                                   _Check_List_Moteur_1 1A46  
                                   _Check_List_Moteur_2 21A4  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0E14  
                                               _P4_busy 00AC  
                                               _IRQ_PWM 277A  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 275A  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 009C  
                                               _SPI_ISR 129A  
                              Mouvement_X@type_consigne 00FE  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 20F2  
                                 __end_ofi1_Buzzer_Etat 26F6  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1DE0  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A3  
                                     delay_s@delay_time 00FE  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 271A  
                                    __end_of_TIMER2_Off 2760  
                                    __end_of_TIMER5_Off 2724  
                                      _consigne_pwm_max 008D  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 2170  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1E92  
                                         i1_IRQ_TIMER_5 1BDA  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00AB  
                                               ___lbdiv 21D8  
                                               ___awmod 1C4A  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                               ___ftdiv 16C8  
                                 __size_of_Coupe_Moteur 0014  
                                       __size_of___wmul 0026  
                                               ___ftmul 13A8  
                          __size_of_EUSART1_RX_T3_LOCAL 0806  
                                               ___fttol 160C  
                                 __end_of_Etat_Intitule 2240  
                                               ___lwdiv 2028  
                                               ___lwmod 20FA  
                                         _type_consigne 0091  
                                               __pcinit 1FDE  
                                            ??___ftpack 0014  
                                            ??___lbtoft 001A  
                                               _delay_s 2368  
                                               __ramtop 0300  
                                               __ptext0 2138  
                                               _nb_Pion 00A1  
                                               __ptext1 1550  
                                               __ptext2 22CA  
                                               __ptext3 250E  
                                               __ptext4 241E  
                                               __ptext5 23B4  
                                               __ptext6 1CB2  
                          __end_of_Init_Moteur_Bequille 269C  
                                               __ptext7 24D6  
                                               __ptext8 2170  
                                               __ptext9 23FC  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 273E  
                                           _Mouvement_X 1160  
                                           _Mouvement_Z 18F2  
                                     __end_of_hexpowers 3EB7  
                                  _Init_Input_Capture_0 23FC  
                        _Capteur_Capot_Compteur_Temps_S 009E  
                                               _dpowers 3EA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 2542  
                                               _isdigit 24F2  
                                   _EUSART1_IT_ACTIVATE 26F6  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1F3E  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0010  
                                          _Consigne_Max 0097  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08D8  
                                        __pintcode_body 20B8  
                                  end_of_initialization 201A  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004C  
                                         __Lmediumconst 3EA4  
                             _Surveillance_Capteur_Pion 0089  
                                               int_func 20B8  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 25D8  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 2736  
                                             i1_IRQ_ADC 0FBA  
                    _Surveillance_Consommation_Moteur_1 008B  
                    _Surveillance_Consommation_Moteur_2 008A  
                                             i1_IRQ_PWM 2782  
                               __size_ofi2_Coupe_Moteur 0014  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 2542  
                                             _TIMER2_On 274E  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                             _TIMER5_On 277E  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 00A0  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A6  
                                  __end_ofi1_TIMER2_Off 2766  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 272E  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTBbits 000F81  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 276C  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                     __size_of_IRQ_PION_CHANGEMENT_ETAT 0050  
                             ?_IRQ_PION_CHANGEMENT_ETAT 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0016  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 25D8  
                                      _nb_100ms_platine 00A4  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 2772  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 00FF  
                                   __end_of_delay_100ms 18F2  
                                           ___ftdiv@exp 0036  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 00FF  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 2342  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008E  
                                         _IRQ_Execution 1EEA  
                                             _Alarme_On 269C  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0288  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 25EC  
                                           ___ftmul@exp 0024  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                            ?_TIMER5_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 23B4  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1FDE  
                                 __end_of_Stop_Moteur_1 2776  
                                             _Init_Port 1CB2  
                              _IRQ_PION_Metal_Disparait 2528  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                                       _delay_s_counter 008C  
                             __end_of_Detection_Pion_On 2368  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 2272  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 2600  
                                  _Init_Moteur_Bequille 268C  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 0046  
                                         _delay_n_100ms 25B0  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005A  
                                 __end_of_Init_Moteur_1 267C  
                                 __end_of_Init_Moteur_2 266C  
                                 __end_of_Init_Variable 160C  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                     __size_of___ftpack 008A  
                                     __size_of___lbtoft 0024  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 009B  
                                _Image_Courant_Moteur_2 009A  
                                         __pcstackBANK0 00ED  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 267C  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 183C  
                                            ?_Init_Port 0001  
                                          _isdigit$3659 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00D2  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F6  
                                           sprintf@prec 00F3  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??i1_TIMER5_On 0005  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0003  
                                           ??_IRQ_CAPOT 0011  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 2600  
                                             __pintcode 0008  
                                         __pmediumconst 3EA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0016  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                           ??_TIMER5_On 000F  
                                             __ptext100 2584  
                                             __ptext101 259A  
                                              ?___lbdiv 000F  
                                             __ptext102 2746  
                                             __ptext103 26BC  
                                             __ptext104 24B8  
                                             __ptext105 2600  
                                             __ptext106 276C  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 0280  
                                              ?___ftdiv 0029  
                                              ?___ftmul 001B  
                                              ?___fttol 0038  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008F  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A8  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 00FE  
                                          ?_Mouvement_Z 0287  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0256  
                                  __size_of_Etat_Update 001E  
                                             _hexpowers 3EAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 259A  
                                      i2_IRQ_I_MOTEUR_2 2584  
                                          i1_TIMER2_Off 2760  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 2724  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 2614  
                                              _PIE3bits 000FA3  
                                __size_ofi2_Etat_Update 001E  
                                              i1u513_20 10E8  
                                              i1u505_20 0FDE  
                                              i1u509_20 1064  
                                          i2_IRQ_TIMER2 2766  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 00FA  
                                   __end_ofi1_TIMER5_On 278A  
                                   __end_of_IRQ_TIMER_0 1E92  
                                   __end_of_IRQ_TIMER_5 1BDA  
                                   __end_ofi2_IRQ_CAPOT 274E  
                                              _SPI_MODE 0278  
                      __end_of_IRQ_PION_CHANGEMENT_ETAT 1FDE  
                                          i2_TIMER2_Off 276C  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 2736  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 1782  
                                         i1_Etat_Update 249A  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0099  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1AE0  
                           __end_of_Check_List_Moteur_2 21D8  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 2240  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 243E  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 23B4  
                                              _Init_PWM 24D6  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009D  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1DE0  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 1D7E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 1D7E  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 1D18  
                                   __end_ofi1_Alarme_On 26BC  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 26CC  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                                      __size_of___ftdiv 00BA  
                                      __size_of___ftmul 00D6  
                                      __size_of___fttol 00BC  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                                              ___ftpack 1AE0  
                                              ___lbtoft 23D8  
                            ??_IRQ_PION_Metal_Disparait 0010  
                                      __size_of_delay_s 0026  
                              __end_of_SPI_Check_Buffer 229E  
                                    __end_of_u_Init_PWM 1E3A  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F1  
                                            sprintf@val 00F4  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 24B8  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 22F2  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 243E  
                                              __ptext11 1F3E  
                                              __ptext20 2772  
                                              __ptext12 26F6  
                                              __ptext21 266C  
                                              __ptext13 0BBE  
                                              __ptext30 1AE0  
                                              __ptext22 1D7E  
                                              __ptext14 25B0  
                                              __ptext31 267C  
                                              __ptext23 2342  
                                              __ptext15 18F2  
                                              __ptext40 2542  
                                              __ptext32 2776  
                                              __ptext24 25C4  
                                              __ptext16 265C  
                                              __ptext41 1D18  
                                              __ptext33 199C  
                                              __ptext25 1A46  
                                              __ptext17 21A4  
                                              __ptext50 238E  
                                              __ptext42 272E  
                                              __ptext34 1DE0  
                                              __ptext26 23D8  
                                              __ptext18 1160  
                                              __ptext51 20FA  
                                              __ptext43 2072  
                                              __ptext35 2368  
                                              __ptext27 160C  
                                              __ptext19 2702  
                                              __ptext60 2754  
                                              __ptext52 2028  
                                              __ptext44 21D8  
                                              __ptext36 270E  
                                              __ptext28 13A8  
                                              __ptext61 277A  
                                              __ptext53 22F2  
                                              __ptext45 2272  
                                              __ptext37 274E  
                                              __ptext29 16C8  
                                              __ptext70 269C  
                                              __ptext62 2528  
                                              __ptext54 183C  
                                              __ptext46 229E  
                                              __ptext38 26CC  
                                              __ptext71 247C  
                                              __ptext63 271A  
                                              __ptext55 1EEA  
                                              __ptext47 00D2  
                                              __ptext39 268C  
                                              __ptext80 1BDA  
                                              __ptext72 25D8  
                                              __ptext64 245E  
                                              __ptext56 1B6A  
                                              __ptext48 08D8  
                                              __ptext81 26AC  
                                              __ptext73 275A  
                                              __ptext65 277E  
                                              __ptext57 1E3A  
                                              __ptext49 24F2  
                                              __ptext90 129A  
                                              __ptext82 249A  
                                              __ptext74 0E14  
                                              __ptext66 26DA  
                                              __ptext58 2614  
                                              __ptext91 1F8E  
                                              __ptext83 25EC  
                                              __ptext75 220C  
                                              __ptext67 2558  
                                              __ptext59 2626  
                                              __ptext92 2786  
                                              __ptext84 2760  
                                              __ptext76 2240  
                                              __ptext68 256E  
                                              __ptext93 2724  
                                              __ptext85 1E92  
                                              __ptext77 1C4A  
                                              __ptext69 2736  
                                              __ptext94 26E8  
                                              __ptext86 2638  
                                              __ptext78 1782  
                                              __ptext95 231A  
                                              __ptext87 264A  
                                              __ptext96 147E  
                                              __ptext88 2782  
                                              __ptext97 273E  
                                              __ptext89 0FBA  
                                              __ptext99 2766  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 2702  
                                          _UART_TX_TEXT 00AD  
                                      __size_of_sprintf 02E6  
                                              _consigne 0098  
                                         i1_Buzzer_Etat 26E8  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 0038  
                                           i1_TIMER5_On 2786  
                                           _IRQ_TIMER_0 1E3A  
                                           _IRQ_TIMER_5 1B6A  
                          __size_of_Detection_Pion_Init 0014  
                                           i2_IRQ_CAPOT 2746  
                              __end_of_Capteur_Capot_On 268C  
                                        _IRQ_I_MOTEUR_1 256E  
                                        _IRQ_I_MOTEUR_2 2558  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 0049  
                                         _Etat_Intitule 220C  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 147E  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00B6  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                              _IRQ_PION_CHANGEMENT_ETAT 1F8E  
                                  __size_of_Mouvement_X 013A  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 1A46  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 0090  
                                           i1_Alarme_On 26AC  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F2  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 247C  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0287  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1EEA  
                                 __end_ofi1_IRQ_TIMER_5 1C4A  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 26BC  
                          __end_of_EUSART1_Transmit_ISR 2342  
                                __end_of_IRQ_I_MOTEUR_1 2584  
                                __end_of_IRQ_I_MOTEUR_2 256E  
                                            _IRQ_TIMER2 2754  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 004B  
                              __end_ofi2_IRQ_I_MOTEUR_1 25B0  
                              __end_ofi2_IRQ_I_MOTEUR_2 259A  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 270E  
                                            _TIMER2_Off 275A  
                                            _TIMER5_Off 271A  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F9  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 00FE  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
