

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Apr 30 10:19:10 2019

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.42
   128                           ; Generated 13/04/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F4431 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162                           	psect	mediumconst
   163  003EA4                     __pmediumconst:
   164                           	opt stack 0
   165  003EA4  00                 	db	0
   166  003EA5                     _dpowers:
   167                           	opt stack 0
   168  003EA5  0001               	dw	1
   169  003EA7  000A               	dw	10
   170  003EA9  0064               	dw	100
   171  003EAB  03E8               	dw	1000
   172  003EAD  2710               	dw	10000
   173  003EAF                     __end_of_dpowers:
   174                           	opt stack 0
   175  003EAF                     _hexpowers:
   176                           	opt stack 0
   177  003EAF  0001               	dw	1
   178  003EB1  0010               	dw	16
   179  003EB3  0100               	dw	256
   180  003EB5  1000               	dw	4096
   181  003EB7                     __end_of_hexpowers:
   182                           	opt stack 0
   183  0000                     _SSPCONbits	set	4038
   184  0000                     _SSPSTATbits	set	4039
   185  0000                     _RCREG1	set	4014
   186  0000                     _SSPBUF	set	4041
   187  0000                     _TXREG1	set	4013
   188  0000                     _TXSTA1	set	4012
   189  0000                     _RCSTA1	set	4011
   190  0000                     _BAUDCON	set	4010
   191  0000                     _RCSTA1bits	set	4011
   192  0000                     _SPBRGH	set	4016
   193  0000                     _SPBRG	set	4015
   194  0000                     _TXSTA1bits	set	4012
   195  0000                     _BAUDCONbits	set	4010
   196  0000                     _PR5L	set	3984
   197  0000                     _PR5H	set	3985
   198  0000                     _TMR5H	set	3976
   199  0000                     _TMR5L	set	3975
   200  0000                     _T5CONbits	set	4023
   201  0000                     _PR2	set	4043
   202  0000                     _T2CONbits	set	4042
   203  0000                     _T2CON	set	4042
   204  0000                     _TMR0L	set	4054
   205  0000                     _TMR0H	set	4055
   206  0000                     _T0CONbits	set	4053
   207  0000                     _LATEbits	set	3981
   208  0000                     _SEVTCMPL	set	3953
   209  0000                     _SEVTCMPH	set	3952
   210  0000                     _PWMCON0bits	set	3951
   211  0000                     _PTCON0bits	set	3967
   212  0000                     _PTCON1bits	set	3966
   213  0000                     _OVDCONS	set	3946
   214  0000                     _OVDCOND	set	3947
   215  0000                     _DTCON	set	3949
   216  0000                     _PWMCON1	set	3950
   217  0000                     _PWMCON0	set	3951
   218  0000                     _PTCON1	set	3966
   219  0000                     _PTCON0	set	3967
   220  0000                     _PTPERH	set	3962
   221  0000                     _LATE	set	3981
   222  0000                     _LATD	set	3980
   223  0000                     _LATC	set	3979
   224  0000                     _LATB	set	3978
   225  0000                     _LATA	set	3977
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISE	set	3990
   228  0000                     _TRISDbits	set	3989
   229  0000                     _TRISD	set	3989
   230  0000                     _TRISCbits	set	3988
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISBbits	set	3987
   233  0000                     _TRISB	set	3987
   234  0000                     _TRISAbits	set	3986
   235  0000                     _TRISA	set	3986
   236  0000                     _TMR2	set	4044
   237  0000                     _LATCbits	set	3979
   238  0000                     _RCREG	set	4014
   239  0000                     _PIR1bits	set	3998
   240  0000                     _PDC1H	set	3958
   241  0000                     _PDC1L	set	3959
   242  0000                     _PDC0H	set	3960
   243  0000                     _PDC0L	set	3961
   244  0000                     _PTPERL	set	3963
   245  0000                     _PORTAbits	set	3968
   246  0000                     _PORTCbits	set	3970
   247  0000                     _CAP2CONbits	set	3938
   248  0000                     _PIR3bits	set	4004
   249  0000                     _IPR3bits	set	4005
   250  0000                     _PIE3bits	set	4003
   251  0000                     _CAP1CONbits	set	3939
   252  0000                     _RCONbits	set	4048
   253  0000                     _INTCON3bits	set	4080
   254  0000                     _INTCON2bits	set	4081
   255  0000                     _INTCONbits	set	4082
   256  0000                     _LATAbits	set	3977
   257  0000                     _ADRESH	set	4036
   258  0000                     _IPR1bits	set	3999
   259  0000                     _PIE1bits	set	3997
   260  0000                     _ADCON3bits	set	3994
   261  0000                     _ADCON1bits	set	4033
   262  0000                     _ADCON0bits	set	4034
   263  0000                     _ANSEL1	set	4025
   264  0000                     _ANSEL0	set	4024
   265  0000                     _ADCHS	set	3993
   266  0000                     _ADCON3	set	3994
   267  0000                     _ADCON2bits	set	4032
   268  0000                     _ADCON2	set	4032
   269  0000                     _ADCON1	set	4033
   270  0000                     _ADCON0	set	4034
   271  0000                     _OSCCON	set	4051
   272  0000                     _PORTBbits	set	3969
   273  0000                     _TRMT1	set	32097
   274  0000                     _LATC5	set	31837
   275  0000                     _GIE	set	32663
   276  0000                     _PEIE	set	32662
   277  0000                     _TMR2IF	set	31985
   278  0000                     _LATD7	set	31847
   279  0000                     _LATD6	set	31846
   280  0000                     _LATD5	set	31845
   281  0000                     _LATD4	set	31844
   282  0000                     _SEVTDIR	set	31603
   283  0000                     _INT0IF	set	32657
   284  0000                     _PTIF	set	32036
   285  0000                     _GODONE	set	32273
   286  0000                     _ADIF	set	31990
   287  0000                     _ADON	set	32272
   288  0000                     _IOFS	set	32410
   289  003EB7                     STR_2:
   290  003EB7  63                 	db	99	;'c'
   291  003EB8  6F                 	db	111	;'o'
   292  003EB9  6E                 	db	110	;'n'
   293  003EBA  73                 	db	115	;'s'
   294  003EBB  69                 	db	105	;'i'
   295  003EBC  67                 	db	103	;'g'
   296  003EBD  6E                 	db	110	;'n'
   297  003EBE  65                 	db	101	;'e'
   298  003EBF  3D                 	db	61	;'='
   299  003EC0  25                 	db	37
   300  003EC1  64                 	db	100	;'d'
   301  003EC2  20                 	db	32
   302  003EC3  69                 	db	105	;'i'
   303  003EC4  5F                 	db	95	;'_'
   304  003EC5  31                 	db	49	;'1'
   305  003EC6  3D                 	db	61	;'='
   306  003EC7  25                 	db	37
   307  003EC8  64                 	db	100	;'d'
   308  003EC9  20                 	db	32
   309  003ECA  69                 	db	105	;'i'
   310  003ECB  5F                 	db	95	;'_'
   311  003ECC  32                 	db	50	;'2'
   312  003ECD  3D                 	db	61	;'='
   313  003ECE  25                 	db	37
   314  003ECF  64                 	db	100	;'d'
   315  003ED0  20                 	db	32
   316  003ED1  64                 	db	100	;'d'
   317  003ED2  75                 	db	117	;'u'
   318  003ED3  74                 	db	116	;'t'
   319  003ED4  79                 	db	121	;'y'
   320  003ED5  3D                 	db	61	;'='
   321  003ED6  25                 	db	37
   322  003ED7  64                 	db	100	;'d'
   323  003ED8  20                 	db	32
   324  003ED9  65                 	db	101	;'e'
   325  003EDA  72                 	db	114	;'r'
   326  003EDB  72                 	db	114	;'r'
   327  003EDC  65                 	db	101	;'e'
   328  003EDD  75                 	db	117	;'u'
   329  003EDE  72                 	db	114	;'r'
   330  003EDF  3D                 	db	61	;'='
   331  003EE0  25                 	db	37
   332  003EE1  64                 	db	100	;'d'
   333  003EE2  20                 	db	32
   334  003EE3  50                 	db	80	;'P'
   335  003EE4  61                 	db	97	;'a'
   336  003EE5  74                 	db	116	;'t'
   337  003EE6  69                 	db	105	;'i'
   338  003EE7  6E                 	db	110	;'n'
   339  003EE8  61                 	db	97	;'a'
   340  003EE9  67                 	db	103	;'g'
   341  003EEA  65                 	db	101	;'e'
   342  003EEB  5F                 	db	95	;'_'
   343  003EEC  4E                 	db	78	;'N'
   344  003EED  62                 	db	98	;'b'
   345  003EEE  5F                 	db	95	;'_'
   346  003EEF  45                 	db	69	;'E'
   347  003EF0  73                 	db	115	;'s'
   348  003EF1  73                 	db	115	;'s'
   349  003EF2  61                 	db	97	;'a'
   350  003EF3  69                 	db	105	;'i'
   351  003EF4  3D                 	db	61	;'='
   352  003EF5  25                 	db	37
   353  003EF6  64                 	db	100	;'d'
   354  003EF7  20                 	db	32
   355  003EF8  43                 	db	67	;'C'
   356  003EF9  61                 	db	97	;'a'
   357  003EFA  70                 	db	112	;'p'
   358  003EFB  74                 	db	116	;'t'
   359  003EFC  65                 	db	101	;'e'
   360  003EFD  75                 	db	117	;'u'
   361  003EFE  72                 	db	114	;'r'
   362  003EFF  5F                 	db	95	;'_'
   363  003F00  43                 	db	67	;'C'
   364  003F01  61                 	db	97	;'a'
   365  003F02  70                 	db	112	;'p'
   366  003F03  6F                 	db	111	;'o'
   367  003F04  74                 	db	116	;'t'
   368  003F05  5F                 	db	95	;'_'
   369  003F06  4E                 	db	78	;'N'
   370  003F07  62                 	db	98	;'b'
   371  003F08  5F                 	db	95	;'_'
   372  003F09  45                 	db	69	;'E'
   373  003F0A  76                 	db	118	;'v'
   374  003F0B  65                 	db	101	;'e'
   375  003F0C  6E                 	db	110	;'n'
   376  003F0D  65                 	db	101	;'e'
   377  003F0E  6D                 	db	109	;'m'
   378  003F0F  65                 	db	101	;'e'
   379  003F10  6E                 	db	110	;'n'
   380  003F11  74                 	db	116	;'t'
   381  003F12  3D                 	db	61	;'='
   382  003F13  25                 	db	37
   383  003F14  64                 	db	100	;'d'
   384  003F15  00                 	db	0
   385  003F16                     STR_10:
   386  003F16  25                 	db	37
   387  003F17  30                 	db	48	;'0'
   388  003F18  32                 	db	50	;'2'
   389  003F19  58                 	db	88	;'X'
   390  003F1A  20                 	db	32
   391  003F1B  25                 	db	37
   392  003F1C  30                 	db	48	;'0'
   393  003F1D  32                 	db	50	;'2'
   394  003F1E  58                 	db	88	;'X'
   395  003F1F  20                 	db	32
   396  003F20  25                 	db	37
   397  003F21  30                 	db	48	;'0'
   398  003F22  32                 	db	50	;'2'
   399  003F23  58                 	db	88	;'X'
   400  003F24  20                 	db	32
   401  003F25  25                 	db	37
   402  003F26  30                 	db	48	;'0'
   403  003F27  32                 	db	50	;'2'
   404  003F28  58                 	db	88	;'X'
   405  003F29  20                 	db	32
   406  003F2A  25                 	db	37
   407  003F2B  30                 	db	48	;'0'
   408  003F2C  32                 	db	50	;'2'
   409  003F2D  58                 	db	88	;'X'
   410  003F2E  20                 	db	32
   411  003F2F  25                 	db	37
   412  003F30  30                 	db	48	;'0'
   413  003F31  32                 	db	50	;'2'
   414  003F32  58                 	db	88	;'X'
   415  003F33  20                 	db	32
   416  003F34  25                 	db	37
   417  003F35  30                 	db	48	;'0'
   418  003F36  32                 	db	50	;'2'
   419  003F37  58                 	db	88	;'X'
   420  003F38  20                 	db	32
   421  003F39  25                 	db	37
   422  003F3A  30                 	db	48	;'0'
   423  003F3B  32                 	db	50	;'2'
   424  003F3C  58                 	db	88	;'X'
   425  003F3D  20                 	db	32
   426  003F3E  25                 	db	37
   427  003F3F  30                 	db	48	;'0'
   428  003F40  32                 	db	50	;'2'
   429  003F41  58                 	db	88	;'X'
   430  003F42  20                 	db	32
   431  003F43  25                 	db	37
   432  003F44  30                 	db	48	;'0'
   433  003F45  32                 	db	50	;'2'
   434  003F46  58                 	db	88	;'X'
   435  003F47  20                 	db	32
   436  003F48  25                 	db	37
   437  003F49  30                 	db	48	;'0'
   438  003F4A  32                 	db	50	;'2'
   439  003F4B  58                 	db	88	;'X'
   440  003F4C  20                 	db	32
   441  003F4D  25                 	db	37
   442  003F4E  30                 	db	48	;'0'
   443  003F4F  31                 	db	49	;'1'
   444  003F50  58                 	db	88	;'X'
   445  003F51  20                 	db	32
   446  003F52  25                 	db	37
   447  003F53  30                 	db	48	;'0'
   448  003F54  31                 	db	49	;'1'
   449  003F55  58                 	db	88	;'X'
   450  003F56  20                 	db	32
   451  003F57  25                 	db	37
   452  003F58  30                 	db	48	;'0'
   453  003F59  31                 	db	49	;'1'
   454  003F5A  58                 	db	88	;'X'
   455  003F5B  20                 	db	32
   456  003F5C  25                 	db	37
   457  003F5D  30                 	db	48	;'0'
   458  003F5E  32                 	db	50	;'2'
   459  003F5F  58                 	db	88	;'X'
   460  003F60  25                 	db	37
   461  003F61  30                 	db	48	;'0'
   462  003F62  32                 	db	50	;'2'
   463  003F63  58                 	db	88	;'X'
   464  003F64  20                 	db	32
   465  003F65  25                 	db	37
   466  003F66  30                 	db	48	;'0'
   467  003F67  32                 	db	50	;'2'
   468  003F68  58                 	db	88	;'X'
   469  003F69  00                 	db	0
   470  003F6A                     STR_7:
   471  003F6A  63                 	db	99	;'c'
   472  003F6B  6F                 	db	111	;'o'
   473  003F6C  6E                 	db	110	;'n'
   474  003F6D  73                 	db	115	;'s'
   475  003F6E  69                 	db	105	;'i'
   476  003F6F  67                 	db	103	;'g'
   477  003F70  6E                 	db	110	;'n'
   478  003F71  65                 	db	101	;'e'
   479  003F72  3D                 	db	61	;'='
   480  003F73  25                 	db	37
   481  003F74  64                 	db	100	;'d'
   482  003F75  20                 	db	32
   483  003F76  70                 	db	112	;'p'
   484  003F77  61                 	db	97	;'a'
   485  003F78  74                 	db	116	;'t'
   486  003F79  69                 	db	105	;'i'
   487  003F7A  6E                 	db	110	;'n'
   488  003F7B  3D                 	db	61	;'='
   489  003F7C  25                 	db	37
   490  003F7D  64                 	db	100	;'d'
   491  003F7E  20                 	db	32
   492  003F7F  70                 	db	112	;'p'
   493  003F80  69                 	db	105	;'i'
   494  003F81  6F                 	db	111	;'o'
   495  003F82  6E                 	db	110	;'n'
   496  003F83  3D                 	db	61	;'='
   497  003F84  25                 	db	37
   498  003F85  64                 	db	100	;'d'
   499  003F86  20                 	db	32
   500  003F87  70                 	db	112	;'p'
   501  003F88  6C                 	db	108	;'l'
   502  003F89  61                 	db	97	;'a'
   503  003F8A  74                 	db	116	;'t'
   504  003F8B  69                 	db	105	;'i'
   505  003F8C  6E                 	db	110	;'n'
   506  003F8D  65                 	db	101	;'e'
   507  003F8E  3D                 	db	61	;'='
   508  003F8F  25                 	db	37
   509  003F90  64                 	db	100	;'d'
   510  003F91  20                 	db	32
   511  003F92  70                 	db	112	;'p'
   512  003F93  65                 	db	101	;'e'
   513  003F94  6C                 	db	108	;'l'
   514  003F95  6C                 	db	108	;'l'
   515  003F96  65                 	db	101	;'e'
   516  003F97  3D                 	db	61	;'='
   517  003F98  25                 	db	37
   518  003F99  64                 	db	100	;'d'
   519  003F9A  00                 	db	0
   520  003F9B                     STR_4:
   521  003F9B  6E                 	db	110	;'n'
   522  003F9C  62                 	db	98	;'b'
   523  003F9D  5F                 	db	95	;'_'
   524  003F9E  73                 	db	115	;'s'
   525  003F9F  3D                 	db	61	;'='
   526  003FA0  25                 	db	37
   527  003FA1  64                 	db	100	;'d'
   528  003FA2  20                 	db	32
   529  003FA3  6E                 	db	110	;'n'
   530  003FA4  62                 	db	98	;'b'
   531  003FA5  5F                 	db	95	;'_'
   532  003FA6  50                 	db	80	;'P'
   533  003FA7  69                 	db	105	;'i'
   534  003FA8  6F                 	db	111	;'o'
   535  003FA9  6E                 	db	110	;'n'
   536  003FAA  3D                 	db	61	;'='
   537  003FAB  25                 	db	37
   538  003FAC  64                 	db	100	;'d'
   539  003FAD  20                 	db	32
   540  003FAE  6E                 	db	110	;'n'
   541  003FAF  62                 	db	98	;'b'
   542  003FB0  5F                 	db	95	;'_'
   543  003FB1  54                 	db	84	;'T'
   544  003FB2  69                 	db	105	;'i'
   545  003FB3  6D                 	db	109	;'m'
   546  003FB4  65                 	db	101	;'e'
   547  003FB5  72                 	db	114	;'r'
   548  003FB6  5F                 	db	95	;'_'
   549  003FB7  35                 	db	53	;'5'
   550  003FB8  3D                 	db	61	;'='
   551  003FB9  25                 	db	37
   552  003FBA  64                 	db	100	;'d'
   553  003FBB  00                 	db	0
   554  003FBC                     STR_8:
   555  003FBC  45                 	db	69	;'E'
   556  003FBD  74                 	db	116	;'t'
   557  003FBE  61                 	db	97	;'a'
   558  003FBF  74                 	db	116	;'t'
   559  003FC0  3D                 	db	61	;'='
   560  003FC1  25                 	db	37
   561  003FC2  64                 	db	100	;'d'
   562  003FC3  20                 	db	32
   563  003FC4  6E                 	db	110	;'n'
   564  003FC5  62                 	db	98	;'b'
   565  003FC6  5F                 	db	95	;'_'
   566  003FC7  73                 	db	115	;'s'
   567  003FC8  5F                 	db	95	;'_'
   568  003FC9  66                 	db	102	;'f'
   569  003FCA  6F                 	db	111	;'o'
   570  003FCB  6E                 	db	110	;'n'
   571  003FCC  63                 	db	99	;'c'
   572  003FCD  74                 	db	116	;'t'
   573  003FCE  69                 	db	105	;'i'
   574  003FCF  6F                 	db	111	;'o'
   575  003FD0  6E                 	db	110	;'n'
   576  003FD1  6E                 	db	110	;'n'
   577  003FD2  65                 	db	101	;'e'
   578  003FD3  6D                 	db	109	;'m'
   579  003FD4  65                 	db	101	;'e'
   580  003FD5  6E                 	db	110	;'n'
   581  003FD6  74                 	db	116	;'t'
   582  003FD7  3D                 	db	61	;'='
   583  003FD8  25                 	db	37
   584  003FD9  64                 	db	100	;'d'
   585  003FDA  00                 	db	0
   586  003FDB                     STR_11:
   587  003FDB  30                 	db	48	;'0'
   588  003FDC  31                 	db	49	;'1'
   589  003FDD  32                 	db	50	;'2'
   590  003FDE  33                 	db	51	;'3'
   591  003FDF  34                 	db	52	;'4'
   592  003FE0  35                 	db	53	;'5'
   593  003FE1  36                 	db	54	;'6'
   594  003FE2  37                 	db	55	;'7'
   595  003FE3  38                 	db	56	;'8'
   596  003FE4  39                 	db	57	;'9'
   597  003FE5  41                 	db	65	;'A'
   598  003FE6  42                 	db	66	;'B'
   599  003FE7  43                 	db	67	;'C'
   600  003FE8  44                 	db	68	;'D'
   601  003FE9  45                 	db	69	;'E'
   602  003FEA  46                 	db	70	;'F'
   603  003FEB  00                 	db	0
   604  003FEC                     STR_3:
   605  003FEC  25                 	db	37
   606  003FED  30                 	db	48	;'0'
   607  003FEE  32                 	db	50	;'2'
   608  003FEF  58                 	db	88	;'X'
   609  003FF0  25                 	db	37
   610  003FF1  30                 	db	48	;'0'
   611  003FF2  32                 	db	50	;'2'
   612  003FF3  58                 	db	88	;'X'
   613  003FF4  25                 	db	37
   614  003FF5  30                 	db	48	;'0'
   615  003FF6  32                 	db	50	;'2'
   616  003FF7  58                 	db	88	;'X'
   617  003FF8  00                 	db	0
   618  003FF9                     STR_5:
   619  003FF9  25                 	db	37
   620  003FFA  30                 	db	48	;'0'
   621  003FFB  31                 	db	49	;'1'
   622  003FFC  58                 	db	88	;'X'
   623  003FFD  00                 	db	0
   624  0000                     
   625                           ; #config settings
   626  003FFE  00                 	db	0	; dummy byte at the end
   627  0000                     
   628                           	psect	cinit
   629  001FCC                     __pcinit:
   630                           	opt stack 0
   631  001FCC                     start_initialization:
   632                           	opt stack 0
   633  001FCC                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Clear objects allocated to BANK2 (128 bytes)
   637  001FCC  EE02  F000         	lfsr	0,__pbssBANK2
   638  001FD0  0E80               	movlw	128
   639  001FD2                     clear_0:
   640  001FD2  6AEE               	clrf	postinc0,c
   641  001FD4  06E8               	decf	wreg,f,c
   642  001FD6  E1FD               	bnz	clear_0
   643                           
   644                           ; Clear objects allocated to BANK1 (256 bytes)
   645  001FD8  EE01  F000         	lfsr	0,__pbssBANK1
   646  001FDC  EE11 F000          	lfsr	1,256
   647  001FE0                     clear_1:
   648  001FE0  6AEE               	clrf	postinc0,c
   649  001FE2  50E5               	movf	postdec1,w,c
   650  001FE4  50E1               	movf	fsr1l,w,c
   651  001FE6  E1FC               	bnz	clear_1
   652  001FE8  50E2               	movf	fsr1h,w,c
   653  001FEA  E1FA               	bnz	clear_1
   654                           
   655                           ; Clear objects allocated to BANK0 (141 bytes)
   656  001FEC  EE00  F060         	lfsr	0,__pbssBANK0
   657  001FF0  0E8D               	movlw	141
   658  001FF2                     clear_2:
   659  001FF2  6AEE               	clrf	postinc0,c
   660  001FF4  06E8               	decf	wreg,f,c
   661  001FF6  E1FD               	bnz	clear_2
   662                           
   663                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   664  001FF8  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   665  001FFA  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   666                           
   667                           ; Clear objects allocated to COMRAM (12 bytes)
   668  001FFC  EE00  F043         	lfsr	0,__pbssCOMRAM
   669  002000  0E0C               	movlw	12
   670  002002                     clear_3:
   671  002002  6AEE               	clrf	postinc0,c
   672  002004  06E8               	decf	wreg,f,c
   673  002006  E1FD               	bnz	clear_3
   674  002008                     end_of_initialization:
   675                           	opt stack 0
   676  002008                     __end_of__initialization:
   677                           	opt stack 0
   678  002008  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   679  00200A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   680  00200C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   681  00200E  6EF8               	movwf	tblptru,c
   682  002010  0100               	movlb	0
   683  002012  EF93  F010         	goto	_main	;jump to C main() function
   684                           tblptru	equ	0xFF8
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1h	equ	0xFE2
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bitbssCOMRAM
   692  000278                     __pbitbssCOMRAM:
   693                           	opt stack 0
   694  000278                     _SPI_MODE:
   695                           	opt stack 0
   696  000278                     	ds	1
   697  000279                     _UART_TEST:
   698                           	opt stack 0
   699  000279                     	ds	1
   700  00027A                     _SPI_full:
   701                           	opt stack 0
   702  00027A                     	ds	1
   703  00027B                     _RX1_full:
   704                           	opt stack 0
   705  00027B                     	ds	1
   706  00027C                     _RX1_ABR:
   707                           	opt stack 0
   708  00027C                     	ds	1
   709  00027D                     _Option_Pailleux:
   710                           	opt stack 0
   711  00027D                     	ds	1
   712  00027E                     _Option_Multitas:
   713                           	opt stack 0
   714  00027E                     	ds	1
   715  00027F                     _Nouvelle_Valeur_ADC:
   716                           	opt stack 0
   717  00027F                     	ds	1
   718  000280                     _Detecteur_Pion:
   719                           	opt stack 0
   720  000280                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1h	equ	0xFE2
   726                           fsr1l	equ	0xFE1
   727                           
   728                           	psect	bssCOMRAM
   729  000043                     __pbssCOMRAM:
   730                           	opt stack 0
   731  000043                     _spiRxIndex:
   732                           	opt stack 0
   733  000043                     	ds	1
   734  000044                     _spiTxIndex:
   735                           	opt stack 0
   736  000044                     	ds	1
   737  000045                     _eusart1RxIndex:
   738                           	opt stack 0
   739  000045                     	ds	1
   740  000046                     _eusart1TxIndex:
   741                           	opt stack 0
   742  000046                     	ds	1
   743  000047                     _Compteur_IRQ_I_Moteur_2:
   744                           	opt stack 0
   745  000047                     	ds	1
   746  000048                     _Compteur_IRQ_I_Moteur_1:
   747                           	opt stack 0
   748  000048                     	ds	1
   749  000049                     _Consigne_en_A:
   750                           	opt stack 0
   751  000049                     	ds	1
   752  00004A                     _Capteur_Capot_Nb_Evenement_Autoriser:
   753                           	opt stack 0
   754  00004A                     	ds	1
   755  00004B                     _nb_s_fonctionnement:
   756                           	opt stack 0
   757  00004B                     	ds	1
   758  00004C                     _Etat_Precedent_Index:
   759                           	opt stack 0
   760  00004C                     	ds	1
   761  00004D                     _Mouvement_Startup:
   762                           	opt stack 0
   763  00004D                     	ds	1
   764  00004E                     _nb_100ms_platine_backup:
   765                           	opt stack 0
   766  00004E                     	ds	1
   767                           tblptru	equ	0xFF8
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           postdec1	equ	0xFE5
   771                           fsr1h	equ	0xFE2
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	bssBANK0
   775  000060                     __pbssBANK0:
   776                           	opt stack 0
   777  000060                     _eusart1TxBuffer_Test:
   778                           	opt stack 0
   779  000060                     	ds	10
   780  00006A                     _Etat_Log:
   781                           	opt stack 0
   782  00006A                     	ds	10
   783  000074                     _DVT_Tableau_Pause:
   784                           	opt stack 0
   785  000074                     	ds	6
   786  00007A                     lecture_I_Mot2@Resul:
   787                           	opt stack 0
   788  00007A                     	ds	2
   789  00007C                     lecture_I_Mot1@Resul:
   790                           	opt stack 0
   791  00007C                     	ds	2
   792  00007E                     _erreur_accumulator_max:
   793                           	opt stack 0
   794  00007E                     	ds	2
   795  000080                     _PID_out:
   796                           	opt stack 0
   797  000080                     	ds	2
   798  000082                     _erreur_accumulator:
   799                           	opt stack 0
   800  000082                     	ds	2
   801  000084                     _erreur:
   802                           	opt stack 0
   803  000084                     	ds	2
   804  000086                     _duty:
   805                           	opt stack 0
   806  000086                     	ds	2
   807  000088                     _TIMER0_Etat:
   808                           	opt stack 0
   809  000088                     	ds	1
   810  000089                     _Surveillance_Capteur_Pion:
   811                           	opt stack 0
   812  000089                     	ds	1
   813  00008A                     _Surveillance_Consommation_Moteur_2:
   814                           	opt stack 0
   815  00008A                     	ds	1
   816  00008B                     _Surveillance_Consommation_Moteur_1:
   817                           	opt stack 0
   818  00008B                     	ds	1
   819  00008C                     _delay_s_counter:
   820                           	opt stack 0
   821  00008C                     	ds	1
   822  00008D                     _consigne_pwm_max:
   823                           	opt stack 0
   824  00008D                     	ds	1
   825  00008E                     _consigne_pwm:
   826                           	opt stack 0
   827  00008E                     	ds	1
   828  00008F                     _direction:
   829                           	opt stack 0
   830  00008F                     	ds	1
   831  000090                     _mouvement_option:
   832                           	opt stack 0
   833  000090                     	ds	1
   834  000091                     _type_consigne:
   835                           	opt stack 0
   836  000091                     	ds	1
   837  000092                     _Bequille_I_Max:
   838                           	opt stack 0
   839  000092                     	ds	1
   840  000093                     _Pelle_I_Max:
   841                           	opt stack 0
   842  000093                     	ds	1
   843  000094                     _Consigne_Max_Moteur_Bequille:
   844                           	opt stack 0
   845  000094                     	ds	1
   846  000095                     _Consigne_Max_Moteur_Z:
   847                           	opt stack 0
   848  000095                     	ds	1
   849  000096                     _Consigne_Max_Moteur_X:
   850                           	opt stack 0
   851  000096                     	ds	1
   852  000097                     _Consigne_Max:
   853                           	opt stack 0
   854  000097                     	ds	1
   855  000098                     _consigne:
   856                           	opt stack 0
   857  000098                     	ds	1
   858  000099                     _moteur_indice:
   859                           	opt stack 0
   860  000099                     	ds	1
   861  00009A                     _Image_Courant_Moteur_2:
   862                           	opt stack 0
   863  00009A                     	ds	1
   864  00009B                     _Image_Courant_Moteur_1:
   865                           	opt stack 0
   866  00009B                     	ds	1
   867  00009C                     _Patinage_Nb_Essai_Autoriser:
   868                           	opt stack 0
   869  00009C                     	ds	1
   870  00009D                     _Patinage_Nb_Essai:
   871                           	opt stack 0
   872  00009D                     	ds	1
   873  00009E                     _Capteur_Capot_Compteur_Temps_S:
   874                           	opt stack 0
   875  00009E                     	ds	1
   876  00009F                     _Capteur_Capot_Nb_Evenement:
   877                           	opt stack 0
   878  00009F                     	ds	1
   879  0000A0                     _nb_Pion_Objectif:
   880                           	opt stack 0
   881  0000A0                     	ds	1
   882  0000A1                     _nb_Pion:
   883                           	opt stack 0
   884  0000A1                     	ds	1
   885  0000A2                     _nb_s_bequille:
   886                           	opt stack 0
   887  0000A2                     	ds	1
   888  0000A3                     _nb_s_pelle:
   889                           	opt stack 0
   890  0000A3                     	ds	1
   891  0000A4                     _nb_100ms_platine:
   892                           	opt stack 0
   893  0000A4                     	ds	1
   894  0000A5                     _nb_100ms_pion:
   895                           	opt stack 0
   896  0000A5                     	ds	1
   897  0000A6                     _nb_100ms_Timer_5:
   898                           	opt stack 0
   899  0000A6                     	ds	1
   900  0000A7                     _nb_s_patinage:
   901                           	opt stack 0
   902  0000A7                     	ds	1
   903  0000A8                     _nb_s_fonctionnement_souhaiter:
   904                           	opt stack 0
   905  0000A8                     	ds	1
   906  0000A9                     _Alarme:
   907                           	opt stack 0
   908  0000A9                     	ds	1
   909  0000AA                     _Etat:
   910                           	opt stack 0
   911  0000AA                     	ds	1
   912  0000AB                     _Version:
   913                           	opt stack 0
   914  0000AB                     	ds	1
   915  0000AC                     _P4_busy:
   916                           	opt stack 0
   917  0000AC                     	ds	1
   918  0000AD                     _UART_TX_TEXT:
   919                           	opt stack 0
   920  0000AD                     	ds	64
   921                           tblptru	equ	0xFF8
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           
   928                           	psect	bssBANK1
   929  000100                     __pbssBANK1:
   930                           	opt stack 0
   931  000100                     _SPI_RX_TEXT:
   932                           	opt stack 0
   933  000100                     	ds	64
   934  000140                     _spiTxBuffer:
   935                           	opt stack 0
   936  000140                     	ds	64
   937  000180                     _eusart1TxBuffer:
   938                           	opt stack 0
   939  000180                     	ds	64
   940  0001C0                     _UART_RX_TEXT:
   941                           	opt stack 0
   942  0001C0                     	ds	64
   943                           tblptru	equ	0xFF8
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec1	equ	0xFE5
   947                           fsr1h	equ	0xFE2
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK2
   951  000200                     __pbssBANK2:
   952                           	opt stack 0
   953  000200                     _spiRxBuffer:
   954                           	opt stack 0
   955  000200                     	ds	64
   956  000240                     _eusart1RxBuffer:
   957                           	opt stack 0
   958  000240                     	ds	64
   959                           tblptru	equ	0xFF8
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postdec1	equ	0xFE5
   963                           fsr1h	equ	0xFE2
   964                           fsr1l	equ	0xFE1
   965                           
   966                           	psect	cstackBANK2
   967  000280                     __pcstackBANK2:
   968                           	opt stack 0
   969  000280                     EUSART1_RX_T3_LOCAL@Da:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x0
   973  000280                     	ds	1
   974  000281                     EUSART1_RX_T3_LOCAL@A:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x1
   978  000281                     	ds	1
   979  000282                     EUSART1_RX_T3_LOCAL@B:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x2
   983  000282                     	ds	1
   984  000283                     EUSART1_RX_T3_LOCAL@C:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x3
   988  000283                     	ds	1
   989  000284                     EUSART1_RX_T3_LOCAL@D:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x4
   993  000284                     	ds	1
   994  000285                     EUSART1_RX_T3_LOCAL@E:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x5
   998  000285                     	ds	1
   999  000286                     EUSART1_RX_T3_LOCAL@F:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x6
  1003  000286                     	ds	1
  1004  000287                     Mouvement_Bequille@type_consigne:
  1005                           	opt stack 0
  1006  000287                     Mouvement_Z@type_consigne:
  1007                           	opt stack 0
  1008  000287                     Mouvement_X@direction:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x7
  1012  000287                     	ds	1
  1013  000288                     Mouvement_Bequille@option:
  1014                           	opt stack 0
  1015  000288                     Mouvement_Z@option:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x8
  1019  000288                     	ds	1
  1020  000289                     Mouvement_Bequille@direction:
  1021                           	opt stack 0
  1022  000289                     Mouvement_Z@direction:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x9
  1026  000289                     	ds	1
  1027  00028A                     Cycle@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0xA
  1031  00028A                     	ds	1
  1032                           tblptru	equ	0xFF8
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1h	equ	0xFE2
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  0000ED                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  0000ED                     ??_sprintf:
  1043  0000ED                     ___fttol@sign1:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x0
  1047  0000ED                     	ds	1
  1048  0000EE                     ___fttol@lval:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x1
  1052  0000EE                     	ds	3
  1053  0000F1                     sprintf@idx:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x4
  1057  0000F1                     	ds	1
  1058  0000F2                     sprintf@ap:
  1059                           	opt stack 0
  1060  0000F2                     ___fttol@exp1:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x5
  1064  0000F2                     	ds	1
  1065  0000F3                     sprintf@prec:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x6
  1069  0000F3                     	ds	1
  1070  0000F4                     sprintf@val:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x7
  1074  0000F4                     	ds	2
  1075  0000F6                     sprintf@flag:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x9
  1079  0000F6                     	ds	1
  1080  0000F7                     sprintf@width:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0xA
  1084  0000F7                     	ds	2
  1085  0000F9                     sprintf@c:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0xC
  1089  0000F9                     	ds	1
  1090  0000FA                     ??_EUSART1_RX_T3_LOCAL:
  1091                           
  1092                           ; 1 bytes @ 0xD
  1093  0000FA                     	ds	4
  1094  0000FE                     ??_Check_List_Moteur_Bequille:
  1095  0000FE                     Mouvement_X@type_consigne:
  1096                           	opt stack 0
  1097  0000FE                     delay_s@delay_time:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x11
  1101  0000FE                     	ds	1
  1102  0000FF                     Mouvement_X@option:
  1103                           	opt stack 0
  1104  0000FF                     delay_s@Timer_0_Etat_Prealable:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x12
  1108  0000FF                     	ds	1
  1109                           tblptru	equ	0xFF8
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postdec1	equ	0xFE5
  1113                           fsr1h	equ	0xFE2
  1114                           fsr1l	equ	0xFE1
  1115                           
  1116                           	psect	cstackCOMRAM
  1117  000001                     __pcstackCOMRAM:
  1118                           	opt stack 0
  1119  000001                     i2Etat_Update@etat_new_value:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x0
  1123  000001                     	ds	1
  1124  000002                     i2Alarme_On@alarme_new_value:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x1
  1128  000002                     	ds	1
  1129  000003                     ??_HIGH_PRIORITY_IRQ:
  1130  000003                     
  1131                           ; 1 bytes @ 0x2
  1132  000003                     	ds	2
  1133  000005                     ??_SPI_ISR:
  1134  000005                     ??_EUSART1_Receive_ISR:
  1135  000005                     ??i1_IRQ_ADC:
  1136  000005                     i1Buzzer_Etat@Activation:
  1137                           	opt stack 0
  1138  000005                     i1Etat_Update@etat_new_value:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x4
  1142  000005                     	ds	1
  1143  000006                     i1Alarme_On@alarme_new_value:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5
  1147  000006                     	ds	1
  1148  000007                     EUSART1_Receive_ISR@i:
  1149                           	opt stack 0
  1150  000007                     SPI_ISR@i:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x6
  1154  000007                     	ds	1
  1155  000008                     ??_LOW_PRIORITY_IRQ:
  1156                           
  1157                           ; 1 bytes @ 0x7
  1158  000008                     	ds	7
  1159  00000F                     ??_IRQ_ADC:
  1160  00000F                     ??_delay_100ms:
  1161  00000F                     ??_isdigit:
  1162  00000F                     ?___wmul:
  1163                           	opt stack 0
  1164  00000F                     ?___awmod:
  1165                           	opt stack 0
  1166  00000F                     ?___lwdiv:
  1167                           	opt stack 0
  1168  00000F                     ?___ftpack:
  1169                           	opt stack 0
  1170  00000F                     Init_Variable@i:
  1171                           	opt stack 0
  1172  00000F                     Buzzer_Etat@Activation:
  1173                           	opt stack 0
  1174  00000F                     Etat_Intitule@Etat_Number:
  1175                           	opt stack 0
  1176  00000F                     Etat_Update@etat_new_value:
  1177                           	opt stack 0
  1178  00000F                     EUSART1_Buffer_Send@text:
  1179                           	opt stack 0
  1180  00000F                     ___lbdiv@divisor:
  1181                           	opt stack 0
  1182  00000F                     ___wmul@multiplier:
  1183                           	opt stack 0
  1184  00000F                     ___awmod@dividend:
  1185                           	opt stack 0
  1186  00000F                     ___lwdiv@dividend:
  1187                           	opt stack 0
  1188  00000F                     ___ftpack@arg:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0xE
  1192  00000F                     	ds	1
  1193  000010                     delay_n_100ms@nb_100ms:
  1194                           	opt stack 0
  1195  000010                     Alarme_On@alarme_new_value:
  1196                           	opt stack 0
  1197  000010                     _isdigit$3659:
  1198                           	opt stack 0
  1199  000010                     ___lbdiv@dividend:
  1200                           	opt stack 0
  1201  000010                     EUSART1_Buffer_Send@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0xF
  1205  000010                     	ds	1
  1206  000011                     delay_n_100ms@i:
  1207                           	opt stack 0
  1208  000011                     isdigit@c:
  1209                           	opt stack 0
  1210  000011                     ___lbdiv@counter:
  1211                           	opt stack 0
  1212  000011                     ___wmul@multiplicand:
  1213                           	opt stack 0
  1214  000011                     ___awmod@divisor:
  1215                           	opt stack 0
  1216  000011                     ___lwdiv@divisor:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x10
  1220  000011                     	ds	1
  1221  000012                     IRQ_Execution@IRQ_Indice:
  1222                           	opt stack 0
  1223  000012                     ___ftpack@exp:
  1224                           	opt stack 0
  1225  000012                     ___lbdiv@quotient:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x11
  1229  000012                     	ds	1
  1230  000013                     ___awmod@counter:
  1231                           	opt stack 0
  1232  000013                     ___ftpack@sign:
  1233                           	opt stack 0
  1234  000013                     ___lwdiv@counter:
  1235                           	opt stack 0
  1236  000013                     ___wmul@product:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x12
  1240  000013                     	ds	1
  1241  000014                     ??___ftpack:
  1242  000014                     ___awmod@sign:
  1243                           	opt stack 0
  1244  000014                     ___lwdiv@quotient:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x13
  1248  000014                     	ds	1
  1249  000015                     ??_Etat_Get:
  1250                           
  1251                           ; 1 bytes @ 0x14
  1252  000015                     	ds	1
  1253  000016                     ?___lwmod:
  1254                           	opt stack 0
  1255  000016                     ___lwmod@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x15
  1259  000016                     	ds	1
  1260  000017                     ?___lbtoft:
  1261                           	opt stack 0
  1262  000017                     Etat_Get@Etat_Indice:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  000017                     	ds	1
  1267  000018                     ___lwmod@divisor:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x17
  1271  000018                     	ds	2
  1272  00001A                     ___lbtoft@c:
  1273                           	opt stack 0
  1274  00001A                     ___lwmod@counter:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x19
  1278  00001A                     	ds	1
  1279  00001B                     ?_sprintf:
  1280                           	opt stack 0
  1281  00001B                     ?___ftmul:
  1282                           	opt stack 0
  1283  00001B                     sprintf@sp:
  1284                           	opt stack 0
  1285  00001B                     ___ftmul@f1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x1A
  1289  00001B                     	ds	1
  1290  00001C                     sprintf@f:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x1B
  1294  00001C                     	ds	2
  1295  00001E                     ___ftmul@f2:
  1296                           	opt stack 0
  1297                           
  1298                           ; 3 bytes @ 0x1D
  1299  00001E                     	ds	3
  1300  000021                     ??___ftmul:
  1301                           
  1302                           ; 1 bytes @ 0x20
  1303  000021                     	ds	3
  1304  000024                     ___ftmul@exp:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x23
  1308  000024                     	ds	1
  1309  000025                     ___ftmul@sign:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x24
  1313  000025                     	ds	1
  1314  000026                     ___ftmul@f3_as_product:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x25
  1318  000026                     	ds	3
  1319  000029                     ?___ftdiv:
  1320                           	opt stack 0
  1321  000029                     ___ftdiv@f1:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x28
  1325  000029                     	ds	3
  1326  00002C                     ___ftdiv@f2:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x2B
  1330  00002C                     	ds	3
  1331  00002F                     ??___ftdiv:
  1332                           
  1333                           ; 1 bytes @ 0x2E
  1334  00002F                     	ds	3
  1335  000032                     ___ftdiv@cntr:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x31
  1339  000032                     	ds	1
  1340  000033                     ___ftdiv@f3:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x32
  1344  000033                     	ds	3
  1345  000036                     ___ftdiv@exp:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x35
  1349  000036                     	ds	1
  1350  000037                     ___ftdiv@sign:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x36
  1354  000037                     	ds	1
  1355  000038                     ?___fttol:
  1356                           	opt stack 0
  1357  000038                     ___fttol@f1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x37
  1361  000038                     	ds	4
  1362  00003C                     ??___fttol:
  1363                           
  1364                           ; 1 bytes @ 0x3B
  1365  00003C                     	ds	4
  1366  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x3F
  1370  000040                     	ds	1
  1371  000041                     EUSART1_RX_T3_LOCAL@i:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x40
  1375  000041                     	ds	2
  1376  000043                     tblptru	equ	0xFF8
  1377                           postinc0	equ	0xFEE
  1378                           wreg	equ	0xFE8
  1379                           postdec1	equ	0xFE5
  1380                           fsr1h	equ	0xFE2
  1381                           fsr1l	equ	0xFE1
  1382                           
  1383                           ; 1 bytes @ 0x42
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 616 in file "MOTEUR.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1403 ;;      Params:         0       0       0       0
  1404 ;;      Locals:         0       0       0       0
  1405 ;;      Temps:          0       0       0       0
  1406 ;;      Totals:         0       0       0       0
  1407 ;;Total ram usage:        0 bytes
  1408 ;; Hardware stack levels required when called:   20
  1409 ;; This function calls:
  1410 ;;		_Cycle
  1411 ;;		_EUSART1_Initialize
  1412 ;;		_Init_ADC
  1413 ;;		_Init_IT
  1414 ;;		_Init_PWM
  1415 ;;		_Init_Port
  1416 ;;		_Init_SPI
  1417 ;;		_Init_TIMER0
  1418 ;;		_Init_TIMER2
  1419 ;;		_Init_TIMER5
  1420 ;;		_Init_Variable
  1421 ;; This function is called by:
  1422 ;;		Startup code after reset
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text0
  1427  002126                     __ptext0:
  1428                           	opt stack 0
  1429  002126                     _main:
  1430                           	opt stack 11
  1431                           
  1432                           ;MOTEUR.c: 618: OSCCON = 0b01110000;
  1433                           
  1434                           ;incstack = 0
  1435  002126  0E70               	movlw	112
  1436  002128  6ED3               	movwf	4051,c	;volatile
  1437  00212A                     l283:
  1438  00212A  A4D3               	btfss	4051,2,c	;volatile
  1439  00212C  D7FE               	goto	l283
  1440                           
  1441                           ;MOTEUR.c: 629: Init_Variable();
  1442  00212E  EC9F  F00A         	call	_Init_Variable	;wreg free
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;MOTEUR.c: 633: Init_Port();
  1446  002132  EC50  F00E         	call	_Init_Port	;wreg free
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;MOTEUR.c: 668: Init_IT();
  1450  002136  ECAF  F010         	call	_Init_IT	;wreg free
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;MOTEUR.c: 687: EUSART1_Initialize();
  1454  00213A  EC96  F00F         	call	_EUSART1_Initialize	;wreg free
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;MOTEUR.c: 688: Init_SPI();
  1458  00213E  ECD1  F011         	call	_Init_SPI	;wreg free
  1459                           
  1460                           ;MOTEUR.c: 692: Init_ADC();
  1461  002142  EC16  F012         	call	_Init_ADC	;wreg free
  1462                           
  1463                           ;MOTEUR.c: 694: Init_TIMER0();
  1464  002146  EC06  F012         	call	_Init_TIMER0	;wreg free
  1465                           
  1466                           ;MOTEUR.c: 695: Init_TIMER2();
  1467  00214A  EC7E  F012         	call	_Init_TIMER2	;wreg free
  1468                           
  1469                           ;MOTEUR.c: 696: Init_TIMER5();
  1470  00214E  EC5C  F011         	call	_Init_TIMER5	;wreg free
  1471                           
  1472                           ;MOTEUR.c: 699: Init_PWM();
  1473  002152  EC62  F012         	call	_Init_PWM	;wreg free
  1474                           
  1475                           ;MOTEUR.c: 761: Cycle();
  1476  002156  ECDF  F005         	call	_Cycle	;wreg free
  1477  00215A  EF67  F000         	goto	start
  1478  00215E                     __end_of_main:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1h	equ	0xFE2
  1485                           fsr1l	equ	0xFE1
  1486                           
  1487 ;; *************** function _Init_Variable *****************
  1488 ;; Defined at:
  1489 ;;		line 144 in file "MOTEUR.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  i               1   14[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 3F/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1503 ;;      Params:         0       0       0       0
  1504 ;;      Locals:         1       0       0       0
  1505 ;;      Temps:          0       0       0       0
  1506 ;;      Totals:         1       0       0       0
  1507 ;;Total ram usage:        1 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:   11
  1510 ;; This function calls:
  1511 ;;		_Detection_Pion_Init
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text1
  1518  00153E                     __ptext1:
  1519                           	opt stack 0
  1520  00153E                     _Init_Variable:
  1521                           	opt stack 19
  1522                           
  1523                           ;MOTEUR.c: 185: Batterie_mV = 0;
  1524                           
  1525                           ;incstack = 0
  1526  00153E  0E0B               	movlw	11
  1527  001540  0100               	movlb	0	; () banked
  1528  001542  6FAB               	movwf	_Version& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;MOTEUR.c: 188: unsigned char i;
  1532                           ;MOTEUR.c: 190: for (i = 0; i < 10; i++) {
  1533  001544  6A0F               	clrf	Init_Variable@i,c
  1534  001546                     l8914:
  1535                           
  1536                           ;MOTEUR.c: 191: Etat_Log[i] = 255;
  1537  001546  500F               	movf	Init_Variable@i,w,c
  1538  001548  0F6A               	addlw	low _Etat_Log
  1539  00154A  6ED9               	movwf	fsr2l,c
  1540  00154C  6ADA               	clrf	fsr2h,c
  1541  00154E  68DF               	setf	indf2,c
  1542  001550  2A0F               	incf	Init_Variable@i,f,c
  1543  001552  0E09               	movlw	9
  1544  001554  640F               	cpfsgt	Init_Variable@i,c
  1545  001556  D7F7               	goto	l8914
  1546                           
  1547                           ;MOTEUR.c: 194: }
  1548                           ;MOTEUR.c: 196: Etat_Precedent_Index = 0;
  1549  001558  6A4C               	clrf	_Etat_Precedent_Index,c
  1550                           
  1551                           ;MOTEUR.c: 197: Etat = 255;
  1552  00155A  0100               	movlb	0	; () banked
  1553  00155C  69AA               	setf	_Etat& (0+255),b	;volatile
  1554                           
  1555                           ;MOTEUR.c: 200: Alarme = 0;
  1556  00155E  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  1557                           
  1558                           ;MOTEUR.c: 202: nb_s_fonctionnement_souhaiter = 0;
  1559  001560  6BA8               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1560                           
  1561                           ;MOTEUR.c: 203: nb_s_fonctionnement = 0;
  1562  001562  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;MOTEUR.c: 206: nb_s_patinage = 90;
  1566  001564  0E5A               	movlw	90
  1567  001566  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1568                           
  1569                           ;MOTEUR.c: 207: nb_s_patinage = 45;
  1570  001568  0E2D               	movlw	45
  1571  00156A  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1572                           
  1573                           ;MOTEUR.c: 208: nb_s_patinage = 50;
  1574  00156C  0E32               	movlw	50
  1575  00156E  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;MOTEUR.c: 211: nb_100ms_Timer_5 = 0;
  1579  001570  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1580                           
  1581                           ;MOTEUR.c: 213: nb_100ms_pion = 2;
  1582  001572  0E02               	movlw	2
  1583  001574  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  1584                           
  1585                           ;MOTEUR.c: 214: nb_100ms_platine = 30;
  1586  001576  0E1E               	movlw	30
  1587  001578  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  1588                           
  1589                           ;MOTEUR.c: 216: nb_s_pelle = 30;
  1590  00157A  6FA3               	movwf	_nb_s_pelle& (0+255),b
  1591                           
  1592                           ;MOTEUR.c: 217: nb_s_bequille = 10;
  1593  00157C  0E0A               	movlw	10
  1594  00157E  6FA2               	movwf	_nb_s_bequille& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;MOTEUR.c: 219: Detecteur_Pion = 0;
  1598  001580  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;MOTEUR.c: 220: nb_Pion = 0;
  1602  001582  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;MOTEUR.c: 221: nb_Pion_Objectif = 0;
  1606  001584  6BA0               	clrf	_nb_Pion_Objectif& (0+255),b
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;MOTEUR.c: 222: Mouvement_Startup = 0;
  1610  001586  6A4D               	clrf	_Mouvement_Startup,c
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;MOTEUR.c: 224: delay_s_counter = 0;
  1614  001588  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  1615                           
  1616                           ;MOTEUR.c: 226: moteur_indice = 1;
  1617  00158A  0E01               	movlw	1
  1618  00158C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;MOTEUR.c: 227: consigne = 0;
  1622  00158E  6B98               	clrf	_consigne& (0+255),b	;volatile
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;MOTEUR.c: 228: direction = 0;
  1626  001590  6B8F               	clrf	_direction& (0+255),b	;volatile
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;MOTEUR.c: 229: mouvement_option = 0;
  1630  001592  6B90               	clrf	_mouvement_option& (0+255),b
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;MOTEUR.c: 230: Option_Multitas = 0;
  1634  001594  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;MOTEUR.c: 231: type_consigne = 0;
  1638  001596  6B91               	clrf	_type_consigne& (0+255),b
  1639                           
  1640                           ;MOTEUR.c: 232: Consigne_Max = 20 * 5;
  1641  001598  0E64               	movlw	100
  1642  00159A  6F97               	movwf	_Consigne_Max& (0+255),b	;volatile
  1643                           
  1644                           ;MOTEUR.c: 233: Consigne_Max_Moteur_X = 20 * 5;
  1645  00159C  6F96               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1646                           
  1647                           ;MOTEUR.c: 234: Consigne_Max_Moteur_Z = 20 * 5;
  1648  00159E  6F95               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1649                           
  1650                           ;MOTEUR.c: 237: Moteur_I_Max = 100;
  1651  0015A0  6F94               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1652                           
  1653                           ;MOTEUR.c: 238: Pelle_I_Max = 45;
  1654  0015A2  0E2D               	movlw	45
  1655  0015A4  6F93               	movwf	_Pelle_I_Max& (0+255),b
  1656                           
  1657                           ;MOTEUR.c: 239: Bequille_I_Max = 22;
  1658  0015A6  0E16               	movlw	22
  1659  0015A8  6F92               	movwf	_Bequille_I_Max& (0+255),b
  1660                           
  1661                           ;MOTEUR.c: 242: Consigne_en_A = 4;
  1662  0015AA  0E04               	movlw	4
  1663  0015AC  6E49               	movwf	_Consigne_en_A,c
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;MOTEUR.c: 243: consigne = (char) (Consigne_en_A * 5);
  1667  0015AE  5049               	movf	_Consigne_en_A,w,c
  1668  0015B0  0D05               	mullw	5
  1669  0015B2  CFF3 F098          	movff	prodl,_consigne	;volatile
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;MOTEUR.c: 246: Patinage_Nb_Essai_Autoriser = 3;
  1673  0015B6  0E03               	movlw	3
  1674  0015B8  6F9C               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;MOTEUR.c: 247: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1678  0015BA  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;MOTEUR.c: 248: Capteur_Capot_Compteur_Temps_S = 0;
  1682  0015BC  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;MOTEUR.c: 249: Patinage_Nb_Essai = 0;
  1686  0015BE  6B9D               	clrf	_Patinage_Nb_Essai& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;MOTEUR.c: 250: Capteur_Capot_Nb_Evenement = 0;
  1690  0015C0  6B9F               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;MOTEUR.c: 256: consigne_moteur_3 = 50;
  1694  0015C2  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;MOTEUR.c: 258: Surveillance_Consommation_Moteur_1 = 0;
  1698  0015C4  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;MOTEUR.c: 259: Surveillance_Consommation_Moteur_2 = 0;
  1702  0015C6  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;MOTEUR.c: 261: Detection_Pion_Init();
  1706  0015C8  ECD9  F012         	call	_Detection_Pion_Init	;wreg free
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;MOTEUR.c: 269: Compteur_IRQ_I_Moteur_1 = 0;
  1710  0015CC  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;MOTEUR.c: 270: Compteur_IRQ_I_Moteur_2 = 0;
  1714  0015CE  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;MOTEUR.c: 287: DVT_Compteur = 0;
  1718  0015D0  6BAC               	clrf	_P4_busy& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;MOTEUR.c: 289: DVT_Tableau_Pause[0] = 9;
  1722  0015D2  0E09               	movlw	9
  1723  0015D4  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;MOTEUR.c: 290: DVT_Tableau_Pause[1] = 7;
  1727  0015D6  0E07               	movlw	7
  1728  0015D8  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;MOTEUR.c: 291: DVT_Tableau_Pause[2] = 6;
  1732  0015DA  0E06               	movlw	6
  1733  0015DC  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;MOTEUR.c: 292: DVT_Tableau_Pause[3] = 5;
  1737  0015DE  0E05               	movlw	5
  1738  0015E0  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;MOTEUR.c: 293: DVT_Tableau_Pause[4] = 4;
  1742  0015E2  0E04               	movlw	4
  1743  0015E4  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;MOTEUR.c: 303: Multitas_Courant_Max = 20 * 5 ;
  1747  0015E6  0E03               	movlw	3
  1748  0015E8  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;MOTEUR.c: 306: UART_TEST = 0;
  1752  0015EA  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;MOTEUR.c: 307: RX1_ABR = 0;
  1756  0015EC  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;MOTEUR.c: 308: RX1_full = 0;
  1760  0015EE  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;MOTEUR.c: 309: SPI_full = 0;
  1764  0015F0  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;MOTEUR.c: 311: spiRxIndex = 0;
  1768  0015F2  6A43               	clrf	_spiRxIndex,c	;volatile
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;MOTEUR.c: 312: spiTxIndex = 0;
  1772  0015F4  6A44               	clrf	_spiTxIndex,c	;volatile
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;MOTEUR.c: 313: SPI_MODE = 0;
  1776  0015F6  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1777                           
  1778                           ; BSR set to: 0
  1779  0015F8  0012               	return		;funcret
  1780  0015FA                     __end_of_Init_Variable:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           prodl	equ	0xFF3
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           
  1793 ;; *************** function _Init_TIMER5 *****************
  1794 ;; Defined at:
  1795 ;;		line 183 in file "timer.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1809 ;;      Params:         0       0       0       0
  1810 ;;      Locals:         0       0       0       0
  1811 ;;      Temps:          0       0       0       0
  1812 ;;      Totals:         0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:   10
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text2
  1824  0022B8                     __ptext2:
  1825                           	opt stack 0
  1826  0022B8                     _Init_TIMER5:
  1827                           	opt stack 20
  1828                           
  1829                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;incstack = 0
  1833  0022B8  9EB7               	bcf	4023,7,c	;volatile
  1834                           
  1835                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1836  0022BA  8CB7               	bsf	4023,6,c	;volatile
  1837                           
  1838                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1839  0022BC  9AB7               	bcf	4023,5,c	;volatile
  1840                           
  1841                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1842  0022BE  0E18               	movlw	24
  1843  0022C0  12B7               	iorwf	4023,f,c	;volatile
  1844                           
  1845                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1846  0022C2  84B7               	bsf	4023,2,c	;volatile
  1847                           
  1848                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1849  0022C4  92B7               	bcf	4023,1,c	;volatile
  1850                           
  1851                           ;timer.c: 218: TMR5L = 0;
  1852  0022C6  6A87               	clrf	3975,c	;volatile
  1853                           
  1854                           ;timer.c: 219: TMR5H = 0;
  1855  0022C8  6A88               	clrf	3976,c	;volatile
  1856                           
  1857                           ;timer.c: 221: PR5H = 0x61;
  1858  0022CA  0E61               	movlw	97
  1859  0022CC  6E91               	movwf	3985,c	;volatile
  1860                           
  1861                           ;timer.c: 222: PR5L = 0xA8;
  1862  0022CE  0EA8               	movlw	168
  1863  0022D0  6E90               	movwf	3984,c	;volatile
  1864                           
  1865                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1866  0022D2  90B7               	bcf	4023,0,c	;volatile
  1867                           
  1868                           ;timer.c: 228: TMR5L = 0;
  1869  0022D4  6A87               	clrf	3975,c	;volatile
  1870                           
  1871                           ;timer.c: 229: TMR5H = 0;
  1872  0022D6  6A88               	clrf	3976,c	;volatile
  1873                           
  1874                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1875  0022D8  90A5               	bcf	4005,0,c	;volatile
  1876                           
  1877                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1878  0022DA  80A3               	bsf	4003,0,c	;volatile
  1879                           
  1880                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1881  0022DC  90A4               	bcf	4004,0,c	;volatile
  1882  0022DE  0012               	return		;funcret
  1883  0022E0                     __end_of_Init_TIMER5:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           prodl	equ	0xFF3
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1h	equ	0xFE2
  1891                           fsr1l	equ	0xFE1
  1892                           indf2	equ	0xFDF
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           
  1896 ;; *************** function _Init_TIMER2 *****************
  1897 ;; Defined at:
  1898 ;;		line 133 in file "timer.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          0       0       0       0
  1915 ;;      Totals:         0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:   10
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text3
  1927  0024FC                     __ptext3:
  1928                           	opt stack 0
  1929  0024FC                     _Init_TIMER2:
  1930                           	opt stack 20
  1931                           
  1932                           ;timer.c: 138: T2CON = 0b00100100;
  1933                           
  1934                           ;incstack = 0
  1935  0024FC  0E24               	movlw	36
  1936  0024FE  6ECA               	movwf	4042,c	;volatile
  1937                           
  1938                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1939  002500  50CA               	movf	4042,w,c	;volatile
  1940  002502  0B87               	andlw	-121
  1941  002504  0940               	iorlw	64
  1942  002506  6ECA               	movwf	4042,c	;volatile
  1943                           
  1944                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1945  002508  0EFC               	movlw	-4
  1946  00250A  16CA               	andwf	4042,f,c	;volatile
  1947                           
  1948                           ;timer.c: 149: PR2 = 200;
  1949  00250C  0EC8               	movlw	200
  1950  00250E  6ECB               	movwf	4043,c	;volatile
  1951                           
  1952                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1953  002510  929F               	bcf	3999,1,c	;volatile
  1954                           
  1955                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1956  002512  829F               	bsf	3999,1,c	;volatile
  1957  002514  0CC8               	retlw	200	;funcret
  1958  002516                     __end_of_Init_TIMER2:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           prodl	equ	0xFF3
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           indf2	equ	0xFDF
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           
  1971 ;; *************** function _Init_TIMER0 *****************
  1972 ;; Defined at:
  1973 ;;		line 21 in file "timer.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1987 ;;      Params:         0       0       0       0
  1988 ;;      Locals:         0       0       0       0
  1989 ;;      Temps:          0       0       0       0
  1990 ;;      Totals:         0       0       0       0
  1991 ;;Total ram usage:        0 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:   10
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text4
  2002  00240C                     __ptext4:
  2003                           	opt stack 0
  2004  00240C                     _Init_TIMER0:
  2005                           	opt stack 20
  2006                           
  2007                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  2008                           
  2009                           ;incstack = 0
  2010  00240C  9ED5               	bcf	4053,7,c	;volatile
  2011                           
  2012                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  2013  00240E  9CD5               	bcf	4053,6,c	;volatile
  2014                           
  2015                           ;timer.c: 33: T0CONbits.T0CS = 0;
  2016  002410  9AD5               	bcf	4053,5,c	;volatile
  2017                           
  2018                           ;timer.c: 37: T0CONbits.T0SE = 0;
  2019  002412  98D5               	bcf	4053,4,c	;volatile
  2020                           
  2021                           ;timer.c: 41: T0CONbits.PSA = 0;
  2022  002414  96D5               	bcf	4053,3,c	;volatile
  2023                           
  2024                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  2025  002416  0E07               	movlw	7
  2026  002418  12D5               	iorwf	4053,f,c	;volatile
  2027                           
  2028                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  2029  00241A  12D5               	iorwf	4053,f,c	;volatile
  2030                           
  2031                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  2032  00241C  50D5               	movf	4053,w,c	;volatile
  2033  00241E  0BF8               	andlw	-8
  2034  002420  0904               	iorlw	4
  2035  002422  6ED5               	movwf	4053,c	;volatile
  2036                           
  2037                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  2038  002424  94F1               	bcf	intcon2,2,c	;volatile
  2039                           
  2040                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  2041  002426  9AF2               	bcf	intcon,5,c	;volatile
  2042                           
  2043                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  2044  002428  94F2               	bcf	intcon,2,c	;volatile
  2045  00242A  0012               	return		;funcret
  2046  00242C                     __end_of_Init_TIMER0:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           intcon2	equ	0xFF1
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1h	equ	0xFE2
  2056                           fsr1l	equ	0xFE1
  2057                           indf2	equ	0xFDF
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           
  2061 ;; *************** function _Init_SPI *****************
  2062 ;; Defined at:
  2063 ;;		line 24 in file "spi.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;		None
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;		None
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2
  2072 ;; Tracked objects:
  2073 ;;		On entry : 3F/0
  2074 ;;		On exit  : 3F/0
  2075 ;;		Unchanged: 3F/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2077 ;;      Params:         0       0       0       0
  2078 ;;      Locals:         0       0       0       0
  2079 ;;      Temps:          0       0       0       0
  2080 ;;      Totals:         0       0       0       0
  2081 ;;Total ram usage:        0 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:   10
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_main
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text5
  2092  0023A2                     __ptext5:
  2093                           	opt stack 0
  2094  0023A2                     _Init_SPI:
  2095                           	opt stack 20
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  2099                           
  2100                           ;incstack = 0
  2101  0023A2  8695               	bsf	3989,3,c	;volatile
  2102                           
  2103                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2104  0023A4  8495               	bsf	3989,2,c	;volatile
  2105                           
  2106                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2107  0023A6  9295               	bcf	3989,1,c	;volatile
  2108                           
  2109                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2110  0023A8  9EC7               	bcf	4039,7,c	;volatile
  2111                           
  2112                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2113  0023AA  9CC7               	bcf	4039,6,c	;volatile
  2114                           
  2115                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2116  0023AC  8CC7               	bsf	4039,6,c	;volatile
  2117                           
  2118                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2119  0023AE  9EC6               	bcf	4038,7,c	;volatile
  2120                           
  2121                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2122  0023B0  9CC6               	bcf	4038,6,c	;volatile
  2123                           
  2124                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2125  0023B2  8AC6               	bsf	4038,5,c	;volatile
  2126                           
  2127                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2128  0023B4  88C6               	bsf	4038,4,c	;volatile
  2129                           
  2130                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2131  0023B6  98C6               	bcf	4038,4,c	;volatile
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2135  0023B8  50C6               	movf	4038,w,c	;volatile
  2136  0023BA  0BF0               	andlw	-16
  2137  0023BC  0905               	iorlw	5
  2138  0023BE  6EC6               	movwf	4038,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2142  0023C0  969E               	bcf	3998,3,c	;volatile
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2146  0023C2  869D               	bsf	3997,3,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149  0023C4  0012               	return		;funcret
  2150  0023C6                     __end_of_Init_SPI:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1h	equ	0xFE2
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           
  2165 ;; *************** function _Init_Port *****************
  2166 ;; Defined at:
  2167 ;;		line 14 in file "init.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2
  2176 ;; Tracked objects:
  2177 ;;		On entry : 3F/0
  2178 ;;		On exit  : 3F/0
  2179 ;;		Unchanged: 3F/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2181 ;;      Params:         0       0       0       0
  2182 ;;      Locals:         0       0       0       0
  2183 ;;      Temps:          0       0       0       0
  2184 ;;      Totals:         0       0       0       0
  2185 ;;Total ram usage:        0 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:   10
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text6
  2196  001CA0                     __ptext6:
  2197                           	opt stack 0
  2198  001CA0                     _Init_Port:
  2199                           	opt stack 20
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;init.c: 24: TRISA = 0b11111111;
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;incstack = 0
  2206  001CA0  6892               	setf	3986,c	;volatile
  2207                           
  2208                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2209  001CA2  8092               	bsf	3986,0,c	;volatile
  2210                           
  2211                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2212  001CA4  8292               	bsf	3986,1,c	;volatile
  2213                           
  2214                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2215  001CA6  8492               	bsf	3986,2,c	;volatile
  2216                           
  2217                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2218  001CA8  8692               	bsf	3986,3,c	;volatile
  2219                           
  2220                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2221  001CAA  8892               	bsf	3986,4,c	;volatile
  2222                           
  2223                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2224  001CAC  8A92               	bsf	3986,5,c	;volatile
  2225                           
  2226                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2227  001CAE  9C92               	bcf	3986,6,c	;volatile
  2228                           
  2229                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2230  001CB0  8E92               	bsf	3986,7,c	;volatile
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;init.c: 33: TRISB = 0b11111010;
  2234  001CB2  0EFA               	movlw	250
  2235  001CB4  6E93               	movwf	3987,c	;volatile
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2239  001CB6  9093               	bcf	3987,0,c	;volatile
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2243  001CB8  8293               	bsf	3987,1,c	;volatile
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2247  001CBA  9493               	bcf	3987,2,c	;volatile
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2251  001CBC  8693               	bsf	3987,3,c	;volatile
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2255  001CBE  8893               	bsf	3987,4,c	;volatile
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2259  001CC0  8A93               	bsf	3987,5,c	;volatile
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2263  001CC2  8C93               	bsf	3987,6,c	;volatile
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2267  001CC4  8E93               	bsf	3987,7,c	;volatile
  2268                           
  2269                           ;init.c: 42: TRISC = 0b11011100;
  2270  001CC6  0EDC               	movlw	220
  2271  001CC8  6E94               	movwf	3988,c	;volatile
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2275  001CCA  9094               	bcf	3988,0,c	;volatile
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2279  001CCC  9294               	bcf	3988,1,c	;volatile
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2283  001CCE  9494               	bcf	3988,2,c	;volatile
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2287  001CD0  8694               	bsf	3988,3,c	;volatile
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2291  001CD2  8894               	bsf	3988,4,c	;volatile
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2295  001CD4  8A94               	bsf	3988,5,c	;volatile
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2299  001CD6  9C94               	bcf	3988,6,c	;volatile
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2303  001CD8  8E94               	bsf	3988,7,c	;volatile
  2304                           
  2305                           ;init.c: 51: TRISD = 0b00001111;
  2306  001CDA  0E0F               	movlw	15
  2307  001CDC  6E95               	movwf	3989,c	;volatile
  2308                           
  2309                           ;init.c: 52: TRISD = 0b00000111;
  2310  001CDE  0E07               	movlw	7
  2311  001CE0  6E95               	movwf	3989,c	;volatile
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2315  001CE2  8095               	bsf	3989,0,c	;volatile
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2319  001CE4  8295               	bsf	3989,1,c	;volatile
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2323  001CE6  8495               	bsf	3989,2,c	;volatile
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2327  001CE8  9695               	bcf	3989,3,c	;volatile
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2331  001CEA  9895               	bcf	3989,4,c	;volatile
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2335  001CEC  9A95               	bcf	3989,5,c	;volatile
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2339  001CEE  9C95               	bcf	3989,6,c	;volatile
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2343  001CF0  9E95               	bcf	3989,7,c	;volatile
  2344                           
  2345                           ;init.c: 62: TRISE = 0b00000111;
  2346  001CF2  6E96               	movwf	3990,c	;volatile
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2350  001CF4  8096               	bsf	3990,0,c	;volatile
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2354  001CF6  8296               	bsf	3990,1,c	;volatile
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2358  001CF8  9496               	bcf	3990,2,c	;volatile
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;init.c: 78: LATA = 0b00000000;
  2362  001CFA  6A89               	clrf	3977,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;init.c: 79: LATB = 0b00000000;
  2366  001CFC  6A8A               	clrf	3978,c	;volatile
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;init.c: 80: LATC = 0b00000000;
  2370  001CFE  6A8B               	clrf	3979,c	;volatile
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;init.c: 81: LATD = 0b00000000;
  2374  001D00  6A8C               	clrf	3980,c	;volatile
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;init.c: 82: LATE = 0b00000000;
  2378  001D02  6A8D               	clrf	3981,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381  001D04  0012               	return		;funcret
  2382  001D06                     __end_of_Init_Port:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           intcon2	equ	0xFF1
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           
  2397 ;; *************** function _Init_PWM *****************
  2398 ;; Defined at:
  2399 ;;		line 14 in file "pwm.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2413 ;;      Params:         0       0       0       0
  2414 ;;      Locals:         0       0       0       0
  2415 ;;      Temps:          0       0       0       0
  2416 ;;      Totals:         0       0       0       0
  2417 ;;Total ram usage:        0 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:   10
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text7
  2428  0024C4                     __ptext7:
  2429                           	opt stack 0
  2430  0024C4                     _Init_PWM:
  2431                           	opt stack 20
  2432                           
  2433                           ;pwm.c: 15: PTPERL = 99;
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;incstack = 0
  2437  0024C4  0E63               	movlw	99
  2438  0024C6  6E7B               	movwf	3963,c	;volatile
  2439                           
  2440                           ;pwm.c: 16: PTPERH = 0;
  2441  0024C8  6A7A               	clrf	3962,c	;volatile
  2442                           
  2443                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2444  0024CA  6A7F               	clrf	3967,c	;volatile
  2445                           
  2446                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2447  0024CC  0E80               	movlw	128
  2448  0024CE  6E7E               	movwf	3966,c	;volatile
  2449                           
  2450                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2451  0024D0  0E3F               	movlw	63
  2452  0024D2  6E6F               	movwf	3951,c	;volatile
  2453                           
  2454                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2455  0024D4  6A6E               	clrf	3950,c	;volatile
  2456                           
  2457                           ;pwm.c: 25: DTCON = 0b00000000;
  2458  0024D6  6A6D               	clrf	3949,c	;volatile
  2459                           
  2460                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2461  0024D8  0E05               	movlw	5
  2462  0024DA  6E6B               	movwf	3947,c	;volatile
  2463                           
  2464                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2465  0024DC  6A6A               	clrf	3946,c	;volatile
  2466  0024DE  0012               	return		;funcret
  2467  0024E0                     __end_of_Init_PWM:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           prodl	equ	0xFF3
  2471                           intcon	equ	0xFF2
  2472                           intcon2	equ	0xFF1
  2473                           postinc0	equ	0xFEE
  2474                           wreg	equ	0xFE8
  2475                           postdec1	equ	0xFE5
  2476                           fsr1h	equ	0xFE2
  2477                           fsr1l	equ	0xFE1
  2478                           indf2	equ	0xFDF
  2479                           fsr2h	equ	0xFDA
  2480                           fsr2l	equ	0xFD9
  2481                           
  2482 ;; *************** function _Init_IT *****************
  2483 ;; Defined at:
  2484 ;;		line 70 in file "interrupt.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 3F/0
  2495 ;;		On exit  : 3F/0
  2496 ;;		Unchanged: 3F/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         0       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          0       0       0       0
  2501 ;;      Totals:         0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:   11
  2505 ;; This function calls:
  2506 ;;		_Init_Input_Capture_0
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text8
  2513  00215E                     __ptext8:
  2514                           	opt stack 0
  2515  00215E                     _Init_IT:
  2516                           	opt stack 19
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2520                           
  2521                           ;incstack = 0
  2522  00215E  8EF2               	bsf	intcon,7,c	;volatile
  2523                           
  2524                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2525  002160  8CF2               	bsf	intcon,6,c	;volatile
  2526                           
  2527                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2528  002162  9AF2               	bcf	intcon,5,c	;volatile
  2529                           
  2530                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2531  002164  98F2               	bcf	intcon,4,c	;volatile
  2532                           
  2533                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2534  002166  96F2               	bcf	intcon,3,c	;volatile
  2535                           
  2536                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2537  002168  94F2               	bcf	intcon,2,c	;volatile
  2538                           
  2539                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2540  00216A  92F2               	bcf	intcon,1,c	;volatile
  2541                           
  2542                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2543  00216C  90F2               	bcf	intcon,0,c	;volatile
  2544                           
  2545                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2546  00216E  8EF1               	bsf	intcon2,7,c	;volatile
  2547                           
  2548                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2549  002170  8CF1               	bsf	intcon2,6,c	;volatile
  2550                           
  2551                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2552  002172  9CF1               	bcf	intcon2,6,c	;volatile
  2553                           
  2554                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2555  002174  8AF1               	bsf	intcon2,5,c	;volatile
  2556                           
  2557                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2558  002176  88F1               	bsf	intcon2,4,c	;volatile
  2559                           
  2560                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2561  002178  94F1               	bcf	intcon2,2,c	;volatile
  2562                           
  2563                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2564  00217A  90F1               	bcf	intcon2,0,c	;volatile
  2565                           
  2566                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2567  00217C  8EF0               	bsf	intcon3,7,c	;volatile
  2568                           
  2569                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2570  00217E  8CF0               	bsf	intcon3,6,c	;volatile
  2571                           
  2572                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2573  002180  98F0               	bcf	intcon3,4,c	;volatile
  2574                           
  2575                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2576  002182  96F0               	bcf	intcon3,3,c	;volatile
  2577                           
  2578                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2579  002184  92F0               	bcf	intcon3,1,c	;volatile
  2580                           
  2581                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2582  002186  90F0               	bcf	intcon3,0,c	;volatile
  2583                           
  2584                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2585  002188  8ED0               	bsf	4048,7,c	;volatile
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;interrupt.c: 125: Init_Input_Capture_0();
  2589  00218A  ECF5  F011         	call	_Init_Input_Capture_0	;wreg free
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2593  00218E  969F               	bcf	3999,3,c	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596  002190  0012               	return		;funcret
  2597  002192                     __end_of_Init_IT:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           intcon2	equ	0xFF1
  2603                           intcon3	equ	0xFF0
  2604                           postinc0	equ	0xFEE
  2605                           wreg	equ	0xFE8
  2606                           postdec1	equ	0xFE5
  2607                           fsr1h	equ	0xFE2
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           
  2613 ;; *************** function _Init_Input_Capture_0 *****************
  2614 ;; Defined at:
  2615 ;;		line 139 in file "interrupt.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2
  2624 ;; Tracked objects:
  2625 ;;		On entry : 3F/0
  2626 ;;		On exit  : 3F/0
  2627 ;;		Unchanged: 3F/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2629 ;;      Params:         0       0       0       0
  2630 ;;      Locals:         0       0       0       0
  2631 ;;      Temps:          0       0       0       0
  2632 ;;      Totals:         0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:   10
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_Init_IT
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text9
  2644  0023EA                     __ptext9:
  2645                           	opt stack 0
  2646  0023EA                     _Init_Input_Capture_0:
  2647                           	opt stack 19
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;incstack = 0
  2654  0023EA  9C63               	bcf	3939,6,c	;volatile
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2658  0023EC  5063               	movf	3939,w,c	;volatile
  2659  0023EE  0BF0               	andlw	-16
  2660  0023F0  0908               	iorlw	8
  2661  0023F2  6E63               	movwf	3939,c	;volatile
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2665  0023F4  92A3               	bcf	4003,1,c	;volatile
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2669  0023F6  92A5               	bcf	4005,1,c	;volatile
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2673  0023F8  92A4               	bcf	4004,1,c	;volatile
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2677  0023FA  9C62               	bcf	3938,6,c	;volatile
  2678                           
  2679                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2680  0023FC  5062               	movf	3938,w,c	;volatile
  2681  0023FE  0BF0               	andlw	-16
  2682  002400  0908               	iorlw	8
  2683  002402  6E62               	movwf	3938,c	;volatile
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2687  002404  94A3               	bcf	4003,2,c	;volatile
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2691  002406  94A5               	bcf	4005,2,c	;volatile
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2695  002408  94A4               	bcf	4004,2,c	;volatile
  2696                           
  2697                           ; BSR set to: 0
  2698  00240A  0012               	return		;funcret
  2699  00240C                     __end_of_Init_Input_Capture_0:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           prodl	equ	0xFF3
  2703                           intcon	equ	0xFF2
  2704                           intcon2	equ	0xFF1
  2705                           intcon3	equ	0xFF0
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1h	equ	0xFE2
  2710                           fsr1l	equ	0xFE1
  2711                           indf2	equ	0xFDF
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           
  2715 ;; *************** function _Init_ADC *****************
  2716 ;; Defined at:
  2717 ;;		line 14 in file "adc.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;		None
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2731 ;;      Params:         0       0       0       0
  2732 ;;      Locals:         0       0       0       0
  2733 ;;      Temps:          0       0       0       0
  2734 ;;      Totals:         0       0       0       0
  2735 ;;Total ram usage:        0 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:   10
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_main
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text10
  2746  00242C                     __ptext10:
  2747                           	opt stack 0
  2748  00242C                     _Init_ADC:
  2749                           	opt stack 20
  2750                           
  2751                           ;adc.c: 15: ADCON0 = 0b00000000;
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;incstack = 0
  2755  00242C  6AC2               	clrf	4034,c	;volatile
  2756                           
  2757                           ;adc.c: 16: ADCON1 = 0b00000000;
  2758  00242E  6AC1               	clrf	4033,c	;volatile
  2759                           
  2760                           ;adc.c: 17: ADCON2 = 0b10010100;
  2761  002430  0E94               	movlw	148
  2762  002432  6EC0               	movwf	4032,c	;volatile
  2763                           
  2764                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2765  002434  50C0               	movf	4032,w,c	;volatile
  2766  002436  0BF8               	andlw	-8
  2767  002438  0901               	iorlw	1
  2768  00243A  6EC0               	movwf	4032,c	;volatile
  2769                           
  2770                           ;adc.c: 19: ADCON3 = 0b11000000;
  2771  00243C  0EC0               	movlw	192
  2772  00243E  6E9A               	movwf	3994,c	;volatile
  2773                           
  2774                           ;adc.c: 20: ADCHS = 0b00000000;
  2775  002440  6A99               	clrf	3993,c	;volatile
  2776                           
  2777                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2778  002442  0E03               	movlw	3
  2779  002444  6EB8               	movwf	4024,c	;volatile
  2780                           
  2781                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2782  002446  6AB9               	clrf	4025,c	;volatile
  2783                           
  2784                           ;adc.c: 24: ADON = 1;
  2785  002448  80C2               	bsf	4034,0,c	;volatile
  2786  00244A  0012               	return		;funcret
  2787  00244C                     __end_of_Init_ADC:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           intcon2	equ	0xFF1
  2793                           intcon3	equ	0xFF0
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           postdec1	equ	0xFE5
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           
  2803 ;; *************** function _EUSART1_Initialize *****************
  2804 ;; Defined at:
  2805 ;;		line 299 in file "eusart.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 3F/0
  2816 ;;		On exit  : 3F/0
  2817 ;;		Unchanged: 3F/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2819 ;;      Params:         0       0       0       0
  2820 ;;      Locals:         0       0       0       0
  2821 ;;      Temps:          0       0       0       0
  2822 ;;      Totals:         0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:   11
  2826 ;; This function calls:
  2827 ;;		_EUSART1_IT_ACTIVATE
  2828 ;; This function is called by:
  2829 ;;		_main
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text11
  2834  001F2C                     __ptext11:
  2835                           	opt stack 0
  2836  001F2C                     _EUSART1_Initialize:
  2837                           	opt stack 19
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2841                           
  2842                           ;incstack = 0
  2843  001F2C  9A9D               	bcf	3997,5,c	;volatile
  2844                           
  2845                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2846  001F2E  989D               	bcf	3997,4,c	;volatile
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;eusart.c: 307: BAUDCON = 0x48;
  2850  001F30  0E48               	movlw	72
  2851  001F32  6EAA               	movwf	4010,c	;volatile
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2855  001F34  86AA               	bsf	4010,3,c	;volatile
  2856                           
  2857                           ;eusart.c: 313: RCSTA1 = 0x80;
  2858  001F36  0E80               	movlw	128
  2859  001F38  6EAB               	movwf	4011,c	;volatile
  2860                           
  2861                           ;eusart.c: 316: TXSTA1 = 0x24;
  2862  001F3A  0E24               	movlw	36
  2863  001F3C  6EAC               	movwf	4012,c	;volatile
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2867  001F3E  98AC               	bcf	4012,4,c	;volatile
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2871  001F40  84AC               	bsf	4012,2,c	;volatile
  2872                           
  2873                           ;eusart.c: 321: SPBRG = 0x22;
  2874  001F42  0E22               	movlw	34
  2875  001F44  6EAF               	movwf	4015,c	;volatile
  2876                           
  2877                           ;eusart.c: 322: SPBRG = 0x11;
  2878  001F46  0E11               	movlw	17
  2879  001F48  6EAF               	movwf	4015,c	;volatile
  2880                           
  2881                           ;eusart.c: 323: SPBRG = 0x12;
  2882  001F4A  0E12               	movlw	18
  2883  001F4C  6EAF               	movwf	4015,c	;volatile
  2884                           
  2885                           ;eusart.c: 324: SPBRG = 0x10;
  2886  001F4E  0E10               	movlw	16
  2887  001F50  6EAF               	movwf	4015,c	;volatile
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;eusart.c: 328: SPBRGH = 0x00;
  2891  001F52  6AB0               	clrf	4016,c	;volatile
  2892                           
  2893                           ;eusart.c: 330: SPBRG = 0x0B;
  2894  001F54  0E0B               	movlw	11
  2895  001F56  6EAF               	movwf	4015,c	;volatile
  2896                           
  2897                           ;eusart.c: 331: SPBRGH = 0x33;
  2898  001F58  0E33               	movlw	51
  2899  001F5A  6EB0               	movwf	4016,c	;volatile
  2900                           
  2901                           ;eusart.c: 333: SPBRG = 205;
  2902  001F5C  0ECD               	movlw	205
  2903  001F5E  6EAF               	movwf	4015,c	;volatile
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;eusart.c: 334: SPBRGH = 0x00;
  2907  001F60  6AB0               	clrf	4016,c	;volatile
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2911  001F62  96AA               	bcf	4010,3,c	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2915  001F64  94AC               	bcf	4012,2,c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2919  001F66  98AC               	bcf	4012,4,c	;volatile
  2920                           
  2921                           ;eusart.c: 343: SPBRG = 12;
  2922  001F68  0E0C               	movlw	12
  2923  001F6A  6EAF               	movwf	4015,c	;volatile
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;eusart.c: 344: SPBRGH = 0x00;
  2927  001F6C  6AB0               	clrf	4016,c	;volatile
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;eusart.c: 397: eusart1TxIndex = 0;
  2931  001F6E  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;eusart.c: 398: eusart1RxIndex = 0;
  2935  001F70  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2939  001F72  989F               	bcf	3999,4,c	;volatile
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2943  001F74  9A9F               	bcf	3999,5,c	;volatile
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;eusart.c: 431: RX1_full = 0;
  2947  001F76  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2951  001F78  EF72  F013         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2952  001F7C                     __end_of_EUSART1_Initialize:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           intcon2	equ	0xFF1
  2958                           intcon3	equ	0xFF0
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           indf2	equ	0xFDF
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           
  2968 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2969 ;; Defined at:
  2970 ;;		line 232 in file "eusart.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		None
  2979 ;; Tracked objects:
  2980 ;;		On entry : 3F/0
  2981 ;;		On exit  : 3F/0
  2982 ;;		Unchanged: 3F/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2984 ;;      Params:         0       0       0       0
  2985 ;;      Locals:         0       0       0       0
  2986 ;;      Temps:          0       0       0       0
  2987 ;;      Totals:         0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:   10
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_EUSART1_Initialize
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text12
  2999  0026E4                     __ptext12:
  3000                           	opt stack 0
  3001  0026E4                     _EUSART1_IT_ACTIVATE:
  3002                           	opt stack 19
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;incstack = 0
  3009  0026E4  88AB               	bsf	4011,4,c	;volatile
  3010                           
  3011                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  3012  0026E6  9A9E               	bcf	3998,5,c	;volatile
  3013                           
  3014                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  3015  0026E8  8A9D               	bsf	3997,5,c	;volatile
  3016                           
  3017                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  3018  0026EA  989E               	bcf	3998,4,c	;volatile
  3019                           
  3020                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  3021  0026EC  889D               	bsf	3997,4,c	;volatile
  3022                           
  3023                           ; BSR set to: 0
  3024  0026EE  0012               	return		;funcret
  3025  0026F0                     __end_of_EUSART1_IT_ACTIVATE:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           prodl	equ	0xFF3
  3029                           intcon	equ	0xFF2
  3030                           intcon2	equ	0xFF1
  3031                           intcon3	equ	0xFF0
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           indf2	equ	0xFDF
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           
  3041 ;; *************** function _Cycle *****************
  3042 ;; Defined at:
  3043 ;;		line 322 in file "MOTEUR.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  i               1   10[BANK2 ] unsigned char 
  3048 ;;  j               1    0        unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3058 ;;      Params:         0       0       0       0
  3059 ;;      Locals:         0       0       0       1
  3060 ;;      Temps:          0       0       0       0
  3061 ;;      Totals:         0       0       0       1
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:   19
  3065 ;; This function calls:
  3066 ;;		_Alarme_On
  3067 ;;		_Buzzer_Etat
  3068 ;;		_Coupe_Moteur
  3069 ;;		_EUSART1_Check_Buffer
  3070 ;;		_Etat_Get
  3071 ;;		_Etat_Update
  3072 ;;		_Mouvement_Bequille
  3073 ;;		_Mouvement_X
  3074 ;;		_Mouvement_Z
  3075 ;;		_SPI_Check_Buffer
  3076 ;;		_delay_n_100ms
  3077 ;;		_delay_s
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text13
  3084  000BBE                     __ptext13:
  3085                           	opt stack 0
  3086  000BBE                     _Cycle:
  3087                           	opt stack 11
  3088  000BBE                     
  3089                           ;MOTEUR.c: 356: EUSART1_Check_Buffer();
  3090  000BBE  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  3091                           
  3092                           ;MOTEUR.c: 358: SPI_Check_Buffer();
  3093  000BC2  EC30  F011         	call	_SPI_Check_Buffer	;wreg free
  3094                           
  3095                           ;MOTEUR.c: 361: if (PORTBbits.RB4==0){
  3096  000BC6  B881               	btfsc	3969,4,c	;volatile
  3097  000BC8  D11F               	goto	l9138
  3098  000BCA  D10D               	goto	l9136
  3099  000BCC                     l9002:
  3100                           
  3101                           ;MOTEUR.c: 373: delay_s(1);
  3102  000BCC  0E01               	movlw	1
  3103  000BCE  ECAB  F011         	call	_delay_s
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;MOTEUR.c: 377: if (Option_Multitas == 0) {
  3107  000BD2  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3108  000BD4  D01C               	goto	l9022
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;MOTEUR.c: 380: Mouvement_X(0, 1, 0x02 | 0x60);
  3112  000BD6  0E01               	movlw	1
  3113  000BD8  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3114  000BDA  0E62               	movlw	98
  3115  000BDC  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3116  000BDE  0E00               	movlw	0
  3117  000BE0  ECB0  F008         	call	_Mouvement_X
  3118                           
  3119                           ;MOTEUR.c: 384: Patinage_Nb_Essai -= 1;
  3120  000BE4  0100               	movlb	0	; () banked
  3121  000BE6  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;MOTEUR.c: 385: if (Patinage_Nb_Essai > 0) {
  3125  000BE8  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3126  000BEA  E008               	bz	l9018
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;MOTEUR.c: 386: nb_s_fonctionnement = 0;
  3130  000BEC  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;MOTEUR.c: 391: delay_s(3);
  3134  000BEE  0E03               	movlw	3
  3135  000BF0  ECAB  F011         	call	_delay_s
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;MOTEUR.c: 392: Etat_Update(2);
  3139  000BF4  0E02               	movlw	2
  3140  000BF6  EC35  F012         	call	_Etat_Update
  3141                           
  3142                           ;MOTEUR.c: 393: } else {
  3143  000BFA  D7E1               	goto	l8996
  3144  000BFC                     l9018:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;MOTEUR.c: 394: Etat_Update(2);
  3148  000BFC  0E02               	movlw	2
  3149  000BFE  EC35  F012         	call	_Etat_Update
  3150                           
  3151                           ;MOTEUR.c: 396: P4_busy = 0;
  3152  000C02  0100               	movlb	0	; () banked
  3153  000C04  6BAC               	clrf	_P4_busy& (0+255),b
  3154                           
  3155                           ;MOTEUR.c: 397: Etat_Update(7);
  3156  000C06  0E07               	movlw	7
  3157  000C08  EC35  F012         	call	_Etat_Update
  3158  000C0C  D7D8               	goto	l8996
  3159  000C0E                     l9022:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;MOTEUR.c: 402: Etat_Update(0);
  3163  000C0E  0E00               	movlw	0
  3164  000C10  EC35  F012         	call	_Etat_Update
  3165                           
  3166                           ;MOTEUR.c: 404: P4_busy = 0;
  3167  000C14  0100               	movlb	0	; () banked
  3168  000C16  6BAC               	clrf	_P4_busy& (0+255),b
  3169  000C18  D7D2               	goto	l8996
  3170  000C1A                     l9026:
  3171                           
  3172                           ;MOTEUR.c: 412: delay_s(1);
  3173  000C1A  0E01               	movlw	1
  3174  000C1C  ECAB  F011         	call	_delay_s
  3175                           
  3176                           ;MOTEUR.c: 415: Mouvement_X(1, 1, 0x02 | 0x60);
  3177  000C20  0E01               	movlw	1
  3178  000C22  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3179  000C24  0E62               	movlw	98
  3180  000C26  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3181  000C28  0E01               	movlw	1
  3182  000C2A  ECB0  F008         	call	_Mouvement_X
  3183                           
  3184                           ;MOTEUR.c: 416: Patinage_Nb_Essai -= 1;
  3185  000C2E  0100               	movlb	0	; () banked
  3186  000C30  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;MOTEUR.c: 417: if (Patinage_Nb_Essai > 0) {
  3190  000C32  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3191  000C34  E008               	bz	l9038
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;MOTEUR.c: 418: nb_s_fonctionnement = 0;
  3195  000C36  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;MOTEUR.c: 419: delay_s(3);
  3199  000C38  0E03               	movlw	3
  3200  000C3A  ECAB  F011         	call	_delay_s
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;MOTEUR.c: 420: Etat_Update(3);
  3204  000C3E  0E03               	movlw	3
  3205  000C40  EC35  F012         	call	_Etat_Update
  3206                           
  3207                           ;MOTEUR.c: 421: } else {
  3208  000C44  D7BC               	goto	l8996
  3209  000C46                     l9038:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;MOTEUR.c: 422: Etat_Update(3);
  3213  000C46  0E03               	movlw	3
  3214  000C48  EC35  F012         	call	_Etat_Update
  3215                           
  3216                           ;MOTEUR.c: 424: P4_busy = 0;
  3217  000C4C  0100               	movlb	0	; () banked
  3218  000C4E  6BAC               	clrf	_P4_busy& (0+255),b
  3219                           
  3220                           ;MOTEUR.c: 425: Etat_Update(7);
  3221  000C50  0E07               	movlw	7
  3222  000C52  EC35  F012         	call	_Etat_Update
  3223  000C56  D7B3               	goto	l8996
  3224  000C58                     l248:
  3225                           
  3226                           ;MOTEUR.c: 429: P4_busy = 0;
  3227  000C58  0100               	movlb	0	; () banked
  3228  000C5A  6BAC               	clrf	_P4_busy& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;MOTEUR.c: 430: Etat_Update(70);
  3232  000C5C  0E46               	movlw	70
  3233  000C5E  EC35  F012         	call	_Etat_Update
  3234                           
  3235                           ;MOTEUR.c: 431: break;
  3236  000C62  D7AD               	goto	l8996
  3237  000C64                     l9046:
  3238                           
  3239                           ; BSR set to: 0
  3240  000C64  0E01               	movlw	1
  3241  000C66  EC17  F011         	call	_Etat_Get
  3242                           
  3243                           ; Switch size 1, requested type "speed"
  3244                           ; Number of cases is 2, Range of values is 2 to 3
  3245                           ; switch strategies available:
  3246                           ; Name         Instructions Cycles
  3247                           ; simple_byte            7     4 (average)
  3248                           ;	Chosen strategy is simple_byte
  3249  000C6A  0A02               	xorlw	2	; case 2
  3250  000C6C  E0AF               	bz	l9002
  3251  000C6E  0A01               	xorlw	1	; case 3
  3252  000C70  E0D4               	bz	l9026
  3253  000C72  D7F2               	goto	l248
  3254  000C74                     l9048:
  3255                           
  3256                           ;MOTEUR.c: 452: delay_s(1);
  3257  000C74  0E01               	movlw	1
  3258  000C76  ECAB  F011         	call	_delay_s
  3259                           
  3260                           ;MOTEUR.c: 455: Mouvement_X(0, 1, 0x02 | 0x60);
  3261  000C7A  0E01               	movlw	1
  3262  000C7C  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3263  000C7E  0E62               	movlw	98
  3264  000C80  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3265  000C82  0E00               	movlw	0
  3266  000C84  ECB0  F008         	call	_Mouvement_X
  3267                           
  3268                           ;MOTEUR.c: 456: Capteur_Capot_Nb_Evenement -= 1;
  3269  000C88  0100               	movlb	0	; () banked
  3270  000C8A  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;MOTEUR.c: 457: if (Capteur_Capot_Nb_Evenement > 0) {
  3274  000C8C  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3275  000C8E  E008               	bz	l9060
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;MOTEUR.c: 458: Capteur_Capot_Compteur_Temps_S = 0;
  3279  000C90  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;MOTEUR.c: 459: delay_s(3);
  3283  000C92  0E03               	movlw	3
  3284  000C94  ECAB  F011         	call	_delay_s
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;MOTEUR.c: 460: Etat_Update(2);
  3288  000C98  0E02               	movlw	2
  3289  000C9A  EC35  F012         	call	_Etat_Update
  3290                           
  3291                           ;MOTEUR.c: 461: } else {
  3292  000C9E  D78F               	goto	l8996
  3293  000CA0                     l9060:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;MOTEUR.c: 462: Etat_Update(2);
  3297  000CA0  0E02               	movlw	2
  3298  000CA2  EC35  F012         	call	_Etat_Update
  3299                           
  3300                           ;MOTEUR.c: 465: P4_busy = 0;
  3301  000CA6  0100               	movlb	0	; () banked
  3302  000CA8  6BAC               	clrf	_P4_busy& (0+255),b
  3303                           
  3304                           ;MOTEUR.c: 466: Etat_Update(7);
  3305  000CAA  0E07               	movlw	7
  3306  000CAC  EC35  F012         	call	_Etat_Update
  3307  000CB0  D786               	goto	l8996
  3308  000CB2                     l9064:
  3309                           
  3310                           ;MOTEUR.c: 471: delay_s(1);
  3311  000CB2  0E01               	movlw	1
  3312  000CB4  ECAB  F011         	call	_delay_s
  3313                           
  3314                           ;MOTEUR.c: 474: Mouvement_X(1, 1, 0x02 | 0x60);
  3315  000CB8  0E01               	movlw	1
  3316  000CBA  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3317  000CBC  0E62               	movlw	98
  3318  000CBE  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3319  000CC0  0E01               	movlw	1
  3320  000CC2  ECB0  F008         	call	_Mouvement_X
  3321                           
  3322                           ;MOTEUR.c: 475: Capteur_Capot_Nb_Evenement -= 1;
  3323  000CC6  0100               	movlb	0	; () banked
  3324  000CC8  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;MOTEUR.c: 476: if (Capteur_Capot_Nb_Evenement > 0) {
  3328  000CCA  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3329  000CCC  E008               	bz	l9076
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;MOTEUR.c: 477: Capteur_Capot_Compteur_Temps_S = 0;
  3333  000CCE  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;MOTEUR.c: 478: delay_s(3);
  3337  000CD0  0E03               	movlw	3
  3338  000CD2  ECAB  F011         	call	_delay_s
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;MOTEUR.c: 479: Etat_Update(3);
  3342  000CD6  0E03               	movlw	3
  3343  000CD8  EC35  F012         	call	_Etat_Update
  3344                           
  3345                           ;MOTEUR.c: 480: } else {
  3346  000CDC  D770               	goto	l8996
  3347  000CDE                     l9076:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;MOTEUR.c: 481: Etat_Update(3);
  3351  000CDE  0E03               	movlw	3
  3352  000CE0  EC35  F012         	call	_Etat_Update
  3353                           
  3354                           ;MOTEUR.c: 483: P4_busy = 0;
  3355  000CE4  0100               	movlb	0	; () banked
  3356  000CE6  6BAC               	clrf	_P4_busy& (0+255),b
  3357                           
  3358                           ;MOTEUR.c: 486: Etat_Update(77);
  3359  000CE8  0E4D               	movlw	77
  3360  000CEA  EC35  F012         	call	_Etat_Update
  3361  000CEE  D767               	goto	l8996
  3362  000CF0                     l259:
  3363                           
  3364                           ;MOTEUR.c: 491: P4_busy = 0;
  3365  000CF0  0100               	movlb	0	; () banked
  3366  000CF2  6BAC               	clrf	_P4_busy& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;MOTEUR.c: 492: Etat_Update(70);
  3370  000CF4  0E46               	movlw	70
  3371  000CF6  EC35  F012         	call	_Etat_Update
  3372                           
  3373                           ;MOTEUR.c: 493: break;
  3374  000CFA  D761               	goto	l8996
  3375  000CFC                     l9084:
  3376                           
  3377                           ; BSR set to: 0
  3378  000CFC  0E01               	movlw	1
  3379  000CFE  EC17  F011         	call	_Etat_Get
  3380                           
  3381                           ; Switch size 1, requested type "speed"
  3382                           ; Number of cases is 2, Range of values is 2 to 3
  3383                           ; switch strategies available:
  3384                           ; Name         Instructions Cycles
  3385                           ; simple_byte            7     4 (average)
  3386                           ;	Chosen strategy is simple_byte
  3387  000D02  0A02               	xorlw	2	; case 2
  3388  000D04  E0B7               	bz	l9048
  3389  000D06  0A01               	xorlw	1	; case 3
  3390  000D08  E0D4               	bz	l9064
  3391  000D0A  D7F2               	goto	l259
  3392  000D0C                     l9086:
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;MOTEUR.c: 507: P4_busy = 1;
  3396  000D0C  0E01               	movlw	1
  3397  000D0E  6FAC               	movwf	_P4_busy& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;MOTEUR.c: 508: Etat_Update(77);
  3401  000D10  0E4D               	movlw	77
  3402  000D12  EC35  F012         	call	_Etat_Update
  3403                           
  3404                           ;MOTEUR.c: 509: for (i = 0; i < 4; i++) {
  3405  000D16  0102               	movlb	2	; () banked
  3406  000D18  6B8A               	clrf	Cycle@i& (0+255),b
  3407  000D1A                     l9096:
  3408                           
  3409                           ; BSR set to: 2
  3410                           ;MOTEUR.c: 510: Buzzer_Etat((unsigned char) 1);
  3411  000D1A  0E01               	movlw	1
  3412  000D1C  EC64  F013         	call	_Buzzer_Etat
  3413                           
  3414                           ;MOTEUR.c: 511: delay_n_100ms(4);
  3415  000D20  0E04               	movlw	4
  3416  000D22  ECCF  F012         	call	_delay_n_100ms
  3417                           
  3418                           ;MOTEUR.c: 512: Buzzer_Etat((unsigned char) 0);
  3419  000D26  0E00               	movlw	0
  3420  000D28  EC64  F013         	call	_Buzzer_Etat
  3421                           
  3422                           ;MOTEUR.c: 513: delay_n_100ms(2);
  3423  000D2C  0E02               	movlw	2
  3424  000D2E  ECCF  F012         	call	_delay_n_100ms
  3425  000D32  0102               	movlb	2	; () banked
  3426  000D34  2B8A               	incf	Cycle@i& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 2
  3429  000D36  0E03               	movlw	3
  3430  000D38  658A               	cpfsgt	Cycle@i& (0+255),b
  3431  000D3A  D7EF               	goto	l9096
  3432  000D3C  D740               	goto	l8996
  3433  000D3E                     l9102:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;MOTEUR.c: 518: P4_busy = 1;
  3437  000D3E  0E01               	movlw	1
  3438  000D40  6FAC               	movwf	_P4_busy& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;MOTEUR.c: 519: Etat_Update(77);
  3442  000D42  0E4D               	movlw	77
  3443  000D44  EC35  F012         	call	_Etat_Update
  3444                           
  3445                           ;MOTEUR.c: 523: for (i = 0; i < 4; i++) {
  3446  000D48  0102               	movlb	2	; () banked
  3447  000D4A  6B8A               	clrf	Cycle@i& (0+255),b
  3448  000D4C                     l9112:
  3449                           
  3450                           ; BSR set to: 2
  3451                           ;MOTEUR.c: 524: Buzzer_Etat((unsigned char) 1);
  3452  000D4C  0E01               	movlw	1
  3453  000D4E  EC64  F013         	call	_Buzzer_Etat
  3454                           
  3455                           ;MOTEUR.c: 525: delay_n_100ms(4);
  3456  000D52  0E04               	movlw	4
  3457  000D54  ECCF  F012         	call	_delay_n_100ms
  3458                           
  3459                           ;MOTEUR.c: 526: Buzzer_Etat((unsigned char) 0);
  3460  000D58  0E00               	movlw	0
  3461  000D5A  EC64  F013         	call	_Buzzer_Etat
  3462                           
  3463                           ;MOTEUR.c: 527: delay_n_100ms(2);
  3464  000D5E  0E02               	movlw	2
  3465  000D60  ECCF  F012         	call	_delay_n_100ms
  3466  000D64  0102               	movlb	2	; () banked
  3467  000D66  2B8A               	incf	Cycle@i& (0+255),f,b
  3468                           
  3469                           ; BSR set to: 2
  3470  000D68  0E03               	movlw	3
  3471  000D6A  658A               	cpfsgt	Cycle@i& (0+255),b
  3472  000D6C  D7EF               	goto	l9112
  3473  000D6E  D727               	goto	l8996
  3474  000D70                     l9120:
  3475                           
  3476                           ; BSR set to: 0
  3477  000D70  51A9               	movf	_Alarme& (0+255),w,b	;volatile
  3478                           
  3479                           ; Switch size 1, requested type "speed"
  3480                           ; Number of cases is 4, Range of values is 1 to 4
  3481                           ; switch strategies available:
  3482                           ; Name         Instructions Cycles
  3483                           ; simple_byte           13     7 (average)
  3484                           ;	Chosen strategy is simple_byte
  3485  000D72  0A01               	xorlw	1	; case 1
  3486  000D74  E0CB               	bz	l9086
  3487  000D76  0A03               	xorlw	3	; case 2
  3488  000D78  E0E2               	bz	l9102
  3489  000D7A  0A01               	xorlw	1	; case 3
  3490  000D7C  E101 D772          	bz	l9046
  3491  000D80  0A07               	xorlw	7	; case 4
  3492  000D82  E0BC               	bz	l9084
  3493  000D84  D71C               	goto	l8996
  3494  000D86                     l9122:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;MOTEUR.c: 549: Mouvement_X(direction, type_consigne, mouvement_option);
  3498  000D86  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3499  000D8A  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3500  000D8E  518F               	movf	_direction& (0+255),w,b	;volatile
  3501  000D90  ECB0  F008         	call	_Mouvement_X
  3502                           
  3503                           ;MOTEUR.c: 550: break;
  3504  000D94  D714               	goto	l8996
  3505  000D96                     l9124:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;MOTEUR.c: 555: Mouvement_X(direction, type_consigne, mouvement_option);
  3509  000D96  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3510  000D9A  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3511  000D9E  518F               	movf	_direction& (0+255),w,b	;volatile
  3512  000DA0  ECB0  F008         	call	_Mouvement_X
  3513                           
  3514                           ;MOTEUR.c: 557: break;
  3515  000DA4  D70C               	goto	l8996
  3516  000DA6                     l9126:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;MOTEUR.c: 561: Mouvement_Z(direction, type_consigne, mouvement_option);
  3520  000DA6  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3521  000DAA  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3522  000DAE  518F               	movf	_direction& (0+255),w,b	;volatile
  3523  000DB0  EC70  F00C         	call	_Mouvement_Z
  3524                           
  3525                           ;MOTEUR.c: 562: break;
  3526  000DB4  D704               	goto	l8996
  3527  000DB6                     l9128:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;MOTEUR.c: 567: Mouvement_Z(direction, type_consigne, mouvement_option);
  3531  000DB6  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3532  000DBA  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3533  000DBE  518F               	movf	_direction& (0+255),w,b	;volatile
  3534  000DC0  EC70  F00C         	call	_Mouvement_Z
  3535                           
  3536                           ;MOTEUR.c: 569: break;
  3537  000DC4  D6FC               	goto	l8996
  3538  000DC6                     l9130:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;MOTEUR.c: 574: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3542  000DC6  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3543  000DCA  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3544  000DCE  518F               	movf	_direction& (0+255),w,b	;volatile
  3545  000DD0  ECC5  F00C         	call	_Mouvement_Bequille
  3546                           
  3547                           ;MOTEUR.c: 576: break;
  3548  000DD4  D6F4               	goto	l8996
  3549  000DD6                     l9132:
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;MOTEUR.c: 582: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3553  000DD6  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3554  000DDA  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3555  000DDE  518F               	movf	_direction& (0+255),w,b	;volatile
  3556  000DE0  ECC5  F00C         	call	_Mouvement_Bequille
  3557                           
  3558                           ;MOTEUR.c: 585: break;
  3559  000DE4  D6EC               	goto	l8996
  3560  000DE6                     l9136:
  3561  000DE6  0100               	movlb	0	; () banked
  3562  000DE8  51AA               	movf	_Etat& (0+255),w,b	;volatile
  3563                           
  3564                           ; Switch size 1, requested type "speed"
  3565                           ; Number of cases is 7, Range of values is 1 to 9
  3566                           ; switch strategies available:
  3567                           ; Name         Instructions Cycles
  3568                           ; simple_byte           22    12 (average)
  3569                           ;	Chosen strategy is simple_byte
  3570  000DEA  0A01               	xorlw	1	; case 1
  3571  000DEC  E0C1               	bz	l9120
  3572  000DEE  0A03               	xorlw	3	; case 2
  3573  000DF0  E0CA               	bz	l9122
  3574  000DF2  0A01               	xorlw	1	; case 3
  3575  000DF4  E0D0               	bz	l9124
  3576  000DF6  0A07               	xorlw	7	; case 4
  3577  000DF8  E0DE               	bz	l9128
  3578  000DFA  0A01               	xorlw	1	; case 5
  3579  000DFC  E0D4               	bz	l9126
  3580  000DFE  0A0D               	xorlw	13	; case 8
  3581  000E00  E0EA               	bz	l9132
  3582  000E02  0A01               	xorlw	1	; case 9
  3583  000E04  E0E0               	bz	l9130
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;MOTEUR.c: 596: }else{
  3587  000E06  D6DB               	goto	l8996
  3588  000E08                     l9138:
  3589                           
  3590                           ;MOTEUR.c: 598: Coupe_Moteur();
  3591  000E08  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  3592                           
  3593                           ;MOTEUR.c: 599: Alarme_On(7);
  3594  000E0C  0E07               	movlw	7
  3595  000E0E  EC45  F013         	call	_Alarme_On
  3596  000E12  D6D5               	goto	l8996
  3597  000E14                     __end_of_Cycle:
  3598                           	opt stack 0
  3599                           tblptru	equ	0xFF8
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           intcon2	equ	0xFF1
  3603                           intcon3	equ	0xFF0
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1h	equ	0xFE2
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           
  3613 ;; *************** function _delay_n_100ms *****************
  3614 ;; Defined at:
  3615 ;;		line 61 in file "horloge.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  nb_100ms        1    wreg     unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3620 ;;  i               1   16[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/2
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       0       0       0
  3631 ;;      Locals:         2       0       0       0
  3632 ;;      Temps:          0       0       0       0
  3633 ;;      Totals:         2       0       0       0
  3634 ;;Total ram usage:        2 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:   11
  3637 ;; This function calls:
  3638 ;;		_delay_100ms
  3639 ;; This function is called by:
  3640 ;;		_Cycle
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text14
  3645  00259E                     __ptext14:
  3646                           	opt stack 0
  3647  00259E                     _delay_n_100ms:
  3648                           	opt stack 18
  3649                           
  3650                           ;incstack = 0
  3651                           ;delay_n_100ms@nb_100ms stored from wreg
  3652  00259E  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3653                           
  3654                           ;horloge.c: 62: unsigned char i;
  3655                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3656  0025A0  6A11               	clrf	delay_n_100ms@i,c
  3657  0025A2  D003               	goto	l8772
  3658  0025A4                     l8768:
  3659                           
  3660                           ;horloge.c: 64: delay_100ms();
  3661  0025A4  EC15  F00C         	call	_delay_100ms	;wreg free
  3662  0025A8  2A11               	incf	delay_n_100ms@i,f,c
  3663  0025AA                     l8772:
  3664  0025AA  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3665  0025AC  5C11               	subwf	delay_n_100ms@i,w,c
  3666  0025AE  E3FA               	bnc	l8768
  3667  0025B0  0012               	return		;funcret
  3668  0025B2                     __end_of_delay_n_100ms:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           intcon2	equ	0xFF1
  3674                           intcon3	equ	0xFF0
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           
  3684 ;; *************** function _Mouvement_Z *****************
  3685 ;; Defined at:
  3686 ;;		line 968 in file "action.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  direction       1    wreg     unsigned char 
  3689 ;;  type_consign    1    7[BANK2 ] unsigned char 
  3690 ;;  option          1    8[BANK2 ] unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  direction       1    9[BANK2 ] unsigned char 
  3693 ;;  index           2    0        unsigned int 
  3694 ;;  Option_Temps    1    0        unsigned char 
  3695 ;;  i_max           1    0        unsigned char 
  3696 ;;  i_min           1    0        unsigned char 
  3697 ;;  i               1    0        unsigned char 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 3F/0
  3704 ;;		On exit  : 3F/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3707 ;;      Params:         0       0       0       2
  3708 ;;      Locals:         0       0       0       1
  3709 ;;      Temps:          0       0       0       0
  3710 ;;      Totals:         0       0       0       3
  3711 ;;Total ram usage:        3 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:   18
  3714 ;; This function calls:
  3715 ;;		_Check_List_Moteur_2
  3716 ;;		_Coupe_Moteur
  3717 ;;		_Detection_Pion_Off
  3718 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3719 ;;		_Init_Moteur_2
  3720 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3721 ;;		_TIMER2_On
  3722 ;;		_delay_s
  3723 ;;		_u_Init_PWM
  3724 ;; This function is called by:
  3725 ;;		_Cycle
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text15
  3730  0018E0                     __ptext15:
  3731                           	opt stack 0
  3732  0018E0                     _Mouvement_Z:
  3733                           	opt stack 11
  3734                           
  3735                           ;incstack = 0
  3736                           ;Mouvement_Z@direction stored from wreg
  3737  0018E0  0102               	movlb	2	; () banked
  3738  0018E2  6F89               	movwf	Mouvement_Z@direction& (0+255),b
  3739                           
  3740                           ;action.c: 969: unsigned char i, i_min, i_max;
  3741                           ;action.c: 970: unsigned char Option_Temps_S;
  3742                           ;action.c: 978: Surveillance_Consommation_Moteur_2_Desactiver();
  3743  0018E4  EC5D  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;action.c: 980: Detection_Pion_Off();
  3747  0018E8  EC8E  F013         	call	_Detection_Pion_Off	;wreg free
  3748                           
  3749                           ;action.c: 983: nb_s_pelle = option;
  3750  0018EC  C288  F0A3         	movff	Mouvement_Z@option,_nb_s_pelle
  3751                           
  3752                           ;action.c: 986: consigne = 10;
  3753  0018F0  0E0A               	movlw	10
  3754  0018F2  0100               	movlb	0	; () banked
  3755  0018F4  6F98               	movwf	_consigne& (0+255),b	;volatile
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;action.c: 997: index = 0;
  3759  0018F6  ECE7  F00E         	call	_u_Init_PWM	;wreg free
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;action.c: 998: TMR2 = 0;
  3763  0018FA  6ACC               	clrf	4044,c	;volatile
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;action.c: 999: TMR2IF = 0;
  3767  0018FC  929E               	bcf	3998,1,c	;volatile
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;action.c: 1005: LATEbits.LATE2 = 0;
  3771  0018FE  948D               	bcf	3981,2,c	;volatile
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;action.c: 1010: moteur_indice = 2;
  3775  001900  0E02               	movlw	2
  3776  001902  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;action.c: 1011: Init_ADC_Single_Shoot_I_Moteur_2();
  3780  001904  EC83  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;action.c: 1014: if (direction == 1) {
  3784  001908  0102               	movlb	2	; () banked
  3785  00190A  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3786  00190C  E103               	bnz	l1028
  3787                           
  3788                           ; BSR set to: 2
  3789                           ;action.c: 1015: LATD7 = 0;LATD6 = 1;
  3790  00190E  9E8C               	bcf	3980,7,c	;volatile
  3791  001910  8C8C               	bsf	3980,6,c	;volatile
  3792                           
  3793                           ;action.c: 1016: } else {
  3794  001912  D002               	goto	l8796
  3795  001914                     l1028:
  3796                           
  3797                           ; BSR set to: 2
  3798                           ;action.c: 1017: LATD6 = 0;LATD7 = 1;
  3799  001914  9C8C               	bcf	3980,6,c	;volatile
  3800  001916  8E8C               	bsf	3980,7,c	;volatile
  3801  001918                     l8796:
  3802                           
  3803                           ; BSR set to: 2
  3804                           ;action.c: 1018: }
  3805                           ;action.c: 1019: PDC1L = 1 << 2;
  3806  001918  0E04               	movlw	4
  3807  00191A  6E77               	movwf	3959,c	;volatile
  3808                           
  3809                           ; BSR set to: 2
  3810                           ;action.c: 1020: PDC1H = 0;
  3811  00191C  6A76               	clrf	3958,c	;volatile
  3812                           
  3813                           ;action.c: 1021: OVDCOND = 0b00000100;
  3814  00191E  0E04               	movlw	4
  3815  001920  6E6B               	movwf	3947,c	;volatile
  3816                           
  3817                           ; BSR set to: 2
  3818                           ;action.c: 1022: LATCbits.LATC1 = 1;
  3819  001922  828B               	bsf	3979,1,c	;volatile
  3820                           
  3821                           ;action.c: 1024: erreur = 1;
  3822  001924  0100               	movlb	0	; () banked
  3823  001926  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3824  001928  0E01               	movlw	1
  3825  00192A  6F84               	movwf	_erreur& (0+255),b	;volatile
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;action.c: 1025: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3829  00192C  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3830  00192E  46E8               	rlncf	wreg,f,c
  3831  001930  0BFC               	andlw	252
  3832  001932  6E77               	movwf	3959,c	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;action.c: 1026: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3836  001934  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3837  001936  46E8               	rlncf	wreg,f,c
  3838  001938  0B03               	andlw	3
  3839  00193A  6E76               	movwf	3958,c	;volatile
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;action.c: 1029: erreur_accumulator = 0;
  3843  00193C  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3844  00193E  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;action.c: 1032: Nouvelle_Valeur_ADC = 0;
  3848  001940  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;action.c: 1036: PIE3bits.PTIE = 0;
  3852  001942  98A3               	bcf	4003,4,c	;volatile
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;action.c: 1037: PIE1bits.ADIE = 1;
  3856  001944  8C9D               	bsf	3997,6,c	;volatile
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;action.c: 1038: PIE1bits.ADIE = 1;
  3860  001946  8C9D               	bsf	3997,6,c	;volatile
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;action.c: 1040: PEIE = 1;
  3864  001948  8CF2               	bsf	intcon,6,c	;volatile
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;action.c: 1041: GIE = 1;
  3868  00194A  8EF2               	bsf	intcon,7,c	;volatile
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;action.c: 1042: TIMER2_On();
  3872  00194C  EC9E  F013         	call	_TIMER2_On	;wreg free
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;action.c: 1043: ADIF = 0;
  3876  001950  9C9E               	bcf	3998,6,c	;volatile
  3877                           
  3878                           ;action.c: 1060: Init_Moteur_2();
  3879  001952  EC25  F013         	call	_Init_Moteur_2	;wreg free
  3880  001956                     l8824:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;action.c: 1064: Check_List_Moteur_2();
  3884  001956  ECC9  F010         	call	_Check_List_Moteur_2	;wreg free
  3885                           
  3886                           ;action.c: 1065: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat
      +                           == 4)));
  3887  00195A  0102               	movlb	2	; () banked
  3888  00195C  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3889  00195E  E104               	bnz	l8830
  3890                           
  3891                           ; BSR set to: 2
  3892  001960  0E05               	movlw	5
  3893  001962  0100               	movlb	0	; () banked
  3894  001964  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3895  001966  E0F7               	bz	l8824
  3896  001968                     l8830:
  3897  001968  0102               	movlb	2	; () banked
  3898  00196A  5189               	movf	Mouvement_Z@direction& (0+255),w,b
  3899  00196C  E104               	bnz	l1035
  3900                           
  3901                           ; BSR set to: 2
  3902  00196E  0E04               	movlw	4
  3903  001970  0100               	movlb	0	; () banked
  3904  001972  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3905  001974  E0F0               	bz	l8824
  3906  001976                     l1035:
  3907                           
  3908                           ;action.c: 1069: PIE3bits.PTIE = 0;
  3909  001976  98A3               	bcf	4003,4,c	;volatile
  3910                           
  3911                           ;action.c: 1070: PIE1bits.ADIE = 0;
  3912  001978  9C9D               	bcf	3997,6,c	;volatile
  3913                           
  3914                           ;action.c: 1075: LATEbits.LATE2 = 0;
  3915  00197A  948D               	bcf	3981,2,c	;volatile
  3916                           
  3917                           ;action.c: 1082: Surveillance_Consommation_Moteur_2_Desactiver();
  3918  00197C  EC5D  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;action.c: 1084: Coupe_Moteur();
  3922  001980  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  3923                           
  3924                           ;action.c: 1085: delay_s(1);
  3925  001984  0E01               	movlw	1
  3926  001986  EFAB  F011         	goto	_delay_s
  3927  00198A                     __end_of_Mouvement_Z:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           intcon3	equ	0xFF0
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           
  3943 ;; *************** function _Init_Moteur_2 *****************
  3944 ;; Defined at:
  3945 ;;		line 175 in file "action.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 3F/0
  3956 ;;		On exit  : 3F/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:   11
  3966 ;; This function calls:
  3967 ;;		_TIMER0_On
  3968 ;; This function is called by:
  3969 ;;		_Mouvement_Z
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text16
  3974  00264A                     __ptext16:
  3975                           	opt stack 0
  3976  00264A                     _Init_Moteur_2:
  3977                           	opt stack 17
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;action.c: 180: nb_s_fonctionnement = 0;
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;incstack = 0
  3984  00264A  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3985                           
  3986                           ;action.c: 181: nb_Pion = 0;
  3987  00264C  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  3988                           
  3989                           ;action.c: 182: nb_100ms_Timer_5 = 0;
  3990  00264E  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;action.c: 183: TIMER0_On();
  3994  002650  EC98  F012         	call	_TIMER0_On	;wreg free
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;action.c: 186: Compteur_IRQ_I_Moteur_2 = 0;
  3998  002654  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;action.c: 187: LATCbits.LATC2=0;
  4002  002656  948B               	bcf	3979,2,c	;volatile
  4003                           
  4004                           ; BSR set to: 0
  4005  002658  0012               	return		;funcret
  4006  00265A                     __end_of_Init_Moteur_2:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           
  4022 ;; *************** function _Check_List_Moteur_2 *****************
  4023 ;; Defined at:
  4024 ;;		line 197 in file "action.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      void 
  4031 ;; Registers used:
  4032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4038 ;;      Params:         0       0       0       0
  4039 ;;      Locals:         0       0       0       0
  4040 ;;      Temps:          0       0       0       0
  4041 ;;      Totals:         0       0       0       0
  4042 ;;Total ram usage:        0 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:   17
  4045 ;; This function calls:
  4046 ;;		_Alarme_On
  4047 ;;		_Coupe_Moteur
  4048 ;;		_EUSART1_Check_Buffer
  4049 ;;		_Etat_Update
  4050 ;;		_SPI_Check_Buffer
  4051 ;; This function is called by:
  4052 ;;		_Mouvement_Z
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text17
  4057  002192                     __ptext17:
  4058                           	opt stack 0
  4059  002192                     _Check_List_Moteur_2:
  4060                           	opt stack 11
  4061                           
  4062                           ;action.c: 207: if (PORTBbits.RB4==0){
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;incstack = 0
  4066  002192  B881               	btfsc	3969,4,c	;volatile
  4067  002194  D013               	goto	l8614
  4068                           
  4069                           ;action.c: 211: EUSART1_Check_Buffer();
  4070  002196  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4071                           
  4072                           ;action.c: 212: SPI_Check_Buffer();
  4073  00219A  EC30  F011         	call	_SPI_Check_Buffer	;wreg free
  4074                           
  4075                           ;action.c: 223: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  4076  00219E  0100               	movlb	0	; () banked
  4077  0021A0  51A3               	movf	_nb_s_pelle& (0+255),w,b
  4078  0021A2  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4079  0021A4  E207               	bc	l983
  4080                           
  4081                           ; BSR set to: 0
  4082  0021A6  0E02               	movlw	2
  4083  0021A8  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  4084  0021AA  0C02               	retlw	2
  4085                           
  4086                           ; BSR set to: 0
  4087  0021AC  5193               	movf	_Pelle_I_Max& (0+255),w,b
  4088  0021AE  5D9A               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  4089  0021B0  A0D8               	btfss	status,0,c
  4090  0021B2  0012               	return	
  4091  0021B4                     l983:
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;action.c: 227: P4_busy = 0;
  4095  0021B4  6BAC               	clrf	_P4_busy& (0+255),b
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;action.c: 228: Etat_Update(0);
  4099  0021B6  0E00               	movlw	0
  4100  0021B8  EF35  F012         	goto	_Etat_Update
  4101  0021BC                     l8614:
  4102                           
  4103                           ;action.c: 237: Coupe_Moteur();
  4104  0021BC  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  4105                           
  4106                           ;action.c: 238: Alarme_On(7);
  4107  0021C0  0E07               	movlw	7
  4108  0021C2  EF45  F013         	goto	_Alarme_On
  4109  0021C6                     __end_of_Check_List_Moteur_2:
  4110                           	opt stack 0
  4111                           tblptru	equ	0xFF8
  4112                           prodl	equ	0xFF3
  4113                           intcon	equ	0xFF2
  4114                           intcon2	equ	0xFF1
  4115                           intcon3	equ	0xFF0
  4116                           postinc0	equ	0xFEE
  4117                           wreg	equ	0xFE8
  4118                           postdec1	equ	0xFE5
  4119                           fsr1h	equ	0xFE2
  4120                           fsr1l	equ	0xFE1
  4121                           indf2	equ	0xFDF
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function _Mouvement_X *****************
  4127 ;; Defined at:
  4128 ;;		line 1103 in file "action.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  direction       1    wreg     unsigned char 
  4131 ;;  type_consign    1   17[BANK0 ] unsigned char 
  4132 ;;  option          1   18[BANK0 ] unsigned char 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  direction       1    7[BANK2 ] unsigned char 
  4135 ;;  index           2    0        unsigned int 
  4136 ;;  Option_Temps    1    0        unsigned char 
  4137 ;;  i_max           1    0        unsigned char 
  4138 ;;  i_min           1    0        unsigned char 
  4139 ;;  i               1    0        unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 3F/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4149 ;;      Params:         0       2       0       0
  4150 ;;      Locals:         0       0       0       1
  4151 ;;      Temps:          0       0       0       0
  4152 ;;      Totals:         0       2       0       1
  4153 ;;Total ram usage:        3 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; Hardware stack levels required when called:   18
  4156 ;; This function calls:
  4157 ;;		_Capteur_Capot_Off
  4158 ;;		_Capteur_Capot_On
  4159 ;;		_Check_List_Moteur_1
  4160 ;;		_Coupe_Moteur
  4161 ;;		_Detection_Pion_Init
  4162 ;;		_Detection_Pion_Off
  4163 ;;		_Detection_Pion_On
  4164 ;;		_EUSART1_Check_Buffer
  4165 ;;		_Etat_Update
  4166 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4167 ;;		_Init_Moteur_1
  4168 ;;		_SPI_Check_Buffer
  4169 ;;		_Stop_Moteur_1
  4170 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4171 ;;		_TIMER2_On
  4172 ;;		_u_Init_PWM
  4173 ;; This function is called by:
  4174 ;;		_Cycle
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text18
  4179  001160                     __ptext18:
  4180                           	opt stack 0
  4181  001160                     _Mouvement_X:
  4182                           	opt stack 11
  4183                           
  4184                           ;incstack = 0
  4185                           ;Mouvement_X@direction stored from wreg
  4186  001160  0102               	movlb	2	; () banked
  4187  001162  6F87               	movwf	Mouvement_X@direction& (0+255),b
  4188                           
  4189                           ;action.c: 1105: unsigned char i, i_min, i_max;
  4190                           ;action.c: 1106: unsigned char Option_Temps_S;
  4191                           ;action.c: 1116: consigne = 10;
  4192  001164  0E0A               	movlw	10
  4193  001166  0100               	movlb	0	; () banked
  4194  001168  6F98               	movwf	_consigne& (0+255),b	;volatile
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;action.c: 1123: Surveillance_Consommation_Moteur_1_Desactiver();
  4198  00116A  EC78  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;action.c: 1134: index = 0;
  4202  00116E  ECE7  F00E         	call	_u_Init_PWM	;wreg free
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;action.c: 1135: TMR2 = 0;
  4206  001172  6ACC               	clrf	4044,c	;volatile
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;action.c: 1136: TMR2IF = 0;
  4210  001174  929E               	bcf	3998,1,c	;volatile
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;action.c: 1141: if ((!(option & 0x02))
  4214                           ;action.c: 1144: ) {
  4215  001176  A3FF               	btfss	Mouvement_X@option& (0+255),1,b
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;action.c: 1146: Capteur_Capot_On();
  4219  001178  EC35  F013         	call	_Capteur_Capot_On	;wreg free
  4220                           
  4221                           ;action.c: 1148: }
  4222                           ;action.c: 1156: moteur_indice = 1;
  4223  00117C  0E01               	movlw	1
  4224  00117E  0100               	movlb	0	; () banked
  4225  001180  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;action.c: 1157: Init_ADC_Single_Shoot_I_Moteur_1();
  4229  001182  ECB6  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;action.c: 1160: if (direction == 1) {
  4233  001186  0102               	movlb	2	; () banked
  4234  001188  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4235  00118A  E103               	bnz	l1040
  4236                           
  4237                           ; BSR set to: 2
  4238                           ;action.c: 1161: LATD5 = 0;LATD4 = 1;
  4239  00118C  9A8C               	bcf	3980,5,c	;volatile
  4240  00118E  888C               	bsf	3980,4,c	;volatile
  4241                           
  4242                           ;action.c: 1162: } else {
  4243  001190  D002               	goto	l8684
  4244  001192                     l1040:
  4245                           
  4246                           ; BSR set to: 2
  4247                           ;action.c: 1163: LATD4 = 0;LATD5 = 1;
  4248  001192  988C               	bcf	3980,4,c	;volatile
  4249  001194  8A8C               	bsf	3980,5,c	;volatile
  4250  001196                     l8684:
  4251                           
  4252                           ; BSR set to: 2
  4253                           ;action.c: 1164: }
  4254                           ;action.c: 1165: PDC0L = 1 << 2;
  4255  001196  0E04               	movlw	4
  4256  001198  6E79               	movwf	3961,c	;volatile
  4257                           
  4258                           ; BSR set to: 2
  4259                           ;action.c: 1166: PDC0H = 0;
  4260  00119A  6A78               	clrf	3960,c	;volatile
  4261                           
  4262                           ;action.c: 1167: OVDCOND = 0b00000001;
  4263  00119C  0E01               	movlw	1
  4264  00119E  6E6B               	movwf	3947,c	;volatile
  4265                           
  4266                           ; BSR set to: 2
  4267                           ;action.c: 1168: LATCbits.LATC0 = 1;
  4268  0011A0  808B               	bsf	3979,0,c	;volatile
  4269                           
  4270                           ;action.c: 1171: erreur = 1;
  4271  0011A2  0100               	movlb	0	; () banked
  4272  0011A4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4273  0011A6  6F84               	movwf	_erreur& (0+255),b	;volatile
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;action.c: 1172: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4277  0011A8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4278  0011AA  46E8               	rlncf	wreg,f,c
  4279  0011AC  0BFC               	andlw	252
  4280  0011AE  6E79               	movwf	3961,c	;volatile
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;action.c: 1173: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4284  0011B0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4285  0011B2  46E8               	rlncf	wreg,f,c
  4286  0011B4  0B03               	andlw	3
  4287  0011B6  6E78               	movwf	3960,c	;volatile
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;action.c: 1176: erreur_accumulator = 0;
  4291  0011B8  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4292  0011BA  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;action.c: 1179: Nouvelle_Valeur_ADC = 0;
  4296  0011BC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;action.c: 1189: PIE3bits.PTIE = 0;
  4300  0011BE  98A3               	bcf	4003,4,c	;volatile
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;action.c: 1190: PIE1bits.ADIE = 1;
  4304  0011C0  8C9D               	bsf	3997,6,c	;volatile
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;action.c: 1192: PEIE = 1;
  4308  0011C2  8CF2               	bsf	intcon,6,c	;volatile
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;action.c: 1193: GIE = 1;
  4312  0011C4  8EF2               	bsf	intcon,7,c	;volatile
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;action.c: 1194: TIMER2_On();
  4316  0011C6  EC9E  F013         	call	_TIMER2_On	;wreg free
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;action.c: 1195: ADIF = 0;
  4320  0011CA  9C9E               	bcf	3998,6,c	;volatile
  4321                           
  4322                           ;action.c: 1199: Init_Moteur_1();
  4323  0011CC  EC2D  F013         	call	_Init_Moteur_1	;wreg free
  4324                           
  4325                           ;action.c: 1202: switch (type_consigne) {
  4326  0011D0  D051               	goto	l8760
  4327  0011D2                     l8710:
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;action.c: 1204: nb_Pion_Objectif = 2;
  4331  0011D2  0E02               	movlw	2
  4332  0011D4  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;action.c: 1206: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4336  0011D6  39FF               	swapf	Mouvement_X@option& (0+255),w,b
  4337  0011D8  0B0F               	andlw	15
  4338  0011DA  6FA8               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4339                           
  4340                           ; BSR set to: 0
  4341                           ;action.c: 1210: if (option & 0x04) {
  4342  0011DC  A5FF               	btfss	Mouvement_X@option& (0+255),2,b
  4343  0011DE  D003               	goto	l8718
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;action.c: 1212: nb_s_fonctionnement_souhaiter *= 3;
  4347  0011E0  90D8               	bcf	status,0,c
  4348  0011E2  35A8               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4349  0011E4  27A8               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4350  0011E6                     l8718:
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;action.c: 1214: }
  4354                           ;action.c: 1216: if (Option_Pailleux==1){
  4355  0011E6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4356  0011E8  D00F               	goto	l8728
  4357  0011EA                     l8720:
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;action.c: 1227: EUSART1_Check_Buffer();
  4361  0011EA  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4362                           
  4363                           ;action.c: 1228: SPI_Check_Buffer();
  4364  0011EE  EC30  F011         	call	_SPI_Check_Buffer	;wreg free
  4365                           
  4366                           ;action.c: 1239: } while(
  4367                           ;action.c: 1240: ((Etat == 2) | (Etat == 3))
  4368                           ;action.c: 1241: &&
  4369                           ;action.c: 1242: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4370                           ;action.c: 1243: )
  4371  0011F2  0E02               	movlw	2
  4372  0011F4  0100               	movlb	0	; () banked
  4373  0011F6  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4374  0011F8  E003               	bz	l8726
  4375                           
  4376                           ; BSR set to: 0
  4377  0011FA  0E03               	movlw	3
  4378  0011FC  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4379  0011FE  E10C               	bnz	l8732
  4380  001200                     l8726:
  4381                           
  4382                           ; BSR set to: 0
  4383  001200  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4384  001202  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4385  001204  E209               	bc	l8732
  4386  001206  D7F1               	goto	l8720
  4387  001208                     l8728:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;action.c: 1253: EUSART1_Check_Buffer();
  4391  001208  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4392                           
  4393                           ;action.c: 1254: SPI_Check_Buffer();
  4394  00120C  EC30  F011         	call	_SPI_Check_Buffer	;wreg free
  4395                           
  4396                           ;action.c: 1257: } while(nb_s_fonctionnement < nb_s_fonctionnement_souhaiter);
  4397  001210  0100               	movlb	0	; () banked
  4398  001212  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4399  001214  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4400  001216  E3F8               	bnc	l8728
  4401  001218                     l8732:
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;action.c: 1258: }
  4405                           ;action.c: 1262: Stop_Moteur_1();
  4406  001218  ECB0  F013         	call	_Stop_Moteur_1	;wreg free
  4407                           
  4408                           ;action.c: 1263: Capteur_Capot_Off();
  4409  00121C  ECB2  F013         	call	_Capteur_Capot_Off	;wreg free
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;action.c: 1266: if ((Etat == 2) | (Etat == 3)) {
  4413  001220  0E02               	movlw	2
  4414  001222  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4415  001224  E003               	bz	l8738
  4416                           
  4417                           ; BSR set to: 0
  4418  001226  0E03               	movlw	3
  4419  001228  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4420  00122A  E128               	bnz	l1058
  4421  00122C                     l8738:
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;action.c: 1268: Etat_Update(0);
  4425  00122C  0E00               	movlw	0
  4426  00122E  EC35  F012         	call	_Etat_Update
  4427                           
  4428                           ;action.c: 1269: P4_busy = 0;
  4429  001232  0100               	movlb	0	; () banked
  4430  001234  6BAC               	clrf	_P4_busy& (0+255),b
  4431  001236  D022               	goto	l1058
  4432  001238                     l1059:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;action.c: 1286: nb_Pion_Objectif = option;
  4436  001238  C0FF  F0A0         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4437                           
  4438                           ;action.c: 1287: nb_Pion = 0;
  4439  00123C  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;action.c: 1295: Detection_Pion_Init();
  4443  00123E  ECD9  F012         	call	_Detection_Pion_Init	;wreg free
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;action.c: 1296: Detection_Pion_On();
  4447  001242  EC98  F011         	call	_Detection_Pion_On	;wreg free
  4448  001246                     l8746:
  4449                           
  4450                           ;action.c: 1319: Check_List_Moteur_1();
  4451  001246  EC1A  F00D         	call	_Check_List_Moteur_1	;wreg free
  4452                           
  4453                           ;action.c: 1320: } while (
  4454                           ;action.c: 1321: ((direction == 1) && (Etat == 2))
  4455                           ;action.c: 1322: |
  4456                           ;action.c: 1323: ((direction == 0) && (Etat == 3))
  4457                           ;action.c: 1325: );
  4458  00124A  0102               	movlb	2	; () banked
  4459  00124C  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4460  00124E  E104               	bnz	l8752
  4461                           
  4462                           ; BSR set to: 2
  4463  001250  0E02               	movlw	2
  4464  001252  0100               	movlb	0	; () banked
  4465  001254  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4466  001256  E0F7               	bz	l8746
  4467  001258                     l8752:
  4468  001258  0102               	movlb	2	; () banked
  4469  00125A  5187               	movf	Mouvement_X@direction& (0+255),w,b
  4470  00125C  E104               	bnz	l8756
  4471                           
  4472                           ; BSR set to: 2
  4473  00125E  0E03               	movlw	3
  4474  001260  0100               	movlb	0	; () banked
  4475  001262  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4476  001264  E0F0               	bz	l8746
  4477  001266                     l8756:
  4478                           
  4479                           ;action.c: 1328: Detection_Pion_Off();
  4480  001266  EC8E  F013         	call	_Detection_Pion_Off	;wreg free
  4481                           
  4482                           ;action.c: 1336: Stop_Moteur_1();
  4483  00126A  ECB0  F013         	call	_Stop_Moteur_1	;wreg free
  4484                           
  4485                           ;action.c: 1337: Capteur_Capot_Off();
  4486  00126E  ECB2  F013         	call	_Capteur_Capot_Off	;wreg free
  4487                           
  4488                           ;action.c: 1339: break;
  4489  001272  D004               	goto	l1058
  4490  001274                     l8760:
  4491                           
  4492                           ; BSR set to: 0
  4493  001274  51FE               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4494                           
  4495                           ; Switch size 1, requested type "speed"
  4496                           ; Number of cases is 2, Range of values is 0 to 1
  4497                           ; switch strategies available:
  4498                           ; Name         Instructions Cycles
  4499                           ; simple_byte            7     4 (average)
  4500                           ;	Chosen strategy is simple_byte
  4501  001276  E0E0               	bz	l1059
  4502  001278  0A01               	xorlw	1	; case 1
  4503  00127A  E0AB               	bz	l8710
  4504  00127C                     l1058:
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;action.c: 1386: PIE3bits.PTIE = 0;
  4508  00127C  98A3               	bcf	4003,4,c	;volatile
  4509                           
  4510                           ;action.c: 1387: PIE1bits.ADIE = 0;
  4511  00127E  9C9D               	bcf	3997,6,c	;volatile
  4512                           
  4513                           ; BSR set to: 0
  4514                           ;action.c: 1389: Surveillance_Consommation_Moteur_1_Desactiver();
  4515  001280  EC78  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;action.c: 1391: Coupe_Moteur();
  4519  001284  EFE3  F012         	goto	_Coupe_Moteur	;wreg free
  4520  001288                     __end_of_Mouvement_X:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           intcon2	equ	0xFF1
  4526                           intcon3	equ	0xFF0
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           postdec1	equ	0xFE5
  4530                           fsr1h	equ	0xFE2
  4531                           fsr1l	equ	0xFE1
  4532                           indf2	equ	0xFDF
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4538 ;; Defined at:
  4539 ;;		line 860 in file "interrupt.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;		None
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      void 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2
  4548 ;; Tracked objects:
  4549 ;;		On entry : 3F/0
  4550 ;;		On exit  : 3F/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4553 ;;      Params:         0       0       0       0
  4554 ;;      Locals:         0       0       0       0
  4555 ;;      Temps:          0       0       0       0
  4556 ;;      Totals:         0       0       0       0
  4557 ;;Total ram usage:        0 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:   10
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_Mouvement_X
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text19
  4568  0026F0                     __ptext19:
  4569                           	opt stack 0
  4570  0026F0                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4571                           	opt stack 18
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;interrupt.c: 862: if (Surveillance_Consommation_Moteur_1 != 0) {
  4575                           
  4576                           ;incstack = 0
  4577  0026F0  518B               	movf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
  4578  0026F2  B4D8               	btfsc	status,2,c
  4579  0026F4  0012               	return	
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;interrupt.c: 863: Surveillance_Consommation_Moteur_1 = 0;
  4583  0026F6  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  4584                           
  4585                           ;interrupt.c: 864: INTCON3bits.INT1IE = 0;
  4586  0026F8  96F0               	bcf	intcon3,3,c	;volatile
  4587                           
  4588                           ; BSR set to: 0
  4589  0026FA  0012               	return		;funcret
  4590  0026FC                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4591                           	opt stack 0
  4592                           tblptru	equ	0xFF8
  4593                           prodl	equ	0xFF3
  4594                           intcon	equ	0xFF2
  4595                           intcon2	equ	0xFF1
  4596                           intcon3	equ	0xFF0
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           postdec1	equ	0xFE5
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _Stop_Moteur_1 *****************
  4608 ;; Defined at:
  4609 ;;		line 104 in file "action.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;                  1    wreg      void 
  4616 ;; Registers used:
  4617 ;;		cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : 3D/0
  4620 ;;		On exit  : 3F/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4623 ;;      Params:         0       0       0       0
  4624 ;;      Locals:         0       0       0       0
  4625 ;;      Temps:          0       0       0       0
  4626 ;;      Totals:         0       0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:   11
  4630 ;; This function calls:
  4631 ;;		_TIMER0_Off
  4632 ;; This function is called by:
  4633 ;;		_Mouvement_X
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text20
  4638  002760                     __ptext20:
  4639                           	opt stack 0
  4640  002760                     _Stop_Moteur_1:
  4641                           	opt stack 17
  4642                           
  4643                           ;action.c: 106: TIMER0_Off();
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;incstack = 0
  4647  002760  EF7E  F013         	goto	_TIMER0_Off	;wreg free
  4648  002764                     __end_of_Stop_Moteur_1:
  4649                           	opt stack 0
  4650                           tblptru	equ	0xFF8
  4651                           prodl	equ	0xFF3
  4652                           intcon	equ	0xFF2
  4653                           intcon2	equ	0xFF1
  4654                           intcon3	equ	0xFF0
  4655                           postinc0	equ	0xFEE
  4656                           wreg	equ	0xFE8
  4657                           postdec1	equ	0xFE5
  4658                           fsr1h	equ	0xFE2
  4659                           fsr1l	equ	0xFE1
  4660                           indf2	equ	0xFDF
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function _Init_Moteur_1 *****************
  4666 ;; Defined at:
  4667 ;;		line 84 in file "action.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;		None
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;		None
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg, status,2, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 3F/0
  4678 ;;		On exit  : 3F/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4681 ;;      Params:         0       0       0       0
  4682 ;;      Locals:         0       0       0       0
  4683 ;;      Temps:          0       0       0       0
  4684 ;;      Totals:         0       0       0       0
  4685 ;;Total ram usage:        0 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:   11
  4688 ;; This function calls:
  4689 ;;		_TIMER0_On
  4690 ;; This function is called by:
  4691 ;;		_Mouvement_X
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text21
  4696  00265A                     __ptext21:
  4697                           	opt stack 0
  4698  00265A                     _Init_Moteur_1:
  4699                           	opt stack 17
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;action.c: 91: Capteur_Capot_Compteur_Temps_S = 0;
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;incstack = 0
  4706  00265A  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4707                           
  4708                           ;action.c: 94: nb_s_fonctionnement = 0;
  4709  00265C  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  4710                           
  4711                           ;action.c: 95: nb_Pion = 0;
  4712  00265E  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4713                           
  4714                           ;action.c: 96: nb_100ms_Timer_5 = 0;
  4715  002660  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;action.c: 98: TIMER0_On();
  4719  002662  EC98  F012         	call	_TIMER0_On	;wreg free
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;action.c: 101: Compteur_IRQ_I_Moteur_1 = 0;
  4723  002666  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  4724                           
  4725                           ; BSR set to: 0
  4726  002668  0012               	return		;funcret
  4727  00266A                     __end_of_Init_Moteur_1:
  4728                           	opt stack 0
  4729                           tblptru	equ	0xFF8
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           intcon2	equ	0xFF1
  4733                           intcon3	equ	0xFF0
  4734                           postinc0	equ	0xFEE
  4735                           wreg	equ	0xFE8
  4736                           postdec1	equ	0xFE5
  4737                           fsr1h	equ	0xFE2
  4738                           fsr1l	equ	0xFE1
  4739                           indf2	equ	0xFDF
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  4745 ;; Defined at:
  4746 ;;		line 110 in file "adc.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2
  4755 ;; Tracked objects:
  4756 ;;		On entry : 3F/0
  4757 ;;		On exit  : 3F/0
  4758 ;;		Unchanged: 3F/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4760 ;;      Params:         0       0       0       0
  4761 ;;      Locals:         0       0       0       0
  4762 ;;      Temps:          0       0       0       0
  4763 ;;      Totals:         0       0       0       0
  4764 ;;Total ram usage:        0 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:   10
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_Mouvement_X
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text22
  4775  001D6C                     __ptext22:
  4776                           	opt stack 0
  4777  001D6C                     _Init_ADC_Single_Shoot_I_Moteur_1:
  4778                           	opt stack 18
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;incstack = 0
  4785  001D6C  9AC2               	bcf	4034,5,c	;volatile
  4786                           
  4787                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  4788  001D6E  98C2               	bcf	4034,4,c	;volatile
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  4792  001D70  0EF3               	movlw	-13
  4793  001D72  16C2               	andwf	4034,f,c	;volatile
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;adc.c: 117: ADCON0bits.ADON = 0;
  4797  001D74  90C2               	bcf	4034,0,c	;volatile
  4798                           
  4799                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  4800  001D76  0E3F               	movlw	-193
  4801  001D78  16C1               	andwf	4033,f,c	;volatile
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  4805  001D7A  98C1               	bcf	4033,4,c	;volatile
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;adc.c: 130: ADCON1 = 0b00000000;
  4809  001D7C  6AC1               	clrf	4033,c	;volatile
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  4813  001D7E  9EC0               	bcf	4032,7,c	;volatile
  4814                           
  4815                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  4816  001D80  50C0               	movf	4032,w,c	;volatile
  4817  001D82  0B87               	andlw	-121
  4818  001D84  0910               	iorlw	16
  4819  001D86  6EC0               	movwf	4032,c	;volatile
  4820                           
  4821                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  4822  001D88  50C0               	movf	4032,w,c	;volatile
  4823  001D8A  0BF8               	andlw	-8
  4824  001D8C  0904               	iorlw	4
  4825  001D8E  6EC0               	movwf	4032,c	;volatile
  4826                           
  4827                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  4828  001D90  50C0               	movf	4032,w,c	;volatile
  4829  001D92  0BF8               	andlw	-8
  4830  001D94  0901               	iorlw	1
  4831  001D96  6EC0               	movwf	4032,c	;volatile
  4832                           
  4833                           ;adc.c: 137: ADCON2 = 0b00010100;
  4834  001D98  0E14               	movlw	20
  4835  001D9A  6EC0               	movwf	4032,c	;volatile
  4836                           
  4837                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  4838  001D9C  50C0               	movf	4032,w,c	;volatile
  4839  001D9E  0BF8               	andlw	-8
  4840  001DA0  0901               	iorlw	1
  4841  001DA2  6EC0               	movwf	4032,c	;volatile
  4842                           
  4843                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  4844  001DA4  0E3F               	movlw	-193
  4845  001DA6  169A               	andwf	3994,f,c	;volatile
  4846                           
  4847                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  4848  001DA8  509A               	movf	3994,w,c	;volatile
  4849  001DAA  0BE0               	andlw	-32
  4850  001DAC  0910               	iorlw	16
  4851  001DAE  6E9A               	movwf	3994,c	;volatile
  4852                           
  4853                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  4854  001DB0  0EE0               	movlw	-32
  4855  001DB2  169A               	andwf	3994,f,c	;volatile
  4856                           
  4857                           ;adc.c: 153: ADCON3 = 0b00010000;
  4858  001DB4  0E10               	movlw	16
  4859  001DB6  6E9A               	movwf	3994,c	;volatile
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;adc.c: 154: ADCON3 = 0x00;
  4863  001DB8  6A9A               	clrf	3994,c	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;adc.c: 159: ADCHS = 0b00000000;
  4867  001DBA  6A99               	clrf	3993,c	;volatile
  4868                           
  4869                           ;adc.c: 160: ANSEL0 = 0b00000011;
  4870  001DBC  0E03               	movlw	3
  4871  001DBE  6EB8               	movwf	4024,c	;volatile
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;adc.c: 162: ANSEL1 = 0b00000000;
  4875  001DC0  6AB9               	clrf	4025,c	;volatile
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;adc.c: 171: PIE1bits.ADIE = 1;
  4879  001DC2  8C9D               	bsf	3997,6,c	;volatile
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;adc.c: 172: ADIF=0;
  4883  001DC4  9C9E               	bcf	3998,6,c	;volatile
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;adc.c: 173: IPR1bits.ADIP = 0;
  4887  001DC6  9C9F               	bcf	3999,6,c	;volatile
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;adc.c: 178: ADON = 1;
  4891  001DC8  80C2               	bsf	4034,0,c	;volatile
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  4895  001DCA  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4896                           
  4897                           ; BSR set to: 0
  4898  001DCC  0012               	return		;funcret
  4899  001DCE                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  4900                           	opt stack 0
  4901                           tblptru	equ	0xFF8
  4902                           prodl	equ	0xFF3
  4903                           intcon	equ	0xFF2
  4904                           intcon2	equ	0xFF1
  4905                           intcon3	equ	0xFF0
  4906                           postinc0	equ	0xFEE
  4907                           wreg	equ	0xFE8
  4908                           postdec1	equ	0xFE5
  4909                           fsr1h	equ	0xFE2
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _Detection_Pion_On *****************
  4917 ;; Defined at:
  4918 ;;		line 29 in file "pion.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4927 ;; Tracked objects:
  4928 ;;		On entry : 3F/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4932 ;;      Params:         0       0       0       0
  4933 ;;      Locals:         0       0       0       0
  4934 ;;      Temps:          0       0       0       0
  4935 ;;      Totals:         0       0       0       0
  4936 ;;Total ram usage:        0 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; Hardware stack levels required when called:   12
  4939 ;; This function calls:
  4940 ;;		_IRQ_PION_Metal_Apparait
  4941 ;; This function is called by:
  4942 ;;		_Mouvement_X
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text23
  4947  002330                     __ptext23:
  4948                           	opt stack 0
  4949  002330                     _Detection_Pion_On:
  4950                           	opt stack 16
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;incstack = 0
  4957  002330  92A4               	bcf	4004,1,c	;volatile
  4958                           
  4959                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  4960  002332  82A3               	bsf	4003,1,c	;volatile
  4961                           
  4962                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  4963  002334  92A4               	bcf	4004,1,c	;volatile
  4964                           
  4965                           ;pion.c: 64: Detecteur_Pion = 1;
  4966  002336  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  4967                           
  4968                           ;pion.c: 68: if (Option_Pailleux != 1) {
  4969  002338  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4970                           
  4971                           ; BSR set to: 0
  4972                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  4973  00233A  B480               	btfsc	3968,2,c	;volatile
  4974  00233C  0012               	return	
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  4978  00233E  0E1F               	movlw	31
  4979  002340  644E               	cpfsgt	_nb_100ms_platine_backup,c
  4980  002342  D003               	goto	l8658
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;pion.c: 91: nb_100ms_platine = 255;
  4984  002344  69A4               	setf	_nb_100ms_platine& (0+255),b
  4985                           
  4986                           ;pion.c: 92: }else{
  4987  002346  EF26  F012         	goto	_IRQ_PION_Metal_Apparait
  4988  00234A                     l8658:
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  4992  00234A  504E               	movf	_nb_100ms_platine_backup,w,c
  4993  00234C  0D08               	mullw	8
  4994  00234E  CFF3 F0A4          	movff	prodl,_nb_100ms_platine
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;pion.c: 94: }
  4998                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  4999  002352  EF26  F012         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  5000  002356                     __end_of_Detection_Pion_On:
  5001                           	opt stack 0
  5002                           tblptru	equ	0xFF8
  5003                           prodl	equ	0xFF3
  5004                           intcon	equ	0xFF2
  5005                           intcon2	equ	0xFF1
  5006                           intcon3	equ	0xFF0
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           postdec1	equ	0xFE5
  5010                           fsr1h	equ	0xFE2
  5011                           fsr1l	equ	0xFE1
  5012                           indf2	equ	0xFDF
  5013                           fsr2h	equ	0xFDA
  5014                           fsr2l	equ	0xFD9
  5015                           status	equ	0xFD8
  5016                           
  5017 ;; *************** function _Detection_Pion_Init *****************
  5018 ;; Defined at:
  5019 ;;		line 13 in file "pion.c"
  5020 ;; Parameters:    Size  Location     Type
  5021 ;;		None
  5022 ;; Auto vars:     Size  Location     Type
  5023 ;;		None
  5024 ;; Return value:  Size  Location     Type
  5025 ;;                  1    wreg      void 
  5026 ;; Registers used:
  5027 ;;		wreg, status,2
  5028 ;; Tracked objects:
  5029 ;;		On entry : 3F/0
  5030 ;;		On exit  : 3F/0
  5031 ;;		Unchanged: 0/0
  5032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5033 ;;      Params:         0       0       0       0
  5034 ;;      Locals:         0       0       0       0
  5035 ;;      Temps:          0       0       0       0
  5036 ;;      Totals:         0       0       0       0
  5037 ;;Total ram usage:        0 bytes
  5038 ;; Hardware stack levels used:    1
  5039 ;; Hardware stack levels required when called:   10
  5040 ;; This function calls:
  5041 ;;		Nothing
  5042 ;; This function is called by:
  5043 ;;		_Init_Variable
  5044 ;;		_Mouvement_X
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text24
  5049  0025B2                     __ptext24:
  5050                           	opt stack 0
  5051  0025B2                     _Detection_Pion_Init:
  5052                           	opt stack 19
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;pion.c: 15: if (PORTAbits.RA2 == 0) {
  5056                           
  5057                           ;incstack = 0
  5058  0025B2  B480               	btfsc	3968,2,c	;volatile
  5059  0025B4  D004               	goto	l8426
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  5063  0025B6  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
  5064                           
  5065                           ; BSR set to: 0
  5066                           ;pion.c: 17: Mouvement_Startup = 1;
  5067  0025B8  0E01               	movlw	1
  5068  0025BA  6E4D               	movwf	_Mouvement_Startup,c
  5069                           
  5070                           ;pion.c: 18: } else {
  5071  0025BC  0C01               	retlw	1
  5072  0025BE                     l8426:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;pion.c: 19: Surveillance_Capteur_Pion = 1;
  5076  0025BE  0E01               	movlw	1
  5077  0025C0  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;pion.c: 20: Mouvement_Startup = 0;
  5081  0025C2  6A4D               	clrf	_Mouvement_Startup,c
  5082                           
  5083                           ; BSR set to: 0
  5084  0025C4  0012               	return		;funcret
  5085  0025C6                     __end_of_Detection_Pion_Init:
  5086                           	opt stack 0
  5087                           tblptru	equ	0xFF8
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           intcon2	equ	0xFF1
  5091                           intcon3	equ	0xFF0
  5092                           postinc0	equ	0xFEE
  5093                           wreg	equ	0xFE8
  5094                           postdec1	equ	0xFE5
  5095                           fsr1h	equ	0xFE2
  5096                           fsr1l	equ	0xFE1
  5097                           indf2	equ	0xFDF
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _Check_List_Moteur_1 *****************
  5103 ;; Defined at:
  5104 ;;		line 111 in file "action.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5118 ;;      Params:         0       0       0       0
  5119 ;;      Locals:         0       0       0       0
  5120 ;;      Temps:          0       0       0       0
  5121 ;;      Totals:         0       0       0       0
  5122 ;;Total ram usage:        0 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:   17
  5125 ;; This function calls:
  5126 ;;		_Alarme_On
  5127 ;;		_Coupe_Moteur
  5128 ;;		_EUSART1_Check_Buffer
  5129 ;;		_SPI_Check_Buffer
  5130 ;;		___ftdiv
  5131 ;;		___ftmul
  5132 ;;		___fttol
  5133 ;;		___lbtoft
  5134 ;; This function is called by:
  5135 ;;		_Mouvement_X
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text25
  5140  001A34                     __ptext25:
  5141                           	opt stack 0
  5142  001A34                     _Check_List_Moteur_1:
  5143                           	opt stack 11
  5144                           
  5145                           ;action.c: 115: if (PORTBbits.RB4==0){
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;incstack = 0
  5149  001A34  B881               	btfsc	3969,4,c	;volatile
  5150  001A36  D046               	goto	l8590
  5151                           
  5152                           ;action.c: 121: if(PORTCbits.RC4 == 0){
  5153  001A38  A882               	btfss	3970,4,c	;volatile
  5154                           
  5155                           ;action.c: 122: Compteur_IRQ_I_Moteur_1 = 0;
  5156  001A3A  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  5157                           
  5158                           ;action.c: 123: }
  5159                           ;action.c: 126: EUSART1_Check_Buffer();
  5160  001A3C  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  5161                           
  5162                           ;action.c: 127: SPI_Check_Buffer();
  5163  001A40  EC30  F011         	call	_SPI_Check_Buffer	;wreg free
  5164                           
  5165                           ;action.c: 129: if (nb_s_fonctionnement > nb_s_patinage) {
  5166  001A44  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5167  001A46  0100               	movlb	0	; () banked
  5168  001A48  5DA7               	subwf	_nb_s_patinage& (0+255),w,b
  5169  001A4A  E234               	bc	l8586
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;action.c: 143: if ((Mouvement_Startup == 1)&& (Option_Multitas==1)){
  5173  001A4C  044D               	decf	_Mouvement_Startup,w,c
  5174  001A4E  E12F               	bnz	l8584
  5175                           
  5176                           ; BSR set to: 0
  5177  001A50  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  5178  001A52  D02D               	goto	l8584
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;action.c: 146: if (nb_s_fonctionnement > (unsigned char) (1.1 * 8 * nb_100ms_platine_ba
      +                          ckup / 10.0)){
  5182  001A54  6A2C               	clrf	___ftdiv@f2,c
  5183  001A56  0E20               	movlw	32
  5184  001A58  6E2D               	movwf	___ftdiv@f2+1,c
  5185  001A5A  0E41               	movlw	65
  5186  001A5C  6E2E               	movwf	___ftdiv@f2+2,c
  5187  001A5E  0ECD               	movlw	205
  5188  001A60  6E1E               	movwf	___ftmul@f2,c
  5189  001A62  0E0C               	movlw	12
  5190  001A64  6E1F               	movwf	___ftmul@f2+1,c
  5191  001A66  0E41               	movlw	65
  5192  001A68  6E20               	movwf	___ftmul@f2+2,c
  5193  001A6A  504E               	movf	_nb_100ms_platine_backup,w,c
  5194  001A6C  ECE3  F011         	call	___lbtoft
  5195  001A70  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  5196  001A74  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  5197  001A78  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  5198  001A7C  ECCB  F009         	call	___ftmul	;wreg free
  5199  001A80  C01B  F029         	movff	?___ftmul,___ftdiv@f1
  5200  001A84  C01C  F02A         	movff	?___ftmul+1,___ftdiv@f1+1
  5201  001A88  C01D  F02B         	movff	?___ftmul+2,___ftdiv@f1+2
  5202  001A8C  EC5B  F00B         	call	___ftdiv	;wreg free
  5203  001A90  C029  F038         	movff	?___ftdiv,___fttol@f1
  5204  001A94  C02A  F039         	movff	?___ftdiv+1,___fttol@f1+1
  5205  001A98  C02B  F03A         	movff	?___ftdiv+2,___fttol@f1+2
  5206  001A9C  ECFD  F00A         	call	___fttol	;wreg free
  5207  001AA0  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5208  001AA2  5C38               	subwf	?___fttol,w,c
  5209  001AA4  E207               	bc	l8586
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;action.c: 147: Alarme_On(11);
  5213  001AA6  0E0B               	movlw	11
  5214  001AA8  EC45  F013         	call	_Alarme_On
  5215  001AAC  D003               	goto	l8586
  5216  001AAE                     l8584:
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;action.c: 151: Alarme_On(3);
  5220  001AAE  0E03               	movlw	3
  5221  001AB0  EC45  F013         	call	_Alarme_On
  5222  001AB4                     l8586:
  5223                           
  5224                           ;action.c: 152: }
  5225                           ;action.c: 153: }
  5226                           ;action.c: 156: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5227  001AB4  0EB4               	movlw	180
  5228  001AB6  0100               	movlb	0	; () banked
  5229  001AB8  659E               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5230  001ABA  0CB4               	retlw	180
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;action.c: 157: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5234  001ABC  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5235                           
  5236                           ;action.c: 158: Capteur_Capot_Compteur_Temps_S = 0;
  5237  001AC0  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5238  001AC2  0012               	return	
  5239  001AC4                     l8590:
  5240                           
  5241                           ;action.c: 165: Coupe_Moteur();
  5242  001AC4  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  5243                           
  5244                           ;action.c: 166: Alarme_On(7);
  5245  001AC8  0E07               	movlw	7
  5246  001ACA  EF45  F013         	goto	_Alarme_On
  5247  001ACE                     __end_of_Check_List_Moteur_1:
  5248                           	opt stack 0
  5249                           tblptru	equ	0xFF8
  5250                           prodl	equ	0xFF3
  5251                           intcon	equ	0xFF2
  5252                           intcon2	equ	0xFF1
  5253                           intcon3	equ	0xFF0
  5254                           postinc0	equ	0xFEE
  5255                           wreg	equ	0xFE8
  5256                           postdec1	equ	0xFE5
  5257                           fsr1h	equ	0xFE2
  5258                           fsr1l	equ	0xFE1
  5259                           indf2	equ	0xFDF
  5260                           fsr2h	equ	0xFDA
  5261                           fsr2l	equ	0xFD9
  5262                           status	equ	0xFD8
  5263                           
  5264 ;; *************** function ___lbtoft *****************
  5265 ;; Defined at:
  5266 ;;		line 27 in file "/opt/microchip/xc8/v1.42/sources/common/lbtoft.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;  c               1    wreg     unsigned char 
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;  c               1   25[COMRAM] unsigned char 
  5271 ;; Return value:  Size  Location     Type
  5272 ;;                  3   22[COMRAM] float 
  5273 ;; Registers used:
  5274 ;;		wreg, status,2, status,0, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 3F/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5280 ;;      Params:         3       0       0       0
  5281 ;;      Locals:         1       0       0       0
  5282 ;;      Temps:          0       0       0       0
  5283 ;;      Totals:         4       0       0       0
  5284 ;;Total ram usage:        4 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:   11
  5287 ;; This function calls:
  5288 ;;		___ftpack
  5289 ;; This function is called by:
  5290 ;;		_Check_List_Moteur_1
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           	psect	text26
  5295  0023C6                     __ptext26:
  5296                           	opt stack 0
  5297  0023C6                     ___lbtoft:
  5298                           	opt stack 16
  5299                           
  5300                           ;incstack = 0
  5301                           ;___lbtoft@c stored from wreg
  5302  0023C6  6E1A               	movwf	___lbtoft@c,c
  5303  0023C8  501A               	movf	___lbtoft@c,w,c
  5304  0023CA  6E0F               	movwf	___ftpack@arg,c
  5305  0023CC  6A10               	clrf	___ftpack@arg+1,c
  5306  0023CE  6A11               	clrf	___ftpack@arg+2,c
  5307  0023D0  0E8E               	movlw	142
  5308  0023D2  6E12               	movwf	___ftpack@exp,c
  5309  0023D4  0E00               	movlw	0
  5310  0023D6  6E13               	movwf	___ftpack@sign,c
  5311  0023D8  EC67  F00D         	call	___ftpack	;wreg free
  5312  0023DC  C00F  F017         	movff	?___ftpack,?___lbtoft
  5313  0023E0  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  5314  0023E4  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  5315  0023E8  0012               	return		;funcret
  5316  0023EA                     __end_of___lbtoft:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           prodl	equ	0xFF3
  5320                           intcon	equ	0xFF2
  5321                           intcon2	equ	0xFF1
  5322                           intcon3	equ	0xFF0
  5323                           postinc0	equ	0xFEE
  5324                           wreg	equ	0xFE8
  5325                           postdec1	equ	0xFE5
  5326                           fsr1h	equ	0xFE2
  5327                           fsr1l	equ	0xFE1
  5328                           indf2	equ	0xFDF
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333 ;; *************** function ___fttol *****************
  5334 ;; Defined at:
  5335 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  f1              3   55[COMRAM] float 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  lval            4    1[BANK0 ] unsigned long 
  5340 ;;  exp1            1    5[BANK0 ] unsigned char 
  5341 ;;  sign1           1    0[BANK0 ] unsigned char 
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  4   55[COMRAM] long 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2, status,0
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 3F/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5351 ;;      Params:         4       0       0       0
  5352 ;;      Locals:         0       6       0       0
  5353 ;;      Temps:          5       0       0       0
  5354 ;;      Totals:         9       6       0       0
  5355 ;;Total ram usage:       15 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:   10
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_Check_List_Moteur_1
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text27
  5366  0015FA                     __ptext27:
  5367                           	opt stack 0
  5368  0015FA                     ___fttol:
  5369                           	opt stack 17
  5370                           
  5371                           ;incstack = 0
  5372  0015FA  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  5373  0015FE  6A3D               	clrf	(??___fttol+1)& (0+255),c
  5374  001600  6A3E               	clrf	(??___fttol+2)& (0+255),c
  5375  001602  3439               	rlcf	___fttol@f1+1,w,c
  5376  001604  363C               	rlcf	??___fttol& (0+255),f,c
  5377  001606  E301               	bnc	u6581
  5378  001608  803D               	bsf	(??___fttol+1)& (0+255),0,c
  5379  00160A                     u6581:
  5380  00160A  503C               	movf	??___fttol,w,c
  5381  00160C  0100               	movlb	0	; () banked
  5382  00160E  6FF2               	movwf	___fttol@exp1& (0+255),b
  5383  001610  51F2               	movf	___fttol@exp1& (0+255),w,b
  5384  001612  E105               	bnz	l8354
  5385  001614                     l8352:
  5386                           
  5387                           ; BSR set to: 0
  5388  001614  6A38               	clrf	?___fttol,c
  5389  001616  6A39               	clrf	?___fttol+1,c
  5390  001618  6A3A               	clrf	?___fttol+2,c
  5391  00161A  6A3B               	clrf	?___fttol+3,c
  5392  00161C  0012               	return	
  5393  00161E                     l8354:
  5394                           
  5395                           ; BSR set to: 0
  5396  00161E  0E17               	movlw	23
  5397  001620  6E3C               	movwf	??___fttol& (0+255),c
  5398  001622  C038  F03D         	movff	___fttol@f1,??___fttol+1
  5399  001626  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  5400  00162A  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  5401  00162E  283C               	incf	??___fttol,w,c
  5402  001630  6E40               	movwf	(??___fttol+4)& (0+255),c
  5403  001632  D004               	goto	u6600
  5404  001634                     u6605:
  5405  001634  90D8               	bcf	status,0,c
  5406  001636  323F               	rrcf	??___fttol+3,f,c
  5407  001638  323E               	rrcf	??___fttol+2,f,c
  5408  00163A  323D               	rrcf	??___fttol+1,f,c
  5409  00163C                     u6600:
  5410  00163C  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  5411  00163E  D7FA               	goto	u6605
  5412  001640  503D               	movf	??___fttol+1,w,c
  5413  001642  0100               	movlb	0	; () banked
  5414  001644  6FED               	movwf	___fttol@sign1& (0+255),b
  5415                           
  5416                           ; BSR set to: 0
  5417  001646  8E39               	bsf	___fttol@f1+1,7,c
  5418                           
  5419                           ; BSR set to: 0
  5420  001648  6A3A               	clrf	___fttol@f1+2,c
  5421                           
  5422                           ; BSR set to: 0
  5423  00164A  5038               	movf	___fttol@f1,w,c
  5424  00164C  6FEE               	movwf	___fttol@lval& (0+255),b
  5425  00164E  5039               	movf	___fttol@f1+1,w,c
  5426  001650  6FEF               	movwf	(___fttol@lval+1)& (0+255),b
  5427  001652  503A               	movf	___fttol@f1+2,w,c
  5428  001654  6FF0               	movwf	(___fttol@lval+2)& (0+255),b
  5429  001656  6BF1               	clrf	(___fttol@lval+3)& (0+255),b
  5430                           
  5431                           ; BSR set to: 0
  5432  001658  0E8E               	movlw	142
  5433  00165A  5FF2               	subwf	___fttol@exp1& (0+255),f,b
  5434                           
  5435                           ; BSR set to: 0
  5436  00165C  AFF2               	btfss	___fttol@exp1& (0+255),7,b
  5437  00165E  D00C               	goto	l8374
  5438                           
  5439                           ; BSR set to: 0
  5440  001660  51F2               	movf	___fttol@exp1& (0+255),w,b
  5441  001662  0A80               	xorlw	128
  5442  001664  0F8F               	addlw	143
  5443  001666  E3D6               	bnc	l8352
  5444  001668                     l8370:
  5445                           
  5446                           ; BSR set to: 0
  5447  001668  90D8               	bcf	status,0,c
  5448  00166A  33F1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5449  00166C  33F0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5450  00166E  33EF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5451  001670  33EE               	rrcf	___fttol@lval& (0+255),f,b
  5452                           
  5453                           ; BSR set to: 0
  5454  001672  3FF2               	incfsz	___fttol@exp1& (0+255),f,b
  5455  001674  D7F9               	goto	l8370
  5456  001676  D00C               	goto	l8382
  5457  001678                     l8374:
  5458                           
  5459                           ; BSR set to: 0
  5460  001678  0E17               	movlw	23
  5461  00167A  65F2               	cpfsgt	___fttol@exp1& (0+255),b
  5462  00167C  D007               	goto	l8380
  5463  00167E  D7CA               	goto	l8352
  5464  001680                     l8378:
  5465                           
  5466                           ; BSR set to: 0
  5467  001680  90D8               	bcf	status,0,c
  5468  001682  37EE               	rlcf	___fttol@lval& (0+255),f,b
  5469  001684  37EF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5470  001686  37F0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5471  001688  37F1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5472  00168A  07F2               	decf	___fttol@exp1& (0+255),f,b
  5473  00168C                     l8380:
  5474                           
  5475                           ; BSR set to: 0
  5476  00168C  51F2               	movf	___fttol@exp1& (0+255),w,b
  5477  00168E  E1F8               	bnz	l8378
  5478  001690                     l8382:
  5479                           
  5480                           ; BSR set to: 0
  5481  001690  51ED               	movf	___fttol@sign1& (0+255),w,b
  5482  001692  E008               	bz	l8386
  5483                           
  5484                           ; BSR set to: 0
  5485  001694  1FF1               	comf	(___fttol@lval+3)& (0+255),f,b
  5486  001696  1FF0               	comf	(___fttol@lval+2)& (0+255),f,b
  5487  001698  1FEF               	comf	(___fttol@lval+1)& (0+255),f,b
  5488  00169A  6DEE               	negf	___fttol@lval& (0+255),b
  5489  00169C  0E00               	movlw	0
  5490  00169E  23EF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5491  0016A0  23F0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5492  0016A2  23F1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5493  0016A4                     l8386:
  5494                           
  5495                           ; BSR set to: 0
  5496  0016A4  C0EE  F038         	movff	___fttol@lval,?___fttol
  5497  0016A8  C0EF  F039         	movff	___fttol@lval+1,?___fttol+1
  5498  0016AC  C0F0  F03A         	movff	___fttol@lval+2,?___fttol+2
  5499  0016B0  C0F1  F03B         	movff	___fttol@lval+3,?___fttol+3
  5500                           
  5501                           ; BSR set to: 0
  5502  0016B4  0012               	return		;funcret
  5503  0016B6                     __end_of___fttol:
  5504                           	opt stack 0
  5505                           tblptru	equ	0xFF8
  5506                           prodl	equ	0xFF3
  5507                           intcon	equ	0xFF2
  5508                           intcon2	equ	0xFF1
  5509                           intcon3	equ	0xFF0
  5510                           postinc0	equ	0xFEE
  5511                           wreg	equ	0xFE8
  5512                           postdec1	equ	0xFE5
  5513                           fsr1h	equ	0xFE2
  5514                           fsr1l	equ	0xFE1
  5515                           indf2	equ	0xFDF
  5516                           fsr2h	equ	0xFDA
  5517                           fsr2l	equ	0xFD9
  5518                           status	equ	0xFD8
  5519                           
  5520 ;; *************** function ___ftmul *****************
  5521 ;; Defined at:
  5522 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;  f1              3   26[COMRAM] float 
  5525 ;;  f2              3   29[COMRAM] float 
  5526 ;; Auto vars:     Size  Location     Type
  5527 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  5528 ;;  sign            1   36[COMRAM] unsigned char 
  5529 ;;  exp             1   35[COMRAM] unsigned char 
  5530 ;;  cntr            1    0        unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  3   26[COMRAM] float 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5540 ;;      Params:         6       0       0       0
  5541 ;;      Locals:         5       0       0       0
  5542 ;;      Temps:          3       0       0       0
  5543 ;;      Totals:        14       0       0       0
  5544 ;;Total ram usage:       14 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:   11
  5547 ;; This function calls:
  5548 ;;		___ftpack
  5549 ;; This function is called by:
  5550 ;;		_Check_List_Moteur_1
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text28
  5555  001396                     __ptext28:
  5556                           	opt stack 0
  5557  001396                     ___ftmul:
  5558                           	opt stack 16
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;incstack = 0
  5562  001396  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5563  00139A  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5564  00139C  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5565  00139E  341C               	rlcf	___ftmul@f1+1,w,c
  5566  0013A0  3621               	rlcf	??___ftmul& (0+255),f,c
  5567  0013A2  E301               	bnc	u6531
  5568  0013A4  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5569  0013A6                     u6531:
  5570  0013A6  5021               	movf	??___ftmul,w,c
  5571  0013A8  6E24               	movwf	___ftmul@exp,c
  5572  0013AA  5024               	movf	___ftmul@exp,w,c
  5573  0013AC  E104               	bnz	l8316
  5574  0013AE  6A1B               	clrf	?___ftmul,c
  5575  0013B0  6A1C               	clrf	?___ftmul+1,c
  5576  0013B2  6A1D               	clrf	?___ftmul+2,c
  5577  0013B4  0012               	return	
  5578  0013B6                     l8316:
  5579  0013B6  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5580  0013BA  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5581  0013BC  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5582  0013BE  341F               	rlcf	___ftmul@f2+1,w,c
  5583  0013C0  3621               	rlcf	??___ftmul& (0+255),f,c
  5584  0013C2  E301               	bnc	u6551
  5585  0013C4  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5586  0013C6                     u6551:
  5587  0013C6  5021               	movf	??___ftmul,w,c
  5588  0013C8  6E25               	movwf	___ftmul@sign,c
  5589  0013CA  5025               	movf	___ftmul@sign,w,c
  5590  0013CC  E104               	bnz	l8320
  5591  0013CE  6A1B               	clrf	?___ftmul,c
  5592  0013D0  6A1C               	clrf	?___ftmul+1,c
  5593  0013D2  6A1D               	clrf	?___ftmul+2,c
  5594  0013D4  0012               	return	
  5595  0013D6                     l8320:
  5596  0013D6  5025               	movf	___ftmul@sign,w,c
  5597  0013D8  0F7B               	addlw	123
  5598  0013DA  2624               	addwf	___ftmul@exp,f,c
  5599  0013DC  C01D  F025         	movff	___ftmul@f1+2,___ftmul@sign
  5600  0013E0  5020               	movf	___ftmul@f2+2,w,c
  5601  0013E2  1A25               	xorwf	___ftmul@sign,f,c
  5602  0013E4  0E80               	movlw	128
  5603  0013E6  1625               	andwf	___ftmul@sign,f,c
  5604  0013E8  8E1C               	bsf	___ftmul@f1+1,7,c
  5605  0013EA  8E1F               	bsf	___ftmul@f2+1,7,c
  5606  0013EC  6A20               	clrf	___ftmul@f2+2,c
  5607  0013EE  6A1D               	clrf	___ftmul@f1+2,c
  5608  0013F0  501B               	movf	___ftmul@f1,w,c
  5609  0013F2  021E               	mulwf	___ftmul@f2,c
  5610  0013F4  CFF4 FFF3          	movff	prodh,prodl
  5611  0013F8  6AF4               	clrf	prodh,c
  5612  0013FA  CFF3 F026          	movff	prodl,___ftmul@f3_as_product
  5613  0013FE  CFF4 F027          	movff	prodh,___ftmul@f3_as_product+1
  5614  001402  6A28               	clrf	___ftmul@f3_as_product+2,c
  5615  001404  501B               	movf	___ftmul@f1,w,c
  5616  001406  021F               	mulwf	___ftmul@f2+1,c
  5617  001408  50F3               	movf	prodl,w,c
  5618  00140A  2626               	addwf	___ftmul@f3_as_product,f,c
  5619  00140C  50F4               	movf	prodh,w,c
  5620  00140E  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5621  001410  0E00               	movlw	0
  5622  001412  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5623  001414  501C               	movf	___ftmul@f1+1,w,c
  5624  001416  021E               	mulwf	___ftmul@f2,c
  5625  001418  50F3               	movf	prodl,w,c
  5626  00141A  2626               	addwf	___ftmul@f3_as_product,f,c
  5627  00141C  50F4               	movf	prodh,w,c
  5628  00141E  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5629  001420  0E00               	movlw	0
  5630  001422  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5631  001424  501C               	movf	___ftmul@f1+1,w,c
  5632  001426  021F               	mulwf	___ftmul@f2+1,c
  5633  001428  50F3               	movf	prodl,w,c
  5634  00142A  2627               	addwf	___ftmul@f3_as_product+1,f,c
  5635  00142C  50F4               	movf	prodh,w,c
  5636  00142E  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5637  001430  AE28               	btfss	___ftmul@f3_as_product+2,7,c
  5638  001432  D005               	goto	l2067
  5639  001434  90D8               	bcf	status,0,c
  5640  001436  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5641  001438  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5642  00143A  3226               	rrcf	___ftmul@f3_as_product,f,c
  5643  00143C  2A24               	incf	___ftmul@exp,f,c
  5644  00143E                     l2067:
  5645  00143E  90D8               	bcf	status,0,c
  5646  001440  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5647  001442  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5648  001444  3226               	rrcf	___ftmul@f3_as_product,f,c
  5649  001446  C026  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  5650  00144A  C027  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5651  00144E  C028  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5652  001452  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  5653  001456  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  5654  00145A  EC67  F00D         	call	___ftpack	;wreg free
  5655  00145E  C00F  F01B         	movff	?___ftpack,?___ftmul
  5656  001462  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  5657  001466  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  5658  00146A  0012               	return		;funcret
  5659  00146C                     __end_of___ftmul:
  5660                           	opt stack 0
  5661                           tblptru	equ	0xFF8
  5662                           prodh	equ	0xFF4
  5663                           prodl	equ	0xFF3
  5664                           intcon	equ	0xFF2
  5665                           intcon2	equ	0xFF1
  5666                           intcon3	equ	0xFF0
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           postdec1	equ	0xFE5
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function ___ftdiv *****************
  5678 ;; Defined at:
  5679 ;;		line 54 in file "/opt/microchip/xc8/v1.42/sources/common/ftdiv.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  f1              3   40[COMRAM] float 
  5682 ;;  f2              3   43[COMRAM] float 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  f3              3   50[COMRAM] float 
  5685 ;;  sign            1   54[COMRAM] unsigned char 
  5686 ;;  exp             1   53[COMRAM] unsigned char 
  5687 ;;  cntr            1   49[COMRAM] unsigned char 
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  3   40[COMRAM] float 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5697 ;;      Params:         6       0       0       0
  5698 ;;      Locals:         6       0       0       0
  5699 ;;      Temps:          3       0       0       0
  5700 ;;      Totals:        15       0       0       0
  5701 ;;Total ram usage:       15 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:   11
  5704 ;; This function calls:
  5705 ;;		___ftpack
  5706 ;; This function is called by:
  5707 ;;		_Check_List_Moteur_1
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text29
  5712  0016B6                     __ptext29:
  5713                           	opt stack 0
  5714  0016B6                     ___ftdiv:
  5715                           	opt stack 16
  5716                           
  5717                           ;incstack = 0
  5718  0016B6  C02B  F02F         	movff	___ftdiv@f1+2,??___ftdiv
  5719  0016BA  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5720  0016BC  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5721  0016BE  342A               	rlcf	___ftdiv@f1+1,w,c
  5722  0016C0  362F               	rlcf	??___ftdiv& (0+255),f,c
  5723  0016C2  E301               	bnc	u6481
  5724  0016C4  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5725  0016C6                     u6481:
  5726  0016C6  502F               	movf	??___ftdiv,w,c
  5727  0016C8  6E36               	movwf	___ftdiv@exp,c
  5728  0016CA  5036               	movf	___ftdiv@exp,w,c
  5729  0016CC  E104               	bnz	l8280
  5730  0016CE  6A29               	clrf	?___ftdiv,c
  5731  0016D0  6A2A               	clrf	?___ftdiv+1,c
  5732  0016D2  6A2B               	clrf	?___ftdiv+2,c
  5733  0016D4  0012               	return	
  5734  0016D6                     l8280:
  5735  0016D6  C02E  F02F         	movff	___ftdiv@f2+2,??___ftdiv
  5736  0016DA  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5737  0016DC  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5738  0016DE  342D               	rlcf	___ftdiv@f2+1,w,c
  5739  0016E0  362F               	rlcf	??___ftdiv& (0+255),f,c
  5740  0016E2  E301               	bnc	u6501
  5741  0016E4  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5742  0016E6                     u6501:
  5743  0016E6  502F               	movf	??___ftdiv,w,c
  5744  0016E8  6E37               	movwf	___ftdiv@sign,c
  5745  0016EA  5037               	movf	___ftdiv@sign,w,c
  5746  0016EC  E104               	bnz	l2051
  5747  0016EE  6A29               	clrf	?___ftdiv,c
  5748  0016F0  6A2A               	clrf	?___ftdiv+1,c
  5749  0016F2  6A2B               	clrf	?___ftdiv+2,c
  5750  0016F4  0012               	return	
  5751  0016F6                     l2051:
  5752  0016F6  6A33               	clrf	___ftdiv@f3,c
  5753  0016F8  6A34               	clrf	___ftdiv@f3+1,c
  5754  0016FA  6A35               	clrf	___ftdiv@f3+2,c
  5755  0016FC  5037               	movf	___ftdiv@sign,w,c
  5756  0016FE  0F89               	addlw	137
  5757  001700  5E36               	subwf	___ftdiv@exp,f,c
  5758  001702  C02B  F037         	movff	___ftdiv@f1+2,___ftdiv@sign
  5759  001706  502E               	movf	___ftdiv@f2+2,w,c
  5760  001708  1A37               	xorwf	___ftdiv@sign,f,c
  5761  00170A  0E80               	movlw	128
  5762  00170C  1637               	andwf	___ftdiv@sign,f,c
  5763  00170E  8E2A               	bsf	___ftdiv@f1+1,7,c
  5764  001710  6A2B               	clrf	___ftdiv@f1+2,c
  5765  001712  8E2D               	bsf	___ftdiv@f2+1,7,c
  5766  001714  6A2E               	clrf	___ftdiv@f2+2,c
  5767  001716  0E18               	movlw	24
  5768  001718  6E32               	movwf	___ftdiv@cntr,c
  5769  00171A                     l8298:
  5770  00171A  90D8               	bcf	status,0,c
  5771  00171C  3633               	rlcf	___ftdiv@f3,f,c
  5772  00171E  3634               	rlcf	___ftdiv@f3+1,f,c
  5773  001720  3635               	rlcf	___ftdiv@f3+2,f,c
  5774  001722  502C               	movf	___ftdiv@f2,w,c
  5775  001724  5C29               	subwf	___ftdiv@f1,w,c
  5776  001726  502D               	movf	___ftdiv@f2+1,w,c
  5777  001728  582A               	subwfb	___ftdiv@f1+1,w,c
  5778  00172A  502E               	movf	___ftdiv@f2+2,w,c
  5779  00172C  582B               	subwfb	___ftdiv@f1+2,w,c
  5780  00172E  E307               	bnc	l2053
  5781  001730  502C               	movf	___ftdiv@f2,w,c
  5782  001732  5E29               	subwf	___ftdiv@f1,f,c
  5783  001734  502D               	movf	___ftdiv@f2+1,w,c
  5784  001736  5A2A               	subwfb	___ftdiv@f1+1,f,c
  5785  001738  502E               	movf	___ftdiv@f2+2,w,c
  5786  00173A  5A2B               	subwfb	___ftdiv@f1+2,f,c
  5787  00173C  8033               	bsf	___ftdiv@f3,0,c
  5788  00173E                     l2053:
  5789  00173E  90D8               	bcf	status,0,c
  5790  001740  3629               	rlcf	___ftdiv@f1,f,c
  5791  001742  362A               	rlcf	___ftdiv@f1+1,f,c
  5792  001744  362B               	rlcf	___ftdiv@f1+2,f,c
  5793  001746  2E32               	decfsz	___ftdiv@cntr,f,c
  5794  001748  D7E8               	goto	l8298
  5795  00174A  C033  F00F         	movff	___ftdiv@f3,___ftpack@arg
  5796  00174E  C034  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5797  001752  C035  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5798  001756  C036  F012         	movff	___ftdiv@exp,___ftpack@exp
  5799  00175A  C037  F013         	movff	___ftdiv@sign,___ftpack@sign
  5800  00175E  EC67  F00D         	call	___ftpack	;wreg free
  5801  001762  C00F  F029         	movff	?___ftpack,?___ftdiv
  5802  001766  C010  F02A         	movff	?___ftpack+1,?___ftdiv+1
  5803  00176A  C011  F02B         	movff	?___ftpack+2,?___ftdiv+2
  5804  00176E  0012               	return		;funcret
  5805  001770                     __end_of___ftdiv:
  5806                           	opt stack 0
  5807                           tblptru	equ	0xFF8
  5808                           prodh	equ	0xFF4
  5809                           prodl	equ	0xFF3
  5810                           intcon	equ	0xFF2
  5811                           intcon2	equ	0xFF1
  5812                           intcon3	equ	0xFF0
  5813                           postinc0	equ	0xFEE
  5814                           wreg	equ	0xFE8
  5815                           postdec1	equ	0xFE5
  5816                           fsr1h	equ	0xFE2
  5817                           fsr1l	equ	0xFE1
  5818                           indf2	equ	0xFDF
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function ___ftpack *****************
  5824 ;; Defined at:
  5825 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  arg             3   14[COMRAM] unsigned um
  5828 ;;  exp             1   17[COMRAM] unsigned char 
  5829 ;;  sign            1   18[COMRAM] unsigned char 
  5830 ;; Auto vars:     Size  Location     Type
  5831 ;;		None
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  3   14[COMRAM] float 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5841 ;;      Params:         5       0       0       0
  5842 ;;      Locals:         0       0       0       0
  5843 ;;      Temps:          3       0       0       0
  5844 ;;      Totals:         8       0       0       0
  5845 ;;Total ram usage:        8 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:   10
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		___ftdiv
  5852 ;;		___ftmul
  5853 ;;		___lbtoft
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text30
  5858  001ACE                     __ptext30:
  5859                           	opt stack 0
  5860  001ACE                     ___ftpack:
  5861                           	opt stack 16
  5862                           
  5863                           ;incstack = 0
  5864  001ACE  5012               	movf	___ftpack@exp,w,c
  5865  001AD0  E004               	bz	l1983
  5866  001AD2  500F               	movf	___ftpack@arg,w,c
  5867  001AD4  1010               	iorwf	___ftpack@arg+1,w,c
  5868  001AD6  1011               	iorwf	___ftpack@arg+2,w,c
  5869  001AD8  E109               	bnz	l8228
  5870  001ADA                     l1983:
  5871  001ADA  6A0F               	clrf	?___ftpack,c
  5872  001ADC  6A10               	clrf	?___ftpack+1,c
  5873  001ADE  6A11               	clrf	?___ftpack+2,c
  5874  001AE0  0012               	return	
  5875  001AE2                     l8226:
  5876  001AE2  2A12               	incf	___ftpack@exp,f,c
  5877  001AE4  90D8               	bcf	status,0,c
  5878  001AE6  3211               	rrcf	___ftpack@arg+2,f,c
  5879  001AE8  3210               	rrcf	___ftpack@arg+1,f,c
  5880  001AEA  320F               	rrcf	___ftpack@arg,f,c
  5881  001AEC                     l8228:
  5882  001AEC  6A14               	clrf	??___ftpack& (0+255),c
  5883  001AEE  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5884  001AF0  0EFE               	movlw	254
  5885  001AF2  1411               	andwf	___ftpack@arg+2,w,c
  5886  001AF4  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5887  001AF6  5014               	movf	??___ftpack,w,c
  5888  001AF8  1015               	iorwf	??___ftpack+1,w,c
  5889  001AFA  1016               	iorwf	??___ftpack+2,w,c
  5890  001AFC  E00A               	bz	l8234
  5891  001AFE  D7F1               	goto	l8226
  5892  001B00                     l8230:
  5893  001B00  2A12               	incf	___ftpack@exp,f,c
  5894  001B02  2A0F               	incf	___ftpack@arg,f,c
  5895  001B04  0E00               	movlw	0
  5896  001B06  2210               	addwfc	___ftpack@arg+1,f,c
  5897  001B08  2211               	addwfc	___ftpack@arg+2,f,c
  5898  001B0A  90D8               	bcf	status,0,c
  5899  001B0C  3211               	rrcf	___ftpack@arg+2,f,c
  5900  001B0E  3210               	rrcf	___ftpack@arg+1,f,c
  5901  001B10  320F               	rrcf	___ftpack@arg,f,c
  5902  001B12                     l8234:
  5903  001B12  6A14               	clrf	??___ftpack& (0+255),c
  5904  001B14  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5905  001B16  5011               	movf	___ftpack@arg+2,w,c
  5906  001B18  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5907  001B1A  5014               	movf	??___ftpack,w,c
  5908  001B1C  1015               	iorwf	??___ftpack+1,w,c
  5909  001B1E  1016               	iorwf	??___ftpack+2,w,c
  5910  001B20  E006               	bz	l8238
  5911  001B22  D7EE               	goto	l8230
  5912  001B24                     l8236:
  5913  001B24  0612               	decf	___ftpack@exp,f,c
  5914  001B26  90D8               	bcf	status,0,c
  5915  001B28  360F               	rlcf	___ftpack@arg,f,c
  5916  001B2A  3610               	rlcf	___ftpack@arg+1,f,c
  5917  001B2C  3611               	rlcf	___ftpack@arg+2,f,c
  5918  001B2E                     l8238:
  5919  001B2E  BE10               	btfsc	___ftpack@arg+1,7,c
  5920  001B30  D003               	goto	l1995
  5921  001B32  0E02               	movlw	2
  5922  001B34  6012               	cpfslt	___ftpack@exp,c
  5923  001B36  D7F6               	goto	l8236
  5924  001B38                     l1995:
  5925  001B38  A012               	btfss	___ftpack@exp,0,c
  5926  001B3A  9E10               	bcf	___ftpack@arg+1,7,c
  5927  001B3C  90D8               	bcf	status,0,c
  5928  001B3E  3212               	rrcf	___ftpack@exp,f,c
  5929  001B40  5012               	movf	___ftpack@exp,w,c
  5930  001B42  1211               	iorwf	___ftpack@arg+2,f,c
  5931  001B44  5013               	movf	___ftpack@sign,w,c
  5932  001B46  E001               	bz	l8252
  5933  001B48  8E11               	bsf	___ftpack@arg+2,7,c
  5934  001B4A                     l8252:
  5935  001B4A  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  5936  001B4E  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  5937  001B52  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  5938  001B56  0012               	return		;funcret
  5939  001B58                     __end_of___ftpack:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           intcon	equ	0xFF2
  5945                           intcon2	equ	0xFF1
  5946                           intcon3	equ	0xFF0
  5947                           postinc0	equ	0xFEE
  5948                           wreg	equ	0xFE8
  5949                           postdec1	equ	0xFE5
  5950                           fsr1h	equ	0xFE2
  5951                           fsr1l	equ	0xFE1
  5952                           indf2	equ	0xFDF
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function _Capteur_Capot_On *****************
  5958 ;; Defined at:
  5959 ;;		line 176 in file "interrupt.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;		None
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;		None
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 3F/0
  5970 ;;		On exit  : 0/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5973 ;;      Params:         0       0       0       0
  5974 ;;      Locals:         0       0       0       0
  5975 ;;      Temps:          0       0       0       0
  5976 ;;      Totals:         0       0       0       0
  5977 ;;Total ram usage:        0 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:   11
  5980 ;; This function calls:
  5981 ;;		_Etat_Update
  5982 ;; This function is called by:
  5983 ;;		_Mouvement_X
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text31
  5988  00266A                     __ptext31:
  5989                           	opt stack 0
  5990  00266A                     _Capteur_Capot_On:
  5991                           	opt stack 17
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  5995                           
  5996                           ;incstack = 0
  5997  00266A  88F2               	bsf	intcon,4,c	;volatile
  5998                           
  5999                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  6000  00266C  92F2               	bcf	intcon,1,c	;volatile
  6001                           
  6002                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  6003  00266E  B682               	btfsc	3970,3,c	;volatile
  6004  002670  0012               	return	
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;interrupt.c: 185: P4_busy = 0;
  6008  002672  6BAC               	clrf	_P4_busy& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;interrupt.c: 186: Etat_Update(77);
  6012  002674  0E4D               	movlw	77
  6013  002676  EF35  F012         	goto	_Etat_Update
  6014  00267A                     __end_of_Capteur_Capot_On:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           intcon2	equ	0xFF1
  6021                           intcon3	equ	0xFF0
  6022                           postinc0	equ	0xFEE
  6023                           wreg	equ	0xFE8
  6024                           postdec1	equ	0xFE5
  6025                           fsr1h	equ	0xFE2
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _Capteur_Capot_Off *****************
  6033 ;; Defined at:
  6034 ;;		line 194 in file "interrupt.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		None
  6043 ;; Tracked objects:
  6044 ;;		On entry : 3F/0
  6045 ;;		On exit  : 3F/0
  6046 ;;		Unchanged: 3F/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6048 ;;      Params:         0       0       0       0
  6049 ;;      Locals:         0       0       0       0
  6050 ;;      Temps:          0       0       0       0
  6051 ;;      Totals:         0       0       0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:   10
  6055 ;; This function calls:
  6056 ;;		Nothing
  6057 ;; This function is called by:
  6058 ;;		_Mouvement_X
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text32
  6063  002764                     __ptext32:
  6064                           	opt stack 0
  6065  002764                     _Capteur_Capot_Off:
  6066                           	opt stack 18
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  6070                           
  6071                           ;incstack = 0
  6072  002764  98F2               	bcf	intcon,4,c	;volatile
  6073                           
  6074                           ; BSR set to: 0
  6075  002766  0012               	return		;funcret
  6076  002768                     __end_of_Capteur_Capot_Off:
  6077                           	opt stack 0
  6078                           tblptru	equ	0xFF8
  6079                           prodh	equ	0xFF4
  6080                           prodl	equ	0xFF3
  6081                           intcon	equ	0xFF2
  6082                           intcon2	equ	0xFF1
  6083                           intcon3	equ	0xFF0
  6084                           postinc0	equ	0xFEE
  6085                           wreg	equ	0xFE8
  6086                           postdec1	equ	0xFE5
  6087                           fsr1h	equ	0xFE2
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           fsr2h	equ	0xFDA
  6091                           fsr2l	equ	0xFD9
  6092                           status	equ	0xFD8
  6093                           
  6094 ;; *************** function _Mouvement_Bequille *****************
  6095 ;; Defined at:
  6096 ;;		line 835 in file "action.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;  direction       1    wreg     unsigned char 
  6099 ;;  type_consign    1    7[BANK2 ] unsigned char 
  6100 ;;  option          1    8[BANK2 ] unsigned char 
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;  direction       1    9[BANK2 ] unsigned char 
  6103 ;;  index           2    0        unsigned int 
  6104 ;;  Option_Temps    1    0        unsigned char 
  6105 ;;  i_max           1    0        unsigned char 
  6106 ;;  i_min           1    0        unsigned char 
  6107 ;;  i               1    0        unsigned char 
  6108 ;; Return value:  Size  Location     Type
  6109 ;;                  1    wreg      void 
  6110 ;; Registers used:
  6111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6112 ;; Tracked objects:
  6113 ;;		On entry : 3F/0
  6114 ;;		On exit  : 3F/0
  6115 ;;		Unchanged: 0/0
  6116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6117 ;;      Params:         0       0       0       2
  6118 ;;      Locals:         0       0       0       1
  6119 ;;      Temps:          0       0       0       0
  6120 ;;      Totals:         0       0       0       3
  6121 ;;Total ram usage:        3 bytes
  6122 ;; Hardware stack levels used:    1
  6123 ;; Hardware stack levels required when called:   18
  6124 ;; This function calls:
  6125 ;;		_Check_List_Moteur_Bequille
  6126 ;;		_Coupe_Moteur
  6127 ;;		_Detection_Pion_Off
  6128 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  6129 ;;		_Init_Moteur_Bequille
  6130 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  6131 ;;		_TIMER2_On
  6132 ;;		_delay_s
  6133 ;;		_u_Init_PWM
  6134 ;; This function is called by:
  6135 ;;		_Cycle
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           	psect	text33
  6140  00198A                     __ptext33:
  6141                           	opt stack 0
  6142  00198A                     _Mouvement_Bequille:
  6143                           	opt stack 11
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;incstack = 0
  6147                           ;Mouvement_Bequille@direction stored from wreg
  6148  00198A  0102               	movlb	2	; () banked
  6149  00198C  6F89               	movwf	Mouvement_Bequille@direction& (0+255),b
  6150                           
  6151                           ;action.c: 836: unsigned char i, i_min, i_max;
  6152                           ;action.c: 837: unsigned char Option_Temps_S;
  6153                           ;action.c: 844: Surveillance_Consommation_Moteur_2_Desactiver();
  6154  00198E  EC5D  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;action.c: 846: Detection_Pion_Off();
  6158  001992  EC8E  F013         	call	_Detection_Pion_Off	;wreg free
  6159                           
  6160                           ;action.c: 849: nb_s_bequille = option;
  6161  001996  C288  F0A2         	movff	Mouvement_Bequille@option,_nb_s_bequille
  6162                           
  6163                           ;action.c: 852: consigne = 10;
  6164  00199A  0E0A               	movlw	10
  6165  00199C  0100               	movlb	0	; () banked
  6166  00199E  6F98               	movwf	_consigne& (0+255),b	;volatile
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;action.c: 863: index = 0;
  6170  0019A0  ECE7  F00E         	call	_u_Init_PWM	;wreg free
  6171                           
  6172                           ; BSR set to: 0
  6173                           ;action.c: 864: TMR2 = 0;
  6174  0019A4  6ACC               	clrf	4044,c	;volatile
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;action.c: 865: TMR2IF = 0;
  6178  0019A6  929E               	bcf	3998,1,c	;volatile
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;action.c: 870: LATEbits.LATE2 = 1;
  6182  0019A8  848D               	bsf	3981,2,c	;volatile
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;action.c: 875: moteur_indice = 3;
  6186  0019AA  0E03               	movlw	3
  6187  0019AC  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  6188                           
  6189                           ; BSR set to: 0
  6190                           ;action.c: 876: Init_ADC_Single_Shoot_I_Moteur_2();
  6191  0019AE  EC83  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;action.c: 879: if (direction == 0) {
  6195  0019B2  0102               	movlb	2	; () banked
  6196  0019B4  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6197  0019B6  E103               	bnz	l1017
  6198                           
  6199                           ; BSR set to: 2
  6200                           ;action.c: 880: LATD7 = 0;LATD6 = 1;
  6201  0019B8  9E8C               	bcf	3980,7,c	;volatile
  6202  0019BA  8C8C               	bsf	3980,6,c	;volatile
  6203                           
  6204                           ;action.c: 881: } else {
  6205  0019BC  D002               	goto	l8862
  6206  0019BE                     l1017:
  6207                           
  6208                           ; BSR set to: 2
  6209                           ;action.c: 882: LATD6 = 0;LATD7 = 1;
  6210  0019BE  9C8C               	bcf	3980,6,c	;volatile
  6211  0019C0  8E8C               	bsf	3980,7,c	;volatile
  6212  0019C2                     l8862:
  6213                           
  6214                           ; BSR set to: 2
  6215                           ;action.c: 883: }
  6216                           ;action.c: 884: PDC1L = 1 << 2;
  6217  0019C2  0E04               	movlw	4
  6218  0019C4  6E77               	movwf	3959,c	;volatile
  6219                           
  6220                           ; BSR set to: 2
  6221                           ;action.c: 885: PDC1H = 0;
  6222  0019C6  6A76               	clrf	3958,c	;volatile
  6223                           
  6224                           ;action.c: 886: OVDCOND = 0b00000100;
  6225  0019C8  0E04               	movlw	4
  6226  0019CA  6E6B               	movwf	3947,c	;volatile
  6227                           
  6228                           ; BSR set to: 2
  6229                           ;action.c: 887: LATCbits.LATC1 = 1;
  6230  0019CC  828B               	bsf	3979,1,c	;volatile
  6231                           
  6232                           ;action.c: 889: erreur = 1;
  6233  0019CE  0100               	movlb	0	; () banked
  6234  0019D0  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  6235  0019D2  0E01               	movlw	1
  6236  0019D4  6F84               	movwf	_erreur& (0+255),b	;volatile
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;action.c: 890: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  6240  0019D6  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6241  0019D8  46E8               	rlncf	wreg,f,c
  6242  0019DA  0BFC               	andlw	252
  6243  0019DC  6E77               	movwf	3959,c	;volatile
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;action.c: 891: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  6247  0019DE  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6248  0019E0  46E8               	rlncf	wreg,f,c
  6249  0019E2  0B03               	andlw	3
  6250  0019E4  6E76               	movwf	3958,c	;volatile
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;action.c: 894: erreur_accumulator = 0;
  6254  0019E6  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  6255  0019E8  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;action.c: 897: Nouvelle_Valeur_ADC = 0;
  6259  0019EA  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;action.c: 901: PIE3bits.PTIE = 0;
  6263  0019EC  98A3               	bcf	4003,4,c	;volatile
  6264                           
  6265                           ; BSR set to: 0
  6266                           ;action.c: 902: PIE1bits.ADIE = 1;
  6267  0019EE  8C9D               	bsf	3997,6,c	;volatile
  6268                           
  6269                           ; BSR set to: 0
  6270                           ;action.c: 903: PIE1bits.ADIE = 1;
  6271  0019F0  8C9D               	bsf	3997,6,c	;volatile
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;action.c: 905: PEIE = 1;
  6275  0019F2  8CF2               	bsf	intcon,6,c	;volatile
  6276                           
  6277                           ; BSR set to: 0
  6278                           ;action.c: 906: GIE = 1;
  6279  0019F4  8EF2               	bsf	intcon,7,c	;volatile
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;action.c: 907: TIMER2_On();
  6283  0019F6  EC9E  F013         	call	_TIMER2_On	;wreg free
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;action.c: 908: ADIF = 0;
  6287  0019FA  9C9E               	bcf	3998,6,c	;volatile
  6288                           
  6289                           ;action.c: 925: Init_Moteur_Bequille();
  6290  0019FC  EC3D  F013         	call	_Init_Moteur_Bequille	;wreg free
  6291  001A00                     l8890:
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;action.c: 929: Check_List_Moteur_Bequille();
  6295  001A00  EC30  F010         	call	_Check_List_Moteur_Bequille	;wreg free
  6296                           
  6297                           ;action.c: 930: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  6298  001A04  0102               	movlb	2	; () banked
  6299  001A06  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6300  001A08  E104               	bnz	l8896
  6301                           
  6302                           ; BSR set to: 2
  6303  001A0A  0E08               	movlw	8
  6304  001A0C  0100               	movlb	0	; () banked
  6305  001A0E  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6306  001A10  E0F7               	bz	l8890
  6307  001A12                     l8896:
  6308  001A12  0102               	movlb	2	; () banked
  6309  001A14  0589               	decf	Mouvement_Bequille@direction& (0+255),w,b
  6310  001A16  E104               	bnz	l1024
  6311                           
  6312                           ; BSR set to: 2
  6313  001A18  0E09               	movlw	9
  6314  001A1A  0100               	movlb	0	; () banked
  6315  001A1C  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6316  001A1E  E0F0               	bz	l8890
  6317  001A20                     l1024:
  6318                           
  6319                           ;action.c: 934: PIE3bits.PTIE = 0;
  6320  001A20  98A3               	bcf	4003,4,c	;volatile
  6321                           
  6322                           ;action.c: 935: PIE1bits.ADIE = 0;
  6323  001A22  9C9D               	bcf	3997,6,c	;volatile
  6324                           
  6325                           ;action.c: 941: LATEbits.LATE2 = 0;
  6326  001A24  948D               	bcf	3981,2,c	;volatile
  6327                           
  6328                           ;action.c: 946: Surveillance_Consommation_Moteur_2_Desactiver();
  6329  001A26  EC5D  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;action.c: 948: Coupe_Moteur();
  6333  001A2A  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  6334                           
  6335                           ;action.c: 949: delay_s(1);
  6336  001A2E  0E01               	movlw	1
  6337  001A30  EFAB  F011         	goto	_delay_s
  6338  001A34                     __end_of_Mouvement_Bequille:
  6339                           	opt stack 0
  6340                           tblptru	equ	0xFF8
  6341                           prodh	equ	0xFF4
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           intcon2	equ	0xFF1
  6345                           intcon3	equ	0xFF0
  6346                           postinc0	equ	0xFEE
  6347                           wreg	equ	0xFE8
  6348                           postdec1	equ	0xFE5
  6349                           fsr1h	equ	0xFE2
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _u_Init_PWM *****************
  6357 ;; Defined at:
  6358 ;;		line 56 in file "pwm.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;                  1    wreg      void 
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0
  6367 ;; Tracked objects:
  6368 ;;		On entry : 3F/0
  6369 ;;		On exit  : 3F/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6372 ;;      Params:         0       0       0       0
  6373 ;;      Locals:         0       0       0       0
  6374 ;;      Temps:          0       0       0       0
  6375 ;;      Totals:         0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:   10
  6379 ;; This function calls:
  6380 ;;		Nothing
  6381 ;; This function is called by:
  6382 ;;		_Mouvement_Bequille
  6383 ;;		_Mouvement_Z
  6384 ;;		_Mouvement_X
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text34
  6389  001DCE                     __ptext34:
  6390                           	opt stack 0
  6391  001DCE                     _u_Init_PWM:
  6392                           	opt stack 18
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;incstack = 0
  6399  001DCE  9E7E               	bcf	3966,7,c	;volatile
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;pwm.c: 64: PDC0L = 1 << 2;
  6403  001DD0  0E04               	movlw	4
  6404  001DD2  6E79               	movwf	3961,c	;volatile
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;pwm.c: 65: PDC0H = 0;
  6408  001DD4  6A78               	clrf	3960,c	;volatile
  6409                           
  6410                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  6411  001DD6  0E1F               	movlw	31
  6412  001DD8  6E7B               	movwf	3963,c	;volatile
  6413                           
  6414                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  6415  001DDA  0E3F               	movlw	63
  6416  001DDC  6E7B               	movwf	3963,c	;volatile
  6417                           
  6418                           ; BSR set to: 0
  6419                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  6420  001DDE  287B               	incf	3963,w,c	;volatile
  6421  001DE0  6F8D               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  6425  001DE2  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  6426  001DE4  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  6427                           
  6428                           ; BSR set to: 0
  6429                           ;pwm.c: 87: PTPERH = 0;
  6430  001DE6  6A7A               	clrf	3962,c	;volatile
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;pwm.c: 94: PTCON0 = 0b00000011;
  6434  001DE8  0E03               	movlw	3
  6435  001DEA  6E7F               	movwf	3967,c	;volatile
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  6439  001DEC  0E0F               	movlw	-241
  6440  001DEE  167F               	andwf	3967,f,c	;volatile
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  6444  001DF0  0EF3               	movlw	-13
  6445  001DF2  167F               	andwf	3967,f,c	;volatile
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  6449  001DF4  507F               	movf	3967,w,c	;volatile
  6450  001DF6  0BFC               	andlw	-4
  6451  001DF8  0902               	iorlw	2
  6452  001DFA  6E7F               	movwf	3967,c	;volatile
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;pwm.c: 116: PTCON1 = 0b10000000;
  6456  001DFC  0E80               	movlw	128
  6457  001DFE  6E7E               	movwf	3966,c	;volatile
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  6461  001E00  506F               	movf	3951,w,c	;volatile
  6462  001E02  0B8F               	andlw	-113
  6463  001E04  0910               	iorlw	16
  6464  001E06  6E6F               	movwf	3951,c	;volatile
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  6468  001E08  0E0F               	movlw	15
  6469  001E0A  126F               	iorwf	3951,f,c	;volatile
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  6473  001E0C  0E3F               	movlw	63
  6474  001E0E  6E6F               	movwf	3951,c	;volatile
  6475                           
  6476                           ; BSR set to: 0
  6477                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  6478  001E10  6A6E               	clrf	3950,c	;volatile
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  6482  001E12  0E01               	movlw	1
  6483  001E14  6E6E               	movwf	3950,c	;volatile
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;pwm.c: 155: DTCON = 0b00000000;
  6487  001E16  6A6D               	clrf	3949,c	;volatile
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;pwm.c: 156: OVDCOND = 0b00000101;
  6491  001E18  0E05               	movlw	5
  6492  001E1A  6E6B               	movwf	3947,c	;volatile
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;pwm.c: 158: OVDCONS = 0b00000000;
  6496  001E1C  6A6A               	clrf	3946,c	;volatile
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;pwm.c: 164: SEVTDIR = 0;
  6500  001E1E  966E               	bcf	3950,3,c	;volatile
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;pwm.c: 166: SEVTCMPH = 0;
  6504  001E20  6A70               	clrf	3952,c	;volatile
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;pwm.c: 167: SEVTCMPL = 10;
  6508  001E22  0E0A               	movlw	10
  6509  001E24  6E71               	movwf	3953,c	;volatile
  6510                           
  6511                           ; BSR set to: 0
  6512  001E26  0C0A               	retlw	10	;funcret
  6513  001E28                     __end_of_u_Init_PWM:
  6514                           	opt stack 0
  6515                           tblptru	equ	0xFF8
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           intcon2	equ	0xFF1
  6520                           intcon3	equ	0xFF0
  6521                           postinc0	equ	0xFEE
  6522                           wreg	equ	0xFE8
  6523                           postdec1	equ	0xFE5
  6524                           fsr1h	equ	0xFE2
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           fsr2h	equ	0xFDA
  6528                           fsr2l	equ	0xFD9
  6529                           status	equ	0xFD8
  6530                           
  6531 ;; *************** function _delay_s *****************
  6532 ;; Defined at:
  6533 ;;		line 91 in file "horloge.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  delay_time      1    wreg     unsigned char 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  delay_time      1   17[BANK0 ] unsigned char 
  6538 ;;  Timer_0_Etat    1   18[BANK0 ] unsigned char 
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      void 
  6541 ;; Registers used:
  6542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 3F/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6548 ;;      Params:         0       0       0       0
  6549 ;;      Locals:         0       2       0       0
  6550 ;;      Temps:          0       0       0       0
  6551 ;;      Totals:         0       2       0       0
  6552 ;;Total ram usage:        2 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:   17
  6555 ;; This function calls:
  6556 ;;		_EUSART1_Check_Buffer
  6557 ;;		_TIMER0_Off
  6558 ;;		_TIMER0_On
  6559 ;; This function is called by:
  6560 ;;		_Cycle
  6561 ;;		_Mouvement_Bequille
  6562 ;;		_Mouvement_Z
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text35
  6567  002356                     __ptext35:
  6568                           	opt stack 0
  6569  002356                     _delay_s:
  6570                           	opt stack 12
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;incstack = 0
  6574                           ;delay_s@delay_time stored from wreg
  6575  002356  0100               	movlb	0	; () banked
  6576  002358  6FFE               	movwf	delay_s@delay_time& (0+255),b
  6577                           
  6578                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  6579                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  6580  00235A  C088  F0FF         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  6581                           
  6582                           ;horloge.c: 95: delay_s_counter = 0;
  6583  00235E  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;horloge.c: 98: TIMER0_On();
  6587  002360  EC98  F012         	call	_TIMER0_On	;wreg free
  6588                           
  6589                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  6590  002364  D002               	goto	l8436
  6591  002366                     l8434:
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;horloge.c: 101: EUSART1_Check_Buffer();
  6595  002366  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  6596  00236A                     l8436:
  6597  00236A  0100               	movlb	0	; () banked
  6598  00236C  51FE               	movf	delay_s@delay_time& (0+255),w,b
  6599  00236E  5D8C               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  6600  002370  E3FA               	bnc	l8434
  6601                           
  6602                           ; BSR set to: 0
  6603                           ;horloge.c: 104: }
  6604                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  6605  002372  51FF               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  6606  002374  B4D8               	btfsc	status,2,c
  6607                           
  6608                           ; BSR set to: 0
  6609  002376  EC7E  F013         	call	_TIMER0_Off	;wreg free
  6610                           
  6611                           ; BSR set to: 0
  6612  00237A  0012               	return		;funcret
  6613  00237C                     __end_of_delay_s:
  6614                           	opt stack 0
  6615                           tblptru	equ	0xFF8
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           intcon	equ	0xFF2
  6619                           intcon2	equ	0xFF1
  6620                           intcon3	equ	0xFF0
  6621                           postinc0	equ	0xFEE
  6622                           wreg	equ	0xFE8
  6623                           postdec1	equ	0xFE5
  6624                           fsr1h	equ	0xFE2
  6625                           fsr1l	equ	0xFE1
  6626                           indf2	equ	0xFDF
  6627                           fsr2h	equ	0xFDA
  6628                           fsr2l	equ	0xFD9
  6629                           status	equ	0xFD8
  6630                           
  6631 ;; *************** function _TIMER0_Off *****************
  6632 ;; Defined at:
  6633 ;;		line 111 in file "timer.c"
  6634 ;; Parameters:    Size  Location     Type
  6635 ;;		None
  6636 ;; Auto vars:     Size  Location     Type
  6637 ;;		None
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		None
  6642 ;; Tracked objects:
  6643 ;;		On entry : 3D/0
  6644 ;;		On exit  : 3F/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6647 ;;      Params:         0       0       0       0
  6648 ;;      Locals:         0       0       0       0
  6649 ;;      Temps:          0       0       0       0
  6650 ;;      Totals:         0       0       0       0
  6651 ;;Total ram usage:        0 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:   10
  6654 ;; This function calls:
  6655 ;;		Nothing
  6656 ;; This function is called by:
  6657 ;;		_Stop_Moteur_1
  6658 ;;		_delay_s
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text36
  6663  0026FC                     __ptext36:
  6664                           	opt stack 0
  6665  0026FC                     _TIMER0_Off:
  6666                           	opt stack 18
  6667                           
  6668                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;incstack = 0
  6672  0026FC  9ED5               	bcf	4053,7,c	;volatile
  6673                           
  6674                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  6675  0026FE  9AF2               	bcf	intcon,5,c	;volatile
  6676                           
  6677                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  6678  002700  94F2               	bcf	intcon,2,c	;volatile
  6679                           
  6680                           ;timer.c: 117: TIMER0_Etat = 0;
  6681  002702  0100               	movlb	0	; () banked
  6682  002704  6B88               	clrf	_TIMER0_Etat& (0+255),b
  6683                           
  6684                           ; BSR set to: 0
  6685  002706  0012               	return		;funcret
  6686  002708                     __end_of_TIMER0_Off:
  6687                           	opt stack 0
  6688                           tblptru	equ	0xFF8
  6689                           prodh	equ	0xFF4
  6690                           prodl	equ	0xFF3
  6691                           intcon	equ	0xFF2
  6692                           intcon2	equ	0xFF1
  6693                           intcon3	equ	0xFF0
  6694                           postinc0	equ	0xFEE
  6695                           wreg	equ	0xFE8
  6696                           postdec1	equ	0xFE5
  6697                           fsr1h	equ	0xFE2
  6698                           fsr1l	equ	0xFE1
  6699                           indf2	equ	0xFDF
  6700                           fsr2h	equ	0xFDA
  6701                           fsr2l	equ	0xFD9
  6702                           status	equ	0xFD8
  6703                           
  6704 ;; *************** function _TIMER2_On *****************
  6705 ;; Defined at:
  6706 ;;		line 158 in file "timer.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;		None
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      void 
  6713 ;; Registers used:
  6714 ;;		None
  6715 ;; Tracked objects:
  6716 ;;		On entry : 3F/0
  6717 ;;		On exit  : 3F/0
  6718 ;;		Unchanged: 3F/0
  6719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6720 ;;      Params:         0       0       0       0
  6721 ;;      Locals:         0       0       0       0
  6722 ;;      Temps:          0       0       0       0
  6723 ;;      Totals:         0       0       0       0
  6724 ;;Total ram usage:        0 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:   10
  6727 ;; This function calls:
  6728 ;;		Nothing
  6729 ;; This function is called by:
  6730 ;;		_Mouvement_Bequille
  6731 ;;		_Mouvement_Z
  6732 ;;		_Mouvement_X
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736                           	psect	text37
  6737  00273C                     __ptext37:
  6738                           	opt stack 0
  6739  00273C                     _TIMER2_On:
  6740                           	opt stack 18
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  6744                           
  6745                           ; BSR set to: 0
  6746                           ;incstack = 0
  6747  00273C  829D               	bsf	3997,1,c	;volatile
  6748                           
  6749                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  6750  00273E  929E               	bcf	3998,1,c	;volatile
  6751                           
  6752                           ; BSR set to: 0
  6753  002740  0012               	return		;funcret
  6754  002742                     __end_of_TIMER2_On:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           prodh	equ	0xFF4
  6758                           prodl	equ	0xFF3
  6759                           intcon	equ	0xFF2
  6760                           intcon2	equ	0xFF1
  6761                           intcon3	equ	0xFF0
  6762                           postinc0	equ	0xFEE
  6763                           wreg	equ	0xFE8
  6764                           postdec1	equ	0xFE5
  6765                           fsr1h	equ	0xFE2
  6766                           fsr1l	equ	0xFE1
  6767                           indf2	equ	0xFDF
  6768                           fsr2h	equ	0xFDA
  6769                           fsr2l	equ	0xFD9
  6770                           status	equ	0xFD8
  6771                           
  6772 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  6773 ;; Defined at:
  6774 ;;		line 876 in file "interrupt.c"
  6775 ;; Parameters:    Size  Location     Type
  6776 ;;		None
  6777 ;; Auto vars:     Size  Location     Type
  6778 ;;		None
  6779 ;; Return value:  Size  Location     Type
  6780 ;;                  1    wreg      void 
  6781 ;; Registers used:
  6782 ;;		wreg, status,2
  6783 ;; Tracked objects:
  6784 ;;		On entry : 0/2
  6785 ;;		On exit  : 3F/0
  6786 ;;		Unchanged: 0/0
  6787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6788 ;;      Params:         0       0       0       0
  6789 ;;      Locals:         0       0       0       0
  6790 ;;      Temps:          0       0       0       0
  6791 ;;      Totals:         0       0       0       0
  6792 ;;Total ram usage:        0 bytes
  6793 ;; Hardware stack levels used:    1
  6794 ;; Hardware stack levels required when called:   10
  6795 ;; This function calls:
  6796 ;;		Nothing
  6797 ;; This function is called by:
  6798 ;;		_Mouvement_Bequille
  6799 ;;		_Mouvement_Z
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text38
  6804  0026BA                     __ptext38:
  6805                           	opt stack 0
  6806  0026BA                     _Surveillance_Consommation_Moteur_2_Desactiver:
  6807                           	opt stack 18
  6808                           
  6809                           ;interrupt.c: 877: if (Surveillance_Consommation_Moteur_2 != 0) {
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;incstack = 0
  6813  0026BA  0100               	movlb	0	; () banked
  6814  0026BC  518A               	movf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
  6815  0026BE  B4D8               	btfsc	status,2,c
  6816  0026C0  0012               	return	
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;interrupt.c: 878: Surveillance_Consommation_Moteur_2 = 0;
  6820  0026C2  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  6821                           
  6822                           ;interrupt.c: 879: INTCON3bits.INT2IE = 0;
  6823  0026C4  98F0               	bcf	intcon3,4,c	;volatile
  6824                           
  6825                           ; BSR set to: 0
  6826  0026C6  0012               	return		;funcret
  6827  0026C8                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           prodh	equ	0xFF4
  6831                           prodl	equ	0xFF3
  6832                           intcon	equ	0xFF2
  6833                           intcon2	equ	0xFF1
  6834                           intcon3	equ	0xFF0
  6835                           postinc0	equ	0xFEE
  6836                           wreg	equ	0xFE8
  6837                           postdec1	equ	0xFE5
  6838                           fsr1h	equ	0xFE2
  6839                           fsr1l	equ	0xFE1
  6840                           indf2	equ	0xFDF
  6841                           fsr2h	equ	0xFDA
  6842                           fsr2l	equ	0xFD9
  6843                           status	equ	0xFD8
  6844                           
  6845 ;; *************** function _Init_Moteur_Bequille *****************
  6846 ;; Defined at:
  6847 ;;		line 246 in file "action.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;		None
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 3F/0
  6858 ;;		On exit  : 3F/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6861 ;;      Params:         0       0       0       0
  6862 ;;      Locals:         0       0       0       0
  6863 ;;      Temps:          0       0       0       0
  6864 ;;      Totals:         0       0       0       0
  6865 ;;Total ram usage:        0 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:   11
  6868 ;; This function calls:
  6869 ;;		_TIMER0_On
  6870 ;; This function is called by:
  6871 ;;		_Mouvement_Bequille
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text39
  6876  00267A                     __ptext39:
  6877                           	opt stack 0
  6878  00267A                     _Init_Moteur_Bequille:
  6879                           	opt stack 17
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;action.c: 251: nb_s_fonctionnement = 0;
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;incstack = 0
  6886  00267A  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  6887                           
  6888                           ;action.c: 252: nb_Pion = 0;
  6889  00267C  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  6890                           
  6891                           ;action.c: 253: nb_100ms_Timer_5 = 0;
  6892  00267E  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;action.c: 254: TIMER0_On();
  6896  002680  EC98  F012         	call	_TIMER0_On	;wreg free
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;action.c: 256: INTCON3bits.INT2IE = 1;
  6900  002684  88F0               	bsf	intcon3,4,c	;volatile
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;action.c: 257: Compteur_IRQ_I_Moteur_2 = 0;
  6904  002686  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6905                           
  6906                           ; BSR set to: 0
  6907  002688  0012               	return		;funcret
  6908  00268A                     __end_of_Init_Moteur_Bequille:
  6909                           	opt stack 0
  6910                           tblptru	equ	0xFF8
  6911                           prodh	equ	0xFF4
  6912                           prodl	equ	0xFF3
  6913                           intcon	equ	0xFF2
  6914                           intcon2	equ	0xFF1
  6915                           intcon3	equ	0xFF0
  6916                           postinc0	equ	0xFEE
  6917                           wreg	equ	0xFE8
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           fsr2h	equ	0xFDA
  6923                           fsr2l	equ	0xFD9
  6924                           status	equ	0xFD8
  6925                           
  6926 ;; *************** function _TIMER0_On *****************
  6927 ;; Defined at:
  6928 ;;		line 87 in file "timer.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;                  1    wreg      void 
  6935 ;; Registers used:
  6936 ;;		wreg, status,2
  6937 ;; Tracked objects:
  6938 ;;		On entry : 3F/0
  6939 ;;		On exit  : 3F/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6942 ;;      Params:         0       0       0       0
  6943 ;;      Locals:         0       0       0       0
  6944 ;;      Temps:          0       0       0       0
  6945 ;;      Totals:         0       0       0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:   10
  6949 ;; This function calls:
  6950 ;;		Nothing
  6951 ;; This function is called by:
  6952 ;;		_Init_Moteur_1
  6953 ;;		_Init_Moteur_2
  6954 ;;		_Init_Moteur_Bequille
  6955 ;;		_delay_s
  6956 ;; This function uses a non-reentrant model
  6957 ;;
  6958                           
  6959                           	psect	text40
  6960  002530                     __ptext40:
  6961                           	opt stack 0
  6962  002530                     _TIMER0_On:
  6963                           	opt stack 18
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;timer.c: 88: TMR0H=0;
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;incstack = 0
  6970  002530  6AD7               	clrf	4055,c	;volatile
  6971                           
  6972                           ;timer.c: 89: TMR0L=0;
  6973  002532  6AD6               	clrf	4054,c	;volatile
  6974                           
  6975                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6976  002534  BED5               	btfsc	4053,7,c	;volatile
  6977  002536  D004               	goto	l8272
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6981  002538  8AF2               	bsf	intcon,5,c	;volatile
  6982                           
  6983                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6984  00253A  94F2               	bcf	intcon,2,c	;volatile
  6985                           
  6986                           ;timer.c: 94: LATC5=1;
  6987  00253C  8A8B               	bsf	3979,5,c	;volatile
  6988                           
  6989                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  6990  00253E  8ED5               	bsf	4053,7,c	;volatile
  6991  002540                     l8272:
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;timer.c: 97: }
  6995                           ;timer.c: 98: TIMER0_Etat = 1;
  6996  002540  0E01               	movlw	1
  6997  002542  6F88               	movwf	_TIMER0_Etat& (0+255),b
  6998                           
  6999                           ; BSR set to: 0
  7000  002544  0C01               	retlw	1	;funcret
  7001  002546                     __end_of_TIMER0_On:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           prodh	equ	0xFF4
  7005                           prodl	equ	0xFF3
  7006                           intcon	equ	0xFF2
  7007                           intcon2	equ	0xFF1
  7008                           intcon3	equ	0xFF0
  7009                           postinc0	equ	0xFEE
  7010                           wreg	equ	0xFE8
  7011                           postdec1	equ	0xFE5
  7012                           fsr1h	equ	0xFE2
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           fsr2h	equ	0xFDA
  7016                           fsr2l	equ	0xFD9
  7017                           status	equ	0xFD8
  7018                           
  7019 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  7020 ;; Defined at:
  7021 ;;		line 192 in file "adc.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg, status,2
  7030 ;; Tracked objects:
  7031 ;;		On entry : 3F/0
  7032 ;;		On exit  : 3F/0
  7033 ;;		Unchanged: 3F/0
  7034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7035 ;;      Params:         0       0       0       0
  7036 ;;      Locals:         0       0       0       0
  7037 ;;      Temps:          0       0       0       0
  7038 ;;      Totals:         0       0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:   10
  7042 ;; This function calls:
  7043 ;;		Nothing
  7044 ;; This function is called by:
  7045 ;;		_Mouvement_Bequille
  7046 ;;		_Mouvement_Z
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text41
  7051  001D06                     __ptext41:
  7052                           	opt stack 0
  7053  001D06                     _Init_ADC_Single_Shoot_I_Moteur_2:
  7054                           	opt stack 18
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  7058                           
  7059                           ; BSR set to: 0
  7060                           ;incstack = 0
  7061  001D06  9AC2               	bcf	4034,5,c	;volatile
  7062                           
  7063                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  7064  001D08  98C2               	bcf	4034,4,c	;volatile
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  7068  001D0A  50C2               	movf	4034,w,c	;volatile
  7069  001D0C  0BF3               	andlw	-13
  7070  001D0E  0904               	iorlw	4
  7071  001D10  6EC2               	movwf	4034,c	;volatile
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;adc.c: 199: ADCON0bits.ADON = 0;
  7075  001D12  90C2               	bcf	4034,0,c	;volatile
  7076                           
  7077                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  7078  001D14  0E3F               	movlw	-193
  7079  001D16  16C1               	andwf	4033,f,c	;volatile
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  7083  001D18  98C1               	bcf	4033,4,c	;volatile
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;adc.c: 212: ADCON1 = 0b00000000;
  7087  001D1A  6AC1               	clrf	4033,c	;volatile
  7088                           
  7089                           ; BSR set to: 0
  7090                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  7091  001D1C  9EC0               	bcf	4032,7,c	;volatile
  7092                           
  7093                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  7094  001D1E  50C0               	movf	4032,w,c	;volatile
  7095  001D20  0B87               	andlw	-121
  7096  001D22  0910               	iorlw	16
  7097  001D24  6EC0               	movwf	4032,c	;volatile
  7098                           
  7099                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  7100  001D26  50C0               	movf	4032,w,c	;volatile
  7101  001D28  0BF8               	andlw	-8
  7102  001D2A  0904               	iorlw	4
  7103  001D2C  6EC0               	movwf	4032,c	;volatile
  7104                           
  7105                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  7106  001D2E  50C0               	movf	4032,w,c	;volatile
  7107  001D30  0BF8               	andlw	-8
  7108  001D32  0901               	iorlw	1
  7109  001D34  6EC0               	movwf	4032,c	;volatile
  7110                           
  7111                           ;adc.c: 219: ADCON2 = 0b00010100;
  7112  001D36  0E14               	movlw	20
  7113  001D38  6EC0               	movwf	4032,c	;volatile
  7114                           
  7115                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  7116  001D3A  50C0               	movf	4032,w,c	;volatile
  7117  001D3C  0BF8               	andlw	-8
  7118  001D3E  0901               	iorlw	1
  7119  001D40  6EC0               	movwf	4032,c	;volatile
  7120                           
  7121                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  7122  001D42  0E3F               	movlw	-193
  7123  001D44  169A               	andwf	3994,f,c	;volatile
  7124                           
  7125                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  7126  001D46  509A               	movf	3994,w,c	;volatile
  7127  001D48  0BE0               	andlw	-32
  7128  001D4A  0910               	iorlw	16
  7129  001D4C  6E9A               	movwf	3994,c	;volatile
  7130                           
  7131                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  7132  001D4E  0EE0               	movlw	-32
  7133  001D50  169A               	andwf	3994,f,c	;volatile
  7134                           
  7135                           ;adc.c: 235: ADCON3 = 0b00010000;
  7136  001D52  0E10               	movlw	16
  7137  001D54  6E9A               	movwf	3994,c	;volatile
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;adc.c: 236: ADCON3 = 0x00;
  7141  001D56  6A9A               	clrf	3994,c	;volatile
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;adc.c: 241: ADCHS = 0b00000000;
  7145  001D58  6A99               	clrf	3993,c	;volatile
  7146                           
  7147                           ;adc.c: 242: ANSEL0 = 0b00000011;
  7148  001D5A  0E03               	movlw	3
  7149  001D5C  6EB8               	movwf	4024,c	;volatile
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;adc.c: 244: ANSEL1 = 0b00000000;
  7153  001D5E  6AB9               	clrf	4025,c	;volatile
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;adc.c: 253: PIE1bits.ADIE = 1;
  7157  001D60  8C9D               	bsf	3997,6,c	;volatile
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;adc.c: 254: ADIF=0;
  7161  001D62  9C9E               	bcf	3998,6,c	;volatile
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;adc.c: 255: IPR1bits.ADIP = 0;
  7165  001D64  9C9F               	bcf	3999,6,c	;volatile
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;adc.c: 260: ADON = 1;
  7169  001D66  80C2               	bsf	4034,0,c	;volatile
  7170                           
  7171                           ; BSR set to: 0
  7172                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  7173  001D68  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  7174                           
  7175                           ; BSR set to: 0
  7176  001D6A  0012               	return		;funcret
  7177  001D6C                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  7178                           	opt stack 0
  7179                           tblptru	equ	0xFF8
  7180                           prodh	equ	0xFF4
  7181                           prodl	equ	0xFF3
  7182                           intcon	equ	0xFF2
  7183                           intcon2	equ	0xFF1
  7184                           intcon3	equ	0xFF0
  7185                           postinc0	equ	0xFEE
  7186                           wreg	equ	0xFE8
  7187                           postdec1	equ	0xFE5
  7188                           fsr1h	equ	0xFE2
  7189                           fsr1l	equ	0xFE1
  7190                           indf2	equ	0xFDF
  7191                           fsr2h	equ	0xFDA
  7192                           fsr2l	equ	0xFD9
  7193                           status	equ	0xFD8
  7194                           
  7195 ;; *************** function _Detection_Pion_Off *****************
  7196 ;; Defined at:
  7197 ;;		line 126 in file "pion.c"
  7198 ;; Parameters:    Size  Location     Type
  7199 ;;		None
  7200 ;; Auto vars:     Size  Location     Type
  7201 ;;		None
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  1    wreg      void 
  7204 ;; Registers used:
  7205 ;;		None
  7206 ;; Tracked objects:
  7207 ;;		On entry : 3D/0
  7208 ;;		On exit  : 3D/0
  7209 ;;		Unchanged: 3D/0
  7210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7211 ;;      Params:         0       0       0       0
  7212 ;;      Locals:         0       0       0       0
  7213 ;;      Temps:          0       0       0       0
  7214 ;;      Totals:         0       0       0       0
  7215 ;;Total ram usage:        0 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:   10
  7218 ;; This function calls:
  7219 ;;		Nothing
  7220 ;; This function is called by:
  7221 ;;		_Mouvement_Bequille
  7222 ;;		_Mouvement_Z
  7223 ;;		_Mouvement_X
  7224 ;; This function uses a non-reentrant model
  7225 ;;
  7226                           
  7227                           	psect	text42
  7228  00271C                     __ptext42:
  7229                           	opt stack 0
  7230  00271C                     _Detection_Pion_Off:
  7231                           	opt stack 18
  7232                           
  7233                           ;pion.c: 141: Detecteur_Pion = 0;
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;incstack = 0
  7237  00271C  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  7238                           
  7239                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  7240  00271E  92A3               	bcf	4003,1,c	;volatile
  7241                           
  7242                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  7243  002720  92A4               	bcf	4004,1,c	;volatile
  7244  002722  0012               	return		;funcret
  7245  002724                     __end_of_Detection_Pion_Off:
  7246                           	opt stack 0
  7247                           tblptru	equ	0xFF8
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon2	equ	0xFF1
  7252                           intcon3	equ	0xFF0
  7253                           postinc0	equ	0xFEE
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1h	equ	0xFE2
  7257                           fsr1l	equ	0xFE1
  7258                           indf2	equ	0xFDF
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _Check_List_Moteur_Bequille *****************
  7264 ;; Defined at:
  7265 ;;		line 268 in file "action.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;		None
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;		None
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  1    wreg      void 
  7272 ;; Registers used:
  7273 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7279 ;;      Params:         0       0       0       0
  7280 ;;      Locals:         0       0       0       0
  7281 ;;      Temps:          0       1       0       0
  7282 ;;      Totals:         0       1       0       0
  7283 ;;Total ram usage:        1 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:   17
  7286 ;; This function calls:
  7287 ;;		_Alarme_On
  7288 ;;		_Coupe_Moteur
  7289 ;;		_EUSART1_Check_Buffer
  7290 ;;		_Etat_Update
  7291 ;;		_SPI_Check_Buffer
  7292 ;;		___lbdiv
  7293 ;; This function is called by:
  7294 ;;		_Mouvement_Bequille
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	text43
  7299  002060                     __ptext43:
  7300                           	opt stack 0
  7301  002060                     _Check_List_Moteur_Bequille:
  7302                           	opt stack 11
  7303                           
  7304                           ;action.c: 272: if (PORTBbits.RB4==0){
  7305                           
  7306                           ;incstack = 0
  7307  002060  B881               	btfsc	3969,4,c	;volatile
  7308  002062  D01C               	goto	l8642
  7309                           
  7310                           ;action.c: 277: if(PORTCbits.RC5 == 0){
  7311  002064  AA82               	btfss	3970,5,c	;volatile
  7312                           
  7313                           ;action.c: 278: Compteur_IRQ_I_Moteur_2 = 0;
  7314  002066  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  7315                           
  7316                           ;action.c: 279: }
  7317                           ;action.c: 283: EUSART1_Check_Buffer();
  7318  002068  EC46  F011         	call	_EUSART1_Check_Buffer	;wreg free
  7319                           
  7320                           ;action.c: 284: SPI_Check_Buffer();
  7321  00206C  EC30  F011         	call	_SPI_Check_Buffer	;wreg free
  7322                           
  7323                           ;action.c: 288: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  7324  002070  0100               	movlb	0	; () banked
  7325  002072  51A2               	movf	_nb_s_bequille& (0+255),w,b
  7326  002074  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  7327  002076  E20E               	bc	l998
  7328                           
  7329                           ; BSR set to: 0
  7330  002078  0E02               	movlw	2
  7331  00207A  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  7332  00207C  0C02               	retlw	2
  7333                           
  7334                           ; BSR set to: 0
  7335  00207E  0E05               	movlw	5
  7336  002080  6E0F               	movwf	___lbdiv@divisor,c
  7337  002082  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  7338  002084  ECE3  F010         	call	___lbdiv
  7339  002088  0100               	movlb	0	; () banked
  7340  00208A  6FFE               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  7341  00208C  5192               	movf	_Bequille_I_Max& (0+255),w,b
  7342  00208E  5DFE               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  7343  002090  A0D8               	btfss	status,0,c
  7344  002092  0012               	return	
  7345  002094                     l998:
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;action.c: 291: P4_busy = 0;
  7349  002094  6BAC               	clrf	_P4_busy& (0+255),b
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;action.c: 292: Etat_Update(0);
  7353  002096  0E00               	movlw	0
  7354  002098  EF35  F012         	goto	_Etat_Update
  7355  00209C                     l8642:
  7356                           
  7357                           ;action.c: 301: Coupe_Moteur();
  7358  00209C  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  7359                           
  7360                           ;action.c: 302: Alarme_On(7);
  7361  0020A0  0E07               	movlw	7
  7362  0020A2  EF45  F013         	goto	_Alarme_On
  7363  0020A6                     __end_of_Check_List_Moteur_Bequille:
  7364                           	opt stack 0
  7365                           tblptru	equ	0xFF8
  7366                           prodh	equ	0xFF4
  7367                           prodl	equ	0xFF3
  7368                           intcon	equ	0xFF2
  7369                           intcon2	equ	0xFF1
  7370                           intcon3	equ	0xFF0
  7371                           postinc0	equ	0xFEE
  7372                           wreg	equ	0xFE8
  7373                           postdec1	equ	0xFE5
  7374                           fsr1h	equ	0xFE2
  7375                           fsr1l	equ	0xFE1
  7376                           indf2	equ	0xFDF
  7377                           fsr2h	equ	0xFDA
  7378                           fsr2l	equ	0xFD9
  7379                           status	equ	0xFD8
  7380                           
  7381 ;; *************** function ___lbdiv *****************
  7382 ;; Defined at:
  7383 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  7384 ;; Parameters:    Size  Location     Type
  7385 ;;  dividend        1    wreg     unsigned char 
  7386 ;;  divisor         1   14[COMRAM] unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  dividend        1   15[COMRAM] unsigned char 
  7389 ;;  quotient        1   17[COMRAM] unsigned char 
  7390 ;;  counter         1   16[COMRAM] unsigned char 
  7391 ;; Return value:  Size  Location     Type
  7392 ;;                  1    wreg      unsigned char 
  7393 ;; Registers used:
  7394 ;;		wreg, status,2, status,0
  7395 ;; Tracked objects:
  7396 ;;		On entry : 3F/0
  7397 ;;		On exit  : 0/0
  7398 ;;		Unchanged: 0/0
  7399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7400 ;;      Params:         1       0       0       0
  7401 ;;      Locals:         3       0       0       0
  7402 ;;      Temps:          0       0       0       0
  7403 ;;      Totals:         4       0       0       0
  7404 ;;Total ram usage:        4 bytes
  7405 ;; Hardware stack levels used:    1
  7406 ;; Hardware stack levels required when called:   10
  7407 ;; This function calls:
  7408 ;;		Nothing
  7409 ;; This function is called by:
  7410 ;;		_Check_List_Moteur_Bequille
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           	psect	text44
  7415  0021C6                     __ptext44:
  7416                           	opt stack 0
  7417  0021C6                     ___lbdiv:
  7418                           	opt stack 17
  7419                           
  7420                           ;incstack = 0
  7421                           ;___lbdiv@dividend stored from wreg
  7422  0021C6  6E10               	movwf	___lbdiv@dividend,c
  7423  0021C8  6A12               	clrf	___lbdiv@quotient,c
  7424  0021CA  500F               	movf	___lbdiv@divisor,w,c
  7425  0021CC  E014               	bz	l8412
  7426  0021CE  0E01               	movlw	1
  7427  0021D0  6E11               	movwf	___lbdiv@counter,c
  7428  0021D2  D003               	goto	l8400
  7429  0021D4                     l8396:
  7430  0021D4  90D8               	bcf	status,0,c
  7431  0021D6  360F               	rlcf	___lbdiv@divisor,f,c
  7432  0021D8  2A11               	incf	___lbdiv@counter,f,c
  7433  0021DA                     l8400:
  7434  0021DA  AE0F               	btfss	___lbdiv@divisor,7,c
  7435  0021DC  D7FB               	goto	l8396
  7436  0021DE                     l8402:
  7437  0021DE  90D8               	bcf	status,0,c
  7438  0021E0  3612               	rlcf	___lbdiv@quotient,f,c
  7439  0021E2  500F               	movf	___lbdiv@divisor,w,c
  7440  0021E4  5C10               	subwf	___lbdiv@dividend,w,c
  7441  0021E6  E303               	bnc	l8408
  7442  0021E8  500F               	movf	___lbdiv@divisor,w,c
  7443  0021EA  5E10               	subwf	___lbdiv@dividend,f,c
  7444  0021EC  8012               	bsf	___lbdiv@quotient,0,c
  7445  0021EE                     l8408:
  7446  0021EE  90D8               	bcf	status,0,c
  7447  0021F0  320F               	rrcf	___lbdiv@divisor,f,c
  7448  0021F2  2E11               	decfsz	___lbdiv@counter,f,c
  7449  0021F4  D7F4               	goto	l8402
  7450  0021F6                     l8412:
  7451  0021F6  5012               	movf	___lbdiv@quotient,w,c
  7452  0021F8  0012               	return		;funcret
  7453  0021FA                     __end_of___lbdiv:
  7454                           	opt stack 0
  7455                           tblptru	equ	0xFF8
  7456                           prodh	equ	0xFF4
  7457                           prodl	equ	0xFF3
  7458                           intcon	equ	0xFF2
  7459                           intcon2	equ	0xFF1
  7460                           intcon3	equ	0xFF0
  7461                           postinc0	equ	0xFEE
  7462                           wreg	equ	0xFE8
  7463                           postdec1	equ	0xFE5
  7464                           fsr1h	equ	0xFE2
  7465                           fsr1l	equ	0xFE1
  7466                           indf2	equ	0xFDF
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function _SPI_Check_Buffer *****************
  7472 ;; Defined at:
  7473 ;;		line 348 in file "spi.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;		None
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      void 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7487 ;;      Params:         0       0       0       0
  7488 ;;      Locals:         0       0       0       0
  7489 ;;      Temps:          0       0       0       0
  7490 ;;      Totals:         0       0       0       0
  7491 ;;Total ram usage:        0 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:   16
  7494 ;; This function calls:
  7495 ;;		_EUSART1_RX_T3_LOCAL
  7496 ;; This function is called by:
  7497 ;;		_Cycle
  7498 ;;		_Check_List_Moteur_1
  7499 ;;		_Check_List_Moteur_2
  7500 ;;		_Check_List_Moteur_Bequille
  7501 ;;		_Mouvement_X
  7502 ;; This function uses a non-reentrant model
  7503 ;;
  7504                           
  7505                           	psect	text45
  7506  002260                     __ptext45:
  7507                           	opt stack 0
  7508  002260                     _SPI_Check_Buffer:
  7509                           	opt stack 13
  7510                           
  7511                           ;spi.c: 396: if (SPI_full == 1) {
  7512                           
  7513                           ;incstack = 0
  7514  002260  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7515  002262  0012               	return	
  7516                           
  7517                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  7518                           ;spi.c: 400: SPI_RX_TEXT[1],
  7519                           ;spi.c: 401: SPI_RX_TEXT[2],
  7520                           ;spi.c: 402: SPI_RX_TEXT[3],
  7521                           ;spi.c: 403: SPI_RX_TEXT[4],
  7522                           ;spi.c: 404: SPI_RX_TEXT[5],
  7523                           ;spi.c: 405: SPI_RX_TEXT[6],
  7524                           ;spi.c: 406: SPI_RX_TEXT[7]);
  7525  002264  C101  F280         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7526  002268  C102  F281         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7527  00226C  C103  F282         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7528  002270  C104  F283         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7529  002274  C105  F284         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7530  002278  C106  F285         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7531  00227C  C107  F286         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7532  002280  0101               	movlb	1	; () banked
  7533  002282  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  7534  002284  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7535                           
  7536                           ;spi.c: 408: SPI_full = 0;
  7537  002288  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7538  00228A  0012               	return		;funcret
  7539  00228C                     __end_of_SPI_Check_Buffer:
  7540                           	opt stack 0
  7541                           tblptru	equ	0xFF8
  7542                           prodh	equ	0xFF4
  7543                           prodl	equ	0xFF3
  7544                           intcon	equ	0xFF2
  7545                           intcon2	equ	0xFF1
  7546                           intcon3	equ	0xFF0
  7547                           postinc0	equ	0xFEE
  7548                           wreg	equ	0xFE8
  7549                           postdec1	equ	0xFE5
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           fsr2h	equ	0xFDA
  7554                           fsr2l	equ	0xFD9
  7555                           status	equ	0xFD8
  7556                           
  7557 ;; *************** function _EUSART1_Check_Buffer *****************
  7558 ;; Defined at:
  7559 ;;		line 268 in file "eusart.c"
  7560 ;; Parameters:    Size  Location     Type
  7561 ;;		None
  7562 ;; Auto vars:     Size  Location     Type
  7563 ;;		None
  7564 ;; Return value:  Size  Location     Type
  7565 ;;                  1    wreg      void 
  7566 ;; Registers used:
  7567 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7568 ;; Tracked objects:
  7569 ;;		On entry : 0/0
  7570 ;;		On exit  : 0/0
  7571 ;;		Unchanged: 0/0
  7572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7573 ;;      Params:         0       0       0       0
  7574 ;;      Locals:         0       0       0       0
  7575 ;;      Temps:          0       0       0       0
  7576 ;;      Totals:         0       0       0       0
  7577 ;;Total ram usage:        0 bytes
  7578 ;; Hardware stack levels used:    1
  7579 ;; Hardware stack levels required when called:   16
  7580 ;; This function calls:
  7581 ;;		_EUSART1_RX_T3_LOCAL
  7582 ;; This function is called by:
  7583 ;;		_Cycle
  7584 ;;		_Check_List_Moteur_1
  7585 ;;		_Check_List_Moteur_2
  7586 ;;		_Check_List_Moteur_Bequille
  7587 ;;		_Mouvement_X
  7588 ;;		_delay_s
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           	psect	text46
  7593  00228C                     __ptext46:
  7594                           	opt stack 0
  7595  00228C                     _EUSART1_Check_Buffer:
  7596                           	opt stack 12
  7597                           
  7598                           ;eusart.c: 270: if (RX1_full == 1) {
  7599                           
  7600                           ;incstack = 0
  7601  00228C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7602  00228E  0012               	return	
  7603                           
  7604                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  7605                           ;eusart.c: 274: UART_RX_TEXT[1],
  7606                           ;eusart.c: 275: UART_RX_TEXT[2],
  7607                           ;eusart.c: 276: UART_RX_TEXT[3],
  7608                           ;eusart.c: 277: UART_RX_TEXT[4],
  7609                           ;eusart.c: 278: UART_RX_TEXT[5],
  7610                           ;eusart.c: 279: UART_RX_TEXT[6],
  7611                           ;eusart.c: 280: UART_RX_TEXT[7]);
  7612  002290  C1C1  F280         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7613  002294  C1C2  F281         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7614  002298  C1C3  F282         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7615  00229C  C1C4  F283         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7616  0022A0  C1C5  F284         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7617  0022A4  C1C6  F285         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7618  0022A8  C1C7  F286         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7619  0022AC  0101               	movlb	1	; () banked
  7620  0022AE  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  7621  0022B0  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7622                           
  7623                           ;eusart.c: 282: RX1_full = 0;
  7624  0022B4  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7625  0022B6  0012               	return		;funcret
  7626  0022B8                     __end_of_EUSART1_Check_Buffer:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           prodh	equ	0xFF4
  7630                           prodl	equ	0xFF3
  7631                           intcon	equ	0xFF2
  7632                           intcon2	equ	0xFF1
  7633                           intcon3	equ	0xFF0
  7634                           postinc0	equ	0xFEE
  7635                           wreg	equ	0xFE8
  7636                           postdec1	equ	0xFE5
  7637                           fsr1h	equ	0xFE2
  7638                           fsr1l	equ	0xFE1
  7639                           indf2	equ	0xFDF
  7640                           fsr2h	equ	0xFDA
  7641                           fsr2l	equ	0xFD9
  7642                           status	equ	0xFD8
  7643                           
  7644 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  7645 ;; Defined at:
  7646 ;;		line 822 in file "eusart.c"
  7647 ;; Parameters:    Size  Location     Type
  7648 ;;  Ad              1    wreg     unsigned char 
  7649 ;;  Da              1    0[BANK2 ] unsigned char 
  7650 ;;  A               1    1[BANK2 ] unsigned char 
  7651 ;;  B               1    2[BANK2 ] unsigned char 
  7652 ;;  C               1    3[BANK2 ] unsigned char 
  7653 ;;  D               1    4[BANK2 ] unsigned char 
  7654 ;;  E               1    5[BANK2 ] unsigned char 
  7655 ;;  F               1    6[BANK2 ] unsigned char 
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;  Ad              1   63[COMRAM] unsigned char 
  7658 ;;  i               2   64[COMRAM] int 
  7659 ;;  Reponse         1    0        unsigned char 
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  1    wreg      void 
  7662 ;; Registers used:
  7663 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7664 ;; Tracked objects:
  7665 ;;		On entry : 3F/1
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7669 ;;      Params:         0       0       0       7
  7670 ;;      Locals:         3       0       0       0
  7671 ;;      Temps:          0       4       0       0
  7672 ;;      Totals:         3       4       0       7
  7673 ;;Total ram usage:       14 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:   15
  7676 ;; This function calls:
  7677 ;;		_Alarme_On
  7678 ;;		_Coupe_Moteur
  7679 ;;		_EUSART1_Buffer_Send
  7680 ;;		_Etat_Get
  7681 ;;		_Etat_Intitule
  7682 ;;		_Etat_Update
  7683 ;;		_IRQ_Execution
  7684 ;;		___awmod
  7685 ;;		_delay_1s
  7686 ;;		_sprintf
  7687 ;; This function is called by:
  7688 ;;		_EUSART1_Check_Buffer
  7689 ;;		_SPI_Check_Buffer
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           	psect	text47
  7694  0000D2                     __ptext47:
  7695                           	opt stack 0
  7696  0000D2                     _EUSART1_RX_T3_LOCAL:
  7697                           	opt stack 12
  7698                           
  7699                           ;incstack = 0
  7700                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  7701  0000D2  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  7702                           
  7703                           ;eusart.c: 823: int i;
  7704                           ;eusart.c: 824: unsigned char Reponse;
  7705                           ;eusart.c: 830: switch (Ad) {
  7706  0000D4  D391               	goto	l8188
  7707  0000D6                     l7898:
  7708                           
  7709                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  7710  0000D6  C280  F0FA         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  7711  0000DA  0ED0               	movlw	208
  7712  0000DC  0100               	movlb	0	; () banked
  7713  0000DE  27FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7714  0000E0  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7715  0000E2  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7716  0000E4  508B               	movf	3979,w,c	;volatile
  7717  0000E6  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7718  0000E8  0BFB               	andlw	-5
  7719  0000EA  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7720  0000EC  6E8B               	movwf	3979,c	;volatile
  7721                           
  7722                           ;eusart.c: 847: break;
  7723  0000EE  0012               	return	
  7724  0000F0                     l7900:
  7725                           
  7726                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  7727  0000F0  0EAD               	movlw	low _UART_TX_TEXT
  7728  0000F2  6E1B               	movwf	sprintf@sp,c
  7729  0000F4  0EB9               	movlw	low (STR_4+30)
  7730  0000F6  6E1C               	movwf	sprintf@f,c
  7731  0000F8  0E3F               	movlw	high (STR_4+30)
  7732  0000FA  6E1D               	movwf	sprintf@f+1,c
  7733  0000FC  C09B  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  7734  000100  6A1F               	clrf	?_sprintf+4,c
  7735  000102  EC6C  F004         	call	_sprintf	;wreg free
  7736  000106                     l7902:
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  7740  000106  0EAD               	movlw	low _UART_TX_TEXT
  7741  000108  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  7742  00010A  EFB8  F00B         	goto	_EUSART1_Buffer_Send	;wreg free
  7743  00010E                     l7904:
  7744                           
  7745                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  7746  00010E  0EAD               	movlw	low _UART_TX_TEXT
  7747  000110  6E1B               	movwf	sprintf@sp,c
  7748  000112  0EB7               	movlw	low STR_2
  7749  000114  6E1C               	movwf	sprintf@f,c
  7750  000116  0E3E               	movlw	high STR_2
  7751  000118  6E1D               	movwf	sprintf@f+1,c
  7752  00011A  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7753  00011E  6A1F               	clrf	?_sprintf+4,c
  7754  000120  C09B  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  7755  000124  6A21               	clrf	?_sprintf+6,c
  7756  000126  C09A  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  7757  00012A  6A23               	clrf	?_sprintf+8,c
  7758  00012C  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  7759  000130  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  7760  000134  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  7761  000138  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  7762  00013C  C09D  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  7763  000140  6A29               	clrf	?_sprintf+14,c
  7764  000142  C09F  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  7765  000146  6A2B               	clrf	?_sprintf+16,c
  7766  000148  EC6C  F004         	call	_sprintf	;wreg free
  7767  00014C  D7DC               	goto	l7902
  7768  00014E                     l7908:
  7769                           
  7770                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  7771  00014E  0EAD               	movlw	low _UART_TX_TEXT
  7772  000150  6E1B               	movwf	sprintf@sp,c
  7773  000152  0EEC               	movlw	low STR_3
  7774  000154  6E1C               	movwf	sprintf@f,c
  7775  000156  0E3F               	movlw	high STR_3
  7776  000158  6E1D               	movwf	sprintf@f+1,c
  7777  00015A  0E00               	movlw	0
  7778  00015C  EC17  F011         	call	_Etat_Get
  7779  000160  6E1E               	movwf	?_sprintf+3,c
  7780  000162  6A1F               	clrf	?_sprintf+4,c
  7781  000164  0E01               	movlw	1
  7782  000166  EC17  F011         	call	_Etat_Get
  7783  00016A  6E20               	movwf	?_sprintf+5,c
  7784  00016C  6A21               	clrf	?_sprintf+6,c
  7785  00016E  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7786  000172  6A23               	clrf	?_sprintf+8,c
  7787  000174  EC6C  F004         	call	_sprintf	;wreg free
  7788  000178  D7C6               	goto	l7902
  7789  00017A                     l1384:
  7790                           
  7791                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  7792  00017A  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  7793  00017C  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  7794  00017E                     l7916:
  7795                           
  7796                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  7797  00017E  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  7798  000180  08B6               	sublw	low (_UART_TX_TEXT+9)
  7799  000182  6ED9               	movwf	fsr2l,c
  7800  000184  6ADA               	clrf	fsr2h,c
  7801  000186  504C               	movf	_Etat_Precedent_Index,w,c
  7802  000188  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  7803  00018A  6E0F               	movwf	___awmod@dividend,c
  7804  00018C  0E00               	movlw	0
  7805  00018E  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  7806  000190  6E10               	movwf	___awmod@dividend+1,c
  7807  000192  6A12               	clrf	___awmod@divisor+1,c
  7808  000194  0E0A               	movlw	10
  7809  000196  6E11               	movwf	___awmod@divisor,c
  7810  000198  EC1C  F00E         	call	___awmod	;wreg free
  7811  00019C  500F               	movf	?___awmod,w,c
  7812  00019E  0F6A               	addlw	low _Etat_Log
  7813  0001A0  6EE1               	movwf	fsr1l,c
  7814  0001A2  6AE2               	clrf	fsr1h,c
  7815  0001A4  50E7               	movf	indf1,w,c
  7816  0001A6  ECFD  F010         	call	_Etat_Intitule
  7817  0001AA  6EDF               	movwf	indf2,c
  7818  0001AC  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  7819  0001AE  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  7820  0001B0  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  7821  0001B2  D7E5               	goto	l7916
  7822  0001B4  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  7823  0001B6  E103               	bnz	u6130
  7824  0001B8  0E0A               	movlw	10
  7825  0001BA  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  7826  0001BC  E3E0               	bnc	l7916
  7827  0001BE                     u6130:
  7828                           
  7829                           ;eusart.c: 882: }
  7830                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  7831  0001BE  0100               	movlb	0	; () banked
  7832  0001C0  6BB7               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  7833  0001C2  D7A1               	goto	l7902
  7834  0001C4                     l7924:
  7835                           
  7836                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  7837  0001C4  0EAD               	movlw	low _UART_TX_TEXT
  7838  0001C6  6E1B               	movwf	sprintf@sp,c
  7839  0001C8  0E9B               	movlw	low STR_4
  7840  0001CA  6E1C               	movwf	sprintf@f,c
  7841  0001CC  0E3F               	movlw	high STR_4
  7842  0001CE  6E1D               	movwf	sprintf@f+1,c
  7843  0001D0  C04B  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  7844  0001D4  6A1F               	clrf	?_sprintf+4,c
  7845  0001D6  C0A1  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  7846  0001DA  6A21               	clrf	?_sprintf+6,c
  7847  0001DC  C0A6  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  7848  0001E0  6A23               	clrf	?_sprintf+8,c
  7849  0001E2  EC6C  F004         	call	_sprintf	;wreg free
  7850  0001E6  D78F               	goto	l7902
  7851  0001E8                     l7928:
  7852                           
  7853                           ;eusart.c: 898: consigne = (char) (5 * Da);
  7854  0001E8  0102               	movlb	2	; () banked
  7855  0001EA  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7856  0001EC  0D05               	mullw	5
  7857  0001EE  CFF3 F098          	movff	prodl,_consigne	;volatile
  7858                           
  7859                           ;eusart.c: 900: break;
  7860  0001F2  0012               	return	
  7861  0001F4                     l7930:
  7862                           
  7863                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  7864  0001F4  0EAD               	movlw	low _UART_TX_TEXT
  7865  0001F6  6E1B               	movwf	sprintf@sp,c
  7866  0001F8  0EF9               	movlw	low STR_5
  7867  0001FA  6E1C               	movwf	sprintf@f,c
  7868  0001FC  0E3F               	movlw	high STR_5
  7869  0001FE  6E1D               	movwf	sprintf@f+1,c
  7870  000200  C0AC  F01E         	movff	_P4_busy,?_sprintf+3
  7871  000204  6A1F               	clrf	?_sprintf+4,c
  7872  000206  EC6C  F004         	call	_sprintf	;wreg free
  7873  00020A  D77D               	goto	l7902
  7874  00020C                     l7934:
  7875                           
  7876                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  7877  00020C  0EAD               	movlw	low _UART_TX_TEXT
  7878  00020E  6E1B               	movwf	sprintf@sp,c
  7879  000210  0EB9               	movlw	low (STR_4+30)
  7880  000212  6E1C               	movwf	sprintf@f,c
  7881  000214  0E3F               	movlw	high (STR_4+30)
  7882  000216  6E1D               	movwf	sprintf@f+1,c
  7883  000218  0102               	movlb	2	; () banked
  7884  00021A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7885  00021C  0FD0               	addlw	208
  7886  00021E  EC17  F011         	call	_Etat_Get
  7887  000222  6E1E               	movwf	?_sprintf+3,c
  7888  000224  6A1F               	clrf	?_sprintf+4,c
  7889  000226  EC6C  F004         	call	_sprintf	;wreg free
  7890  00022A  D76D               	goto	l7902
  7891  00022C                     l7938:
  7892                           
  7893                           ;eusart.c: 920: Etat_Update(Da);
  7894  00022C  0102               	movlb	2	; () banked
  7895  00022E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7896  000230  EF35  F012         	goto	_Etat_Update
  7897  000234                     l7940:
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  7901  000234  0102               	movlb	2	; () banked
  7902  000236  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7903  000238  0D0A               	mullw	10
  7904  00023A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7905  00023E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7906  000240  0D64               	mullw	100
  7907  000242  50F3               	movf	prodl,w,c
  7908  000244  0100               	movlb	0	; () banked
  7909  000246  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7910  000248  0102               	movlb	2	; () banked
  7911  00024A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7912  00024C  0F30               	addlw	48
  7913  00024E  0100               	movlb	0	; () banked
  7914  000250  6F93               	movwf	_Pelle_I_Max& (0+255),b
  7915                           
  7916                           ;eusart.c: 943: break;
  7917  000252  0012               	return	
  7918  000254                     l7942:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7922  000254  0102               	movlb	2	; () banked
  7923  000256  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7924  000258  0D0A               	mullw	10
  7925  00025A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7926  00025E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7927  000260  0D64               	mullw	100
  7928  000262  50F3               	movf	prodl,w,c
  7929  000264  0100               	movlb	0	; () banked
  7930  000266  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7931  000268  0102               	movlb	2	; () banked
  7932  00026A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7933  00026C  0F30               	addlw	48
  7934  00026E  0100               	movlb	0	; () banked
  7935  000270  6F92               	movwf	_Bequille_I_Max& (0+255),b
  7936                           
  7937                           ;eusart.c: 946: break;
  7938  000272  0012               	return	
  7939  000274                     l7946:
  7940  000274  0ED0               	movlw	208
  7941  000276  0100               	movlb	0	; () banked
  7942  000278  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7943  00027A  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7944  00027C  0102               	movlb	2	; () banked
  7945  00027E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7946  000280  0100               	movlb	0	; () banked
  7947  000282  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7948  000284  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7949  000286  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7950  000288  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7951  00028A  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7952  00028C  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7953                           
  7954                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7955                           ; Switch size 1, requested type "speed"
  7956                           ; Number of cases is 1, Range of values is 0 to 0
  7957                           ; switch strategies available:
  7958                           ; Name         Instructions Cycles
  7959                           ; simple_byte            4     3 (average)
  7960                           ;	Chosen strategy is simple_byte
  7961  00028E  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7962  000290  A4D8               	btfss	status,2,c
  7963  000292  0012               	return	
  7964                           
  7965                           ; BSR set to: 0
  7966                           ; Switch size 1, requested type "speed"
  7967                           ; Number of cases is 3, Range of values is 1 to 3
  7968                           ; switch strategies available:
  7969                           ; Name         Instructions Cycles
  7970                           ; simple_byte           10     6 (average)
  7971                           ;	Chosen strategy is simple_byte
  7972  000294  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7973  000296  0A01               	xorlw	1	; case 1
  7974  000298  B4D8               	btfsc	status,2,c
  7975  00029A  0012               	return	
  7976  00029C  0A03               	xorlw	3	; case 2
  7977  00029E  E0CA               	bz	l7940
  7978  0002A0  0A01               	xorlw	1	; case 3
  7979  0002A2  E0D8               	bz	l7942
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;eusart.c: 949: break;
  7983  0002A4  0012               	return	
  7984  0002A6                     l7948:
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7988  0002A6  0102               	movlb	2	; () banked
  7989  0002A8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7990  0002AA  0D0A               	mullw	10
  7991  0002AC  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7992  0002B0  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7993  0002B2  0D64               	mullw	100
  7994  0002B4  50F3               	movf	prodl,w,c
  7995  0002B6  0100               	movlb	0	; () banked
  7996  0002B8  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7997  0002BA  0102               	movlb	2	; () banked
  7998  0002BC  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7999  0002BE  0F30               	addlw	48
  8000  0002C0  6E49               	movwf	_Consigne_en_A,c
  8001                           
  8002                           ; BSR set to: 2
  8003                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  8004  0002C2  C049  F098         	movff	_Consigne_en_A,_consigne	;volatile
  8005                           
  8006                           ; BSR set to: 2
  8007                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  8008  0002C6  C098  F097         	movff	_consigne,_Consigne_Max	;volatile
  8009                           
  8010                           ;eusart.c: 968: break;
  8011  0002CA  D0D6               	goto	l8000
  8012  0002CC                     l7954:
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8016  0002CC  0102               	movlb	2	; () banked
  8017  0002CE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8018  0002D0  0D0A               	mullw	10
  8019  0002D2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8020  0002D6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8021  0002D8  0D64               	mullw	100
  8022  0002DA  50F3               	movf	prodl,w,c
  8023  0002DC  0100               	movlb	0	; () banked
  8024  0002DE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8025  0002E0  0102               	movlb	2	; () banked
  8026  0002E2  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8027  0002E4  0F30               	addlw	48
  8028  0002E6  0100               	movlb	0	; () banked
  8029  0002E8  6FA7               	movwf	_nb_s_patinage& (0+255),b
  8030                           
  8031                           ;eusart.c: 971: break;
  8032  0002EA  D0C6               	goto	l8000
  8033  0002EC                     l7956:
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8037  0002EC  0102               	movlb	2	; () banked
  8038  0002EE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8039  0002F0  0D0A               	mullw	10
  8040  0002F2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8041  0002F6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8042  0002F8  0D64               	mullw	100
  8043  0002FA  50F3               	movf	prodl,w,c
  8044  0002FC  0100               	movlb	0	; () banked
  8045  0002FE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8046  000300  0102               	movlb	2	; () banked
  8047  000302  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8048  000304  0F30               	addlw	48
  8049  000306  0100               	movlb	0	; () banked
  8050  000308  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  8051                           
  8052                           ;eusart.c: 974: break;
  8053  00030A  D0B6               	goto	l8000
  8054  00030C                     l7958:
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  8058  00030C  0102               	movlb	2	; () banked
  8059  00030E  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8060  000310  0D0A               	mullw	10
  8061  000312  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8062  000316  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8063  000318  0D64               	mullw	100
  8064  00031A  50F3               	movf	prodl,w,c
  8065  00031C  0100               	movlb	0	; () banked
  8066  00031E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8067  000320  0102               	movlb	2	; () banked
  8068  000322  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8069  000324  0F30               	addlw	48
  8070  000326  0100               	movlb	0	; () banked
  8071  000328  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  8075  00032A  C0A4  F04E         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  8076                           
  8077                           ;eusart.c: 983: break;
  8078  00032E  D0A4               	goto	l8000
  8079  000330                     l7962:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  8083  000330  0102               	movlb	2	; () banked
  8084  000332  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8085  000334  0D0A               	mullw	10
  8086  000336  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8087  00033A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8088  00033C  0D64               	mullw	100
  8089  00033E  50F3               	movf	prodl,w,c
  8090  000340  0100               	movlb	0	; () banked
  8091  000342  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8092  000344  0102               	movlb	2	; () banked
  8093  000346  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8094  000348  0F30               	addlw	48
  8095  00034A  0100               	movlb	0	; () banked
  8096  00034C  6FA3               	movwf	_nb_s_pelle& (0+255),b
  8097                           
  8098                           ;eusart.c: 986: break;
  8099  00034E  D094               	goto	l8000
  8100  000350                     l7964:
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  8104  000350  0102               	movlb	2	; () banked
  8105  000352  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8106  000354  0FD0               	addlw	208
  8107  000356  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  8108                           
  8109                           ; BSR set to: 2
  8110                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8111  000358  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8112                           
  8113                           ;eusart.c: 990: break;
  8114  00035C  D08D               	goto	l8000
  8115  00035E                     l7968:
  8116                           
  8117                           ; BSR set to: 0
  8118                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  8119  00035E  0102               	movlb	2	; () banked
  8120  000360  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8121  000362  0FD0               	addlw	208
  8122  000364  0100               	movlb	0	; () banked
  8123  000366  6F9D               	movwf	_Patinage_Nb_Essai& (0+255),b
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8127  000368  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8128                           
  8129                           ;eusart.c: 994: break;
  8130  00036C  D085               	goto	l8000
  8131  00036E                     l7972:
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8135  00036E  0102               	movlb	2	; () banked
  8136  000370  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8137  000372  0D0A               	mullw	10
  8138  000374  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8139  000378  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8140  00037A  0D64               	mullw	100
  8141  00037C  50F3               	movf	prodl,w,c
  8142  00037E  0100               	movlb	0	; () banked
  8143  000380  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8144  000382  0102               	movlb	2	; () banked
  8145  000384  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8146  000386  0F30               	addlw	48
  8147  000388  6E49               	movwf	_Consigne_en_A,c
  8148                           
  8149                           ; BSR set to: 2
  8150                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  8151  00038A  C049  F096         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  8152                           
  8153                           ;eusart.c: 1000: break;
  8154  00038E  D074               	goto	l8000
  8155  000390                     l7976:
  8156                           
  8157                           ; BSR set to: 0
  8158                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8159  000390  0102               	movlb	2	; () banked
  8160  000392  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8161  000394  0D0A               	mullw	10
  8162  000396  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8163  00039A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8164  00039C  0D64               	mullw	100
  8165  00039E  50F3               	movf	prodl,w,c
  8166  0003A0  0100               	movlb	0	; () banked
  8167  0003A2  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8168  0003A4  0102               	movlb	2	; () banked
  8169  0003A6  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8170  0003A8  0F30               	addlw	48
  8171  0003AA  6E49               	movwf	_Consigne_en_A,c
  8172                           
  8173                           ; BSR set to: 2
  8174                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  8175  0003AC  C049  F095         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  8176                           
  8177                           ;eusart.c: 1006: break;
  8178  0003B0  D063               	goto	l8000
  8179  0003B2                     l7980:
  8180                           
  8181                           ; BSR set to: 0
  8182                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8183  0003B2  0102               	movlb	2	; () banked
  8184  0003B4  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8185  0003B6  0D0A               	mullw	10
  8186  0003B8  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8187  0003BC  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8188  0003BE  0D64               	mullw	100
  8189  0003C0  50F3               	movf	prodl,w,c
  8190  0003C2  0100               	movlb	0	; () banked
  8191  0003C4  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8192  0003C6  0102               	movlb	2	; () banked
  8193  0003C8  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8194  0003CA  0F30               	addlw	48
  8195  0003CC  6E49               	movwf	_Consigne_en_A,c
  8196                           
  8197                           ; BSR set to: 2
  8198                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  8199  0003CE  C049  F094         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  8200                           
  8201                           ;eusart.c: 1012: break;
  8202  0003D2  D052               	goto	l8000
  8203  0003D4                     l7986:
  8204  0003D4  0ED0               	movlw	208
  8205  0003D6  0100               	movlb	0	; () banked
  8206  0003D8  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8207  0003DA  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8208  0003DC  0102               	movlb	2	; () banked
  8209  0003DE  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8210  0003E0  0100               	movlb	0	; () banked
  8211  0003E2  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8212  0003E4  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8213  0003E6  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8214  0003E8  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8215  0003EA  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8216  0003EC  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8217                           
  8218                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8219                           ; Switch size 1, requested type "speed"
  8220                           ; Number of cases is 1, Range of values is 0 to 0
  8221                           ; switch strategies available:
  8222                           ; Name         Instructions Cycles
  8223                           ; simple_byte            4     3 (average)
  8224                           ;	Chosen strategy is simple_byte
  8225  0003EE  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8226  0003F0  E143               	bnz	l8000
  8227                           
  8228                           ; BSR set to: 0
  8229                           ; Switch size 1, requested type "speed"
  8230                           ; Number of cases is 10, Range of values is 0 to 9
  8231                           ; switch strategies available:
  8232                           ; Name         Instructions Cycles
  8233                           ; simple_byte           31    16 (average)
  8234                           ;	Chosen strategy is simple_byte
  8235  0003F2  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8236  0003F4  E101 D757          	bz	l7948
  8237  0003F8  0A01               	xorlw	1	; case 1
  8238  0003FA  E101 D767          	bz	l7954
  8239  0003FE  0A03               	xorlw	3	; case 2
  8240  000400  E101 D774          	bz	l7956
  8241  000404  0A01               	xorlw	1	; case 3
  8242  000406  E082               	bz	l7958
  8243  000408  0A07               	xorlw	7	; case 4
  8244  00040A  E092               	bz	l7962
  8245  00040C  0A01               	xorlw	1	; case 5
  8246  00040E  E0A0               	bz	l7964
  8247  000410  0A03               	xorlw	3	; case 6
  8248  000412  E0A5               	bz	l7968
  8249  000414  0A01               	xorlw	1	; case 7
  8250  000416  E0AB               	bz	l7972
  8251  000418  0A0F               	xorlw	15	; case 8
  8252  00041A  E0BA               	bz	l7976
  8253  00041C  0A01               	xorlw	1	; case 9
  8254  00041E  E0C9               	bz	l7980
  8255                           
  8256                           ; BSR set to: 0
  8257                           ;eusart.c: 1031: switch (Da - 0x30) {
  8258                           
  8259                           ;eusart.c: 1024: case 'V':
  8260  000420  D02B               	goto	l8000
  8261  000422                     l7988:
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  8265  000422  0EAD               	movlw	low _UART_TX_TEXT
  8266  000424  6E1B               	movwf	sprintf@sp,c
  8267  000426  0E6A               	movlw	low STR_7
  8268  000428  6E1C               	movwf	sprintf@f,c
  8269  00042A  0E3F               	movlw	high STR_7
  8270  00042C  6E1D               	movwf	sprintf@f+1,c
  8271  00042E  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  8272  000432  6A1F               	clrf	?_sprintf+4,c
  8273  000434  C0A7  F020         	movff	_nb_s_patinage,?_sprintf+5
  8274  000438  6A21               	clrf	?_sprintf+6,c
  8275  00043A  C0A5  F022         	movff	_nb_100ms_pion,?_sprintf+7
  8276  00043E  6A23               	clrf	?_sprintf+8,c
  8277  000440  C0A4  F024         	movff	_nb_100ms_platine,?_sprintf+9
  8278  000444  6A25               	clrf	?_sprintf+10,c
  8279  000446  C0A3  F026         	movff	_nb_s_pelle,?_sprintf+11
  8280  00044A  6A27               	clrf	?_sprintf+12,c
  8281  00044C  EC6C  F004         	call	_sprintf	;wreg free
  8282  000450  D65A               	goto	l7902
  8283  000452                     l7992:
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  8287  000452  0EAD               	movlw	low _UART_TX_TEXT
  8288  000454  6E1B               	movwf	sprintf@sp,c
  8289  000456  0EBC               	movlw	low STR_8
  8290  000458  6E1C               	movwf	sprintf@f,c
  8291  00045A  0E3F               	movlw	high STR_8
  8292  00045C  6E1D               	movwf	sprintf@f+1,c
  8293  00045E  C0AA  F01E         	movff	_Etat,?_sprintf+3	;volatile
  8294  000462  6A1F               	clrf	?_sprintf+4,c
  8295  000464  C04B  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  8296  000468  6A21               	clrf	?_sprintf+6,c
  8297  00046A  EC6C  F004         	call	_sprintf	;wreg free
  8298  00046E  D64B               	goto	l7902
  8299  000470                     l1418:
  8300                           
  8301                           ; BSR set to: 0
  8302                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  8303  000470  C281  F0AD         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  8304                           
  8305                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  8306  000474  6BAE               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  8307  000476  D647               	goto	l7902
  8308  000478                     l8000:
  8309  000478  0ED0               	movlw	208
  8310  00047A  0100               	movlb	0	; () banked
  8311  00047C  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8312  00047E  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8313  000480  0102               	movlb	2	; () banked
  8314  000482  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8315  000484  0100               	movlb	0	; () banked
  8316  000486  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8317  000488  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8318  00048A  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8319  00048C  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8320  00048E  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8321  000490  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8322                           
  8323                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8324                           ; Switch size 1, requested type "speed"
  8325                           ; Number of cases is 1, Range of values is 0 to 0
  8326                           ; switch strategies available:
  8327                           ; Name         Instructions Cycles
  8328                           ; simple_byte            4     3 (average)
  8329                           ;	Chosen strategy is simple_byte
  8330  000492  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8331  000494  A4D8               	btfss	status,2,c
  8332  000496  0012               	return	
  8333                           
  8334                           ; BSR set to: 0
  8335                           ; Switch size 1, requested type "speed"
  8336                           ; Number of cases is 3, Range of values is 0 to 9
  8337                           ; switch strategies available:
  8338                           ; Name         Instructions Cycles
  8339                           ; simple_byte           10     6 (average)
  8340                           ;	Chosen strategy is simple_byte
  8341  000498  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8342  00049A  E0C3               	bz	l7988
  8343  00049C  0A01               	xorlw	1	; case 1
  8344  00049E  E0D9               	bz	l7992
  8345  0004A0  0A08               	xorlw	8	; case 9
  8346  0004A2  A4D8               	btfss	status,2,c
  8347  0004A4  0012               	return	
  8348  0004A6  D7E4               	goto	l1418
  8349  0004A8                     l8002:
  8350                           
  8351                           ;eusart.c: 1062: Alarme_On(8);
  8352  0004A8  0E08               	movlw	8
  8353  0004AA  EF45  F013         	goto	_Alarme_On
  8354  0004AE                     l8004:
  8355                           
  8356                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  8357  0004AE  0EAD               	movlw	low _UART_TX_TEXT
  8358  0004B0  6E1B               	movwf	sprintf@sp,c
  8359  0004B2  0EB9               	movlw	low (STR_4+30)
  8360  0004B4  6E1C               	movwf	sprintf@f,c
  8361  0004B6  0E3F               	movlw	high (STR_4+30)
  8362  0004B8  6E1D               	movwf	sprintf@f+1,c
  8363  0004BA  C0AB  F01E         	movff	_Version,?_sprintf+3
  8364  0004BE  6A1F               	clrf	?_sprintf+4,c
  8365  0004C0  EC6C  F004         	call	_sprintf	;wreg free
  8366  0004C4  D620               	goto	l7902
  8367  0004C6                     l8008:
  8368                           
  8369                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  8370  0004C6  0EAD               	movlw	low _UART_TX_TEXT
  8371  0004C8  6E1B               	movwf	sprintf@sp,c
  8372  0004CA  0E16               	movlw	low STR_10
  8373  0004CC  6E1C               	movwf	sprintf@f,c
  8374  0004CE  0E3F               	movlw	high STR_10
  8375  0004D0  6E1D               	movwf	sprintf@f+1,c
  8376  0004D2  0E00               	movlw	0
  8377  0004D4  EC17  F011         	call	_Etat_Get
  8378  0004D8  6E1E               	movwf	?_sprintf+3,c
  8379  0004DA  6A1F               	clrf	?_sprintf+4,c
  8380  0004DC  0E01               	movlw	1
  8381  0004DE  EC17  F011         	call	_Etat_Get
  8382  0004E2  6E20               	movwf	?_sprintf+5,c
  8383  0004E4  6A21               	clrf	?_sprintf+6,c
  8384  0004E6  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  8385  0004EA  6A23               	clrf	?_sprintf+8,c
  8386  0004EC  C0A1  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  8387  0004F0  6A25               	clrf	?_sprintf+10,c
  8388  0004F2  C09B  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  8389  0004F6  6A27               	clrf	?_sprintf+12,c
  8390  0004F8  C09A  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  8391  0004FC  6A29               	clrf	?_sprintf+14,c
  8392  0004FE  C098  F02A         	movff	_consigne,?_sprintf+15	;volatile
  8393  000502  6A2B               	clrf	?_sprintf+16,c
  8394  000504  C0A7  F02C         	movff	_nb_s_patinage,?_sprintf+17
  8395  000508  6A2D               	clrf	?_sprintf+18,c
  8396  00050A  C0A5  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  8397  00050E  6A2F               	clrf	?_sprintf+20,c
  8398  000510  C0A4  F030         	movff	_nb_100ms_platine,?_sprintf+21
  8399  000514  6A31               	clrf	?_sprintf+22,c
  8400  000516  C0A3  F032         	movff	_nb_s_pelle,?_sprintf+23
  8401  00051A  6A33               	clrf	?_sprintf+24,c
  8402  00051C  0E01               	movlw	1
  8403  00051E  A480               	btfss	3968,2,c	;volatile
  8404  000520  0E00               	movlw	0
  8405  000522  6E34               	movwf	?_sprintf+25,c
  8406  000524  6A35               	clrf	?_sprintf+26,c
  8407  000526  0E01               	movlw	1
  8408  000528  A682               	btfss	3970,3,c	;volatile
  8409  00052A  0E00               	movlw	0
  8410  00052C  6E36               	movwf	?_sprintf+27,c
  8411  00052E  6A37               	clrf	?_sprintf+28,c
  8412  000530  0E01               	movlw	1
  8413  000532  A48D               	btfss	3981,2,c	;volatile
  8414  000534  0E00               	movlw	0
  8415  000536  6E38               	movwf	?_sprintf+29,c
  8416  000538  6A39               	clrf	?_sprintf+30,c
  8417  00053A  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  8418  00053E  6A3B               	clrf	?_sprintf+32,c
  8419  000540  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  8420  000544  6A3D               	clrf	?_sprintf+34,c
  8421  000546  C0AB  F03E         	movff	_Version,?_sprintf+35
  8422  00054A  6A3F               	clrf	?_sprintf+36,c
  8423  00054C  EC6C  F004         	call	_sprintf	;wreg free
  8424  000550  D5DA               	goto	l7902
  8425  000552                     l8012:
  8426                           
  8427                           ;eusart.c: 1148: Alarme_On(7);
  8428  000552  0E07               	movlw	7
  8429  000554  EF45  F013         	goto	_Alarme_On
  8430  000558                     l8014:
  8431                           
  8432                           ;eusart.c: 1155: Etat_Update(0);
  8433  000558  0E00               	movlw	0
  8434  00055A  EC35  F012         	call	_Etat_Update
  8435  00055E                     l8016:
  8436                           
  8437                           ;eusart.c: 1157: P4_busy = 0;
  8438  00055E  0100               	movlb	0	; () banked
  8439  000560  6BAC               	clrf	_P4_busy& (0+255),b
  8440                           
  8441                           ;eusart.c: 1161: break;
  8442  000562  0012               	return	
  8443  000564                     l1427:
  8444                           
  8445                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  8446  000564  A682               	btfss	3970,3,c	;volatile
  8447  000566  D0DB               	goto	l8132
  8448                           
  8449                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  8450  000568  0102               	movlb	2	; () banked
  8451  00056A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8452  00056C  0FD0               	addlw	208
  8453  00056E  0100               	movlb	0	; () banked
  8454  000570  6F8F               	movwf	_direction& (0+255),b	;volatile
  8455                           
  8456                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  8457  000572  0102               	movlb	2	; () banked
  8458  000574  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8459  000576  0FD0               	addlw	208
  8460  000578  0100               	movlb	0	; () banked
  8461  00057A  6F91               	movwf	_type_consigne& (0+255),b
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8465  00057C  0102               	movlb	2	; () banked
  8466  00057E  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8467  000580  0D0A               	mullw	10
  8468  000582  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8469  000586  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8470  000588  0D64               	mullw	100
  8471  00058A  50F3               	movf	prodl,w,c
  8472  00058C  0100               	movlb	0	; () banked
  8473  00058E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8474  000590  0102               	movlb	2	; () banked
  8475  000592  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8476  000594  0F30               	addlw	48
  8477  000596  0100               	movlb	0	; () banked
  8478  000598  6F90               	movwf	_mouvement_option& (0+255),b
  8479                           
  8480                           ;eusart.c: 1180: switch (E - 0x30) {
  8481  00059A  D008               	goto	l8024
  8482  00059C                     l1430:
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;eusart.c: 1182: Option_Multitas = 1;
  8486  00059C  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8487  00059E  D004               	goto	L1
  8488  0005A0                     l1432:
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;eusart.c: 1186: Option_Multitas = 0;
  8492  0005A0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8493                           
  8494                           ;eusart.c: 1187: Option_Pailleux = 1;
  8495  0005A2  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8496                           
  8497                           ;eusart.c: 1188: break;
  8498  0005A4  D017               	goto	l8026
  8499  0005A6                     l1433:
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;eusart.c: 1192: Option_Multitas = 0;
  8503  0005A6  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8504  0005A8                     L1:
  8505                           
  8506                           ;eusart.c: 1193: Option_Pailleux = 0;
  8507  0005A8  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8508                           
  8509                           ;eusart.c: 1194: }
  8510  0005AA  D014               	goto	l8026
  8511  0005AC                     l8024:
  8512                           
  8513                           ; BSR set to: 0
  8514  0005AC  0ED0               	movlw	208
  8515  0005AE  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8516  0005B0  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8517  0005B2  0102               	movlb	2	; () banked
  8518  0005B4  5185               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8519  0005B6  0100               	movlb	0	; () banked
  8520  0005B8  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8521  0005BA  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8522  0005BC  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8523  0005BE  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8524  0005C0  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8525  0005C2  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8526                           
  8527                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8528                           ; Switch size 1, requested type "speed"
  8529                           ; Number of cases is 1, Range of values is 0 to 0
  8530                           ; switch strategies available:
  8531                           ; Name         Instructions Cycles
  8532                           ; simple_byte            4     3 (average)
  8533                           ;	Chosen strategy is simple_byte
  8534  0005C4  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8535  0005C6  E1EF               	bnz	l1433
  8536                           
  8537                           ; BSR set to: 0
  8538                           ; Switch size 1, requested type "speed"
  8539                           ; Number of cases is 2, Range of values is 1 to 2
  8540                           ; switch strategies available:
  8541                           ; Name         Instructions Cycles
  8542                           ; simple_byte            7     4 (average)
  8543                           ;	Chosen strategy is simple_byte
  8544  0005C8  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8545  0005CA  0A01               	xorlw	1	; case 1
  8546  0005CC  E0E7               	bz	l1430
  8547  0005CE  0A03               	xorlw	3	; case 2
  8548  0005D0  E0E7               	bz	l1432
  8549  0005D2  D7E9               	goto	l1433
  8550  0005D4                     l8026:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  8554  0005D4  0E31               	movlw	49
  8555  0005D6  0102               	movlb	2	; () banked
  8556  0005D8  1985               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8557  0005DA  E102               	bnz	l1434
  8558                           
  8559                           ; BSR set to: 2
  8560                           ;eusart.c: 1200: Option_Multitas = 1;
  8561  0005DC  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8562                           
  8563                           ;eusart.c: 1202: } else {
  8564  0005DE  D001               	goto	l1435
  8565  0005E0                     l1434:
  8566                           
  8567                           ; BSR set to: 2
  8568                           ;eusart.c: 1203: Option_Multitas = 0;
  8569  0005E0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8570  0005E2                     l1435:
  8571                           
  8572                           ; BSR set to: 2
  8573                           ;eusart.c: 1204: }
  8574                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8575  0005E2  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8576                           
  8577                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8578  0005E6  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8579                           
  8580                           ; BSR set to: 2
  8581                           ;eusart.c: 1214: P4_busy = 1;
  8582  0005EA  0E01               	movlw	1
  8583  0005EC  0100               	movlb	0	; () banked
  8584  0005EE  6FAC               	movwf	_P4_busy& (0+255),b
  8585                           
  8586                           ;eusart.c: 1215: switch (direction) {
  8587  0005F0  D018               	goto	l8058
  8588  0005F2                     l8032:
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;eusart.c: 1218: if (Etat == 0) {
  8592  0005F2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8593  0005F4  E101               	bnz	l8036
  8594  0005F6  D0B7               	goto	l8142
  8595  0005F8                     l8036:
  8596                           
  8597                           ; BSR set to: 0
  8598                           ;eusart.c: 1223: if (Etat != 2) {
  8599  0005F8  0E02               	movlw	2
  8600  0005FA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8601  0005FC  B4D8               	btfsc	status,2,c
  8602  0005FE  0012               	return	
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;eusart.c: 1224: Coupe_Moteur();
  8606  000600  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  8607                           
  8608                           ;eusart.c: 1225: delay_1s();
  8609  000604  EC70  F011         	call	_delay_1s	;wreg free
  8610  000608  D0AE               	goto	l8142
  8611  00060A                     l8044:
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;eusart.c: 1233: if (Etat == 0) {
  8615  00060A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8616  00060C  E101               	bnz	l8048
  8617  00060E  D0AF               	goto	l8148
  8618  000610                     l8048:
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;eusart.c: 1236: if (Etat != 3) {
  8622  000610  0E03               	movlw	3
  8623  000612  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8624  000614  B4D8               	btfsc	status,2,c
  8625  000616  0012               	return	
  8626                           
  8627                           ; BSR set to: 0
  8628                           ;eusart.c: 1237: Coupe_Moteur();
  8629  000618  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  8630                           
  8631                           ;eusart.c: 1238: delay_1s();
  8632  00061C  EC70  F011         	call	_delay_1s	;wreg free
  8633  000620  D0A6               	goto	l8148
  8634  000622                     l8058:
  8635                           
  8636                           ; BSR set to: 0
  8637  000622  518F               	movf	_direction& (0+255),w,b	;volatile
  8638                           
  8639                           ; Switch size 1, requested type "speed"
  8640                           ; Number of cases is 2, Range of values is 0 to 1
  8641                           ; switch strategies available:
  8642                           ; Name         Instructions Cycles
  8643                           ; simple_byte            7     4 (average)
  8644                           ;	Chosen strategy is simple_byte
  8645  000624  E0F2               	bz	l8044
  8646  000626  0A01               	xorlw	1	; case 1
  8647  000628  A4D8               	btfss	status,2,c
  8648  00062A  0012               	return	
  8649  00062C  D7E2               	goto	l8032
  8650  00062E                     l1448:
  8651                           
  8652                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  8653  00062E  A682               	btfss	3970,3,c	;volatile
  8654  000630  D076               	goto	l8132
  8655                           
  8656                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  8657  000632  0102               	movlb	2	; () banked
  8658  000634  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8659  000636  0FD0               	addlw	208
  8660  000638  0100               	movlb	0	; () banked
  8661  00063A  6F8F               	movwf	_direction& (0+255),b	;volatile
  8662                           
  8663                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  8664  00063C  0102               	movlb	2	; () banked
  8665  00063E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8666  000640  0FD0               	addlw	208
  8667  000642  0100               	movlb	0	; () banked
  8668  000644  6F91               	movwf	_type_consigne& (0+255),b
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8672  000646  0102               	movlb	2	; () banked
  8673  000648  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8674  00064A  0D0A               	mullw	10
  8675  00064C  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8676  000650  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8677  000652  0D64               	mullw	100
  8678  000654  50F3               	movf	prodl,w,c
  8679  000656  0100               	movlb	0	; () banked
  8680  000658  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8681  00065A  0102               	movlb	2	; () banked
  8682  00065C  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8683  00065E  0F30               	addlw	48
  8684  000660  0100               	movlb	0	; () banked
  8685  000662  6F90               	movwf	_mouvement_option& (0+255),b
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;eusart.c: 1269: P4_busy = 1;
  8689  000664  0E01               	movlw	1
  8690  000666  6FAC               	movwf	_P4_busy& (0+255),b
  8691                           
  8692                           ;eusart.c: 1270: switch (direction) {
  8693  000668  D018               	goto	l8094
  8694  00066A                     l8068:
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;eusart.c: 1274: if (Etat == 0) {
  8698  00066A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8699  00066C  E101               	bnz	l8072
  8700  00066E  D088               	goto	l8154
  8701  000670                     l8072:
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;eusart.c: 1277: if (Etat != 5) {
  8705  000670  0E05               	movlw	5
  8706  000672  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8707  000674  B4D8               	btfsc	status,2,c
  8708  000676  0012               	return	
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;eusart.c: 1278: Coupe_Moteur();
  8712  000678  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  8713                           
  8714                           ;eusart.c: 1279: delay_1s();
  8715  00067C  EC70  F011         	call	_delay_1s	;wreg free
  8716  000680  D07F               	goto	l8154
  8717  000682                     l8080:
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;eusart.c: 1299: if (Etat == 0) {
  8721  000682  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8722  000684  E101               	bnz	l8084
  8723  000686  D07F               	goto	l8156
  8724  000688                     l8084:
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;eusart.c: 1302: if (Etat != 4) {
  8728  000688  0E04               	movlw	4
  8729  00068A  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8730  00068C  B4D8               	btfsc	status,2,c
  8731  00068E  0012               	return	
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;eusart.c: 1303: Coupe_Moteur();
  8735  000690  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  8736                           
  8737                           ;eusart.c: 1304: delay_1s();
  8738  000694  EC70  F011         	call	_delay_1s	;wreg free
  8739  000698  D076               	goto	l8156
  8740  00069A                     l8094:
  8741                           
  8742                           ; BSR set to: 0
  8743  00069A  518F               	movf	_direction& (0+255),w,b	;volatile
  8744                           
  8745                           ; Switch size 1, requested type "speed"
  8746                           ; Number of cases is 2, Range of values is 0 to 1
  8747                           ; switch strategies available:
  8748                           ; Name         Instructions Cycles
  8749                           ; simple_byte            7     4 (average)
  8750                           ;	Chosen strategy is simple_byte
  8751  00069C  E0F2               	bz	l8080
  8752  00069E  0A01               	xorlw	1	; case 1
  8753  0006A0  A4D8               	btfss	status,2,c
  8754  0006A2  0012               	return	
  8755  0006A4  D7E2               	goto	l8068
  8756  0006A6                     l1462:
  8757                           
  8758                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  8759  0006A6  A682               	btfss	3970,3,c	;volatile
  8760  0006A8  D03A               	goto	l8132
  8761                           
  8762                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  8763  0006AA  0102               	movlb	2	; () banked
  8764  0006AC  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8765  0006AE  0FD0               	addlw	208
  8766  0006B0  0100               	movlb	0	; () banked
  8767  0006B2  6F8F               	movwf	_direction& (0+255),b	;volatile
  8768                           
  8769                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  8770  0006B4  0102               	movlb	2	; () banked
  8771  0006B6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8772  0006B8  0FD0               	addlw	208
  8773  0006BA  0100               	movlb	0	; () banked
  8774  0006BC  6F91               	movwf	_type_consigne& (0+255),b
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8778  0006BE  0102               	movlb	2	; () banked
  8779  0006C0  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8780  0006C2  0D0A               	mullw	10
  8781  0006C4  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8782  0006C8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8783  0006CA  0D64               	mullw	100
  8784  0006CC  50F3               	movf	prodl,w,c
  8785  0006CE  0100               	movlb	0	; () banked
  8786  0006D0  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8787  0006D2  0102               	movlb	2	; () banked
  8788  0006D4  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8789  0006D6  0F30               	addlw	48
  8790  0006D8  0100               	movlb	0	; () banked
  8791  0006DA  6F90               	movwf	_mouvement_option& (0+255),b
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;eusart.c: 1341: P4_busy = 1;
  8795  0006DC  0E01               	movlw	1
  8796  0006DE  6FAC               	movwf	_P4_busy& (0+255),b
  8797                           
  8798                           ;eusart.c: 1342: switch (direction) {
  8799  0006E0  D018               	goto	l8130
  8800  0006E2                     l8104:
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;eusart.c: 1348: if (Etat == 0) {
  8804  0006E2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8805  0006E4  E101               	bnz	l8108
  8806  0006E6  D058               	goto	l8162
  8807  0006E8                     l8108:
  8808                           
  8809                           ; BSR set to: 0
  8810                           ;eusart.c: 1351: if (Etat != 9) {
  8811  0006E8  0E09               	movlw	9
  8812  0006EA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8813  0006EC  B4D8               	btfsc	status,2,c
  8814  0006EE  0012               	return	
  8815                           
  8816                           ; BSR set to: 0
  8817                           ;eusart.c: 1352: Coupe_Moteur();
  8818  0006F0  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  8819                           
  8820                           ;eusart.c: 1353: delay_1s();
  8821  0006F4  EC70  F011         	call	_delay_1s	;wreg free
  8822  0006F8  D04F               	goto	l8162
  8823  0006FA                     l8116:
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;eusart.c: 1371: if (Etat == 0) {
  8827  0006FA  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8828  0006FC  E101               	bnz	l8120
  8829  0006FE  D04F               	goto	l8164
  8830  000700                     l8120:
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;eusart.c: 1374: if (Etat != 8) {
  8834  000700  0E08               	movlw	8
  8835  000702  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8836  000704  B4D8               	btfsc	status,2,c
  8837  000706  0012               	return	
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;eusart.c: 1375: Coupe_Moteur();
  8841  000708  ECE3  F012         	call	_Coupe_Moteur	;wreg free
  8842                           
  8843                           ;eusart.c: 1376: delay_1s();
  8844  00070C  EC70  F011         	call	_delay_1s	;wreg free
  8845  000710  D046               	goto	l8164
  8846  000712                     l8130:
  8847                           
  8848                           ; BSR set to: 0
  8849  000712  518F               	movf	_direction& (0+255),w,b	;volatile
  8850                           
  8851                           ; Switch size 1, requested type "speed"
  8852                           ; Number of cases is 2, Range of values is 0 to 1
  8853                           ; switch strategies available:
  8854                           ; Name         Instructions Cycles
  8855                           ; simple_byte            7     4 (average)
  8856                           ;	Chosen strategy is simple_byte
  8857  000714  E0F2               	bz	l8116
  8858  000716  0A01               	xorlw	1	; case 1
  8859  000718  A4D8               	btfss	status,2,c
  8860  00071A  0012               	return	
  8861  00071C  D7E2               	goto	l8104
  8862  00071E                     l8132:
  8863                           
  8864                           ;eusart.c: 1392: Alarme_On(4);
  8865  00071E  0E04               	movlw	4
  8866  000720  EF45  F013         	goto	_Alarme_On
  8867  000724                     l8134:
  8868                           
  8869                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  8870  000724  0102               	movlb	2	; () banked
  8871  000726  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8872  000728  0FD0               	addlw	208
  8873  00072A  0100               	movlb	0	; () banked
  8874  00072C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  8875                           
  8876                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  8877  00072E  0102               	movlb	2	; () banked
  8878  000730  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8879  000732  0FD0               	addlw	208
  8880  000734  0100               	movlb	0	; () banked
  8881  000736  6F8F               	movwf	_direction& (0+255),b	;volatile
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8885  000738  0102               	movlb	2	; () banked
  8886  00073A  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8887  00073C  0D0A               	mullw	10
  8888  00073E  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8889  000742  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8890  000744  0D64               	mullw	100
  8891  000746  50F3               	movf	prodl,w,c
  8892  000748  0100               	movlb	0	; () banked
  8893  00074A  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8894  00074C  0102               	movlb	2	; () banked
  8895  00074E  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8896  000750  0F30               	addlw	48
  8897  000752  0100               	movlb	0	; () banked
  8898  000754  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  8899                           
  8900                           ;eusart.c: 1410: switch (moteur_indice) {
  8901  000756  D02C               	goto	l8172
  8902  000758                     l1478:
  8903                           
  8904                           ; BSR set to: 0
  8905                           ;eusart.c: 1412: Alarme = 0;
  8906  000758  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  8907                           
  8908                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8909  00075A  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8910                           
  8911                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8912  00075E  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8913                           
  8914                           ;eusart.c: 1416: switch (direction) {
  8915  000762  D008               	goto	l8152
  8916  000764                     l8138:
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;eusart.c: 1419: if (Etat == 0) {
  8920  000764  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8921  000766                     l8142:
  8922                           
  8923                           ; BSR set to: 0
  8924                           ;eusart.c: 1425: Etat_Update(2);
  8925  000766  0E02               	movlw	2
  8926  000768  EF35  F012         	goto	_Etat_Update
  8927  00076C                     l8144:
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;eusart.c: 1430: if (Etat == 0) {
  8931  00076C  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8932  00076E                     l8148:
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;eusart.c: 1434: Etat_Update(3);
  8936  00076E  0E03               	movlw	3
  8937  000770  EF35  F012         	goto	_Etat_Update
  8938  000774                     l8152:
  8939                           
  8940                           ; BSR set to: 0
  8941  000774  518F               	movf	_direction& (0+255),w,b	;volatile
  8942                           
  8943                           ; Switch size 1, requested type "speed"
  8944                           ; Number of cases is 2, Range of values is 0 to 1
  8945                           ; switch strategies available:
  8946                           ; Name         Instructions Cycles
  8947                           ; simple_byte            7     4 (average)
  8948                           ;	Chosen strategy is simple_byte
  8949  000776  E0FA               	bz	l8144
  8950  000778  0A01               	xorlw	1	; case 1
  8951  00077A  A4D8               	btfss	status,2,c
  8952  00077C  0012               	return	
  8953  00077E  D7F2               	goto	l8138
  8954  000780                     l8154:
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;eusart.c: 1451: Etat_Update(5);
  8958  000780  0E05               	movlw	5
  8959  000782  EF35  F012         	goto	_Etat_Update
  8960  000786                     l8156:
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;eusart.c: 1456: Etat_Update(4);
  8964  000786  0E04               	movlw	4
  8965  000788  EF35  F012         	goto	_Etat_Update
  8966  00078C                     l8160:
  8967                           
  8968                           ; BSR set to: 0
  8969  00078C  518F               	movf	_direction& (0+255),w,b	;volatile
  8970                           
  8971                           ; Switch size 1, requested type "speed"
  8972                           ; Number of cases is 2, Range of values is 0 to 1
  8973                           ; switch strategies available:
  8974                           ; Name         Instructions Cycles
  8975                           ; simple_byte            7     4 (average)
  8976                           ;	Chosen strategy is simple_byte
  8977  00078E  E0FB               	bz	l8156
  8978  000790  0A01               	xorlw	1	; case 1
  8979  000792  A4D8               	btfss	status,2,c
  8980  000794  0012               	return	
  8981  000796  D7F4               	goto	l8154
  8982  000798                     l8162:
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;eusart.c: 1473: Etat_Update(9);
  8986  000798  0E09               	movlw	9
  8987  00079A  EF35  F012         	goto	_Etat_Update
  8988  00079E                     l8164:
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;eusart.c: 1478: Etat_Update(8);
  8992  00079E  0E08               	movlw	8
  8993  0007A0  EF35  F012         	goto	_Etat_Update
  8994  0007A4                     l8168:
  8995                           
  8996                           ; BSR set to: 0
  8997  0007A4  518F               	movf	_direction& (0+255),w,b	;volatile
  8998                           
  8999                           ; Switch size 1, requested type "speed"
  9000                           ; Number of cases is 2, Range of values is 0 to 1
  9001                           ; switch strategies available:
  9002                           ; Name         Instructions Cycles
  9003                           ; simple_byte            7     4 (average)
  9004                           ;	Chosen strategy is simple_byte
  9005  0007A6  E0FB               	bz	l8164
  9006  0007A8  0A01               	xorlw	1	; case 1
  9007  0007AA  A4D8               	btfss	status,2,c
  9008  0007AC  0012               	return	
  9009  0007AE  D7F4               	goto	l8162
  9010  0007B0                     l8172:
  9011                           
  9012                           ; BSR set to: 0
  9013  0007B0  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
  9014                           
  9015                           ; Switch size 1, requested type "speed"
  9016                           ; Number of cases is 3, Range of values is 1 to 3
  9017                           ; switch strategies available:
  9018                           ; Name         Instructions Cycles
  9019                           ; simple_byte           10     6 (average)
  9020                           ;	Chosen strategy is simple_byte
  9021  0007B2  0A01               	xorlw	1	; case 1
  9022  0007B4  E0D1               	bz	l1478
  9023  0007B6  0A03               	xorlw	3	; case 2
  9024  0007B8  E0E9               	bz	l8160
  9025  0007BA  0A01               	xorlw	1	; case 3
  9026  0007BC  A4D8               	btfss	status,2,c
  9027  0007BE  0012               	return	
  9028  0007C0  D7F1               	goto	l8168
  9029  0007C2                     l1502:
  9030                           
  9031                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  9032  0007C2  0102               	movlb	2	; () banked
  9033  0007C4  B180               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  9034  0007C6  D002               	bra	u6355
  9035  0007C8  948D               	bcf	3981,2,c	;volatile
  9036  0007CA  D001               	bra	u6356
  9037  0007CC                     u6355:
  9038  0007CC  848D               	bsf	3981,2,c	;volatile
  9039  0007CE                     u6356:
  9040                           
  9041                           ;eusart.c: 1507: break;
  9042  0007CE  0012               	return	
  9043  0007D0                     l8174:
  9044                           
  9045                           ;eusart.c: 1510: Etat_Update(0);
  9046  0007D0  0E00               	movlw	0
  9047  0007D2  EC35  F012         	call	_Etat_Update
  9048  0007D6  D6C3               	goto	l8016
  9049  0007D8                     l1504:
  9050                           
  9051                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  9052  0007D8  C280  F04B         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  9053                           
  9054                           ;eusart.c: 1522: break;
  9055  0007DC  0012               	return	
  9056  0007DE                     l8178:
  9057                           
  9058                           ;eusart.c: 1528: IRQ_Execution(Da);
  9059  0007DE  0102               	movlb	2	; () banked
  9060  0007E0  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  9061  0007E2  EF6C  F00F         	goto	_IRQ_Execution
  9062  0007E6                     l8180:
  9063                           
  9064                           ;eusart.c: 1536: Etat_Update(0);
  9065  0007E6  0E00               	movlw	0
  9066  0007E8  EF35  F012         	goto	_Etat_Update
  9067  0007EC                     l8182:
  9068                           
  9069                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  9070  0007EC  0E0D               	movlw	13
  9071  0007EE  0102               	movlb	2	; () banked
  9072  0007F0  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  9073  0007F2  A4D8               	btfss	status,2,c
  9074                           
  9075                           ; BSR set to: 2
  9076                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  9077  0007F4  848B               	bsf	3979,2,c	;volatile
  9078  0007F6  0012               	return	
  9079  0007F8                     l8188:
  9080  0007F8  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  9081                           
  9082                           ; Switch size 1, requested type "speed"
  9083                           ; Number of cases is 38, Range of values is 48 to 118
  9084                           ; switch strategies available:
  9085                           ; Name         Instructions Cycles
  9086                           ; simple_byte          115    58 (average)
  9087                           ;	Chosen strategy is simple_byte
  9088  0007FA  0A30               	xorlw	48	; case 48
  9089  0007FC  E0F4               	bz	l8180
  9090  0007FE  0A01               	xorlw	1	; case 49
  9091  000800  B4D8               	btfsc	status,2,c
  9092  000802  0012               	return	
  9093  000804  0A03               	xorlw	3	; case 50
  9094  000806  B4D8               	btfsc	status,2,c
  9095  000808  0012               	return	
  9096  00080A  0A01               	xorlw	1	; case 51
  9097  00080C  B4D8               	btfsc	status,2,c
  9098  00080E  0012               	return	
  9099  000810  0A07               	xorlw	7	; case 52
  9100  000812  B4D8               	btfsc	status,2,c
  9101  000814  0012               	return	
  9102  000816  0A01               	xorlw	1	; case 53
  9103  000818  B4D8               	btfsc	status,2,c
  9104  00081A  0012               	return	
  9105  00081C  0A03               	xorlw	3	; case 54
  9106  00081E  B4D8               	btfsc	status,2,c
  9107  000820  0012               	return	
  9108  000822  0A01               	xorlw	1	; case 55
  9109  000824  B4D8               	btfsc	status,2,c
  9110  000826  0012               	return	
  9111  000828  0A76               	xorlw	118	; case 65
  9112  00082A  E102 EFE3  F012    	bz	_Coupe_Moteur
  9113  000830  0A03               	xorlw	3	; case 66
  9114  000832  E101 D738          	bz	l1462
  9115  000836  0A06               	xorlw	6	; case 68
  9116  000838  B4D8               	btfsc	status,2,c
  9117  00083A  0012               	return	
  9118  00083C  0A01               	xorlw	1	; case 69
  9119  00083E  E101 D4E5          	bz	l7934
  9120  000842  0A03               	xorlw	3	; case 70
  9121  000844  B4D8               	btfsc	status,2,c
  9122  000846  0012               	return	
  9123  000848  0A0E               	xorlw	14	; case 72
  9124  00084A  E101 D685          	bz	l8014
  9125  00084E  0A01               	xorlw	1	; case 73
  9126  000850  E0C6               	bz	l8178
  9127  000852  0A05               	xorlw	5	; case 76
  9128  000854  E101 D43F          	bz	l7898
  9129  000858  0A01               	xorlw	1	; case 77
  9130  00085A  E101 D763          	bz	l8134
  9131  00085E  0A1D               	xorlw	29	; case 80
  9132  000860  E101 D5B8          	bz	l7986
  9133  000864  0A02               	xorlw	2	; case 82
  9134  000866  E0AD               	bz	l1502
  9135  000868  0A01               	xorlw	1	; case 83
  9136  00086A  E101 D62C          	bz	l8008
  9137  00086E  0A07               	xorlw	7	; case 84
  9138  000870  E101 D61A          	bz	l8002
  9139  000874  0A01               	xorlw	1	; case 85
  9140  000876  B4D8               	btfsc	status,2,c
  9141  000878  0012               	return	
  9142  00087A  0A03               	xorlw	3	; case 86
  9143  00087C  E101 D5FC          	bz	l8000
  9144  000880  0A01               	xorlw	1	; case 87
  9145  000882  E101 D666          	bz	l8012
  9146  000886  0A0F               	xorlw	15	; case 88
  9147  000888  E101 D66C          	bz	l1427
  9148  00088C  0A02               	xorlw	2	; case 90
  9149  00088E  E101 D6CE          	bz	l1448
  9150  000892  0A38               	xorlw	56	; case 98
  9151  000894  E101 D4AE          	bz	l7930
  9152  000898  0A01               	xorlw	1	; case 99
  9153  00089A  E101 D4A5          	bz	l7928
  9154  00089E  0A06               	xorlw	6	; case 101
  9155  0008A0  E101 D4C4          	bz	l7938
  9156  0008A4  0A03               	xorlw	3	; case 102
  9157  0008A6  E098               	bz	l1504
  9158  0008A8  0A0F               	xorlw	15	; case 105
  9159  0008AA  E101 D421          	bz	l7900
  9160  0008AE  0A05               	xorlw	5	; case 108
  9161  0008B0  E101 D463          	bz	l1384
  9162  0008B4  0A01               	xorlw	1	; case 109
  9163  0008B6  E101 D4DD          	bz	l7946
  9164  0008BA  0A1D               	xorlw	29	; case 112
  9165  0008BC  E101 D427          	bz	l7904
  9166  0008C0  0A01               	xorlw	1	; case 113
  9167  0008C2  E101 D47F          	bz	l7924
  9168  0008C6  0A03               	xorlw	3	; case 114
  9169  0008C8  E083               	bz	l8174
  9170  0008CA  0A01               	xorlw	1	; case 115
  9171  0008CC  E101 D43F          	bz	l7908
  9172  0008D0  0A05               	xorlw	5	; case 118
  9173  0008D2  E101 D5EC          	bz	l8004
  9174  0008D6  D78A               	goto	l8182
  9175  0008D8                     __end_of_EUSART1_RX_T3_LOCAL:
  9176                           	opt stack 0
  9177                           tblptru	equ	0xFF8
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           intcon2	equ	0xFF1
  9182                           intcon3	equ	0xFF0
  9183                           postinc0	equ	0xFEE
  9184                           wreg	equ	0xFE8
  9185                           indf1	equ	0xFE7
  9186                           postdec1	equ	0xFE5
  9187                           fsr1h	equ	0xFE2
  9188                           fsr1l	equ	0xFE1
  9189                           indf2	equ	0xFDF
  9190                           fsr2h	equ	0xFDA
  9191                           fsr2l	equ	0xFD9
  9192                           status	equ	0xFD8
  9193                           
  9194 ;; *************** function _sprintf *****************
  9195 ;; Defined at:
  9196 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;  sp              1   26[COMRAM] PTR unsigned char 
  9199 ;;		 -> UART_TX_TEXT(64), 
  9200 ;;  f               2   27[COMRAM] PTR const unsigned char 
  9201 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  9202 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  9203 ;;		 -> STR_2(95), STR_1(3), 
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;  idx             1    4[BANK0 ] unsigned char 
  9206 ;;  tmpval          4    0        struct .
  9207 ;;  cp              3    0        PTR const unsigned char 
  9208 ;;  width           2   10[BANK0 ] int 
  9209 ;;  val             2    7[BANK0 ] unsigned int 
  9210 ;;  len             2    0        unsigned int 
  9211 ;;  c               1   12[BANK0 ] char 
  9212 ;;  flag            1    9[BANK0 ] unsigned char 
  9213 ;;  prec            1    6[BANK0 ] char 
  9214 ;;  ap              1    5[BANK0 ] PTR void [1]
  9215 ;;		 -> ?_sprintf(2), 
  9216 ;; Return value:  Size  Location     Type
  9217 ;;                  2   26[COMRAM] int 
  9218 ;; Registers used:
  9219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/1
  9222 ;;		On exit  : 3F/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9225 ;;      Params:        37       0       0       0
  9226 ;;      Locals:         0       9       0       0
  9227 ;;      Temps:          0       4       0       0
  9228 ;;      Totals:        37      13       0       0
  9229 ;;Total ram usage:       50 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:   11
  9232 ;; This function calls:
  9233 ;;		___lwdiv
  9234 ;;		___lwmod
  9235 ;;		___wmul
  9236 ;;		_isdigit
  9237 ;; This function is called by:
  9238 ;;		_EUSART1_RX_T3_LOCAL
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text48
  9243  0008D8                     __ptext48:
  9244                           	opt stack 0
  9245  0008D8                     _sprintf:
  9246                           	opt stack 15
  9247                           
  9248                           ;doprnt.c: 494: va_list ap;
  9249                           ;doprnt.c: 499: signed char c;
  9250                           ;doprnt.c: 501: int width;
  9251                           ;doprnt.c: 506: signed char prec;
  9252                           ;doprnt.c: 508: unsigned char flag;
  9253                           ;doprnt.c: 523: union {
  9254                           ;doprnt.c: 524: unsigned long vd;
  9255                           ;doprnt.c: 525: double integ;
  9256                           ;doprnt.c: 526: } tmpval;
  9257                           ;doprnt.c: 528: unsigned int val;
  9258                           ;doprnt.c: 529: unsigned len;
  9259                           ;doprnt.c: 530: const char * cp;
  9260                           ;doprnt.c: 533: *ap = __va_start();
  9261                           
  9262                           ;incstack = 0
  9263  0008D8  0E1E               	movlw	low (?_sprintf+3)
  9264  0008DA  0100               	movlb	0	; () banked
  9265  0008DC  6FF2               	movwf	sprintf@ap& (0+255),b
  9266                           
  9267                           ;doprnt.c: 536: while(c = *f++) {
  9268  0008DE  D15E               	goto	l7888
  9269  0008E0                     l7756:
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;doprnt.c: 538: if(c != '%')
  9273  0008E0  0E25               	movlw	37
  9274  0008E2  19F9               	xorwf	sprintf@c& (0+255),w,b
  9275  0008E4  E007               	bz	l1718
  9276                           
  9277                           ; BSR set to: 0
  9278                           ;doprnt.c: 540: {
  9279                           ;doprnt.c: 541: ((*sp++ = (c)));
  9280  0008E6  501B               	movf	sprintf@sp,w,c
  9281  0008E8  6ED9               	movwf	fsr2l,c
  9282  0008EA  6ADA               	clrf	fsr2h,c
  9283  0008EC  C0F9  FFDF         	movff	sprintf@c,indf2
  9284                           
  9285                           ; BSR set to: 0
  9286  0008F0  2A1B               	incf	sprintf@sp,f,c
  9287                           
  9288                           ;doprnt.c: 542: continue;
  9289  0008F2  D154               	goto	l7888
  9290  0008F4                     l1718:
  9291                           
  9292                           ; BSR set to: 0
  9293                           ;doprnt.c: 543: }
  9294                           ;doprnt.c: 546: width = 0;
  9295  0008F4  6BF7               	clrf	sprintf@width& (0+255),b
  9296  0008F6  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9297                           
  9298                           ;doprnt.c: 548: flag = 0;
  9299  0008F8  6BF6               	clrf	sprintf@flag& (0+255),b
  9300  0008FA  D003               	goto	l7766
  9301  0008FC                     l7762:
  9302                           
  9303                           ; BSR set to: 0
  9304                           ;doprnt.c: 580: flag |= 0x04;
  9305  0008FC  85F6               	bsf	sprintf@flag& (0+255),2,b
  9306                           
  9307                           ;doprnt.c: 581: f++;
  9308  0008FE  4A1C               	infsnz	sprintf@f,f,c
  9309  000900  2A1D               	incf	sprintf@f+1,f,c
  9310  000902                     l7766:
  9311                           
  9312                           ; BSR set to: 0
  9313  000902  C01C  FFF6         	movff	sprintf@f,tblptrl
  9314  000906  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9315  00090A                     	if	0	;tblptru may be non-zero
  9316  00090A                     	endif
  9317  00090A                     	if	0	;tblptru may be non-zero
  9318  00090A                     	endif
  9319  00090A  0008               	tblrd		*
  9320  00090C  50F5               	movf	tablat,w,c
  9321                           
  9322                           ; Switch size 1, requested type "speed"
  9323                           ; Number of cases is 1, Range of values is 48 to 48
  9324                           ; switch strategies available:
  9325                           ; Name         Instructions Cycles
  9326                           ; simple_byte            4     3 (average)
  9327                           ;	Chosen strategy is simple_byte
  9328  00090E  0A30               	xorlw	48	; case 48
  9329  000910  E0F5               	bz	l7762
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9333  000912  C01C  FFF6         	movff	sprintf@f,tblptrl
  9334  000916  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9335  00091A                     	if	0	;tblptru may be non-zero
  9336  00091A                     	endif
  9337  00091A                     	if	0	;tblptru may be non-zero
  9338  00091A                     	endif
  9339  00091A  0008               	tblrd		*
  9340  00091C  50F5               	movf	tablat,w,c
  9341  00091E  EC70  F012         	call	_isdigit
  9342  000922  E332               	bnc	l7784
  9343                           
  9344                           ;doprnt.c: 598: width = 0;
  9345  000924  0100               	movlb	0	; () banked
  9346  000926  6BF7               	clrf	sprintf@width& (0+255),b
  9347  000928  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9348  00092A                     l7772:
  9349                           
  9350                           ;doprnt.c: 600: width *= 10;
  9351  00092A  C0F7  F00F         	movff	sprintf@width,___wmul@multiplier
  9352  00092E  C0F8  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  9353  000932  6A12               	clrf	___wmul@multiplicand+1,c
  9354  000934  0E0A               	movlw	10
  9355  000936  6E11               	movwf	___wmul@multiplicand,c
  9356  000938  ECBE  F011         	call	___wmul	;wreg free
  9357  00093C  C00F  F0F7         	movff	?___wmul,sprintf@width
  9358  000940  C010  F0F8         	movff	?___wmul+1,sprintf@width+1
  9359                           
  9360                           ;doprnt.c: 601: width += *f++ - '0';
  9361  000944  0ED0               	movlw	208
  9362  000946  0100               	movlb	0	; () banked
  9363  000948  6FED               	movwf	??_sprintf& (0+255),b
  9364  00094A  69EE               	setf	(??_sprintf+1)& (0+255),b
  9365  00094C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9366  000950  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9367  000954                     	if	0	;tblptru may be non-zero
  9368  000954                     	endif
  9369  000954                     	if	0	;tblptru may be non-zero
  9370  000954                     	endif
  9371  000954  0008               	tblrd		*
  9372  000956  50F5               	movf	tablat,w,c
  9373  000958  6FEF               	movwf	(??_sprintf+2)& (0+255),b
  9374  00095A  6BF0               	clrf	(??_sprintf+3)& (0+255),b
  9375  00095C  51ED               	movf	??_sprintf& (0+255),w,b
  9376  00095E  27EF               	addwf	(??_sprintf+2)& (0+255),f,b
  9377  000960  51EE               	movf	(??_sprintf+1)& (0+255),w,b
  9378  000962  23F0               	addwfc	(??_sprintf+3)& (0+255),f,b
  9379  000964  51EF               	movf	(??_sprintf+2)& (0+255),w,b
  9380  000966  27F7               	addwf	sprintf@width& (0+255),f,b
  9381  000968  51F0               	movf	(??_sprintf+3)& (0+255),w,b
  9382  00096A  23F8               	addwfc	(sprintf@width+1)& (0+255),f,b
  9383                           
  9384                           ; BSR set to: 0
  9385  00096C  4A1C               	infsnz	sprintf@f,f,c
  9386  00096E  2A1D               	incf	sprintf@f+1,f,c
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9390  000970  C01C  FFF6         	movff	sprintf@f,tblptrl
  9391  000974  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9392  000978                     	if	0	;tblptru may be non-zero
  9393  000978                     	endif
  9394  000978                     	if	0	;tblptru may be non-zero
  9395  000978                     	endif
  9396  000978  0008               	tblrd		*
  9397  00097A  50F5               	movf	tablat,w,c
  9398  00097C  EC70  F012         	call	_isdigit
  9399  000980  E303               	bnc	l7784
  9400  000982  D7D3               	goto	l7772
  9401  000984                     l7780:
  9402                           
  9403                           ; BSR set to: 0
  9404                           ;doprnt.c: 718: case 'x':
  9405                           ;doprnt.c: 721: flag |= 0x80;
  9406  000984  8FF6               	bsf	sprintf@flag& (0+255),7,b
  9407                           
  9408                           ;doprnt.c: 723: break;
  9409  000986  D016               	goto	l1733
  9410  000988                     l7784:
  9411  000988  C01C  FFF6         	movff	sprintf@f,tblptrl
  9412  00098C  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9413  000990  4A1C               	infsnz	sprintf@f,f,c
  9414  000992  2A1D               	incf	sprintf@f+1,f,c
  9415  000994                     	if	0	;tblptru may be non-zero
  9416  000994                     	endif
  9417  000994                     	if	0	;tblptru may be non-zero
  9418  000994                     	endif
  9419  000994  0008               	tblrd		*
  9420  000996  CFF5 F0F9          	movff	tablat,sprintf@c
  9421  00099A  0100               	movlb	0	; () banked
  9422  00099C  51F9               	movf	sprintf@c& (0+255),w,b
  9423                           
  9424                           ; Switch size 1, requested type "speed"
  9425                           ; Number of cases is 5, Range of values is 0 to 120
  9426                           ; switch strategies available:
  9427                           ; Name         Instructions Cycles
  9428                           ; simple_byte           16     9 (average)
  9429                           ;	Chosen strategy is simple_byte
  9430  00099E  E101 D109          	bz	l7890
  9431  0009A2  0A58               	xorlw	88	; case 88
  9432  0009A4  E0EF               	bz	l7780
  9433  0009A6  0A3C               	xorlw	60	; case 100
  9434  0009A8  E005               	bz	l1733
  9435  0009AA  0A0D               	xorlw	13	; case 105
  9436  0009AC  E003               	bz	l1733
  9437  0009AE  0A11               	xorlw	17	; case 120
  9438  0009B0  E0E9               	bz	l7780
  9439  0009B2  D0F4               	goto	l7888
  9440  0009B4                     l1733:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9444  0009B4  BFF6               	btfsc	sprintf@flag& (0+255),7,b
  9445  0009B6  D012               	goto	l7796
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;doprnt.c: 1253: {
  9449                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9450  0009B8  51F2               	movf	sprintf@ap& (0+255),w,b
  9451  0009BA  6ED9               	movwf	fsr2l,c
  9452  0009BC  6ADA               	clrf	fsr2h,c
  9453  0009BE  CFDE F0F4          	movff	postinc2,sprintf@val
  9454  0009C2  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9455                           
  9456                           ; BSR set to: 0
  9457  0009C6  0E02               	movlw	2
  9458  0009C8  27F2               	addwf	sprintf@ap& (0+255),f,b
  9459                           
  9460                           ; BSR set to: 0
  9461                           ;doprnt.c: 1261: if((int)val < 0) {
  9462  0009CA  AFF5               	btfss	(sprintf@val+1)& (0+255),7,b
  9463  0009CC  D03D               	goto	l7830
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;doprnt.c: 1262: flag |= 0x03;
  9467  0009CE  0E03               	movlw	3
  9468  0009D0  13F6               	iorwf	sprintf@flag& (0+255),f,b
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;doprnt.c: 1263: val = -val;
  9472  0009D2  6DF4               	negf	sprintf@val& (0+255),b
  9473  0009D4  1FF5               	comf	(sprintf@val+1)& (0+255),f,b
  9474  0009D6  B0D8               	btfsc	status,0,c
  9475  0009D8  2BF5               	incf	(sprintf@val+1)& (0+255),f,b
  9476  0009DA  D036               	goto	l7830
  9477  0009DC                     l7796:
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;doprnt.c: 1268: else
  9481                           ;doprnt.c: 1273: {
  9482                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9483  0009DC  51F2               	movf	sprintf@ap& (0+255),w,b
  9484  0009DE  6ED9               	movwf	fsr2l,c
  9485  0009E0  6ADA               	clrf	fsr2h,c
  9486  0009E2  CFDE F0F4          	movff	postinc2,sprintf@val
  9487  0009E6  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9488                           
  9489                           ; BSR set to: 0
  9490  0009EA  0E02               	movlw	2
  9491  0009EC  27F2               	addwf	sprintf@ap& (0+255),f,b
  9492  0009EE  D02C               	goto	l7830
  9493  0009F0                     l7800:
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9497  0009F0  0E01               	movlw	1
  9498  0009F2  6FF9               	movwf	sprintf@c& (0+255),b
  9499  0009F4                     l7806:
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;doprnt.c: 1306: if(val < dpowers[c])
  9503  0009F4  51F9               	movf	sprintf@c& (0+255),w,b
  9504  0009F6  0D02               	mullw	2
  9505  0009F8  0EA5               	movlw	low _dpowers
  9506  0009FA  24F3               	addwf	prodl,w,c
  9507  0009FC  6EF6               	movwf	tblptrl,c
  9508  0009FE  0E3E               	movlw	high _dpowers
  9509  000A00  20F4               	addwfc	prodh,w,c
  9510  000A02  6EF7               	movwf	tblptrh,c
  9511  000A04                     	if	0	;There are less than 3 active tblptr bytes
  9512  000A04                     	endif
  9513  000A04  0009               	tblrd		*+
  9514  000A06  50F5               	movf	tablat,w,c
  9515  000A08  5DF4               	subwf	sprintf@val& (0+255),w,b
  9516  000A0A  0009               	tblrd		*+
  9517  000A0C  50F5               	movf	tablat,w,c
  9518  000A0E  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9519  000A10  E320               	bnc	l7832
  9520                           
  9521                           ; BSR set to: 0
  9522  000A12  2BF9               	incf	sprintf@c& (0+255),f,b
  9523                           
  9524                           ; BSR set to: 0
  9525  000A14  0E05               	movlw	5
  9526  000A16  19F9               	xorwf	sprintf@c& (0+255),w,b
  9527  000A18  E01C               	bz	l7832
  9528  000A1A  D7EC               	goto	l7806
  9529  000A1C                     l7814:
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9533  000A1C  0E01               	movlw	1
  9534  000A1E  6FF9               	movwf	sprintf@c& (0+255),b
  9535  000A20                     l7820:
  9536                           
  9537                           ; BSR set to: 0
  9538                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9539  000A20  51F9               	movf	sprintf@c& (0+255),w,b
  9540  000A22  0D02               	mullw	2
  9541  000A24  0EAF               	movlw	low _hexpowers
  9542  000A26  24F3               	addwf	prodl,w,c
  9543  000A28  6EF6               	movwf	tblptrl,c
  9544  000A2A  0E3E               	movlw	high _hexpowers
  9545  000A2C  20F4               	addwfc	prodh,w,c
  9546  000A2E  6EF7               	movwf	tblptrh,c
  9547  000A30                     	if	0	;There are less than 3 active tblptr bytes
  9548  000A30                     	endif
  9549  000A30  0009               	tblrd		*+
  9550  000A32  50F5               	movf	tablat,w,c
  9551  000A34  5DF4               	subwf	sprintf@val& (0+255),w,b
  9552  000A36  0009               	tblrd		*+
  9553  000A38  50F5               	movf	tablat,w,c
  9554  000A3A  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9555  000A3C  E30A               	bnc	l7832
  9556                           
  9557                           ; BSR set to: 0
  9558  000A3E  2BF9               	incf	sprintf@c& (0+255),f,b
  9559                           
  9560                           ; BSR set to: 0
  9561  000A40  0E04               	movlw	4
  9562  000A42  19F9               	xorwf	sprintf@c& (0+255),w,b
  9563  000A44  E006               	bz	l7832
  9564  000A46  D7EC               	goto	l7820
  9565  000A48                     l7830:
  9566                           
  9567                           ; BSR set to: 0
  9568  000A48  51F6               	movf	sprintf@flag& (0+255),w,b
  9569  000A4A  0B80               	andlw	128
  9570                           
  9571                           ; Switch size 1, requested type "speed"
  9572                           ; Number of cases is 2, Range of values is 0 to 128
  9573                           ; switch strategies available:
  9574                           ; Name         Instructions Cycles
  9575                           ; simple_byte            7     4 (average)
  9576                           ;	Chosen strategy is simple_byte
  9577  000A4C  E0D1               	bz	l7800
  9578  000A4E  0A80               	xorlw	128	; case 128
  9579  000A50  E0E5               	bz	l7814
  9580  000A52                     l7832:
  9581                           
  9582                           ; BSR set to: 0
  9583                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9584  000A52  51F7               	movf	sprintf@width& (0+255),w,b
  9585  000A54  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9586  000A56  E008               	bz	l7838
  9587                           
  9588                           ; BSR set to: 0
  9589  000A58  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9590  000A5C  0E03               	movlw	3
  9591  000A5E  17ED               	andwf	??_sprintf& (0+255),f,b
  9592  000A60  E003               	bz	l7838
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;doprnt.c: 1346: width--;
  9596  000A62  07F7               	decf	sprintf@width& (0+255),f,b
  9597  000A64  A0D8               	btfss	status,0,c
  9598  000A66  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9599  000A68                     l7838:
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;doprnt.c: 1381: if(width > c)
  9603  000A68  0E80               	movlw	128
  9604  000A6A  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9605  000A6C  0E7F               	movlw	127
  9606  000A6E  6FED               	movwf	??_sprintf& (0+255),b
  9607  000A70  51F7               	movf	sprintf@width& (0+255),w,b
  9608  000A72  5DF9               	subwf	sprintf@c& (0+255),w,b
  9609  000A74  51F8               	movf	(sprintf@width+1)& (0+255),w,b
  9610  000A76  0A80               	xorlw	128
  9611  000A78  59ED               	subwfb	??_sprintf& (0+255),w,b
  9612  000A7A  E207               	bc	l1751
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;doprnt.c: 1382: width -= c;
  9616  000A7C  51F9               	movf	sprintf@c& (0+255),w,b
  9617  000A7E  5FF7               	subwf	sprintf@width& (0+255),f,b
  9618  000A80  0E00               	movlw	0
  9619  000A82  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9620  000A84  0EFF               	movlw	255
  9621  000A86  5BF8               	subwfb	(sprintf@width+1)& (0+255),f,b
  9622  000A88  D002               	goto	l1752
  9623  000A8A                     l1751:
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;doprnt.c: 1383: else
  9627                           ;doprnt.c: 1384: width = 0;
  9628  000A8A  6BF7               	clrf	sprintf@width& (0+255),b
  9629  000A8C  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9630  000A8E                     l1752:
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;doprnt.c: 1387: if(flag & 0x04) {
  9634  000A8E  A5F6               	btfss	sprintf@flag& (0+255),2,b
  9635  000A90  D018               	goto	l7856
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;doprnt.c: 1392: if(flag & 0x03)
  9639  000A92  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9640  000A96  0E03               	movlw	3
  9641  000A98  17ED               	andwf	??_sprintf& (0+255),f,b
  9642  000A9A  E006               	bz	l7848
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9646  000A9C  501B               	movf	sprintf@sp,w,c
  9647  000A9E  6ED9               	movwf	fsr2l,c
  9648  000AA0  6ADA               	clrf	fsr2h,c
  9649  000AA2  0E2D               	movlw	45
  9650  000AA4  6EDF               	movwf	indf2,c
  9651                           
  9652                           ; BSR set to: 0
  9653  000AA6  2A1B               	incf	sprintf@sp,f,c
  9654  000AA8                     l7848:
  9655                           
  9656                           ; BSR set to: 0
  9657                           ;doprnt.c: 1415: if(width)
  9658  000AA8  51F7               	movf	sprintf@width& (0+255),w,b
  9659  000AAA  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9660  000AAC  E024               	bz	l7870
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9664  000AAE  501B               	movf	sprintf@sp,w,c
  9665  000AB0  6ED9               	movwf	fsr2l,c
  9666  000AB2  6ADA               	clrf	fsr2h,c
  9667  000AB4  0E30               	movlw	48
  9668  000AB6  6EDF               	movwf	indf2,c
  9669                           
  9670                           ; BSR set to: 0
  9671  000AB8  2A1B               	incf	sprintf@sp,f,c
  9672                           
  9673                           ; BSR set to: 0
  9674                           ;doprnt.c: 1418: while(--width);
  9675  000ABA  07F7               	decf	sprintf@width& (0+255),f,b
  9676  000ABC  A0D8               	btfss	status,0,c
  9677  000ABE  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9678  000AC0  D7F3               	goto	l7848
  9679  000AC2                     l7856:
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;doprnt.c: 1422: {
  9683                           ;doprnt.c: 1424: if(width
  9684                           ;doprnt.c: 1428: )
  9685  000AC2  51F7               	movf	sprintf@width& (0+255),w,b
  9686  000AC4  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9687  000AC6  E00C               	bz	l7864
  9688  000AC8                     l7858:
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9692  000AC8  501B               	movf	sprintf@sp,w,c
  9693  000ACA  6ED9               	movwf	fsr2l,c
  9694  000ACC  6ADA               	clrf	fsr2h,c
  9695  000ACE  0E20               	movlw	32
  9696  000AD0  6EDF               	movwf	indf2,c
  9697                           
  9698                           ; BSR set to: 0
  9699  000AD2  2A1B               	incf	sprintf@sp,f,c
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;doprnt.c: 1431: while(--width);
  9703  000AD4  07F7               	decf	sprintf@width& (0+255),f,b
  9704  000AD6  A0D8               	btfss	status,0,c
  9705  000AD8  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9706  000ADA  51F7               	movf	sprintf@width& (0+255),w,b
  9707  000ADC  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9708  000ADE  E1F4               	bnz	l7858
  9709  000AE0                     l7864:
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;doprnt.c: 1438: if(flag & 0x03)
  9713  000AE0  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9714  000AE4  0E03               	movlw	3
  9715  000AE6  17ED               	andwf	??_sprintf& (0+255),f,b
  9716  000AE8  E006               	bz	l7870
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9720  000AEA  501B               	movf	sprintf@sp,w,c
  9721  000AEC  6ED9               	movwf	fsr2l,c
  9722  000AEE  6ADA               	clrf	fsr2h,c
  9723  000AF0  0E2D               	movlw	45
  9724  000AF2  6EDF               	movwf	indf2,c
  9725                           
  9726                           ; BSR set to: 0
  9727  000AF4  2A1B               	incf	sprintf@sp,f,c
  9728  000AF6                     l7870:
  9729                           
  9730                           ; BSR set to: 0
  9731                           ;doprnt.c: 1469: }
  9732                           ;doprnt.c: 1472: prec = c;
  9733  000AF6  C0F9  F0F3         	movff	sprintf@c,sprintf@prec
  9734                           
  9735                           ;doprnt.c: 1474: while(prec--) {
  9736  000AFA  D04D               	goto	l7886
  9737  000AFC                     l7872:
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9741  000AFC  51F3               	movf	sprintf@prec& (0+255),w,b
  9742  000AFE  0D02               	mullw	2
  9743  000B00  0EA5               	movlw	low _dpowers
  9744  000B02  24F3               	addwf	prodl,w,c
  9745  000B04  6EF6               	movwf	tblptrl,c
  9746  000B06  0E3E               	movlw	high _dpowers
  9747  000B08  20F4               	addwfc	prodh,w,c
  9748  000B0A  6EF7               	movwf	tblptrh,c
  9749  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  9750  000B0C                     	endif
  9751  000B0C  0009               	tblrd		*+
  9752  000B0E  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9753  000B12  000A               	tblrd		*-
  9754  000B14  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9755  000B18  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9756  000B1C  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9757  000B20  EC0B  F010         	call	___lwdiv	;wreg free
  9758  000B24  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  9759  000B28  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  9760  000B2C  6A19               	clrf	___lwmod@divisor+1,c
  9761  000B2E  0E0A               	movlw	10
  9762  000B30  6E18               	movwf	___lwmod@divisor,c
  9763  000B32  EC74  F010         	call	___lwmod	;wreg free
  9764  000B36  5016               	movf	?___lwmod,w,c
  9765  000B38  0F30               	addlw	48
  9766  000B3A  6FF9               	movwf	sprintf@c& (0+255),b
  9767                           
  9768                           ;doprnt.c: 1491: break;
  9769  000B3C  D026               	goto	l7882
  9770  000B3E                     l7874:
  9771                           
  9772                           ; BSR set to: 0
  9773                           ;doprnt.c: 1499: {
  9774                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9775  000B3E  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9776  000B42  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9777  000B46  51F3               	movf	sprintf@prec& (0+255),w,b
  9778  000B48  0D02               	mullw	2
  9779  000B4A  0EAF               	movlw	low _hexpowers
  9780  000B4C  24F3               	addwf	prodl,w,c
  9781  000B4E  6EF6               	movwf	tblptrl,c
  9782  000B50  0E3E               	movlw	high _hexpowers
  9783  000B52  20F4               	addwfc	prodh,w,c
  9784  000B54  6EF7               	movwf	tblptrh,c
  9785  000B56                     	if	0	;There are less than 3 active tblptr bytes
  9786  000B56                     	endif
  9787  000B56  0009               	tblrd		*+
  9788  000B58  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9789  000B5C  000A               	tblrd		*-
  9790  000B5E  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9791  000B62  EC0B  F010         	call	___lwdiv	;wreg free
  9792  000B66  500F               	movf	?___lwdiv,w,c
  9793  000B68  0B0F               	andlw	15
  9794  000B6A  6FF1               	movwf	sprintf@idx& (0+255),b
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  9798  000B6C  0EDB               	movlw	low STR_11
  9799  000B6E  25F1               	addwf	sprintf@idx& (0+255),w,b
  9800  000B70  6EF6               	movwf	tblptrl,c
  9801  000B72  6AF7               	clrf	tblptrh,c
  9802  000B74  0E3F               	movlw	high STR_11
  9803  000B76  22F7               	addwfc	tblptrh,f,c
  9804  000B78                     	if	0	;There are less than 3 active tblptr bytes
  9805  000B78                     	endif
  9806  000B78  0008               	tblrd		*
  9807  000B7A  CFF5 F0F9          	movff	tablat,sprintf@c
  9808                           
  9809                           ;doprnt.c: 1508: }
  9810                           ;doprnt.c: 1510: break;
  9811  000B7E  D005               	goto	l7882
  9812  000B80                     l7880:
  9813                           
  9814                           ; BSR set to: 0
  9815  000B80  51F6               	movf	sprintf@flag& (0+255),w,b
  9816  000B82  0B80               	andlw	128
  9817                           
  9818                           ; Switch size 1, requested type "speed"
  9819                           ; Number of cases is 2, Range of values is 0 to 128
  9820                           ; switch strategies available:
  9821                           ; Name         Instructions Cycles
  9822                           ; simple_byte            7     4 (average)
  9823                           ;	Chosen strategy is simple_byte
  9824  000B84  E0BB               	bz	l7872
  9825  000B86  0A80               	xorlw	128	; case 128
  9826  000B88  E0DA               	bz	l7874
  9827  000B8A                     l7882:
  9828                           
  9829                           ; BSR set to: 0
  9830                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9831  000B8A  501B               	movf	sprintf@sp,w,c
  9832  000B8C  6ED9               	movwf	fsr2l,c
  9833  000B8E  6ADA               	clrf	fsr2h,c
  9834  000B90  C0F9  FFDF         	movff	sprintf@c,indf2
  9835                           
  9836                           ; BSR set to: 0
  9837  000B94  2A1B               	incf	sprintf@sp,f,c
  9838  000B96                     l7886:
  9839                           
  9840                           ; BSR set to: 0
  9841  000B96  07F3               	decf	sprintf@prec& (0+255),f,b
  9842  000B98  29F3               	incf	sprintf@prec& (0+255),w,b
  9843  000B9A  E1F2               	bnz	l7880
  9844  000B9C                     l7888:
  9845                           
  9846                           ; BSR set to: 0
  9847  000B9C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9848  000BA0  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9849  000BA4  4A1C               	infsnz	sprintf@f,f,c
  9850  000BA6  2A1D               	incf	sprintf@f+1,f,c
  9851  000BA8                     	if	0	;tblptru may be non-zero
  9852  000BA8                     	endif
  9853  000BA8                     	if	0	;tblptru may be non-zero
  9854  000BA8                     	endif
  9855  000BA8  0008               	tblrd		*
  9856  000BAA  CFF5 F0F9          	movff	tablat,sprintf@c
  9857  000BAE  51F9               	movf	sprintf@c& (0+255),w,b
  9858  000BB0  E001 D696          	bnz	l7756
  9859  000BB4                     l7890:
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;doprnt.c: 1538: *sp = 0;
  9863  000BB4  501B               	movf	sprintf@sp,w,c
  9864  000BB6  6ED9               	movwf	fsr2l,c
  9865  000BB8  6ADA               	clrf	fsr2h,c
  9866  000BBA  6ADF               	clrf	indf2,c
  9867                           
  9868                           ; BSR set to: 0
  9869  000BBC  0C00               	retlw	0	;funcret
  9870  000BBE                     __end_of_sprintf:
  9871                           	opt stack 0
  9872                           tblptru	equ	0xFF8
  9873                           tblptrh	equ	0xFF7
  9874                           tblptrl	equ	0xFF6
  9875                           tablat	equ	0xFF5
  9876                           prodh	equ	0xFF4
  9877                           prodl	equ	0xFF3
  9878                           intcon	equ	0xFF2
  9879                           intcon2	equ	0xFF1
  9880                           intcon3	equ	0xFF0
  9881                           postinc0	equ	0xFEE
  9882                           wreg	equ	0xFE8
  9883                           indf1	equ	0xFE7
  9884                           postdec1	equ	0xFE5
  9885                           fsr1h	equ	0xFE2
  9886                           fsr1l	equ	0xFE1
  9887                           indf2	equ	0xFDF
  9888                           postinc2	equ	0xFDE
  9889                           postdec2	equ	0xFDD
  9890                           fsr2h	equ	0xFDA
  9891                           fsr2l	equ	0xFD9
  9892                           status	equ	0xFD8
  9893                           
  9894 ;; *************** function _isdigit *****************
  9895 ;; Defined at:
  9896 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  9897 ;; Parameters:    Size  Location     Type
  9898 ;;  c               1    wreg     unsigned char 
  9899 ;; Auto vars:     Size  Location     Type
  9900 ;;  c               1   16[COMRAM] unsigned char 
  9901 ;; Return value:  Size  Location     Type
  9902 ;;		None               void
  9903 ;; Registers used:
  9904 ;;		wreg, status,2, status,0
  9905 ;; Tracked objects:
  9906 ;;		On entry : 3F/0
  9907 ;;		On exit  : 0/0
  9908 ;;		Unchanged: 0/0
  9909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9910 ;;      Params:         0       0       0       0
  9911 ;;      Locals:         2       0       0       0
  9912 ;;      Temps:          1       0       0       0
  9913 ;;      Totals:         3       0       0       0
  9914 ;;Total ram usage:        3 bytes
  9915 ;; Hardware stack levels used:    1
  9916 ;; Hardware stack levels required when called:   10
  9917 ;; This function calls:
  9918 ;;		Nothing
  9919 ;; This function is called by:
  9920 ;;		_sprintf
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           	psect	text49
  9925  0024E0                     __ptext49:
  9926                           	opt stack 0
  9927  0024E0                     _isdigit:
  9928                           	opt stack 15
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;incstack = 0
  9932                           ;isdigit@c stored from wreg
  9933  0024E0  6E11               	movwf	isdigit@c,c
  9934  0024E2  6A10               	clrf	_isdigit$3659,c
  9935  0024E4  0E3A               	movlw	58
  9936  0024E6  6011               	cpfslt	isdigit@c,c
  9937  0024E8  D005               	goto	l7578
  9938  0024EA  0E2F               	movlw	47
  9939  0024EC  6411               	cpfsgt	isdigit@c,c
  9940  0024EE  D002               	goto	l7578
  9941  0024F0  0E01               	movlw	1
  9942  0024F2  6E10               	movwf	_isdigit$3659,c
  9943  0024F4                     l7578:
  9944  0024F4  C010  F00F         	movff	_isdigit$3659,??_isdigit
  9945  0024F8  300F               	rrcf	??_isdigit,w,c
  9946  0024FA  0012               	return		;funcret
  9947  0024FC                     __end_of_isdigit:
  9948                           	opt stack 0
  9949                           tblptru	equ	0xFF8
  9950                           tblptrh	equ	0xFF7
  9951                           tblptrl	equ	0xFF6
  9952                           tablat	equ	0xFF5
  9953                           prodh	equ	0xFF4
  9954                           prodl	equ	0xFF3
  9955                           intcon	equ	0xFF2
  9956                           intcon2	equ	0xFF1
  9957                           intcon3	equ	0xFF0
  9958                           postinc0	equ	0xFEE
  9959                           wreg	equ	0xFE8
  9960                           indf1	equ	0xFE7
  9961                           postdec1	equ	0xFE5
  9962                           fsr1h	equ	0xFE2
  9963                           fsr1l	equ	0xFE1
  9964                           indf2	equ	0xFDF
  9965                           postinc2	equ	0xFDE
  9966                           postdec2	equ	0xFDD
  9967                           fsr2h	equ	0xFDA
  9968                           fsr2l	equ	0xFD9
  9969                           status	equ	0xFD8
  9970                           
  9971 ;; *************** function ___wmul *****************
  9972 ;; Defined at:
  9973 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;  multiplier      2   14[COMRAM] unsigned int 
  9976 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;  product         2   18[COMRAM] unsigned int 
  9979 ;; Return value:  Size  Location     Type
  9980 ;;                  2   14[COMRAM] unsigned int 
  9981 ;; Registers used:
  9982 ;;		wreg, status,2, status,0, prodl, prodh
  9983 ;; Tracked objects:
  9984 ;;		On entry : 0/0
  9985 ;;		On exit  : 0/0
  9986 ;;		Unchanged: 0/0
  9987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9988 ;;      Params:         4       0       0       0
  9989 ;;      Locals:         2       0       0       0
  9990 ;;      Temps:          0       0       0       0
  9991 ;;      Totals:         6       0       0       0
  9992 ;;Total ram usage:        6 bytes
  9993 ;; Hardware stack levels used:    1
  9994 ;; Hardware stack levels required when called:   10
  9995 ;; This function calls:
  9996 ;;		Nothing
  9997 ;; This function is called by:
  9998 ;;		_sprintf
  9999 ;; This function uses a non-reentrant model
 10000 ;;
 10001                           
 10002                           	psect	text50
 10003  00237C                     __ptext50:
 10004                           	opt stack 0
 10005  00237C                     ___wmul:
 10006                           	opt stack 15
 10007                           
 10008                           ;incstack = 0
 10009  00237C  500F               	movf	___wmul@multiplier,w,c
 10010  00237E  0211               	mulwf	___wmul@multiplicand,c
 10011  002380  CFF3 F013          	movff	prodl,___wmul@product
 10012  002384  CFF4 F014          	movff	prodh,___wmul@product+1
 10013  002388  500F               	movf	___wmul@multiplier,w,c
 10014  00238A  0212               	mulwf	___wmul@multiplicand+1,c
 10015  00238C  50F3               	movf	prodl,w,c
 10016  00238E  2614               	addwf	___wmul@product+1,f,c
 10017  002390  5010               	movf	___wmul@multiplier+1,w,c
 10018  002392  0211               	mulwf	___wmul@multiplicand,c
 10019  002394  50F3               	movf	prodl,w,c
 10020  002396  2614               	addwf	___wmul@product+1,f,c
 10021  002398  C013  F00F         	movff	___wmul@product,?___wmul
 10022  00239C  C014  F010         	movff	___wmul@product+1,?___wmul+1
 10023  0023A0  0012               	return		;funcret
 10024  0023A2                     __end_of___wmul:
 10025                           	opt stack 0
 10026                           tblptru	equ	0xFF8
 10027                           tblptrh	equ	0xFF7
 10028                           tblptrl	equ	0xFF6
 10029                           tablat	equ	0xFF5
 10030                           prodh	equ	0xFF4
 10031                           prodl	equ	0xFF3
 10032                           intcon	equ	0xFF2
 10033                           intcon2	equ	0xFF1
 10034                           intcon3	equ	0xFF0
 10035                           postinc0	equ	0xFEE
 10036                           wreg	equ	0xFE8
 10037                           indf1	equ	0xFE7
 10038                           postdec1	equ	0xFE5
 10039                           fsr1h	equ	0xFE2
 10040                           fsr1l	equ	0xFE1
 10041                           indf2	equ	0xFDF
 10042                           postinc2	equ	0xFDE
 10043                           postdec2	equ	0xFDD
 10044                           fsr2h	equ	0xFDA
 10045                           fsr2l	equ	0xFD9
 10046                           status	equ	0xFD8
 10047                           
 10048 ;; *************** function ___lwmod *****************
 10049 ;; Defined at:
 10050 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;  dividend        2   21[COMRAM] unsigned int 
 10053 ;;  divisor         2   23[COMRAM] unsigned int 
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;  counter         1   25[COMRAM] unsigned char 
 10056 ;; Return value:  Size  Location     Type
 10057 ;;                  2   21[COMRAM] unsigned int 
 10058 ;; Registers used:
 10059 ;;		wreg, status,2, status,0
 10060 ;; Tracked objects:
 10061 ;;		On entry : 3F/0
 10062 ;;		On exit  : 3F/0
 10063 ;;		Unchanged: 3F/0
 10064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10065 ;;      Params:         4       0       0       0
 10066 ;;      Locals:         1       0       0       0
 10067 ;;      Temps:          0       0       0       0
 10068 ;;      Totals:         5       0       0       0
 10069 ;;Total ram usage:        5 bytes
 10070 ;; Hardware stack levels used:    1
 10071 ;; Hardware stack levels required when called:   10
 10072 ;; This function calls:
 10073 ;;		Nothing
 10074 ;; This function is called by:
 10075 ;;		_sprintf
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text51
 10080  0020E8                     __ptext51:
 10081                           	opt stack 0
 10082  0020E8                     ___lwmod:
 10083                           	opt stack 15
 10084                           
 10085                           ; BSR set to: 0
 10086                           
 10087                           ;incstack = 0
 10088  0020E8  5018               	movf	___lwmod@divisor,w,c
 10089  0020EA  1019               	iorwf	___lwmod@divisor+1,w,c
 10090  0020EC  E017               	bz	l2183
 10091                           
 10092                           ; BSR set to: 0
 10093  0020EE  0E01               	movlw	1
 10094  0020F0  6E1A               	movwf	___lwmod@counter,c
 10095  0020F2  D004               	goto	l7652
 10096  0020F4                     l7650:
 10097                           
 10098                           ; BSR set to: 0
 10099  0020F4  90D8               	bcf	status,0,c
 10100  0020F6  3618               	rlcf	___lwmod@divisor,f,c
 10101  0020F8  3619               	rlcf	___lwmod@divisor+1,f,c
 10102  0020FA  2A1A               	incf	___lwmod@counter,f,c
 10103  0020FC                     l7652:
 10104                           
 10105                           ; BSR set to: 0
 10106  0020FC  AE19               	btfss	___lwmod@divisor+1,7,c
 10107  0020FE  D7FA               	goto	l7650
 10108  002100                     l7654:
 10109                           
 10110                           ; BSR set to: 0
 10111  002100  5018               	movf	___lwmod@divisor,w,c
 10112  002102  5C16               	subwf	___lwmod@dividend,w,c
 10113  002104  5019               	movf	___lwmod@divisor+1,w,c
 10114  002106  5817               	subwfb	___lwmod@dividend+1,w,c
 10115  002108  E304               	bnc	l7658
 10116                           
 10117                           ; BSR set to: 0
 10118  00210A  5018               	movf	___lwmod@divisor,w,c
 10119  00210C  5E16               	subwf	___lwmod@dividend,f,c
 10120  00210E  5019               	movf	___lwmod@divisor+1,w,c
 10121  002110  5A17               	subwfb	___lwmod@dividend+1,f,c
 10122  002112                     l7658:
 10123                           
 10124                           ; BSR set to: 0
 10125  002112  90D8               	bcf	status,0,c
 10126  002114  3219               	rrcf	___lwmod@divisor+1,f,c
 10127  002116  3218               	rrcf	___lwmod@divisor,f,c
 10128                           
 10129                           ; BSR set to: 0
 10130  002118  2E1A               	decfsz	___lwmod@counter,f,c
 10131  00211A  D7F2               	goto	l7654
 10132  00211C                     l2183:
 10133                           
 10134                           ; BSR set to: 0
 10135  00211C  C016  F016         	movff	___lwmod@dividend,?___lwmod
 10136  002120  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 10137                           
 10138                           ; BSR set to: 0
 10139  002124  0012               	return		;funcret
 10140  002126                     __end_of___lwmod:
 10141                           	opt stack 0
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           intcon	equ	0xFF2
 10149                           intcon2	equ	0xFF1
 10150                           intcon3	equ	0xFF0
 10151                           postinc0	equ	0xFEE
 10152                           wreg	equ	0xFE8
 10153                           indf1	equ	0xFE7
 10154                           postdec1	equ	0xFE5
 10155                           fsr1h	equ	0xFE2
 10156                           fsr1l	equ	0xFE1
 10157                           indf2	equ	0xFDF
 10158                           postinc2	equ	0xFDE
 10159                           postdec2	equ	0xFDD
 10160                           fsr2h	equ	0xFDA
 10161                           fsr2l	equ	0xFD9
 10162                           status	equ	0xFD8
 10163                           
 10164 ;; *************** function ___lwdiv *****************
 10165 ;; Defined at:
 10166 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  dividend        2   14[COMRAM] unsigned int 
 10169 ;;  divisor         2   16[COMRAM] unsigned int 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  quotient        2   19[COMRAM] unsigned int 
 10172 ;;  counter         1   18[COMRAM] unsigned char 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  2   14[COMRAM] unsigned int 
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0
 10177 ;; Tracked objects:
 10178 ;;		On entry : 3F/0
 10179 ;;		On exit  : 3F/0
 10180 ;;		Unchanged: 3F/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10182 ;;      Params:         4       0       0       0
 10183 ;;      Locals:         3       0       0       0
 10184 ;;      Temps:          0       0       0       0
 10185 ;;      Totals:         7       0       0       0
 10186 ;;Total ram usage:        7 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:   10
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		_sprintf
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text52
 10197  002016                     __ptext52:
 10198                           	opt stack 0
 10199  002016                     ___lwdiv:
 10200                           	opt stack 15
 10201                           
 10202                           ; BSR set to: 0
 10203                           
 10204                           ; BSR set to: 0
 10205                           ;incstack = 0
 10206  002016  6A14               	clrf	___lwdiv@quotient,c
 10207  002018  6A15               	clrf	___lwdiv@quotient+1,c
 10208                           
 10209                           ; BSR set to: 0
 10210  00201A  5011               	movf	___lwdiv@divisor,w,c
 10211  00201C  1012               	iorwf	___lwdiv@divisor+1,w,c
 10212  00201E  E01B               	bz	l2173
 10213                           
 10214                           ; BSR set to: 0
 10215  002020  0E01               	movlw	1
 10216  002022  6E13               	movwf	___lwdiv@counter,c
 10217  002024  D004               	goto	l7632
 10218  002026                     l7630:
 10219                           
 10220                           ; BSR set to: 0
 10221  002026  90D8               	bcf	status,0,c
 10222  002028  3611               	rlcf	___lwdiv@divisor,f,c
 10223  00202A  3612               	rlcf	___lwdiv@divisor+1,f,c
 10224  00202C  2A13               	incf	___lwdiv@counter,f,c
 10225  00202E                     l7632:
 10226                           
 10227                           ; BSR set to: 0
 10228  00202E  AE12               	btfss	___lwdiv@divisor+1,7,c
 10229  002030  D7FA               	goto	l7630
 10230  002032                     l7634:
 10231                           
 10232                           ; BSR set to: 0
 10233  002032  90D8               	bcf	status,0,c
 10234  002034  3614               	rlcf	___lwdiv@quotient,f,c
 10235  002036  3615               	rlcf	___lwdiv@quotient+1,f,c
 10236                           
 10237                           ; BSR set to: 0
 10238  002038  5011               	movf	___lwdiv@divisor,w,c
 10239  00203A  5C0F               	subwf	___lwdiv@dividend,w,c
 10240  00203C  5012               	movf	___lwdiv@divisor+1,w,c
 10241  00203E  5810               	subwfb	___lwdiv@dividend+1,w,c
 10242  002040  E305               	bnc	l7642
 10243                           
 10244                           ; BSR set to: 0
 10245  002042  5011               	movf	___lwdiv@divisor,w,c
 10246  002044  5E0F               	subwf	___lwdiv@dividend,f,c
 10247  002046  5012               	movf	___lwdiv@divisor+1,w,c
 10248  002048  5A10               	subwfb	___lwdiv@dividend+1,f,c
 10249                           
 10250                           ; BSR set to: 0
 10251  00204A  8014               	bsf	___lwdiv@quotient,0,c
 10252  00204C                     l7642:
 10253                           
 10254                           ; BSR set to: 0
 10255  00204C  90D8               	bcf	status,0,c
 10256  00204E  3212               	rrcf	___lwdiv@divisor+1,f,c
 10257  002050  3211               	rrcf	___lwdiv@divisor,f,c
 10258                           
 10259                           ; BSR set to: 0
 10260  002052  2E13               	decfsz	___lwdiv@counter,f,c
 10261  002054  D7EE               	goto	l7634
 10262  002056                     l2173:
 10263                           
 10264                           ; BSR set to: 0
 10265  002056  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 10266  00205A  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10267                           
 10268                           ; BSR set to: 0
 10269  00205E  0012               	return		;funcret
 10270  002060                     __end_of___lwdiv:
 10271                           	opt stack 0
 10272                           tblptru	equ	0xFF8
 10273                           tblptrh	equ	0xFF7
 10274                           tblptrl	equ	0xFF6
 10275                           tablat	equ	0xFF5
 10276                           prodh	equ	0xFF4
 10277                           prodl	equ	0xFF3
 10278                           intcon	equ	0xFF2
 10279                           intcon2	equ	0xFF1
 10280                           intcon3	equ	0xFF0
 10281                           postinc0	equ	0xFEE
 10282                           wreg	equ	0xFE8
 10283                           indf1	equ	0xFE7
 10284                           postdec1	equ	0xFE5
 10285                           fsr1h	equ	0xFE2
 10286                           fsr1l	equ	0xFE1
 10287                           indf2	equ	0xFDF
 10288                           postinc2	equ	0xFDE
 10289                           postdec2	equ	0xFDD
 10290                           fsr2h	equ	0xFDA
 10291                           fsr2l	equ	0xFD9
 10292                           status	equ	0xFD8
 10293                           
 10294 ;; *************** function _delay_1s *****************
 10295 ;; Defined at:
 10296 ;;		line 76 in file "horloge.c"
 10297 ;; Parameters:    Size  Location     Type
 10298 ;;		None
 10299 ;; Auto vars:     Size  Location     Type
 10300 ;;		None
 10301 ;; Return value:  Size  Location     Type
 10302 ;;                  1    wreg      void 
 10303 ;; Registers used:
 10304 ;;		wreg, cstack
 10305 ;; Tracked objects:
 10306 ;;		On entry : 0/0
 10307 ;;		On exit  : 0/0
 10308 ;;		Unchanged: 0/0
 10309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10310 ;;      Params:         0       0       0       0
 10311 ;;      Locals:         0       0       0       0
 10312 ;;      Temps:          0       0       0       0
 10313 ;;      Totals:         0       0       0       0
 10314 ;;Total ram usage:        0 bytes
 10315 ;; Hardware stack levels used:    1
 10316 ;; Hardware stack levels required when called:   11
 10317 ;; This function calls:
 10318 ;;		_delay_100ms
 10319 ;; This function is called by:
 10320 ;;		_EUSART1_RX_T3_LOCAL
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text53
 10325  0022E0                     __ptext53:
 10326                           	opt stack 0
 10327  0022E0                     _delay_1s:
 10328                           	opt stack 15
 10329                           
 10330                           ;horloge.c: 77: delay_100ms();
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;incstack = 0
 10334  0022E0  EC15  F00C         	call	_delay_100ms	;wreg free
 10335                           
 10336                           ;horloge.c: 78: delay_100ms();
 10337  0022E4  EC15  F00C         	call	_delay_100ms	;wreg free
 10338                           
 10339                           ;horloge.c: 79: delay_100ms();
 10340  0022E8  EC15  F00C         	call	_delay_100ms	;wreg free
 10341                           
 10342                           ;horloge.c: 80: delay_100ms();
 10343  0022EC  EC15  F00C         	call	_delay_100ms	;wreg free
 10344                           
 10345                           ;horloge.c: 81: delay_100ms();
 10346  0022F0  EC15  F00C         	call	_delay_100ms	;wreg free
 10347                           
 10348                           ;horloge.c: 82: delay_100ms();
 10349  0022F4  EC15  F00C         	call	_delay_100ms	;wreg free
 10350                           
 10351                           ;horloge.c: 83: delay_100ms();
 10352  0022F8  EC15  F00C         	call	_delay_100ms	;wreg free
 10353                           
 10354                           ;horloge.c: 84: delay_100ms();
 10355  0022FC  EC15  F00C         	call	_delay_100ms	;wreg free
 10356                           
 10357                           ;horloge.c: 85: delay_100ms();
 10358  002300  EC15  F00C         	call	_delay_100ms	;wreg free
 10359                           
 10360                           ;horloge.c: 86: delay_100ms();
 10361  002304  EF15  F00C         	goto	_delay_100ms	;wreg free
 10362  002308                     __end_of_delay_1s:
 10363                           	opt stack 0
 10364                           tblptru	equ	0xFF8
 10365                           tblptrh	equ	0xFF7
 10366                           tblptrl	equ	0xFF6
 10367                           tablat	equ	0xFF5
 10368                           prodh	equ	0xFF4
 10369                           prodl	equ	0xFF3
 10370                           intcon	equ	0xFF2
 10371                           intcon2	equ	0xFF1
 10372                           intcon3	equ	0xFF0
 10373                           postinc0	equ	0xFEE
 10374                           wreg	equ	0xFE8
 10375                           indf1	equ	0xFE7
 10376                           postdec1	equ	0xFE5
 10377                           fsr1h	equ	0xFE2
 10378                           fsr1l	equ	0xFE1
 10379                           indf2	equ	0xFDF
 10380                           postinc2	equ	0xFDE
 10381                           postdec2	equ	0xFDD
 10382                           fsr2h	equ	0xFDA
 10383                           fsr2l	equ	0xFD9
 10384                           status	equ	0xFD8
 10385                           
 10386 ;; *************** function _delay_100ms *****************
 10387 ;; Defined at:
 10388 ;;		line 46 in file "horloge.c"
 10389 ;; Parameters:    Size  Location     Type
 10390 ;;		None
 10391 ;; Auto vars:     Size  Location     Type
 10392 ;;		None
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  1    wreg      void 
 10395 ;; Registers used:
 10396 ;;		wreg
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/2
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10402 ;;      Params:         0       0       0       0
 10403 ;;      Locals:         0       0       0       0
 10404 ;;      Temps:          1       0       0       0
 10405 ;;      Totals:         1       0       0       0
 10406 ;;Total ram usage:        1 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; Hardware stack levels required when called:   10
 10409 ;; This function calls:
 10410 ;;		Nothing
 10411 ;; This function is called by:
 10412 ;;		_delay_n_100ms
 10413 ;;		_delay_1s
 10414 ;; This function uses a non-reentrant model
 10415 ;;
 10416                           
 10417                           	psect	text54
 10418  00182A                     __ptext54:
 10419                           	opt stack 0
 10420  00182A                     _delay_100ms:
 10421                           	opt stack 15
 10422                           
 10423                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
 10424                           
 10425                           ;incstack = 0
 10426  00182A  0E1A               	movlw	26
 10427  00182C  6E0F               	movwf	??_delay_100ms& (0+255),c
 10428  00182E  0EF8               	movlw	248
 10429  001830                     u7297:
 10430  001830  2EE8               	decfsz	wreg,f,c
 10431  001832  D7FE               	bra	u7297
 10432  001834  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10433  001836  D7FC               	bra	u7297
 10434  001838  F000 F000          	nop2	
 10435                           
 10436                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
 10437  00183C  0E1A               	movlw	26
 10438  00183E  6E0F               	movwf	??_delay_100ms& (0+255),c
 10439  001840  0EF8               	movlw	248
 10440  001842                     u7307:
 10441  001842  2EE8               	decfsz	wreg,f,c
 10442  001844  D7FE               	bra	u7307
 10443  001846  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10444  001848  D7FC               	bra	u7307
 10445  00184A  F000 F000          	nop2	
 10446                           
 10447                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
 10448  00184E  0E1A               	movlw	26
 10449  001850  6E0F               	movwf	??_delay_100ms& (0+255),c
 10450  001852  0EF8               	movlw	248
 10451  001854                     u7317:
 10452  001854  2EE8               	decfsz	wreg,f,c
 10453  001856  D7FE               	bra	u7317
 10454  001858  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10455  00185A  D7FC               	bra	u7317
 10456  00185C  F000 F000          	nop2	
 10457                           
 10458                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
 10459  001860  0E1A               	movlw	26
 10460  001862  6E0F               	movwf	??_delay_100ms& (0+255),c
 10461  001864  0EF8               	movlw	248
 10462  001866                     u7327:
 10463  001866  2EE8               	decfsz	wreg,f,c
 10464  001868  D7FE               	bra	u7327
 10465  00186A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10466  00186C  D7FC               	bra	u7327
 10467  00186E  F000 F000          	nop2	
 10468                           
 10469                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
 10470  001872  0E1A               	movlw	26
 10471  001874  6E0F               	movwf	??_delay_100ms& (0+255),c
 10472  001876  0EF8               	movlw	248
 10473  001878                     u7337:
 10474  001878  2EE8               	decfsz	wreg,f,c
 10475  00187A  D7FE               	bra	u7337
 10476  00187C  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10477  00187E  D7FC               	bra	u7337
 10478  001880  F000 F000          	nop2	
 10479                           
 10480                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
 10481  001884  0E1A               	movlw	26
 10482  001886  6E0F               	movwf	??_delay_100ms& (0+255),c
 10483  001888  0EF8               	movlw	248
 10484  00188A                     u7347:
 10485  00188A  2EE8               	decfsz	wreg,f,c
 10486  00188C  D7FE               	bra	u7347
 10487  00188E  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10488  001890  D7FC               	bra	u7347
 10489  001892  F000 F000          	nop2	
 10490                           
 10491                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
 10492  001896  0E1A               	movlw	26
 10493  001898  6E0F               	movwf	??_delay_100ms& (0+255),c
 10494  00189A  0EF8               	movlw	248
 10495  00189C                     u7357:
 10496  00189C  2EE8               	decfsz	wreg,f,c
 10497  00189E  D7FE               	bra	u7357
 10498  0018A0  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10499  0018A2  D7FC               	bra	u7357
 10500  0018A4  F000 F000          	nop2	
 10501                           
 10502                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
 10503  0018A8  0E1A               	movlw	26
 10504  0018AA  6E0F               	movwf	??_delay_100ms& (0+255),c
 10505  0018AC  0EF8               	movlw	248
 10506  0018AE                     u7367:
 10507  0018AE  2EE8               	decfsz	wreg,f,c
 10508  0018B0  D7FE               	bra	u7367
 10509  0018B2  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10510  0018B4  D7FC               	bra	u7367
 10511  0018B6  F000 F000          	nop2	
 10512                           
 10513                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
 10514  0018BA  0E1A               	movlw	26
 10515  0018BC  6E0F               	movwf	??_delay_100ms& (0+255),c
 10516  0018BE  0EF8               	movlw	248
 10517  0018C0                     u7377:
 10518  0018C0  2EE8               	decfsz	wreg,f,c
 10519  0018C2  D7FE               	bra	u7377
 10520  0018C4  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10521  0018C6  D7FC               	bra	u7377
 10522  0018C8  F000 F000          	nop2	
 10523                           
 10524                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
 10525  0018CC  0E1A               	movlw	26
 10526  0018CE  6E0F               	movwf	??_delay_100ms& (0+255),c
 10527  0018D0  0EF8               	movlw	248
 10528  0018D2                     u7387:
 10529  0018D2  2EE8               	decfsz	wreg,f,c
 10530  0018D4  D7FE               	bra	u7387
 10531  0018D6  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10532  0018D8  D7FC               	bra	u7387
 10533  0018DA  F000 F000          	nop2	
 10534  0018DE  0012               	return		;funcret
 10535  0018E0                     __end_of_delay_100ms:
 10536                           	opt stack 0
 10537                           tblptru	equ	0xFF8
 10538                           tblptrh	equ	0xFF7
 10539                           tblptrl	equ	0xFF6
 10540                           tablat	equ	0xFF5
 10541                           prodh	equ	0xFF4
 10542                           prodl	equ	0xFF3
 10543                           intcon	equ	0xFF2
 10544                           intcon2	equ	0xFF1
 10545                           intcon3	equ	0xFF0
 10546                           postinc0	equ	0xFEE
 10547                           wreg	equ	0xFE8
 10548                           indf1	equ	0xFE7
 10549                           postdec1	equ	0xFE5
 10550                           fsr1h	equ	0xFE2
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           fsr2h	equ	0xFDA
 10556                           fsr2l	equ	0xFD9
 10557                           status	equ	0xFD8
 10558                           
 10559 ;; *************** function _IRQ_Execution *****************
 10560 ;; Defined at:
 10561 ;;		line 40 in file "interrupt.c"
 10562 ;; Parameters:    Size  Location     Type
 10563 ;;  IRQ_Indice      1    wreg     unsigned char 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  1    wreg      void 
 10568 ;; Registers used:
 10569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10570 ;; Tracked objects:
 10571 ;;		On entry : 3F/2
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10575 ;;      Params:         0       0       0       0
 10576 ;;      Locals:         1       0       0       0
 10577 ;;      Temps:          0       0       0       0
 10578 ;;      Totals:         1       0       0       0
 10579 ;;Total ram usage:        1 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:   14
 10582 ;; This function calls:
 10583 ;;		_IRQ_ADC
 10584 ;;		_IRQ_CAPOT
 10585 ;;		_IRQ_I_MOTEUR_1
 10586 ;;		_IRQ_I_MOTEUR_2
 10587 ;;		_IRQ_PION_Metal_Apparait
 10588 ;;		_IRQ_PION_Metal_Disparait
 10589 ;;		_IRQ_PWM
 10590 ;;		_IRQ_TIMER2
 10591 ;;		_IRQ_TIMER_0
 10592 ;;		_IRQ_TIMER_5
 10593 ;; This function is called by:
 10594 ;;		_EUSART1_RX_T3_LOCAL
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text55
 10599  001ED8                     __ptext55:
 10600                           	opt stack 0
 10601  001ED8                     _IRQ_Execution:
 10602                           	opt stack 12
 10603                           
 10604                           ;incstack = 0
 10605                           ;IRQ_Execution@IRQ_Indice stored from wreg
 10606  001ED8  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
 10607                           
 10608                           ;interrupt.c: 62: break;
 10609                           
 10610                           ;interrupt.c: 60: break;
 10611                           
 10612                           ;interrupt.c: 58: break;
 10613                           
 10614                           ;interrupt.c: 56: break;
 10615                           
 10616                           ;interrupt.c: 54: break;
 10617                           
 10618                           ;interrupt.c: 52: break;
 10619                           
 10620                           ;interrupt.c: 50: break;
 10621                           
 10622                           ;interrupt.c: 48: break;
 10623                           
 10624                           ;interrupt.c: 46: break;
 10625                           
 10626                           ;interrupt.c: 44: break;
 10627                           
 10628                           ;interrupt.c: 41: switch (IRQ_Indice) {
 10629  001EDA  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
 10630                           
 10631                           ; Switch size 1, requested type "speed"
 10632                           ; Number of cases is 10, Range of values is 0 to 9
 10633                           ; switch strategies available:
 10634                           ; Name         Instructions Cycles
 10635                           ; simple_byte           31    16 (average)
 10636                           ;	Chosen strategy is simple_byte
 10637  001EDC  E102 EF92  F013    	bz	_IRQ_CAPOT
 10638  001EE2  0A01               	xorlw	1	; case 1
 10639  001EE4  E102 EFAE  F012    	bz	_IRQ_I_MOTEUR_1
 10640  001EEA  0A03               	xorlw	3	; case 2
 10641  001EEC  E102 EFA3  F012    	bz	_IRQ_I_MOTEUR_2
 10642  001EF2  0A01               	xorlw	1	; case 3
 10643  001EF4  E102 EF26  F012    	bz	_IRQ_PION_Metal_Apparait
 10644  001EFA  0A07               	xorlw	7	; case 4
 10645  001EFC  E102 EF8B  F012    	bz	_IRQ_PION_Metal_Disparait
 10646  001F02  0A01               	xorlw	1	; case 5
 10647  001F04  E102 EF14  F00F    	bz	_IRQ_TIMER_0
 10648  001F0A  0A03               	xorlw	3	; case 6
 10649  001F0C  E102 EFA1  F013    	bz	_IRQ_TIMER2
 10650  001F12  0A01               	xorlw	1	; case 7
 10651  001F14  E102 EFAC  F00D    	bz	_IRQ_TIMER_5
 10652  001F1A  0A0F               	xorlw	15	; case 8
 10653  001F1C  E102 EF0A  F007    	bz	_IRQ_ADC
 10654  001F22  0A01               	xorlw	1	; case 9
 10655  001F24  E102 EFB4  F013    	bz	_IRQ_PWM
 10656  001F2A  0012               	return		;funcret
 10657  001F2C                     __end_of_IRQ_Execution:
 10658                           	opt stack 0
 10659                           tblptru	equ	0xFF8
 10660                           tblptrh	equ	0xFF7
 10661                           tblptrl	equ	0xFF6
 10662                           tablat	equ	0xFF5
 10663                           prodh	equ	0xFF4
 10664                           prodl	equ	0xFF3
 10665                           intcon	equ	0xFF2
 10666                           intcon2	equ	0xFF1
 10667                           intcon3	equ	0xFF0
 10668                           postinc0	equ	0xFEE
 10669                           wreg	equ	0xFE8
 10670                           indf1	equ	0xFE7
 10671                           postdec1	equ	0xFE5
 10672                           fsr1h	equ	0xFE2
 10673                           fsr1l	equ	0xFE1
 10674                           indf2	equ	0xFDF
 10675                           postinc2	equ	0xFDE
 10676                           postdec2	equ	0xFDD
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _IRQ_TIMER_5 *****************
 10682 ;; Defined at:
 10683 ;;		line 409 in file "interrupt.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  1    wreg      void 
 10690 ;; Registers used:
 10691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/2
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10697 ;;      Params:         0       0       0       0
 10698 ;;      Locals:         0       0       0       0
 10699 ;;      Temps:          0       0       0       0
 10700 ;;      Totals:         0       0       0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:   13
 10704 ;; This function calls:
 10705 ;;		_Alarme_On
 10706 ;;		_Buzzer_Etat
 10707 ;;		_Etat_Update
 10708 ;;		_TIMER5_Off
 10709 ;; This function is called by:
 10710 ;;		_IRQ_Execution
 10711 ;; This function uses a non-reentrant model
 10712 ;;
 10713                           
 10714                           	psect	text56
 10715  001B58                     __ptext56:
 10716                           	opt stack 0
 10717  001B58                     _IRQ_TIMER_5:
 10718                           	opt stack 12
 10719                           
 10720                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 10721                           
 10722                           ;incstack = 0
 10723  001B58  90A4               	bcf	4004,0,c	;volatile
 10724                           
 10725                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 10726  001B5A  0100               	movlb	0	; () banked
 10727  001B5C  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 10731  001B5E  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 10732  001B60  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10733  001B62  E115               	bnz	l7488
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 10737  001B64  044D               	decf	_Mouvement_Startup,w,c
 10738  001B66  E001               	bz	l7474
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;interrupt.c: 418: nb_Pion += 1;
 10742  001B68  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 10743  001B6A                     l7474:
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;interrupt.c: 419: }
 10747                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 10748  001B6A  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 10752  001B6C  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10753  001B6E  E003               	bz	l607
 10754                           
 10755                           ; BSR set to: 0
 10756  001B70  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10757  001B72  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 10758  001B74  E202               	bc	l7480
 10759  001B76                     l607:
 10760                           
 10761                           ; BSR set to: 0
 10762  001B76  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 10763  001B78  0012               	return	
 10764  001B7A                     l7480:
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 10768  001B7A  0E00               	movlw	0
 10769  001B7C  EC64  F013         	call	_Buzzer_Etat
 10770                           
 10771                           ;interrupt.c: 430: P4_busy = 0;
 10772  001B80  0100               	movlb	0	; () banked
 10773  001B82  6BAC               	clrf	_P4_busy& (0+255),b
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;interrupt.c: 431: TIMER5_Off();
 10777  001B84  EC84  F013         	call	_TIMER5_Off	;wreg free
 10778                           
 10779                           ;interrupt.c: 432: Etat_Update(0);
 10780  001B88  0E00               	movlw	0
 10781  001B8A  EF35  F012         	goto	_Etat_Update
 10782  001B8E                     l7488:
 10783                           
 10784                           ; BSR set to: 0
 10785  001B8E  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 10786  001B90  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10787  001B92  A4D8               	btfss	status,2,c
 10788  001B94  0012               	return	
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 10792  001B96  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 10793  001B98  E10E               	bnz	l610
 10794                           
 10795                           ; BSR set to: 0
 10796  001B9A  B480               	btfsc	3968,2,c	;volatile
 10797  001B9C  D00C               	goto	l610
 10798                           
 10799                           ; BSR set to: 0
 10800  001B9E  044D               	decf	_Mouvement_Startup,w,c
 10801  001BA0  E10A               	bnz	l610
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;interrupt.c: 460: if (Option_Multitas==1){
 10805  001BA2  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 10806  001BA4  D004               	goto	l7500
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;interrupt.c: 461: Alarme_On(11);
 10810  001BA6  0E0B               	movlw	11
 10811  001BA8  EC45  F013         	call	_Alarme_On
 10812                           
 10813                           ;interrupt.c: 462: }else{
 10814  001BAC  D008               	goto	l7504
 10815  001BAE                     l7500:
 10816                           
 10817                           ; BSR set to: 0
 10818                           ;interrupt.c: 463: Alarme_On(6);
 10819  001BAE  0E06               	movlw	6
 10820  001BB0  EC45  F013         	call	_Alarme_On
 10821  001BB4  D004               	goto	l7504
 10822  001BB6                     l610:
 10823                           
 10824                           ; BSR set to: 0
 10825                           ;interrupt.c: 467: P4_busy = 0;
 10826  001BB6  6BAC               	clrf	_P4_busy& (0+255),b
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;interrupt.c: 468: Etat_Update(6);
 10830  001BB8  0E06               	movlw	6
 10831  001BBA  EC35  F012         	call	_Etat_Update
 10832  001BBE                     l7504:
 10833                           
 10834                           ;interrupt.c: 471: }
 10835                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 10836  001BBE  0E00               	movlw	0
 10837  001BC0  EC64  F013         	call	_Buzzer_Etat
 10838                           
 10839                           ;interrupt.c: 474: TIMER5_Off();
 10840  001BC4  EF84  F013         	goto	_TIMER5_Off	;wreg free
 10841  001BC8                     __end_of_IRQ_TIMER_5:
 10842                           	opt stack 0
 10843                           tblptru	equ	0xFF8
 10844                           tblptrh	equ	0xFF7
 10845                           tblptrl	equ	0xFF6
 10846                           tablat	equ	0xFF5
 10847                           prodh	equ	0xFF4
 10848                           prodl	equ	0xFF3
 10849                           intcon	equ	0xFF2
 10850                           intcon2	equ	0xFF1
 10851                           intcon3	equ	0xFF0
 10852                           postinc0	equ	0xFEE
 10853                           wreg	equ	0xFE8
 10854                           indf1	equ	0xFE7
 10855                           postdec1	equ	0xFE5
 10856                           fsr1h	equ	0xFE2
 10857                           fsr1l	equ	0xFE1
 10858                           indf2	equ	0xFDF
 10859                           postinc2	equ	0xFDE
 10860                           postdec2	equ	0xFDD
 10861                           fsr2h	equ	0xFDA
 10862                           fsr2l	equ	0xFD9
 10863                           status	equ	0xFD8
 10864                           
 10865 ;; *************** function _IRQ_TIMER_0 *****************
 10866 ;; Defined at:
 10867 ;;		line 361 in file "interrupt.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;		None
 10870 ;; Auto vars:     Size  Location     Type
 10871 ;;		None
 10872 ;; Return value:  Size  Location     Type
 10873 ;;                  1    wreg      void 
 10874 ;; Registers used:
 10875 ;;		wreg, status,2, status,0, cstack
 10876 ;; Tracked objects:
 10877 ;;		On entry : 0/2
 10878 ;;		On exit  : 3F/0
 10879 ;;		Unchanged: 0/0
 10880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10881 ;;      Params:         0       0       0       0
 10882 ;;      Locals:         0       0       0       0
 10883 ;;      Temps:          0       0       0       0
 10884 ;;      Totals:         0       0       0       0
 10885 ;;Total ram usage:        0 bytes
 10886 ;; Hardware stack levels used:    1
 10887 ;; Hardware stack levels required when called:   11
 10888 ;; This function calls:
 10889 ;;		_Surveillance_Consommation_Moteur_1_Activer
 10890 ;;		_Surveillance_Consommation_Moteur_2_Activer
 10891 ;; This function is called by:
 10892 ;;		_IRQ_Execution
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           	psect	text57
 10897  001E28                     __ptext57:
 10898                           	opt stack 0
 10899  001E28                     _IRQ_TIMER_0:
 10900                           	opt stack 14
 10901                           
 10902                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 10903                           
 10904                           ;incstack = 0
 10905  001E28  94F2               	bcf	intcon,2,c	;volatile
 10906                           
 10907                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 10908  001E2A  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 10909                           
 10910                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 10911  001E2C  0100               	movlb	0	; () banked
 10912  001E2E  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 10913                           
 10914                           ;interrupt.c: 366: delay_s_counter += 1;
 10915  001E30  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 10919  001E32  0E02               	movlw	2
 10920  001E34  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 10921  001E36  E01C               	bz	l7460
 10922  001E38  0012               	return	
 10923  001E3A                     l7440:
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 10927  001E3A  EC0A  F013         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10931  001E3E  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10932  001E40  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10933  001E42  E203               	bc	l588
 10934  001E44                     l7444:
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;interrupt.c: 381: consigne = Consigne_Max;
 10938  001E44  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 10939                           
 10940                           ;interrupt.c: 382: } else {
 10941  001E48  0012               	return	
 10942  001E4A                     l588:
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 10946  001E4A  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10947  001E4E  0012               	return	
 10948  001E50                     l7446:
 10949                           
 10950                           ; BSR set to: 0
 10951                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 10952  001E50  EC01  F013         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10956  001E54  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10957  001E56  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10958  001E58  E3F5               	bnc	l7444
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 10962  001E5A  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10963  001E5E  0012               	return	
 10964  001E60                     l7452:
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 10968  001E60  EC01  F013         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10972  001E64  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10973  001E66  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10974  001E68  E3ED               	bnc	l7444
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 10978  001E6A  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10979  001E6E  0012               	return	
 10980  001E70                     l7460:
 10981                           
 10982                           ; BSR set to: 0
 10983  001E70  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 10984                           
 10985                           ; Switch size 1, requested type "speed"
 10986                           ; Number of cases is 3, Range of values is 1 to 3
 10987                           ; switch strategies available:
 10988                           ; Name         Instructions Cycles
 10989                           ; simple_byte           10     6 (average)
 10990                           ;	Chosen strategy is simple_byte
 10991  001E72  0A01               	xorlw	1	; case 1
 10992  001E74  E0E2               	bz	l7440
 10993  001E76  0A03               	xorlw	3	; case 2
 10994  001E78  E0EB               	bz	l7446
 10995  001E7A  0A01               	xorlw	1	; case 3
 10996  001E7C  E0F1               	bz	l7452
 10997                           
 10998                           ; BSR set to: 0
 10999  001E7E  0012               	return		;funcret
 11000  001E80                     __end_of_IRQ_TIMER_0:
 11001                           	opt stack 0
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           intcon2	equ	0xFF1
 11010                           intcon3	equ	0xFF0
 11011                           postinc0	equ	0xFEE
 11012                           wreg	equ	0xFE8
 11013                           indf1	equ	0xFE7
 11014                           postdec1	equ	0xFE5
 11015                           fsr1h	equ	0xFE2
 11016                           fsr1l	equ	0xFE1
 11017                           indf2	equ	0xFDF
 11018                           postinc2	equ	0xFDE
 11019                           postdec2	equ	0xFDD
 11020                           fsr2h	equ	0xFDA
 11021                           fsr2l	equ	0xFD9
 11022                           status	equ	0xFD8
 11023                           
 11024 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 11025 ;; Defined at:
 11026 ;;		line 868 in file "interrupt.c"
 11027 ;; Parameters:    Size  Location     Type
 11028 ;;		None
 11029 ;; Auto vars:     Size  Location     Type
 11030 ;;		None
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  1    wreg      void 
 11033 ;; Registers used:
 11034 ;;		wreg, status,2, status,0
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 3F/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11040 ;;      Params:         0       0       0       0
 11041 ;;      Locals:         0       0       0       0
 11042 ;;      Temps:          0       0       0       0
 11043 ;;      Totals:         0       0       0       0
 11044 ;;Total ram usage:        0 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:   10
 11047 ;; This function calls:
 11048 ;;		Nothing
 11049 ;; This function is called by:
 11050 ;;		_IRQ_TIMER_0
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           	psect	text58
 11055  002602                     __ptext58:
 11056                           	opt stack 0
 11057  002602                     _Surveillance_Consommation_Moteur_2_Activer:
 11058                           	opt stack 14
 11059                           
 11060                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 11061                           
 11062                           ; BSR set to: 0
 11063                           ;incstack = 0
 11064  002602  0100               	movlb	0	; () banked
 11065  002604  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 11066  002606  B4D8               	btfsc	status,2,c
 11067  002608  0012               	return	
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 11071  00260A  0E01               	movlw	1
 11072  00260C  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 11076  00260E  92F0               	bcf	intcon3,1,c	;volatile
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 11080  002610  88F0               	bsf	intcon3,4,c	;volatile
 11081                           
 11082                           ; BSR set to: 0
 11083  002612  0C01               	retlw	1	;funcret
 11084  002614                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 11085                           	opt stack 0
 11086                           tblptru	equ	0xFF8
 11087                           tblptrh	equ	0xFF7
 11088                           tblptrl	equ	0xFF6
 11089                           tablat	equ	0xFF5
 11090                           prodh	equ	0xFF4
 11091                           prodl	equ	0xFF3
 11092                           intcon	equ	0xFF2
 11093                           intcon2	equ	0xFF1
 11094                           intcon3	equ	0xFF0
 11095                           postinc0	equ	0xFEE
 11096                           wreg	equ	0xFE8
 11097                           indf1	equ	0xFE7
 11098                           postdec1	equ	0xFE5
 11099                           fsr1h	equ	0xFE2
 11100                           fsr1l	equ	0xFE1
 11101                           indf2	equ	0xFDF
 11102                           postinc2	equ	0xFDE
 11103                           postdec2	equ	0xFDD
 11104                           fsr2h	equ	0xFDA
 11105                           fsr2l	equ	0xFD9
 11106                           status	equ	0xFD8
 11107                           
 11108 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 11109 ;; Defined at:
 11110 ;;		line 852 in file "interrupt.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;		None
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;		None
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, status,2, status,0
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 3F/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11124 ;;      Params:         0       0       0       0
 11125 ;;      Locals:         0       0       0       0
 11126 ;;      Temps:          0       0       0       0
 11127 ;;      Totals:         0       0       0       0
 11128 ;;Total ram usage:        0 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:   10
 11131 ;; This function calls:
 11132 ;;		Nothing
 11133 ;; This function is called by:
 11134 ;;		_IRQ_TIMER_0
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           	psect	text59
 11139  002614                     __ptext59:
 11140                           	opt stack 0
 11141  002614                     _Surveillance_Consommation_Moteur_1_Activer:
 11142                           	opt stack 14
 11143                           
 11144                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;incstack = 0
 11148  002614  0100               	movlb	0	; () banked
 11149  002616  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 11150  002618  B4D8               	btfsc	status,2,c
 11151  00261A  0012               	return	
 11152                           
 11153                           ; BSR set to: 0
 11154                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 11155  00261C  0E01               	movlw	1
 11156  00261E  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 11160  002620  90F0               	bcf	intcon3,0,c	;volatile
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 11164  002622  86F0               	bsf	intcon3,3,c	;volatile
 11165                           
 11166                           ; BSR set to: 0
 11167  002624  0C01               	retlw	1	;funcret
 11168  002626                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 11169                           	opt stack 0
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           intcon2	equ	0xFF1
 11178                           intcon3	equ	0xFF0
 11179                           postinc0	equ	0xFEE
 11180                           wreg	equ	0xFE8
 11181                           indf1	equ	0xFE7
 11182                           postdec1	equ	0xFE5
 11183                           fsr1h	equ	0xFE2
 11184                           fsr1l	equ	0xFE1
 11185                           indf2	equ	0xFDF
 11186                           postinc2	equ	0xFDE
 11187                           postdec2	equ	0xFDD
 11188                           fsr2h	equ	0xFDA
 11189                           fsr2l	equ	0xFD9
 11190                           status	equ	0xFD8
 11191                           
 11192 ;; *************** function _IRQ_TIMER2 *****************
 11193 ;; Defined at:
 11194 ;;		line 883 in file "interrupt.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;		None
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;		None
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		None
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/2
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11208 ;;      Params:         0       0       0       0
 11209 ;;      Locals:         0       0       0       0
 11210 ;;      Temps:          0       0       0       0
 11211 ;;      Totals:         0       0       0       0
 11212 ;;Total ram usage:        0 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:   10
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_IRQ_Execution
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text60
 11223  002742                     __ptext60:
 11224                           	opt stack 0
 11225  002742                     _IRQ_TIMER2:
 11226                           	opt stack 15
 11227                           
 11228                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;incstack = 0
 11232  002742  929E               	bcf	3998,1,c	;volatile
 11233                           
 11234                           ;interrupt.c: 887: GODONE = 1;
 11235  002744  82C2               	bsf	4034,1,c	;volatile
 11236  002746  0012               	return		;funcret
 11237  002748                     __end_of_IRQ_TIMER2:
 11238                           	opt stack 0
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           intcon2	equ	0xFF1
 11247                           intcon3	equ	0xFF0
 11248                           postinc0	equ	0xFEE
 11249                           wreg	equ	0xFE8
 11250                           indf1	equ	0xFE7
 11251                           postdec1	equ	0xFE5
 11252                           fsr1h	equ	0xFE2
 11253                           fsr1l	equ	0xFE1
 11254                           indf2	equ	0xFDF
 11255                           postinc2	equ	0xFDE
 11256                           postdec2	equ	0xFDD
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _IRQ_PWM *****************
 11262 ;; Defined at:
 11263 ;;		line 481 in file "interrupt.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;		None
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;		None
 11268 ;; Return value:  Size  Location     Type
 11269 ;;                  1    wreg      void 
 11270 ;; Registers used:
 11271 ;;		None
 11272 ;; Tracked objects:
 11273 ;;		On entry : 0/2
 11274 ;;		On exit  : 0/0
 11275 ;;		Unchanged: 0/0
 11276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11277 ;;      Params:         0       0       0       0
 11278 ;;      Locals:         0       0       0       0
 11279 ;;      Temps:          0       0       0       0
 11280 ;;      Totals:         0       0       0       0
 11281 ;;Total ram usage:        0 bytes
 11282 ;; Hardware stack levels used:    1
 11283 ;; Hardware stack levels required when called:   10
 11284 ;; This function calls:
 11285 ;;		Nothing
 11286 ;; This function is called by:
 11287 ;;		_IRQ_Execution
 11288 ;; This function uses a non-reentrant model
 11289 ;;
 11290                           
 11291                           	psect	text61
 11292  002768                     __ptext61:
 11293                           	opt stack 0
 11294  002768                     _IRQ_PWM:
 11295                           	opt stack 15
 11296                           
 11297                           ;interrupt.c: 483: PTIF = 0;
 11298                           
 11299                           ;incstack = 0
 11300  002768  98A4               	bcf	4004,4,c	;volatile
 11301  00276A  0012               	return		;funcret
 11302  00276C                     __end_of_IRQ_PWM:
 11303                           	opt stack 0
 11304                           tblptru	equ	0xFF8
 11305                           tblptrh	equ	0xFF7
 11306                           tblptrl	equ	0xFF6
 11307                           tablat	equ	0xFF5
 11308                           prodh	equ	0xFF4
 11309                           prodl	equ	0xFF3
 11310                           intcon	equ	0xFF2
 11311                           intcon2	equ	0xFF1
 11312                           intcon3	equ	0xFF0
 11313                           postinc0	equ	0xFEE
 11314                           wreg	equ	0xFE8
 11315                           indf1	equ	0xFE7
 11316                           postdec1	equ	0xFE5
 11317                           fsr1h	equ	0xFE2
 11318                           fsr1l	equ	0xFE1
 11319                           indf2	equ	0xFDF
 11320                           postinc2	equ	0xFDE
 11321                           postdec2	equ	0xFDD
 11322                           fsr2h	equ	0xFDA
 11323                           fsr2l	equ	0xFD9
 11324                           status	equ	0xFD8
 11325                           
 11326 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 11327 ;; Defined at:
 11328 ;;		line 287 in file "interrupt.c"
 11329 ;; Parameters:    Size  Location     Type
 11330 ;;		None
 11331 ;; Auto vars:     Size  Location     Type
 11332 ;;		None
 11333 ;; Return value:  Size  Location     Type
 11334 ;;                  1    wreg      void 
 11335 ;; Registers used:
 11336 ;;		wreg, status,2, status,0, cstack
 11337 ;; Tracked objects:
 11338 ;;		On entry : 0/2
 11339 ;;		On exit  : 3F/0
 11340 ;;		Unchanged: 0/0
 11341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11342 ;;      Params:         0       0       0       0
 11343 ;;      Locals:         0       0       0       0
 11344 ;;      Temps:          0       0       0       0
 11345 ;;      Totals:         0       0       0       0
 11346 ;;Total ram usage:        0 bytes
 11347 ;; Hardware stack levels used:    1
 11348 ;; Hardware stack levels required when called:   11
 11349 ;; This function calls:
 11350 ;;		_Buzzer_Etat
 11351 ;;		_TIMER5_Off
 11352 ;; This function is called by:
 11353 ;;		_IRQ_Execution
 11354 ;; This function uses a non-reentrant model
 11355 ;;
 11356                           
 11357                           	psect	text62
 11358  002516                     __ptext62:
 11359                           	opt stack 0
 11360  002516                     _IRQ_PION_Metal_Disparait:
 11361                           	opt stack 14
 11362                           
 11363                           ;interrupt.c: 289: Buzzer_Etat((unsigned char) 0);
 11364                           
 11365                           ;incstack = 0
 11366  002516  0E00               	movlw	0
 11367  002518  EC64  F013         	call	_Buzzer_Etat
 11368                           
 11369                           ;interrupt.c: 290: PIE3bits.IC2QEIE = 0;
 11370  00251C  94A3               	bcf	4003,2,c	;volatile
 11371                           
 11372                           ;interrupt.c: 291: PIR3bits.IC2QEIF = 0;
 11373  00251E  94A4               	bcf	4004,2,c	;volatile
 11374                           
 11375                           ;interrupt.c: 293: TIMER5_Off();
 11376  002520  EC84  F013         	call	_TIMER5_Off	;wreg free
 11377                           
 11378                           ;interrupt.c: 295: nb_100ms_Timer_5 = 0;
 11379  002524  0100               	movlb	0	; () banked
 11380  002526  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;interrupt.c: 299: nb_100ms_platine = nb_100ms_platine_backup;
 11384  002528  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;interrupt.c: 301: Mouvement_Startup = 0;
 11388  00252C  6A4D               	clrf	_Mouvement_Startup,c
 11389                           
 11390                           ; BSR set to: 0
 11391  00252E  0012               	return		;funcret
 11392  002530                     __end_of_IRQ_PION_Metal_Disparait:
 11393                           	opt stack 0
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           intcon3	equ	0xFF0
 11403                           postinc0	equ	0xFEE
 11404                           wreg	equ	0xFE8
 11405                           indf1	equ	0xFE7
 11406                           postdec1	equ	0xFE5
 11407                           fsr1h	equ	0xFE2
 11408                           fsr1l	equ	0xFE1
 11409                           indf2	equ	0xFDF
 11410                           postinc2	equ	0xFDE
 11411                           postdec2	equ	0xFDD
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416 ;; *************** function _TIMER5_Off *****************
 11417 ;; Defined at:
 11418 ;;		line 263 in file "timer.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;		None
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;		None
 11423 ;; Return value:  Size  Location     Type
 11424 ;;                  1    wreg      void 
 11425 ;; Registers used:
 11426 ;;		None
 11427 ;; Tracked objects:
 11428 ;;		On entry : 0/0
 11429 ;;		On exit  : 0/0
 11430 ;;		Unchanged: 0/0
 11431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11432 ;;      Params:         0       0       0       0
 11433 ;;      Locals:         0       0       0       0
 11434 ;;      Temps:          0       0       0       0
 11435 ;;      Totals:         0       0       0       0
 11436 ;;Total ram usage:        0 bytes
 11437 ;; Hardware stack levels used:    1
 11438 ;; Hardware stack levels required when called:   10
 11439 ;; This function calls:
 11440 ;;		Nothing
 11441 ;; This function is called by:
 11442 ;;		_IRQ_PION_Metal_Disparait
 11443 ;;		_IRQ_TIMER_5
 11444 ;; This function uses a non-reentrant model
 11445 ;;
 11446                           
 11447                           	psect	text63
 11448  002708                     __ptext63:
 11449                           	opt stack 0
 11450  002708                     _TIMER5_Off:
 11451                           	opt stack 14
 11452                           
 11453                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;incstack = 0
 11457  002708  90B7               	bcf	4023,0,c	;volatile
 11458                           
 11459                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 11460  00270A  90A4               	bcf	4004,0,c	;volatile
 11461                           
 11462                           ;timer.c: 268: TMR5L = 0;
 11463  00270C  6A87               	clrf	3975,c	;volatile
 11464                           
 11465                           ;timer.c: 269: TMR5H = 0;
 11466  00270E  6A88               	clrf	3976,c	;volatile
 11467  002710  0012               	return		;funcret
 11468  002712                     __end_of_TIMER5_Off:
 11469                           	opt stack 0
 11470                           tblptru	equ	0xFF8
 11471                           tblptrh	equ	0xFF7
 11472                           tblptrl	equ	0xFF6
 11473                           tablat	equ	0xFF5
 11474                           prodh	equ	0xFF4
 11475                           prodl	equ	0xFF3
 11476                           intcon	equ	0xFF2
 11477                           intcon2	equ	0xFF1
 11478                           intcon3	equ	0xFF0
 11479                           postinc0	equ	0xFEE
 11480                           wreg	equ	0xFE8
 11481                           indf1	equ	0xFE7
 11482                           postdec1	equ	0xFE5
 11483                           fsr1h	equ	0xFE2
 11484                           fsr1l	equ	0xFE1
 11485                           indf2	equ	0xFDF
 11486                           postinc2	equ	0xFDE
 11487                           postdec2	equ	0xFDD
 11488                           fsr2h	equ	0xFDA
 11489                           fsr2l	equ	0xFD9
 11490                           status	equ	0xFD8
 11491                           
 11492 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 11493 ;; Defined at:
 11494 ;;		line 268 in file "interrupt.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;                  1    wreg      void 
 11501 ;; Registers used:
 11502 ;;		wreg, status,2, status,0, cstack
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11508 ;;      Params:         0       0       0       0
 11509 ;;      Locals:         0       0       0       0
 11510 ;;      Temps:          0       0       0       0
 11511 ;;      Totals:         0       0       0       0
 11512 ;;Total ram usage:        0 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:   11
 11515 ;; This function calls:
 11516 ;;		_Buzzer_Etat
 11517 ;;		_TIMER5_On
 11518 ;; This function is called by:
 11519 ;;		_IRQ_Execution
 11520 ;;		_Detection_Pion_On
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           	psect	text64
 11525  00244C                     __ptext64:
 11526                           	opt stack 0
 11527  00244C                     _IRQ_PION_Metal_Apparait:
 11528                           	opt stack 14
 11529                           
 11530                           ;interrupt.c: 270: Buzzer_Etat((unsigned char) 1);
 11531                           
 11532                           ;incstack = 0
 11533  00244C  0E01               	movlw	1
 11534  00244E  EC64  F013         	call	_Buzzer_Etat
 11535                           
 11536                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 11537  002452  92A4               	bcf	4004,1,c	;volatile
 11538                           
 11539                           ;interrupt.c: 273: PIR3bits.IC2QEIF = 0;
 11540  002454  94A4               	bcf	4004,2,c	;volatile
 11541                           
 11542                           ;interrupt.c: 274: if (PIE3bits.IC2QEIE == 1) {
 11543  002456  A4A3               	btfss	4003,2,c	;volatile
 11544  002458  D005               	goto	l577
 11545                           
 11546                           ;interrupt.c: 275: Alarme = 10;
 11547  00245A  0E0A               	movlw	10
 11548  00245C  0100               	movlb	0	; () banked
 11549  00245E  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 11550                           
 11551                           ;interrupt.c: 276: } else {
 11552  002460  EFB6  F013         	goto	_TIMER5_On
 11553  002464                     l577:
 11554                           
 11555                           ;interrupt.c: 278: PIE3bits.IC2QEIE = 1;
 11556  002464  84A3               	bsf	4003,2,c	;volatile
 11557                           
 11558                           ;interrupt.c: 279: }
 11559                           ;interrupt.c: 281: TIMER5_On();
 11560  002466  EFB6  F013         	goto	_TIMER5_On	;wreg free
 11561  00246A                     __end_of_IRQ_PION_Metal_Apparait:
 11562                           	opt stack 0
 11563                           tblptru	equ	0xFF8
 11564                           tblptrh	equ	0xFF7
 11565                           tblptrl	equ	0xFF6
 11566                           tablat	equ	0xFF5
 11567                           prodh	equ	0xFF4
 11568                           prodl	equ	0xFF3
 11569                           intcon	equ	0xFF2
 11570                           intcon2	equ	0xFF1
 11571                           intcon3	equ	0xFF0
 11572                           postinc0	equ	0xFEE
 11573                           wreg	equ	0xFE8
 11574                           indf1	equ	0xFE7
 11575                           postdec1	equ	0xFE5
 11576                           fsr1h	equ	0xFE2
 11577                           fsr1l	equ	0xFE1
 11578                           indf2	equ	0xFDF
 11579                           postinc2	equ	0xFDE
 11580                           postdec2	equ	0xFDD
 11581                           fsr2h	equ	0xFDA
 11582                           fsr2l	equ	0xFD9
 11583                           status	equ	0xFD8
 11584                           
 11585 ;; *************** function _TIMER5_On *****************
 11586 ;; Defined at:
 11587 ;;		line 253 in file "timer.c"
 11588 ;; Parameters:    Size  Location     Type
 11589 ;;		None
 11590 ;; Auto vars:     Size  Location     Type
 11591 ;;		None
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  1    wreg      void 
 11594 ;; Registers used:
 11595 ;;		None
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11601 ;;      Params:         0       0       0       0
 11602 ;;      Locals:         0       0       0       0
 11603 ;;      Temps:          0       0       0       0
 11604 ;;      Totals:         0       0       0       0
 11605 ;;Total ram usage:        0 bytes
 11606 ;; Hardware stack levels used:    1
 11607 ;; Hardware stack levels required when called:   10
 11608 ;; This function calls:
 11609 ;;		Nothing
 11610 ;; This function is called by:
 11611 ;;		_IRQ_PION_Metal_Apparait
 11612 ;; This function uses a non-reentrant model
 11613 ;;
 11614                           
 11615                           	psect	text65
 11616  00276C                     __ptext65:
 11617                           	opt stack 0
 11618  00276C                     _TIMER5_On:
 11619                           	opt stack 14
 11620                           
 11621                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 11622                           
 11623                           ;incstack = 0
 11624  00276C  80B7               	bsf	4023,0,c	;volatile
 11625  00276E  0012               	return		;funcret
 11626  002770                     __end_of_TIMER5_On:
 11627                           	opt stack 0
 11628                           tblptru	equ	0xFF8
 11629                           tblptrh	equ	0xFF7
 11630                           tblptrl	equ	0xFF6
 11631                           tablat	equ	0xFF5
 11632                           prodh	equ	0xFF4
 11633                           prodl	equ	0xFF3
 11634                           intcon	equ	0xFF2
 11635                           intcon2	equ	0xFF1
 11636                           intcon3	equ	0xFF0
 11637                           postinc0	equ	0xFEE
 11638                           wreg	equ	0xFE8
 11639                           indf1	equ	0xFE7
 11640                           postdec1	equ	0xFE5
 11641                           fsr1h	equ	0xFE2
 11642                           fsr1l	equ	0xFE1
 11643                           indf2	equ	0xFDF
 11644                           postinc2	equ	0xFDE
 11645                           postdec2	equ	0xFDD
 11646                           fsr2h	equ	0xFDA
 11647                           fsr2l	equ	0xFD9
 11648                           status	equ	0xFD8
 11649                           
 11650 ;; *************** function _Buzzer_Etat *****************
 11651 ;; Defined at:
 11652 ;;		line 29 in file "interrupt.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;  Activation      1    wreg     unsigned char 
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;  Activation      1   14[COMRAM] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      void 
 11659 ;; Registers used:
 11660 ;;		wreg, status,2, status,0
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/2
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11666 ;;      Params:         0       0       0       0
 11667 ;;      Locals:         1       0       0       0
 11668 ;;      Temps:          0       0       0       0
 11669 ;;      Totals:         1       0       0       0
 11670 ;;Total ram usage:        1 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:   10
 11673 ;; This function calls:
 11674 ;;		Nothing
 11675 ;; This function is called by:
 11676 ;;		_Cycle
 11677 ;;		_IRQ_PION_Metal_Apparait
 11678 ;;		_IRQ_PION_Metal_Disparait
 11679 ;;		_IRQ_TIMER_5
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           	psect	text66
 11684  0026C8                     __ptext66:
 11685                           	opt stack 0
 11686  0026C8                     _Buzzer_Etat:
 11687                           	opt stack 14
 11688                           
 11689                           ;incstack = 0
 11690                           ;Buzzer_Etat@Activation stored from wreg
 11691  0026C8  6E0F               	movwf	Buzzer_Etat@Activation,c
 11692                           
 11693                           ;interrupt.c: 30: if (Activation == 1) {
 11694  0026CA  040F               	decf	Buzzer_Etat@Activation,w,c
 11695  0026CC  E102               	bnz	l531
 11696                           
 11697                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 11698  0026CE  8C89               	bsf	3977,6,c	;volatile
 11699                           
 11700                           ;interrupt.c: 33: } else {
 11701  0026D0  0012               	return	
 11702  0026D2                     l531:
 11703                           
 11704                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 11705  0026D2  9C89               	bcf	3977,6,c	;volatile
 11706  0026D4  0012               	return		;funcret
 11707  0026D6                     __end_of_Buzzer_Etat:
 11708                           	opt stack 0
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           intcon2	equ	0xFF1
 11717                           intcon3	equ	0xFF0
 11718                           postinc0	equ	0xFEE
 11719                           wreg	equ	0xFE8
 11720                           indf1	equ	0xFE7
 11721                           postdec1	equ	0xFE5
 11722                           fsr1h	equ	0xFE2
 11723                           fsr1l	equ	0xFE1
 11724                           indf2	equ	0xFDF
 11725                           postinc2	equ	0xFDE
 11726                           postdec2	equ	0xFDD
 11727                           fsr2h	equ	0xFDA
 11728                           fsr2l	equ	0xFD9
 11729                           status	equ	0xFD8
 11730                           
 11731 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 11732 ;; Defined at:
 11733 ;;		line 909 in file "interrupt.c"
 11734 ;; Parameters:    Size  Location     Type
 11735 ;;		None
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;		None
 11738 ;; Return value:  Size  Location     Type
 11739 ;;                  1    wreg      void 
 11740 ;; Registers used:
 11741 ;;		wreg, status,2, status,0
 11742 ;; Tracked objects:
 11743 ;;		On entry : 0/2
 11744 ;;		On exit  : 0/0
 11745 ;;		Unchanged: 0/0
 11746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11747 ;;      Params:         0       0       0       0
 11748 ;;      Locals:         0       0       0       0
 11749 ;;      Temps:          0       0       0       0
 11750 ;;      Totals:         0       0       0       0
 11751 ;;Total ram usage:        0 bytes
 11752 ;; Hardware stack levels used:    1
 11753 ;; Hardware stack levels required when called:   10
 11754 ;; This function calls:
 11755 ;;		Nothing
 11756 ;; This function is called by:
 11757 ;;		_IRQ_Execution
 11758 ;; This function uses a non-reentrant model
 11759 ;;
 11760                           
 11761                           	psect	text67
 11762  002546                     __ptext67:
 11763                           	opt stack 0
 11764  002546                     _IRQ_I_MOTEUR_2:
 11765                           	opt stack 15
 11766                           
 11767                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 11768                           
 11769                           ;incstack = 0
 11770  002546  928B               	bcf	3979,1,c	;volatile
 11771                           
 11772                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 11773  002548  D001               	goto	l7400
 11774  00254A                     l699:
 11775  00254A  F000               	nop	
 11776  00254C                     l7400:
 11777  00254C  50CC               	movf	4044,w,c	;volatile
 11778  00254E  E1FD               	bnz	l699
 11779                           
 11780                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 11781  002550  828B               	bsf	3979,1,c	;volatile
 11782                           
 11783                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 11784  002552  748B               	btg	3979,2,c	;volatile
 11785                           
 11786                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 11787  002554  92F0               	bcf	intcon3,1,c	;volatile
 11788                           
 11789                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 11790  002556  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 11791  002558  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 11792  00255A  0012               	return		;funcret
 11793  00255C                     __end_of_IRQ_I_MOTEUR_2:
 11794                           	opt stack 0
 11795                           tblptru	equ	0xFF8
 11796                           tblptrh	equ	0xFF7
 11797                           tblptrl	equ	0xFF6
 11798                           tablat	equ	0xFF5
 11799                           prodh	equ	0xFF4
 11800                           prodl	equ	0xFF3
 11801                           intcon	equ	0xFF2
 11802                           intcon2	equ	0xFF1
 11803                           intcon3	equ	0xFF0
 11804                           postinc0	equ	0xFEE
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           postdec1	equ	0xFE5
 11808                           fsr1h	equ	0xFE2
 11809                           fsr1l	equ	0xFE1
 11810                           indf2	equ	0xFDF
 11811                           postinc2	equ	0xFDE
 11812                           postdec2	equ	0xFDD
 11813                           fsr2h	equ	0xFDA
 11814                           fsr2l	equ	0xFD9
 11815                           status	equ	0xFD8
 11816                           
 11817 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 11818 ;; Defined at:
 11819 ;;		line 895 in file "interrupt.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;		None
 11822 ;; Auto vars:     Size  Location     Type
 11823 ;;		None
 11824 ;; Return value:  Size  Location     Type
 11825 ;;                  1    wreg      void 
 11826 ;; Registers used:
 11827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11828 ;; Tracked objects:
 11829 ;;		On entry : 0/2
 11830 ;;		On exit  : 0/0
 11831 ;;		Unchanged: 0/0
 11832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11833 ;;      Params:         0       0       0       0
 11834 ;;      Locals:         0       0       0       0
 11835 ;;      Temps:          0       0       0       0
 11836 ;;      Totals:         0       0       0       0
 11837 ;;Total ram usage:        0 bytes
 11838 ;; Hardware stack levels used:    1
 11839 ;; Hardware stack levels required when called:   13
 11840 ;; This function calls:
 11841 ;;		_Alarme_On
 11842 ;; This function is called by:
 11843 ;;		_IRQ_Execution
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           	psect	text68
 11848  00255C                     __ptext68:
 11849                           	opt stack 0
 11850  00255C                     _IRQ_I_MOTEUR_1:
 11851                           	opt stack 12
 11852                           
 11853                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 11854                           
 11855                           ;incstack = 0
 11856  00255C  90F0               	bcf	intcon3,0,c	;volatile
 11857                           
 11858                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 11859  00255E  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 11860                           
 11861                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 11862  002560  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 11863  002562  A4D8               	btfss	status,2,c
 11864  002564  0012               	return	
 11865                           
 11866                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 11867  002566  848B               	bsf	3979,2,c	;volatile
 11868                           
 11869                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 11870  002568  908B               	bcf	3979,0,c	;volatile
 11871                           
 11872                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 11873  00256A  928B               	bcf	3979,1,c	;volatile
 11874                           
 11875                           ;interrupt.c: 904: Alarme_On(1);
 11876  00256C  0E01               	movlw	1
 11877  00256E  EF45  F013         	goto	_Alarme_On
 11878  002572                     __end_of_IRQ_I_MOTEUR_1:
 11879                           	opt stack 0
 11880                           tblptru	equ	0xFF8
 11881                           tblptrh	equ	0xFF7
 11882                           tblptrl	equ	0xFF6
 11883                           tablat	equ	0xFF5
 11884                           prodh	equ	0xFF4
 11885                           prodl	equ	0xFF3
 11886                           intcon	equ	0xFF2
 11887                           intcon2	equ	0xFF1
 11888                           intcon3	equ	0xFF0
 11889                           postinc0	equ	0xFEE
 11890                           wreg	equ	0xFE8
 11891                           indf1	equ	0xFE7
 11892                           postdec1	equ	0xFE5
 11893                           fsr1h	equ	0xFE2
 11894                           fsr1l	equ	0xFE1
 11895                           indf2	equ	0xFDF
 11896                           postinc2	equ	0xFDE
 11897                           postdec2	equ	0xFDD
 11898                           fsr2h	equ	0xFDA
 11899                           fsr2l	equ	0xFD9
 11900                           status	equ	0xFD8
 11901                           
 11902 ;; *************** function _IRQ_CAPOT *****************
 11903 ;; Defined at:
 11904 ;;		line 890 in file "interrupt.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;		None
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;		None
 11909 ;; Return value:  Size  Location     Type
 11910 ;;                  1    wreg      void 
 11911 ;; Registers used:
 11912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11913 ;; Tracked objects:
 11914 ;;		On entry : 0/2
 11915 ;;		On exit  : 0/0
 11916 ;;		Unchanged: 0/0
 11917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11918 ;;      Params:         0       0       0       0
 11919 ;;      Locals:         0       0       0       0
 11920 ;;      Temps:          0       0       0       0
 11921 ;;      Totals:         0       0       0       0
 11922 ;;Total ram usage:        0 bytes
 11923 ;; Hardware stack levels used:    1
 11924 ;; Hardware stack levels required when called:   13
 11925 ;; This function calls:
 11926 ;;		_Alarme_On
 11927 ;; This function is called by:
 11928 ;;		_IRQ_Execution
 11929 ;; This function uses a non-reentrant model
 11930 ;;
 11931                           
 11932                           	psect	text69
 11933  002724                     __ptext69:
 11934                           	opt stack 0
 11935  002724                     _IRQ_CAPOT:
 11936                           	opt stack 12
 11937                           
 11938                           ;interrupt.c: 891: INT0IF = 0;
 11939                           
 11940                           ;incstack = 0
 11941  002724  92F2               	bcf	intcon,1,c	;volatile
 11942                           
 11943                           ;interrupt.c: 892: Alarme_On(4);
 11944  002726  0E04               	movlw	4
 11945  002728  EF45  F013         	goto	_Alarme_On
 11946  00272C                     __end_of_IRQ_CAPOT:
 11947                           	opt stack 0
 11948                           tblptru	equ	0xFF8
 11949                           tblptrh	equ	0xFF7
 11950                           tblptrl	equ	0xFF6
 11951                           tablat	equ	0xFF5
 11952                           prodh	equ	0xFF4
 11953                           prodl	equ	0xFF3
 11954                           intcon	equ	0xFF2
 11955                           intcon2	equ	0xFF1
 11956                           intcon3	equ	0xFF0
 11957                           postinc0	equ	0xFEE
 11958                           wreg	equ	0xFE8
 11959                           indf1	equ	0xFE7
 11960                           postdec1	equ	0xFE5
 11961                           fsr1h	equ	0xFE2
 11962                           fsr1l	equ	0xFE1
 11963                           indf2	equ	0xFDF
 11964                           postinc2	equ	0xFDE
 11965                           postdec2	equ	0xFDD
 11966                           fsr2h	equ	0xFDA
 11967                           fsr2l	equ	0xFD9
 11968                           status	equ	0xFD8
 11969                           
 11970 ;; *************** function _Alarme_On *****************
 11971 ;; Defined at:
 11972 ;;		line 18 in file "alarme.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  alarme_new_v    1    wreg     unsigned char 
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  1    wreg      void 
 11979 ;; Registers used:
 11980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11986 ;;      Params:         0       0       0       0
 11987 ;;      Locals:         1       0       0       0
 11988 ;;      Temps:          0       0       0       0
 11989 ;;      Totals:         1       0       0       0
 11990 ;;Total ram usage:        1 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; Hardware stack levels required when called:   12
 11993 ;; This function calls:
 11994 ;;		_Coupe_Moteur
 11995 ;;		_Etat_Update
 11996 ;; This function is called by:
 11997 ;;		_Cycle
 11998 ;;		_IRQ_TIMER_5
 11999 ;;		_IRQ_CAPOT
 12000 ;;		_IRQ_I_MOTEUR_1
 12001 ;;		_Check_List_Moteur_1
 12002 ;;		_Check_List_Moteur_2
 12003 ;;		_Check_List_Moteur_Bequille
 12004 ;;		_EUSART1_RX_T3_LOCAL
 12005 ;; This function uses a non-reentrant model
 12006 ;;
 12007                           
 12008                           	psect	text70
 12009  00268A                     __ptext70:
 12010                           	opt stack 0
 12011  00268A                     _Alarme_On:
 12012                           	opt stack 12
 12013                           
 12014                           ;incstack = 0
 12015                           ;Alarme_On@alarme_new_value stored from wreg
 12016  00268A  6E10               	movwf	Alarme_On@alarme_new_value,c
 12017                           
 12018                           ;alarme.c: 22: Etat_Update(1);
 12019  00268C  0E01               	movlw	1
 12020  00268E  EC35  F012         	call	_Etat_Update
 12021                           
 12022                           ;alarme.c: 23: Alarme = alarme_new_value;
 12023  002692  C010  F0A9         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 12024                           
 12025                           ;alarme.c: 24: Coupe_Moteur();
 12026  002696  EFE3  F012         	goto	_Coupe_Moteur	;wreg free
 12027  00269A                     __end_of_Alarme_On:
 12028                           	opt stack 0
 12029                           tblptru	equ	0xFF8
 12030                           tblptrh	equ	0xFF7
 12031                           tblptrl	equ	0xFF6
 12032                           tablat	equ	0xFF5
 12033                           prodh	equ	0xFF4
 12034                           prodl	equ	0xFF3
 12035                           intcon	equ	0xFF2
 12036                           intcon2	equ	0xFF1
 12037                           intcon3	equ	0xFF0
 12038                           postinc0	equ	0xFEE
 12039                           wreg	equ	0xFE8
 12040                           indf1	equ	0xFE7
 12041                           postdec1	equ	0xFE5
 12042                           fsr1h	equ	0xFE2
 12043                           fsr1l	equ	0xFE1
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           fsr2h	equ	0xFDA
 12048                           fsr2l	equ	0xFD9
 12049                           status	equ	0xFD8
 12050                           
 12051 ;; *************** function _Etat_Update *****************
 12052 ;; Defined at:
 12053 ;;		line 74 in file "action.c"
 12054 ;; Parameters:    Size  Location     Type
 12055 ;;  etat_new_val    1    wreg     unsigned char 
 12056 ;; Auto vars:     Size  Location     Type
 12057 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 12058 ;; Return value:  Size  Location     Type
 12059 ;;                  1    wreg      void 
 12060 ;; Registers used:
 12061 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12062 ;; Tracked objects:
 12063 ;;		On entry : 0/0
 12064 ;;		On exit  : 0/0
 12065 ;;		Unchanged: 0/0
 12066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12067 ;;      Params:         0       0       0       0
 12068 ;;      Locals:         1       0       0       0
 12069 ;;      Temps:          0       0       0       0
 12070 ;;      Totals:         1       0       0       0
 12071 ;;Total ram usage:        1 bytes
 12072 ;; Hardware stack levels used:    1
 12073 ;; Hardware stack levels required when called:   10
 12074 ;; This function calls:
 12075 ;;		Nothing
 12076 ;; This function is called by:
 12077 ;;		_Cycle
 12078 ;;		_Capteur_Capot_On
 12079 ;;		_IRQ_TIMER_5
 12080 ;;		_Check_List_Moteur_2
 12081 ;;		_Check_List_Moteur_Bequille
 12082 ;;		_Mouvement_X
 12083 ;;		_EUSART1_RX_T3_LOCAL
 12084 ;;		_Alarme_On
 12085 ;; This function uses a non-reentrant model
 12086 ;;
 12087                           
 12088                           	psect	text71
 12089  00246A                     __ptext71:
 12090                           	opt stack 0
 12091  00246A                     _Etat_Update:
 12092                           	opt stack 14
 12093                           
 12094                           ;incstack = 0
 12095                           ;Etat_Update@etat_new_value stored from wreg
 12096  00246A  6E0F               	movwf	Etat_Update@etat_new_value,c
 12097                           
 12098                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 12099  00246C  504C               	movf	_Etat_Precedent_Index,w,c
 12100  00246E  0F6A               	addlw	low _Etat_Log
 12101  002470  6ED9               	movwf	fsr2l,c
 12102  002472  6ADA               	clrf	fsr2h,c
 12103  002474  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 12104                           
 12105                           ;action.c: 76: Etat = etat_new_value;
 12106  002478  C00F  F0AA         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 12107                           
 12108                           ;action.c: 77: Etat_Precedent_Index++;
 12109  00247C  2A4C               	incf	_Etat_Precedent_Index,f,c
 12110                           
 12111                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 12112  00247E  0E0A               	movlw	10
 12113  002480  184C               	xorwf	_Etat_Precedent_Index,w,c
 12114  002482  B4D8               	btfsc	status,2,c
 12115                           
 12116                           ;action.c: 79: Etat_Precedent_Index = 0;
 12117  002484  6A4C               	clrf	_Etat_Precedent_Index,c
 12118  002486  0012               	return		;funcret
 12119  002488                     __end_of_Etat_Update:
 12120                           	opt stack 0
 12121                           tblptru	equ	0xFF8
 12122                           tblptrh	equ	0xFF7
 12123                           tblptrl	equ	0xFF6
 12124                           tablat	equ	0xFF5
 12125                           prodh	equ	0xFF4
 12126                           prodl	equ	0xFF3
 12127                           intcon	equ	0xFF2
 12128                           intcon2	equ	0xFF1
 12129                           intcon3	equ	0xFF0
 12130                           postinc0	equ	0xFEE
 12131                           wreg	equ	0xFE8
 12132                           indf1	equ	0xFE7
 12133                           postdec1	equ	0xFE5
 12134                           fsr1h	equ	0xFE2
 12135                           fsr1l	equ	0xFE1
 12136                           indf2	equ	0xFDF
 12137                           postinc2	equ	0xFDE
 12138                           postdec2	equ	0xFDD
 12139                           fsr2h	equ	0xFDA
 12140                           fsr2l	equ	0xFD9
 12141                           status	equ	0xFD8
 12142                           
 12143 ;; *************** function _Coupe_Moteur *****************
 12144 ;; Defined at:
 12145 ;;		line 309 in file "action.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;		None
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;		None
 12150 ;; Return value:  Size  Location     Type
 12151 ;;                  1    wreg      void 
 12152 ;; Registers used:
 12153 ;;		cstack
 12154 ;; Tracked objects:
 12155 ;;		On entry : 0/0
 12156 ;;		On exit  : 0/0
 12157 ;;		Unchanged: 0/0
 12158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12159 ;;      Params:         0       0       0       0
 12160 ;;      Locals:         0       0       0       0
 12161 ;;      Temps:          0       0       0       0
 12162 ;;      Totals:         0       0       0       0
 12163 ;;Total ram usage:        0 bytes
 12164 ;; Hardware stack levels used:    1
 12165 ;; Hardware stack levels required when called:   11
 12166 ;; This function calls:
 12167 ;;		_TIMER2_Off
 12168 ;; This function is called by:
 12169 ;;		_Cycle
 12170 ;;		_Check_List_Moteur_1
 12171 ;;		_Check_List_Moteur_2
 12172 ;;		_Check_List_Moteur_Bequille
 12173 ;;		_Mouvement_Bequille
 12174 ;;		_Mouvement_Z
 12175 ;;		_Mouvement_X
 12176 ;;		_EUSART1_RX_T3_LOCAL
 12177 ;;		_Alarme_On
 12178 ;; This function uses a non-reentrant model
 12179 ;;
 12180                           
 12181                           	psect	text72
 12182  0025C6                     __ptext72:
 12183                           	opt stack 0
 12184  0025C6                     _Coupe_Moteur:
 12185                           	opt stack 12
 12186                           
 12187                           ;action.c: 310: TIMER2_Off();
 12188                           
 12189                           ;incstack = 0
 12190  0025C6  ECA4  F013         	call	_TIMER2_Off	;wreg free
 12191                           
 12192                           ;action.c: 322: LATCbits.LATC0 = 0;
 12193  0025CA  908B               	bcf	3979,0,c	;volatile
 12194                           
 12195                           ;action.c: 323: LATCbits.LATC1 = 0;
 12196  0025CC  928B               	bcf	3979,1,c	;volatile
 12197                           
 12198                           ;action.c: 324: OVDCOND = 0b00000000;
 12199  0025CE  6A6B               	clrf	3947,c	;volatile
 12200                           
 12201                           ;action.c: 325: LATD4 = 0;LATD5 = 0;
 12202  0025D0  988C               	bcf	3980,4,c	;volatile
 12203  0025D2  9A8C               	bcf	3980,5,c	;volatile
 12204                           
 12205                           ;action.c: 326: LATD6 = 0;LATD7 = 0;
 12206  0025D4  9C8C               	bcf	3980,6,c	;volatile
 12207  0025D6  9E8C               	bcf	3980,7,c	;volatile
 12208  0025D8  0012               	return		;funcret
 12209  0025DA                     __end_of_Coupe_Moteur:
 12210                           	opt stack 0
 12211                           tblptru	equ	0xFF8
 12212                           tblptrh	equ	0xFF7
 12213                           tblptrl	equ	0xFF6
 12214                           tablat	equ	0xFF5
 12215                           prodh	equ	0xFF4
 12216                           prodl	equ	0xFF3
 12217                           intcon	equ	0xFF2
 12218                           intcon2	equ	0xFF1
 12219                           intcon3	equ	0xFF0
 12220                           postinc0	equ	0xFEE
 12221                           wreg	equ	0xFE8
 12222                           indf1	equ	0xFE7
 12223                           postdec1	equ	0xFE5
 12224                           fsr1h	equ	0xFE2
 12225                           fsr1l	equ	0xFE1
 12226                           indf2	equ	0xFDF
 12227                           postinc2	equ	0xFDE
 12228                           postdec2	equ	0xFDD
 12229                           fsr2h	equ	0xFDA
 12230                           fsr2l	equ	0xFD9
 12231                           status	equ	0xFD8
 12232                           
 12233 ;; *************** function _TIMER2_Off *****************
 12234 ;; Defined at:
 12235 ;;		line 165 in file "timer.c"
 12236 ;; Parameters:    Size  Location     Type
 12237 ;;		None
 12238 ;; Auto vars:     Size  Location     Type
 12239 ;;		None
 12240 ;; Return value:  Size  Location     Type
 12241 ;;                  1    wreg      void 
 12242 ;; Registers used:
 12243 ;;		None
 12244 ;; Tracked objects:
 12245 ;;		On entry : 0/0
 12246 ;;		On exit  : 0/0
 12247 ;;		Unchanged: 0/0
 12248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12249 ;;      Params:         0       0       0       0
 12250 ;;      Locals:         0       0       0       0
 12251 ;;      Temps:          0       0       0       0
 12252 ;;      Totals:         0       0       0       0
 12253 ;;Total ram usage:        0 bytes
 12254 ;; Hardware stack levels used:    1
 12255 ;; Hardware stack levels required when called:   10
 12256 ;; This function calls:
 12257 ;;		Nothing
 12258 ;; This function is called by:
 12259 ;;		_Coupe_Moteur
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           	psect	text73
 12264  002748                     __ptext73:
 12265                           	opt stack 0
 12266  002748                     _TIMER2_Off:
 12267                           	opt stack 12
 12268                           
 12269                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 12270                           
 12271                           ;incstack = 0
 12272  002748  929D               	bcf	3997,1,c	;volatile
 12273                           
 12274                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 12275  00274A  929E               	bcf	3998,1,c	;volatile
 12276  00274C  0012               	return		;funcret
 12277  00274E                     __end_of_TIMER2_Off:
 12278                           	opt stack 0
 12279                           tblptru	equ	0xFF8
 12280                           tblptrh	equ	0xFF7
 12281                           tblptrl	equ	0xFF6
 12282                           tablat	equ	0xFF5
 12283                           prodh	equ	0xFF4
 12284                           prodl	equ	0xFF3
 12285                           intcon	equ	0xFF2
 12286                           intcon2	equ	0xFF1
 12287                           intcon3	equ	0xFF0
 12288                           postinc0	equ	0xFEE
 12289                           wreg	equ	0xFE8
 12290                           indf1	equ	0xFE7
 12291                           postdec1	equ	0xFE5
 12292                           fsr1h	equ	0xFE2
 12293                           fsr1l	equ	0xFE1
 12294                           indf2	equ	0xFDF
 12295                           postinc2	equ	0xFDE
 12296                           postdec2	equ	0xFDD
 12297                           fsr2h	equ	0xFDA
 12298                           fsr2l	equ	0xFD9
 12299                           status	equ	0xFD8
 12300                           
 12301 ;; *************** function _IRQ_ADC *****************
 12302 ;; Defined at:
 12303 ;;		line 486 in file "interrupt.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;		None
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;		None
 12308 ;; Return value:  Size  Location     Type
 12309 ;;                  1    wreg      void 
 12310 ;; Registers used:
 12311 ;;		wreg, status,2, status,0
 12312 ;; Tracked objects:
 12313 ;;		On entry : 0/2
 12314 ;;		On exit  : 3F/0
 12315 ;;		Unchanged: 0/0
 12316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12317 ;;      Params:         0       0       0       0
 12318 ;;      Locals:         0       0       0       0
 12319 ;;      Temps:          3       0       0       0
 12320 ;;      Totals:         3       0       0       0
 12321 ;;Total ram usage:        3 bytes
 12322 ;; Hardware stack levels used:    1
 12323 ;; Hardware stack levels required when called:   10
 12324 ;; This function calls:
 12325 ;;		Nothing
 12326 ;; This function is called by:
 12327 ;;		_IRQ_Execution
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           	psect	text74
 12332  000E14                     __ptext74:
 12333                           	opt stack 0
 12334  000E14                     _IRQ_ADC:
 12335                           	opt stack 15
 12336                           
 12337                           ;interrupt.c: 487: switch (moteur_indice) {
 12338                           
 12339                           ;incstack = 0
 12340  000E14  D0C7               	goto	l7564
 12341  000E16                     l622:
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 12345  000E16  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 12346                           
 12347                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 12348  000E1A  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12349                           
 12350                           ;interrupt.c: 492: ADIF = 0;
 12351  000E1C  9C9E               	bcf	3998,6,c	;volatile
 12352                           
 12353                           ; BSR set to: 0
 12354                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 12355  000E1E  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 12356  000E20  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12357  000E22  6F84               	movwf	_erreur& (0+255),b	;volatile
 12358  000E24  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12359  000E26  A0D8               	btfss	status,0,c
 12360  000E28  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12361                           
 12362                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 12363  000E2A  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12364  000E2C  D008               	goto	l7514
 12365  000E2E  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12366  000E30  E103               	bnz	u5630
 12367  000E32  0E0A               	movlw	10
 12368  000E34  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12369  000E36  E303               	bnc	l7514
 12370  000E38                     u5630:
 12371                           
 12372                           ; BSR set to: 0
 12373  000E38  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12374  000E3A  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12375  000E3C  D006               	goto	l624
 12376  000E3E                     l7514:
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 12380  000E3E  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12381  000E40  D004               	goto	l624
 12382                           
 12383                           ; BSR set to: 0
 12384  000E42  5184               	movf	_erreur& (0+255),w,b	;volatile
 12385  000E44  2786               	addwf	_duty& (0+255),f,b	;volatile
 12386  000E46  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12387  000E48  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 12388  000E4A                     l624:
 12389                           
 12390                           ; BSR set to: 0
 12391                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 12392  000E4A  507B               	movf	3963,w,c	;volatile
 12393  000E4C  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12394  000E4E  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12395  000E50  5186               	movf	_duty& (0+255),w,b	;volatile
 12396  000E52  5C0F               	subwf	??_IRQ_ADC,w,c
 12397  000E54  5010               	movf	??_IRQ_ADC+1,w,c
 12398  000E56  0A80               	xorlw	128
 12399  000E58  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12400  000E5A  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12401  000E5C  0A80               	xorlw	128
 12402  000E5E  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12403  000E60  E203               	bc	l7520
 12404                           
 12405                           ; BSR set to: 0
 12406  000E62  CF7B F086          	movff	3963,_duty	;volatile
 12407  000E66  D003               	goto	L2
 12408  000E68                     l7520:
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 12412  000E68  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12413  000E6A  D002               	goto	l7524
 12414                           
 12415                           ; BSR set to: 0
 12416  000E6C  6B86               	clrf	_duty& (0+255),b	;volatile
 12417  000E6E                     L2:
 12418  000E6E  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12419  000E70                     l7524:
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 12423  000E70  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12424  000E72  46E8               	rlncf	wreg,f,c
 12425  000E74  0BFC               	andlw	252
 12426  000E76  6E79               	movwf	3961,c	;volatile
 12427                           
 12428                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 12429  000E78  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12430  000E7C  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12431  000E80  90D8               	bcf	status,0,c
 12432  000E82  360F               	rlcf	??_IRQ_ADC,f,c
 12433  000E84  3610               	rlcf	??_IRQ_ADC+1,f,c
 12434  000E86  90D8               	bcf	status,0,c
 12435  000E88  360F               	rlcf	??_IRQ_ADC,f,c
 12436  000E8A  3610               	rlcf	??_IRQ_ADC+1,f,c
 12437  000E8C  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12438  000E90  6A10               	clrf	??_IRQ_ADC+1,c
 12439  000E92  BE0F               	btfsc	??_IRQ_ADC,7,c
 12440  000E94  6810               	setf	??_IRQ_ADC+1,c
 12441  000E96  500F               	movf	??_IRQ_ADC,w,c
 12442  000E98  6E78               	movwf	3960,c	;volatile
 12443                           
 12444                           ;interrupt.c: 508: break;
 12445  000E9A  0012               	return	
 12446  000E9C                     l630:
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 12450  000E9C  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12451                           
 12452                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 12453  000EA0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12454                           
 12455                           ;interrupt.c: 518: ADIF = 0;
 12456  000EA2  9C9E               	bcf	3998,6,c	;volatile
 12457                           
 12458                           ; BSR set to: 0
 12459                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 12460  000EA4  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12461  000EA6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12462  000EA8  6F84               	movwf	_erreur& (0+255),b	;volatile
 12463  000EAA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12464  000EAC  A0D8               	btfss	status,0,c
 12465  000EAE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12466                           
 12467                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 12468  000EB0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12469  000EB2  D008               	goto	l7530
 12470  000EB4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12471  000EB6  E103               	bnz	u5670
 12472  000EB8  0E0A               	movlw	10
 12473  000EBA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12474  000EBC  E303               	bnc	l7530
 12475  000EBE                     u5670:
 12476                           
 12477                           ; BSR set to: 0
 12478  000EBE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12479  000EC0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12480  000EC2  D005               	goto	l7534
 12481  000EC4                     l7530:
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 12485  000EC4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12486  000EC6  D003               	goto	l7534
 12487                           
 12488                           ; BSR set to: 0
 12489  000EC8  0786               	decf	_duty& (0+255),f,b	;volatile
 12490  000ECA  A0D8               	btfss	status,0,c
 12491  000ECC  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12492  000ECE                     l7534:
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 12496  000ECE  507B               	movf	3963,w,c	;volatile
 12497  000ED0  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12498  000ED2  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12499  000ED4  5186               	movf	_duty& (0+255),w,b	;volatile
 12500  000ED6  5C0F               	subwf	??_IRQ_ADC,w,c
 12501  000ED8  5010               	movf	??_IRQ_ADC+1,w,c
 12502  000EDA  0A80               	xorlw	128
 12503  000EDC  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12504  000EDE  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12505  000EE0  0A80               	xorlw	128
 12506  000EE2  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12507  000EE4  E203               	bc	l7538
 12508                           
 12509                           ; BSR set to: 0
 12510  000EE6  CF7B F086          	movff	3963,_duty	;volatile
 12511  000EEA  D003               	goto	L3
 12512  000EEC                     l7538:
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 12516  000EEC  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12517  000EEE  D002               	goto	l7542
 12518                           
 12519                           ; BSR set to: 0
 12520  000EF0  6B86               	clrf	_duty& (0+255),b	;volatile
 12521  000EF2                     L3:
 12522  000EF2  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12523  000EF4                     l7542:
 12524                           
 12525                           ; BSR set to: 0
 12526                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 12527  000EF4  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12528  000EF6  46E8               	rlncf	wreg,f,c
 12529  000EF8  0BFC               	andlw	252
 12530  000EFA  6E77               	movwf	3959,c	;volatile
 12531                           
 12532                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 12533  000EFC  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12534  000F00  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12535  000F04  90D8               	bcf	status,0,c
 12536  000F06  360F               	rlcf	??_IRQ_ADC,f,c
 12537  000F08  3610               	rlcf	??_IRQ_ADC+1,f,c
 12538  000F0A  90D8               	bcf	status,0,c
 12539  000F0C  360F               	rlcf	??_IRQ_ADC,f,c
 12540  000F0E  3610               	rlcf	??_IRQ_ADC+1,f,c
 12541  000F10  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12542  000F14  6A10               	clrf	??_IRQ_ADC+1,c
 12543  000F16  BE0F               	btfsc	??_IRQ_ADC,7,c
 12544  000F18  6810               	setf	??_IRQ_ADC+1,c
 12545  000F1A  500F               	movf	??_IRQ_ADC,w,c
 12546  000F1C  6E76               	movwf	3958,c	;volatile
 12547                           
 12548                           ;interrupt.c: 532: break;
 12549  000F1E  0012               	return	
 12550  000F20                     l637:
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 12554  000F20  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12555                           
 12556                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 12557  000F24  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12558                           
 12559                           ;interrupt.c: 539: ADIF = 0;
 12560  000F26  9C9E               	bcf	3998,6,c	;volatile
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 12564  000F28  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12565  000F2A  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12566  000F2C  6F84               	movwf	_erreur& (0+255),b	;volatile
 12567  000F2E  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12568  000F30  A0D8               	btfss	status,0,c
 12569  000F32  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12570                           
 12571                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 12572  000F34  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12573  000F36  D008               	goto	l7548
 12574  000F38  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12575  000F3A  E103               	bnz	u5710
 12576  000F3C  0E0A               	movlw	10
 12577  000F3E  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12578  000F40  E303               	bnc	l7548
 12579  000F42                     u5710:
 12580                           
 12581                           ; BSR set to: 0
 12582  000F42  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12583  000F44  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12584  000F46  D005               	goto	l7552
 12585  000F48                     l7548:
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 12589  000F48  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12590  000F4A  D003               	goto	l7552
 12591                           
 12592                           ; BSR set to: 0
 12593  000F4C  0786               	decf	_duty& (0+255),f,b	;volatile
 12594  000F4E  A0D8               	btfss	status,0,c
 12595  000F50  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12596  000F52                     l7552:
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 12600  000F52  507B               	movf	3963,w,c	;volatile
 12601  000F54  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12602  000F56  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12603  000F58  5186               	movf	_duty& (0+255),w,b	;volatile
 12604  000F5A  5C0F               	subwf	??_IRQ_ADC,w,c
 12605  000F5C  5010               	movf	??_IRQ_ADC+1,w,c
 12606  000F5E  0A80               	xorlw	128
 12607  000F60  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12608  000F62  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12609  000F64  0A80               	xorlw	128
 12610  000F66  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12611  000F68  E203               	bc	l7556
 12612                           
 12613                           ; BSR set to: 0
 12614  000F6A  CF7B F086          	movff	3963,_duty	;volatile
 12615  000F6E  D003               	goto	L4
 12616  000F70                     l7556:
 12617                           
 12618                           ; BSR set to: 0
 12619                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 12620  000F70  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12621  000F72  D002               	goto	l7560
 12622                           
 12623                           ; BSR set to: 0
 12624  000F74  6B86               	clrf	_duty& (0+255),b	;volatile
 12625  000F76                     L4:
 12626  000F76  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12627  000F78                     l7560:
 12628                           
 12629                           ; BSR set to: 0
 12630                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 12631  000F78  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12632  000F7A  46E8               	rlncf	wreg,f,c
 12633  000F7C  0BFC               	andlw	252
 12634  000F7E  6E77               	movwf	3959,c	;volatile
 12635                           
 12636                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 12637  000F80  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12638  000F84  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12639  000F88  90D8               	bcf	status,0,c
 12640  000F8A  360F               	rlcf	??_IRQ_ADC,f,c
 12641  000F8C  3610               	rlcf	??_IRQ_ADC+1,f,c
 12642  000F8E  90D8               	bcf	status,0,c
 12643  000F90  360F               	rlcf	??_IRQ_ADC,f,c
 12644  000F92  3610               	rlcf	??_IRQ_ADC+1,f,c
 12645  000F94  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12646  000F98  6A10               	clrf	??_IRQ_ADC+1,c
 12647  000F9A  BE0F               	btfsc	??_IRQ_ADC,7,c
 12648  000F9C  6810               	setf	??_IRQ_ADC+1,c
 12649  000F9E  500F               	movf	??_IRQ_ADC,w,c
 12650  000FA0  6E76               	movwf	3958,c	;volatile
 12651                           
 12652                           ;interrupt.c: 553: break;
 12653  000FA2  0012               	return	
 12654  000FA4                     l7564:
 12655  000FA4  0100               	movlb	0	; () banked
 12656  000FA6  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 12657                           
 12658                           ; Switch size 1, requested type "speed"
 12659                           ; Number of cases is 3, Range of values is 1 to 3
 12660                           ; switch strategies available:
 12661                           ; Name         Instructions Cycles
 12662                           ; simple_byte           10     6 (average)
 12663                           ;	Chosen strategy is simple_byte
 12664  000FA8  0A01               	xorlw	1	; case 1
 12665  000FAA  E101 D734          	bz	l622
 12666  000FAE  0A03               	xorlw	3	; case 2
 12667  000FB0  E101 D774          	bz	l630
 12668  000FB4  0A01               	xorlw	1	; case 3
 12669  000FB6  E0B4               	bz	l637
 12670                           
 12671                           ; BSR set to: 0
 12672  000FB8  0012               	return		;funcret
 12673  000FBA                     __end_of_IRQ_ADC:
 12674                           	opt stack 0
 12675                           tblptru	equ	0xFF8
 12676                           tblptrh	equ	0xFF7
 12677                           tblptrl	equ	0xFF6
 12678                           tablat	equ	0xFF5
 12679                           prodh	equ	0xFF4
 12680                           prodl	equ	0xFF3
 12681                           intcon	equ	0xFF2
 12682                           intcon2	equ	0xFF1
 12683                           intcon3	equ	0xFF0
 12684                           postinc0	equ	0xFEE
 12685                           wreg	equ	0xFE8
 12686                           indf1	equ	0xFE7
 12687                           postdec1	equ	0xFE5
 12688                           fsr1h	equ	0xFE2
 12689                           fsr1l	equ	0xFE1
 12690                           indf2	equ	0xFDF
 12691                           postinc2	equ	0xFDE
 12692                           postdec2	equ	0xFDD
 12693                           fsr2h	equ	0xFDA
 12694                           fsr2l	equ	0xFD9
 12695                           status	equ	0xFD8
 12696                           
 12697 ;; *************** function _Etat_Intitule *****************
 12698 ;; Defined at:
 12699 ;;		line 29 in file "action.c"
 12700 ;; Parameters:    Size  Location     Type
 12701 ;;  Etat_Number     1    wreg     unsigned char 
 12702 ;; Auto vars:     Size  Location     Type
 12703 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 12704 ;; Return value:  Size  Location     Type
 12705 ;;                  1    wreg      unsigned char 
 12706 ;; Registers used:
 12707 ;;		wreg, status,2, status,0
 12708 ;; Tracked objects:
 12709 ;;		On entry : 0/1
 12710 ;;		On exit  : 0/0
 12711 ;;		Unchanged: 0/0
 12712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12713 ;;      Params:         0       0       0       0
 12714 ;;      Locals:         1       0       0       0
 12715 ;;      Temps:          0       0       0       0
 12716 ;;      Totals:         1       0       0       0
 12717 ;;Total ram usage:        1 bytes
 12718 ;; Hardware stack levels used:    1
 12719 ;; Hardware stack levels required when called:   10
 12720 ;; This function calls:
 12721 ;;		Nothing
 12722 ;; This function is called by:
 12723 ;;		_EUSART1_RX_T3_LOCAL
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           	psect	text75
 12728  0021FA                     __ptext75:
 12729                           	opt stack 0
 12730  0021FA                     _Etat_Intitule:
 12731                           	opt stack 16
 12732                           
 12733                           ; BSR set to: 0
 12734                           ;incstack = 0
 12735                           ;Etat_Intitule@Etat_Number stored from wreg
 12736  0021FA  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 12737                           
 12738                           ;action.c: 31: switch (Etat_Number) {
 12739  0021FC  500F               	movf	Etat_Intitule@Etat_Number,w,c
 12740                           
 12741                           ; Switch size 1, requested type "speed"
 12742                           ; Number of cases is 8, Range of values is 0 to 255
 12743                           ; switch strategies available:
 12744                           ; Name         Instructions Cycles
 12745                           ; simple_byte           25    13 (average)
 12746                           ;	Chosen strategy is simple_byte
 12747  0021FE  B4D8               	btfsc	status,2,c
 12748  002200  0C49               	retlw	73
 12749  002202  0A01               	xorlw	1	; case 1
 12750  002204  B4D8               	btfsc	status,2,c
 12751  002206  0C21               	retlw	33
 12752  002208  0A03               	xorlw	3	; case 2
 12753  00220A  B4D8               	btfsc	status,2,c
 12754  00220C  0C41               	retlw	65
 12755  00220E  0A01               	xorlw	1	; case 3
 12756  002210  B4D8               	btfsc	status,2,c
 12757  002212  0C52               	retlw	82
 12758  002214  0A07               	xorlw	7	; case 4
 12759  002216  B4D8               	btfsc	status,2,c
 12760  002218  0C4C               	retlw	76
 12761  00221A  0A01               	xorlw	1	; case 5
 12762  00221C  B4D8               	btfsc	status,2,c
 12763  00221E  0C42               	retlw	66
 12764  002220  0A03               	xorlw	3	; case 6
 12765  002222  B4D8               	btfsc	status,2,c
 12766  002224  0C50               	retlw	80
 12767  002226  0AF9               	xorlw	249	; case 255
 12768  002228  B4D8               	btfsc	status,2,c
 12769  00222A  0C48               	retlw	72
 12770  00222C  0C20               	retlw	32
 12771  00222E                     __end_of_Etat_Intitule:
 12772                           	opt stack 0
 12773                           tblptru	equ	0xFF8
 12774                           tblptrh	equ	0xFF7
 12775                           tblptrl	equ	0xFF6
 12776                           tablat	equ	0xFF5
 12777                           prodh	equ	0xFF4
 12778                           prodl	equ	0xFF3
 12779                           intcon	equ	0xFF2
 12780                           intcon2	equ	0xFF1
 12781                           intcon3	equ	0xFF0
 12782                           postinc0	equ	0xFEE
 12783                           wreg	equ	0xFE8
 12784                           indf1	equ	0xFE7
 12785                           postdec1	equ	0xFE5
 12786                           fsr1h	equ	0xFE2
 12787                           fsr1l	equ	0xFE1
 12788                           indf2	equ	0xFDF
 12789                           postinc2	equ	0xFDE
 12790                           postdec2	equ	0xFDD
 12791                           fsr2h	equ	0xFDA
 12792                           fsr2l	equ	0xFD9
 12793                           status	equ	0xFD8
 12794                           
 12795 ;; *************** function _Etat_Get *****************
 12796 ;; Defined at:
 12797 ;;		line 49 in file "action.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;  Etat_Indice     1    wreg     unsigned char 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 12802 ;; Return value:  Size  Location     Type
 12803 ;;                  1    wreg      unsigned char 
 12804 ;; Registers used:
 12805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12806 ;; Tracked objects:
 12807 ;;		On entry : 0/0
 12808 ;;		On exit  : 0/0
 12809 ;;		Unchanged: 0/0
 12810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12811 ;;      Params:         0       0       0       0
 12812 ;;      Locals:         1       0       0       0
 12813 ;;      Temps:          2       0       0       0
 12814 ;;      Totals:         3       0       0       0
 12815 ;;Total ram usage:        3 bytes
 12816 ;; Hardware stack levels used:    1
 12817 ;; Hardware stack levels required when called:   11
 12818 ;; This function calls:
 12819 ;;		___awmod
 12820 ;; This function is called by:
 12821 ;;		_Cycle
 12822 ;;		_EUSART1_RX_T3_LOCAL
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text76
 12827  00222E                     __ptext76:
 12828                           	opt stack 0
 12829  00222E                     _Etat_Get:
 12830                           	opt stack 15
 12831                           
 12832                           ;incstack = 0
 12833                           ;Etat_Get@Etat_Indice stored from wreg
 12834  00222E  6E17               	movwf	Etat_Get@Etat_Indice,c
 12835                           
 12836                           ;action.c: 62: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 12837  002230  5017               	movf	Etat_Get@Etat_Indice,w,c
 12838  002232  C04C  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 12839  002236  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 12840  002238  5E15               	subwf	??_Etat_Get,f,c
 12841  00223A  0E00               	movlw	0
 12842  00223C  5A16               	subwfb	??_Etat_Get+1,f,c
 12843  00223E  0E09               	movlw	9
 12844  002240  2415               	addwf	??_Etat_Get,w,c
 12845  002242  6E0F               	movwf	___awmod@dividend,c
 12846  002244  0E00               	movlw	0
 12847  002246  2016               	addwfc	??_Etat_Get+1,w,c
 12848  002248  6E10               	movwf	___awmod@dividend+1,c
 12849  00224A  6A12               	clrf	___awmod@divisor+1,c
 12850  00224C  0E0A               	movlw	10
 12851  00224E  6E11               	movwf	___awmod@divisor,c
 12852  002250  EC1C  F00E         	call	___awmod	;wreg free
 12853  002254  500F               	movf	?___awmod,w,c
 12854  002256  0F6A               	addlw	low _Etat_Log
 12855  002258  6ED9               	movwf	fsr2l,c
 12856  00225A  6ADA               	clrf	fsr2h,c
 12857  00225C  50DF               	movf	indf2,w,c
 12858  00225E  0012               	return		;funcret
 12859  002260                     __end_of_Etat_Get:
 12860                           	opt stack 0
 12861                           tblptru	equ	0xFF8
 12862                           tblptrh	equ	0xFF7
 12863                           tblptrl	equ	0xFF6
 12864                           tablat	equ	0xFF5
 12865                           prodh	equ	0xFF4
 12866                           prodl	equ	0xFF3
 12867                           intcon	equ	0xFF2
 12868                           intcon2	equ	0xFF1
 12869                           intcon3	equ	0xFF0
 12870                           postinc0	equ	0xFEE
 12871                           wreg	equ	0xFE8
 12872                           indf1	equ	0xFE7
 12873                           postdec1	equ	0xFE5
 12874                           fsr1h	equ	0xFE2
 12875                           fsr1l	equ	0xFE1
 12876                           indf2	equ	0xFDF
 12877                           postinc2	equ	0xFDE
 12878                           postdec2	equ	0xFDD
 12879                           fsr2h	equ	0xFDA
 12880                           fsr2l	equ	0xFD9
 12881                           status	equ	0xFD8
 12882                           
 12883 ;; *************** function ___awmod *****************
 12884 ;; Defined at:
 12885 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 12886 ;; Parameters:    Size  Location     Type
 12887 ;;  dividend        2   14[COMRAM] int 
 12888 ;;  divisor         2   16[COMRAM] int 
 12889 ;; Auto vars:     Size  Location     Type
 12890 ;;  sign            1   19[COMRAM] unsigned char 
 12891 ;;  counter         1   18[COMRAM] unsigned char 
 12892 ;; Return value:  Size  Location     Type
 12893 ;;                  2   14[COMRAM] int 
 12894 ;; Registers used:
 12895 ;;		wreg, status,2, status,0
 12896 ;; Tracked objects:
 12897 ;;		On entry : 0/1
 12898 ;;		On exit  : 0/0
 12899 ;;		Unchanged: 0/0
 12900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12901 ;;      Params:         4       0       0       0
 12902 ;;      Locals:         2       0       0       0
 12903 ;;      Temps:          0       0       0       0
 12904 ;;      Totals:         6       0       0       0
 12905 ;;Total ram usage:        6 bytes
 12906 ;; Hardware stack levels used:    1
 12907 ;; Hardware stack levels required when called:   10
 12908 ;; This function calls:
 12909 ;;		Nothing
 12910 ;; This function is called by:
 12911 ;;		_Etat_Get
 12912 ;;		_EUSART1_RX_T3_LOCAL
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           	psect	text77
 12917  001C38                     __ptext77:
 12918                           	opt stack 0
 12919  001C38                     ___awmod:
 12920                           	opt stack 16
 12921                           
 12922                           ;incstack = 0
 12923  001C38  6A14               	clrf	___awmod@sign,c
 12924  001C3A  AE10               	btfss	___awmod@dividend+1,7,c
 12925  001C3C  D006               	goto	l7596
 12926  001C3E  6C0F               	negf	___awmod@dividend,c
 12927  001C40  1E10               	comf	___awmod@dividend+1,f,c
 12928  001C42  B0D8               	btfsc	status,0,c
 12929  001C44  2A10               	incf	___awmod@dividend+1,f,c
 12930  001C46  0E01               	movlw	1
 12931  001C48  6E14               	movwf	___awmod@sign,c
 12932  001C4A                     l7596:
 12933  001C4A  AE12               	btfss	___awmod@divisor+1,7,c
 12934  001C4C  D004               	goto	l7600
 12935  001C4E  6C11               	negf	___awmod@divisor,c
 12936  001C50  1E12               	comf	___awmod@divisor+1,f,c
 12937  001C52  B0D8               	btfsc	status,0,c
 12938  001C54  2A12               	incf	___awmod@divisor+1,f,c
 12939  001C56                     l7600:
 12940  001C56  5011               	movf	___awmod@divisor,w,c
 12941  001C58  1012               	iorwf	___awmod@divisor+1,w,c
 12942  001C5A  E017               	bz	l7616
 12943  001C5C  0E01               	movlw	1
 12944  001C5E  6E13               	movwf	___awmod@counter,c
 12945  001C60  D004               	goto	l7606
 12946  001C62                     l7604:
 12947  001C62  90D8               	bcf	status,0,c
 12948  001C64  3611               	rlcf	___awmod@divisor,f,c
 12949  001C66  3612               	rlcf	___awmod@divisor+1,f,c
 12950  001C68  2A13               	incf	___awmod@counter,f,c
 12951  001C6A                     l7606:
 12952  001C6A  AE12               	btfss	___awmod@divisor+1,7,c
 12953  001C6C  D7FA               	goto	l7604
 12954  001C6E                     l7608:
 12955  001C6E  5011               	movf	___awmod@divisor,w,c
 12956  001C70  5C0F               	subwf	___awmod@dividend,w,c
 12957  001C72  5012               	movf	___awmod@divisor+1,w,c
 12958  001C74  5810               	subwfb	___awmod@dividend+1,w,c
 12959  001C76  E304               	bnc	l7612
 12960  001C78  5011               	movf	___awmod@divisor,w,c
 12961  001C7A  5E0F               	subwf	___awmod@dividend,f,c
 12962  001C7C  5012               	movf	___awmod@divisor+1,w,c
 12963  001C7E  5A10               	subwfb	___awmod@dividend+1,f,c
 12964  001C80                     l7612:
 12965  001C80  90D8               	bcf	status,0,c
 12966  001C82  3212               	rrcf	___awmod@divisor+1,f,c
 12967  001C84  3211               	rrcf	___awmod@divisor,f,c
 12968  001C86  2E13               	decfsz	___awmod@counter,f,c
 12969  001C88  D7F2               	goto	l7608
 12970  001C8A                     l7616:
 12971  001C8A  5014               	movf	___awmod@sign,w,c
 12972  001C8C  E004               	bz	l7620
 12973  001C8E  6C0F               	negf	___awmod@dividend,c
 12974  001C90  1E10               	comf	___awmod@dividend+1,f,c
 12975  001C92  B0D8               	btfsc	status,0,c
 12976  001C94  2A10               	incf	___awmod@dividend+1,f,c
 12977  001C96                     l7620:
 12978  001C96  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12979  001C9A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12980  001C9E  0012               	return		;funcret
 12981  001CA0                     __end_of___awmod:
 12982                           	opt stack 0
 12983                           tblptru	equ	0xFF8
 12984                           tblptrh	equ	0xFF7
 12985                           tblptrl	equ	0xFF6
 12986                           tablat	equ	0xFF5
 12987                           prodh	equ	0xFF4
 12988                           prodl	equ	0xFF3
 12989                           intcon	equ	0xFF2
 12990                           intcon2	equ	0xFF1
 12991                           intcon3	equ	0xFF0
 12992                           postinc0	equ	0xFEE
 12993                           wreg	equ	0xFE8
 12994                           indf1	equ	0xFE7
 12995                           postdec1	equ	0xFE5
 12996                           fsr1h	equ	0xFE2
 12997                           fsr1l	equ	0xFE1
 12998                           indf2	equ	0xFDF
 12999                           postinc2	equ	0xFDE
 13000                           postdec2	equ	0xFDD
 13001                           fsr2h	equ	0xFDA
 13002                           fsr2l	equ	0xFD9
 13003                           status	equ	0xFD8
 13004                           
 13005 ;; *************** function _EUSART1_Buffer_Send *****************
 13006 ;; Defined at:
 13007 ;;		line 511 in file "eusart.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  text            1   14[COMRAM] PTR unsigned char 
 13010 ;;		 -> UART_TX_TEXT(64), 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  i               2   15[COMRAM] unsigned int 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;                  1    wreg      void 
 13015 ;; Registers used:
 13016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13022 ;;      Params:         1       0       0       0
 13023 ;;      Locals:         2       0       0       0
 13024 ;;      Temps:          0       0       0       0
 13025 ;;      Totals:         3       0       0       0
 13026 ;;Total ram usage:        3 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:   10
 13029 ;; This function calls:
 13030 ;;		Nothing
 13031 ;; This function is called by:
 13032 ;;		_EUSART1_RX_T3_LOCAL
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text78
 13037  001770                     __ptext78:
 13038                           	opt stack 0
 13039  001770                     _EUSART1_Buffer_Send:
 13040                           	opt stack 16
 13041  001770                     l1328:
 13042  001770  A2AC               	btfss	4012,1,c	;volatile
 13043  001772  D7FE               	goto	l1328
 13044                           
 13045                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 13046  001774  6A10               	clrf	EUSART1_Buffer_Send@i,c
 13047  001776  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 13048  001778  D01A               	goto	l7740
 13049  00177A                     l7736:
 13050                           
 13051                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 13052  00177A  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13053  00177C  0FAD               	addlw	low _UART_TX_TEXT
 13054  00177E  6ED9               	movwf	fsr2l,c
 13055  001780  6ADA               	clrf	fsr2h,c
 13056  001782  0E80               	movlw	low _eusart1TxBuffer
 13057  001784  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13058  001786  6EE1               	movwf	fsr1l,c
 13059  001788  0E01               	movlw	high _eusart1TxBuffer
 13060  00178A  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13061  00178C  6EE2               	movwf	fsr1h,c
 13062  00178E  CFDF FFE7          	movff	indf2,indf1
 13063                           
 13064                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 13065  001792  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13066  001794  0FAD               	addlw	low _UART_TX_TEXT
 13067  001796  6ED9               	movwf	fsr2l,c
 13068  001798  6ADA               	clrf	fsr2h,c
 13069  00179A  0E40               	movlw	low _spiTxBuffer
 13070  00179C  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13071  00179E  6EE1               	movwf	fsr1l,c
 13072  0017A0  0E01               	movlw	high _spiTxBuffer
 13073  0017A2  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13074  0017A4  6EE2               	movwf	fsr1h,c
 13075  0017A6  CFDF FFE7          	movff	indf2,indf1
 13076  0017AA  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 13077  0017AC  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 13078  0017AE                     l7740:
 13079  0017AE  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 13080  0017B0  E109               	bnz	l7744
 13081  0017B2  0E40               	movlw	64
 13082  0017B4  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 13083  0017B6  E206               	bc	l7744
 13084  0017B8  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13085  0017BA  0FAD               	addlw	low _UART_TX_TEXT
 13086  0017BC  6ED9               	movwf	fsr2l,c
 13087  0017BE  6ADA               	clrf	fsr2h,c
 13088  0017C0  50DF               	movf	indf2,w,c
 13089  0017C2  E1DB               	bnz	l7736
 13090  0017C4                     l7744:
 13091                           
 13092                           ;eusart.c: 526: }
 13093                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 13094  0017C4  0E80               	movlw	low _eusart1TxBuffer
 13095  0017C6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13096  0017C8  6ED9               	movwf	fsr2l,c
 13097  0017CA  0E01               	movlw	high _eusart1TxBuffer
 13098  0017CC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13099  0017CE  6EDA               	movwf	fsr2h,c
 13100  0017D0  0E0D               	movlw	13
 13101  0017D2  6EDF               	movwf	indf2,c
 13102                           
 13103                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 13104  0017D4  0E40               	movlw	low _spiTxBuffer
 13105  0017D6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13106  0017D8  6ED9               	movwf	fsr2l,c
 13107  0017DA  0E01               	movlw	high _spiTxBuffer
 13108  0017DC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13109  0017DE  6EDA               	movwf	fsr2h,c
 13110  0017E0  0E0D               	movlw	13
 13111  0017E2  6EDF               	movwf	indf2,c
 13112                           
 13113                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 13114  0017E4  0E81               	movlw	low (_eusart1TxBuffer+1)
 13115  0017E6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13116  0017E8  6ED9               	movwf	fsr2l,c
 13117  0017EA  0E01               	movlw	high (_eusart1TxBuffer+1)
 13118  0017EC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13119  0017EE  6EDA               	movwf	fsr2h,c
 13120  0017F0  6ADF               	clrf	indf2,c
 13121                           
 13122                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 13123  0017F2  0E41               	movlw	low (_spiTxBuffer+1)
 13124  0017F4  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13125  0017F6  6ED9               	movwf	fsr2l,c
 13126  0017F8  0E01               	movlw	high (_spiTxBuffer+1)
 13127  0017FA  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13128  0017FC  6EDA               	movwf	fsr2h,c
 13129  0017FE  6ADF               	clrf	indf2,c
 13130                           
 13131                           ;eusart.c: 537: eusart1TxIndex = 0;
 13132  001800  6A46               	clrf	_eusart1TxIndex,c	;volatile
 13133                           
 13134                           ;eusart.c: 538: spiTxIndex = 0;
 13135  001802  6A44               	clrf	_spiTxIndex,c	;volatile
 13136                           
 13137                           ;eusart.c: 540: SPI_MODE = 1;
 13138  001804  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 13139                           
 13140                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 13141  001806  0E40               	movlw	low _spiTxBuffer
 13142  001808  2444               	addwf	_spiTxIndex,w,c	;volatile
 13143  00180A  6ED9               	movwf	fsr2l,c
 13144  00180C  6ADA               	clrf	fsr2h,c
 13145  00180E  0E01               	movlw	high _spiTxBuffer
 13146  001810  22DA               	addwfc	fsr2h,f,c
 13147  001812  50DF               	movf	indf2,w,c
 13148  001814  6EC9               	movwf	4041,c	;volatile
 13149                           
 13150                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 13151  001816  0E80               	movlw	low _eusart1TxBuffer
 13152  001818  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 13153  00181A  6ED9               	movwf	fsr2l,c
 13154  00181C  6ADA               	clrf	fsr2h,c
 13155  00181E  0E01               	movlw	high _eusart1TxBuffer
 13156  001820  22DA               	addwfc	fsr2h,f,c
 13157  001822  50DF               	movf	indf2,w,c
 13158  001824  6EAD               	movwf	4013,c	;volatile
 13159                           
 13160                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 13161  001826  889D               	bsf	3997,4,c	;volatile
 13162  001828  0012               	return		;funcret
 13163  00182A                     __end_of_EUSART1_Buffer_Send:
 13164                           	opt stack 0
 13165                           tblptru	equ	0xFF8
 13166                           tblptrh	equ	0xFF7
 13167                           tblptrl	equ	0xFF6
 13168                           tablat	equ	0xFF5
 13169                           prodh	equ	0xFF4
 13170                           prodl	equ	0xFF3
 13171                           intcon	equ	0xFF2
 13172                           intcon2	equ	0xFF1
 13173                           intcon3	equ	0xFF0
 13174                           postinc0	equ	0xFEE
 13175                           wreg	equ	0xFE8
 13176                           indf1	equ	0xFE7
 13177                           postdec1	equ	0xFE5
 13178                           fsr1h	equ	0xFE2
 13179                           fsr1l	equ	0xFE1
 13180                           indf2	equ	0xFDF
 13181                           postinc2	equ	0xFDE
 13182                           postdec2	equ	0xFDD
 13183                           fsr2h	equ	0xFDA
 13184                           fsr2l	equ	0xFD9
 13185                           status	equ	0xFD8
 13186                           
 13187 ;; *************** function _LOW_PRIORITY_IRQ *****************
 13188 ;; Defined at:
 13189 ;;		line 559 in file "interrupt.c"
 13190 ;; Parameters:    Size  Location     Type
 13191 ;;		None
 13192 ;; Auto vars:     Size  Location     Type
 13193 ;;		None
 13194 ;; Return value:  Size  Location     Type
 13195 ;;                  1    wreg      void 
 13196 ;; Registers used:
 13197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13198 ;; Tracked objects:
 13199 ;;		On entry : 0/0
 13200 ;;		On exit  : 0/0
 13201 ;;		Unchanged: 0/0
 13202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13203 ;;      Params:         0       0       0       0
 13204 ;;      Locals:         0       0       0       0
 13205 ;;      Temps:          7       0       0       0
 13206 ;;      Totals:         7       0       0       0
 13207 ;;Total ram usage:        7 bytes
 13208 ;; Hardware stack levels used:    1
 13209 ;; Hardware stack levels required when called:    9
 13210 ;; This function calls:
 13211 ;;		_EUSART1_Receive_ISR
 13212 ;;		_EUSART1_Transmit_ISR
 13213 ;;		_IRQ_PION_CHANGEMENT_ETAT
 13214 ;;		_SPI_ISR
 13215 ;;		i1_IRQ_ADC
 13216 ;;		i1_IRQ_PWM
 13217 ;;		i1_IRQ_TIMER_0
 13218 ;;		i1_IRQ_TIMER_5
 13219 ;; This function is called by:
 13220 ;;		Interrupt level 1
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           	psect	intcodelo
 13225  000018                     __pintcodelo:
 13226                           	opt stack 0
 13227  000018                     _LOW_PRIORITY_IRQ:
 13228                           	opt stack 11
 13229                           
 13230                           ;incstack = 0
 13231  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13232  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 13233  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 13234  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 13235  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 13236  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 13237  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 13238  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 13239                           
 13240                           ;interrupt.c: 562: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 13241  000036  B2A3               	btfsc	4003,1,c	;volatile
 13242  000038  A2A4               	btfss	4004,1,c	;volatile
 13243  00003A  D003               	goto	i1l650
 13244                           
 13245                           ;interrupt.c: 564: IRQ_PION_CHANGEMENT_ETAT();
 13246  00003C  ECBE  F00F         	call	_IRQ_PION_CHANGEMENT_ETAT	;wreg free
 13247                           
 13248                           ;interrupt.c: 579: } else
 13249  000040  D036               	goto	i1l669
 13250  000042                     i1l650:
 13251                           
 13252                           ;interrupt.c: 581: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 13253  000042  B4A3               	btfsc	4003,2,c	;volatile
 13254  000044  A4A4               	btfss	4004,2,c	;volatile
 13255  000046  D002               	goto	i1l652
 13256                           
 13257                           ;interrupt.c: 582: PIR3bits.IC2QEIF = 0;
 13258  000048  94A4               	bcf	4004,2,c	;volatile
 13259                           
 13260                           ;interrupt.c: 594: } else
 13261  00004A  D031               	goto	i1l669
 13262  00004C                     i1l652:
 13263                           
 13264                           ;interrupt.c: 595: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 13265  00004C  B69D               	btfsc	3997,3,c	;volatile
 13266  00004E  A69E               	btfss	3998,3,c	;volatile
 13267  000050  D003               	goto	i1l654
 13268                           
 13269                           ;interrupt.c: 596: SPI_ISR();
 13270  000052  EC44  F009         	call	_SPI_ISR	;wreg free
 13271                           
 13272                           ;interrupt.c: 598: } else
 13273  000056  D02B               	goto	i1l669
 13274  000058                     i1l654:
 13275                           
 13276                           ;interrupt.c: 599: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13277  000058  B89D               	btfsc	3997,4,c	;volatile
 13278  00005A  A89E               	btfss	3998,4,c	;volatile
 13279  00005C  D003               	goto	i1l656
 13280                           
 13281                           ;interrupt.c: 600: EUSART1_Transmit_ISR();
 13282  00005E  EC84  F011         	call	_EUSART1_Transmit_ISR	;wreg free
 13283                           
 13284                           ;interrupt.c: 602: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13285  000062  D025               	goto	i1l669
 13286  000064                     i1l656:
 13287  000064  BA9D               	btfsc	3997,5,c	;volatile
 13288  000066  AA9E               	btfss	3998,5,c	;volatile
 13289  000068  D00B               	goto	i1l658
 13290                           
 13291                           ;interrupt.c: 603: if (RX1_ABR==0){
 13292  00006A  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13293  00006C  D003               	goto	i1l659
 13294                           
 13295                           ;interrupt.c: 604: EUSART1_Receive_ISR();
 13296  00006E  EC36  F00A         	call	_EUSART1_Receive_ISR	;wreg free
 13297                           
 13298                           ;interrupt.c: 605: }else{
 13299  000072  D01D               	goto	i1l669
 13300  000074                     i1l659:
 13301                           
 13302                           ;interrupt.c: 606: eusart1RxIndex = RCREG;
 13303  000074  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 13304                           
 13305                           ;interrupt.c: 607: eusart1RxIndex = 0;
 13306  000078  6A45               	clrf	_eusart1RxIndex,c	;volatile
 13307                           
 13308                           ;interrupt.c: 608: PIR1bits.RC1IF = 0;
 13309  00007A  9A9E               	bcf	3998,5,c	;volatile
 13310                           
 13311                           ;interrupt.c: 609: RX1_ABR = 0;}
 13312  00007C  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13313                           
 13314                           ;interrupt.c: 611: } else
 13315  00007E  D017               	goto	i1l669
 13316  000080                     i1l658:
 13317                           
 13318                           ;interrupt.c: 615: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 13319  000080  BAF2               	btfsc	intcon,5,c	;volatile
 13320  000082  A4F2               	btfss	intcon,2,c	;volatile
 13321  000084  D003               	goto	i1l662
 13322                           
 13323                           ;interrupt.c: 616: IRQ_TIMER_0();
 13324  000086  EC40  F00F         	call	i1_IRQ_TIMER_0	;wreg free
 13325                           
 13326                           ;interrupt.c: 622: } else
 13327  00008A  D011               	goto	i1l669
 13328  00008C                     i1l662:
 13329                           
 13330                           ;interrupt.c: 625: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 13331  00008C  B0A3               	btfsc	4003,0,c	;volatile
 13332  00008E  A0A4               	btfss	4004,0,c	;volatile
 13333  000090  D003               	goto	i1l664
 13334                           
 13335                           ;interrupt.c: 626: IRQ_TIMER_5();
 13336  000092  ECE4  F00D         	call	i1_IRQ_TIMER_5	;wreg free
 13337                           
 13338                           ;interrupt.c: 648: } else
 13339  000096  D00B               	goto	i1l669
 13340  000098                     i1l664:
 13341                           
 13342                           ;interrupt.c: 650: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 13343  000098  B8A3               	btfsc	4003,4,c	;volatile
 13344  00009A  A8A4               	btfss	4004,4,c	;volatile
 13345  00009C  D003               	goto	i1l666
 13346                           
 13347                           ;interrupt.c: 651: IRQ_PWM();
 13348  00009E  ECB8  F013         	call	i1_IRQ_PWM	;wreg free
 13349                           
 13350                           ;interrupt.c: 655: } else
 13351  0000A2  D005               	goto	i1l669
 13352  0000A4                     i1l666:
 13353                           
 13354                           ;interrupt.c: 660: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 13355  0000A4  BC9D               	btfsc	3997,6,c	;volatile
 13356  0000A6  AC9E               	btfss	3998,6,c	;volatile
 13357  0000A8  D002               	goto	i1l669
 13358                           
 13359                           ;interrupt.c: 667: IRQ_ADC();
 13360  0000AA  ECDD  F007         	call	i1_IRQ_ADC	;wreg free
 13361  0000AE                     i1l669:
 13362  0000AE  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 13363  0000B2  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 13364  0000B6  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 13365  0000BA  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 13366  0000BE  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 13367  0000C2  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 13368  0000C6  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 13369  0000CA  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13370  0000CC  0010               	retfie	
 13371  0000CE                     __end_of_LOW_PRIORITY_IRQ:
 13372                           	opt stack 0
 13373                           tblptru	equ	0xFF8
 13374                           tblptrh	equ	0xFF7
 13375                           tblptrl	equ	0xFF6
 13376                           tablat	equ	0xFF5
 13377                           prodh	equ	0xFF4
 13378                           prodl	equ	0xFF3
 13379                           intcon	equ	0xFF2
 13380                           intcon2	equ	0xFF1
 13381                           intcon3	equ	0xFF0
 13382                           postinc0	equ	0xFEE
 13383                           wreg	equ	0xFE8
 13384                           indf1	equ	0xFE7
 13385                           postdec1	equ	0xFE5
 13386                           fsr1h	equ	0xFE2
 13387                           fsr1l	equ	0xFE1
 13388                           bsr	equ	0xFE0
 13389                           indf2	equ	0xFDF
 13390                           postinc2	equ	0xFDE
 13391                           postdec2	equ	0xFDD
 13392                           fsr2h	equ	0xFDA
 13393                           fsr2l	equ	0xFD9
 13394                           status	equ	0xFD8
 13395                           
 13396 ;; *************** function i1_IRQ_TIMER_5 *****************
 13397 ;; Defined at:
 13398 ;;		line 409 in file "interrupt.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;		None
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;		None
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  1    wreg      void 
 13405 ;; Registers used:
 13406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13407 ;; Tracked objects:
 13408 ;;		On entry : 0/0
 13409 ;;		On exit  : 0/0
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13412 ;;      Params:         0       0       0       0
 13413 ;;      Locals:         0       0       0       0
 13414 ;;      Temps:          0       0       0       0
 13415 ;;      Totals:         0       0       0       0
 13416 ;;Total ram usage:        0 bytes
 13417 ;; Hardware stack levels used:    1
 13418 ;; Hardware stack levels required when called:    8
 13419 ;; This function calls:
 13420 ;;		i1_Alarme_On
 13421 ;;		i1_Buzzer_Etat
 13422 ;;		i1_Etat_Update
 13423 ;;		i1_TIMER5_Off
 13424 ;; This function is called by:
 13425 ;;		_LOW_PRIORITY_IRQ
 13426 ;; This function uses a non-reentrant model
 13427 ;;
 13428                           
 13429                           	psect	text80
 13430  001BC8                     __ptext80:
 13431                           	opt stack 0
 13432  001BC8                     i1_IRQ_TIMER_5:
 13433                           	opt stack 11
 13434                           
 13435                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 13436                           
 13437                           ;incstack = 0
 13438  001BC8  90A4               	bcf	4004,0,c	;volatile
 13439                           
 13440                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 13441  001BCA  0100               	movlb	0	; () banked
 13442  001BCC  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 13443                           
 13444                           ; BSR set to: 0
 13445                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 13446  001BCE  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 13447  001BD0  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13448  001BD2  E115               	bnz	i1l6972
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 13452  001BD4  044D               	decf	_Mouvement_Startup,w,c
 13453  001BD6  E001               	bz	i1l6958
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;interrupt.c: 418: nb_Pion += 1;
 13457  001BD8  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 13458  001BDA                     i1l6958:
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;interrupt.c: 419: }
 13462                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 13463  001BDA  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 13467  001BDC  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13468  001BDE  E003               	bz	i1l607
 13469                           
 13470                           ; BSR set to: 0
 13471  001BE0  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13472  001BE2  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 13473  001BE4  E202               	bc	i1l6964
 13474  001BE6                     i1l607:
 13475                           
 13476                           ; BSR set to: 0
 13477  001BE6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 13478  001BE8  0012               	return	
 13479  001BEA                     i1l6964:
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 13483  001BEA  0E00               	movlw	0
 13484  001BEC  EC6B  F013         	call	i1_Buzzer_Etat
 13485                           
 13486                           ;interrupt.c: 430: P4_busy = 0;
 13487  001BF0  0100               	movlb	0	; () banked
 13488  001BF2  6BAC               	clrf	_P4_busy& (0+255),b
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;interrupt.c: 431: TIMER5_Off();
 13492  001BF4  EC89  F013         	call	i1_TIMER5_Off	;wreg free
 13493                           
 13494                           ;interrupt.c: 432: Etat_Update(0);
 13495  001BF8  0E00               	movlw	0
 13496  001BFA  EF44  F012         	goto	i1_Etat_Update
 13497  001BFE                     i1l6972:
 13498                           
 13499                           ; BSR set to: 0
 13500  001BFE  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 13501  001C00  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13502  001C02  A4D8               	btfss	status,2,c
 13503  001C04  0012               	return	
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 13507  001C06  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 13508  001C08  E10E               	bnz	i1l610
 13509                           
 13510                           ; BSR set to: 0
 13511  001C0A  B480               	btfsc	3968,2,c	;volatile
 13512  001C0C  D00C               	goto	i1l610
 13513                           
 13514                           ; BSR set to: 0
 13515  001C0E  044D               	decf	_Mouvement_Startup,w,c
 13516  001C10  E10A               	bnz	i1l610
 13517                           
 13518                           ; BSR set to: 0
 13519                           ;interrupt.c: 460: if (Option_Multitas==1){
 13520  001C12  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 13521  001C14  D004               	goto	i1l6984
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;interrupt.c: 461: Alarme_On(11);
 13525  001C16  0E0B               	movlw	11
 13526  001C18  EC4D  F013         	call	i1_Alarme_On
 13527                           
 13528                           ;interrupt.c: 462: }else{
 13529  001C1C  D008               	goto	i1l6988
 13530  001C1E                     i1l6984:
 13531                           
 13532                           ; BSR set to: 0
 13533                           ;interrupt.c: 463: Alarme_On(6);
 13534  001C1E  0E06               	movlw	6
 13535  001C20  EC4D  F013         	call	i1_Alarme_On
 13536  001C24  D004               	goto	i1l6988
 13537  001C26                     i1l610:
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;interrupt.c: 467: P4_busy = 0;
 13541  001C26  6BAC               	clrf	_P4_busy& (0+255),b
 13542                           
 13543                           ; BSR set to: 0
 13544                           ;interrupt.c: 468: Etat_Update(6);
 13545  001C28  0E06               	movlw	6
 13546  001C2A  EC44  F012         	call	i1_Etat_Update
 13547  001C2E                     i1l6988:
 13548                           
 13549                           ;interrupt.c: 471: }
 13550                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 13551  001C2E  0E00               	movlw	0
 13552  001C30  EC6B  F013         	call	i1_Buzzer_Etat
 13553                           
 13554                           ;interrupt.c: 474: TIMER5_Off();
 13555  001C34  EF89  F013         	goto	i1_TIMER5_Off	;wreg free
 13556  001C38                     __end_ofi1_IRQ_TIMER_5:
 13557                           	opt stack 0
 13558                           tblptru	equ	0xFF8
 13559                           tblptrh	equ	0xFF7
 13560                           tblptrl	equ	0xFF6
 13561                           tablat	equ	0xFF5
 13562                           prodh	equ	0xFF4
 13563                           prodl	equ	0xFF3
 13564                           intcon	equ	0xFF2
 13565                           intcon2	equ	0xFF1
 13566                           intcon3	equ	0xFF0
 13567                           postinc0	equ	0xFEE
 13568                           wreg	equ	0xFE8
 13569                           indf1	equ	0xFE7
 13570                           postdec1	equ	0xFE5
 13571                           fsr1h	equ	0xFE2
 13572                           fsr1l	equ	0xFE1
 13573                           bsr	equ	0xFE0
 13574                           indf2	equ	0xFDF
 13575                           postinc2	equ	0xFDE
 13576                           postdec2	equ	0xFDD
 13577                           fsr2h	equ	0xFDA
 13578                           fsr2l	equ	0xFD9
 13579                           status	equ	0xFD8
 13580                           
 13581 ;; *************** function i1_Alarme_On *****************
 13582 ;; Defined at:
 13583 ;;		line 18 in file "alarme.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;  alarme_new_v    1    wreg     unsigned char 
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 13588 ;; Return value:  Size  Location     Type
 13589 ;;                  1    wreg      void 
 13590 ;; Registers used:
 13591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13592 ;; Tracked objects:
 13593 ;;		On entry : 3F/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13597 ;;      Params:         0       0       0       0
 13598 ;;      Locals:         1       0       0       0
 13599 ;;      Temps:          0       0       0       0
 13600 ;;      Totals:         1       0       0       0
 13601 ;;Total ram usage:        1 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    7
 13604 ;; This function calls:
 13605 ;;		i1_Coupe_Moteur
 13606 ;;		i1_Etat_Update
 13607 ;; This function is called by:
 13608 ;;		i1_IRQ_TIMER_5
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           	psect	text81
 13613  00269A                     __ptext81:
 13614                           	opt stack 0
 13615  00269A                     i1_Alarme_On:
 13616                           	opt stack 11
 13617                           
 13618                           ;incstack = 0
 13619                           ;i1Alarme_On@alarme_new_value stored from wreg
 13620  00269A  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 13621                           
 13622                           ;alarme.c: 22: Etat_Update(1);
 13623  00269C  0E01               	movlw	1
 13624  00269E  EC44  F012         	call	i1_Etat_Update
 13625                           
 13626                           ;alarme.c: 23: Alarme = alarme_new_value;
 13627  0026A2  C006  F0A9         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 13628                           
 13629                           ;alarme.c: 24: Coupe_Moteur();
 13630  0026A6  EFED  F012         	goto	i1_Coupe_Moteur	;wreg free
 13631  0026AA                     __end_ofi1_Alarme_On:
 13632                           	opt stack 0
 13633                           tblptru	equ	0xFF8
 13634                           tblptrh	equ	0xFF7
 13635                           tblptrl	equ	0xFF6
 13636                           tablat	equ	0xFF5
 13637                           prodh	equ	0xFF4
 13638                           prodl	equ	0xFF3
 13639                           intcon	equ	0xFF2
 13640                           intcon2	equ	0xFF1
 13641                           intcon3	equ	0xFF0
 13642                           postinc0	equ	0xFEE
 13643                           wreg	equ	0xFE8
 13644                           indf1	equ	0xFE7
 13645                           postdec1	equ	0xFE5
 13646                           fsr1h	equ	0xFE2
 13647                           fsr1l	equ	0xFE1
 13648                           bsr	equ	0xFE0
 13649                           indf2	equ	0xFDF
 13650                           postinc2	equ	0xFDE
 13651                           postdec2	equ	0xFDD
 13652                           fsr2h	equ	0xFDA
 13653                           fsr2l	equ	0xFD9
 13654                           status	equ	0xFD8
 13655                           
 13656 ;; *************** function i1_Etat_Update *****************
 13657 ;; Defined at:
 13658 ;;		line 74 in file "action.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  etat_new_val    1    wreg     unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      void 
 13665 ;; Registers used:
 13666 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13672 ;;      Params:         0       0       0       0
 13673 ;;      Locals:         1       0       0       0
 13674 ;;      Temps:          0       0       0       0
 13675 ;;      Totals:         1       0       0       0
 13676 ;;Total ram usage:        1 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    5
 13679 ;; This function calls:
 13680 ;;		Nothing
 13681 ;; This function is called by:
 13682 ;;		i1_IRQ_TIMER_5
 13683 ;;		i1_Alarme_On
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           	psect	text82
 13688  002488                     __ptext82:
 13689                           	opt stack 0
 13690  002488                     i1_Etat_Update:
 13691                           	opt stack 13
 13692                           
 13693                           ;incstack = 0
 13694                           ;i1Etat_Update@etat_new_value stored from wreg
 13695  002488  6E05               	movwf	i1Etat_Update@etat_new_value,c
 13696                           
 13697                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 13698  00248A  504C               	movf	_Etat_Precedent_Index,w,c
 13699  00248C  0F6A               	addlw	low _Etat_Log
 13700  00248E  6ED9               	movwf	fsr2l,c
 13701  002490  6ADA               	clrf	fsr2h,c
 13702  002492  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 13703                           
 13704                           ;action.c: 76: Etat = etat_new_value;
 13705  002496  C005  F0AA         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 13706                           
 13707                           ;action.c: 77: Etat_Precedent_Index++;
 13708  00249A  2A4C               	incf	_Etat_Precedent_Index,f,c
 13709                           
 13710                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 13711  00249C  0E0A               	movlw	10
 13712  00249E  184C               	xorwf	_Etat_Precedent_Index,w,c
 13713  0024A0  B4D8               	btfsc	status,2,c
 13714                           
 13715                           ;action.c: 79: Etat_Precedent_Index = 0;
 13716  0024A2  6A4C               	clrf	_Etat_Precedent_Index,c
 13717  0024A4  0012               	return		;funcret
 13718  0024A6                     __end_ofi1_Etat_Update:
 13719                           	opt stack 0
 13720                           tblptru	equ	0xFF8
 13721                           tblptrh	equ	0xFF7
 13722                           tblptrl	equ	0xFF6
 13723                           tablat	equ	0xFF5
 13724                           prodh	equ	0xFF4
 13725                           prodl	equ	0xFF3
 13726                           intcon	equ	0xFF2
 13727                           intcon2	equ	0xFF1
 13728                           intcon3	equ	0xFF0
 13729                           postinc0	equ	0xFEE
 13730                           wreg	equ	0xFE8
 13731                           indf1	equ	0xFE7
 13732                           postdec1	equ	0xFE5
 13733                           fsr1h	equ	0xFE2
 13734                           fsr1l	equ	0xFE1
 13735                           bsr	equ	0xFE0
 13736                           indf2	equ	0xFDF
 13737                           postinc2	equ	0xFDE
 13738                           postdec2	equ	0xFDD
 13739                           fsr2h	equ	0xFDA
 13740                           fsr2l	equ	0xFD9
 13741                           status	equ	0xFD8
 13742                           
 13743 ;; *************** function i1_Coupe_Moteur *****************
 13744 ;; Defined at:
 13745 ;;		line 309 in file "action.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;		None
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;		None
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  1    wreg      void 
 13752 ;; Registers used:
 13753 ;;		cstack
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13759 ;;      Params:         0       0       0       0
 13760 ;;      Locals:         0       0       0       0
 13761 ;;      Temps:          0       0       0       0
 13762 ;;      Totals:         0       0       0       0
 13763 ;;Total ram usage:        0 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; Hardware stack levels required when called:    6
 13766 ;; This function calls:
 13767 ;;		i1_TIMER2_Off
 13768 ;; This function is called by:
 13769 ;;		i1_Alarme_On
 13770 ;; This function uses a non-reentrant model
 13771 ;;
 13772                           
 13773                           	psect	text83
 13774  0025DA                     __ptext83:
 13775                           	opt stack 0
 13776  0025DA                     i1_Coupe_Moteur:
 13777                           	opt stack 11
 13778                           
 13779                           ;action.c: 310: TIMER2_Off();
 13780                           
 13781                           ;incstack = 0
 13782  0025DA  ECA7  F013         	call	i1_TIMER2_Off	;wreg free
 13783                           
 13784                           ;action.c: 322: LATCbits.LATC0 = 0;
 13785  0025DE  908B               	bcf	3979,0,c	;volatile
 13786                           
 13787                           ;action.c: 323: LATCbits.LATC1 = 0;
 13788  0025E0  928B               	bcf	3979,1,c	;volatile
 13789                           
 13790                           ;action.c: 324: OVDCOND = 0b00000000;
 13791  0025E2  6A6B               	clrf	3947,c	;volatile
 13792                           
 13793                           ;action.c: 325: LATD4 = 0;LATD5 = 0;
 13794  0025E4  988C               	bcf	3980,4,c	;volatile
 13795  0025E6  9A8C               	bcf	3980,5,c	;volatile
 13796                           
 13797                           ;action.c: 326: LATD6 = 0;LATD7 = 0;
 13798  0025E8  9C8C               	bcf	3980,6,c	;volatile
 13799  0025EA  9E8C               	bcf	3980,7,c	;volatile
 13800  0025EC  0012               	return		;funcret
 13801  0025EE                     __end_ofi1_Coupe_Moteur:
 13802                           	opt stack 0
 13803                           tblptru	equ	0xFF8
 13804                           tblptrh	equ	0xFF7
 13805                           tblptrl	equ	0xFF6
 13806                           tablat	equ	0xFF5
 13807                           prodh	equ	0xFF4
 13808                           prodl	equ	0xFF3
 13809                           intcon	equ	0xFF2
 13810                           intcon2	equ	0xFF1
 13811                           intcon3	equ	0xFF0
 13812                           postinc0	equ	0xFEE
 13813                           wreg	equ	0xFE8
 13814                           indf1	equ	0xFE7
 13815                           postdec1	equ	0xFE5
 13816                           fsr1h	equ	0xFE2
 13817                           fsr1l	equ	0xFE1
 13818                           bsr	equ	0xFE0
 13819                           indf2	equ	0xFDF
 13820                           postinc2	equ	0xFDE
 13821                           postdec2	equ	0xFDD
 13822                           fsr2h	equ	0xFDA
 13823                           fsr2l	equ	0xFD9
 13824                           status	equ	0xFD8
 13825                           
 13826 ;; *************** function i1_TIMER2_Off *****************
 13827 ;; Defined at:
 13828 ;;		line 165 in file "timer.c"
 13829 ;; Parameters:    Size  Location     Type
 13830 ;;		None
 13831 ;; Auto vars:     Size  Location     Type
 13832 ;;		None
 13833 ;; Return value:  Size  Location     Type
 13834 ;;                  1    wreg      void 
 13835 ;; Registers used:
 13836 ;;		None
 13837 ;; Tracked objects:
 13838 ;;		On entry : 0/0
 13839 ;;		On exit  : 0/0
 13840 ;;		Unchanged: 0/0
 13841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13842 ;;      Params:         0       0       0       0
 13843 ;;      Locals:         0       0       0       0
 13844 ;;      Temps:          0       0       0       0
 13845 ;;      Totals:         0       0       0       0
 13846 ;;Total ram usage:        0 bytes
 13847 ;; Hardware stack levels used:    1
 13848 ;; Hardware stack levels required when called:    5
 13849 ;; This function calls:
 13850 ;;		Nothing
 13851 ;; This function is called by:
 13852 ;;		i1_Coupe_Moteur
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           	psect	text84
 13857  00274E                     __ptext84:
 13858                           	opt stack 0
 13859  00274E                     i1_TIMER2_Off:
 13860                           	opt stack 11
 13861                           
 13862                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 13863                           
 13864                           ;incstack = 0
 13865  00274E  929D               	bcf	3997,1,c	;volatile
 13866                           
 13867                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 13868  002750  929E               	bcf	3998,1,c	;volatile
 13869  002752  0012               	return		;funcret
 13870  002754                     __end_ofi1_TIMER2_Off:
 13871                           	opt stack 0
 13872                           tblptru	equ	0xFF8
 13873                           tblptrh	equ	0xFF7
 13874                           tblptrl	equ	0xFF6
 13875                           tablat	equ	0xFF5
 13876                           prodh	equ	0xFF4
 13877                           prodl	equ	0xFF3
 13878                           intcon	equ	0xFF2
 13879                           intcon2	equ	0xFF1
 13880                           intcon3	equ	0xFF0
 13881                           postinc0	equ	0xFEE
 13882                           wreg	equ	0xFE8
 13883                           indf1	equ	0xFE7
 13884                           postdec1	equ	0xFE5
 13885                           fsr1h	equ	0xFE2
 13886                           fsr1l	equ	0xFE1
 13887                           bsr	equ	0xFE0
 13888                           indf2	equ	0xFDF
 13889                           postinc2	equ	0xFDE
 13890                           postdec2	equ	0xFDD
 13891                           fsr2h	equ	0xFDA
 13892                           fsr2l	equ	0xFD9
 13893                           status	equ	0xFD8
 13894                           
 13895 ;; *************** function i1_IRQ_TIMER_0 *****************
 13896 ;; Defined at:
 13897 ;;		line 361 in file "interrupt.c"
 13898 ;; Parameters:    Size  Location     Type
 13899 ;;		None
 13900 ;; Auto vars:     Size  Location     Type
 13901 ;;		None
 13902 ;; Return value:  Size  Location     Type
 13903 ;;                  1    wreg      void 
 13904 ;; Registers used:
 13905 ;;		wreg, status,2, status,0, cstack
 13906 ;; Tracked objects:
 13907 ;;		On entry : 0/0
 13908 ;;		On exit  : 3F/0
 13909 ;;		Unchanged: 0/0
 13910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13911 ;;      Params:         0       0       0       0
 13912 ;;      Locals:         0       0       0       0
 13913 ;;      Temps:          0       0       0       0
 13914 ;;      Totals:         0       0       0       0
 13915 ;;Total ram usage:        0 bytes
 13916 ;; Hardware stack levels used:    1
 13917 ;; Hardware stack levels required when called:    6
 13918 ;; This function calls:
 13919 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 13920 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 13921 ;; This function is called by:
 13922 ;;		_LOW_PRIORITY_IRQ
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           	psect	text85
 13927  001E80                     __ptext85:
 13928                           	opt stack 0
 13929  001E80                     i1_IRQ_TIMER_0:
 13930                           	opt stack 13
 13931                           
 13932                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 13933                           
 13934                           ;incstack = 0
 13935  001E80  94F2               	bcf	intcon,2,c	;volatile
 13936                           
 13937                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 13938  001E82  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 13939                           
 13940                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 13941  001E84  0100               	movlb	0	; () banked
 13942  001E86  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 13943                           
 13944                           ;interrupt.c: 366: delay_s_counter += 1;
 13945  001E88  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 13949  001E8A  0E02               	movlw	2
 13950  001E8C  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 13951  001E8E  E01C               	bz	i1l6946
 13952  001E90  0012               	return	
 13953  001E92                     i1l6926:
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 13957  001E92  EC1C  F013         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13961  001E96  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13962  001E98  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13963  001E9A  E203               	bc	i1l588
 13964  001E9C                     i1l6930:
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;interrupt.c: 381: consigne = Consigne_Max;
 13968  001E9C  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 13969                           
 13970                           ;interrupt.c: 382: } else {
 13971  001EA0  0012               	return	
 13972  001EA2                     i1l588:
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 13976  001EA2  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13977  001EA6  0012               	return	
 13978  001EA8                     i1l6932:
 13979                           
 13980                           ; BSR set to: 0
 13981                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 13982  001EA8  EC13  F013         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 13986  001EAC  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 13987  001EAE  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13988  001EB0  E3F5               	bnc	i1l6930
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 13992  001EB2  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 13993  001EB6  0012               	return	
 13994  001EB8                     i1l6938:
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 13998  001EB8  EC13  F013         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13999                           
 14000                           ; BSR set to: 0
 14001                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 14002  001EBC  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 14003  001EBE  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 14004  001EC0  E3ED               	bnc	i1l6930
 14005                           
 14006                           ; BSR set to: 0
 14007                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 14008  001EC2  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 14009  001EC6  0012               	return	
 14010  001EC8                     i1l6946:
 14011                           
 14012                           ; BSR set to: 0
 14013  001EC8  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 14014                           
 14015                           ; Switch size 1, requested type "speed"
 14016                           ; Number of cases is 3, Range of values is 1 to 3
 14017                           ; switch strategies available:
 14018                           ; Name         Instructions Cycles
 14019                           ; simple_byte           10     6 (average)
 14020                           ;	Chosen strategy is simple_byte
 14021  001ECA  0A01               	xorlw	1	; case 1
 14022  001ECC  E0E2               	bz	i1l6926
 14023  001ECE  0A03               	xorlw	3	; case 2
 14024  001ED0  E0EB               	bz	i1l6932
 14025  001ED2  0A01               	xorlw	1	; case 3
 14026  001ED4  E0F1               	bz	i1l6938
 14027                           
 14028                           ; BSR set to: 0
 14029  001ED6  0012               	return		;funcret
 14030  001ED8                     __end_ofi1_IRQ_TIMER_0:
 14031                           	opt stack 0
 14032                           tblptru	equ	0xFF8
 14033                           tblptrh	equ	0xFF7
 14034                           tblptrl	equ	0xFF6
 14035                           tablat	equ	0xFF5
 14036                           prodh	equ	0xFF4
 14037                           prodl	equ	0xFF3
 14038                           intcon	equ	0xFF2
 14039                           intcon2	equ	0xFF1
 14040                           intcon3	equ	0xFF0
 14041                           postinc0	equ	0xFEE
 14042                           wreg	equ	0xFE8
 14043                           indf1	equ	0xFE7
 14044                           postdec1	equ	0xFE5
 14045                           fsr1h	equ	0xFE2
 14046                           fsr1l	equ	0xFE1
 14047                           bsr	equ	0xFE0
 14048                           indf2	equ	0xFDF
 14049                           postinc2	equ	0xFDE
 14050                           postdec2	equ	0xFDD
 14051                           fsr2h	equ	0xFDA
 14052                           fsr2l	equ	0xFD9
 14053                           status	equ	0xFD8
 14054                           
 14055 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 14056 ;; Defined at:
 14057 ;;		line 868 in file "interrupt.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;		None
 14060 ;; Auto vars:     Size  Location     Type
 14061 ;;		None
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  1    wreg      void 
 14064 ;; Registers used:
 14065 ;;		wreg, status,2, status,0
 14066 ;; Tracked objects:
 14067 ;;		On entry : 0/0
 14068 ;;		On exit  : 3F/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14071 ;;      Params:         0       0       0       0
 14072 ;;      Locals:         0       0       0       0
 14073 ;;      Temps:          0       0       0       0
 14074 ;;      Totals:         0       0       0       0
 14075 ;;Total ram usage:        0 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    5
 14078 ;; This function calls:
 14079 ;;		Nothing
 14080 ;; This function is called by:
 14081 ;;		i1_IRQ_TIMER_0
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           	psect	text86
 14086  002626                     __ptext86:
 14087                           	opt stack 0
 14088  002626                     i1_Surveillance_Consommation_Moteur_2_Activer:
 14089                           	opt stack 13
 14090                           
 14091                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;incstack = 0
 14095  002626  0100               	movlb	0	; () banked
 14096  002628  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 14097  00262A  B4D8               	btfsc	status,2,c
 14098  00262C  0012               	return	
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 14102  00262E  0E01               	movlw	1
 14103  002630  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 14107  002632  92F0               	bcf	intcon3,1,c	;volatile
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 14111  002634  88F0               	bsf	intcon3,4,c	;volatile
 14112                           
 14113                           ; BSR set to: 0
 14114  002636  0C01               	retlw	1	;funcret
 14115  002638                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 14116                           	opt stack 0
 14117                           tblptru	equ	0xFF8
 14118                           tblptrh	equ	0xFF7
 14119                           tblptrl	equ	0xFF6
 14120                           tablat	equ	0xFF5
 14121                           prodh	equ	0xFF4
 14122                           prodl	equ	0xFF3
 14123                           intcon	equ	0xFF2
 14124                           intcon2	equ	0xFF1
 14125                           intcon3	equ	0xFF0
 14126                           postinc0	equ	0xFEE
 14127                           wreg	equ	0xFE8
 14128                           indf1	equ	0xFE7
 14129                           postdec1	equ	0xFE5
 14130                           fsr1h	equ	0xFE2
 14131                           fsr1l	equ	0xFE1
 14132                           bsr	equ	0xFE0
 14133                           indf2	equ	0xFDF
 14134                           postinc2	equ	0xFDE
 14135                           postdec2	equ	0xFDD
 14136                           fsr2h	equ	0xFDA
 14137                           fsr2l	equ	0xFD9
 14138                           status	equ	0xFD8
 14139                           
 14140 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 14141 ;; Defined at:
 14142 ;;		line 852 in file "interrupt.c"
 14143 ;; Parameters:    Size  Location     Type
 14144 ;;		None
 14145 ;; Auto vars:     Size  Location     Type
 14146 ;;		None
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  1    wreg      void 
 14149 ;; Registers used:
 14150 ;;		wreg, status,2, status,0
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 3F/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14156 ;;      Params:         0       0       0       0
 14157 ;;      Locals:         0       0       0       0
 14158 ;;      Temps:          0       0       0       0
 14159 ;;      Totals:         0       0       0       0
 14160 ;;Total ram usage:        0 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; Hardware stack levels required when called:    5
 14163 ;; This function calls:
 14164 ;;		Nothing
 14165 ;; This function is called by:
 14166 ;;		i1_IRQ_TIMER_0
 14167 ;; This function uses a non-reentrant model
 14168 ;;
 14169                           
 14170                           	psect	text87
 14171  002638                     __ptext87:
 14172                           	opt stack 0
 14173  002638                     i1_Surveillance_Consommation_Moteur_1_Activer:
 14174                           	opt stack 13
 14175                           
 14176                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 14177                           
 14178                           ; BSR set to: 0
 14179                           ;incstack = 0
 14180  002638  0100               	movlb	0	; () banked
 14181  00263A  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 14182  00263C  B4D8               	btfsc	status,2,c
 14183  00263E  0012               	return	
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 14187  002640  0E01               	movlw	1
 14188  002642  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 14192  002644  90F0               	bcf	intcon3,0,c	;volatile
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 14196  002646  86F0               	bsf	intcon3,3,c	;volatile
 14197                           
 14198                           ; BSR set to: 0
 14199  002648  0C01               	retlw	1	;funcret
 14200  00264A                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 14201                           	opt stack 0
 14202                           tblptru	equ	0xFF8
 14203                           tblptrh	equ	0xFF7
 14204                           tblptrl	equ	0xFF6
 14205                           tablat	equ	0xFF5
 14206                           prodh	equ	0xFF4
 14207                           prodl	equ	0xFF3
 14208                           intcon	equ	0xFF2
 14209                           intcon2	equ	0xFF1
 14210                           intcon3	equ	0xFF0
 14211                           postinc0	equ	0xFEE
 14212                           wreg	equ	0xFE8
 14213                           indf1	equ	0xFE7
 14214                           postdec1	equ	0xFE5
 14215                           fsr1h	equ	0xFE2
 14216                           fsr1l	equ	0xFE1
 14217                           bsr	equ	0xFE0
 14218                           indf2	equ	0xFDF
 14219                           postinc2	equ	0xFDE
 14220                           postdec2	equ	0xFDD
 14221                           fsr2h	equ	0xFDA
 14222                           fsr2l	equ	0xFD9
 14223                           status	equ	0xFD8
 14224                           
 14225 ;; *************** function i1_IRQ_PWM *****************
 14226 ;; Defined at:
 14227 ;;		line 481 in file "interrupt.c"
 14228 ;; Parameters:    Size  Location     Type
 14229 ;;		None
 14230 ;; Auto vars:     Size  Location     Type
 14231 ;;		None
 14232 ;; Return value:  Size  Location     Type
 14233 ;;                  1    wreg      void 
 14234 ;; Registers used:
 14235 ;;		None
 14236 ;; Tracked objects:
 14237 ;;		On entry : 0/0
 14238 ;;		On exit  : 0/0
 14239 ;;		Unchanged: 0/0
 14240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14241 ;;      Params:         0       0       0       0
 14242 ;;      Locals:         0       0       0       0
 14243 ;;      Temps:          0       0       0       0
 14244 ;;      Totals:         0       0       0       0
 14245 ;;Total ram usage:        0 bytes
 14246 ;; Hardware stack levels used:    1
 14247 ;; Hardware stack levels required when called:    5
 14248 ;; This function calls:
 14249 ;;		Nothing
 14250 ;; This function is called by:
 14251 ;;		_LOW_PRIORITY_IRQ
 14252 ;; This function uses a non-reentrant model
 14253 ;;
 14254                           
 14255                           	psect	text88
 14256  002770                     __ptext88:
 14257                           	opt stack 0
 14258  002770                     i1_IRQ_PWM:
 14259                           	opt stack 14
 14260                           
 14261                           ;interrupt.c: 483: PTIF = 0;
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;incstack = 0
 14265  002770  98A4               	bcf	4004,4,c	;volatile
 14266  002772  0012               	return		;funcret
 14267  002774                     __end_ofi1_IRQ_PWM:
 14268                           	opt stack 0
 14269                           tblptru	equ	0xFF8
 14270                           tblptrh	equ	0xFF7
 14271                           tblptrl	equ	0xFF6
 14272                           tablat	equ	0xFF5
 14273                           prodh	equ	0xFF4
 14274                           prodl	equ	0xFF3
 14275                           intcon	equ	0xFF2
 14276                           intcon2	equ	0xFF1
 14277                           intcon3	equ	0xFF0
 14278                           postinc0	equ	0xFEE
 14279                           wreg	equ	0xFE8
 14280                           indf1	equ	0xFE7
 14281                           postdec1	equ	0xFE5
 14282                           fsr1h	equ	0xFE2
 14283                           fsr1l	equ	0xFE1
 14284                           bsr	equ	0xFE0
 14285                           indf2	equ	0xFDF
 14286                           postinc2	equ	0xFDE
 14287                           postdec2	equ	0xFDD
 14288                           fsr2h	equ	0xFDA
 14289                           fsr2l	equ	0xFD9
 14290                           status	equ	0xFD8
 14291                           
 14292 ;; *************** function i1_IRQ_ADC *****************
 14293 ;; Defined at:
 14294 ;;		line 486 in file "interrupt.c"
 14295 ;; Parameters:    Size  Location     Type
 14296 ;;		None
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;		None
 14299 ;; Return value:  Size  Location     Type
 14300 ;;                  1    wreg      void 
 14301 ;; Registers used:
 14302 ;;		wreg, status,2, status,0
 14303 ;; Tracked objects:
 14304 ;;		On entry : 0/0
 14305 ;;		On exit  : 3F/0
 14306 ;;		Unchanged: 0/0
 14307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14308 ;;      Params:         0       0       0       0
 14309 ;;      Locals:         0       0       0       0
 14310 ;;      Temps:          3       0       0       0
 14311 ;;      Totals:         3       0       0       0
 14312 ;;Total ram usage:        3 bytes
 14313 ;; Hardware stack levels used:    1
 14314 ;; Hardware stack levels required when called:    5
 14315 ;; This function calls:
 14316 ;;		Nothing
 14317 ;; This function is called by:
 14318 ;;		_LOW_PRIORITY_IRQ
 14319 ;; This function uses a non-reentrant model
 14320 ;;
 14321                           
 14322                           	psect	text89
 14323  000FBA                     __ptext89:
 14324                           	opt stack 0
 14325  000FBA                     i1_IRQ_ADC:
 14326                           	opt stack 14
 14327                           
 14328                           ;interrupt.c: 487: switch (moteur_indice) {
 14329                           
 14330                           ;incstack = 0
 14331  000FBA  D0C7               	goto	i1l7048
 14332  000FBC                     i1l622:
 14333                           
 14334                           ; BSR set to: 0
 14335                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 14336  000FBC  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 14337                           
 14338                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 14339  000FC0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14340                           
 14341                           ;interrupt.c: 492: ADIF = 0;
 14342  000FC2  9C9E               	bcf	3998,6,c	;volatile
 14343                           
 14344                           ; BSR set to: 0
 14345                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 14346  000FC4  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 14347  000FC6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14348  000FC8  6F84               	movwf	_erreur& (0+255),b	;volatile
 14349  000FCA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14350  000FCC  A0D8               	btfss	status,0,c
 14351  000FCE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14352                           
 14353                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 14354  000FD0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14355  000FD2  D008               	goto	i1l6998
 14356  000FD4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14357  000FD6  E103               	bnz	i1u501_20
 14358  000FD8  0E0A               	movlw	10
 14359  000FDA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14360  000FDC  E303               	bnc	i1l6998
 14361  000FDE                     i1u501_20:
 14362                           
 14363                           ; BSR set to: 0
 14364  000FDE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14365  000FE0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14366  000FE2  D006               	goto	i1l624
 14367  000FE4                     i1l6998:
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 14371  000FE4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14372  000FE6  D004               	goto	i1l624
 14373                           
 14374                           ; BSR set to: 0
 14375  000FE8  5184               	movf	_erreur& (0+255),w,b	;volatile
 14376  000FEA  2786               	addwf	_duty& (0+255),f,b	;volatile
 14377  000FEC  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14378  000FEE  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 14379  000FF0                     i1l624:
 14380                           
 14381                           ; BSR set to: 0
 14382                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 14383  000FF0  507B               	movf	3963,w,c	;volatile
 14384  000FF2  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14385  000FF4  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14386  000FF6  5186               	movf	_duty& (0+255),w,b	;volatile
 14387  000FF8  5C05               	subwf	??i1_IRQ_ADC,w,c
 14388  000FFA  5006               	movf	??i1_IRQ_ADC+1,w,c
 14389  000FFC  0A80               	xorlw	128
 14390  000FFE  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14391  001000  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14392  001002  0A80               	xorlw	128
 14393  001004  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14394  001006  E203               	bc	i1l7004
 14395                           
 14396                           ; BSR set to: 0
 14397  001008  CF7B F086          	movff	3963,_duty	;volatile
 14398  00100C  D003               	goto	L5
 14399  00100E                     i1l7004:
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 14403  00100E  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14404  001010  D002               	goto	i1l7008
 14405                           
 14406                           ; BSR set to: 0
 14407  001012  6B86               	clrf	_duty& (0+255),b	;volatile
 14408  001014                     L5:
 14409  001014  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14410  001016                     i1l7008:
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 14414  001016  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14415  001018  46E8               	rlncf	wreg,f,c
 14416  00101A  0BFC               	andlw	252
 14417  00101C  6E79               	movwf	3961,c	;volatile
 14418                           
 14419                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 14420  00101E  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14421  001022  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14422  001026  90D8               	bcf	status,0,c
 14423  001028  3605               	rlcf	??i1_IRQ_ADC,f,c
 14424  00102A  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14425  00102C  90D8               	bcf	status,0,c
 14426  00102E  3605               	rlcf	??i1_IRQ_ADC,f,c
 14427  001030  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14428  001032  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14429  001036  6A06               	clrf	??i1_IRQ_ADC+1,c
 14430  001038  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14431  00103A  6806               	setf	??i1_IRQ_ADC+1,c
 14432  00103C  5005               	movf	??i1_IRQ_ADC,w,c
 14433  00103E  6E78               	movwf	3960,c	;volatile
 14434                           
 14435                           ;interrupt.c: 508: break;
 14436  001040  0012               	return	
 14437  001042                     i1l630:
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 14441  001042  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14442                           
 14443                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 14444  001046  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14445                           
 14446                           ;interrupt.c: 518: ADIF = 0;
 14447  001048  9C9E               	bcf	3998,6,c	;volatile
 14448                           
 14449                           ; BSR set to: 0
 14450                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 14451  00104A  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14452  00104C  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14453  00104E  6F84               	movwf	_erreur& (0+255),b	;volatile
 14454  001050  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14455  001052  A0D8               	btfss	status,0,c
 14456  001054  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14457                           
 14458                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 14459  001056  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14460  001058  D008               	goto	i1l7014
 14461  00105A  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14462  00105C  E103               	bnz	i1u505_20
 14463  00105E  0E0A               	movlw	10
 14464  001060  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14465  001062  E303               	bnc	i1l7014
 14466  001064                     i1u505_20:
 14467                           
 14468                           ; BSR set to: 0
 14469  001064  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14470  001066  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14471  001068  D005               	goto	i1l7018
 14472  00106A                     i1l7014:
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 14476  00106A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14477  00106C  D003               	goto	i1l7018
 14478                           
 14479                           ; BSR set to: 0
 14480  00106E  0786               	decf	_duty& (0+255),f,b	;volatile
 14481  001070  A0D8               	btfss	status,0,c
 14482  001072  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14483  001074                     i1l7018:
 14484                           
 14485                           ; BSR set to: 0
 14486                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 14487  001074  507B               	movf	3963,w,c	;volatile
 14488  001076  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14489  001078  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14490  00107A  5186               	movf	_duty& (0+255),w,b	;volatile
 14491  00107C  5C05               	subwf	??i1_IRQ_ADC,w,c
 14492  00107E  5006               	movf	??i1_IRQ_ADC+1,w,c
 14493  001080  0A80               	xorlw	128
 14494  001082  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14495  001084  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14496  001086  0A80               	xorlw	128
 14497  001088  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14498  00108A  E203               	bc	i1l7022
 14499                           
 14500                           ; BSR set to: 0
 14501  00108C  CF7B F086          	movff	3963,_duty	;volatile
 14502  001090  D003               	goto	L6
 14503  001092                     i1l7022:
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 14507  001092  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14508  001094  D002               	goto	i1l7026
 14509                           
 14510                           ; BSR set to: 0
 14511  001096  6B86               	clrf	_duty& (0+255),b	;volatile
 14512  001098                     L6:
 14513  001098  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14514  00109A                     i1l7026:
 14515                           
 14516                           ; BSR set to: 0
 14517                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 14518  00109A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14519  00109C  46E8               	rlncf	wreg,f,c
 14520  00109E  0BFC               	andlw	252
 14521  0010A0  6E77               	movwf	3959,c	;volatile
 14522                           
 14523                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 14524  0010A2  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14525  0010A6  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14526  0010AA  90D8               	bcf	status,0,c
 14527  0010AC  3605               	rlcf	??i1_IRQ_ADC,f,c
 14528  0010AE  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14529  0010B0  90D8               	bcf	status,0,c
 14530  0010B2  3605               	rlcf	??i1_IRQ_ADC,f,c
 14531  0010B4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14532  0010B6  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14533  0010BA  6A06               	clrf	??i1_IRQ_ADC+1,c
 14534  0010BC  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14535  0010BE  6806               	setf	??i1_IRQ_ADC+1,c
 14536  0010C0  5005               	movf	??i1_IRQ_ADC,w,c
 14537  0010C2  6E76               	movwf	3958,c	;volatile
 14538                           
 14539                           ;interrupt.c: 532: break;
 14540  0010C4  0012               	return	
 14541  0010C6                     i1l637:
 14542                           
 14543                           ; BSR set to: 0
 14544                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 14545  0010C6  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14546                           
 14547                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 14548  0010CA  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14549                           
 14550                           ;interrupt.c: 539: ADIF = 0;
 14551  0010CC  9C9E               	bcf	3998,6,c	;volatile
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 14555  0010CE  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14556  0010D0  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14557  0010D2  6F84               	movwf	_erreur& (0+255),b	;volatile
 14558  0010D4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14559  0010D6  A0D8               	btfss	status,0,c
 14560  0010D8  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14561                           
 14562                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 14563  0010DA  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14564  0010DC  D008               	goto	i1l7032
 14565  0010DE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14566  0010E0  E103               	bnz	i1u509_20
 14567  0010E2  0E0A               	movlw	10
 14568  0010E4  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14569  0010E6  E303               	bnc	i1l7032
 14570  0010E8                     i1u509_20:
 14571                           
 14572                           ; BSR set to: 0
 14573  0010E8  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14574  0010EA  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14575  0010EC  D005               	goto	i1l7036
 14576  0010EE                     i1l7032:
 14577                           
 14578                           ; BSR set to: 0
 14579                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 14580  0010EE  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14581  0010F0  D003               	goto	i1l7036
 14582                           
 14583                           ; BSR set to: 0
 14584  0010F2  0786               	decf	_duty& (0+255),f,b	;volatile
 14585  0010F4  A0D8               	btfss	status,0,c
 14586  0010F6  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14587  0010F8                     i1l7036:
 14588                           
 14589                           ; BSR set to: 0
 14590                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 14591  0010F8  507B               	movf	3963,w,c	;volatile
 14592  0010FA  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14593  0010FC  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14594  0010FE  5186               	movf	_duty& (0+255),w,b	;volatile
 14595  001100  5C05               	subwf	??i1_IRQ_ADC,w,c
 14596  001102  5006               	movf	??i1_IRQ_ADC+1,w,c
 14597  001104  0A80               	xorlw	128
 14598  001106  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14599  001108  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14600  00110A  0A80               	xorlw	128
 14601  00110C  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14602  00110E  E203               	bc	i1l7040
 14603                           
 14604                           ; BSR set to: 0
 14605  001110  CF7B F086          	movff	3963,_duty	;volatile
 14606  001114  D003               	goto	L7
 14607  001116                     i1l7040:
 14608                           
 14609                           ; BSR set to: 0
 14610                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 14611  001116  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14612  001118  D002               	goto	i1l7044
 14613                           
 14614                           ; BSR set to: 0
 14615  00111A  6B86               	clrf	_duty& (0+255),b	;volatile
 14616  00111C                     L7:
 14617  00111C  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14618  00111E                     i1l7044:
 14619                           
 14620                           ; BSR set to: 0
 14621                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 14622  00111E  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14623  001120  46E8               	rlncf	wreg,f,c
 14624  001122  0BFC               	andlw	252
 14625  001124  6E77               	movwf	3959,c	;volatile
 14626                           
 14627                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 14628  001126  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14629  00112A  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14630  00112E  90D8               	bcf	status,0,c
 14631  001130  3605               	rlcf	??i1_IRQ_ADC,f,c
 14632  001132  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14633  001134  90D8               	bcf	status,0,c
 14634  001136  3605               	rlcf	??i1_IRQ_ADC,f,c
 14635  001138  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14636  00113A  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14637  00113E  6A06               	clrf	??i1_IRQ_ADC+1,c
 14638  001140  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14639  001142  6806               	setf	??i1_IRQ_ADC+1,c
 14640  001144  5005               	movf	??i1_IRQ_ADC,w,c
 14641  001146  6E76               	movwf	3958,c	;volatile
 14642                           
 14643                           ;interrupt.c: 553: break;
 14644  001148  0012               	return	
 14645  00114A                     i1l7048:
 14646  00114A  0100               	movlb	0	; () banked
 14647  00114C  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 14648                           
 14649                           ; Switch size 1, requested type "speed"
 14650                           ; Number of cases is 3, Range of values is 1 to 3
 14651                           ; switch strategies available:
 14652                           ; Name         Instructions Cycles
 14653                           ; simple_byte           10     6 (average)
 14654                           ;	Chosen strategy is simple_byte
 14655  00114E  0A01               	xorlw	1	; case 1
 14656  001150  E101 D734          	bz	i1l622
 14657  001154  0A03               	xorlw	3	; case 2
 14658  001156  E101 D774          	bz	i1l630
 14659  00115A  0A01               	xorlw	1	; case 3
 14660  00115C  E0B4               	bz	i1l637
 14661                           
 14662                           ; BSR set to: 0
 14663  00115E  0012               	return		;funcret
 14664  001160                     __end_ofi1_IRQ_ADC:
 14665                           	opt stack 0
 14666                           tblptru	equ	0xFF8
 14667                           tblptrh	equ	0xFF7
 14668                           tblptrl	equ	0xFF6
 14669                           tablat	equ	0xFF5
 14670                           prodh	equ	0xFF4
 14671                           prodl	equ	0xFF3
 14672                           intcon	equ	0xFF2
 14673                           intcon2	equ	0xFF1
 14674                           intcon3	equ	0xFF0
 14675                           postinc0	equ	0xFEE
 14676                           wreg	equ	0xFE8
 14677                           indf1	equ	0xFE7
 14678                           postdec1	equ	0xFE5
 14679                           fsr1h	equ	0xFE2
 14680                           fsr1l	equ	0xFE1
 14681                           bsr	equ	0xFE0
 14682                           indf2	equ	0xFDF
 14683                           postinc2	equ	0xFDE
 14684                           postdec2	equ	0xFDD
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689 ;; *************** function _SPI_ISR *****************
 14690 ;; Defined at:
 14691 ;;		line 169 in file "spi.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;		None
 14694 ;; Auto vars:     Size  Location     Type
 14695 ;;  i               1    6[COMRAM] unsigned char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;                  1    wreg      void 
 14698 ;; Registers used:
 14699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14705 ;;      Params:         0       0       0       0
 14706 ;;      Locals:         1       0       0       0
 14707 ;;      Temps:          2       0       0       0
 14708 ;;      Totals:         3       0       0       0
 14709 ;;Total ram usage:        3 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    5
 14712 ;; This function calls:
 14713 ;;		Nothing
 14714 ;; This function is called by:
 14715 ;;		_LOW_PRIORITY_IRQ
 14716 ;; This function uses a non-reentrant model
 14717 ;;
 14718                           
 14719                           	psect	text90
 14720  001288                     __ptext90:
 14721                           	opt stack 0
 14722  001288                     _SPI_ISR:
 14723                           	opt stack 14
 14724                           
 14725                           ;spi.c: 171: unsigned char i;
 14726                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;incstack = 0
 14730  001288  969E               	bcf	3998,3,c	;volatile
 14731                           
 14732                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 14733  00128A  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 14734                           
 14735                           ;spi.c: 180: switch(SPI_MODE){
 14736  00128E  D075               	goto	i1l6864
 14737  001290                     i1l6828:
 14738                           
 14739                           ;spi.c: 196: if (i!=0x0D){
 14740  001290  0E0D               	movlw	13
 14741  001292  1807               	xorwf	SPI_ISR@i,w,c
 14742  001294  E012               	bz	i1l1659
 14743                           
 14744                           ;spi.c: 197: spiTxIndex++;
 14745  001296  2A44               	incf	_spiTxIndex,f,c	;volatile
 14746                           
 14747                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 14748  001298  0E40               	movlw	low _spiTxBuffer
 14749  00129A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14750  00129C  6ED9               	movwf	fsr2l,c
 14751  00129E  6ADA               	clrf	fsr2h,c
 14752  0012A0  0E01               	movlw	high _spiTxBuffer
 14753  0012A2  22DA               	addwfc	fsr2h,f,c
 14754  0012A4  50DF               	movf	indf2,w,c
 14755  0012A6  E009               	bz	i1l1659
 14756                           
 14757                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 14758  0012A8  0E40               	movlw	low _spiTxBuffer
 14759  0012AA  2444               	addwf	_spiTxIndex,w,c	;volatile
 14760  0012AC  6ED9               	movwf	fsr2l,c
 14761  0012AE  6ADA               	clrf	fsr2h,c
 14762  0012B0  0E01               	movlw	high _spiTxBuffer
 14763  0012B2  22DA               	addwfc	fsr2h,f,c
 14764  0012B4  50DF               	movf	indf2,w,c
 14765  0012B6  6EC9               	movwf	4041,c	;volatile
 14766                           
 14767                           ;spi.c: 201: } else {
 14768  0012B8  0012               	return	
 14769  0012BA                     i1l1659:
 14770                           
 14771                           ;spi.c: 202: SPI_MODE = 0;
 14772  0012BA  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14773  0012BC  0012               	return	
 14774  0012BE                     i1l6836:
 14775                           
 14776                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 14777  0012BE  0E00               	movlw	low _spiRxBuffer
 14778  0012C0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14779  0012C2  6ED9               	movwf	fsr2l,c
 14780  0012C4  6ADA               	clrf	fsr2h,c
 14781  0012C6  0E02               	movlw	high _spiRxBuffer
 14782  0012C8  22DA               	addwfc	fsr2h,f,c
 14783  0012CA  C007  FFDF         	movff	SPI_ISR@i,indf2
 14784                           
 14785                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 14786  0012CE  0E00               	movlw	low _spiRxBuffer
 14787  0012D0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14788  0012D2  6ED9               	movwf	fsr2l,c
 14789  0012D4  6ADA               	clrf	fsr2h,c
 14790  0012D6  0E02               	movlw	high _spiRxBuffer
 14791  0012D8  22DA               	addwfc	fsr2h,f,c
 14792  0012DA  50DF               	movf	indf2,w,c
 14793  0012DC  0E01               	movlw	1
 14794  0012DE  A4D8               	btfss	status,2,c
 14795  0012E0  0E00               	movlw	0
 14796  0012E2  6E05               	movwf	??_SPI_ISR& (0+255),c
 14797  0012E4  0E00               	movlw	low _spiRxBuffer
 14798  0012E6  2443               	addwf	_spiRxIndex,w,c	;volatile
 14799  0012E8  6ED9               	movwf	fsr2l,c
 14800  0012EA  6ADA               	clrf	fsr2h,c
 14801  0012EC  0E02               	movlw	high _spiRxBuffer
 14802  0012EE  22DA               	addwfc	fsr2h,f,c
 14803  0012F0  0E0D               	movlw	13
 14804  0012F2  18DE               	xorwf	postinc2,w,c
 14805  0012F4  0E01               	movlw	1
 14806  0012F6  A4D8               	btfss	status,2,c
 14807  0012F8  0E00               	movlw	0
 14808  0012FA  1005               	iorwf	??_SPI_ISR,w,c
 14809  0012FC  A0E8               	btfss	wreg,0,c
 14810  0012FE  D031               	goto	i1l6860
 14811                           
 14812                           ;spi.c: 223: if (spiRxIndex != 0) {
 14813  001300  5043               	movf	_spiRxIndex,w,c	;volatile
 14814  001302  E015               	bz	i1l6848
 14815                           
 14816                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 14817  001304  6A07               	clrf	SPI_ISR@i,c
 14818  001306  D00F               	goto	i1l6846
 14819  001308                     i1l6842:
 14820                           
 14821                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 14822  001308  0E00               	movlw	low _spiRxBuffer
 14823  00130A  2407               	addwf	SPI_ISR@i,w,c
 14824  00130C  6ED9               	movwf	fsr2l,c
 14825  00130E  6ADA               	clrf	fsr2h,c
 14826  001310  0E02               	movlw	high _spiRxBuffer
 14827  001312  22DA               	addwfc	fsr2h,f,c
 14828  001314  0E00               	movlw	low _SPI_RX_TEXT
 14829  001316  2407               	addwf	SPI_ISR@i,w,c
 14830  001318  6EE1               	movwf	fsr1l,c
 14831  00131A  6AE2               	clrf	fsr1h,c
 14832  00131C  0E01               	movlw	high _SPI_RX_TEXT
 14833  00131E  22E2               	addwfc	fsr1h,f,c
 14834  001320  CFDF FFE7          	movff	indf2,indf1
 14835  001324  2A07               	incf	SPI_ISR@i,f,c
 14836  001326                     i1l6846:
 14837  001326  5043               	movf	_spiRxIndex,w,c	;volatile
 14838  001328  5C07               	subwf	SPI_ISR@i,w,c
 14839  00132A  E3EE               	bnc	i1l6842
 14840                           
 14841                           ;spi.c: 226: }
 14842                           ;spi.c: 227: SPI_full = 1;
 14843  00132C  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14844  00132E                     i1l6848:
 14845                           
 14846                           ;spi.c: 228: }
 14847                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 14848  00132E  0E00               	movlw	low _SPI_RX_TEXT
 14849  001330  2443               	addwf	_spiRxIndex,w,c	;volatile
 14850  001332  6ED9               	movwf	fsr2l,c
 14851  001334  6ADA               	clrf	fsr2h,c
 14852  001336  0E01               	movlw	high _SPI_RX_TEXT
 14853  001338  22DA               	addwfc	fsr2h,f,c
 14854  00133A  0E00               	movlw	0
 14855  00133C  6ADF               	clrf	indf2,c
 14856                           
 14857                           ;spi.c: 230: spiRxIndex = 0;
 14858  00133E  6A43               	clrf	_spiRxIndex,c	;volatile
 14859                           
 14860                           ;spi.c: 231: } else {
 14861  001340  0012               	return	
 14862  001342                     i1l6852:
 14863                           
 14864                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 14865  001342  5043               	movf	_spiRxIndex,w,c	;volatile
 14866  001344  6E05               	movwf	??_SPI_ISR& (0+255),c
 14867  001346  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14868  001348  2A05               	incf	??_SPI_ISR,f,c
 14869  00134A  0E00               	movlw	0
 14870  00134C  2206               	addwfc	??_SPI_ISR+1,f,c
 14871  00134E  0E40               	movlw	64
 14872  001350  1805               	xorwf	??_SPI_ISR,w,c
 14873  001352  1006               	iorwf	??_SPI_ISR+1,w,c
 14874  001354  E104               	bnz	i1l6856
 14875                           
 14876                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 14877  001356  0101               	movlb	1	; () banked
 14878  001358  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 14879                           
 14880                           ;spi.c: 236: spiRxIndex = 0;
 14881  00135A  6A43               	clrf	_spiRxIndex,c	;volatile
 14882                           
 14883                           ;spi.c: 239: } else {
 14884  00135C  0012               	return	
 14885  00135E                     i1l6856:
 14886                           
 14887                           ;spi.c: 240: spiRxIndex++;
 14888  00135E  2A43               	incf	_spiRxIndex,f,c	;volatile
 14889  001360  0012               	return	
 14890  001362                     i1l6860:
 14891  001362  0E01               	movlw	1
 14892  001364  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14893  001366  0E00               	movlw	0
 14894  001368  6E05               	movwf	??_SPI_ISR& (0+255),c
 14895  00136A  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14896                           
 14897                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14898                           ; Switch size 1, requested type "speed"
 14899                           ; Number of cases is 1, Range of values is 0 to 0
 14900                           ; switch strategies available:
 14901                           ; Name         Instructions Cycles
 14902                           ; simple_byte            4     3 (average)
 14903                           ;	Chosen strategy is simple_byte
 14904  00136C  5006               	movf	??_SPI_ISR+1,w,c
 14905  00136E  A4D8               	btfss	status,2,c
 14906  001370  0012               	return	
 14907                           
 14908                           ; Switch size 1, requested type "speed"
 14909                           ; Number of cases is 2, Range of values is 0 to 1
 14910                           ; switch strategies available:
 14911                           ; Name         Instructions Cycles
 14912                           ; simple_byte            7     4 (average)
 14913                           ;	Chosen strategy is simple_byte
 14914  001372  5005               	movf	??_SPI_ISR,w,c
 14915  001374  E0E6               	bz	i1l6852
 14916  001376  0A01               	xorlw	1	; case 1
 14917  001378  0012               	return	
 14918  00137A                     i1l6864:
 14919  00137A  0E01               	movlw	1
 14920  00137C  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14921  00137E  0E00               	movlw	0
 14922  001380  6E05               	movwf	??_SPI_ISR& (0+255),c
 14923  001382  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14924                           
 14925                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14926                           ; Switch size 1, requested type "speed"
 14927                           ; Number of cases is 1, Range of values is 0 to 0
 14928                           ; switch strategies available:
 14929                           ; Name         Instructions Cycles
 14930                           ; simple_byte            4     3 (average)
 14931                           ;	Chosen strategy is simple_byte
 14932  001384  5006               	movf	??_SPI_ISR+1,w,c
 14933  001386  A4D8               	btfss	status,2,c
 14934  001388  0012               	return	
 14935                           
 14936                           ; Switch size 1, requested type "speed"
 14937                           ; Number of cases is 2, Range of values is 0 to 1
 14938                           ; switch strategies available:
 14939                           ; Name         Instructions Cycles
 14940                           ; simple_byte            7     4 (average)
 14941                           ;	Chosen strategy is simple_byte
 14942  00138A  5005               	movf	??_SPI_ISR,w,c
 14943  00138C  E098               	bz	i1l6836
 14944  00138E  0A01               	xorlw	1	; case 1
 14945  001390  E101 D77E          	bz	i1l6828
 14946  001394  0012               	return		;funcret
 14947  001396                     __end_of_SPI_ISR:
 14948                           	opt stack 0
 14949                           tblptru	equ	0xFF8
 14950                           tblptrh	equ	0xFF7
 14951                           tblptrl	equ	0xFF6
 14952                           tablat	equ	0xFF5
 14953                           prodh	equ	0xFF4
 14954                           prodl	equ	0xFF3
 14955                           intcon	equ	0xFF2
 14956                           intcon2	equ	0xFF1
 14957                           intcon3	equ	0xFF0
 14958                           postinc0	equ	0xFEE
 14959                           wreg	equ	0xFE8
 14960                           indf1	equ	0xFE7
 14961                           postdec1	equ	0xFE5
 14962                           fsr1h	equ	0xFE2
 14963                           fsr1l	equ	0xFE1
 14964                           bsr	equ	0xFE0
 14965                           indf2	equ	0xFDF
 14966                           postinc2	equ	0xFDE
 14967                           postdec2	equ	0xFDD
 14968                           fsr2h	equ	0xFDA
 14969                           fsr2l	equ	0xFD9
 14970                           status	equ	0xFD8
 14971                           
 14972 ;; *************** function _IRQ_PION_CHANGEMENT_ETAT *****************
 14973 ;; Defined at:
 14974 ;;		line 199 in file "interrupt.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;		None
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;		None
 14979 ;; Return value:  Size  Location     Type
 14980 ;;                  1    wreg      void 
 14981 ;; Registers used:
 14982 ;;		wreg, status,2, status,0, cstack
 14983 ;; Tracked objects:
 14984 ;;		On entry : 0/0
 14985 ;;		On exit  : 0/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14988 ;;      Params:         0       0       0       0
 14989 ;;      Locals:         0       0       0       0
 14990 ;;      Temps:          0       0       0       0
 14991 ;;      Totals:         0       0       0       0
 14992 ;;Total ram usage:        0 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:    6
 14995 ;; This function calls:
 14996 ;;		i1_Buzzer_Etat
 14997 ;;		i1_TIMER5_Off
 14998 ;;		i1_TIMER5_On
 14999 ;; This function is called by:
 15000 ;;		_LOW_PRIORITY_IRQ
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           	psect	text91
 15005  001F7C                     __ptext91:
 15006                           	opt stack 0
 15007  001F7C                     _IRQ_PION_CHANGEMENT_ETAT:
 15008                           	opt stack 13
 15009                           
 15010                           ;interrupt.c: 200: PIR3bits.IC1IF = 0;
 15011                           
 15012                           ;incstack = 0
 15013  001F7C  92A4               	bcf	4004,1,c	;volatile
 15014                           
 15015                           ;interrupt.c: 203: switch (Surveillance_Capteur_Pion) {
 15016  001F7E  D020               	goto	i1l6824
 15017  001F80                     i1l566:
 15018                           
 15019                           ; BSR set to: 0
 15020                           ;interrupt.c: 208: if (PORTAbits.RA2 == 0) {
 15021  001F80  B480               	btfsc	3968,2,c	;volatile
 15022  001F82  D004               	goto	i1l6794
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;interrupt.c: 209: Surveillance_Capteur_Pion = 0;
 15026  001F84  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;interrupt.c: 210: TIMER5_On();
 15030  001F86  ECBA  F013         	call	i1_TIMER5_On	;wreg free
 15031  001F8A  D011               	goto	i1l6808
 15032  001F8C                     i1l6794:
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;interrupt.c: 214: Surveillance_Capteur_Pion = 1;
 15036  001F8C  0E01               	movlw	1
 15037  001F8E  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 15038                           
 15039                           ;interrupt.c: 215: Alarme = 9;
 15040  001F90  0E09               	movlw	9
 15041  001F92  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15042  001F94                     i1l6796:
 15043                           
 15044                           ;interrupt.c: 217: TIMER5_Off();
 15045  001F94  EC89  F013         	call	i1_TIMER5_Off	;wreg free
 15046                           
 15047                           ;interrupt.c: 219: nb_100ms_Timer_5 = 0;
 15048  001F98  0100               	movlb	0	; () banked
 15049  001F9A  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 15050                           
 15051                           ; BSR set to: 0
 15052                           ;interrupt.c: 222: nb_100ms_platine = nb_100ms_platine_backup;
 15053  001F9C  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;interrupt.c: 223: Mouvement_Startup = 0;
 15057  001FA0  6A4D               	clrf	_Mouvement_Startup,c
 15058  001FA2  0012               	return	
 15059  001FA4                     i1l570:
 15060                           
 15061                           ; BSR set to: 0
 15062                           ;interrupt.c: 234: if (PORTAbits.RA2 == 0) {
 15063  001FA4  B480               	btfsc	3968,2,c	;volatile
 15064  001FA6  D006               	goto	i1l6810
 15065                           
 15066                           ; BSR set to: 0
 15067                           ;interrupt.c: 235: Surveillance_Capteur_Pion = 0;
 15068  001FA8  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 15069                           
 15070                           ; BSR set to: 0
 15071                           ;interrupt.c: 236: Alarme = 5;
 15072  001FAA  0E05               	movlw	5
 15073  001FAC  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15074  001FAE                     i1l6808:
 15075                           
 15076                           ; BSR set to: 0
 15077                           ;interrupt.c: 238: Buzzer_Etat((unsigned char) 1);
 15078  001FAE  0E01               	movlw	1
 15079  001FB0  EF6B  F013         	goto	i1_Buzzer_Etat
 15080  001FB4                     i1l6810:
 15081                           
 15082                           ; BSR set to: 0
 15083                           ;interrupt.c: 240: Surveillance_Capteur_Pion = 1;
 15084  001FB4  0E01               	movlw	1
 15085  001FB6  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;interrupt.c: 242: Buzzer_Etat((unsigned char) 0);
 15089  001FB8  0E00               	movlw	0
 15090  001FBA  EC6B  F013         	call	i1_Buzzer_Etat
 15091  001FBE  D7EA               	goto	i1l6796
 15092  001FC0                     i1l6824:
 15093  001FC0  0100               	movlb	0	; () banked
 15094  001FC2  5189               	movf	_Surveillance_Capteur_Pion& (0+255),w,b
 15095                           
 15096                           ; Switch size 1, requested type "speed"
 15097                           ; Number of cases is 2, Range of values is 0 to 1
 15098                           ; switch strategies available:
 15099                           ; Name         Instructions Cycles
 15100                           ; simple_byte            7     4 (average)
 15101                           ;	Chosen strategy is simple_byte
 15102  001FC4  E0EF               	bz	i1l570
 15103  001FC6  0A01               	xorlw	1	; case 1
 15104  001FC8  E0DB               	bz	i1l566
 15105  001FCA  0012               	return		;funcret
 15106  001FCC                     __end_of_IRQ_PION_CHANGEMENT_ETAT:
 15107                           	opt stack 0
 15108                           tblptru	equ	0xFF8
 15109                           tblptrh	equ	0xFF7
 15110                           tblptrl	equ	0xFF6
 15111                           tablat	equ	0xFF5
 15112                           prodh	equ	0xFF4
 15113                           prodl	equ	0xFF3
 15114                           intcon	equ	0xFF2
 15115                           intcon2	equ	0xFF1
 15116                           intcon3	equ	0xFF0
 15117                           postinc0	equ	0xFEE
 15118                           wreg	equ	0xFE8
 15119                           indf1	equ	0xFE7
 15120                           postdec1	equ	0xFE5
 15121                           fsr1h	equ	0xFE2
 15122                           fsr1l	equ	0xFE1
 15123                           bsr	equ	0xFE0
 15124                           indf2	equ	0xFDF
 15125                           postinc2	equ	0xFDE
 15126                           postdec2	equ	0xFDD
 15127                           fsr2h	equ	0xFDA
 15128                           fsr2l	equ	0xFD9
 15129                           status	equ	0xFD8
 15130                           
 15131 ;; *************** function i1_TIMER5_On *****************
 15132 ;; Defined at:
 15133 ;;		line 253 in file "timer.c"
 15134 ;; Parameters:    Size  Location     Type
 15135 ;;		None
 15136 ;; Auto vars:     Size  Location     Type
 15137 ;;		None
 15138 ;; Return value:  Size  Location     Type
 15139 ;;                  1    wreg      void 
 15140 ;; Registers used:
 15141 ;;		None
 15142 ;; Tracked objects:
 15143 ;;		On entry : 3F/0
 15144 ;;		On exit  : 3F/0
 15145 ;;		Unchanged: 3F/0
 15146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15147 ;;      Params:         0       0       0       0
 15148 ;;      Locals:         0       0       0       0
 15149 ;;      Temps:          0       0       0       0
 15150 ;;      Totals:         0       0       0       0
 15151 ;;Total ram usage:        0 bytes
 15152 ;; Hardware stack levels used:    1
 15153 ;; Hardware stack levels required when called:    5
 15154 ;; This function calls:
 15155 ;;		Nothing
 15156 ;; This function is called by:
 15157 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161                           	psect	text92
 15162  002774                     __ptext92:
 15163                           	opt stack 0
 15164  002774                     i1_TIMER5_On:
 15165                           	opt stack 13
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 15169                           
 15170                           ;incstack = 0
 15171  002774  80B7               	bsf	4023,0,c	;volatile
 15172                           
 15173                           ; BSR set to: 0
 15174  002776  0012               	return		;funcret
 15175  002778                     __end_ofi1_TIMER5_On:
 15176                           	opt stack 0
 15177                           tblptru	equ	0xFF8
 15178                           tblptrh	equ	0xFF7
 15179                           tblptrl	equ	0xFF6
 15180                           tablat	equ	0xFF5
 15181                           prodh	equ	0xFF4
 15182                           prodl	equ	0xFF3
 15183                           intcon	equ	0xFF2
 15184                           intcon2	equ	0xFF1
 15185                           intcon3	equ	0xFF0
 15186                           postinc0	equ	0xFEE
 15187                           wreg	equ	0xFE8
 15188                           indf1	equ	0xFE7
 15189                           postdec1	equ	0xFE5
 15190                           fsr1h	equ	0xFE2
 15191                           fsr1l	equ	0xFE1
 15192                           bsr	equ	0xFE0
 15193                           indf2	equ	0xFDF
 15194                           postinc2	equ	0xFDE
 15195                           postdec2	equ	0xFDD
 15196                           fsr2h	equ	0xFDA
 15197                           fsr2l	equ	0xFD9
 15198                           status	equ	0xFD8
 15199                           
 15200 ;; *************** function i1_TIMER5_Off *****************
 15201 ;; Defined at:
 15202 ;;		line 263 in file "timer.c"
 15203 ;; Parameters:    Size  Location     Type
 15204 ;;		None
 15205 ;; Auto vars:     Size  Location     Type
 15206 ;;		None
 15207 ;; Return value:  Size  Location     Type
 15208 ;;                  1    wreg      void 
 15209 ;; Registers used:
 15210 ;;		None
 15211 ;; Tracked objects:
 15212 ;;		On entry : 0/0
 15213 ;;		On exit  : 0/0
 15214 ;;		Unchanged: 0/0
 15215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15216 ;;      Params:         0       0       0       0
 15217 ;;      Locals:         0       0       0       0
 15218 ;;      Temps:          0       0       0       0
 15219 ;;      Totals:         0       0       0       0
 15220 ;;Total ram usage:        0 bytes
 15221 ;; Hardware stack levels used:    1
 15222 ;; Hardware stack levels required when called:    5
 15223 ;; This function calls:
 15224 ;;		Nothing
 15225 ;; This function is called by:
 15226 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15227 ;;		i1_IRQ_TIMER_5
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           	psect	text93
 15232  002712                     __ptext93:
 15233                           	opt stack 0
 15234  002712                     i1_TIMER5_Off:
 15235                           	opt stack 13
 15236                           
 15237                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 15238                           
 15239                           ; BSR set to: 0
 15240                           ;incstack = 0
 15241  002712  90B7               	bcf	4023,0,c	;volatile
 15242                           
 15243                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 15244  002714  90A4               	bcf	4004,0,c	;volatile
 15245                           
 15246                           ;timer.c: 268: TMR5L = 0;
 15247  002716  6A87               	clrf	3975,c	;volatile
 15248                           
 15249                           ;timer.c: 269: TMR5H = 0;
 15250  002718  6A88               	clrf	3976,c	;volatile
 15251  00271A  0012               	return		;funcret
 15252  00271C                     __end_ofi1_TIMER5_Off:
 15253                           	opt stack 0
 15254                           tblptru	equ	0xFF8
 15255                           tblptrh	equ	0xFF7
 15256                           tblptrl	equ	0xFF6
 15257                           tablat	equ	0xFF5
 15258                           prodh	equ	0xFF4
 15259                           prodl	equ	0xFF3
 15260                           intcon	equ	0xFF2
 15261                           intcon2	equ	0xFF1
 15262                           intcon3	equ	0xFF0
 15263                           postinc0	equ	0xFEE
 15264                           wreg	equ	0xFE8
 15265                           indf1	equ	0xFE7
 15266                           postdec1	equ	0xFE5
 15267                           fsr1h	equ	0xFE2
 15268                           fsr1l	equ	0xFE1
 15269                           bsr	equ	0xFE0
 15270                           indf2	equ	0xFDF
 15271                           postinc2	equ	0xFDE
 15272                           postdec2	equ	0xFDD
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function i1_Buzzer_Etat *****************
 15278 ;; Defined at:
 15279 ;;		line 29 in file "interrupt.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;  Activation      1    wreg     unsigned char 
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;  Activation      1    4[COMRAM] unsigned char 
 15284 ;; Return value:  Size  Location     Type
 15285 ;;                  1    wreg      void 
 15286 ;; Registers used:
 15287 ;;		wreg, status,2, status,0
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : 0/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15293 ;;      Params:         0       0       0       0
 15294 ;;      Locals:         1       0       0       0
 15295 ;;      Temps:          0       0       0       0
 15296 ;;      Totals:         1       0       0       0
 15297 ;;Total ram usage:        1 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    5
 15300 ;; This function calls:
 15301 ;;		Nothing
 15302 ;; This function is called by:
 15303 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15304 ;;		i1_IRQ_TIMER_5
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           	psect	text94
 15309  0026D6                     __ptext94:
 15310                           	opt stack 0
 15311  0026D6                     i1_Buzzer_Etat:
 15312                           	opt stack 13
 15313                           
 15314                           ;incstack = 0
 15315                           ;i1Buzzer_Etat@Activation stored from wreg
 15316  0026D6  6E05               	movwf	i1Buzzer_Etat@Activation,c
 15317                           
 15318                           ;interrupt.c: 30: if (Activation == 1) {
 15319  0026D8  0405               	decf	i1Buzzer_Etat@Activation,w,c
 15320  0026DA  E102               	bnz	i1l531
 15321                           
 15322                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 15323  0026DC  8C89               	bsf	3977,6,c	;volatile
 15324                           
 15325                           ;interrupt.c: 33: } else {
 15326  0026DE  0012               	return	
 15327  0026E0                     i1l531:
 15328                           
 15329                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 15330  0026E0  9C89               	bcf	3977,6,c	;volatile
 15331  0026E2  0012               	return		;funcret
 15332  0026E4                     __end_ofi1_Buzzer_Etat:
 15333                           	opt stack 0
 15334                           tblptru	equ	0xFF8
 15335                           tblptrh	equ	0xFF7
 15336                           tblptrl	equ	0xFF6
 15337                           tablat	equ	0xFF5
 15338                           prodh	equ	0xFF4
 15339                           prodl	equ	0xFF3
 15340                           intcon	equ	0xFF2
 15341                           intcon2	equ	0xFF1
 15342                           intcon3	equ	0xFF0
 15343                           postinc0	equ	0xFEE
 15344                           wreg	equ	0xFE8
 15345                           indf1	equ	0xFE7
 15346                           postdec1	equ	0xFE5
 15347                           fsr1h	equ	0xFE2
 15348                           fsr1l	equ	0xFE1
 15349                           bsr	equ	0xFE0
 15350                           indf2	equ	0xFDF
 15351                           postinc2	equ	0xFDE
 15352                           postdec2	equ	0xFDD
 15353                           fsr2h	equ	0xFDA
 15354                           fsr2l	equ	0xFD9
 15355                           status	equ	0xFD8
 15356                           
 15357 ;; *************** function _EUSART1_Transmit_ISR *****************
 15358 ;; Defined at:
 15359 ;;		line 552 in file "eusart.c"
 15360 ;; Parameters:    Size  Location     Type
 15361 ;;		None
 15362 ;; Auto vars:     Size  Location     Type
 15363 ;;		None
 15364 ;; Return value:  Size  Location     Type
 15365 ;;                  1    wreg      void 
 15366 ;; Registers used:
 15367 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15368 ;; Tracked objects:
 15369 ;;		On entry : 0/0
 15370 ;;		On exit  : 0/0
 15371 ;;		Unchanged: 0/0
 15372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15373 ;;      Params:         0       0       0       0
 15374 ;;      Locals:         0       0       0       0
 15375 ;;      Temps:          0       0       0       0
 15376 ;;      Totals:         0       0       0       0
 15377 ;;Total ram usage:        0 bytes
 15378 ;; Hardware stack levels used:    1
 15379 ;; Hardware stack levels required when called:    5
 15380 ;; This function calls:
 15381 ;;		Nothing
 15382 ;; This function is called by:
 15383 ;;		_LOW_PRIORITY_IRQ
 15384 ;; This function uses a non-reentrant model
 15385 ;;
 15386                           
 15387                           	psect	text95
 15388  002308                     __ptext95:
 15389                           	opt stack 0
 15390  002308                     _EUSART1_Transmit_ISR:
 15391                           	opt stack 14
 15392                           
 15393                           ;eusart.c: 554: eusart1TxIndex++;
 15394                           
 15395                           ;incstack = 0
 15396  002308  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 15397                           
 15398                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 15399  00230A  0E80               	movlw	low _eusart1TxBuffer
 15400  00230C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15401  00230E  6ED9               	movwf	fsr2l,c
 15402  002310  6ADA               	clrf	fsr2h,c
 15403  002312  0E01               	movlw	high _eusart1TxBuffer
 15404  002314  22DA               	addwfc	fsr2h,f,c
 15405  002316  50DF               	movf	indf2,w,c
 15406  002318  E009               	bz	i1l1339
 15407                           
 15408                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 15409  00231A  0E80               	movlw	low _eusart1TxBuffer
 15410  00231C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15411  00231E  6ED9               	movwf	fsr2l,c
 15412  002320  6ADA               	clrf	fsr2h,c
 15413  002322  0E01               	movlw	high _eusart1TxBuffer
 15414  002324  22DA               	addwfc	fsr2h,f,c
 15415  002326  50DF               	movf	indf2,w,c
 15416  002328  6EAD               	movwf	4013,c	;volatile
 15417                           
 15418                           ;eusart.c: 574: } else {
 15419  00232A  0012               	return	
 15420  00232C                     i1l1339:
 15421                           
 15422                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 15423  00232C  989D               	bcf	3997,4,c	;volatile
 15424  00232E  0012               	return		;funcret
 15425  002330                     __end_of_EUSART1_Transmit_ISR:
 15426                           	opt stack 0
 15427                           tblptru	equ	0xFF8
 15428                           tblptrh	equ	0xFF7
 15429                           tblptrl	equ	0xFF6
 15430                           tablat	equ	0xFF5
 15431                           prodh	equ	0xFF4
 15432                           prodl	equ	0xFF3
 15433                           intcon	equ	0xFF2
 15434                           intcon2	equ	0xFF1
 15435                           intcon3	equ	0xFF0
 15436                           postinc0	equ	0xFEE
 15437                           wreg	equ	0xFE8
 15438                           indf1	equ	0xFE7
 15439                           postdec1	equ	0xFE5
 15440                           fsr1h	equ	0xFE2
 15441                           fsr1l	equ	0xFE1
 15442                           bsr	equ	0xFE0
 15443                           indf2	equ	0xFDF
 15444                           postinc2	equ	0xFDE
 15445                           postdec2	equ	0xFDD
 15446                           fsr2h	equ	0xFDA
 15447                           fsr2l	equ	0xFD9
 15448                           status	equ	0xFD8
 15449                           
 15450 ;; *************** function _EUSART1_Receive_ISR *****************
 15451 ;; Defined at:
 15452 ;;		line 597 in file "eusart.c"
 15453 ;; Parameters:    Size  Location     Type
 15454 ;;		None
 15455 ;; Auto vars:     Size  Location     Type
 15456 ;;  i               1    6[COMRAM] unsigned char 
 15457 ;; Return value:  Size  Location     Type
 15458 ;;                  1    wreg      void 
 15459 ;; Registers used:
 15460 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15461 ;; Tracked objects:
 15462 ;;		On entry : 0/0
 15463 ;;		On exit  : 0/0
 15464 ;;		Unchanged: 0/0
 15465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15466 ;;      Params:         0       0       0       0
 15467 ;;      Locals:         1       0       0       0
 15468 ;;      Temps:          2       0       0       0
 15469 ;;      Totals:         3       0       0       0
 15470 ;;Total ram usage:        3 bytes
 15471 ;; Hardware stack levels used:    1
 15472 ;; Hardware stack levels required when called:    6
 15473 ;; This function calls:
 15474 ;;		_EUSART1_Erreur_Get
 15475 ;; This function is called by:
 15476 ;;		_LOW_PRIORITY_IRQ
 15477 ;; This function uses a non-reentrant model
 15478 ;;
 15479                           
 15480                           	psect	text96
 15481  00146C                     __ptext96:
 15482                           	opt stack 0
 15483  00146C                     _EUSART1_Receive_ISR:
 15484                           	opt stack 13
 15485                           
 15486                           ;eusart.c: 600: unsigned char i;
 15487                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 15488                           
 15489                           ;incstack = 0
 15490  00146C  9A9E               	bcf	3998,5,c	;volatile
 15491                           
 15492                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 15493  00146E  A2AB               	btfss	4011,1,c	;volatile
 15494  001470  D004               	goto	i1l6884
 15495                           
 15496                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 15497  001472  9EAB               	bcf	4011,7,c	;volatile
 15498                           
 15499                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 15500  001474  8EAB               	bsf	4011,7,c	;volatile
 15501                           
 15502                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 15503  001476  98AB               	bcf	4011,4,c	;volatile
 15504                           
 15505                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 15506  001478  88AB               	bsf	4011,4,c	;volatile
 15507  00147A                     i1l6884:
 15508                           
 15509                           ;eusart.c: 610: }
 15510                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 15511  00147A  0E40               	movlw	low _eusart1RxBuffer
 15512  00147C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15513  00147E  6ED9               	movwf	fsr2l,c
 15514  001480  6ADA               	clrf	fsr2h,c
 15515  001482  0E02               	movlw	high _eusart1RxBuffer
 15516  001484  22DA               	addwfc	fsr2h,f,c
 15517  001486  CFAE FFDF          	movff	4014,indf2	;volatile
 15518                           
 15519                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 15520  00148A  0E40               	movlw	low _eusart1RxBuffer
 15521  00148C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15522  00148E  6ED9               	movwf	fsr2l,c
 15523  001490  6ADA               	clrf	fsr2h,c
 15524  001492  0E02               	movlw	high _eusart1RxBuffer
 15525  001494  22DA               	addwfc	fsr2h,f,c
 15526  001496  50DF               	movf	indf2,w,c
 15527  001498  0E01               	movlw	1
 15528  00149A  A4D8               	btfss	status,2,c
 15529  00149C  0E00               	movlw	0
 15530  00149E  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15531  0014A0  0E40               	movlw	low _eusart1RxBuffer
 15532  0014A2  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15533  0014A4  6ED9               	movwf	fsr2l,c
 15534  0014A6  6ADA               	clrf	fsr2h,c
 15535  0014A8  0E02               	movlw	high _eusart1RxBuffer
 15536  0014AA  22DA               	addwfc	fsr2h,f,c
 15537  0014AC  0E0D               	movlw	13
 15538  0014AE  18DE               	xorwf	postinc2,w,c
 15539  0014B0  0E01               	movlw	1
 15540  0014B2  A4D8               	btfss	status,2,c
 15541  0014B4  0E00               	movlw	0
 15542  0014B6  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 15543  0014B8  A0E8               	btfss	wreg,0,c
 15544  0014BA  D032               	goto	i1l6912
 15545                           
 15546                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 15547  0014BC  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15548  0014BE  E015               	bz	i1l6896
 15549                           
 15550                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 15551  0014C0  6A07               	clrf	EUSART1_Receive_ISR@i,c
 15552  0014C2  D00F               	goto	i1l6894
 15553  0014C4                     i1l6890:
 15554                           
 15555                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 15556  0014C4  0E40               	movlw	low _eusart1RxBuffer
 15557  0014C6  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15558  0014C8  6ED9               	movwf	fsr2l,c
 15559  0014CA  6ADA               	clrf	fsr2h,c
 15560  0014CC  0E02               	movlw	high _eusart1RxBuffer
 15561  0014CE  22DA               	addwfc	fsr2h,f,c
 15562  0014D0  0EC0               	movlw	low _UART_RX_TEXT
 15563  0014D2  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15564  0014D4  6EE1               	movwf	fsr1l,c
 15565  0014D6  6AE2               	clrf	fsr1h,c
 15566  0014D8  0E01               	movlw	high _UART_RX_TEXT
 15567  0014DA  22E2               	addwfc	fsr1h,f,c
 15568  0014DC  CFDF FFE7          	movff	indf2,indf1
 15569  0014E0  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 15570  0014E2                     i1l6894:
 15571  0014E2  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15572  0014E4  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 15573  0014E6  E3EE               	bnc	i1l6890
 15574                           
 15575                           ;eusart.c: 623: }
 15576                           ;eusart.c: 624: RX1_full = 1;
 15577  0014E8  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15578  0014EA                     i1l6896:
 15579                           
 15580                           ;eusart.c: 625: }
 15581                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 15582  0014EA  0EC0               	movlw	low _UART_RX_TEXT
 15583  0014EC  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15584  0014EE  6ED9               	movwf	fsr2l,c
 15585  0014F0  6ADA               	clrf	fsr2h,c
 15586  0014F2  0E01               	movlw	high _UART_RX_TEXT
 15587  0014F4  22DA               	addwfc	fsr2h,f,c
 15588  0014F6  0E00               	movlw	0
 15589  0014F8  6ADF               	clrf	indf2,c
 15590                           
 15591                           ;eusart.c: 629: eusart1RxIndex = 0;
 15592  0014FA  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15593                           
 15594                           ;eusart.c: 631: } else {
 15595  0014FC  0012               	return	
 15596  0014FE                     i1l6900:
 15597                           
 15598                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 15599  0014FE  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15600  001500  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15601  001502  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15602  001504  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 15603  001506  0E00               	movlw	0
 15604  001508  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 15605  00150A  0E40               	movlw	64
 15606  00150C  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 15607  00150E  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 15608  001510  E105               	bnz	i1l6906
 15609                           
 15610                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 15611  001512  0101               	movlb	1	; () banked
 15612  001514  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 15613                           
 15614                           ;eusart.c: 636: eusart1RxIndex = 0;
 15615  001516  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15616                           
 15617                           ;eusart.c: 638: EUSART1_Erreur_Get();
 15618  001518  EF96  F013         	goto	_EUSART1_Erreur_Get	;wreg free
 15619  00151C                     i1l6906:
 15620                           
 15621                           ;eusart.c: 640: eusart1RxIndex++;
 15622  00151C  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 15623  00151E  0012               	return	
 15624  001520                     i1l6912:
 15625  001520  0E01               	movlw	1
 15626  001522  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15627  001524  0E00               	movlw	0
 15628  001526  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15629  001528  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15630                           
 15631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15632                           ; Switch size 1, requested type "speed"
 15633                           ; Number of cases is 1, Range of values is 0 to 0
 15634                           ; switch strategies available:
 15635                           ; Name         Instructions Cycles
 15636                           ; simple_byte            4     3 (average)
 15637                           ;	Chosen strategy is simple_byte
 15638  00152A  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 15639  00152C  A4D8               	btfss	status,2,c
 15640  00152E  0012               	return	
 15641                           
 15642                           ; Switch size 1, requested type "speed"
 15643                           ; Number of cases is 2, Range of values is 0 to 1
 15644                           ; switch strategies available:
 15645                           ; Name         Instructions Cycles
 15646                           ; simple_byte            7     4 (average)
 15647                           ;	Chosen strategy is simple_byte
 15648  001530  5005               	movf	??_EUSART1_Receive_ISR,w,c
 15649  001532  E0E5               	bz	i1l6900
 15650  001534  0A01               	xorlw	1	; case 1
 15651  001536  E102 EF96  F013    	bz	_EUSART1_Erreur_Get
 15652  00153C  0012               	return		;funcret
 15653  00153E                     __end_of_EUSART1_Receive_ISR:
 15654                           	opt stack 0
 15655                           tblptru	equ	0xFF8
 15656                           tblptrh	equ	0xFF7
 15657                           tblptrl	equ	0xFF6
 15658                           tablat	equ	0xFF5
 15659                           prodh	equ	0xFF4
 15660                           prodl	equ	0xFF3
 15661                           intcon	equ	0xFF2
 15662                           intcon2	equ	0xFF1
 15663                           intcon3	equ	0xFF0
 15664                           postinc0	equ	0xFEE
 15665                           wreg	equ	0xFE8
 15666                           indf1	equ	0xFE7
 15667                           postdec1	equ	0xFE5
 15668                           fsr1h	equ	0xFE2
 15669                           fsr1l	equ	0xFE1
 15670                           bsr	equ	0xFE0
 15671                           indf2	equ	0xFDF
 15672                           postinc2	equ	0xFDE
 15673                           postdec2	equ	0xFDD
 15674                           fsr2h	equ	0xFDA
 15675                           fsr2l	equ	0xFD9
 15676                           status	equ	0xFD8
 15677                           
 15678 ;; *************** function _EUSART1_Erreur_Get *****************
 15679 ;; Defined at:
 15680 ;;		line 585 in file "eusart.c"
 15681 ;; Parameters:    Size  Location     Type
 15682 ;;		None
 15683 ;; Auto vars:     Size  Location     Type
 15684 ;;		None
 15685 ;; Return value:  Size  Location     Type
 15686 ;;                  1    wreg      void 
 15687 ;; Registers used:
 15688 ;;		None
 15689 ;; Tracked objects:
 15690 ;;		On entry : 0/1
 15691 ;;		On exit  : 0/0
 15692 ;;		Unchanged: 0/0
 15693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15694 ;;      Params:         0       0       0       0
 15695 ;;      Locals:         0       0       0       0
 15696 ;;      Temps:          0       0       0       0
 15697 ;;      Totals:         0       0       0       0
 15698 ;;Total ram usage:        0 bytes
 15699 ;; Hardware stack levels used:    1
 15700 ;; Hardware stack levels required when called:    5
 15701 ;; This function calls:
 15702 ;;		Nothing
 15703 ;; This function is called by:
 15704 ;;		_EUSART1_Receive_ISR
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           	psect	text97
 15709  00272C                     __ptext97:
 15710                           	opt stack 0
 15711  00272C                     _EUSART1_Erreur_Get:
 15712                           	opt stack 13
 15713                           
 15714                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 15715                           
 15716                           ;incstack = 0
 15717  00272C  848B               	bsf	3979,2,c	;volatile
 15718                           
 15719                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 15720  00272E  948B               	bcf	3979,2,c	;volatile
 15721                           
 15722                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 15723  002730  848B               	bsf	3979,2,c	;volatile
 15724  002732  0012               	return		;funcret
 15725  002734                     __end_of_EUSART1_Erreur_Get:
 15726                           	opt stack 0
 15727                           tblptru	equ	0xFF8
 15728                           tblptrh	equ	0xFF7
 15729                           tblptrl	equ	0xFF6
 15730                           tablat	equ	0xFF5
 15731                           prodh	equ	0xFF4
 15732                           prodl	equ	0xFF3
 15733                           intcon	equ	0xFF2
 15734                           intcon2	equ	0xFF1
 15735                           intcon3	equ	0xFF0
 15736                           postinc0	equ	0xFEE
 15737                           wreg	equ	0xFE8
 15738                           indf1	equ	0xFE7
 15739                           postdec1	equ	0xFE5
 15740                           fsr1h	equ	0xFE2
 15741                           fsr1l	equ	0xFE1
 15742                           bsr	equ	0xFE0
 15743                           indf2	equ	0xFDF
 15744                           postinc2	equ	0xFDE
 15745                           postdec2	equ	0xFDD
 15746                           fsr2h	equ	0xFDA
 15747                           fsr2l	equ	0xFD9
 15748                           status	equ	0xFD8
 15749                           
 15750 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 15751 ;; Defined at:
 15752 ;;		line 955 in file "interrupt.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;		None
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;		None
 15757 ;; Return value:  Size  Location     Type
 15758 ;;                  1    wreg      void 
 15759 ;; Registers used:
 15760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15766 ;;      Params:         0       0       0       0
 15767 ;;      Locals:         0       0       0       0
 15768 ;;      Temps:          2       0       0       0
 15769 ;;      Totals:         2       0       0       0
 15770 ;;Total ram usage:        2 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:    4
 15773 ;; This function calls:
 15774 ;;		i2_IRQ_CAPOT
 15775 ;;		i2_IRQ_I_MOTEUR_1
 15776 ;;		i2_IRQ_I_MOTEUR_2
 15777 ;;		i2_IRQ_TIMER2
 15778 ;; This function is called by:
 15779 ;;		Interrupt level 2
 15780 ;; This function uses a non-reentrant model
 15781 ;;
 15782                           
 15783                           	psect	intcode
 15784  000008                     __pintcode:
 15785                           	opt stack 0
 15786  000008                     _HIGH_PRIORITY_IRQ:
 15787                           	opt stack 11
 15788                           
 15789                           ;incstack = 0
 15790  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15791  00000A  EF53  F010         	goto	int_func
 15792                           tblptru	equ	0xFF8
 15793                           tblptrh	equ	0xFF7
 15794                           tblptrl	equ	0xFF6
 15795                           tablat	equ	0xFF5
 15796                           prodh	equ	0xFF4
 15797                           prodl	equ	0xFF3
 15798                           intcon	equ	0xFF2
 15799                           intcon2	equ	0xFF1
 15800                           intcon3	equ	0xFF0
 15801                           postinc0	equ	0xFEE
 15802                           wreg	equ	0xFE8
 15803                           indf1	equ	0xFE7
 15804                           postdec1	equ	0xFE5
 15805                           fsr1h	equ	0xFE2
 15806                           fsr1l	equ	0xFE1
 15807                           bsr	equ	0xFE0
 15808                           indf2	equ	0xFDF
 15809                           postinc2	equ	0xFDE
 15810                           postdec2	equ	0xFDD
 15811                           fsr2h	equ	0xFDA
 15812                           fsr2l	equ	0xFD9
 15813                           status	equ	0xFD8
 15814                           
 15815                           	psect	intcode_body
 15816  0020A6                     __pintcode_body:
 15817                           	opt stack 11
 15818  0020A6                     int_func:
 15819                           	opt stack 11
 15820  0020A6  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 15821  0020AA  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 15822                           
 15823                           ;interrupt.c: 958: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 15824  0020AE  B29D               	btfsc	3997,1,c	;volatile
 15825  0020B0  A29E               	btfss	3998,1,c	;volatile
 15826  0020B2  D003               	goto	i2l706
 15827                           
 15828                           ;interrupt.c: 959: IRQ_TIMER2();
 15829  0020B4  ECAA  F013         	call	i2_IRQ_TIMER2	;wreg free
 15830                           
 15831                           ;interrupt.c: 965: }
 15832  0020B8  D011               	goto	i2l713
 15833  0020BA                     i2l706:
 15834                           
 15835                           ;interrupt.c: 966: else
 15836                           ;interrupt.c: 967: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 15837  0020BA  B8F2               	btfsc	intcon,4,c	;volatile
 15838  0020BC  A2F2               	btfss	intcon,1,c	;volatile
 15839  0020BE  D003               	goto	i2l708
 15840                           
 15841                           ;interrupt.c: 968: {
 15842                           ;interrupt.c: 969: IRQ_CAPOT();
 15843  0020C0  EC9A  F013         	call	i2_IRQ_CAPOT	;wreg free
 15844                           
 15845                           ;interrupt.c: 984: } else
 15846  0020C4  D00B               	goto	i2l713
 15847  0020C6                     i2l708:
 15848                           
 15849                           ;interrupt.c: 985: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 15850  0020C6  B6F0               	btfsc	intcon3,3,c	;volatile
 15851  0020C8  A0F0               	btfss	intcon3,0,c	;volatile
 15852  0020CA  D003               	goto	i2l710
 15853                           
 15854                           ;interrupt.c: 991: IRQ_I_MOTEUR_1();
 15855  0020CC  ECC4  F012         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 15856                           
 15857                           ;interrupt.c: 1003: } else
 15858  0020D0  D005               	goto	i2l713
 15859  0020D2                     i2l710:
 15860                           
 15861                           ;interrupt.c: 1004: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 15862  0020D2  B8F0               	btfsc	intcon3,4,c	;volatile
 15863  0020D4  A2F0               	btfss	intcon3,1,c	;volatile
 15864  0020D6  D002               	goto	i2l713
 15865                           
 15866                           ;interrupt.c: 1010: IRQ_I_MOTEUR_2();
 15867  0020D8  ECB9  F012         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 15868  0020DC                     i2l713:
 15869  0020DC  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 15870  0020E0  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 15871  0020E4  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15872  0020E6  0011               	retfie		f
 15873  0020E8                     __end_of_HIGH_PRIORITY_IRQ:
 15874                           	opt stack 0
 15875                           tblptru	equ	0xFF8
 15876                           tblptrh	equ	0xFF7
 15877                           tblptrl	equ	0xFF6
 15878                           tablat	equ	0xFF5
 15879                           prodh	equ	0xFF4
 15880                           prodl	equ	0xFF3
 15881                           intcon	equ	0xFF2
 15882                           intcon2	equ	0xFF1
 15883                           intcon3	equ	0xFF0
 15884                           postinc0	equ	0xFEE
 15885                           wreg	equ	0xFE8
 15886                           indf1	equ	0xFE7
 15887                           postdec1	equ	0xFE5
 15888                           fsr1h	equ	0xFE2
 15889                           fsr1l	equ	0xFE1
 15890                           bsr	equ	0xFE0
 15891                           indf2	equ	0xFDF
 15892                           postinc2	equ	0xFDE
 15893                           postdec2	equ	0xFDD
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8
 15897                           
 15898 ;; *************** function i2_IRQ_TIMER2 *****************
 15899 ;; Defined at:
 15900 ;;		line 883 in file "interrupt.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;		None
 15903 ;; Auto vars:     Size  Location     Type
 15904 ;;		None
 15905 ;; Return value:  Size  Location     Type
 15906 ;;                  1    wreg      void 
 15907 ;; Registers used:
 15908 ;;		None
 15909 ;; Tracked objects:
 15910 ;;		On entry : 0/0
 15911 ;;		On exit  : 0/0
 15912 ;;		Unchanged: 0/0
 15913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15914 ;;      Params:         0       0       0       0
 15915 ;;      Locals:         0       0       0       0
 15916 ;;      Temps:          0       0       0       0
 15917 ;;      Totals:         0       0       0       0
 15918 ;;Total ram usage:        0 bytes
 15919 ;; Hardware stack levels used:    1
 15920 ;; This function calls:
 15921 ;;		Nothing
 15922 ;; This function is called by:
 15923 ;;		_HIGH_PRIORITY_IRQ
 15924 ;; This function uses a non-reentrant model
 15925 ;;
 15926                           
 15927                           	psect	text99
 15928  002754                     __ptext99:
 15929                           	opt stack 0
 15930  002754                     i2_IRQ_TIMER2:
 15931                           	opt stack 14
 15932                           
 15933                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 15934                           
 15935                           ;incstack = 0
 15936  002754  929E               	bcf	3998,1,c	;volatile
 15937                           
 15938                           ;interrupt.c: 887: GODONE = 1;
 15939  002756  82C2               	bsf	4034,1,c	;volatile
 15940  002758  0012               	return		;funcret
 15941  00275A                     __end_ofi2_IRQ_TIMER2:
 15942                           	opt stack 0
 15943                           tblptru	equ	0xFF8
 15944                           tblptrh	equ	0xFF7
 15945                           tblptrl	equ	0xFF6
 15946                           tablat	equ	0xFF5
 15947                           prodh	equ	0xFF4
 15948                           prodl	equ	0xFF3
 15949                           intcon	equ	0xFF2
 15950                           intcon2	equ	0xFF1
 15951                           intcon3	equ	0xFF0
 15952                           postinc0	equ	0xFEE
 15953                           wreg	equ	0xFE8
 15954                           indf1	equ	0xFE7
 15955                           postdec1	equ	0xFE5
 15956                           fsr1h	equ	0xFE2
 15957                           fsr1l	equ	0xFE1
 15958                           bsr	equ	0xFE0
 15959                           indf2	equ	0xFDF
 15960                           postinc2	equ	0xFDE
 15961                           postdec2	equ	0xFDD
 15962                           fsr2h	equ	0xFDA
 15963                           fsr2l	equ	0xFD9
 15964                           status	equ	0xFD8
 15965                           
 15966 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15967 ;; Defined at:
 15968 ;;		line 909 in file "interrupt.c"
 15969 ;; Parameters:    Size  Location     Type
 15970 ;;		None
 15971 ;; Auto vars:     Size  Location     Type
 15972 ;;		None
 15973 ;; Return value:  Size  Location     Type
 15974 ;;                  1    wreg      void 
 15975 ;; Registers used:
 15976 ;;		wreg, status,2, status,0
 15977 ;; Tracked objects:
 15978 ;;		On entry : 0/0
 15979 ;;		On exit  : 0/0
 15980 ;;		Unchanged: 0/0
 15981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15982 ;;      Params:         0       0       0       0
 15983 ;;      Locals:         0       0       0       0
 15984 ;;      Temps:          0       0       0       0
 15985 ;;      Totals:         0       0       0       0
 15986 ;;Total ram usage:        0 bytes
 15987 ;; Hardware stack levels used:    1
 15988 ;; This function calls:
 15989 ;;		Nothing
 15990 ;; This function is called by:
 15991 ;;		_HIGH_PRIORITY_IRQ
 15992 ;; This function uses a non-reentrant model
 15993 ;;
 15994                           
 15995                           	psect	text100
 15996  002572                     __ptext100:
 15997                           	opt stack 0
 15998  002572                     i2_IRQ_I_MOTEUR_2:
 15999                           	opt stack 14
 16000                           
 16001                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 16002                           
 16003                           ;incstack = 0
 16004  002572  928B               	bcf	3979,1,c	;volatile
 16005                           
 16006                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 16007  002574  D001               	goto	i2l4768
 16008  002576                     i2l699:
 16009  002576  F000               	nop	
 16010  002578                     i2l4768:
 16011  002578  50CC               	movf	4044,w,c	;volatile
 16012  00257A  E1FD               	bnz	i2l699
 16013                           
 16014                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 16015  00257C  828B               	bsf	3979,1,c	;volatile
 16016                           
 16017                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 16018  00257E  748B               	btg	3979,2,c	;volatile
 16019                           
 16020                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 16021  002580  92F0               	bcf	intcon3,1,c	;volatile
 16022                           
 16023                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 16024  002582  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 16025  002584  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 16026  002586  0012               	return		;funcret
 16027  002588                     __end_ofi2_IRQ_I_MOTEUR_2:
 16028                           	opt stack 0
 16029                           tblptru	equ	0xFF8
 16030                           tblptrh	equ	0xFF7
 16031                           tblptrl	equ	0xFF6
 16032                           tablat	equ	0xFF5
 16033                           prodh	equ	0xFF4
 16034                           prodl	equ	0xFF3
 16035                           intcon	equ	0xFF2
 16036                           intcon2	equ	0xFF1
 16037                           intcon3	equ	0xFF0
 16038                           postinc0	equ	0xFEE
 16039                           wreg	equ	0xFE8
 16040                           indf1	equ	0xFE7
 16041                           postdec1	equ	0xFE5
 16042                           fsr1h	equ	0xFE2
 16043                           fsr1l	equ	0xFE1
 16044                           bsr	equ	0xFE0
 16045                           indf2	equ	0xFDF
 16046                           postinc2	equ	0xFDE
 16047                           postdec2	equ	0xFDD
 16048                           fsr2h	equ	0xFDA
 16049                           fsr2l	equ	0xFD9
 16050                           status	equ	0xFD8
 16051                           
 16052 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 16053 ;; Defined at:
 16054 ;;		line 895 in file "interrupt.c"
 16055 ;; Parameters:    Size  Location     Type
 16056 ;;		None
 16057 ;; Auto vars:     Size  Location     Type
 16058 ;;		None
 16059 ;; Return value:  Size  Location     Type
 16060 ;;                  1    wreg      void 
 16061 ;; Registers used:
 16062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16063 ;; Tracked objects:
 16064 ;;		On entry : 0/0
 16065 ;;		On exit  : 0/0
 16066 ;;		Unchanged: 0/0
 16067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16068 ;;      Params:         0       0       0       0
 16069 ;;      Locals:         0       0       0       0
 16070 ;;      Temps:          0       0       0       0
 16071 ;;      Totals:         0       0       0       0
 16072 ;;Total ram usage:        0 bytes
 16073 ;; Hardware stack levels used:    1
 16074 ;; Hardware stack levels required when called:    3
 16075 ;; This function calls:
 16076 ;;		i2_Alarme_On
 16077 ;; This function is called by:
 16078 ;;		_HIGH_PRIORITY_IRQ
 16079 ;; This function uses a non-reentrant model
 16080 ;;
 16081                           
 16082                           	psect	text101
 16083  002588                     __ptext101:
 16084                           	opt stack 0
 16085  002588                     i2_IRQ_I_MOTEUR_1:
 16086                           	opt stack 11
 16087                           
 16088                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 16089                           
 16090                           ;incstack = 0
 16091  002588  90F0               	bcf	intcon3,0,c	;volatile
 16092                           
 16093                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 16094  00258A  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 16095                           
 16096                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 16097  00258C  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 16098  00258E  A4D8               	btfss	status,2,c
 16099  002590  0012               	return	
 16100                           
 16101                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 16102  002592  848B               	bsf	3979,2,c	;volatile
 16103                           
 16104                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 16105  002594  908B               	bcf	3979,0,c	;volatile
 16106                           
 16107                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 16108  002596  928B               	bcf	3979,1,c	;volatile
 16109                           
 16110                           ;interrupt.c: 904: Alarme_On(1);
 16111  002598  0E01               	movlw	1
 16112  00259A  EF55  F013         	goto	i2_Alarme_On
 16113  00259E                     __end_ofi2_IRQ_I_MOTEUR_1:
 16114                           	opt stack 0
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           intcon2	equ	0xFF1
 16123                           intcon3	equ	0xFF0
 16124                           postinc0	equ	0xFEE
 16125                           wreg	equ	0xFE8
 16126                           indf1	equ	0xFE7
 16127                           postdec1	equ	0xFE5
 16128                           fsr1h	equ	0xFE2
 16129                           fsr1l	equ	0xFE1
 16130                           bsr	equ	0xFE0
 16131                           indf2	equ	0xFDF
 16132                           postinc2	equ	0xFDE
 16133                           postdec2	equ	0xFDD
 16134                           fsr2h	equ	0xFDA
 16135                           fsr2l	equ	0xFD9
 16136                           status	equ	0xFD8
 16137                           
 16138 ;; *************** function i2_IRQ_CAPOT *****************
 16139 ;; Defined at:
 16140 ;;		line 890 in file "interrupt.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;		None
 16143 ;; Auto vars:     Size  Location     Type
 16144 ;;		None
 16145 ;; Return value:  Size  Location     Type
 16146 ;;                  1    wreg      void 
 16147 ;; Registers used:
 16148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16149 ;; Tracked objects:
 16150 ;;		On entry : 0/0
 16151 ;;		On exit  : 0/0
 16152 ;;		Unchanged: 0/0
 16153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16154 ;;      Params:         0       0       0       0
 16155 ;;      Locals:         0       0       0       0
 16156 ;;      Temps:          0       0       0       0
 16157 ;;      Totals:         0       0       0       0
 16158 ;;Total ram usage:        0 bytes
 16159 ;; Hardware stack levels used:    1
 16160 ;; Hardware stack levels required when called:    3
 16161 ;; This function calls:
 16162 ;;		i2_Alarme_On
 16163 ;; This function is called by:
 16164 ;;		_HIGH_PRIORITY_IRQ
 16165 ;; This function uses a non-reentrant model
 16166 ;;
 16167                           
 16168                           	psect	text102
 16169  002734                     __ptext102:
 16170                           	opt stack 0
 16171  002734                     i2_IRQ_CAPOT:
 16172                           	opt stack 11
 16173                           
 16174                           ;interrupt.c: 891: INT0IF = 0;
 16175                           
 16176                           ;incstack = 0
 16177  002734  92F2               	bcf	intcon,1,c	;volatile
 16178                           
 16179                           ;interrupt.c: 892: Alarme_On(4);
 16180  002736  0E04               	movlw	4
 16181  002738  EF55  F013         	goto	i2_Alarme_On
 16182  00273C                     __end_ofi2_IRQ_CAPOT:
 16183                           	opt stack 0
 16184                           tblptru	equ	0xFF8
 16185                           tblptrh	equ	0xFF7
 16186                           tblptrl	equ	0xFF6
 16187                           tablat	equ	0xFF5
 16188                           prodh	equ	0xFF4
 16189                           prodl	equ	0xFF3
 16190                           intcon	equ	0xFF2
 16191                           intcon2	equ	0xFF1
 16192                           intcon3	equ	0xFF0
 16193                           postinc0	equ	0xFEE
 16194                           wreg	equ	0xFE8
 16195                           indf1	equ	0xFE7
 16196                           postdec1	equ	0xFE5
 16197                           fsr1h	equ	0xFE2
 16198                           fsr1l	equ	0xFE1
 16199                           bsr	equ	0xFE0
 16200                           indf2	equ	0xFDF
 16201                           postinc2	equ	0xFDE
 16202                           postdec2	equ	0xFDD
 16203                           fsr2h	equ	0xFDA
 16204                           fsr2l	equ	0xFD9
 16205                           status	equ	0xFD8
 16206                           
 16207 ;; *************** function i2_Alarme_On *****************
 16208 ;; Defined at:
 16209 ;;		line 18 in file "alarme.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;  alarme_new_v    1    wreg     unsigned char 
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 16214 ;; Return value:  Size  Location     Type
 16215 ;;                  1    wreg      void 
 16216 ;; Registers used:
 16217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16223 ;;      Params:         0       0       0       0
 16224 ;;      Locals:         1       0       0       0
 16225 ;;      Temps:          0       0       0       0
 16226 ;;      Totals:         1       0       0       0
 16227 ;;Total ram usage:        1 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    2
 16230 ;; This function calls:
 16231 ;;		i2_Coupe_Moteur
 16232 ;;		i2_Etat_Update
 16233 ;; This function is called by:
 16234 ;;		i2_IRQ_CAPOT
 16235 ;;		i2_IRQ_I_MOTEUR_1
 16236 ;; This function uses a non-reentrant model
 16237 ;;
 16238                           
 16239                           	psect	text103
 16240  0026AA                     __ptext103:
 16241                           	opt stack 0
 16242  0026AA                     i2_Alarme_On:
 16243                           	opt stack 11
 16244                           
 16245                           ;incstack = 0
 16246                           ;i2Alarme_On@alarme_new_value stored from wreg
 16247  0026AA  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 16248                           
 16249                           ;alarme.c: 22: Etat_Update(1);
 16250  0026AC  0E01               	movlw	1
 16251  0026AE  EC53  F012         	call	i2_Etat_Update
 16252                           
 16253                           ;alarme.c: 23: Alarme = alarme_new_value;
 16254  0026B2  C002  F0A9         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 16255                           
 16256                           ;alarme.c: 24: Coupe_Moteur();
 16257  0026B6  EFF7  F012         	goto	i2_Coupe_Moteur	;wreg free
 16258  0026BA                     __end_ofi2_Alarme_On:
 16259                           	opt stack 0
 16260                           tblptru	equ	0xFF8
 16261                           tblptrh	equ	0xFF7
 16262                           tblptrl	equ	0xFF6
 16263                           tablat	equ	0xFF5
 16264                           prodh	equ	0xFF4
 16265                           prodl	equ	0xFF3
 16266                           intcon	equ	0xFF2
 16267                           intcon2	equ	0xFF1
 16268                           intcon3	equ	0xFF0
 16269                           postinc0	equ	0xFEE
 16270                           wreg	equ	0xFE8
 16271                           indf1	equ	0xFE7
 16272                           postdec1	equ	0xFE5
 16273                           fsr1h	equ	0xFE2
 16274                           fsr1l	equ	0xFE1
 16275                           bsr	equ	0xFE0
 16276                           indf2	equ	0xFDF
 16277                           postinc2	equ	0xFDE
 16278                           postdec2	equ	0xFDD
 16279                           fsr2h	equ	0xFDA
 16280                           fsr2l	equ	0xFD9
 16281                           status	equ	0xFD8
 16282                           
 16283 ;; *************** function i2_Etat_Update *****************
 16284 ;; Defined at:
 16285 ;;		line 74 in file "action.c"
 16286 ;; Parameters:    Size  Location     Type
 16287 ;;  etat_new_val    1    wreg     unsigned char 
 16288 ;; Auto vars:     Size  Location     Type
 16289 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 16290 ;; Return value:  Size  Location     Type
 16291 ;;                  1    wreg      void 
 16292 ;; Registers used:
 16293 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16294 ;; Tracked objects:
 16295 ;;		On entry : 0/0
 16296 ;;		On exit  : 0/0
 16297 ;;		Unchanged: 0/0
 16298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16299 ;;      Params:         0       0       0       0
 16300 ;;      Locals:         1       0       0       0
 16301 ;;      Temps:          0       0       0       0
 16302 ;;      Totals:         1       0       0       0
 16303 ;;Total ram usage:        1 bytes
 16304 ;; Hardware stack levels used:    1
 16305 ;; This function calls:
 16306 ;;		Nothing
 16307 ;; This function is called by:
 16308 ;;		i2_Alarme_On
 16309 ;; This function uses a non-reentrant model
 16310 ;;
 16311                           
 16312                           	psect	text104
 16313  0024A6                     __ptext104:
 16314                           	opt stack 0
 16315  0024A6                     i2_Etat_Update:
 16316                           	opt stack 12
 16317                           
 16318                           ;incstack = 0
 16319                           ;i2Etat_Update@etat_new_value stored from wreg
 16320  0024A6  6E01               	movwf	i2Etat_Update@etat_new_value,c
 16321                           
 16322                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 16323  0024A8  504C               	movf	_Etat_Precedent_Index,w,c
 16324  0024AA  0F6A               	addlw	low _Etat_Log
 16325  0024AC  6ED9               	movwf	fsr2l,c
 16326  0024AE  6ADA               	clrf	fsr2h,c
 16327  0024B0  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 16328                           
 16329                           ;action.c: 76: Etat = etat_new_value;
 16330  0024B4  C001  F0AA         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 16331                           
 16332                           ;action.c: 77: Etat_Precedent_Index++;
 16333  0024B8  2A4C               	incf	_Etat_Precedent_Index,f,c
 16334                           
 16335                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 16336  0024BA  0E0A               	movlw	10
 16337  0024BC  184C               	xorwf	_Etat_Precedent_Index,w,c
 16338  0024BE  B4D8               	btfsc	status,2,c
 16339                           
 16340                           ;action.c: 79: Etat_Precedent_Index = 0;
 16341  0024C0  6A4C               	clrf	_Etat_Precedent_Index,c
 16342  0024C2  0012               	return		;funcret
 16343  0024C4                     __end_ofi2_Etat_Update:
 16344                           	opt stack 0
 16345                           tblptru	equ	0xFF8
 16346                           tblptrh	equ	0xFF7
 16347                           tblptrl	equ	0xFF6
 16348                           tablat	equ	0xFF5
 16349                           prodh	equ	0xFF4
 16350                           prodl	equ	0xFF3
 16351                           intcon	equ	0xFF2
 16352                           intcon2	equ	0xFF1
 16353                           intcon3	equ	0xFF0
 16354                           postinc0	equ	0xFEE
 16355                           wreg	equ	0xFE8
 16356                           indf1	equ	0xFE7
 16357                           postdec1	equ	0xFE5
 16358                           fsr1h	equ	0xFE2
 16359                           fsr1l	equ	0xFE1
 16360                           bsr	equ	0xFE0
 16361                           indf2	equ	0xFDF
 16362                           postinc2	equ	0xFDE
 16363                           postdec2	equ	0xFDD
 16364                           fsr2h	equ	0xFDA
 16365                           fsr2l	equ	0xFD9
 16366                           status	equ	0xFD8
 16367                           
 16368 ;; *************** function i2_Coupe_Moteur *****************
 16369 ;; Defined at:
 16370 ;;		line 309 in file "action.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;		None
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;		None
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  1    wreg      void 
 16377 ;; Registers used:
 16378 ;;		cstack
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16384 ;;      Params:         0       0       0       0
 16385 ;;      Locals:         0       0       0       0
 16386 ;;      Temps:          0       0       0       0
 16387 ;;      Totals:         0       0       0       0
 16388 ;;Total ram usage:        0 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    1
 16391 ;; This function calls:
 16392 ;;		i2_TIMER2_Off
 16393 ;; This function is called by:
 16394 ;;		i2_Alarme_On
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           	psect	text105
 16399  0025EE                     __ptext105:
 16400                           	opt stack 0
 16401  0025EE                     i2_Coupe_Moteur:
 16402                           	opt stack 11
 16403                           
 16404                           ;action.c: 310: TIMER2_Off();
 16405                           
 16406                           ;incstack = 0
 16407  0025EE  ECAD  F013         	call	i2_TIMER2_Off	;wreg free
 16408                           
 16409                           ;action.c: 322: LATCbits.LATC0 = 0;
 16410  0025F2  908B               	bcf	3979,0,c	;volatile
 16411                           
 16412                           ;action.c: 323: LATCbits.LATC1 = 0;
 16413  0025F4  928B               	bcf	3979,1,c	;volatile
 16414                           
 16415                           ;action.c: 324: OVDCOND = 0b00000000;
 16416  0025F6  6A6B               	clrf	3947,c	;volatile
 16417                           
 16418                           ;action.c: 325: LATD4 = 0;LATD5 = 0;
 16419  0025F8  988C               	bcf	3980,4,c	;volatile
 16420  0025FA  9A8C               	bcf	3980,5,c	;volatile
 16421                           
 16422                           ;action.c: 326: LATD6 = 0;LATD7 = 0;
 16423  0025FC  9C8C               	bcf	3980,6,c	;volatile
 16424  0025FE  9E8C               	bcf	3980,7,c	;volatile
 16425  002600  0012               	return		;funcret
 16426  002602                     __end_ofi2_Coupe_Moteur:
 16427                           	opt stack 0
 16428                           tblptru	equ	0xFF8
 16429                           tblptrh	equ	0xFF7
 16430                           tblptrl	equ	0xFF6
 16431                           tablat	equ	0xFF5
 16432                           prodh	equ	0xFF4
 16433                           prodl	equ	0xFF3
 16434                           intcon	equ	0xFF2
 16435                           intcon2	equ	0xFF1
 16436                           intcon3	equ	0xFF0
 16437                           postinc0	equ	0xFEE
 16438                           wreg	equ	0xFE8
 16439                           indf1	equ	0xFE7
 16440                           postdec1	equ	0xFE5
 16441                           fsr1h	equ	0xFE2
 16442                           fsr1l	equ	0xFE1
 16443                           bsr	equ	0xFE0
 16444                           indf2	equ	0xFDF
 16445                           postinc2	equ	0xFDE
 16446                           postdec2	equ	0xFDD
 16447                           fsr2h	equ	0xFDA
 16448                           fsr2l	equ	0xFD9
 16449                           status	equ	0xFD8
 16450                           
 16451 ;; *************** function i2_TIMER2_Off *****************
 16452 ;; Defined at:
 16453 ;;		line 165 in file "timer.c"
 16454 ;; Parameters:    Size  Location     Type
 16455 ;;		None
 16456 ;; Auto vars:     Size  Location     Type
 16457 ;;		None
 16458 ;; Return value:  Size  Location     Type
 16459 ;;                  1    wreg      void 
 16460 ;; Registers used:
 16461 ;;		None
 16462 ;; Tracked objects:
 16463 ;;		On entry : 0/0
 16464 ;;		On exit  : 0/0
 16465 ;;		Unchanged: 0/0
 16466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16467 ;;      Params:         0       0       0       0
 16468 ;;      Locals:         0       0       0       0
 16469 ;;      Temps:          0       0       0       0
 16470 ;;      Totals:         0       0       0       0
 16471 ;;Total ram usage:        0 bytes
 16472 ;; Hardware stack levels used:    1
 16473 ;; This function calls:
 16474 ;;		Nothing
 16475 ;; This function is called by:
 16476 ;;		i2_Coupe_Moteur
 16477 ;; This function uses a non-reentrant model
 16478 ;;
 16479                           
 16480                           	psect	text106
 16481  00275A                     __ptext106:
 16482                           	opt stack 0
 16483  00275A                     i2_TIMER2_Off:
 16484                           	opt stack 11
 16485                           
 16486                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 16487                           
 16488                           ;incstack = 0
 16489  00275A  929D               	bcf	3997,1,c	;volatile
 16490                           
 16491                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 16492  00275C  929E               	bcf	3998,1,c	;volatile
 16493  00275E  0012               	return		;funcret
 16494  002760                     __end_ofi2_TIMER2_Off:
 16495                           	opt stack 0
 16496                           tblptru	equ	0xFF8
 16497                           tblptrh	equ	0xFF7
 16498                           tblptrl	equ	0xFF6
 16499                           tablat	equ	0xFF5
 16500                           prodh	equ	0xFF4
 16501                           prodl	equ	0xFF3
 16502                           intcon	equ	0xFF2
 16503                           intcon2	equ	0xFF1
 16504                           intcon3	equ	0xFF0
 16505                           postinc0	equ	0xFEE
 16506                           wreg	equ	0xFE8
 16507                           indf1	equ	0xFE7
 16508                           postdec1	equ	0xFE5
 16509                           fsr1h	equ	0xFE2
 16510                           fsr1l	equ	0xFE1
 16511                           bsr	equ	0xFE0
 16512                           indf2	equ	0xFDF
 16513                           postinc2	equ	0xFDE
 16514                           postdec2	equ	0xFDD
 16515                           fsr2h	equ	0xFDA
 16516                           fsr2l	equ	0xFD9
 16517                           status	equ	0xFD8
 16518                           tblptru	equ	0xFF8
 16519                           tblptrh	equ	0xFF7
 16520                           tblptrl	equ	0xFF6
 16521                           tablat	equ	0xFF5
 16522                           prodh	equ	0xFF4
 16523                           prodl	equ	0xFF3
 16524                           intcon	equ	0xFF2
 16525                           intcon2	equ	0xFF1
 16526                           intcon3	equ	0xFF0
 16527                           postinc0	equ	0xFEE
 16528                           wreg	equ	0xFE8
 16529                           indf1	equ	0xFE7
 16530                           postdec1	equ	0xFE5
 16531                           fsr1h	equ	0xFE2
 16532                           fsr1l	equ	0xFE1
 16533                           bsr	equ	0xFE0
 16534                           indf2	equ	0xFDF
 16535                           postinc2	equ	0xFDE
 16536                           postdec2	equ	0xFDD
 16537                           fsr2h	equ	0xFDA
 16538                           fsr2l	equ	0xFD9
 16539                           status	equ	0xFD8
 16540                           
 16541                           	psect	rparam
 16542  0000                     tblptru	equ	0xFF8
 16543                           tblptrh	equ	0xFF7
 16544                           tblptrl	equ	0xFF6
 16545                           tablat	equ	0xFF5
 16546                           prodh	equ	0xFF4
 16547                           prodl	equ	0xFF3
 16548                           intcon	equ	0xFF2
 16549                           intcon2	equ	0xFF1
 16550                           intcon3	equ	0xFF0
 16551                           postinc0	equ	0xFEE
 16552                           wreg	equ	0xFE8
 16553                           indf1	equ	0xFE7
 16554                           postdec1	equ	0xFE5
 16555                           fsr1h	equ	0xFE2
 16556                           fsr1l	equ	0xFE1
 16557                           bsr	equ	0xFE0
 16558                           indf2	equ	0xFDF
 16559                           postinc2	equ	0xFDE
 16560                           postdec2	equ	0xFDD
 16561                           fsr2h	equ	0xFDA
 16562                           fsr2l	equ	0xFD9
 16563                           status	equ	0xFD8
 16564                           
 16565                           	psect	temp
 16566  000051                     btemp:
 16567                           	opt stack 0
 16568  000051                     	ds	1
 16569  0000                     int$flags	set	btemp
 16570                           tblptru	equ	0xFF8
 16571                           tblptrh	equ	0xFF7
 16572                           tblptrl	equ	0xFF6
 16573                           tablat	equ	0xFF5
 16574                           prodh	equ	0xFF4
 16575                           prodl	equ	0xFF3
 16576                           intcon	equ	0xFF2
 16577                           intcon2	equ	0xFF1
 16578                           intcon3	equ	0xFF0
 16579                           postinc0	equ	0xFEE
 16580                           wreg	equ	0xFE8
 16581                           indf1	equ	0xFE7
 16582                           postdec1	equ	0xFE5
 16583                           fsr1h	equ	0xFE2
 16584                           fsr1l	equ	0xFE1
 16585                           bsr	equ	0xFE0
 16586                           indf2	equ	0xFDF
 16587                           postinc2	equ	0xFDE
 16588                           postdec2	equ	0xFDD
 16589                           fsr2h	equ	0xFDA
 16590                           fsr2l	equ	0xFD9
 16591                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         537
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     19     160
    BANK1           256      0     256
    BANK2           256     11     139

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Disparait->_Buzzer_Etat
    _IRQ_PION_Metal_Apparait->_Buzzer_Etat
    _IRQ_I_MOTEUR_1->_Alarme_On
    _IRQ_CAPOT->_Alarme_On
    _Alarme_On->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update
    _IRQ_PION_CHANGEMENT_ETAT->i1_Buzzer_Etat

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_IRQ_CAPOT->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update

Critical Paths under _main in BANK0

    _Cycle->_Mouvement_X
    _Cycle->_delay_s
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  186060
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  185961
                                             10 BANK2      1     1      0
                          _Alarme_On
                        _Buzzer_Etat
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   40091
                                              7 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26413
                          _Alarme_On
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   64782
                                             17 BANK0      2     0      2
                                              7 BANK2      1     1      0
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      31
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   37041
                          _Alarme_On
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2864
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     461
                                             55 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3786
                                             26 COMRAM    14     8      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3579
                                             40 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2833
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40422
                                              7 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13194
                                             17 BANK0      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26744
                                             17 BANK0      1     1      0
                          _Alarme_On
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13129
                                             63 COMRAM     3     3      0
                                             13 BANK0      4     4      0
                                              0 BANK2      7     0      7
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     465
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0      31
                        _Buzzer_Etat
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      31
                        _Buzzer_Etat
                          _TIMER5_On
 ---------------------------------------------------------------------------------
 (7) _TIMER5_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     335
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
           _IRQ_PION_CHANGEMENT_ETAT
                            _SPI_ISR
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _IRQ_PION_CHANGEMENT_ETAT                            0     0      0      22
                      i1_Buzzer_Etat
                       i1_TIMER5_Off
                        i1_TIMER5_On
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_On                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     132
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Alarme_On
       _Coupe_Moteur
         _TIMER2_Off
       _Etat_Update
     _Buzzer_Etat
     _Coupe_Moteur
       _TIMER2_Off
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Buzzer_Etat
           _TIMER5_On
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _IRQ_PION_CHANGEMENT_ETAT
     i1_Buzzer_Etat
     i1_TIMER5_Off
     i1_TIMER5_On
   _SPI_ISR
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      B      8B       9       54.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      A0       5      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27B       3        0.0%
DATA                 0      0     27B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Apr 30 10:19:10 2019

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l248 0C58  
                                                   l610 1BB6  
                                                   l531 26D2  
                                                   l259 0CF0  
                                                   l283 212A  
                                                   l630 0E9C  
                                                   l622 0E16  
                                                   l607 1B76  
                                                   l624 0E4A  
                                                   l637 0F20  
                                                   l577 2464  
                                                   l588 1E4A  
                                                   l699 254A  
                                                   l983 21B4  
                                                   _GIE 007F97  
                                                   l998 2094  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009F  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 2760  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0288  
                                          ___ftdiv@cntr 0032  
                                          ___ftdiv@sign 0037  
                                                  l1024 1A20  
                                                  l1040 1192  
                                                  l1017 19BE  
                                                  l1035 1976  
                                                  l1028 1914  
                                                  l1058 127C  
                                                  l2051 16F6  
                                                  l1059 1238  
                                                  l2053 173E  
                                                  l1502 07C2  
                                                  l1430 059C  
                                                  l1328 1770  
                                                  l1504 07D8  
                                                  l1432 05A0  
                                                  l1433 05A6  
                                                  l1434 05E0  
                                                  l1418 0470  
                                                  l1435 05E2  
                                                  l1427 0564  
                                                  l2067 143E  
                                                  l2173 2056  
                                                  l1462 06A6  
                                                  l2183 211C  
                                                  l1448 062E  
                                                  l1384 017A  
                                                  l1733 09B4  
                                                  l1718 08F4  
                                                  l1478 0758  
                                                  l1751 0A8A  
                                                  l1752 0A8E  
                                                  l1983 1ADA  
                                                  l8000 0478  
                                                  l8002 04A8  
                                                  l1995 1B38  
                                                  l8012 0552  
                                                  l8004 04AE  
                                                  l8014 0558  
                                                  l7400 254C  
                                                  l8120 0700  
                                                  l8104 06E2  
                                                  l8032 05F2  
                                                  l8024 05AC  
                                                  l8016 055E  
                                                  l8008 04C6  
                                                  l8130 0712  
                                                  l8026 05D4  
                                                  l9002 0BCC  
                                                  l7500 1BAE  
                                                  l8116 06FA  
                                                  l8108 06E8  
                                                  l8132 071E  
                                                  l8044 060A  
                                                  l8036 05F8  
                                                  l8142 0766  
                                                  l8134 0724  
                                                  l8230 1B00  
                                                  l9102 0D3E  
                                                  l9022 0C0E  
                                                  l7600 1C56  
                                                  l7520 0E68  
                                                  l7440 1E3A  
                                                  l7504 1BBE  
                                                  l8160 078C  
                                                  l8144 076C  
                                                  l8152 0774  
                                                  l8080 0682  
                                                  l8072 0670  
                                                  l8048 0610  
                                                  l8400 21DA  
                                                  l8320 13D6  
                                                  l9120 0D70  
                                                  l9112 0D4C  
                                                  _ADIF 007CF6  
                                                  l7530 0EC4  
                                                  l7514 0E3E  
                                                  l8162 0798  
                                                  l8154 0780  
                                                  l8138 0764  
                                                  l8058 0622  
                                                  l8402 21DE  
                                                  l8234 1B12  
                                                  l8226 1AE2  
                                                  l9130 0DC6  
                                                  l9122 0D86  
                                                  l9026 0C1A  
                                                  l9018 0BFC  
                                                  l7620 1C96  
                                                  l7612 1C80  
                                                  l7604 1C62  
                                                  l7524 0E70  
                                                  l7452 1E60  
                                                  l7444 1E44  
                                                  l7460 1E70  
                                                  l8180 07E6  
                                                  l8164 079E  
                                                  l8156 0786  
                                                  l8148 076E  
                                                  l8172 07B0  
                                                  l8084 0688  
                                                  l8068 066A  
                                                  l8412 21F6  
                                                  l8252 1B4A  
                                                  l8236 1B24  
                                                  l8228 1AEC  
                                                  l8316 13B6  
                                                  l9132 0DD6  
                                                  l9124 0D96  
                                                  l9060 0CA0  
                                                  l7606 1C6A  
                                                  l7542 0EF4  
                                                  l7534 0ECE  
                                                  l7446 1E50  
                                                  l7630 2026  
                                                  l8182 07EC  
                                                  l8174 07D0  
                                                  l8094 069A  
                                                  l8238 1B2E  
                                                  l9126 0DA6  
                                                  l9046 0C64  
                                                  l9038 0C46  
                                                  l7608 1C6E  
                                                  l7616 1C8A  
                                                  l7560 0F78  
                                                  l7552 0F52  
                                                  l7480 1B7A  
                                                  l7632 202E  
                                                  l7800 09F0  
                                                  l8168 07A4  
                                                  l8408 21EE  
                                                  l8272 2540  
                                                  l8280 16D6  
                                                  l8352 1614  
                                                  l9128 0DB6  
                                                  l9064 0CB2  
                                                  l9048 0C74  
                                                  l9136 0DE6  
                                                  l7538 0EEC  
                                                  l7474 1B6A  
                                                  l7642 204C  
                                                  l7634 2032  
                                                  l7650 20F4  
                                                  l8178 07DE  
                                                  l8434 2366  
                                                  l8370 1668  
                                                  l8354 161E  
                                                  l8426 25BE  
                                                  l9138 0E08  
                                                  l7740 17AE  
                                                  l7556 0F70  
                                                  l7548 0F48  
                                                  l7564 0FA4  
                                                  l7652 20FC  
                                                  l7820 0A20  
                                                  l7900 00F0  
                                                  l8188 07F8  
                                                  l8436 236A  
                                                  l8380 168C  
                                                  l9084 0CFC  
                                                  l9076 0CDE  
                                                  l7654 2100  
                                                  l7814 0A1C  
                                                  l7806 09F4  
                                                  l7830 0A48  
                                                  l7902 0106  
                                                  l8382 1690  
                                                  l8374 1678  
                                                  l8710 11D2  
                                                  l8614 21BC  
                                                  l9086 0D0C  
                                                  l7744 17C4  
                                                  l7736 177A  
                                                  l7488 1B8E  
                                                  l7832 0A52  
                                                  l7904 010E  
                                                  l8720 11EA  
                                                  l9096 0D1A  
                                                  l7658 2112  
                                                  l7578 24F4  
                                                  l7762 08FC  
                                                  l7930 01F4  
                                                  l8642 209C  
                                                  l8298 171A  
                                                  l8386 16A4  
                                                  l8378 1680  
                                                  l7596 1C4A  
                                                  l7780 0984  
                                                  l7772 092A  
                                                  l7756 08E0  
                                                  l7940 0234  
                                                  l7924 01C4  
                                                  l7916 017E  
                                                  l7908 014E  
                                                  l8396 21D4  
                                                  l8732 1218  
                                                  _ADON 007E10  
                                                  l7870 0AF6  
                                                  l7838 0A68  
                                                  l7766 0902  
                                                  l7942 0254  
                                                  l7934 020C  
                                                  l8590 1AC4  
                                                  l8726 1200  
                                                  l8718 11E6  
                                                  l8830 1968  
                                                  l7880 0B80  
                                                  l7872 0AFC  
                                                  l7864 0AE0  
                                                  l7848 0AA8  
                                                  l7856 0AC2  
                                                  l7784 0988  
                                                  l7928 01E8  
                                                  l8584 1AAE  
                                                  l8752 1258  
                                                  l8728 1208  
                                                  l8760 1274  
                                                  l8824 1956  
                                                  l7874 0B3E  
                                                  l7882 0B8A  
                                                  l7858 0AC8  
                                                  l7890 0BB4  
                                                  l7962 0330  
                                                  l7954 02CC  
                                                  l7946 0274  
                                                  l7938 022C  
                                                  l8586 1AB4  
                                                  l8658 234A  
                                                  l8746 1246  
                                                  l8738 122C  
                                                  l8914 1546  
                                                  l7796 09DC  
                                                  l7980 03B2  
                                                  l7972 036E  
                                                  l7964 0350  
                                                  l7956 02EC  
                                                  l7948 02A6  
                                                  l8756 1266  
                                                  l8684 1196  
                                                  l8772 25AA  
                                                  l7886 0B96  
                                                  l7958 030C  
                                                  l8862 19C2  
                                                  l7888 0B9C  
                                                  l7992 0452  
                                                  l7976 0390  
                                                  l7968 035E  
                                                  l8768 25A4  
                                                  l7986 03D4  
                                                  l7898 00D6  
                                                  l8890 1A00  
                                                  l7988 0422  
                                                  l8796 1918  
                                                  STR_1 3FB9  
                                                  l8896 1A12  
                                                  STR_2 3EB7  
                                                  STR_3 3FEC  
                                                  STR_4 3F9B  
                                                  STR_5 3FF9  
                                                  l8996 0BBE  
                                                  STR_6 3FB9  
                                                  STR_7 3F6A  
                                                  STR_8 3FBC  
                                                  STR_9 3FB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0FBA  
                                      ??i2_Coupe_Moteur 0001  
                                                  _IOFS 007E9A  
                                                  u6130 01BE  
                                                  _PEIE 007F96  
                                                  u6501 16E6  
                                                  u5710 0F42  
                                                  u5630 0E38  
                                                  u6600 163C  
                                                  _PR5H 000F91  
                                                  u7307 1842  
                                                  u6355 07CC  
                                                  u6531 13A6  
                                                  u6356 07CE  
                                                  u7317 1854  
                                                  u6605 1634  
                                                  u5670 0EBE  
                                                  _PR5L 000F90  
                                                  u7327 1866  
                                                  u6551 13C6  
                                                  u7337 1878  
                                                  u6481 16C6  
                                                  u7347 188A  
                                                  u7357 189C  
                                                  u6581 160A  
                                                  u7367 18AE  
                                                  u7377 18C0  
                                                  u7297 1830  
                                                  u7387 18D2  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 276C  
                                    _Detection_Pion_Off 271C  
                                         _nb_s_bequille 00A2  
                                       _Option_Multitas 027E  
                                                  _Etat 00AA  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 2126  
                               IRQ_Execution@IRQ_Indice 0012  
                                          ___ftpack@arg 000F  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 1396  
                                 __end_of_IRQ_Execution 1F2C  
                                          ___ftpack@exp 0012  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 004E  
                           __end_of_EUSART1_RX_T3_LOCAL 08D8  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00CE  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                          ___ftmul@sign 0025  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A7  
                                       __end_of_Init_IT 2192  
                                          ___fttol@exp1 00F2  
                                          ___fttol@lval 00EE  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 0008  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 004A  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 264A  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 2626  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0012  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 2638  
            _Surveillance_Consommation_Moteur_1_Activer 2614  
                                    __size_ofi1_IRQ_PWM 0004  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 2638  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 2614  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0012  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 2626  
            _Surveillance_Consommation_Moteur_2_Activer 2602  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0287  
                                       __end_of___lbdiv 21FA  
                                                 STR_10 3F16  
                                                 STR_11 3FDB  
                                       __end_of___awmod 1CA0  
                                        _Bequille_I_Max 0092  
                                       __end_of___ftdiv 1770  
                                      _LOW_PRIORITY_IRQ 0018  
                                       __end_of___ftmul 146C  
                                       __end_of___fttol 16B6  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 001E  
                                       __end_of___lwdiv 2060  
                                         _Init_Moteur_1 265A  
                                         _Init_Moteur_2 264A  
                                       __end_of___lwmod 2126  
                                                 i1l610 1C26  
                                                 i1l531 26E0  
                                                 i1l630 1042  
                                                 i1l622 0FBC  
                                                 i1l607 1BE6  
                                                 i1l624 0FF0  
                                                 i1l570 1FA4  
                                                 i1l650 0042  
                                                 i1l652 004C  
                                                 i1l637 10C6  
                                                 i1l566 1F80  
                                                 i1l662 008C  
                                                 i1l654 0058  
                                                 i1l664 0098  
                                                 i1l656 0064  
                                                 i1l666 00A4  
                                                 i1l658 0080  
                                                 i1l659 0074  
                                                 i1l588 1EA2  
                                                 i1l669 00AE  
                                                 i2l710 20D2  
                                                 i2l713 20DC  
                                                 i2l706 20BA  
                                                 i2l708 20C6  
                                                 i2l699 2576  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                    __size_of_TIMER5_On 0004  
                                         _Init_Variable 153E  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 25B2  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 237C  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0BBE  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 2308  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3EAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 2488  
                                       __end_of_isdigit 24FC  
                                         ___ftpack@sign 0013  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0287  
                                                 status 000FD8  
                                     _Mouvement_Startup 004D  
                                       __end_of_sprintf 0BBE  
                          __end_of_EUSART1_Check_Buffer 22B8  
                                       ___lbdiv@divisor 000F  
                                          ?i1_TIMER5_On 0001  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 009A  
                          __size_of_Check_List_Moteur_2 0034  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 2734  
                                       __initialization 1FCC  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 0281  
                                  EUSART1_RX_T3_LOCAL@B 0282  
                                  EUSART1_RX_T3_LOCAL@C 0283  
                                  EUSART1_RX_T3_LOCAL@D 0284  
                                  EUSART1_RX_T3_LOCAL@E 0285  
                                  EUSART1_RX_T3_LOCAL@F 0286  
                                      __end_of_Etat_Get 2260  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1F7C  
                                          __end_of_main 215E  
                                   __end_of_Init_TIMER0 242C  
                                   __end_of_Init_TIMER2 2516  
                                   __end_of_Init_TIMER5 22E0  
                                      __end_of_Init_ADC 244C  
                            ??_IRQ_PION_CHANGEMENT_ETAT 0006  
                                      __end_of_Init_SPI 23C6  
                                      __end_of_Init_PWM 24E0  
                                 __end_of_delay_n_100ms 25B2  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0289  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                         ___fttol@sign1 00ED  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                          _Consigne_Max_Moteur_Bequille 0094  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 20A6  
                            _Check_List_Moteur_Bequille 2060  
                           __end_of_EUSART1_Buffer_Send 182A  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                      __end_of___ftpack 1B58  
                                      __end_of___lbtoft 23EA  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1339 232C  
                                                i1l1659 12BA  
                                                i1l7004 100E  
                                                i1l7022 1092  
                                                i1l7014 106A  
                                                i1l7040 1116  
                                                i1l7032 10EE  
                                                i1l7008 1016  
                                                i1l7026 109A  
                                                i1l7018 1074  
                                                i1l7044 111E  
                                                i1l7036 10F8  
                                     __end_of_IRQ_CAPOT 272C  
                                                i1l7048 114A  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6810 1FB4  
                                                i1l6900 14FE  
                                                i1l6912 1520  
                                                i1l6808 1FAE  
                                                i1l6824 1FC0  
                                                i1l6906 151C  
                                                i1l6842 1308  
                                                i1l6930 1E9C  
                                                i1l6852 1342  
                                                i1l6860 1362  
                                                i1l6836 12BE  
                                                i1l6828 1290  
                                                i1l6932 1EA8  
                                                i1l6846 1326  
                                                i1l6926 1E92  
                                                i1l6856 135E  
                                                i1l6848 132E  
                                                i1l6864 137A  
                                                i1l6890 14C4  
                                                i1l6794 1F8C  
                                                i1l6938 1EB8  
                                                i1l6946 1EC8  
                                                i1l6884 147A  
                                                i1l6796 1F94  
                                                i1l6964 1BEA  
                                                i1l6972 1BFE  
                                                i1l6894 14E2  
                                                i1l6958 1BDA  
                                                i1l6896 14EA  
                                                i1l6984 1C1E  
                                                i1l6988 1C2E  
                                                i1l6998 0FE4  
                                                i2l4768 2578  
                                     __end_ofi1_IRQ_ADC 1160  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 2774  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 001A  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 028A  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A5  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A9  
                                      __end_of_delay_1s 2308  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 2546  
                                 _Consigne_Max_Moteur_X 0096  
                                 _Consigne_Max_Moteur_Z 0095  
                                     __end_of_TIMER2_On 2742  
                                     __end_of_TIMER5_On 2770  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 198A  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 26D6  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0289  
                                                ___wmul 237C  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 26FC  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 26F0  
                                             ??___ftdiv 002F  
                                             ??___ftmul 0021  
                                             ??___fttol 003C  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0287  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1FD2  
                                                clear_1 1FE0  
                                                clear_2 1FF2  
                                                clear_3 2002  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 25DA  
                                 ___ftmul@f3_as_product 0026  
                                           _Etat_Update 246A  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3EA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00ED  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 26C8  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000E  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 26BA  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 269A  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 20E8  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 2008  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 240C  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 240C  
                                           _Init_TIMER2 24FC  
                                           _Init_TIMER5 22B8  
                                         ___rparam_used 000001  
                                            ___ftdiv@f1 0029  
                                            ___ftdiv@f2 002C  
                                            ___ftdiv@f3 0033  
                                         ?i2_IRQ_TIMER2 0001  
                                            ___lbtoft@c 001A  
                                            ___ftmul@f1 001B  
                                            ___ftmul@f2 001E  
                                     _Capteur_Capot_Off 2764  
                                         __end_of_Cycle 0E14  
                                            ___fttol@f1 0038  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 0280  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 244C  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 1D06  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 24A6  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 228C  
                                __size_ofi1_IRQ_TIMER_0 0058  
                                __size_ofi1_IRQ_TIMER_5 0070  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 153E  
                                   __end_of_Mouvement_X 1288  
                                   __end_of_Mouvement_Z 198A  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F7  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0093  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 26C8  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00CE  
                             __end_of_Capteur_Capot_Off 2768  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_ofi1_TIMER5_On 0004  
                                  __size_of_IRQ_TIMER_0 0058  
                                  __size_of_IRQ_TIMER_5 0070  
                               __size_ofi1_Coupe_Moteur 0014  
                                  __size_ofi2_IRQ_CAPOT 0008  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0048  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                             ?___ftpack 000F  
                                             ?___lbtoft 0017  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                                 __end_ofi2_Etat_Update 24C4  
                                   _Check_List_Moteur_1 1A34  
                                   _Check_List_Moteur_2 2192  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0E14  
                                               _P4_busy 00AC  
                                               _IRQ_PWM 2768  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 2748  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 009C  
                                               _SPI_ISR 1288  
                              Mouvement_X@type_consigne 00FE  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 20E0  
                                 __end_ofi1_Buzzer_Etat 26E4  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1DCE  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A3  
                                     delay_s@delay_time 00FE  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 2708  
                                    __end_of_TIMER2_Off 274E  
                                    __end_of_TIMER5_Off 2712  
                                      _consigne_pwm_max 008D  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 215E  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1E80  
                                         i1_IRQ_TIMER_5 1BC8  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00AB  
                                               ___lbdiv 21C6  
                                               ___awmod 1C38  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                               ___ftdiv 16B6  
                                 __size_of_Coupe_Moteur 0014  
                                       __size_of___wmul 0026  
                                               ___ftmul 1396  
                          __size_of_EUSART1_RX_T3_LOCAL 0806  
                                               ___fttol 15FA  
                                 __end_of_Etat_Intitule 222E  
                                               ___lwdiv 2016  
                                               ___lwmod 20E8  
                                         _type_consigne 0091  
                                               __pcinit 1FCC  
                                            ??___ftpack 0014  
                                            ??___lbtoft 001A  
                                               _delay_s 2356  
                                               __ramtop 0300  
                                               __ptext0 2126  
                                               _nb_Pion 00A1  
                                               __ptext1 153E  
                                               __ptext2 22B8  
                                               __ptext3 24FC  
                                               __ptext4 240C  
                                               __ptext5 23A2  
                                               __ptext6 1CA0  
                          __end_of_Init_Moteur_Bequille 268A  
                                               __ptext7 24C4  
                                               __ptext8 215E  
                                               __ptext9 23EA  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 272C  
                                           _Mouvement_X 1160  
                                           _Mouvement_Z 18E0  
                                     __end_of_hexpowers 3EB7  
                                  _Init_Input_Capture_0 23EA  
                        _Capteur_Capot_Compteur_Temps_S 009E  
                                               _dpowers 3EA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 2530  
                                               _isdigit 24E0  
                                   _EUSART1_IT_ACTIVATE 26E4  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1F2C  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0010  
                                          _Consigne_Max 0097  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08D8  
                                        __pintcode_body 20A6  
                                  end_of_initialization 2008  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004C  
                                         __Lmediumconst 3EA4  
                             _Surveillance_Capteur_Pion 0089  
                                               int_func 20A6  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 25C6  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 2724  
                                             i1_IRQ_ADC 0FBA  
                    _Surveillance_Consommation_Moteur_1 008B  
                    _Surveillance_Consommation_Moteur_2 008A  
                                             i1_IRQ_PWM 2770  
                               __size_ofi2_Coupe_Moteur 0014  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 2530  
                                             _TIMER2_On 273C  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                             _TIMER5_On 276C  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 00A0  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A6  
                                  __end_ofi1_TIMER2_Off 2754  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 271C  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTBbits 000F81  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 275A  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                     __size_of_IRQ_PION_CHANGEMENT_ETAT 0050  
                             ?_IRQ_PION_CHANGEMENT_ETAT 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0016  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 25C6  
                                      _nb_100ms_platine 00A4  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 2760  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 00FF  
                                   __end_of_delay_100ms 18E0  
                                           ___ftdiv@exp 0036  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 00FF  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 2330  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008E  
                                         _IRQ_Execution 1ED8  
                                             _Alarme_On 268A  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0288  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 25DA  
                                           ___ftmul@exp 0024  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                            ?_TIMER5_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 23A2  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1FCC  
                                 __end_of_Stop_Moteur_1 2764  
                                             _Init_Port 1CA0  
                              _IRQ_PION_Metal_Disparait 2516  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                                       _delay_s_counter 008C  
                             __end_of_Detection_Pion_On 2356  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 2260  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 25EE  
                                  _Init_Moteur_Bequille 267A  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 0046  
                                         _delay_n_100ms 259E  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005A  
                                 __end_of_Init_Moteur_1 266A  
                                 __end_of_Init_Moteur_2 265A  
                                 __end_of_Init_Variable 15FA  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                     __size_of___ftpack 008A  
                                     __size_of___lbtoft 0024  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 009B  
                                _Image_Courant_Moteur_2 009A  
                                         __pcstackBANK0 00ED  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 266A  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 182A  
                                            ?_Init_Port 0001  
                                          _isdigit$3659 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00D2  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F6  
                                           sprintf@prec 00F3  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??i1_TIMER5_On 0005  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0003  
                                           ??_IRQ_CAPOT 0011  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 25EE  
                                             __pintcode 0008  
                                         __pmediumconst 3EA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0016  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                           ??_TIMER5_On 000F  
                                             __ptext100 2572  
                                             __ptext101 2588  
                                              ?___lbdiv 000F  
                                             __ptext102 2734  
                                             __ptext103 26AA  
                                             __ptext104 24A6  
                                             __ptext105 25EE  
                                             __ptext106 275A  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 0280  
                                              ?___ftdiv 0029  
                                              ?___ftmul 001B  
                                              ?___fttol 0038  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008F  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A8  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 00FE  
                                          ?_Mouvement_Z 0287  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0256  
                                  __size_of_Etat_Update 001E  
                                             _hexpowers 3EAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 2588  
                                      i2_IRQ_I_MOTEUR_2 2572  
                                          i1_TIMER2_Off 274E  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 2712  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 2602  
                                              _PIE3bits 000FA3  
                                              i1u501_20 0FDE  
                                __size_ofi2_Etat_Update 001E  
                                              i1u505_20 1064  
                                              i1u509_20 10E8  
                                          i2_IRQ_TIMER2 2754  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 00FA  
                                   __end_ofi1_TIMER5_On 2778  
                                   __end_of_IRQ_TIMER_0 1E80  
                                   __end_of_IRQ_TIMER_5 1BC8  
                                   __end_ofi2_IRQ_CAPOT 273C  
                                              _SPI_MODE 0278  
                      __end_of_IRQ_PION_CHANGEMENT_ETAT 1FCC  
                                          i2_TIMER2_Off 275A  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 2724  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 1770  
                                         i1_Etat_Update 2488  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0099  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1ACE  
                           __end_of_Check_List_Moteur_2 21C6  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 222E  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 242C  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 23A2  
                                              _Init_PWM 24C4  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009D  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1DCE  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 1D6C  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 1D6C  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 1D06  
                                   __end_ofi1_Alarme_On 26AA  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 26BA  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                                      __size_of___ftdiv 00BA  
                                      __size_of___ftmul 00D6  
                                      __size_of___fttol 00BC  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                                              ___ftpack 1ACE  
                                              ___lbtoft 23C6  
                            ??_IRQ_PION_Metal_Disparait 0010  
                                      __size_of_delay_s 0026  
                              __end_of_SPI_Check_Buffer 228C  
                                    __end_of_u_Init_PWM 1E28  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F1  
                                            sprintf@val 00F4  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 24A6  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 22E0  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 242C  
                                              __ptext11 1F2C  
                                              __ptext20 2760  
                                              __ptext12 26E4  
                                              __ptext21 265A  
                                              __ptext13 0BBE  
                                              __ptext30 1ACE  
                                              __ptext22 1D6C  
                                              __ptext14 259E  
                                              __ptext31 266A  
                                              __ptext23 2330  
                                              __ptext15 18E0  
                                              __ptext40 2530  
                                              __ptext32 2764  
                                              __ptext24 25B2  
                                              __ptext16 264A  
                                              __ptext41 1D06  
                                              __ptext33 198A  
                                              __ptext25 1A34  
                                              __ptext17 2192  
                                              __ptext50 237C  
                                              __ptext42 271C  
                                              __ptext34 1DCE  
                                              __ptext26 23C6  
                                              __ptext18 1160  
                                              __ptext51 20E8  
                                              __ptext43 2060  
                                              __ptext35 2356  
                                              __ptext27 15FA  
                                              __ptext19 26F0  
                                              __ptext60 2742  
                                              __ptext52 2016  
                                              __ptext44 21C6  
                                              __ptext36 26FC  
                                              __ptext28 1396  
                                              __ptext61 2768  
                                              __ptext53 22E0  
                                              __ptext45 2260  
                                              __ptext37 273C  
                                              __ptext29 16B6  
                                              __ptext70 268A  
                                              __ptext62 2516  
                                              __ptext54 182A  
                                              __ptext46 228C  
                                              __ptext38 26BA  
                                              __ptext71 246A  
                                              __ptext63 2708  
                                              __ptext55 1ED8  
                                              __ptext47 00D2  
                                              __ptext39 267A  
                                              __ptext80 1BC8  
                                              __ptext72 25C6  
                                              __ptext64 244C  
                                              __ptext56 1B58  
                                              __ptext48 08D8  
                                              __ptext81 269A  
                                              __ptext73 2748  
                                              __ptext65 276C  
                                              __ptext57 1E28  
                                              __ptext49 24E0  
                                              __ptext90 1288  
                                              __ptext82 2488  
                                              __ptext74 0E14  
                                              __ptext66 26C8  
                                              __ptext58 2602  
                                              __ptext91 1F7C  
                                              __ptext83 25DA  
                                              __ptext75 21FA  
                                              __ptext67 2546  
                                              __ptext59 2614  
                                              __ptext92 2774  
                                              __ptext84 274E  
                                              __ptext76 222E  
                                              __ptext68 255C  
                                              __ptext93 2712  
                                              __ptext85 1E80  
                                              __ptext77 1C38  
                                              __ptext69 2724  
                                              __ptext94 26D6  
                                              __ptext86 2626  
                                              __ptext78 1770  
                                              __ptext95 2308  
                                              __ptext87 2638  
                                              __ptext96 146C  
                                              __ptext88 2770  
                                              __ptext97 272C  
                                              __ptext89 0FBA  
                                              __ptext99 2754  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 26F0  
                                          _UART_TX_TEXT 00AD  
                                      __size_of_sprintf 02E6  
                                              _consigne 0098  
                                         i1_Buzzer_Etat 26D6  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 0038  
                                           i1_TIMER5_On 2774  
                                           _IRQ_TIMER_0 1E28  
                                           _IRQ_TIMER_5 1B58  
                          __size_of_Detection_Pion_Init 0014  
                                           i2_IRQ_CAPOT 2734  
                              __end_of_Capteur_Capot_On 267A  
                                        _IRQ_I_MOTEUR_1 255C  
                                        _IRQ_I_MOTEUR_2 2546  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 0049  
                                         _Etat_Intitule 21FA  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 146C  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00B6  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                              _IRQ_PION_CHANGEMENT_ETAT 1F7C  
                                  __size_of_Mouvement_X 0128  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 1A34  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 0090  
                                           i1_Alarme_On 269A  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F2  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 246A  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0287  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1ED8  
                                 __end_ofi1_IRQ_TIMER_5 1C38  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 26AA  
                          __end_of_EUSART1_Transmit_ISR 2330  
                                __end_of_IRQ_I_MOTEUR_1 2572  
                                __end_of_IRQ_I_MOTEUR_2 255C  
                                            _IRQ_TIMER2 2742  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 004B  
                              __end_ofi2_IRQ_I_MOTEUR_1 259E  
                              __end_ofi2_IRQ_I_MOTEUR_2 2588  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 26FC  
                                            _TIMER2_Off 2748  
                                            _TIMER5_Off 2708  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F9  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 00FE  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
