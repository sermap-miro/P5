

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Feb 12 13:54:11 2019

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=2
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=2
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   109                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   119                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   120                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   121  0000                     
   122                           ; Version 1.42
   123                           ; Generated 13/04/2017 GMT
   124                           ; 
   125                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   126                           ; All rights reserved.
   127                           ; 
   128                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   129                           ; 
   130                           ; Redistribution and use in source and binary forms, with or without modification, are
   131                           ; permitted provided that the following conditions are met:
   132                           ; 
   133                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   134                           ;        conditions and the following disclaimer.
   135                           ; 
   136                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   137                           ;        of conditions and the following disclaimer in the documentation and/or other
   138                           ;        materials provided with the distribution.
   139                           ; 
   140                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   141                           ;        software without specific prior written permission.
   142                           ; 
   143                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   144                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   145                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   146                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   147                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   148                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   149                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   150                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   151                           ; 
   152                           ; 
   153                           ; Code-generator required, PIC18F4431 Definitions
   154                           ; 
   155                           ; SFR Addresses
   156  0000                     
   157                           	psect	mediumconst
   158  003EA4                     __pmediumconst:
   159                           	opt stack 0
   160  003EA4  00                 	db	0
   161  003EA5                     _dpowers:
   162                           	opt stack 0
   163  003EA5  0001               	dw	1
   164  003EA7  000A               	dw	10
   165  003EA9  0064               	dw	100
   166  003EAB  03E8               	dw	1000
   167  003EAD  2710               	dw	10000
   168  003EAF                     __end_of_dpowers:
   169                           	opt stack 0
   170  003EAF                     _hexpowers:
   171                           	opt stack 0
   172  003EAF  0001               	dw	1
   173  003EB1  0010               	dw	16
   174  003EB3  0100               	dw	256
   175  003EB5  1000               	dw	4096
   176  003EB7                     __end_of_hexpowers:
   177                           	opt stack 0
   178  0000                     _SSPCONbits	set	4038
   179  0000                     _SSPSTATbits	set	4039
   180  0000                     _RCREG1	set	4014
   181  0000                     _SSPBUF	set	4041
   182  0000                     _TXREG1	set	4013
   183  0000                     _TXSTA1	set	4012
   184  0000                     _RCSTA1	set	4011
   185  0000                     _BAUDCON	set	4010
   186  0000                     _RCSTA1bits	set	4011
   187  0000                     _SPBRGH	set	4016
   188  0000                     _SPBRG	set	4015
   189  0000                     _TXSTA1bits	set	4012
   190  0000                     _BAUDCONbits	set	4010
   191  0000                     _PR5L	set	3984
   192  0000                     _PR5H	set	3985
   193  0000                     _TMR5H	set	3976
   194  0000                     _TMR5L	set	3975
   195  0000                     _T5CONbits	set	4023
   196  0000                     _PR2	set	4043
   197  0000                     _T2CONbits	set	4042
   198  0000                     _T2CON	set	4042
   199  0000                     _TMR0L	set	4054
   200  0000                     _TMR0H	set	4055
   201  0000                     _T0CONbits	set	4053
   202  0000                     _LATEbits	set	3981
   203  0000                     _SEVTCMPL	set	3953
   204  0000                     _SEVTCMPH	set	3952
   205  0000                     _PWMCON0bits	set	3951
   206  0000                     _PTCON0bits	set	3967
   207  0000                     _PTCON1bits	set	3966
   208  0000                     _OVDCONS	set	3946
   209  0000                     _OVDCOND	set	3947
   210  0000                     _DTCON	set	3949
   211  0000                     _PWMCON1	set	3950
   212  0000                     _PWMCON0	set	3951
   213  0000                     _PTCON1	set	3966
   214  0000                     _PTCON0	set	3967
   215  0000                     _PTPERH	set	3962
   216  0000                     _LATE	set	3981
   217  0000                     _LATD	set	3980
   218  0000                     _LATC	set	3979
   219  0000                     _LATB	set	3978
   220  0000                     _LATA	set	3977
   221  0000                     _TRISEbits	set	3990
   222  0000                     _TRISE	set	3990
   223  0000                     _TRISDbits	set	3989
   224  0000                     _TRISD	set	3989
   225  0000                     _TRISCbits	set	3988
   226  0000                     _TRISC	set	3988
   227  0000                     _TRISBbits	set	3987
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISAbits	set	3986
   230  0000                     _TRISA	set	3986
   231  0000                     _TMR2	set	4044
   232  0000                     _LATCbits	set	3979
   233  0000                     _RCREG	set	4014
   234  0000                     _PIR1bits	set	3998
   235  0000                     _PDC1H	set	3958
   236  0000                     _PDC1L	set	3959
   237  0000                     _PDC0H	set	3960
   238  0000                     _PDC0L	set	3961
   239  0000                     _PTPERL	set	3963
   240  0000                     _PORTAbits	set	3968
   241  0000                     _PORTCbits	set	3970
   242  0000                     _CAP2CONbits	set	3938
   243  0000                     _PIR3bits	set	4004
   244  0000                     _IPR3bits	set	4005
   245  0000                     _PIE3bits	set	4003
   246  0000                     _CAP1CONbits	set	3939
   247  0000                     _RCONbits	set	4048
   248  0000                     _INTCON3bits	set	4080
   249  0000                     _INTCON2bits	set	4081
   250  0000                     _INTCONbits	set	4082
   251  0000                     _LATAbits	set	3977
   252  0000                     _ADRESH	set	4036
   253  0000                     _IPR1bits	set	3999
   254  0000                     _PIE1bits	set	3997
   255  0000                     _ADCON3bits	set	3994
   256  0000                     _ADCON1bits	set	4033
   257  0000                     _ADCON0bits	set	4034
   258  0000                     _ANSEL1	set	4025
   259  0000                     _ANSEL0	set	4024
   260  0000                     _ADCHS	set	3993
   261  0000                     _ADCON3	set	3994
   262  0000                     _ADCON2bits	set	4032
   263  0000                     _ADCON2	set	4032
   264  0000                     _ADCON1	set	4033
   265  0000                     _ADCON0	set	4034
   266  0000                     _OSCCON	set	4051
   267  0000                     _TRMT1	set	32097
   268  0000                     _LATC5	set	31837
   269  0000                     _GIE	set	32663
   270  0000                     _PEIE	set	32662
   271  0000                     _TMR2IF	set	31985
   272  0000                     _LATD7	set	31847
   273  0000                     _LATD6	set	31846
   274  0000                     _LATD5	set	31845
   275  0000                     _LATD4	set	31844
   276  0000                     _SEVTDIR	set	31603
   277  0000                     _INT0IF	set	32657
   278  0000                     _PTIF	set	32036
   279  0000                     _GODONE	set	32273
   280  0000                     _ADIF	set	31990
   281  0000                     _ADON	set	32272
   282  0000                     _IOFS	set	32410
   283  003EB7                     STR_2:
   284  003EB7  63                 	db	99	;'c'
   285  003EB8  6F                 	db	111	;'o'
   286  003EB9  6E                 	db	110	;'n'
   287  003EBA  73                 	db	115	;'s'
   288  003EBB  69                 	db	105	;'i'
   289  003EBC  67                 	db	103	;'g'
   290  003EBD  6E                 	db	110	;'n'
   291  003EBE  65                 	db	101	;'e'
   292  003EBF  3D                 	db	61	;'='
   293  003EC0  25                 	db	37
   294  003EC1  64                 	db	100	;'d'
   295  003EC2  20                 	db	32
   296  003EC3  69                 	db	105	;'i'
   297  003EC4  5F                 	db	95	;'_'
   298  003EC5  31                 	db	49	;'1'
   299  003EC6  3D                 	db	61	;'='
   300  003EC7  25                 	db	37
   301  003EC8  64                 	db	100	;'d'
   302  003EC9  20                 	db	32
   303  003ECA  69                 	db	105	;'i'
   304  003ECB  5F                 	db	95	;'_'
   305  003ECC  32                 	db	50	;'2'
   306  003ECD  3D                 	db	61	;'='
   307  003ECE  25                 	db	37
   308  003ECF  64                 	db	100	;'d'
   309  003ED0  20                 	db	32
   310  003ED1  64                 	db	100	;'d'
   311  003ED2  75                 	db	117	;'u'
   312  003ED3  74                 	db	116	;'t'
   313  003ED4  79                 	db	121	;'y'
   314  003ED5  3D                 	db	61	;'='
   315  003ED6  25                 	db	37
   316  003ED7  64                 	db	100	;'d'
   317  003ED8  20                 	db	32
   318  003ED9  65                 	db	101	;'e'
   319  003EDA  72                 	db	114	;'r'
   320  003EDB  72                 	db	114	;'r'
   321  003EDC  65                 	db	101	;'e'
   322  003EDD  75                 	db	117	;'u'
   323  003EDE  72                 	db	114	;'r'
   324  003EDF  3D                 	db	61	;'='
   325  003EE0  25                 	db	37
   326  003EE1  64                 	db	100	;'d'
   327  003EE2  20                 	db	32
   328  003EE3  50                 	db	80	;'P'
   329  003EE4  61                 	db	97	;'a'
   330  003EE5  74                 	db	116	;'t'
   331  003EE6  69                 	db	105	;'i'
   332  003EE7  6E                 	db	110	;'n'
   333  003EE8  61                 	db	97	;'a'
   334  003EE9  67                 	db	103	;'g'
   335  003EEA  65                 	db	101	;'e'
   336  003EEB  5F                 	db	95	;'_'
   337  003EEC  4E                 	db	78	;'N'
   338  003EED  62                 	db	98	;'b'
   339  003EEE  5F                 	db	95	;'_'
   340  003EEF  45                 	db	69	;'E'
   341  003EF0  73                 	db	115	;'s'
   342  003EF1  73                 	db	115	;'s'
   343  003EF2  61                 	db	97	;'a'
   344  003EF3  69                 	db	105	;'i'
   345  003EF4  3D                 	db	61	;'='
   346  003EF5  25                 	db	37
   347  003EF6  64                 	db	100	;'d'
   348  003EF7  20                 	db	32
   349  003EF8  43                 	db	67	;'C'
   350  003EF9  61                 	db	97	;'a'
   351  003EFA  70                 	db	112	;'p'
   352  003EFB  74                 	db	116	;'t'
   353  003EFC  65                 	db	101	;'e'
   354  003EFD  75                 	db	117	;'u'
   355  003EFE  72                 	db	114	;'r'
   356  003EFF  5F                 	db	95	;'_'
   357  003F00  43                 	db	67	;'C'
   358  003F01  61                 	db	97	;'a'
   359  003F02  70                 	db	112	;'p'
   360  003F03  6F                 	db	111	;'o'
   361  003F04  74                 	db	116	;'t'
   362  003F05  5F                 	db	95	;'_'
   363  003F06  4E                 	db	78	;'N'
   364  003F07  62                 	db	98	;'b'
   365  003F08  5F                 	db	95	;'_'
   366  003F09  45                 	db	69	;'E'
   367  003F0A  76                 	db	118	;'v'
   368  003F0B  65                 	db	101	;'e'
   369  003F0C  6E                 	db	110	;'n'
   370  003F0D  65                 	db	101	;'e'
   371  003F0E  6D                 	db	109	;'m'
   372  003F0F  65                 	db	101	;'e'
   373  003F10  6E                 	db	110	;'n'
   374  003F11  74                 	db	116	;'t'
   375  003F12  3D                 	db	61	;'='
   376  003F13  25                 	db	37
   377  003F14  64                 	db	100	;'d'
   378  003F15  00                 	db	0
   379  003F16                     STR_10:
   380  003F16  25                 	db	37
   381  003F17  30                 	db	48	;'0'
   382  003F18  32                 	db	50	;'2'
   383  003F19  58                 	db	88	;'X'
   384  003F1A  20                 	db	32
   385  003F1B  25                 	db	37
   386  003F1C  30                 	db	48	;'0'
   387  003F1D  32                 	db	50	;'2'
   388  003F1E  58                 	db	88	;'X'
   389  003F1F  20                 	db	32
   390  003F20  25                 	db	37
   391  003F21  30                 	db	48	;'0'
   392  003F22  32                 	db	50	;'2'
   393  003F23  58                 	db	88	;'X'
   394  003F24  20                 	db	32
   395  003F25  25                 	db	37
   396  003F26  30                 	db	48	;'0'
   397  003F27  32                 	db	50	;'2'
   398  003F28  58                 	db	88	;'X'
   399  003F29  20                 	db	32
   400  003F2A  25                 	db	37
   401  003F2B  30                 	db	48	;'0'
   402  003F2C  32                 	db	50	;'2'
   403  003F2D  58                 	db	88	;'X'
   404  003F2E  20                 	db	32
   405  003F2F  25                 	db	37
   406  003F30  30                 	db	48	;'0'
   407  003F31  32                 	db	50	;'2'
   408  003F32  58                 	db	88	;'X'
   409  003F33  20                 	db	32
   410  003F34  25                 	db	37
   411  003F35  30                 	db	48	;'0'
   412  003F36  32                 	db	50	;'2'
   413  003F37  58                 	db	88	;'X'
   414  003F38  20                 	db	32
   415  003F39  25                 	db	37
   416  003F3A  30                 	db	48	;'0'
   417  003F3B  32                 	db	50	;'2'
   418  003F3C  58                 	db	88	;'X'
   419  003F3D  20                 	db	32
   420  003F3E  25                 	db	37
   421  003F3F  30                 	db	48	;'0'
   422  003F40  32                 	db	50	;'2'
   423  003F41  58                 	db	88	;'X'
   424  003F42  20                 	db	32
   425  003F43  25                 	db	37
   426  003F44  30                 	db	48	;'0'
   427  003F45  32                 	db	50	;'2'
   428  003F46  58                 	db	88	;'X'
   429  003F47  20                 	db	32
   430  003F48  25                 	db	37
   431  003F49  30                 	db	48	;'0'
   432  003F4A  32                 	db	50	;'2'
   433  003F4B  58                 	db	88	;'X'
   434  003F4C  20                 	db	32
   435  003F4D  25                 	db	37
   436  003F4E  30                 	db	48	;'0'
   437  003F4F  31                 	db	49	;'1'
   438  003F50  58                 	db	88	;'X'
   439  003F51  20                 	db	32
   440  003F52  25                 	db	37
   441  003F53  30                 	db	48	;'0'
   442  003F54  31                 	db	49	;'1'
   443  003F55  58                 	db	88	;'X'
   444  003F56  20                 	db	32
   445  003F57  25                 	db	37
   446  003F58  30                 	db	48	;'0'
   447  003F59  31                 	db	49	;'1'
   448  003F5A  58                 	db	88	;'X'
   449  003F5B  20                 	db	32
   450  003F5C  25                 	db	37
   451  003F5D  30                 	db	48	;'0'
   452  003F5E  32                 	db	50	;'2'
   453  003F5F  58                 	db	88	;'X'
   454  003F60  25                 	db	37
   455  003F61  30                 	db	48	;'0'
   456  003F62  32                 	db	50	;'2'
   457  003F63  58                 	db	88	;'X'
   458  003F64  20                 	db	32
   459  003F65  25                 	db	37
   460  003F66  30                 	db	48	;'0'
   461  003F67  32                 	db	50	;'2'
   462  003F68  58                 	db	88	;'X'
   463  003F69  00                 	db	0
   464  003F6A                     STR_7:
   465  003F6A  63                 	db	99	;'c'
   466  003F6B  6F                 	db	111	;'o'
   467  003F6C  6E                 	db	110	;'n'
   468  003F6D  73                 	db	115	;'s'
   469  003F6E  69                 	db	105	;'i'
   470  003F6F  67                 	db	103	;'g'
   471  003F70  6E                 	db	110	;'n'
   472  003F71  65                 	db	101	;'e'
   473  003F72  3D                 	db	61	;'='
   474  003F73  25                 	db	37
   475  003F74  64                 	db	100	;'d'
   476  003F75  20                 	db	32
   477  003F76  70                 	db	112	;'p'
   478  003F77  61                 	db	97	;'a'
   479  003F78  74                 	db	116	;'t'
   480  003F79  69                 	db	105	;'i'
   481  003F7A  6E                 	db	110	;'n'
   482  003F7B  3D                 	db	61	;'='
   483  003F7C  25                 	db	37
   484  003F7D  64                 	db	100	;'d'
   485  003F7E  20                 	db	32
   486  003F7F  70                 	db	112	;'p'
   487  003F80  69                 	db	105	;'i'
   488  003F81  6F                 	db	111	;'o'
   489  003F82  6E                 	db	110	;'n'
   490  003F83  3D                 	db	61	;'='
   491  003F84  25                 	db	37
   492  003F85  64                 	db	100	;'d'
   493  003F86  20                 	db	32
   494  003F87  70                 	db	112	;'p'
   495  003F88  6C                 	db	108	;'l'
   496  003F89  61                 	db	97	;'a'
   497  003F8A  74                 	db	116	;'t'
   498  003F8B  69                 	db	105	;'i'
   499  003F8C  6E                 	db	110	;'n'
   500  003F8D  65                 	db	101	;'e'
   501  003F8E  3D                 	db	61	;'='
   502  003F8F  25                 	db	37
   503  003F90  64                 	db	100	;'d'
   504  003F91  20                 	db	32
   505  003F92  70                 	db	112	;'p'
   506  003F93  65                 	db	101	;'e'
   507  003F94  6C                 	db	108	;'l'
   508  003F95  6C                 	db	108	;'l'
   509  003F96  65                 	db	101	;'e'
   510  003F97  3D                 	db	61	;'='
   511  003F98  25                 	db	37
   512  003F99  64                 	db	100	;'d'
   513  003F9A  00                 	db	0
   514  003F9B                     STR_4:
   515  003F9B  6E                 	db	110	;'n'
   516  003F9C  62                 	db	98	;'b'
   517  003F9D  5F                 	db	95	;'_'
   518  003F9E  73                 	db	115	;'s'
   519  003F9F  3D                 	db	61	;'='
   520  003FA0  25                 	db	37
   521  003FA1  64                 	db	100	;'d'
   522  003FA2  20                 	db	32
   523  003FA3  6E                 	db	110	;'n'
   524  003FA4  62                 	db	98	;'b'
   525  003FA5  5F                 	db	95	;'_'
   526  003FA6  50                 	db	80	;'P'
   527  003FA7  69                 	db	105	;'i'
   528  003FA8  6F                 	db	111	;'o'
   529  003FA9  6E                 	db	110	;'n'
   530  003FAA  3D                 	db	61	;'='
   531  003FAB  25                 	db	37
   532  003FAC  64                 	db	100	;'d'
   533  003FAD  20                 	db	32
   534  003FAE  6E                 	db	110	;'n'
   535  003FAF  62                 	db	98	;'b'
   536  003FB0  5F                 	db	95	;'_'
   537  003FB1  54                 	db	84	;'T'
   538  003FB2  69                 	db	105	;'i'
   539  003FB3  6D                 	db	109	;'m'
   540  003FB4  65                 	db	101	;'e'
   541  003FB5  72                 	db	114	;'r'
   542  003FB6  5F                 	db	95	;'_'
   543  003FB7  35                 	db	53	;'5'
   544  003FB8  3D                 	db	61	;'='
   545  003FB9  25                 	db	37
   546  003FBA  64                 	db	100	;'d'
   547  003FBB  00                 	db	0
   548  003FBC                     STR_8:
   549  003FBC  45                 	db	69	;'E'
   550  003FBD  74                 	db	116	;'t'
   551  003FBE  61                 	db	97	;'a'
   552  003FBF  74                 	db	116	;'t'
   553  003FC0  3D                 	db	61	;'='
   554  003FC1  25                 	db	37
   555  003FC2  64                 	db	100	;'d'
   556  003FC3  20                 	db	32
   557  003FC4  6E                 	db	110	;'n'
   558  003FC5  62                 	db	98	;'b'
   559  003FC6  5F                 	db	95	;'_'
   560  003FC7  73                 	db	115	;'s'
   561  003FC8  5F                 	db	95	;'_'
   562  003FC9  66                 	db	102	;'f'
   563  003FCA  6F                 	db	111	;'o'
   564  003FCB  6E                 	db	110	;'n'
   565  003FCC  63                 	db	99	;'c'
   566  003FCD  74                 	db	116	;'t'
   567  003FCE  69                 	db	105	;'i'
   568  003FCF  6F                 	db	111	;'o'
   569  003FD0  6E                 	db	110	;'n'
   570  003FD1  6E                 	db	110	;'n'
   571  003FD2  65                 	db	101	;'e'
   572  003FD3  6D                 	db	109	;'m'
   573  003FD4  65                 	db	101	;'e'
   574  003FD5  6E                 	db	110	;'n'
   575  003FD6  74                 	db	116	;'t'
   576  003FD7  3D                 	db	61	;'='
   577  003FD8  25                 	db	37
   578  003FD9  64                 	db	100	;'d'
   579  003FDA  00                 	db	0
   580  003FDB                     STR_11:
   581  003FDB  30                 	db	48	;'0'
   582  003FDC  31                 	db	49	;'1'
   583  003FDD  32                 	db	50	;'2'
   584  003FDE  33                 	db	51	;'3'
   585  003FDF  34                 	db	52	;'4'
   586  003FE0  35                 	db	53	;'5'
   587  003FE1  36                 	db	54	;'6'
   588  003FE2  37                 	db	55	;'7'
   589  003FE3  38                 	db	56	;'8'
   590  003FE4  39                 	db	57	;'9'
   591  003FE5  41                 	db	65	;'A'
   592  003FE6  42                 	db	66	;'B'
   593  003FE7  43                 	db	67	;'C'
   594  003FE8  44                 	db	68	;'D'
   595  003FE9  45                 	db	69	;'E'
   596  003FEA  46                 	db	70	;'F'
   597  003FEB  00                 	db	0
   598  003FEC                     STR_3:
   599  003FEC  25                 	db	37
   600  003FED  30                 	db	48	;'0'
   601  003FEE  32                 	db	50	;'2'
   602  003FEF  58                 	db	88	;'X'
   603  003FF0  25                 	db	37
   604  003FF1  30                 	db	48	;'0'
   605  003FF2  32                 	db	50	;'2'
   606  003FF3  58                 	db	88	;'X'
   607  003FF4  25                 	db	37
   608  003FF5  30                 	db	48	;'0'
   609  003FF6  32                 	db	50	;'2'
   610  003FF7  58                 	db	88	;'X'
   611  003FF8  00                 	db	0
   612  003FF9                     STR_5:
   613  003FF9  25                 	db	37
   614  003FFA  30                 	db	48	;'0'
   615  003FFB  31                 	db	49	;'1'
   616  003FFC  58                 	db	88	;'X'
   617  003FFD  00                 	db	0
   618  0000                     
   619                           ; #config settings
   620  003FFE  00                 	db	0	; dummy byte at the end
   621  0000                     
   622                           	psect	cinit
   623  001C40                     __pcinit:
   624                           	opt stack 0
   625  001C40                     start_initialization:
   626                           	opt stack 0
   627  001C40                     __initialization:
   628                           	opt stack 0
   629                           
   630                           ; Clear objects allocated to BANK2 (128 bytes)
   631  001C40  EE02  F000         	lfsr	0,__pbssBANK2
   632  001C44  0E80               	movlw	128
   633  001C46                     clear_0:
   634  001C46  6AEE               	clrf	postinc0,c
   635  001C48  06E8               	decf	wreg,f,c
   636  001C4A  E1FD               	bnz	clear_0
   637                           
   638                           ; Clear objects allocated to BANK1 (256 bytes)
   639  001C4C  EE01  F000         	lfsr	0,__pbssBANK1
   640  001C50  EE11 F000          	lfsr	1,256
   641  001C54                     clear_1:
   642  001C54  6AEE               	clrf	postinc0,c
   643  001C56  50E5               	movf	postdec1,w,c
   644  001C58  50E1               	movf	fsr1l,w,c
   645  001C5A  E1FC               	bnz	clear_1
   646  001C5C  50E2               	movf	fsr1h,w,c
   647  001C5E  E1FA               	bnz	clear_1
   648                           
   649                           ; Clear objects allocated to BANK0 (141 bytes)
   650  001C60  EE00  F060         	lfsr	0,__pbssBANK0
   651  001C64  0E8D               	movlw	141
   652  001C66                     clear_2:
   653  001C66  6AEE               	clrf	postinc0,c
   654  001C68  06E8               	decf	wreg,f,c
   655  001C6A  E1FD               	bnz	clear_2
   656                           
   657                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   658  001C6C  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   659  001C6E  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   660                           
   661                           ; Clear objects allocated to COMRAM (12 bytes)
   662  001C70  EE00  F043         	lfsr	0,__pbssCOMRAM
   663  001C74  0E0C               	movlw	12
   664  001C76                     clear_3:
   665  001C76  6AEE               	clrf	postinc0,c
   666  001C78  06E8               	decf	wreg,f,c
   667  001C7A  E1FD               	bnz	clear_3
   668  001C7C                     end_of_initialization:
   669                           	opt stack 0
   670  001C7C                     __end_of__initialization:
   671                           	opt stack 0
   672  001C7C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   673  001C7E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   674  001C80  0E00               	movlw	low (__Lmediumconst shr (0+16))
   675  001C82  6EF8               	movwf	tblptru,c
   676  001C84  0100               	movlb	0
   677  001C86  EFAA  F00E         	goto	_main	;jump to C main() function
   678                           tblptru	equ	0xFF8
   679                           postinc0	equ	0xFEE
   680                           wreg	equ	0xFE8
   681                           postdec1	equ	0xFE5
   682                           fsr1h	equ	0xFE2
   683                           fsr1l	equ	0xFE1
   684                           
   685                           	psect	bitbssCOMRAM
   686  000278                     __pbitbssCOMRAM:
   687                           	opt stack 0
   688  000278                     _SPI_MODE:
   689                           	opt stack 0
   690  000278                     	ds	1
   691  000279                     _UART_TEST:
   692                           	opt stack 0
   693  000279                     	ds	1
   694  00027A                     _SPI_full:
   695                           	opt stack 0
   696  00027A                     	ds	1
   697  00027B                     _RX1_full:
   698                           	opt stack 0
   699  00027B                     	ds	1
   700  00027C                     _RX1_ABR:
   701                           	opt stack 0
   702  00027C                     	ds	1
   703  00027D                     _Option_Pailleux:
   704                           	opt stack 0
   705  00027D                     	ds	1
   706  00027E                     _Option_Multitas:
   707                           	opt stack 0
   708  00027E                     	ds	1
   709  00027F                     _Nouvelle_Valeur_ADC:
   710                           	opt stack 0
   711  00027F                     	ds	1
   712  000280                     _Detecteur_Pion:
   713                           	opt stack 0
   714  000280                     	ds	1
   715                           tblptru	equ	0xFF8
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1h	equ	0xFE2
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	bssCOMRAM
   723  000043                     __pbssCOMRAM:
   724                           	opt stack 0
   725  000043                     _spiRxIndex:
   726                           	opt stack 0
   727  000043                     	ds	1
   728  000044                     _spiTxIndex:
   729                           	opt stack 0
   730  000044                     	ds	1
   731  000045                     _eusart1RxIndex:
   732                           	opt stack 0
   733  000045                     	ds	1
   734  000046                     _eusart1TxIndex:
   735                           	opt stack 0
   736  000046                     	ds	1
   737  000047                     _Compteur_IRQ_I_Moteur_2:
   738                           	opt stack 0
   739  000047                     	ds	1
   740  000048                     _Surveillance_Consommation_Moteur_2:
   741                           	opt stack 0
   742  000048                     	ds	1
   743  000049                     _Surveillance_Consommation_Moteur_1:
   744                           	opt stack 0
   745  000049                     	ds	1
   746  00004A                     _Bequille_I_Max:
   747                           	opt stack 0
   748  00004A                     	ds	1
   749  00004B                     _Consigne_en_A:
   750                           	opt stack 0
   751  00004B                     	ds	1
   752  00004C                     _nb_s_bequille:
   753                           	opt stack 0
   754  00004C                     	ds	1
   755  00004D                     _Etat_Precedent_Index:
   756                           	opt stack 0
   757  00004D                     	ds	1
   758  00004E                     _Mouvement_Startup:
   759                           	opt stack 0
   760  00004E                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           postinc0	equ	0xFEE
   763                           wreg	equ	0xFE8
   764                           postdec1	equ	0xFE5
   765                           fsr1h	equ	0xFE2
   766                           fsr1l	equ	0xFE1
   767                           
   768                           	psect	bssBANK0
   769  000060                     __pbssBANK0:
   770                           	opt stack 0
   771  000060                     _eusart1TxBuffer_Test:
   772                           	opt stack 0
   773  000060                     	ds	10
   774  00006A                     _Etat_Log:
   775                           	opt stack 0
   776  00006A                     	ds	10
   777  000074                     _DVT_Tableau_Pause:
   778                           	opt stack 0
   779  000074                     	ds	6
   780  00007A                     lecture_I_Mot2@Resul:
   781                           	opt stack 0
   782  00007A                     	ds	2
   783  00007C                     lecture_I_Mot1@Resul:
   784                           	opt stack 0
   785  00007C                     	ds	2
   786  00007E                     _erreur_accumulator_max:
   787                           	opt stack 0
   788  00007E                     	ds	2
   789  000080                     _PID_out:
   790                           	opt stack 0
   791  000080                     	ds	2
   792  000082                     _erreur_accumulator:
   793                           	opt stack 0
   794  000082                     	ds	2
   795  000084                     _erreur:
   796                           	opt stack 0
   797  000084                     	ds	2
   798  000086                     _duty:
   799                           	opt stack 0
   800  000086                     	ds	2
   801  000088                     _TIMER0_Etat:
   802                           	opt stack 0
   803  000088                     	ds	1
   804  000089                     _Compteur_IRQ_I_Moteur_1:
   805                           	opt stack 0
   806  000089                     	ds	1
   807  00008A                     _Surveillance_Capteur_Pion:
   808                           	opt stack 0
   809  00008A                     	ds	1
   810  00008B                     _delay_s_counter:
   811                           	opt stack 0
   812  00008B                     	ds	1
   813  00008C                     _consigne_pwm_max:
   814                           	opt stack 0
   815  00008C                     	ds	1
   816  00008D                     _consigne_pwm:
   817                           	opt stack 0
   818  00008D                     	ds	1
   819  00008E                     _direction:
   820                           	opt stack 0
   821  00008E                     	ds	1
   822  00008F                     _mouvement_option:
   823                           	opt stack 0
   824  00008F                     	ds	1
   825  000090                     _type_consigne:
   826                           	opt stack 0
   827  000090                     	ds	1
   828  000091                     _Pelle_I_Max:
   829                           	opt stack 0
   830  000091                     	ds	1
   831  000092                     _Consigne_Max_Moteur_Bequille:
   832                           	opt stack 0
   833  000092                     	ds	1
   834  000093                     _Consigne_Max_Moteur_Z:
   835                           	opt stack 0
   836  000093                     	ds	1
   837  000094                     _Consigne_Max_Moteur_X:
   838                           	opt stack 0
   839  000094                     	ds	1
   840  000095                     _Consigne_Max:
   841                           	opt stack 0
   842  000095                     	ds	1
   843  000096                     _consigne:
   844                           	opt stack 0
   845  000096                     	ds	1
   846  000097                     _moteur_indice:
   847                           	opt stack 0
   848  000097                     	ds	1
   849  000098                     _Image_Courant_Moteur_2:
   850                           	opt stack 0
   851  000098                     	ds	1
   852  000099                     _Image_Courant_Moteur_1:
   853                           	opt stack 0
   854  000099                     	ds	1
   855  00009A                     _Patinage_Nb_Essai_Autoriser:
   856                           	opt stack 0
   857  00009A                     	ds	1
   858  00009B                     _Patinage_Nb_Essai:
   859                           	opt stack 0
   860  00009B                     	ds	1
   861  00009C                     _Capteur_Capot_Compteur_Temps_S:
   862                           	opt stack 0
   863  00009C                     	ds	1
   864  00009D                     _Capteur_Capot_Nb_Evenement_Autoriser:
   865                           	opt stack 0
   866  00009D                     	ds	1
   867  00009E                     _Capteur_Capot_Nb_Evenement:
   868                           	opt stack 0
   869  00009E                     	ds	1
   870  00009F                     _nb_Pion_Objectif:
   871                           	opt stack 0
   872  00009F                     	ds	1
   873  0000A0                     _nb_Pion:
   874                           	opt stack 0
   875  0000A0                     	ds	1
   876  0000A1                     _nb_s_pelle:
   877                           	opt stack 0
   878  0000A1                     	ds	1
   879  0000A2                     _nb_100ms_platine:
   880                           	opt stack 0
   881  0000A2                     	ds	1
   882  0000A3                     _nb_100ms_pion:
   883                           	opt stack 0
   884  0000A3                     	ds	1
   885  0000A4                     _nb_100ms_Timer_5:
   886                           	opt stack 0
   887  0000A4                     	ds	1
   888  0000A5                     _nb_s_patinage:
   889                           	opt stack 0
   890  0000A5                     	ds	1
   891  0000A6                     _nb_s_fonctionnement:
   892                           	opt stack 0
   893  0000A6                     	ds	1
   894  0000A7                     _nb_s_fonctionnement_souhaiter:
   895                           	opt stack 0
   896  0000A7                     	ds	1
   897  0000A8                     _Alarme:
   898                           	opt stack 0
   899  0000A8                     	ds	1
   900  0000A9                     _Etat:
   901                           	opt stack 0
   902  0000A9                     	ds	1
   903  0000AA                     _Version:
   904                           	opt stack 0
   905  0000AA                     	ds	1
   906  0000AB                     _P4_busy:
   907                           	opt stack 0
   908  0000AB                     	ds	1
   909  0000AC                     _UART_TX_TEXT:
   910                           	opt stack 0
   911  0000AC                     	ds	64
   912  0000EC                     _nb_100ms_platine_backup:
   913                           	opt stack 0
   914  0000EC                     	ds	1
   915                           tblptru	equ	0xFF8
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1h	equ	0xFE2
   920                           fsr1l	equ	0xFE1
   921                           
   922                           	psect	bssBANK1
   923  000100                     __pbssBANK1:
   924                           	opt stack 0
   925  000100                     _SPI_RX_TEXT:
   926                           	opt stack 0
   927  000100                     	ds	64
   928  000140                     _spiTxBuffer:
   929                           	opt stack 0
   930  000140                     	ds	64
   931  000180                     _eusart1TxBuffer:
   932                           	opt stack 0
   933  000180                     	ds	64
   934  0001C0                     _UART_RX_TEXT:
   935                           	opt stack 0
   936  0001C0                     	ds	64
   937                           tblptru	equ	0xFF8
   938                           postinc0	equ	0xFEE
   939                           wreg	equ	0xFE8
   940                           postdec1	equ	0xFE5
   941                           fsr1h	equ	0xFE2
   942                           fsr1l	equ	0xFE1
   943                           
   944                           	psect	bssBANK2
   945  000200                     __pbssBANK2:
   946                           	opt stack 0
   947  000200                     _spiRxBuffer:
   948                           	opt stack 0
   949  000200                     	ds	64
   950  000240                     _eusart1RxBuffer:
   951                           	opt stack 0
   952  000240                     	ds	64
   953                           tblptru	equ	0xFF8
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           postdec1	equ	0xFE5
   957                           fsr1h	equ	0xFE2
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	cstackBANK2
   961  000280                     __pcstackBANK2:
   962                           	opt stack 0
   963  000280                     EUSART1_RX_T3_LOCAL@Da:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x0
   967  000280                     	ds	1
   968  000281                     EUSART1_RX_T3_LOCAL@A:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x1
   972  000281                     	ds	1
   973  000282                     EUSART1_RX_T3_LOCAL@B:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x2
   977  000282                     	ds	1
   978  000283                     EUSART1_RX_T3_LOCAL@C:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x3
   982  000283                     	ds	1
   983  000284                     EUSART1_RX_T3_LOCAL@D:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x4
   987  000284                     	ds	1
   988  000285                     EUSART1_RX_T3_LOCAL@E:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x5
   992  000285                     	ds	1
   993  000286                     EUSART1_RX_T3_LOCAL@F:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x6
   997  000286                     	ds	1
   998  000287                     Mouvement_Bequille@type_consigne:
   999                           	opt stack 0
  1000  000287                     Mouvement_Z@type_consigne:
  1001                           	opt stack 0
  1002  000287                     Mouvement_X@direction:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x7
  1006  000287                     	ds	1
  1007  000288                     Mouvement_Bequille@option:
  1008                           	opt stack 0
  1009  000288                     Mouvement_Z@option:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x8
  1013  000288                     	ds	1
  1014  000289                     Mouvement_Bequille@direction:
  1015                           	opt stack 0
  1016  000289                     Mouvement_Z@direction:
  1017                           	opt stack 0
  1018                           
  1019                           ; 1 bytes @ 0x9
  1020  000289                     	ds	1
  1021  00028A                     Cycle@i:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0xA
  1025  00028A                     	ds	1
  1026                           tblptru	equ	0xFF8
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1h	equ	0xFE2
  1031                           fsr1l	equ	0xFE1
  1032                           
  1033                           	psect	cstackBANK0
  1034  0000ED                     __pcstackBANK0:
  1035                           	opt stack 0
  1036  0000ED                     ??_sprintf:
  1037                           
  1038                           ; 1 bytes @ 0x0
  1039  0000ED                     	ds	4
  1040  0000F1                     sprintf@idx:
  1041                           	opt stack 0
  1042                           
  1043                           ; 1 bytes @ 0x4
  1044  0000F1                     	ds	1
  1045  0000F2                     sprintf@ap:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x5
  1049  0000F2                     	ds	1
  1050  0000F3                     sprintf@prec:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x6
  1054  0000F3                     	ds	1
  1055  0000F4                     sprintf@val:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x7
  1059  0000F4                     	ds	2
  1060  0000F6                     sprintf@flag:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x9
  1064  0000F6                     	ds	1
  1065  0000F7                     sprintf@width:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0xA
  1069  0000F7                     	ds	2
  1070  0000F9                     sprintf@c:
  1071                           	opt stack 0
  1072                           
  1073                           ; 1 bytes @ 0xC
  1074  0000F9                     	ds	1
  1075  0000FA                     ??_EUSART1_RX_T3_LOCAL:
  1076                           
  1077                           ; 1 bytes @ 0xD
  1078  0000FA                     	ds	4
  1079  0000FE                     ??_Check_List_Moteur_Bequille:
  1080  0000FE                     Mouvement_X@type_consigne:
  1081                           	opt stack 0
  1082  0000FE                     delay_s@delay_time:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x11
  1086  0000FE                     	ds	1
  1087  0000FF                     Mouvement_X@option:
  1088                           	opt stack 0
  1089  0000FF                     delay_s@Timer_0_Etat_Prealable:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x12
  1093  0000FF                     	ds	1
  1094                           tblptru	equ	0xFF8
  1095                           postinc0	equ	0xFEE
  1096                           wreg	equ	0xFE8
  1097                           postdec1	equ	0xFE5
  1098                           fsr1h	equ	0xFE2
  1099                           fsr1l	equ	0xFE1
  1100                           
  1101                           	psect	cstackCOMRAM
  1102  000001                     __pcstackCOMRAM:
  1103                           	opt stack 0
  1104  000001                     i2Etat_Update@etat_new_value:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x0
  1108  000001                     	ds	1
  1109  000002                     i2Alarme_On@alarme_new_value:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x1
  1113  000002                     	ds	1
  1114  000003                     ??_HIGH_PRIORITY_IRQ:
  1115  000003                     
  1116                           ; 1 bytes @ 0x2
  1117  000003                     	ds	2
  1118  000005                     ??_SPI_ISR:
  1119  000005                     ??_EUSART1_Receive_ISR:
  1120  000005                     ??i1_IRQ_ADC:
  1121  000005                     i1Buzzer_Etat@Activation:
  1122                           	opt stack 0
  1123  000005                     i1Etat_Update@etat_new_value:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x4
  1127  000005                     	ds	1
  1128  000006                     i1Alarme_On@alarme_new_value:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x5
  1132  000006                     	ds	1
  1133  000007                     EUSART1_Receive_ISR@i:
  1134                           	opt stack 0
  1135  000007                     SPI_ISR@i:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x6
  1139  000007                     	ds	1
  1140  000008                     ??_LOW_PRIORITY_IRQ:
  1141                           
  1142                           ; 1 bytes @ 0x7
  1143  000008                     	ds	7
  1144  00000F                     ??_IRQ_ADC:
  1145  00000F                     ??_delay_100ms:
  1146  00000F                     ??_isdigit:
  1147  00000F                     ?___wmul:
  1148                           	opt stack 0
  1149  00000F                     ?___awmod:
  1150                           	opt stack 0
  1151  00000F                     ?___lwdiv:
  1152                           	opt stack 0
  1153  00000F                     Init_Variable@i:
  1154                           	opt stack 0
  1155  00000F                     Buzzer_Etat@Activation:
  1156                           	opt stack 0
  1157  00000F                     Etat_Intitule@Etat_Number:
  1158                           	opt stack 0
  1159  00000F                     Etat_Update@etat_new_value:
  1160                           	opt stack 0
  1161  00000F                     EUSART1_Buffer_Send@text:
  1162                           	opt stack 0
  1163  00000F                     ___lbdiv@divisor:
  1164                           	opt stack 0
  1165  00000F                     ___wmul@multiplier:
  1166                           	opt stack 0
  1167  00000F                     ___awmod@dividend:
  1168                           	opt stack 0
  1169  00000F                     ___lwdiv@dividend:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0xE
  1173  00000F                     	ds	1
  1174  000010                     delay_n_100ms@nb_100ms:
  1175                           	opt stack 0
  1176  000010                     Alarme_On@alarme_new_value:
  1177                           	opt stack 0
  1178  000010                     _isdigit$3598:
  1179                           	opt stack 0
  1180  000010                     ___lbdiv@dividend:
  1181                           	opt stack 0
  1182  000010                     EUSART1_Buffer_Send@i:
  1183                           	opt stack 0
  1184                           
  1185                           ; 2 bytes @ 0xF
  1186  000010                     	ds	1
  1187  000011                     delay_n_100ms@i:
  1188                           	opt stack 0
  1189  000011                     isdigit@c:
  1190                           	opt stack 0
  1191  000011                     ___lbdiv@counter:
  1192                           	opt stack 0
  1193  000011                     ___wmul@multiplicand:
  1194                           	opt stack 0
  1195  000011                     ___awmod@divisor:
  1196                           	opt stack 0
  1197  000011                     ___lwdiv@divisor:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x10
  1201  000011                     	ds	1
  1202  000012                     IRQ_Execution@IRQ_Indice:
  1203                           	opt stack 0
  1204  000012                     ___lbdiv@quotient:
  1205                           	opt stack 0
  1206                           
  1207                           ; 1 bytes @ 0x11
  1208  000012                     	ds	1
  1209  000013                     ___awmod@counter:
  1210                           	opt stack 0
  1211  000013                     ___lwdiv@counter:
  1212                           	opt stack 0
  1213  000013                     ___wmul@product:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x12
  1217  000013                     	ds	1
  1218  000014                     ___awmod@sign:
  1219                           	opt stack 0
  1220  000014                     ___lwdiv@quotient:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x13
  1224  000014                     	ds	1
  1225  000015                     ??_Etat_Get:
  1226                           
  1227                           ; 1 bytes @ 0x14
  1228  000015                     	ds	1
  1229  000016                     ?___lwmod:
  1230                           	opt stack 0
  1231  000016                     ___lwmod@dividend:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x15
  1235  000016                     	ds	1
  1236  000017                     Etat_Get@Etat_Indice:
  1237                           	opt stack 0
  1238                           
  1239                           ; 1 bytes @ 0x16
  1240  000017                     	ds	1
  1241  000018                     ___lwmod@divisor:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0x17
  1245  000018                     	ds	2
  1246  00001A                     ___lwmod@counter:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x19
  1250  00001A                     	ds	1
  1251  00001B                     ?_sprintf:
  1252                           	opt stack 0
  1253  00001B                     sprintf@sp:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0x1A
  1257  00001B                     	ds	1
  1258  00001C                     sprintf@f:
  1259                           	opt stack 0
  1260                           
  1261                           ; 2 bytes @ 0x1B
  1262  00001C                     	ds	36
  1263  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x3F
  1267  000040                     	ds	1
  1268  000041                     EUSART1_RX_T3_LOCAL@i:
  1269                           	opt stack 0
  1270                           
  1271                           ; 2 bytes @ 0x40
  1272  000041                     	ds	2
  1273  000043                     tblptru	equ	0xFF8
  1274                           postinc0	equ	0xFEE
  1275                           wreg	equ	0xFE8
  1276                           postdec1	equ	0xFE5
  1277                           fsr1h	equ	0xFE2
  1278                           fsr1l	equ	0xFE1
  1279                           
  1280                           ; 1 bytes @ 0x42
  1281 ;;
  1282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1283 ;;
  1284 ;; *************** function _main *****************
  1285 ;; Defined at:
  1286 ;;		line 585 in file "MOTEUR.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 3F/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1300 ;;      Params:         0       0       0       0
  1301 ;;      Locals:         0       0       0       0
  1302 ;;      Temps:          0       0       0       0
  1303 ;;      Totals:         0       0       0       0
  1304 ;;Total ram usage:        0 bytes
  1305 ;; Hardware stack levels required when called:   20
  1306 ;; This function calls:
  1307 ;;		_Cycle
  1308 ;;		_EUSART1_Initialize
  1309 ;;		_Init_ADC
  1310 ;;		_Init_IT
  1311 ;;		_Init_PWM
  1312 ;;		_Init_Port
  1313 ;;		_Init_SPI
  1314 ;;		_Init_TIMER0
  1315 ;;		_Init_TIMER2
  1316 ;;		_Init_TIMER5
  1317 ;;		_Init_Variable
  1318 ;; This function is called by:
  1319 ;;		Startup code after reset
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           	psect	text0
  1324  001D54                     __ptext0:
  1325                           	opt stack 0
  1326  001D54                     _main:
  1327                           	opt stack 11
  1328                           
  1329                           ;MOTEUR.c: 587: OSCCON = 0b01110000;
  1330                           
  1331                           ;incstack = 0
  1332  001D54  0E70               	movlw	112
  1333  001D56  6ED3               	movwf	4051,c	;volatile
  1334  001D58                     l275:
  1335  001D58  A4D3               	btfss	4051,2,c	;volatile
  1336  001D5A  D7FE               	goto	l275
  1337                           
  1338                           ;MOTEUR.c: 598: Init_Variable();
  1339  001D5C  EC2C  F00A         	call	_Init_Variable	;wreg free
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;MOTEUR.c: 602: Init_Port();
  1343  001D60  EC20  F00C         	call	_Init_Port	;wreg free
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;MOTEUR.c: 637: Init_IT();
  1347  001D64  ECE2  F00E         	call	_Init_IT	;wreg free
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;MOTEUR.c: 656: EUSART1_Initialize();
  1351  001D68  ECD0  F00D         	call	_EUSART1_Initialize	;wreg free
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;MOTEUR.c: 657: Init_SPI();
  1355  001D6C  EC14  F010         	call	_Init_SPI	;wreg free
  1356                           
  1357                           ;MOTEUR.c: 661: Init_ADC();
  1358  001D70  EC47  F010         	call	_Init_ADC	;wreg free
  1359                           
  1360                           ;MOTEUR.c: 663: Init_TIMER0();
  1361  001D74  EC37  F010         	call	_Init_TIMER0	;wreg free
  1362                           
  1363                           ;MOTEUR.c: 664: Init_TIMER2();
  1364  001D78  ECAF  F010         	call	_Init_TIMER2	;wreg free
  1365                           
  1366                           ;MOTEUR.c: 665: Init_TIMER5();
  1367  001D7C  EC8C  F00F         	call	_Init_TIMER5	;wreg free
  1368                           
  1369                           ;MOTEUR.c: 668: Init_PWM();
  1370  001D80  EC93  F010         	call	_Init_PWM	;wreg free
  1371                           
  1372                           ;MOTEUR.c: 730: Cycle();
  1373  001D84  ECDF  F005         	call	_Cycle	;wreg free
  1374                           
  1375                           ; BSR set to: 0
  1376  001D88  EF67  F000         	goto	start
  1377  001D8C                     __end_of_main:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           postinc0	equ	0xFEE
  1381                           wreg	equ	0xFE8
  1382                           postdec1	equ	0xFE5
  1383                           fsr1h	equ	0xFE2
  1384                           fsr1l	equ	0xFE1
  1385                           
  1386 ;; *************** function _Init_Variable *****************
  1387 ;; Defined at:
  1388 ;;		line 143 in file "MOTEUR.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  i               1   14[COMRAM] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 3F/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1402 ;;      Params:         0       0       0       0
  1403 ;;      Locals:         1       0       0       0
  1404 ;;      Temps:          0       0       0       0
  1405 ;;      Totals:         1       0       0       0
  1406 ;;Total ram usage:        1 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:   11
  1409 ;; This function calls:
  1410 ;;		_Detection_Pion_Init
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;; This function uses a non-reentrant model
  1414 ;;
  1415                           
  1416                           	psect	text1
  1417  001458                     __ptext1:
  1418                           	opt stack 0
  1419  001458                     _Init_Variable:
  1420                           	opt stack 19
  1421                           
  1422                           ;MOTEUR.c: 175: Batterie_mV = 0;
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;incstack = 0
  1426  001458  0E0A               	movlw	10
  1427  00145A  0100               	movlb	0	; () banked
  1428  00145C  6FAA               	movwf	_Version& (0+255),b
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;MOTEUR.c: 178: unsigned char i;
  1432                           ;MOTEUR.c: 180: for (i = 0; i < 10; i++) {
  1433  00145E  6A0F               	clrf	Init_Variable@i,c
  1434  001460                     l8327:
  1435                           
  1436                           ;MOTEUR.c: 181: Etat_Log[i] = 255;
  1437  001460  500F               	movf	Init_Variable@i,w,c
  1438  001462  0F6A               	addlw	low _Etat_Log
  1439  001464  6ED9               	movwf	fsr2l,c
  1440  001466  6ADA               	clrf	fsr2h,c
  1441  001468  68DF               	setf	indf2,c
  1442  00146A  2A0F               	incf	Init_Variable@i,f,c
  1443  00146C  0E09               	movlw	9
  1444  00146E  640F               	cpfsgt	Init_Variable@i,c
  1445  001470  D7F7               	goto	l8327
  1446                           
  1447                           ;MOTEUR.c: 184: }
  1448                           ;MOTEUR.c: 186: Etat_Precedent_Index = 0;
  1449  001472  6A4D               	clrf	_Etat_Precedent_Index,c
  1450                           
  1451                           ;MOTEUR.c: 187: Etat = 255;
  1452  001474  0100               	movlb	0	; () banked
  1453  001476  69A9               	setf	_Etat& (0+255),b	;volatile
  1454                           
  1455                           ;MOTEUR.c: 190: Alarme = 0;
  1456  001478  6BA8               	clrf	_Alarme& (0+255),b	;volatile
  1457                           
  1458                           ;MOTEUR.c: 192: nb_s_fonctionnement_souhaiter = 0;
  1459  00147A  6BA7               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1460                           
  1461                           ;MOTEUR.c: 193: nb_s_fonctionnement = 0;
  1462  00147C  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;MOTEUR.c: 196: nb_s_patinage = 90;
  1466  00147E  0E5A               	movlw	90
  1467  001480  6FA5               	movwf	_nb_s_patinage& (0+255),b
  1468                           
  1469                           ;MOTEUR.c: 197: nb_s_patinage = 45;
  1470  001482  0E2D               	movlw	45
  1471  001484  6FA5               	movwf	_nb_s_patinage& (0+255),b
  1472                           
  1473                           ;MOTEUR.c: 198: nb_s_patinage = 50;
  1474  001486  0E32               	movlw	50
  1475  001488  6FA5               	movwf	_nb_s_patinage& (0+255),b
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;MOTEUR.c: 201: nb_100ms_Timer_5 = 0;
  1479  00148A  6BA4               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1480                           
  1481                           ;MOTEUR.c: 203: nb_100ms_pion = 2;
  1482  00148C  0E02               	movlw	2
  1483  00148E  6FA3               	movwf	_nb_100ms_pion& (0+255),b
  1484                           
  1485                           ;MOTEUR.c: 204: nb_100ms_platine = 30;
  1486  001490  0E1E               	movlw	30
  1487  001492  6FA2               	movwf	_nb_100ms_platine& (0+255),b
  1488                           
  1489                           ;MOTEUR.c: 206: nb_s_pelle = 30;
  1490  001494  6FA1               	movwf	_nb_s_pelle& (0+255),b
  1491                           
  1492                           ;MOTEUR.c: 207: nb_s_bequille = 10;
  1493  001496  0E0A               	movlw	10
  1494  001498  6E4C               	movwf	_nb_s_bequille,c
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;MOTEUR.c: 209: Detecteur_Pion = 0;
  1498  00149A  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;MOTEUR.c: 210: nb_Pion = 0;
  1502  00149C  6BA0               	clrf	_nb_Pion& (0+255),b	;volatile
  1503                           
  1504                           ; BSR set to: 0
  1505                           ;MOTEUR.c: 211: nb_Pion_Objectif = 0;
  1506  00149E  6B9F               	clrf	_nb_Pion_Objectif& (0+255),b
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;MOTEUR.c: 212: Mouvement_Startup = 0;
  1510  0014A0  6A4E               	clrf	_Mouvement_Startup,c
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;MOTEUR.c: 214: delay_s_counter = 0;
  1514  0014A2  6B8B               	clrf	_delay_s_counter& (0+255),b	;volatile
  1515                           
  1516                           ;MOTEUR.c: 216: moteur_indice = 1;
  1517  0014A4  0E01               	movlw	1
  1518  0014A6  6F97               	movwf	_moteur_indice& (0+255),b	;volatile
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;MOTEUR.c: 217: consigne = 0;
  1522  0014A8  6B96               	clrf	_consigne& (0+255),b	;volatile
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;MOTEUR.c: 218: direction = 0;
  1526  0014AA  6B8E               	clrf	_direction& (0+255),b	;volatile
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;MOTEUR.c: 219: mouvement_option = 0;
  1530  0014AC  6B8F               	clrf	_mouvement_option& (0+255),b
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;MOTEUR.c: 220: Option_Multitas = 0;
  1534  0014AE  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;MOTEUR.c: 221: type_consigne = 0;
  1538  0014B0  6B90               	clrf	_type_consigne& (0+255),b
  1539                           
  1540                           ;MOTEUR.c: 222: Consigne_Max = 20 * 5;
  1541  0014B2  0E64               	movlw	100
  1542  0014B4  6F95               	movwf	_Consigne_Max& (0+255),b	;volatile
  1543                           
  1544                           ;MOTEUR.c: 223: Consigne_Max_Moteur_X = 20 * 5;
  1545  0014B6  6F94               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1546                           
  1547                           ;MOTEUR.c: 224: Consigne_Max_Moteur_Z = 20 * 5;
  1548  0014B8  6F93               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1549                           
  1550                           ;MOTEUR.c: 227: Moteur_I_Max = 100;
  1551  0014BA  6F92               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1552                           
  1553                           ;MOTEUR.c: 228: Pelle_I_Max = 45;
  1554  0014BC  0E2D               	movlw	45
  1555  0014BE  6F91               	movwf	_Pelle_I_Max& (0+255),b
  1556                           
  1557                           ;MOTEUR.c: 229: Bequille_I_Max = 22;
  1558  0014C0  0E16               	movlw	22
  1559  0014C2  6E4A               	movwf	_Bequille_I_Max,c
  1560                           
  1561                           ;MOTEUR.c: 232: Consigne_en_A = 4;
  1562  0014C4  0E04               	movlw	4
  1563  0014C6  6E4B               	movwf	_Consigne_en_A,c
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;MOTEUR.c: 233: consigne = (char) (Consigne_en_A * 5);
  1567  0014C8  504B               	movf	_Consigne_en_A,w,c
  1568  0014CA  0D05               	mullw	5
  1569  0014CC  CFF3 F096          	movff	prodl,_consigne	;volatile
  1570                           
  1571                           ; BSR set to: 0
  1572                           ;MOTEUR.c: 236: Patinage_Nb_Essai_Autoriser = 3;
  1573  0014D0  0E03               	movlw	3
  1574  0014D2  6F9A               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;MOTEUR.c: 237: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1578  0014D4  6F9D               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser& (0+255),b
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;MOTEUR.c: 238: Capteur_Capot_Compteur_Temps_S = 0;
  1582  0014D6  6B9C               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;MOTEUR.c: 239: Patinage_Nb_Essai = 0;
  1586  0014D8  6B9B               	clrf	_Patinage_Nb_Essai& (0+255),b
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;MOTEUR.c: 240: Capteur_Capot_Nb_Evenement = 0;
  1590  0014DA  6B9E               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;MOTEUR.c: 246: consigne_moteur_3 = 50;
  1594  0014DC  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;MOTEUR.c: 248: Surveillance_Consommation_Moteur_1 = 0;
  1598  0014DE  6A49               	clrf	_Surveillance_Consommation_Moteur_1,c
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;MOTEUR.c: 249: Surveillance_Consommation_Moteur_2 = 0;
  1602  0014E0  6A48               	clrf	_Surveillance_Consommation_Moteur_2,c
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;MOTEUR.c: 251: Detection_Pion_Init();
  1606  0014E2  EC2D  F011         	call	_Detection_Pion_Init	;wreg free
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;MOTEUR.c: 259: Compteur_IRQ_I_Moteur_1 = 0;
  1610  0014E6  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;MOTEUR.c: 260: Compteur_IRQ_I_Moteur_2 = 0;
  1614  0014E8  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1615                           
  1616                           ; BSR set to: 0
  1617                           ;MOTEUR.c: 277: DVT_Compteur = 0;
  1618  0014EA  6BAB               	clrf	_P4_busy& (0+255),b
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;MOTEUR.c: 279: DVT_Tableau_Pause[0] = 9;
  1622  0014EC  0E09               	movlw	9
  1623  0014EE  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1624                           
  1625                           ; BSR set to: 0
  1626                           ;MOTEUR.c: 280: DVT_Tableau_Pause[1] = 7;
  1627  0014F0  0E07               	movlw	7
  1628  0014F2  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;MOTEUR.c: 281: DVT_Tableau_Pause[2] = 6;
  1632  0014F4  0E06               	movlw	6
  1633  0014F6  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;MOTEUR.c: 282: DVT_Tableau_Pause[3] = 5;
  1637  0014F8  0E05               	movlw	5
  1638  0014FA  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;MOTEUR.c: 283: DVT_Tableau_Pause[4] = 4;
  1642  0014FC  0E04               	movlw	4
  1643  0014FE  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;MOTEUR.c: 293: Multitas_Courant_Max = 20 * 5 ;
  1647  001500  0E03               	movlw	3
  1648  001502  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1649                           
  1650                           ; BSR set to: 0
  1651                           ;MOTEUR.c: 296: UART_TEST = 0;
  1652  001504  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;MOTEUR.c: 297: RX1_ABR = 0;
  1656  001506  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1657                           
  1658                           ; BSR set to: 0
  1659                           ;MOTEUR.c: 298: RX1_full = 0;
  1660  001508  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;MOTEUR.c: 299: SPI_full = 0;
  1664  00150A  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;MOTEUR.c: 301: spiRxIndex = 0;
  1668  00150C  6A43               	clrf	_spiRxIndex,c	;volatile
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;MOTEUR.c: 302: spiTxIndex = 0;
  1672  00150E  6A44               	clrf	_spiTxIndex,c	;volatile
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;MOTEUR.c: 303: SPI_MODE = 0;
  1676  001510  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1677                           
  1678                           ; BSR set to: 0
  1679  001512  0012               	return		;funcret
  1680  001514                     __end_of_Init_Variable:
  1681                           	opt stack 0
  1682                           tblptru	equ	0xFF8
  1683                           prodl	equ	0xFF3
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1h	equ	0xFE2
  1688                           fsr1l	equ	0xFE1
  1689                           indf2	equ	0xFDF
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           
  1693 ;; *************** function _Init_TIMER5 *****************
  1694 ;; Defined at:
  1695 ;;		line 183 in file "timer.c"
  1696 ;; Parameters:    Size  Location     Type
  1697 ;;		None
  1698 ;; Auto vars:     Size  Location     Type
  1699 ;;		None
  1700 ;; Return value:  Size  Location     Type
  1701 ;;                  1    wreg      void 
  1702 ;; Registers used:
  1703 ;;		wreg, status,2
  1704 ;; Tracked objects:
  1705 ;;		On entry : 0/0
  1706 ;;		On exit  : 0/0
  1707 ;;		Unchanged: 0/0
  1708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1709 ;;      Params:         0       0       0       0
  1710 ;;      Locals:         0       0       0       0
  1711 ;;      Temps:          0       0       0       0
  1712 ;;      Totals:         0       0       0       0
  1713 ;;Total ram usage:        0 bytes
  1714 ;; Hardware stack levels used:    1
  1715 ;; Hardware stack levels required when called:   10
  1716 ;; This function calls:
  1717 ;;		Nothing
  1718 ;; This function is called by:
  1719 ;;		_main
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text2
  1724  001F18                     __ptext2:
  1725                           	opt stack 0
  1726  001F18                     _Init_TIMER5:
  1727                           	opt stack 20
  1728                           
  1729                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;incstack = 0
  1733  001F18  9EB7               	bcf	4023,7,c	;volatile
  1734                           
  1735                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1736  001F1A  8CB7               	bsf	4023,6,c	;volatile
  1737                           
  1738                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1739  001F1C  9AB7               	bcf	4023,5,c	;volatile
  1740                           
  1741                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1742  001F1E  0E18               	movlw	24
  1743  001F20  12B7               	iorwf	4023,f,c	;volatile
  1744                           
  1745                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1746  001F22  84B7               	bsf	4023,2,c	;volatile
  1747                           
  1748                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1749  001F24  92B7               	bcf	4023,1,c	;volatile
  1750                           
  1751                           ;timer.c: 218: TMR5L = 0;
  1752  001F26  6A87               	clrf	3975,c	;volatile
  1753                           
  1754                           ;timer.c: 219: TMR5H = 0;
  1755  001F28  6A88               	clrf	3976,c	;volatile
  1756                           
  1757                           ;timer.c: 221: PR5H = 0x61;
  1758  001F2A  0E61               	movlw	97
  1759  001F2C  6E91               	movwf	3985,c	;volatile
  1760                           
  1761                           ;timer.c: 222: PR5L = 0xA8;
  1762  001F2E  0EA8               	movlw	168
  1763  001F30  6E90               	movwf	3984,c	;volatile
  1764                           
  1765                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1766  001F32  90B7               	bcf	4023,0,c	;volatile
  1767                           
  1768                           ;timer.c: 228: TMR5L = 0;
  1769  001F34  6A87               	clrf	3975,c	;volatile
  1770                           
  1771                           ;timer.c: 229: TMR5H = 0;
  1772  001F36  6A88               	clrf	3976,c	;volatile
  1773                           
  1774                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1775  001F38  90A5               	bcf	4005,0,c	;volatile
  1776                           
  1777                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1778  001F3A  80A3               	bsf	4003,0,c	;volatile
  1779                           
  1780                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1781  001F3C  90A4               	bcf	4004,0,c	;volatile
  1782  001F3E  0012               	return		;funcret
  1783  001F40                     __end_of_Init_TIMER5:
  1784                           	opt stack 0
  1785                           tblptru	equ	0xFF8
  1786                           prodl	equ	0xFF3
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           postdec1	equ	0xFE5
  1790                           fsr1h	equ	0xFE2
  1791                           fsr1l	equ	0xFE1
  1792                           indf2	equ	0xFDF
  1793                           fsr2h	equ	0xFDA
  1794                           fsr2l	equ	0xFD9
  1795                           
  1796 ;; *************** function _Init_TIMER2 *****************
  1797 ;; Defined at:
  1798 ;;		line 133 in file "timer.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;		None
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1812 ;;      Params:         0       0       0       0
  1813 ;;      Locals:         0       0       0       0
  1814 ;;      Temps:          0       0       0       0
  1815 ;;      Totals:         0       0       0       0
  1816 ;;Total ram usage:        0 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:   10
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_main
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text3
  1827  00215E                     __ptext3:
  1828                           	opt stack 0
  1829  00215E                     _Init_TIMER2:
  1830                           	opt stack 20
  1831                           
  1832                           ;timer.c: 138: T2CON = 0b00100100;
  1833                           
  1834                           ;incstack = 0
  1835  00215E  0E24               	movlw	36
  1836  002160  6ECA               	movwf	4042,c	;volatile
  1837                           
  1838                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1839  002162  50CA               	movf	4042,w,c	;volatile
  1840  002164  0B87               	andlw	-121
  1841  002166  0940               	iorlw	64
  1842  002168  6ECA               	movwf	4042,c	;volatile
  1843                           
  1844                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1845  00216A  0EFC               	movlw	-4
  1846  00216C  16CA               	andwf	4042,f,c	;volatile
  1847                           
  1848                           ;timer.c: 149: PR2 = 200;
  1849  00216E  0EC8               	movlw	200
  1850  002170  6ECB               	movwf	4043,c	;volatile
  1851                           
  1852                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1853  002172  929F               	bcf	3999,1,c	;volatile
  1854                           
  1855                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1856  002174  829F               	bsf	3999,1,c	;volatile
  1857  002176  0CC8               	retlw	200	;funcret
  1858  002178                     __end_of_Init_TIMER2:
  1859                           	opt stack 0
  1860                           tblptru	equ	0xFF8
  1861                           prodl	equ	0xFF3
  1862                           postinc0	equ	0xFEE
  1863                           wreg	equ	0xFE8
  1864                           postdec1	equ	0xFE5
  1865                           fsr1h	equ	0xFE2
  1866                           fsr1l	equ	0xFE1
  1867                           indf2	equ	0xFDF
  1868                           fsr2h	equ	0xFDA
  1869                           fsr2l	equ	0xFD9
  1870                           
  1871 ;; *************** function _Init_TIMER0 *****************
  1872 ;; Defined at:
  1873 ;;		line 21 in file "timer.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1887 ;;      Params:         0       0       0       0
  1888 ;;      Locals:         0       0       0       0
  1889 ;;      Temps:          0       0       0       0
  1890 ;;      Totals:         0       0       0       0
  1891 ;;Total ram usage:        0 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:   10
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_main
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901                           	psect	text4
  1902  00206E                     __ptext4:
  1903                           	opt stack 0
  1904  00206E                     _Init_TIMER0:
  1905                           	opt stack 20
  1906                           
  1907                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  1908                           
  1909                           ;incstack = 0
  1910  00206E  9ED5               	bcf	4053,7,c	;volatile
  1911                           
  1912                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  1913  002070  9CD5               	bcf	4053,6,c	;volatile
  1914                           
  1915                           ;timer.c: 33: T0CONbits.T0CS = 0;
  1916  002072  9AD5               	bcf	4053,5,c	;volatile
  1917                           
  1918                           ;timer.c: 37: T0CONbits.T0SE = 0;
  1919  002074  98D5               	bcf	4053,4,c	;volatile
  1920                           
  1921                           ;timer.c: 41: T0CONbits.PSA = 0;
  1922  002076  96D5               	bcf	4053,3,c	;volatile
  1923                           
  1924                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  1925  002078  0E07               	movlw	7
  1926  00207A  12D5               	iorwf	4053,f,c	;volatile
  1927                           
  1928                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  1929  00207C  12D5               	iorwf	4053,f,c	;volatile
  1930                           
  1931                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  1932  00207E  50D5               	movf	4053,w,c	;volatile
  1933  002080  0BF8               	andlw	-8
  1934  002082  0904               	iorlw	4
  1935  002084  6ED5               	movwf	4053,c	;volatile
  1936                           
  1937                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  1938  002086  94F1               	bcf	intcon2,2,c	;volatile
  1939                           
  1940                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  1941  002088  9AF2               	bcf	intcon,5,c	;volatile
  1942                           
  1943                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  1944  00208A  94F2               	bcf	intcon,2,c	;volatile
  1945  00208C  0012               	return		;funcret
  1946  00208E                     __end_of_Init_TIMER0:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           prodl	equ	0xFF3
  1950                           intcon	equ	0xFF2
  1951                           intcon2	equ	0xFF1
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postdec1	equ	0xFE5
  1955                           fsr1h	equ	0xFE2
  1956                           fsr1l	equ	0xFE1
  1957                           indf2	equ	0xFDF
  1958                           fsr2h	equ	0xFDA
  1959                           fsr2l	equ	0xFD9
  1960                           
  1961 ;; *************** function _Init_SPI *****************
  1962 ;; Defined at:
  1963 ;;		line 24 in file "spi.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;		None
  1966 ;; Auto vars:     Size  Location     Type
  1967 ;;		None
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, status,2
  1972 ;; Tracked objects:
  1973 ;;		On entry : 3F/0
  1974 ;;		On exit  : 3F/0
  1975 ;;		Unchanged: 3F/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1977 ;;      Params:         0       0       0       0
  1978 ;;      Locals:         0       0       0       0
  1979 ;;      Temps:          0       0       0       0
  1980 ;;      Totals:         0       0       0       0
  1981 ;;Total ram usage:        0 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:   10
  1984 ;; This function calls:
  1985 ;;		Nothing
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text5
  1992  002028                     __ptext5:
  1993                           	opt stack 0
  1994  002028                     _Init_SPI:
  1995                           	opt stack 20
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  1999                           
  2000                           ;incstack = 0
  2001  002028  8695               	bsf	3989,3,c	;volatile
  2002                           
  2003                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2004  00202A  8495               	bsf	3989,2,c	;volatile
  2005                           
  2006                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2007  00202C  9295               	bcf	3989,1,c	;volatile
  2008                           
  2009                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2010  00202E  9EC7               	bcf	4039,7,c	;volatile
  2011                           
  2012                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2013  002030  9CC7               	bcf	4039,6,c	;volatile
  2014                           
  2015                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2016  002032  8CC7               	bsf	4039,6,c	;volatile
  2017                           
  2018                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2019  002034  9EC6               	bcf	4038,7,c	;volatile
  2020                           
  2021                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2022  002036  9CC6               	bcf	4038,6,c	;volatile
  2023                           
  2024                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2025  002038  8AC6               	bsf	4038,5,c	;volatile
  2026                           
  2027                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2028  00203A  88C6               	bsf	4038,4,c	;volatile
  2029                           
  2030                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2031  00203C  98C6               	bcf	4038,4,c	;volatile
  2032                           
  2033                           ; BSR set to: 0
  2034                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2035  00203E  50C6               	movf	4038,w,c	;volatile
  2036  002040  0BF0               	andlw	-16
  2037  002042  0905               	iorlw	5
  2038  002044  6EC6               	movwf	4038,c	;volatile
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2042  002046  969E               	bcf	3998,3,c	;volatile
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2046  002048  869D               	bsf	3997,3,c	;volatile
  2047                           
  2048                           ; BSR set to: 0
  2049  00204A  0012               	return		;funcret
  2050  00204C                     __end_of_Init_SPI:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           prodl	equ	0xFF3
  2054                           intcon	equ	0xFF2
  2055                           intcon2	equ	0xFF1
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postdec1	equ	0xFE5
  2059                           fsr1h	equ	0xFE2
  2060                           fsr1l	equ	0xFE1
  2061                           indf2	equ	0xFDF
  2062                           fsr2h	equ	0xFDA
  2063                           fsr2l	equ	0xFD9
  2064                           
  2065 ;; *************** function _Init_Port *****************
  2066 ;; Defined at:
  2067 ;;		line 14 in file "init.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;		None
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, status,2
  2076 ;; Tracked objects:
  2077 ;;		On entry : 3F/0
  2078 ;;		On exit  : 3F/0
  2079 ;;		Unchanged: 3F/0
  2080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2081 ;;      Params:         0       0       0       0
  2082 ;;      Locals:         0       0       0       0
  2083 ;;      Temps:          0       0       0       0
  2084 ;;      Totals:         0       0       0       0
  2085 ;;Total ram usage:        0 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:   10
  2088 ;; This function calls:
  2089 ;;		Nothing
  2090 ;; This function is called by:
  2091 ;;		_main
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text6
  2096  001840                     __ptext6:
  2097                           	opt stack 0
  2098  001840                     _Init_Port:
  2099                           	opt stack 20
  2100                           
  2101                           ; BSR set to: 0
  2102                           ;init.c: 24: TRISA = 0b11111111;
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;incstack = 0
  2106  001840  6892               	setf	3986,c	;volatile
  2107                           
  2108                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2109  001842  8092               	bsf	3986,0,c	;volatile
  2110                           
  2111                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2112  001844  8292               	bsf	3986,1,c	;volatile
  2113                           
  2114                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2115  001846  8492               	bsf	3986,2,c	;volatile
  2116                           
  2117                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2118  001848  8692               	bsf	3986,3,c	;volatile
  2119                           
  2120                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2121  00184A  8892               	bsf	3986,4,c	;volatile
  2122                           
  2123                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2124  00184C  8A92               	bsf	3986,5,c	;volatile
  2125                           
  2126                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2127  00184E  9C92               	bcf	3986,6,c	;volatile
  2128                           
  2129                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2130  001850  8E92               	bsf	3986,7,c	;volatile
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;init.c: 33: TRISB = 0b11111010;
  2134  001852  0EFA               	movlw	250
  2135  001854  6E93               	movwf	3987,c	;volatile
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2139  001856  9093               	bcf	3987,0,c	;volatile
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2143  001858  8293               	bsf	3987,1,c	;volatile
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2147  00185A  9493               	bcf	3987,2,c	;volatile
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2151  00185C  8693               	bsf	3987,3,c	;volatile
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2155  00185E  8893               	bsf	3987,4,c	;volatile
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2159  001860  8A93               	bsf	3987,5,c	;volatile
  2160                           
  2161                           ; BSR set to: 0
  2162                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2163  001862  8C93               	bsf	3987,6,c	;volatile
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2167  001864  8E93               	bsf	3987,7,c	;volatile
  2168                           
  2169                           ;init.c: 42: TRISC = 0b11011100;
  2170  001866  0EDC               	movlw	220
  2171  001868  6E94               	movwf	3988,c	;volatile
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2175  00186A  9094               	bcf	3988,0,c	;volatile
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2179  00186C  9294               	bcf	3988,1,c	;volatile
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2183  00186E  9494               	bcf	3988,2,c	;volatile
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2187  001870  8694               	bsf	3988,3,c	;volatile
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2191  001872  8894               	bsf	3988,4,c	;volatile
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2195  001874  8A94               	bsf	3988,5,c	;volatile
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2199  001876  9C94               	bcf	3988,6,c	;volatile
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2203  001878  8E94               	bsf	3988,7,c	;volatile
  2204                           
  2205                           ;init.c: 51: TRISD = 0b00001111;
  2206  00187A  0E0F               	movlw	15
  2207  00187C  6E95               	movwf	3989,c	;volatile
  2208                           
  2209                           ;init.c: 52: TRISD = 0b00000111;
  2210  00187E  0E07               	movlw	7
  2211  001880  6E95               	movwf	3989,c	;volatile
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2215  001882  8095               	bsf	3989,0,c	;volatile
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2219  001884  8295               	bsf	3989,1,c	;volatile
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2223  001886  8495               	bsf	3989,2,c	;volatile
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2227  001888  9695               	bcf	3989,3,c	;volatile
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2231  00188A  9895               	bcf	3989,4,c	;volatile
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2235  00188C  9A95               	bcf	3989,5,c	;volatile
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2239  00188E  9C95               	bcf	3989,6,c	;volatile
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2243  001890  9E95               	bcf	3989,7,c	;volatile
  2244                           
  2245                           ;init.c: 62: TRISE = 0b00000111;
  2246  001892  6E96               	movwf	3990,c	;volatile
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2250  001894  8096               	bsf	3990,0,c	;volatile
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2254  001896  8296               	bsf	3990,1,c	;volatile
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2258  001898  9496               	bcf	3990,2,c	;volatile
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;init.c: 78: LATA = 0b00000000;
  2262  00189A  6A89               	clrf	3977,c	;volatile
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;init.c: 79: LATB = 0b00000000;
  2266  00189C  6A8A               	clrf	3978,c	;volatile
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;init.c: 80: LATC = 0b00000000;
  2270  00189E  6A8B               	clrf	3979,c	;volatile
  2271                           
  2272                           ; BSR set to: 0
  2273                           ;init.c: 81: LATD = 0b00000000;
  2274  0018A0  6A8C               	clrf	3980,c	;volatile
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;init.c: 82: LATE = 0b00000000;
  2278  0018A2  6A8D               	clrf	3981,c	;volatile
  2279                           
  2280                           ; BSR set to: 0
  2281  0018A4  0012               	return		;funcret
  2282  0018A6                     __end_of_Init_Port:
  2283                           	opt stack 0
  2284                           tblptru	equ	0xFF8
  2285                           prodl	equ	0xFF3
  2286                           intcon	equ	0xFF2
  2287                           intcon2	equ	0xFF1
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1h	equ	0xFE2
  2292                           fsr1l	equ	0xFE1
  2293                           indf2	equ	0xFDF
  2294                           fsr2h	equ	0xFDA
  2295                           fsr2l	equ	0xFD9
  2296                           
  2297 ;; *************** function _Init_PWM *****************
  2298 ;; Defined at:
  2299 ;;		line 14 in file "pwm.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;		None
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, status,2
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2313 ;;      Params:         0       0       0       0
  2314 ;;      Locals:         0       0       0       0
  2315 ;;      Temps:          0       0       0       0
  2316 ;;      Totals:         0       0       0       0
  2317 ;;Total ram usage:        0 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:   10
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_main
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text7
  2328  002126                     __ptext7:
  2329                           	opt stack 0
  2330  002126                     _Init_PWM:
  2331                           	opt stack 20
  2332                           
  2333                           ;pwm.c: 15: PTPERL = 99;
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;incstack = 0
  2337  002126  0E63               	movlw	99
  2338  002128  6E7B               	movwf	3963,c	;volatile
  2339                           
  2340                           ;pwm.c: 16: PTPERH = 0;
  2341  00212A  6A7A               	clrf	3962,c	;volatile
  2342                           
  2343                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2344  00212C  6A7F               	clrf	3967,c	;volatile
  2345                           
  2346                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2347  00212E  0E80               	movlw	128
  2348  002130  6E7E               	movwf	3966,c	;volatile
  2349                           
  2350                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2351  002132  0E3F               	movlw	63
  2352  002134  6E6F               	movwf	3951,c	;volatile
  2353                           
  2354                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2355  002136  6A6E               	clrf	3950,c	;volatile
  2356                           
  2357                           ;pwm.c: 25: DTCON = 0b00000000;
  2358  002138  6A6D               	clrf	3949,c	;volatile
  2359                           
  2360                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2361  00213A  0E05               	movlw	5
  2362  00213C  6E6B               	movwf	3947,c	;volatile
  2363                           
  2364                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2365  00213E  6A6A               	clrf	3946,c	;volatile
  2366  002140  0012               	return		;funcret
  2367  002142                     __end_of_Init_PWM:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           postdec1	equ	0xFE5
  2376                           fsr1h	equ	0xFE2
  2377                           fsr1l	equ	0xFE1
  2378                           indf2	equ	0xFDF
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           
  2382 ;; *************** function _Init_IT *****************
  2383 ;; Defined at:
  2384 ;;		line 70 in file "interrupt.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 3F/0
  2395 ;;		On exit  : 3F/0
  2396 ;;		Unchanged: 3F/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2398 ;;      Params:         0       0       0       0
  2399 ;;      Locals:         0       0       0       0
  2400 ;;      Temps:          0       0       0       0
  2401 ;;      Totals:         0       0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:   11
  2405 ;; This function calls:
  2406 ;;		_Init_Input_Capture_0
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text8
  2413  001DC4                     __ptext8:
  2414                           	opt stack 0
  2415  001DC4                     _Init_IT:
  2416                           	opt stack 19
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2420                           
  2421                           ;incstack = 0
  2422  001DC4  8EF2               	bsf	intcon,7,c	;volatile
  2423                           
  2424                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2425  001DC6  8CF2               	bsf	intcon,6,c	;volatile
  2426                           
  2427                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2428  001DC8  9AF2               	bcf	intcon,5,c	;volatile
  2429                           
  2430                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2431  001DCA  98F2               	bcf	intcon,4,c	;volatile
  2432                           
  2433                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2434  001DCC  96F2               	bcf	intcon,3,c	;volatile
  2435                           
  2436                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2437  001DCE  94F2               	bcf	intcon,2,c	;volatile
  2438                           
  2439                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2440  001DD0  92F2               	bcf	intcon,1,c	;volatile
  2441                           
  2442                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2443  001DD2  90F2               	bcf	intcon,0,c	;volatile
  2444                           
  2445                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2446  001DD4  8EF1               	bsf	intcon2,7,c	;volatile
  2447                           
  2448                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2449  001DD6  8CF1               	bsf	intcon2,6,c	;volatile
  2450                           
  2451                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2452  001DD8  9CF1               	bcf	intcon2,6,c	;volatile
  2453                           
  2454                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2455  001DDA  8AF1               	bsf	intcon2,5,c	;volatile
  2456                           
  2457                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2458  001DDC  88F1               	bsf	intcon2,4,c	;volatile
  2459                           
  2460                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2461  001DDE  94F1               	bcf	intcon2,2,c	;volatile
  2462                           
  2463                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2464  001DE0  90F1               	bcf	intcon2,0,c	;volatile
  2465                           
  2466                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2467  001DE2  8EF0               	bsf	intcon3,7,c	;volatile
  2468                           
  2469                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2470  001DE4  8CF0               	bsf	intcon3,6,c	;volatile
  2471                           
  2472                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2473  001DE6  98F0               	bcf	intcon3,4,c	;volatile
  2474                           
  2475                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2476  001DE8  96F0               	bcf	intcon3,3,c	;volatile
  2477                           
  2478                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2479  001DEA  92F0               	bcf	intcon3,1,c	;volatile
  2480                           
  2481                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2482  001DEC  90F0               	bcf	intcon3,0,c	;volatile
  2483                           
  2484                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2485  001DEE  8ED0               	bsf	4048,7,c	;volatile
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;interrupt.c: 125: Init_Input_Capture_0();
  2489  001DF0  EC26  F010         	call	_Init_Input_Capture_0	;wreg free
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2493  001DF4  969F               	bcf	3999,3,c	;volatile
  2494                           
  2495                           ; BSR set to: 0
  2496  001DF6  0012               	return		;funcret
  2497  001DF8                     __end_of_Init_IT:
  2498                           	opt stack 0
  2499                           tblptru	equ	0xFF8
  2500                           prodl	equ	0xFF3
  2501                           intcon	equ	0xFF2
  2502                           intcon2	equ	0xFF1
  2503                           intcon3	equ	0xFF0
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           postdec1	equ	0xFE5
  2507                           fsr1h	equ	0xFE2
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           fsr2h	equ	0xFDA
  2511                           fsr2l	equ	0xFD9
  2512                           
  2513 ;; *************** function _Init_Input_Capture_0 *****************
  2514 ;; Defined at:
  2515 ;;		line 139 in file "interrupt.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;		None
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, status,2
  2524 ;; Tracked objects:
  2525 ;;		On entry : 3F/0
  2526 ;;		On exit  : 3F/0
  2527 ;;		Unchanged: 3F/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2529 ;;      Params:         0       0       0       0
  2530 ;;      Locals:         0       0       0       0
  2531 ;;      Temps:          0       0       0       0
  2532 ;;      Totals:         0       0       0       0
  2533 ;;Total ram usage:        0 bytes
  2534 ;; Hardware stack levels used:    1
  2535 ;; Hardware stack levels required when called:   10
  2536 ;; This function calls:
  2537 ;;		Nothing
  2538 ;; This function is called by:
  2539 ;;		_Init_IT
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text9
  2544  00204C                     __ptext9:
  2545                           	opt stack 0
  2546  00204C                     _Init_Input_Capture_0:
  2547                           	opt stack 19
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;incstack = 0
  2554  00204C  9C63               	bcf	3939,6,c	;volatile
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2558  00204E  5063               	movf	3939,w,c	;volatile
  2559  002050  0BF0               	andlw	-16
  2560  002052  0908               	iorlw	8
  2561  002054  6E63               	movwf	3939,c	;volatile
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2565  002056  92A3               	bcf	4003,1,c	;volatile
  2566                           
  2567                           ; BSR set to: 0
  2568                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2569  002058  92A5               	bcf	4005,1,c	;volatile
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2573  00205A  92A4               	bcf	4004,1,c	;volatile
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2577  00205C  9C62               	bcf	3938,6,c	;volatile
  2578                           
  2579                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2580  00205E  5062               	movf	3938,w,c	;volatile
  2581  002060  0BF0               	andlw	-16
  2582  002062  0908               	iorlw	8
  2583  002064  6E62               	movwf	3938,c	;volatile
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2587  002066  94A3               	bcf	4003,2,c	;volatile
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2591  002068  94A5               	bcf	4005,2,c	;volatile
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2595  00206A  94A4               	bcf	4004,2,c	;volatile
  2596                           
  2597                           ; BSR set to: 0
  2598  00206C  0012               	return		;funcret
  2599  00206E                     __end_of_Init_Input_Capture_0:
  2600                           	opt stack 0
  2601                           tblptru	equ	0xFF8
  2602                           prodl	equ	0xFF3
  2603                           intcon	equ	0xFF2
  2604                           intcon2	equ	0xFF1
  2605                           intcon3	equ	0xFF0
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1h	equ	0xFE2
  2610                           fsr1l	equ	0xFE1
  2611                           indf2	equ	0xFDF
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           
  2615 ;; *************** function _Init_ADC *****************
  2616 ;; Defined at:
  2617 ;;		line 14 in file "adc.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0
  2632 ;;      Locals:         0       0       0       0
  2633 ;;      Temps:          0       0       0       0
  2634 ;;      Totals:         0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:   10
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text10
  2646  00208E                     __ptext10:
  2647                           	opt stack 0
  2648  00208E                     _Init_ADC:
  2649                           	opt stack 20
  2650                           
  2651                           ;adc.c: 15: ADCON0 = 0b00000000;
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;incstack = 0
  2655  00208E  6AC2               	clrf	4034,c	;volatile
  2656                           
  2657                           ;adc.c: 16: ADCON1 = 0b00000000;
  2658  002090  6AC1               	clrf	4033,c	;volatile
  2659                           
  2660                           ;adc.c: 17: ADCON2 = 0b10010100;
  2661  002092  0E94               	movlw	148
  2662  002094  6EC0               	movwf	4032,c	;volatile
  2663                           
  2664                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2665  002096  50C0               	movf	4032,w,c	;volatile
  2666  002098  0BF8               	andlw	-8
  2667  00209A  0901               	iorlw	1
  2668  00209C  6EC0               	movwf	4032,c	;volatile
  2669                           
  2670                           ;adc.c: 19: ADCON3 = 0b11000000;
  2671  00209E  0EC0               	movlw	192
  2672  0020A0  6E9A               	movwf	3994,c	;volatile
  2673                           
  2674                           ;adc.c: 20: ADCHS = 0b00000000;
  2675  0020A2  6A99               	clrf	3993,c	;volatile
  2676                           
  2677                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2678  0020A4  0E03               	movlw	3
  2679  0020A6  6EB8               	movwf	4024,c	;volatile
  2680                           
  2681                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2682  0020A8  6AB9               	clrf	4025,c	;volatile
  2683                           
  2684                           ;adc.c: 24: ADON = 1;
  2685  0020AA  80C2               	bsf	4034,0,c	;volatile
  2686  0020AC  0012               	return		;funcret
  2687  0020AE                     __end_of_Init_ADC:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           intcon2	equ	0xFF1
  2693                           intcon3	equ	0xFF0
  2694                           postinc0	equ	0xFEE
  2695                           wreg	equ	0xFE8
  2696                           postdec1	equ	0xFE5
  2697                           fsr1h	equ	0xFE2
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           fsr2h	equ	0xFDA
  2701                           fsr2l	equ	0xFD9
  2702                           
  2703 ;; *************** function _EUSART1_Initialize *****************
  2704 ;; Defined at:
  2705 ;;		line 299 in file "eusart.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;		None
  2710 ;; Return value:  Size  Location     Type
  2711 ;;                  1    wreg      void 
  2712 ;; Registers used:
  2713 ;;		wreg, status,2, cstack
  2714 ;; Tracked objects:
  2715 ;;		On entry : 3F/0
  2716 ;;		On exit  : 3F/0
  2717 ;;		Unchanged: 3F/0
  2718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2719 ;;      Params:         0       0       0       0
  2720 ;;      Locals:         0       0       0       0
  2721 ;;      Temps:          0       0       0       0
  2722 ;;      Totals:         0       0       0       0
  2723 ;;Total ram usage:        0 bytes
  2724 ;; Hardware stack levels used:    1
  2725 ;; Hardware stack levels required when called:   11
  2726 ;; This function calls:
  2727 ;;		_EUSART1_IT_ACTIVATE
  2728 ;; This function is called by:
  2729 ;;		_main
  2730 ;; This function uses a non-reentrant model
  2731 ;;
  2732                           
  2733                           	psect	text11
  2734  001BA0                     __ptext11:
  2735                           	opt stack 0
  2736  001BA0                     _EUSART1_Initialize:
  2737                           	opt stack 19
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2741                           
  2742                           ;incstack = 0
  2743  001BA0  9A9D               	bcf	3997,5,c	;volatile
  2744                           
  2745                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2746  001BA2  989D               	bcf	3997,4,c	;volatile
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;eusart.c: 307: BAUDCON = 0x48;
  2750  001BA4  0E48               	movlw	72
  2751  001BA6  6EAA               	movwf	4010,c	;volatile
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2755  001BA8  86AA               	bsf	4010,3,c	;volatile
  2756                           
  2757                           ;eusart.c: 313: RCSTA1 = 0x80;
  2758  001BAA  0E80               	movlw	128
  2759  001BAC  6EAB               	movwf	4011,c	;volatile
  2760                           
  2761                           ;eusart.c: 316: TXSTA1 = 0x24;
  2762  001BAE  0E24               	movlw	36
  2763  001BB0  6EAC               	movwf	4012,c	;volatile
  2764                           
  2765                           ; BSR set to: 0
  2766                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2767  001BB2  98AC               	bcf	4012,4,c	;volatile
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2771  001BB4  84AC               	bsf	4012,2,c	;volatile
  2772                           
  2773                           ;eusart.c: 321: SPBRG = 0x22;
  2774  001BB6  0E22               	movlw	34
  2775  001BB8  6EAF               	movwf	4015,c	;volatile
  2776                           
  2777                           ;eusart.c: 322: SPBRG = 0x11;
  2778  001BBA  0E11               	movlw	17
  2779  001BBC  6EAF               	movwf	4015,c	;volatile
  2780                           
  2781                           ;eusart.c: 323: SPBRG = 0x12;
  2782  001BBE  0E12               	movlw	18
  2783  001BC0  6EAF               	movwf	4015,c	;volatile
  2784                           
  2785                           ;eusart.c: 324: SPBRG = 0x10;
  2786  001BC2  0E10               	movlw	16
  2787  001BC4  6EAF               	movwf	4015,c	;volatile
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;eusart.c: 328: SPBRGH = 0x00;
  2791  001BC6  6AB0               	clrf	4016,c	;volatile
  2792                           
  2793                           ;eusart.c: 330: SPBRG = 0x0B;
  2794  001BC8  0E0B               	movlw	11
  2795  001BCA  6EAF               	movwf	4015,c	;volatile
  2796                           
  2797                           ;eusart.c: 331: SPBRGH = 0x33;
  2798  001BCC  0E33               	movlw	51
  2799  001BCE  6EB0               	movwf	4016,c	;volatile
  2800                           
  2801                           ;eusart.c: 333: SPBRG = 205;
  2802  001BD0  0ECD               	movlw	205
  2803  001BD2  6EAF               	movwf	4015,c	;volatile
  2804                           
  2805                           ; BSR set to: 0
  2806                           ;eusart.c: 334: SPBRGH = 0x00;
  2807  001BD4  6AB0               	clrf	4016,c	;volatile
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2811  001BD6  96AA               	bcf	4010,3,c	;volatile
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2815  001BD8  94AC               	bcf	4012,2,c	;volatile
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2819  001BDA  98AC               	bcf	4012,4,c	;volatile
  2820                           
  2821                           ;eusart.c: 343: SPBRG = 12;
  2822  001BDC  0E0C               	movlw	12
  2823  001BDE  6EAF               	movwf	4015,c	;volatile
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;eusart.c: 344: SPBRGH = 0x00;
  2827  001BE0  6AB0               	clrf	4016,c	;volatile
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;eusart.c: 397: eusart1TxIndex = 0;
  2831  001BE2  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;eusart.c: 398: eusart1RxIndex = 0;
  2835  001BE4  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2839  001BE6  989F               	bcf	3999,4,c	;volatile
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2843  001BE8  9A9F               	bcf	3999,5,c	;volatile
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;eusart.c: 431: RX1_full = 0;
  2847  001BEA  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2851  001BEC  EF9D  F011         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2852  001BF0                     __end_of_EUSART1_Initialize:
  2853                           	opt stack 0
  2854                           tblptru	equ	0xFF8
  2855                           prodl	equ	0xFF3
  2856                           intcon	equ	0xFF2
  2857                           intcon2	equ	0xFF1
  2858                           intcon3	equ	0xFF0
  2859                           postinc0	equ	0xFEE
  2860                           wreg	equ	0xFE8
  2861                           postdec1	equ	0xFE5
  2862                           fsr1h	equ	0xFE2
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           
  2868 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2869 ;; Defined at:
  2870 ;;		line 232 in file "eusart.c"
  2871 ;; Parameters:    Size  Location     Type
  2872 ;;		None
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;		None
  2875 ;; Return value:  Size  Location     Type
  2876 ;;                  1    wreg      void 
  2877 ;; Registers used:
  2878 ;;		None
  2879 ;; Tracked objects:
  2880 ;;		On entry : 3F/0
  2881 ;;		On exit  : 3F/0
  2882 ;;		Unchanged: 3F/0
  2883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2884 ;;      Params:         0       0       0       0
  2885 ;;      Locals:         0       0       0       0
  2886 ;;      Temps:          0       0       0       0
  2887 ;;      Totals:         0       0       0       0
  2888 ;;Total ram usage:        0 bytes
  2889 ;; Hardware stack levels used:    1
  2890 ;; Hardware stack levels required when called:   10
  2891 ;; This function calls:
  2892 ;;		Nothing
  2893 ;; This function is called by:
  2894 ;;		_EUSART1_Initialize
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	text12
  2899  00233A                     __ptext12:
  2900                           	opt stack 0
  2901  00233A                     _EUSART1_IT_ACTIVATE:
  2902                           	opt stack 19
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;incstack = 0
  2909  00233A  88AB               	bsf	4011,4,c	;volatile
  2910                           
  2911                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  2912  00233C  9A9E               	bcf	3998,5,c	;volatile
  2913                           
  2914                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  2915  00233E  8A9D               	bsf	3997,5,c	;volatile
  2916                           
  2917                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  2918  002340  989E               	bcf	3998,4,c	;volatile
  2919                           
  2920                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  2921  002342  889D               	bsf	3997,4,c	;volatile
  2922                           
  2923                           ; BSR set to: 0
  2924  002344  0012               	return		;funcret
  2925  002346                     __end_of_EUSART1_IT_ACTIVATE:
  2926                           	opt stack 0
  2927                           tblptru	equ	0xFF8
  2928                           prodl	equ	0xFF3
  2929                           intcon	equ	0xFF2
  2930                           intcon2	equ	0xFF1
  2931                           intcon3	equ	0xFF0
  2932                           postinc0	equ	0xFEE
  2933                           wreg	equ	0xFE8
  2934                           postdec1	equ	0xFE5
  2935                           fsr1h	equ	0xFE2
  2936                           fsr1l	equ	0xFE1
  2937                           indf2	equ	0xFDF
  2938                           fsr2h	equ	0xFDA
  2939                           fsr2l	equ	0xFD9
  2940                           
  2941 ;; *************** function _Cycle *****************
  2942 ;; Defined at:
  2943 ;;		line 312 in file "MOTEUR.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;  i               1   10[BANK2 ] unsigned char 
  2948 ;;  j               1    0        unsigned char 
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      void 
  2951 ;; Registers used:
  2952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 3F/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2958 ;;      Params:         0       0       0       0
  2959 ;;      Locals:         0       0       0       1
  2960 ;;      Temps:          0       0       0       0
  2961 ;;      Totals:         0       0       0       1
  2962 ;;Total ram usage:        1 bytes
  2963 ;; Hardware stack levels used:    1
  2964 ;; Hardware stack levels required when called:   19
  2965 ;; This function calls:
  2966 ;;		_Buzzer_Etat
  2967 ;;		_EUSART1_Check_Buffer
  2968 ;;		_Etat_Get
  2969 ;;		_Etat_Update
  2970 ;;		_Mouvement_Bequille
  2971 ;;		_Mouvement_X
  2972 ;;		_Mouvement_Z
  2973 ;;		_SPI_Check_Buffer
  2974 ;;		_delay_n_100ms
  2975 ;;		_delay_s
  2976 ;; This function is called by:
  2977 ;;		_main
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text13
  2982  000BBE                     __ptext13:
  2983                           	opt stack 0
  2984  000BBE                     _Cycle:
  2985                           	opt stack 11
  2986  000BBE                     
  2987                           ;MOTEUR.c: 346: EUSART1_Check_Buffer();
  2988  000BBE  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  2989                           
  2990                           ;MOTEUR.c: 348: SPI_Check_Buffer();
  2991  000BC2  EC60  F00F         	call	_SPI_Check_Buffer	;wreg free
  2992                           
  2993                           ;MOTEUR.c: 350: switch (Etat) {
  2994  000BC6  D10D               	goto	l8545
  2995  000BC8                     l8411:
  2996                           
  2997                           ;MOTEUR.c: 359: delay_s(1);
  2998  000BC8  0E01               	movlw	1
  2999  000BCA  ECEE  F00F         	call	_delay_s
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;MOTEUR.c: 363: if (Option_Multitas == 0) {
  3003  000BCE  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3004  000BD0  D01C               	goto	l8431
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;MOTEUR.c: 366: Mouvement_X(0, 1, 0x02 | 0x60);
  3008  000BD2  0E01               	movlw	1
  3009  000BD4  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3010  000BD6  0E62               	movlw	98
  3011  000BD8  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3012  000BDA  0E00               	movlw	0
  3013  000BDC  ECA8  F008         	call	_Mouvement_X
  3014                           
  3015                           ;MOTEUR.c: 370: Patinage_Nb_Essai -= 1;
  3016  000BE0  0100               	movlb	0	; () banked
  3017  000BE2  079B               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;MOTEUR.c: 371: if (Patinage_Nb_Essai > 0) {
  3021  000BE4  519B               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3022  000BE6  E008               	bz	l8427
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;MOTEUR.c: 372: nb_s_fonctionnement = 0;
  3026  000BE8  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;MOTEUR.c: 377: delay_s(3);
  3030  000BEA  0E03               	movlw	3
  3031  000BEC  ECEE  F00F         	call	_delay_s
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;MOTEUR.c: 378: Etat_Update(2);
  3035  000BF0  0E02               	movlw	2
  3036  000BF2  EC66  F010         	call	_Etat_Update
  3037                           
  3038                           ;MOTEUR.c: 379: } else {
  3039  000BF6  D7E3               	goto	l8409
  3040  000BF8                     l8427:
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;MOTEUR.c: 380: Etat_Update(2);
  3044  000BF8  0E02               	movlw	2
  3045  000BFA  EC66  F010         	call	_Etat_Update
  3046                           
  3047                           ;MOTEUR.c: 382: P4_busy = 0;
  3048  000BFE  0100               	movlb	0	; () banked
  3049  000C00  6BAB               	clrf	_P4_busy& (0+255),b
  3050                           
  3051                           ;MOTEUR.c: 383: Etat_Update(7);
  3052  000C02  0E07               	movlw	7
  3053  000C04  EC66  F010         	call	_Etat_Update
  3054  000C08  D7DA               	goto	l8409
  3055  000C0A                     l8431:
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;MOTEUR.c: 388: Etat_Update(0);
  3059  000C0A  0E00               	movlw	0
  3060  000C0C  EC66  F010         	call	_Etat_Update
  3061                           
  3062                           ;MOTEUR.c: 390: P4_busy = 0;
  3063  000C10  0100               	movlb	0	; () banked
  3064  000C12  6BAB               	clrf	_P4_busy& (0+255),b
  3065  000C14  D7D4               	goto	l8409
  3066  000C16                     l8435:
  3067                           
  3068                           ;MOTEUR.c: 398: delay_s(1);
  3069  000C16  0E01               	movlw	1
  3070  000C18  ECEE  F00F         	call	_delay_s
  3071                           
  3072                           ;MOTEUR.c: 401: Mouvement_X(1, 1, 0x02 | 0x60);
  3073  000C1C  0E01               	movlw	1
  3074  000C1E  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3075  000C20  0E62               	movlw	98
  3076  000C22  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3077  000C24  0E01               	movlw	1
  3078  000C26  ECA8  F008         	call	_Mouvement_X
  3079                           
  3080                           ;MOTEUR.c: 402: Patinage_Nb_Essai -= 1;
  3081  000C2A  0100               	movlb	0	; () banked
  3082  000C2C  079B               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;MOTEUR.c: 403: if (Patinage_Nb_Essai > 0) {
  3086  000C2E  519B               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3087  000C30  E008               	bz	l8447
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;MOTEUR.c: 404: nb_s_fonctionnement = 0;
  3091  000C32  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;MOTEUR.c: 405: delay_s(3);
  3095  000C34  0E03               	movlw	3
  3096  000C36  ECEE  F00F         	call	_delay_s
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;MOTEUR.c: 406: Etat_Update(3);
  3100  000C3A  0E03               	movlw	3
  3101  000C3C  EC66  F010         	call	_Etat_Update
  3102                           
  3103                           ;MOTEUR.c: 407: } else {
  3104  000C40  D7BE               	goto	l8409
  3105  000C42                     l8447:
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;MOTEUR.c: 408: Etat_Update(3);
  3109  000C42  0E03               	movlw	3
  3110  000C44  EC66  F010         	call	_Etat_Update
  3111                           
  3112                           ;MOTEUR.c: 410: P4_busy = 0;
  3113  000C48  0100               	movlb	0	; () banked
  3114  000C4A  6BAB               	clrf	_P4_busy& (0+255),b
  3115                           
  3116                           ;MOTEUR.c: 411: Etat_Update(7);
  3117  000C4C  0E07               	movlw	7
  3118  000C4E  EC66  F010         	call	_Etat_Update
  3119  000C52  D7B5               	goto	l8409
  3120  000C54                     l241:
  3121                           
  3122                           ;MOTEUR.c: 415: P4_busy = 0;
  3123  000C54  0100               	movlb	0	; () banked
  3124  000C56  6BAB               	clrf	_P4_busy& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;MOTEUR.c: 416: Etat_Update(70);
  3128  000C58  0E46               	movlw	70
  3129  000C5A  EC66  F010         	call	_Etat_Update
  3130                           
  3131                           ;MOTEUR.c: 417: break;
  3132  000C5E  D7AF               	goto	l8409
  3133  000C60                     l8455:
  3134                           
  3135                           ; BSR set to: 0
  3136  000C60  0E01               	movlw	1
  3137  000C62  EC30  F00F         	call	_Etat_Get
  3138                           
  3139                           ; Switch size 1, requested type "speed"
  3140                           ; Number of cases is 2, Range of values is 2 to 3
  3141                           ; switch strategies available:
  3142                           ; Name         Instructions Cycles
  3143                           ; simple_byte            7     4 (average)
  3144                           ;	Chosen strategy is simple_byte
  3145  000C66  0A02               	xorlw	2	; case 2
  3146  000C68  E0AF               	bz	l8411
  3147  000C6A  0A01               	xorlw	1	; case 3
  3148  000C6C  E0D4               	bz	l8435
  3149  000C6E  D7F2               	goto	l241
  3150  000C70                     l8457:
  3151                           
  3152                           ;MOTEUR.c: 429: delay_s(1);
  3153  000C70  0E01               	movlw	1
  3154  000C72  ECEE  F00F         	call	_delay_s
  3155                           
  3156                           ;MOTEUR.c: 432: Mouvement_X(0, 1, 0x02 | 0x60);
  3157  000C76  0E01               	movlw	1
  3158  000C78  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3159  000C7A  0E62               	movlw	98
  3160  000C7C  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3161  000C7E  0E00               	movlw	0
  3162  000C80  ECA8  F008         	call	_Mouvement_X
  3163                           
  3164                           ;MOTEUR.c: 433: Capteur_Capot_Nb_Evenement -= 1;
  3165  000C84  0100               	movlb	0	; () banked
  3166  000C86  079E               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;MOTEUR.c: 434: if (Capteur_Capot_Nb_Evenement > 0) {
  3170  000C88  519E               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3171  000C8A  E008               	bz	l8469
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;MOTEUR.c: 435: Capteur_Capot_Compteur_Temps_S = 0;
  3175  000C8C  6B9C               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;MOTEUR.c: 436: delay_s(3);
  3179  000C8E  0E03               	movlw	3
  3180  000C90  ECEE  F00F         	call	_delay_s
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;MOTEUR.c: 437: Etat_Update(2);
  3184  000C94  0E02               	movlw	2
  3185  000C96  EC66  F010         	call	_Etat_Update
  3186                           
  3187                           ;MOTEUR.c: 438: } else {
  3188  000C9A  D791               	goto	l8409
  3189  000C9C                     l8469:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;MOTEUR.c: 439: Etat_Update(2);
  3193  000C9C  0E02               	movlw	2
  3194  000C9E  EC66  F010         	call	_Etat_Update
  3195                           
  3196                           ;MOTEUR.c: 442: P4_busy = 0;
  3197  000CA2  0100               	movlb	0	; () banked
  3198  000CA4  6BAB               	clrf	_P4_busy& (0+255),b
  3199                           
  3200                           ;MOTEUR.c: 443: Etat_Update(7);
  3201  000CA6  0E07               	movlw	7
  3202  000CA8  EC66  F010         	call	_Etat_Update
  3203  000CAC  D788               	goto	l8409
  3204  000CAE                     l8473:
  3205                           
  3206                           ;MOTEUR.c: 448: delay_s(1);
  3207  000CAE  0E01               	movlw	1
  3208  000CB0  ECEE  F00F         	call	_delay_s
  3209                           
  3210                           ;MOTEUR.c: 451: Mouvement_X(1, 1, 0x02 | 0x60);
  3211  000CB4  0E01               	movlw	1
  3212  000CB6  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3213  000CB8  0E62               	movlw	98
  3214  000CBA  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3215  000CBC  0E01               	movlw	1
  3216  000CBE  ECA8  F008         	call	_Mouvement_X
  3217                           
  3218                           ;MOTEUR.c: 452: Capteur_Capot_Nb_Evenement -= 1;
  3219  000CC2  0100               	movlb	0	; () banked
  3220  000CC4  079E               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;MOTEUR.c: 453: if (Capteur_Capot_Nb_Evenement > 0) {
  3224  000CC6  519E               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3225  000CC8  E008               	bz	l8485
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;MOTEUR.c: 454: Capteur_Capot_Compteur_Temps_S = 0;
  3229  000CCA  6B9C               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;MOTEUR.c: 455: delay_s(3);
  3233  000CCC  0E03               	movlw	3
  3234  000CCE  ECEE  F00F         	call	_delay_s
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;MOTEUR.c: 456: Etat_Update(3);
  3238  000CD2  0E03               	movlw	3
  3239  000CD4  EC66  F010         	call	_Etat_Update
  3240                           
  3241                           ;MOTEUR.c: 457: } else {
  3242  000CD8  D772               	goto	l8409
  3243  000CDA                     l8485:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;MOTEUR.c: 458: Etat_Update(3);
  3247  000CDA  0E03               	movlw	3
  3248  000CDC  EC66  F010         	call	_Etat_Update
  3249                           
  3250                           ;MOTEUR.c: 460: P4_busy = 0;
  3251  000CE0  0100               	movlb	0	; () banked
  3252  000CE2  6BAB               	clrf	_P4_busy& (0+255),b
  3253                           
  3254                           ;MOTEUR.c: 463: Etat_Update(77);
  3255  000CE4  0E4D               	movlw	77
  3256  000CE6  EC66  F010         	call	_Etat_Update
  3257  000CEA  D769               	goto	l8409
  3258  000CEC                     l252:
  3259                           
  3260                           ;MOTEUR.c: 468: P4_busy = 0;
  3261  000CEC  0100               	movlb	0	; () banked
  3262  000CEE  6BAB               	clrf	_P4_busy& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;MOTEUR.c: 469: Etat_Update(70);
  3266  000CF0  0E46               	movlw	70
  3267  000CF2  EC66  F010         	call	_Etat_Update
  3268                           
  3269                           ;MOTEUR.c: 470: break;
  3270  000CF6  D763               	goto	l8409
  3271  000CF8                     l8493:
  3272                           
  3273                           ; BSR set to: 0
  3274  000CF8  0E01               	movlw	1
  3275  000CFA  EC30  F00F         	call	_Etat_Get
  3276                           
  3277                           ; Switch size 1, requested type "speed"
  3278                           ; Number of cases is 2, Range of values is 2 to 3
  3279                           ; switch strategies available:
  3280                           ; Name         Instructions Cycles
  3281                           ; simple_byte            7     4 (average)
  3282                           ;	Chosen strategy is simple_byte
  3283  000CFE  0A02               	xorlw	2	; case 2
  3284  000D00  E0B7               	bz	l8457
  3285  000D02  0A01               	xorlw	1	; case 3
  3286  000D04  E0D4               	bz	l8473
  3287  000D06  D7F2               	goto	l252
  3288  000D08                     l8495:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;MOTEUR.c: 484: P4_busy = 1;
  3292  000D08  0E01               	movlw	1
  3293  000D0A  6FAB               	movwf	_P4_busy& (0+255),b
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;MOTEUR.c: 485: Etat_Update(77);
  3297  000D0C  0E4D               	movlw	77
  3298  000D0E  EC66  F010         	call	_Etat_Update
  3299                           
  3300                           ;MOTEUR.c: 486: for (i = 0; i < 4; i++) {
  3301  000D12  0102               	movlb	2	; () banked
  3302  000D14  6B8A               	clrf	Cycle@i& (0+255),b
  3303  000D16                     l8505:
  3304                           
  3305                           ; BSR set to: 2
  3306                           ;MOTEUR.c: 487: Buzzer_Etat((unsigned char) 1);
  3307  000D16  0E01               	movlw	1
  3308  000D18  EC8F  F011         	call	_Buzzer_Etat
  3309                           
  3310                           ;MOTEUR.c: 488: delay_n_100ms(4);
  3311  000D1C  0E04               	movlw	4
  3312  000D1E  EC23  F011         	call	_delay_n_100ms
  3313                           
  3314                           ;MOTEUR.c: 489: Buzzer_Etat((unsigned char) 0);
  3315  000D22  0E00               	movlw	0
  3316  000D24  EC8F  F011         	call	_Buzzer_Etat
  3317                           
  3318                           ;MOTEUR.c: 490: delay_n_100ms(2);
  3319  000D28  0E02               	movlw	2
  3320  000D2A  EC23  F011         	call	_delay_n_100ms
  3321  000D2E  0102               	movlb	2	; () banked
  3322  000D30  2B8A               	incf	Cycle@i& (0+255),f,b
  3323                           
  3324                           ; BSR set to: 2
  3325  000D32  0E03               	movlw	3
  3326  000D34  658A               	cpfsgt	Cycle@i& (0+255),b
  3327  000D36  D7EF               	goto	l8505
  3328  000D38  D742               	goto	l8409
  3329  000D3A                     l8511:
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;MOTEUR.c: 495: P4_busy = 1;
  3333  000D3A  0E01               	movlw	1
  3334  000D3C  6FAB               	movwf	_P4_busy& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;MOTEUR.c: 496: Etat_Update(77);
  3338  000D3E  0E4D               	movlw	77
  3339  000D40  EC66  F010         	call	_Etat_Update
  3340                           
  3341                           ;MOTEUR.c: 500: for (i = 0; i < 4; i++) {
  3342  000D44  0102               	movlb	2	; () banked
  3343  000D46  6B8A               	clrf	Cycle@i& (0+255),b
  3344  000D48                     l8521:
  3345                           
  3346                           ; BSR set to: 2
  3347                           ;MOTEUR.c: 501: Buzzer_Etat((unsigned char) 1);
  3348  000D48  0E01               	movlw	1
  3349  000D4A  EC8F  F011         	call	_Buzzer_Etat
  3350                           
  3351                           ;MOTEUR.c: 502: delay_n_100ms(4);
  3352  000D4E  0E04               	movlw	4
  3353  000D50  EC23  F011         	call	_delay_n_100ms
  3354                           
  3355                           ;MOTEUR.c: 503: Buzzer_Etat((unsigned char) 0);
  3356  000D54  0E00               	movlw	0
  3357  000D56  EC8F  F011         	call	_Buzzer_Etat
  3358                           
  3359                           ;MOTEUR.c: 504: delay_n_100ms(2);
  3360  000D5A  0E02               	movlw	2
  3361  000D5C  EC23  F011         	call	_delay_n_100ms
  3362  000D60  0102               	movlb	2	; () banked
  3363  000D62  2B8A               	incf	Cycle@i& (0+255),f,b
  3364                           
  3365                           ; BSR set to: 2
  3366  000D64  0E03               	movlw	3
  3367  000D66  658A               	cpfsgt	Cycle@i& (0+255),b
  3368  000D68  D7EF               	goto	l8521
  3369  000D6A  D729               	goto	l8409
  3370  000D6C                     l8529:
  3371                           
  3372                           ; BSR set to: 0
  3373  000D6C  51A8               	movf	_Alarme& (0+255),w,b	;volatile
  3374                           
  3375                           ; Switch size 1, requested type "speed"
  3376                           ; Number of cases is 4, Range of values is 1 to 4
  3377                           ; switch strategies available:
  3378                           ; Name         Instructions Cycles
  3379                           ; simple_byte           13     7 (average)
  3380                           ;	Chosen strategy is simple_byte
  3381  000D6E  0A01               	xorlw	1	; case 1
  3382  000D70  E0CB               	bz	l8495
  3383  000D72  0A03               	xorlw	3	; case 2
  3384  000D74  E0E2               	bz	l8511
  3385  000D76  0A01               	xorlw	1	; case 3
  3386  000D78  E101 D772          	bz	l8455
  3387  000D7C  0A07               	xorlw	7	; case 4
  3388  000D7E  E0BC               	bz	l8493
  3389  000D80  D71E               	goto	l8409
  3390  000D82                     l8531:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;MOTEUR.c: 526: Mouvement_X(direction, type_consigne, mouvement_option);
  3394  000D82  C090  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3395  000D86  C08F  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3396  000D8A  518E               	movf	_direction& (0+255),w,b	;volatile
  3397  000D8C  ECA8  F008         	call	_Mouvement_X
  3398                           
  3399                           ;MOTEUR.c: 527: break;
  3400  000D90  D716               	goto	l8409
  3401  000D92                     l8533:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;MOTEUR.c: 532: Mouvement_X(direction, type_consigne, mouvement_option);
  3405  000D92  C090  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3406  000D96  C08F  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3407  000D9A  518E               	movf	_direction& (0+255),w,b	;volatile
  3408  000D9C  ECA8  F008         	call	_Mouvement_X
  3409                           
  3410                           ;MOTEUR.c: 534: break;
  3411  000DA0  D70E               	goto	l8409
  3412  000DA2                     l8535:
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;MOTEUR.c: 538: Mouvement_Z(direction, type_consigne, mouvement_option);
  3416  000DA2  C090  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3417  000DA6  C08F  F288         	movff	_mouvement_option,Mouvement_Z@option
  3418  000DAA  518E               	movf	_direction& (0+255),w,b	;volatile
  3419  000DAC  EC42  F00B         	call	_Mouvement_Z
  3420                           
  3421                           ;MOTEUR.c: 539: break;
  3422  000DB0  D706               	goto	l8409
  3423  000DB2                     l8537:
  3424                           
  3425                           ; BSR set to: 0
  3426                           ;MOTEUR.c: 544: Mouvement_Z(direction, type_consigne, mouvement_option);
  3427  000DB2  C090  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3428  000DB6  C08F  F288         	movff	_mouvement_option,Mouvement_Z@option
  3429  000DBA  518E               	movf	_direction& (0+255),w,b	;volatile
  3430  000DBC  EC42  F00B         	call	_Mouvement_Z
  3431                           
  3432                           ;MOTEUR.c: 546: break;
  3433  000DC0  D6FE               	goto	l8409
  3434  000DC2                     l8539:
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;MOTEUR.c: 551: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3438  000DC2  C090  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3439  000DC6  C08F  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3440  000DCA  518E               	movf	_direction& (0+255),w,b	;volatile
  3441  000DCC  EC97  F00B         	call	_Mouvement_Bequille
  3442                           
  3443                           ;MOTEUR.c: 553: break;
  3444  000DD0  D6F6               	goto	l8409
  3445  000DD2                     l8541:
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;MOTEUR.c: 559: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3449  000DD2  C090  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3450  000DD6  C08F  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3451  000DDA  518E               	movf	_direction& (0+255),w,b	;volatile
  3452  000DDC  EC97  F00B         	call	_Mouvement_Bequille
  3453                           
  3454                           ;MOTEUR.c: 562: break;
  3455  000DE0  D6EE               	goto	l8409
  3456  000DE2                     l8545:
  3457  000DE2  0100               	movlb	0	; () banked
  3458  000DE4  51A9               	movf	_Etat& (0+255),w,b	;volatile
  3459                           
  3460                           ; Switch size 1, requested type "speed"
  3461                           ; Number of cases is 7, Range of values is 1 to 9
  3462                           ; switch strategies available:
  3463                           ; Name         Instructions Cycles
  3464                           ; simple_byte           22    12 (average)
  3465                           ;	Chosen strategy is simple_byte
  3466  000DE6  0A01               	xorlw	1	; case 1
  3467  000DE8  E0C1               	bz	l8529
  3468  000DEA  0A03               	xorlw	3	; case 2
  3469  000DEC  E0CA               	bz	l8531
  3470  000DEE  0A01               	xorlw	1	; case 3
  3471  000DF0  E0D0               	bz	l8533
  3472  000DF2  0A07               	xorlw	7	; case 4
  3473  000DF4  E0DE               	bz	l8537
  3474  000DF6  0A01               	xorlw	1	; case 5
  3475  000DF8  E0D4               	bz	l8535
  3476  000DFA  0A0D               	xorlw	13	; case 8
  3477  000DFC  E0EA               	bz	l8541
  3478  000DFE  0A01               	xorlw	1	; case 9
  3479  000E00  E0E0               	bz	l8539
  3480                           
  3481                           ; BSR set to: 0
  3482  000E02  D6DD               	goto	l8409
  3483  000E04                     __end_of_Cycle:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           prodl	equ	0xFF3
  3487                           intcon	equ	0xFF2
  3488                           intcon2	equ	0xFF1
  3489                           intcon3	equ	0xFF0
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postdec1	equ	0xFE5
  3493                           fsr1h	equ	0xFE2
  3494                           fsr1l	equ	0xFE1
  3495                           indf2	equ	0xFDF
  3496                           fsr2h	equ	0xFDA
  3497                           fsr2l	equ	0xFD9
  3498                           
  3499 ;; *************** function _delay_n_100ms *****************
  3500 ;; Defined at:
  3501 ;;		line 61 in file "horloge.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  nb_100ms        1    wreg     unsigned char 
  3504 ;; Auto vars:     Size  Location     Type
  3505 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3506 ;;  i               1   16[COMRAM] unsigned char 
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      void 
  3509 ;; Registers used:
  3510 ;;		wreg, status,2, status,0, cstack
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/2
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3516 ;;      Params:         0       0       0       0
  3517 ;;      Locals:         2       0       0       0
  3518 ;;      Temps:          0       0       0       0
  3519 ;;      Totals:         2       0       0       0
  3520 ;;Total ram usage:        2 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:   11
  3523 ;; This function calls:
  3524 ;;		_delay_100ms
  3525 ;; This function is called by:
  3526 ;;		_Cycle
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text14
  3531  002246                     __ptext14:
  3532                           	opt stack 0
  3533  002246                     _delay_n_100ms:
  3534                           	opt stack 18
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;incstack = 0
  3538                           ;delay_n_100ms@nb_100ms stored from wreg
  3539  002246  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3540                           
  3541                           ;horloge.c: 62: unsigned char i;
  3542                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3543  002248  6A11               	clrf	delay_n_100ms@i,c
  3544  00224A  D003               	goto	l8185
  3545  00224C                     l8181:
  3546                           
  3547                           ;horloge.c: 64: delay_100ms();
  3548  00224C  ECE7  F00A         	call	_delay_100ms	;wreg free
  3549  002250  2A11               	incf	delay_n_100ms@i,f,c
  3550  002252                     l8185:
  3551  002252  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3552  002254  5C11               	subwf	delay_n_100ms@i,w,c
  3553  002256  E3FA               	bnc	l8181
  3554  002258  0012               	return		;funcret
  3555  00225A                     __end_of_delay_n_100ms:
  3556                           	opt stack 0
  3557                           tblptru	equ	0xFF8
  3558                           prodl	equ	0xFF3
  3559                           intcon	equ	0xFF2
  3560                           intcon2	equ	0xFF1
  3561                           intcon3	equ	0xFF0
  3562                           postinc0	equ	0xFEE
  3563                           wreg	equ	0xFE8
  3564                           postdec1	equ	0xFE5
  3565                           fsr1h	equ	0xFE2
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           fsr2h	equ	0xFDA
  3569                           fsr2l	equ	0xFD9
  3570                           
  3571 ;; *************** function _Mouvement_Z *****************
  3572 ;; Defined at:
  3573 ;;		line 896 in file "action.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  direction       1    wreg     unsigned char 
  3576 ;;  type_consign    1    7[BANK2 ] unsigned char 
  3577 ;;  option          1    8[BANK2 ] unsigned char 
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  direction       1    9[BANK2 ] unsigned char 
  3580 ;;  index           2    0        unsigned int 
  3581 ;;  Option_Temps    1    0        unsigned char 
  3582 ;;  i_max           1    0        unsigned char 
  3583 ;;  i_min           1    0        unsigned char 
  3584 ;;  i               1    0        unsigned char 
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 3F/0
  3591 ;;		On exit  : 3F/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3594 ;;      Params:         0       0       0       2
  3595 ;;      Locals:         0       0       0       1
  3596 ;;      Temps:          0       0       0       0
  3597 ;;      Totals:         0       0       0       3
  3598 ;;Total ram usage:        3 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:   18
  3601 ;; This function calls:
  3602 ;;		_Check_List_Moteur_2
  3603 ;;		_Coupe_Moteur
  3604 ;;		_Detection_Pion_Off
  3605 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3606 ;;		_Init_Moteur_2
  3607 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3608 ;;		_TIMER2_On
  3609 ;;		_delay_s
  3610 ;;		_u_Init_PWM
  3611 ;; This function is called by:
  3612 ;;		_Cycle
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text15
  3617  001684                     __ptext15:
  3618                           	opt stack 0
  3619  001684                     _Mouvement_Z:
  3620                           	opt stack 11
  3621                           
  3622                           ;incstack = 0
  3623                           ;Mouvement_Z@direction stored from wreg
  3624  001684  0102               	movlb	2	; () banked
  3625  001686  6F89               	movwf	Mouvement_Z@direction& (0+255),b
  3626                           
  3627                           ;action.c: 897: unsigned char i, i_min, i_max;
  3628                           ;action.c: 898: unsigned char Option_Temps_S;
  3629                           ;action.c: 906: Surveillance_Consommation_Moteur_2_Desactiver();
  3630  001688  ECAF  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3631                           
  3632                           ;action.c: 908: Detection_Pion_Off();
  3633  00168C  ECBF  F011         	call	_Detection_Pion_Off	;wreg free
  3634                           
  3635                           ;action.c: 911: nb_s_pelle = option;
  3636  001690  C288  F0A1         	movff	Mouvement_Z@option,_nb_s_pelle
  3637                           
  3638                           ;action.c: 914: consigne = 10;
  3639  001694  0E0A               	movlw	10
  3640  001696  0100               	movlb	0	; () banked
  3641  001698  6F96               	movwf	_consigne& (0+255),b	;volatile
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;action.c: 925: index = 0;
  3645  00169A  EC79  F00D         	call	_u_Init_PWM	;wreg free
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;action.c: 926: TMR2 = 0;
  3649  00169E  6ACC               	clrf	4044,c	;volatile
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;action.c: 927: TMR2IF = 0;
  3653  0016A0  929E               	bcf	3998,1,c	;volatile
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;action.c: 933: LATEbits.LATE2 = 0;
  3657  0016A2  948D               	bcf	3981,2,c	;volatile
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;action.c: 938: moteur_indice = 2;
  3661  0016A4  0E02               	movlw	2
  3662  0016A6  6F97               	movwf	_moteur_indice& (0+255),b	;volatile
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;action.c: 939: Init_ADC_Single_Shoot_I_Moteur_2();
  3666  0016A8  EC53  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;action.c: 942: if (direction == 1) {
  3670  0016AC  0102               	movlb	2	; () banked
  3671  0016AE  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3672  0016B0  E103               	bnz	l997
  3673                           
  3674                           ; BSR set to: 2
  3675                           ;action.c: 943: LATD7 = 0;LATD6 = 1;
  3676  0016B2  9E8C               	bcf	3980,7,c	;volatile
  3677  0016B4  8C8C               	bsf	3980,6,c	;volatile
  3678                           
  3679                           ;action.c: 944: } else {
  3680  0016B6  D002               	goto	l8209
  3681  0016B8                     l997:
  3682                           
  3683                           ; BSR set to: 2
  3684                           ;action.c: 945: LATD6 = 0;LATD7 = 1;
  3685  0016B8  9C8C               	bcf	3980,6,c	;volatile
  3686  0016BA  8E8C               	bsf	3980,7,c	;volatile
  3687  0016BC                     l8209:
  3688                           
  3689                           ; BSR set to: 2
  3690                           ;action.c: 946: }
  3691                           ;action.c: 947: PDC1L = 1 << 2;
  3692  0016BC  0E04               	movlw	4
  3693  0016BE  6E77               	movwf	3959,c	;volatile
  3694                           
  3695                           ; BSR set to: 2
  3696                           ;action.c: 948: PDC1H = 0;
  3697  0016C0  6A76               	clrf	3958,c	;volatile
  3698                           
  3699                           ;action.c: 949: OVDCOND = 0b00000100;
  3700  0016C2  0E04               	movlw	4
  3701  0016C4  6E6B               	movwf	3947,c	;volatile
  3702                           
  3703                           ; BSR set to: 2
  3704                           ;action.c: 950: LATCbits.LATC1 = 1;
  3705  0016C6  828B               	bsf	3979,1,c	;volatile
  3706                           
  3707                           ;action.c: 952: erreur = 1;
  3708  0016C8  0100               	movlb	0	; () banked
  3709  0016CA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3710  0016CC  0E01               	movlw	1
  3711  0016CE  6F84               	movwf	_erreur& (0+255),b	;volatile
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;action.c: 953: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3715  0016D0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3716  0016D2  46E8               	rlncf	wreg,f,c
  3717  0016D4  0BFC               	andlw	252
  3718  0016D6  6E77               	movwf	3959,c	;volatile
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;action.c: 954: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3722  0016D8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3723  0016DA  46E8               	rlncf	wreg,f,c
  3724  0016DC  0B03               	andlw	3
  3725  0016DE  6E76               	movwf	3958,c	;volatile
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;action.c: 957: erreur_accumulator = 0;
  3729  0016E0  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3730  0016E2  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;action.c: 960: Nouvelle_Valeur_ADC = 0;
  3734  0016E4  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;action.c: 964: PIE3bits.PTIE = 0;
  3738  0016E6  98A3               	bcf	4003,4,c	;volatile
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;action.c: 965: PIE1bits.ADIE = 1;
  3742  0016E8  8C9D               	bsf	3997,6,c	;volatile
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;action.c: 966: PIE1bits.ADIE = 1;
  3746  0016EA  8C9D               	bsf	3997,6,c	;volatile
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;action.c: 968: PEIE = 1;
  3750  0016EC  8CF2               	bsf	intcon,6,c	;volatile
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;action.c: 969: GIE = 1;
  3754  0016EE  8EF2               	bsf	intcon,7,c	;volatile
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;action.c: 970: TIMER2_On();
  3758  0016F0  ECCF  F011         	call	_TIMER2_On	;wreg free
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;action.c: 971: ADIF = 0;
  3762  0016F4  9C9E               	bcf	3998,6,c	;volatile
  3763                           
  3764                           ;action.c: 988: Init_Moteur_2();
  3765  0016F6  EC37  F011         	call	_Init_Moteur_2	;wreg free
  3766  0016FA                     l8237:
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;action.c: 992: Check_List_Moteur_2();
  3770  0016FA  ECC8  F00F         	call	_Check_List_Moteur_2	;wreg free
  3771                           
  3772                           ;action.c: 993: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat 
      +                          == 4)));
  3773  0016FE  0102               	movlb	2	; () banked
  3774  001700  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3775  001702  E104               	bnz	l8243
  3776                           
  3777                           ; BSR set to: 2
  3778  001704  0E05               	movlw	5
  3779  001706  0100               	movlb	0	; () banked
  3780  001708  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  3781  00170A  E0F7               	bz	l8237
  3782  00170C                     l8243:
  3783  00170C  0102               	movlb	2	; () banked
  3784  00170E  5189               	movf	Mouvement_Z@direction& (0+255),w,b
  3785  001710  E104               	bnz	l1004
  3786                           
  3787                           ; BSR set to: 2
  3788  001712  0E04               	movlw	4
  3789  001714  0100               	movlb	0	; () banked
  3790  001716  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  3791  001718  E0F0               	bz	l8237
  3792  00171A                     l1004:
  3793                           
  3794                           ;action.c: 997: PIE3bits.PTIE = 0;
  3795  00171A  98A3               	bcf	4003,4,c	;volatile
  3796                           
  3797                           ;action.c: 998: PIE1bits.ADIE = 0;
  3798  00171C  9C9D               	bcf	3997,6,c	;volatile
  3799                           
  3800                           ;action.c: 1003: LATEbits.LATE2 = 0;
  3801  00171E  948D               	bcf	3981,2,c	;volatile
  3802                           
  3803                           ;action.c: 1010: Surveillance_Consommation_Moteur_2_Desactiver();
  3804  001720  ECAF  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3805                           
  3806                           ;action.c: 1012: Coupe_Moteur();
  3807  001724  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  3808                           
  3809                           ;action.c: 1013: delay_s(1);
  3810  001728  0E01               	movlw	1
  3811  00172A  EFEE  F00F         	goto	_delay_s
  3812  00172E                     __end_of_Mouvement_Z:
  3813                           	opt stack 0
  3814                           tblptru	equ	0xFF8
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon2	equ	0xFF1
  3818                           intcon3	equ	0xFF0
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           postdec1	equ	0xFE5
  3822                           fsr1h	equ	0xFE2
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           
  3828 ;; *************** function _Init_Moteur_2 *****************
  3829 ;; Defined at:
  3830 ;;		line 134 in file "action.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg, status,2, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 3F/0
  3841 ;;		On exit  : 3F/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3844 ;;      Params:         0       0       0       0
  3845 ;;      Locals:         0       0       0       0
  3846 ;;      Temps:          0       0       0       0
  3847 ;;      Totals:         0       0       0       0
  3848 ;;Total ram usage:        0 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:   11
  3851 ;; This function calls:
  3852 ;;		_TIMER0_On
  3853 ;; This function is called by:
  3854 ;;		_Mouvement_Z
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text16
  3859  00226E                     __ptext16:
  3860                           	opt stack 0
  3861  00226E                     _Init_Moteur_2:
  3862                           	opt stack 17
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;action.c: 139: nb_s_fonctionnement = 0;
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;incstack = 0
  3869  00226E  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  3870                           
  3871                           ;action.c: 140: nb_Pion = 0;
  3872  002270  6BA0               	clrf	_nb_Pion& (0+255),b	;volatile
  3873                           
  3874                           ;action.c: 141: nb_100ms_Timer_5 = 0;
  3875  002272  6BA4               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;action.c: 142: TIMER0_On();
  3879  002274  ECE1  F010         	call	_TIMER0_On	;wreg free
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;action.c: 145: Compteur_IRQ_I_Moteur_2 = 0;
  3883  002278  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;action.c: 146: LATCbits.LATC2=0;
  3887  00227A  948B               	bcf	3979,2,c	;volatile
  3888                           
  3889                           ; BSR set to: 0
  3890  00227C  0012               	return		;funcret
  3891  00227E                     __end_of_Init_Moteur_2:
  3892                           	opt stack 0
  3893                           tblptru	equ	0xFF8
  3894                           prodl	equ	0xFF3
  3895                           intcon	equ	0xFF2
  3896                           intcon2	equ	0xFF1
  3897                           intcon3	equ	0xFF0
  3898                           postinc0	equ	0xFEE
  3899                           wreg	equ	0xFE8
  3900                           postdec1	equ	0xFE5
  3901                           fsr1h	equ	0xFE2
  3902                           fsr1l	equ	0xFE1
  3903                           indf2	equ	0xFDF
  3904                           fsr2h	equ	0xFDA
  3905                           fsr2l	equ	0xFD9
  3906                           
  3907 ;; *************** function _Check_List_Moteur_2 *****************
  3908 ;; Defined at:
  3909 ;;		line 156 in file "action.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;		None
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3923 ;;      Params:         0       0       0       0
  3924 ;;      Locals:         0       0       0       0
  3925 ;;      Temps:          0       0       0       0
  3926 ;;      Totals:         0       0       0       0
  3927 ;;Total ram usage:        0 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:   17
  3930 ;; This function calls:
  3931 ;;		_EUSART1_Check_Buffer
  3932 ;;		_Etat_Update
  3933 ;;		_SPI_Check_Buffer
  3934 ;; This function is called by:
  3935 ;;		_Mouvement_Z
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           	psect	text17
  3940  001F90                     __ptext17:
  3941                           	opt stack 0
  3942  001F90                     _Check_List_Moteur_2:
  3943                           	opt stack 11
  3944                           
  3945                           ;action.c: 165: EUSART1_Check_Buffer();
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;incstack = 0
  3949  001F90  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  3950                           
  3951                           ;action.c: 166: SPI_Check_Buffer();
  3952  001F94  EC60  F00F         	call	_SPI_Check_Buffer	;wreg free
  3953                           
  3954                           ;action.c: 177: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  3955  001F98  0100               	movlb	0	; () banked
  3956  001F9A  51A1               	movf	_nb_s_pelle& (0+255),w,b
  3957  001F9C  5DA6               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  3958  001F9E  E207               	bc	l955
  3959                           
  3960                           ; BSR set to: 0
  3961  001FA0  0E02               	movlw	2
  3962  001FA2  65A6               	cpfsgt	_nb_s_fonctionnement& (0+255),b	;volatile
  3963  001FA4  0C02               	retlw	2
  3964                           
  3965                           ; BSR set to: 0
  3966  001FA6  5191               	movf	_Pelle_I_Max& (0+255),w,b
  3967  001FA8  5D98               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  3968  001FAA  A0D8               	btfss	status,0,c
  3969  001FAC  0012               	return	
  3970  001FAE                     l955:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;action.c: 181: P4_busy = 0;
  3974  001FAE  6BAB               	clrf	_P4_busy& (0+255),b
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;action.c: 182: Etat_Update(0);
  3978  001FB0  0E00               	movlw	0
  3979  001FB2  EF66  F010         	goto	_Etat_Update
  3980  001FB6                     __end_of_Check_List_Moteur_2:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           prodl	equ	0xFF3
  3984                           intcon	equ	0xFF2
  3985                           intcon2	equ	0xFF1
  3986                           intcon3	equ	0xFF0
  3987                           postinc0	equ	0xFEE
  3988                           wreg	equ	0xFE8
  3989                           postdec1	equ	0xFE5
  3990                           fsr1h	equ	0xFE2
  3991                           fsr1l	equ	0xFE1
  3992                           indf2	equ	0xFDF
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _Mouvement_X *****************
  3998 ;; Defined at:
  3999 ;;		line 1031 in file "action.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  direction       1    wreg     unsigned char 
  4002 ;;  type_consign    1   17[BANK0 ] unsigned char 
  4003 ;;  option          1   18[BANK0 ] unsigned char 
  4004 ;; Auto vars:     Size  Location     Type
  4005 ;;  direction       1    7[BANK2 ] unsigned char 
  4006 ;;  index           2    0        unsigned int 
  4007 ;;  Option_Temps    1    0        unsigned char 
  4008 ;;  i_max           1    0        unsigned char 
  4009 ;;  i_min           1    0        unsigned char 
  4010 ;;  i               1    0        unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 3F/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4020 ;;      Params:         0       2       0       0
  4021 ;;      Locals:         0       0       0       1
  4022 ;;      Temps:          0       0       0       0
  4023 ;;      Totals:         0       2       0       1
  4024 ;;Total ram usage:        3 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:   18
  4027 ;; This function calls:
  4028 ;;		_Capteur_Capot_Off
  4029 ;;		_Capteur_Capot_On
  4030 ;;		_Check_List_Moteur_1
  4031 ;;		_Coupe_Moteur
  4032 ;;		_Detection_Pion_Init
  4033 ;;		_Detection_Pion_Off
  4034 ;;		_Detection_Pion_On
  4035 ;;		_EUSART1_Check_Buffer
  4036 ;;		_Etat_Update
  4037 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4038 ;;		_Init_Moteur_1
  4039 ;;		_SPI_Check_Buffer
  4040 ;;		_Stop_Moteur_1
  4041 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4042 ;;		_TIMER2_On
  4043 ;;		_u_Init_PWM
  4044 ;; This function is called by:
  4045 ;;		_Cycle
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text18
  4050  001150                     __ptext18:
  4051                           	opt stack 0
  4052  001150                     _Mouvement_X:
  4053                           	opt stack 11
  4054                           
  4055                           ;incstack = 0
  4056                           ;Mouvement_X@direction stored from wreg
  4057  001150  0102               	movlb	2	; () banked
  4058  001152  6F87               	movwf	Mouvement_X@direction& (0+255),b
  4059                           
  4060                           ;action.c: 1033: unsigned char i, i_min, i_max;
  4061                           ;action.c: 1034: unsigned char Option_Temps_S;
  4062                           ;action.c: 1044: consigne = 10;
  4063  001154  0E0A               	movlw	10
  4064  001156  0100               	movlb	0	; () banked
  4065  001158  6F96               	movwf	_consigne& (0+255),b	;volatile
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;action.c: 1051: Surveillance_Consommation_Moteur_1_Desactiver();
  4069  00115A  ECA3  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;action.c: 1062: index = 0;
  4073  00115E  EC79  F00D         	call	_u_Init_PWM	;wreg free
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;action.c: 1063: TMR2 = 0;
  4077  001162  6ACC               	clrf	4044,c	;volatile
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;action.c: 1064: TMR2IF = 0;
  4081  001164  929E               	bcf	3998,1,c	;volatile
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;action.c: 1069: if ((!(option & 0x02))
  4085                           ;action.c: 1072: ) {
  4086  001166  A3FF               	btfss	Mouvement_X@option& (0+255),1,b
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;action.c: 1074: Capteur_Capot_On();
  4090  001168  EC47  F011         	call	_Capteur_Capot_On	;wreg free
  4091                           
  4092                           ;action.c: 1076: }
  4093                           ;action.c: 1084: moteur_indice = 1;
  4094  00116C  0E01               	movlw	1
  4095  00116E  0100               	movlb	0	; () banked
  4096  001170  6F97               	movwf	_moteur_indice& (0+255),b	;volatile
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;action.c: 1085: Init_ADC_Single_Shoot_I_Moteur_1();
  4100  001172  ECEA  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;action.c: 1088: if (direction == 1) {
  4104  001176  0102               	movlb	2	; () banked
  4105  001178  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4106  00117A  E103               	bnz	l1009
  4107                           
  4108                           ; BSR set to: 2
  4109                           ;action.c: 1089: LATD5 = 0;LATD4 = 1;
  4110  00117C  9A8C               	bcf	3980,5,c	;volatile
  4111  00117E  888C               	bsf	3980,4,c	;volatile
  4112                           
  4113                           ;action.c: 1090: } else {
  4114  001180  D002               	goto	l8097
  4115  001182                     l1009:
  4116                           
  4117                           ; BSR set to: 2
  4118                           ;action.c: 1091: LATD4 = 0;LATD5 = 1;
  4119  001182  988C               	bcf	3980,4,c	;volatile
  4120  001184  8A8C               	bsf	3980,5,c	;volatile
  4121  001186                     l8097:
  4122                           
  4123                           ; BSR set to: 2
  4124                           ;action.c: 1092: }
  4125                           ;action.c: 1093: PDC0L = 1 << 2;
  4126  001186  0E04               	movlw	4
  4127  001188  6E79               	movwf	3961,c	;volatile
  4128                           
  4129                           ; BSR set to: 2
  4130                           ;action.c: 1094: PDC0H = 0;
  4131  00118A  6A78               	clrf	3960,c	;volatile
  4132                           
  4133                           ;action.c: 1095: OVDCOND = 0b00000001;
  4134  00118C  0E01               	movlw	1
  4135  00118E  6E6B               	movwf	3947,c	;volatile
  4136                           
  4137                           ; BSR set to: 2
  4138                           ;action.c: 1096: LATCbits.LATC0 = 1;
  4139  001190  808B               	bsf	3979,0,c	;volatile
  4140                           
  4141                           ;action.c: 1099: erreur = 1;
  4142  001192  0100               	movlb	0	; () banked
  4143  001194  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4144  001196  6F84               	movwf	_erreur& (0+255),b	;volatile
  4145                           
  4146                           ; BSR set to: 0
  4147                           ;action.c: 1100: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4148  001198  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4149  00119A  46E8               	rlncf	wreg,f,c
  4150  00119C  0BFC               	andlw	252
  4151  00119E  6E79               	movwf	3961,c	;volatile
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;action.c: 1101: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4155  0011A0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4156  0011A2  46E8               	rlncf	wreg,f,c
  4157  0011A4  0B03               	andlw	3
  4158  0011A6  6E78               	movwf	3960,c	;volatile
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;action.c: 1104: erreur_accumulator = 0;
  4162  0011A8  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4163  0011AA  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4164                           
  4165                           ; BSR set to: 0
  4166                           ;action.c: 1107: Nouvelle_Valeur_ADC = 0;
  4167  0011AC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;action.c: 1117: PIE3bits.PTIE = 0;
  4171  0011AE  98A3               	bcf	4003,4,c	;volatile
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;action.c: 1118: PIE1bits.ADIE = 1;
  4175  0011B0  8C9D               	bsf	3997,6,c	;volatile
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;action.c: 1120: PEIE = 1;
  4179  0011B2  8CF2               	bsf	intcon,6,c	;volatile
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;action.c: 1121: GIE = 1;
  4183  0011B4  8EF2               	bsf	intcon,7,c	;volatile
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;action.c: 1122: TIMER2_On();
  4187  0011B6  ECCF  F011         	call	_TIMER2_On	;wreg free
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;action.c: 1123: ADIF = 0;
  4191  0011BA  9C9E               	bcf	3998,6,c	;volatile
  4192                           
  4193                           ;action.c: 1127: Init_Moteur_1();
  4194  0011BC  EC3F  F011         	call	_Init_Moteur_1	;wreg free
  4195                           
  4196                           ;action.c: 1130: switch (type_consigne) {
  4197  0011C0  D051               	goto	l8173
  4198  0011C2                     l8123:
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;action.c: 1132: nb_Pion_Objectif = 2;
  4202  0011C2  0E02               	movlw	2
  4203  0011C4  6F9F               	movwf	_nb_Pion_Objectif& (0+255),b
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;action.c: 1134: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4207  0011C6  39FF               	swapf	Mouvement_X@option& (0+255),w,b
  4208  0011C8  0B0F               	andlw	15
  4209  0011CA  6FA7               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;action.c: 1138: if (option & 0x04) {
  4213  0011CC  A5FF               	btfss	Mouvement_X@option& (0+255),2,b
  4214  0011CE  D003               	goto	l8131
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;action.c: 1140: nb_s_fonctionnement_souhaiter *= 3;
  4218  0011D0  90D8               	bcf	status,0,c
  4219  0011D2  35A7               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4220  0011D4  27A7               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4221  0011D6                     l8131:
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;action.c: 1142: }
  4225                           ;action.c: 1144: if (Option_Pailleux==1){
  4226  0011D6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4227  0011D8  D00F               	goto	l8141
  4228  0011DA                     l8133:
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;action.c: 1155: EUSART1_Check_Buffer();
  4232  0011DA  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4233                           
  4234                           ;action.c: 1156: SPI_Check_Buffer();
  4235  0011DE  EC60  F00F         	call	_SPI_Check_Buffer	;wreg free
  4236                           
  4237                           ;action.c: 1167: } while(
  4238                           ;action.c: 1168: ((Etat == 2) | (Etat == 3))
  4239                           ;action.c: 1169: &&
  4240                           ;action.c: 1170: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4241                           ;action.c: 1171: )
  4242  0011E2  0E02               	movlw	2
  4243  0011E4  0100               	movlb	0	; () banked
  4244  0011E6  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  4245  0011E8  E003               	bz	l8139
  4246                           
  4247                           ; BSR set to: 0
  4248  0011EA  0E03               	movlw	3
  4249  0011EC  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  4250  0011EE  E10C               	bnz	l8145
  4251  0011F0                     l8139:
  4252                           
  4253                           ; BSR set to: 0
  4254  0011F0  51A7               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4255  0011F2  5DA6               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4256  0011F4  E209               	bc	l8145
  4257  0011F6  D7F1               	goto	l8133
  4258  0011F8                     l8141:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;action.c: 1181: EUSART1_Check_Buffer();
  4262  0011F8  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  4263                           
  4264                           ;action.c: 1182: SPI_Check_Buffer();
  4265  0011FC  EC60  F00F         	call	_SPI_Check_Buffer	;wreg free
  4266                           
  4267                           ;action.c: 1185: } while(nb_s_fonctionnement < nb_s_fonctionnement_souhaiter);
  4268  001200  0100               	movlb	0	; () banked
  4269  001202  51A7               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4270  001204  5DA6               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  4271  001206  E3F8               	bnc	l8141
  4272  001208                     l8145:
  4273                           
  4274                           ; BSR set to: 0
  4275                           ;action.c: 1186: }
  4276                           ;action.c: 1190: Stop_Moteur_1();
  4277  001208  ECE1  F011         	call	_Stop_Moteur_1	;wreg free
  4278                           
  4279                           ;action.c: 1191: Capteur_Capot_Off();
  4280  00120C  ECE3  F011         	call	_Capteur_Capot_Off	;wreg free
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;action.c: 1194: if ((Etat == 2) | (Etat == 3)) {
  4284  001210  0E02               	movlw	2
  4285  001212  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  4286  001214  E003               	bz	l8151
  4287                           
  4288                           ; BSR set to: 0
  4289  001216  0E03               	movlw	3
  4290  001218  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  4291  00121A  E128               	bnz	l1027
  4292  00121C                     l8151:
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;action.c: 1196: Etat_Update(0);
  4296  00121C  0E00               	movlw	0
  4297  00121E  EC66  F010         	call	_Etat_Update
  4298                           
  4299                           ;action.c: 1197: P4_busy = 0;
  4300  001222  0100               	movlb	0	; () banked
  4301  001224  6BAB               	clrf	_P4_busy& (0+255),b
  4302  001226  D022               	goto	l1027
  4303  001228                     l1028:
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;action.c: 1214: nb_Pion_Objectif = option;
  4307  001228  C0FF  F09F         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4308                           
  4309                           ;action.c: 1215: nb_Pion = 0;
  4310  00122C  6BA0               	clrf	_nb_Pion& (0+255),b	;volatile
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;action.c: 1223: Detection_Pion_Init();
  4314  00122E  EC2D  F011         	call	_Detection_Pion_Init	;wreg free
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;action.c: 1224: Detection_Pion_On();
  4318  001232  ECDB  F00F         	call	_Detection_Pion_On	;wreg free
  4319  001236                     l8159:
  4320                           
  4321                           ;action.c: 1247: Check_List_Moteur_1();
  4322  001236  EC49  F00F         	call	_Check_List_Moteur_1	;wreg free
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;action.c: 1248: } while (
  4326                           ;action.c: 1249: ((direction == 1) && (Etat == 2))
  4327                           ;action.c: 1250: |
  4328                           ;action.c: 1251: ((direction == 0) && (Etat == 3))
  4329                           ;action.c: 1253: );
  4330  00123A  0102               	movlb	2	; () banked
  4331  00123C  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4332  00123E  E104               	bnz	l8165
  4333                           
  4334                           ; BSR set to: 2
  4335  001240  0E02               	movlw	2
  4336  001242  0100               	movlb	0	; () banked
  4337  001244  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  4338  001246  E0F7               	bz	l8159
  4339  001248                     l8165:
  4340  001248  0102               	movlb	2	; () banked
  4341  00124A  5187               	movf	Mouvement_X@direction& (0+255),w,b
  4342  00124C  E104               	bnz	l8169
  4343                           
  4344                           ; BSR set to: 2
  4345  00124E  0E03               	movlw	3
  4346  001250  0100               	movlb	0	; () banked
  4347  001252  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  4348  001254  E0F0               	bz	l8159
  4349  001256                     l8169:
  4350                           
  4351                           ;action.c: 1256: Detection_Pion_Off();
  4352  001256  ECBF  F011         	call	_Detection_Pion_Off	;wreg free
  4353                           
  4354                           ;action.c: 1264: Stop_Moteur_1();
  4355  00125A  ECE1  F011         	call	_Stop_Moteur_1	;wreg free
  4356                           
  4357                           ;action.c: 1265: Capteur_Capot_Off();
  4358  00125E  ECE3  F011         	call	_Capteur_Capot_Off	;wreg free
  4359                           
  4360                           ;action.c: 1267: break;
  4361  001262  D004               	goto	l1027
  4362  001264                     l8173:
  4363                           
  4364                           ; BSR set to: 0
  4365  001264  51FE               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4366                           
  4367                           ; Switch size 1, requested type "speed"
  4368                           ; Number of cases is 2, Range of values is 0 to 1
  4369                           ; switch strategies available:
  4370                           ; Name         Instructions Cycles
  4371                           ; simple_byte            7     4 (average)
  4372                           ;	Chosen strategy is simple_byte
  4373  001266  E0E0               	bz	l1028
  4374  001268  0A01               	xorlw	1	; case 1
  4375  00126A  E0AB               	bz	l8123
  4376  00126C                     l1027:
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;action.c: 1314: PIE3bits.PTIE = 0;
  4380  00126C  98A3               	bcf	4003,4,c	;volatile
  4381                           
  4382                           ;action.c: 1315: PIE1bits.ADIE = 0;
  4383  00126E  9C9D               	bcf	3997,6,c	;volatile
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;action.c: 1317: Surveillance_Consommation_Moteur_1_Desactiver();
  4387  001270  ECA3  F011         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;action.c: 1319: Coupe_Moteur();
  4391  001274  EFF7  F010         	goto	_Coupe_Moteur	;wreg free
  4392  001278                     __end_of_Mouvement_X:
  4393                           	opt stack 0
  4394                           tblptru	equ	0xFF8
  4395                           prodl	equ	0xFF3
  4396                           intcon	equ	0xFF2
  4397                           intcon2	equ	0xFF1
  4398                           intcon3	equ	0xFF0
  4399                           postinc0	equ	0xFEE
  4400                           wreg	equ	0xFE8
  4401                           postdec1	equ	0xFE5
  4402                           fsr1h	equ	0xFE2
  4403                           fsr1l	equ	0xFE1
  4404                           indf2	equ	0xFDF
  4405                           fsr2h	equ	0xFDA
  4406                           fsr2l	equ	0xFD9
  4407                           status	equ	0xFD8
  4408                           
  4409 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4410 ;; Defined at:
  4411 ;;		line 856 in file "interrupt.c"
  4412 ;; Parameters:    Size  Location     Type
  4413 ;;		None
  4414 ;; Auto vars:     Size  Location     Type
  4415 ;;		None
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  1    wreg      void 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2
  4420 ;; Tracked objects:
  4421 ;;		On entry : 3F/0
  4422 ;;		On exit  : 3F/0
  4423 ;;		Unchanged: 3F/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4425 ;;      Params:         0       0       0       0
  4426 ;;      Locals:         0       0       0       0
  4427 ;;      Temps:          0       0       0       0
  4428 ;;      Totals:         0       0       0       0
  4429 ;;Total ram usage:        0 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; Hardware stack levels required when called:   10
  4432 ;; This function calls:
  4433 ;;		Nothing
  4434 ;; This function is called by:
  4435 ;;		_Mouvement_X
  4436 ;; This function uses a non-reentrant model
  4437 ;;
  4438                           
  4439                           	psect	text19
  4440  002346                     __ptext19:
  4441                           	opt stack 0
  4442  002346                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4443                           	opt stack 18
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;interrupt.c: 858: if (Surveillance_Consommation_Moteur_1 != 0) {
  4447                           
  4448                           ;incstack = 0
  4449  002346  5049               	movf	_Surveillance_Consommation_Moteur_1,w,c
  4450  002348  B4D8               	btfsc	status,2,c
  4451  00234A  0012               	return	
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;interrupt.c: 859: Surveillance_Consommation_Moteur_1 = 0;
  4455  00234C  6A49               	clrf	_Surveillance_Consommation_Moteur_1,c
  4456                           
  4457                           ;interrupt.c: 860: INTCON3bits.INT1IE = 0;
  4458  00234E  96F0               	bcf	intcon3,3,c	;volatile
  4459                           
  4460                           ; BSR set to: 0
  4461  002350  0012               	return		;funcret
  4462  002352                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4463                           	opt stack 0
  4464                           tblptru	equ	0xFF8
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           intcon2	equ	0xFF1
  4468                           intcon3	equ	0xFF0
  4469                           postinc0	equ	0xFEE
  4470                           wreg	equ	0xFE8
  4471                           postdec1	equ	0xFE5
  4472                           fsr1h	equ	0xFE2
  4473                           fsr1l	equ	0xFE1
  4474                           indf2	equ	0xFDF
  4475                           fsr2h	equ	0xFDA
  4476                           fsr2l	equ	0xFD9
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _Stop_Moteur_1 *****************
  4480 ;; Defined at:
  4481 ;;		line 97 in file "action.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;		None
  4484 ;; Auto vars:     Size  Location     Type
  4485 ;;		None
  4486 ;; Return value:  Size  Location     Type
  4487 ;;                  1    wreg      void 
  4488 ;; Registers used:
  4489 ;;		cstack
  4490 ;; Tracked objects:
  4491 ;;		On entry : 0/0
  4492 ;;		On exit  : 3F/0
  4493 ;;		Unchanged: 0/0
  4494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4495 ;;      Params:         0       0       0       0
  4496 ;;      Locals:         0       0       0       0
  4497 ;;      Temps:          0       0       0       0
  4498 ;;      Totals:         0       0       0       0
  4499 ;;Total ram usage:        0 bytes
  4500 ;; Hardware stack levels used:    1
  4501 ;; Hardware stack levels required when called:   11
  4502 ;; This function calls:
  4503 ;;		_TIMER0_Off
  4504 ;; This function is called by:
  4505 ;;		_Mouvement_X
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text20
  4510  0023C2                     __ptext20:
  4511                           	opt stack 0
  4512  0023C2                     _Stop_Moteur_1:
  4513                           	opt stack 17
  4514                           
  4515                           ;action.c: 99: TIMER0_Off();
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;incstack = 0
  4519  0023C2  EFA9  F011         	goto	_TIMER0_Off	;wreg free
  4520  0023C6                     __end_of_Stop_Moteur_1:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           intcon2	equ	0xFF1
  4526                           intcon3	equ	0xFF0
  4527                           postinc0	equ	0xFEE
  4528                           wreg	equ	0xFE8
  4529                           postdec1	equ	0xFE5
  4530                           fsr1h	equ	0xFE2
  4531                           fsr1l	equ	0xFE1
  4532                           indf2	equ	0xFDF
  4533                           fsr2h	equ	0xFDA
  4534                           fsr2l	equ	0xFD9
  4535                           status	equ	0xFD8
  4536                           
  4537 ;; *************** function _Init_Moteur_1 *****************
  4538 ;; Defined at:
  4539 ;;		line 77 in file "action.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;		None
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;		None
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      void 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, cstack
  4548 ;; Tracked objects:
  4549 ;;		On entry : 3F/0
  4550 ;;		On exit  : 3F/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4553 ;;      Params:         0       0       0       0
  4554 ;;      Locals:         0       0       0       0
  4555 ;;      Temps:          0       0       0       0
  4556 ;;      Totals:         0       0       0       0
  4557 ;;Total ram usage:        0 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:   11
  4560 ;; This function calls:
  4561 ;;		_TIMER0_On
  4562 ;; This function is called by:
  4563 ;;		_Mouvement_X
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text21
  4568  00227E                     __ptext21:
  4569                           	opt stack 0
  4570  00227E                     _Init_Moteur_1:
  4571                           	opt stack 17
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;action.c: 84: Capteur_Capot_Compteur_Temps_S = 0;
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;incstack = 0
  4578  00227E  6B9C               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4579                           
  4580                           ;action.c: 87: nb_s_fonctionnement = 0;
  4581  002280  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  4582                           
  4583                           ;action.c: 88: nb_Pion = 0;
  4584  002282  6BA0               	clrf	_nb_Pion& (0+255),b	;volatile
  4585                           
  4586                           ;action.c: 89: nb_100ms_Timer_5 = 0;
  4587  002284  6BA4               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;action.c: 91: TIMER0_On();
  4591  002286  ECE1  F010         	call	_TIMER0_On	;wreg free
  4592                           
  4593                           ; BSR set to: 0
  4594                           ;action.c: 94: Compteur_IRQ_I_Moteur_1 = 0;
  4595  00228A  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  4596                           
  4597                           ; BSR set to: 0
  4598  00228C  0012               	return		;funcret
  4599  00228E                     __end_of_Init_Moteur_1:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           prodl	equ	0xFF3
  4603                           intcon	equ	0xFF2
  4604                           intcon2	equ	0xFF1
  4605                           intcon3	equ	0xFF0
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  4617 ;; Defined at:
  4618 ;;		line 110 in file "adc.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;		None
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2
  4627 ;; Tracked objects:
  4628 ;;		On entry : 3F/0
  4629 ;;		On exit  : 3F/0
  4630 ;;		Unchanged: 3F/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4632 ;;      Params:         0       0       0       0
  4633 ;;      Locals:         0       0       0       0
  4634 ;;      Temps:          0       0       0       0
  4635 ;;      Totals:         0       0       0       0
  4636 ;;Total ram usage:        0 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:   10
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_Mouvement_X
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text22
  4647  0019D4                     __ptext22:
  4648                           	opt stack 0
  4649  0019D4                     _Init_ADC_Single_Shoot_I_Moteur_1:
  4650                           	opt stack 18
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;incstack = 0
  4657  0019D4  9AC2               	bcf	4034,5,c	;volatile
  4658                           
  4659                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  4660  0019D6  98C2               	bcf	4034,4,c	;volatile
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  4664  0019D8  0EF3               	movlw	-13
  4665  0019DA  16C2               	andwf	4034,f,c	;volatile
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;adc.c: 117: ADCON0bits.ADON = 0;
  4669  0019DC  90C2               	bcf	4034,0,c	;volatile
  4670                           
  4671                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  4672  0019DE  0E3F               	movlw	-193
  4673  0019E0  16C1               	andwf	4033,f,c	;volatile
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  4677  0019E2  98C1               	bcf	4033,4,c	;volatile
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;adc.c: 130: ADCON1 = 0b00000000;
  4681  0019E4  6AC1               	clrf	4033,c	;volatile
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  4685  0019E6  9EC0               	bcf	4032,7,c	;volatile
  4686                           
  4687                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  4688  0019E8  50C0               	movf	4032,w,c	;volatile
  4689  0019EA  0B87               	andlw	-121
  4690  0019EC  0910               	iorlw	16
  4691  0019EE  6EC0               	movwf	4032,c	;volatile
  4692                           
  4693                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  4694  0019F0  50C0               	movf	4032,w,c	;volatile
  4695  0019F2  0BF8               	andlw	-8
  4696  0019F4  0904               	iorlw	4
  4697  0019F6  6EC0               	movwf	4032,c	;volatile
  4698                           
  4699                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  4700  0019F8  50C0               	movf	4032,w,c	;volatile
  4701  0019FA  0BF8               	andlw	-8
  4702  0019FC  0901               	iorlw	1
  4703  0019FE  6EC0               	movwf	4032,c	;volatile
  4704                           
  4705                           ;adc.c: 137: ADCON2 = 0b00010100;
  4706  001A00  0E14               	movlw	20
  4707  001A02  6EC0               	movwf	4032,c	;volatile
  4708                           
  4709                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  4710  001A04  50C0               	movf	4032,w,c	;volatile
  4711  001A06  0BF8               	andlw	-8
  4712  001A08  0901               	iorlw	1
  4713  001A0A  6EC0               	movwf	4032,c	;volatile
  4714                           
  4715                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  4716  001A0C  0E3F               	movlw	-193
  4717  001A0E  169A               	andwf	3994,f,c	;volatile
  4718                           
  4719                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  4720  001A10  509A               	movf	3994,w,c	;volatile
  4721  001A12  0BE0               	andlw	-32
  4722  001A14  0910               	iorlw	16
  4723  001A16  6E9A               	movwf	3994,c	;volatile
  4724                           
  4725                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  4726  001A18  0EE0               	movlw	-32
  4727  001A1A  169A               	andwf	3994,f,c	;volatile
  4728                           
  4729                           ;adc.c: 153: ADCON3 = 0b00010000;
  4730  001A1C  0E10               	movlw	16
  4731  001A1E  6E9A               	movwf	3994,c	;volatile
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;adc.c: 154: ADCON3 = 0x00;
  4735  001A20  6A9A               	clrf	3994,c	;volatile
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;adc.c: 159: ADCHS = 0b00000000;
  4739  001A22  6A99               	clrf	3993,c	;volatile
  4740                           
  4741                           ;adc.c: 160: ANSEL0 = 0b00000011;
  4742  001A24  0E03               	movlw	3
  4743  001A26  6EB8               	movwf	4024,c	;volatile
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;adc.c: 162: ANSEL1 = 0b00000000;
  4747  001A28  6AB9               	clrf	4025,c	;volatile
  4748                           
  4749                           ; BSR set to: 0
  4750                           ;adc.c: 171: PIE1bits.ADIE = 1;
  4751  001A2A  8C9D               	bsf	3997,6,c	;volatile
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;adc.c: 172: ADIF=0;
  4755  001A2C  9C9E               	bcf	3998,6,c	;volatile
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;adc.c: 173: IPR1bits.ADIP = 0;
  4759  001A2E  9C9F               	bcf	3999,6,c	;volatile
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;adc.c: 178: ADON = 1;
  4763  001A30  80C2               	bsf	4034,0,c	;volatile
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  4767  001A32  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4768                           
  4769                           ; BSR set to: 0
  4770  001A34  0012               	return		;funcret
  4771  001A36                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           prodl	equ	0xFF3
  4775                           intcon	equ	0xFF2
  4776                           intcon2	equ	0xFF1
  4777                           intcon3	equ	0xFF0
  4778                           postinc0	equ	0xFEE
  4779                           wreg	equ	0xFE8
  4780                           postdec1	equ	0xFE5
  4781                           fsr1h	equ	0xFE2
  4782                           fsr1l	equ	0xFE1
  4783                           indf2	equ	0xFDF
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _Detection_Pion_On *****************
  4789 ;; Defined at:
  4790 ;;		line 29 in file "pion.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 3F/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4804 ;;      Params:         0       0       0       0
  4805 ;;      Locals:         0       0       0       0
  4806 ;;      Temps:          0       0       0       0
  4807 ;;      Totals:         0       0       0       0
  4808 ;;Total ram usage:        0 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:   12
  4811 ;; This function calls:
  4812 ;;		_IRQ_PION_Metal_Apparait
  4813 ;; This function is called by:
  4814 ;;		_Mouvement_X
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text23
  4819  001FB6                     __ptext23:
  4820                           	opt stack 0
  4821  001FB6                     _Detection_Pion_On:
  4822                           	opt stack 16
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;incstack = 0
  4829  001FB6  92A4               	bcf	4004,1,c	;volatile
  4830                           
  4831                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  4832  001FB8  82A3               	bsf	4003,1,c	;volatile
  4833                           
  4834                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  4835  001FBA  92A4               	bcf	4004,1,c	;volatile
  4836                           
  4837                           ;pion.c: 64: Detecteur_Pion = 1;
  4838  001FBC  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  4839                           
  4840                           ;pion.c: 68: if (Option_Pailleux != 1) {
  4841  001FBE  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  4845  001FC0  B480               	btfsc	3968,2,c	;volatile
  4846  001FC2  0012               	return	
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  4850  001FC4  0E1F               	movlw	31
  4851  001FC6  65EC               	cpfsgt	_nb_100ms_platine_backup& (0+255),b
  4852  001FC8  D003               	goto	l8071
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;pion.c: 91: nb_100ms_platine = 255;
  4856  001FCA  69A2               	setf	_nb_100ms_platine& (0+255),b
  4857                           
  4858                           ;pion.c: 92: }else{
  4859  001FCC  EF57  F010         	goto	_IRQ_PION_Metal_Apparait
  4860  001FD0                     l8071:
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  4864  001FD0  51EC               	movf	_nb_100ms_platine_backup& (0+255),w,b
  4865  001FD2  0D08               	mullw	8
  4866  001FD4  CFF3 F0A2          	movff	prodl,_nb_100ms_platine
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;pion.c: 94: }
  4870                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  4871  001FD8  EF57  F010         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  4872  001FDC                     __end_of_Detection_Pion_On:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           prodl	equ	0xFF3
  4876                           intcon	equ	0xFF2
  4877                           intcon2	equ	0xFF1
  4878                           intcon3	equ	0xFF0
  4879                           postinc0	equ	0xFEE
  4880                           wreg	equ	0xFE8
  4881                           postdec1	equ	0xFE5
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           fsr2h	equ	0xFDA
  4886                           fsr2l	equ	0xFD9
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _Detection_Pion_Init *****************
  4890 ;; Defined at:
  4891 ;;		line 13 in file "pion.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;                  1    wreg      void 
  4898 ;; Registers used:
  4899 ;;		wreg, status,2
  4900 ;; Tracked objects:
  4901 ;;		On entry : 3F/0
  4902 ;;		On exit  : 3F/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4905 ;;      Params:         0       0       0       0
  4906 ;;      Locals:         0       0       0       0
  4907 ;;      Temps:          0       0       0       0
  4908 ;;      Totals:         0       0       0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:   10
  4912 ;; This function calls:
  4913 ;;		Nothing
  4914 ;; This function is called by:
  4915 ;;		_Init_Variable
  4916 ;;		_Mouvement_X
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text24
  4921  00225A                     __ptext24:
  4922                           	opt stack 0
  4923  00225A                     _Detection_Pion_Init:
  4924                           	opt stack 19
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;pion.c: 15: if (PORTAbits.RA2 == 0) {
  4928                           
  4929                           ;incstack = 0
  4930  00225A  B480               	btfsc	3968,2,c	;volatile
  4931  00225C  D004               	goto	l7865
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  4935  00225E  6B8A               	clrf	_Surveillance_Capteur_Pion& (0+255),b
  4936                           
  4937                           ; BSR set to: 0
  4938                           ;pion.c: 17: Mouvement_Startup = 1;
  4939  002260  0E01               	movlw	1
  4940  002262  6E4E               	movwf	_Mouvement_Startup,c
  4941                           
  4942                           ;pion.c: 18: } else {
  4943  002264  0C01               	retlw	1
  4944  002266                     l7865:
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;pion.c: 19: Surveillance_Capteur_Pion = 1;
  4948  002266  0E01               	movlw	1
  4949  002268  6F8A               	movwf	_Surveillance_Capteur_Pion& (0+255),b
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;pion.c: 20: Mouvement_Startup = 0;
  4953  00226A  6A4E               	clrf	_Mouvement_Startup,c
  4954                           
  4955                           ; BSR set to: 0
  4956  00226C  0012               	return		;funcret
  4957  00226E                     __end_of_Detection_Pion_Init:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           prodl	equ	0xFF3
  4961                           intcon	equ	0xFF2
  4962                           intcon2	equ	0xFF1
  4963                           intcon3	equ	0xFF0
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           fsr1h	equ	0xFE2
  4968                           fsr1l	equ	0xFE1
  4969                           indf2	equ	0xFDF
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _Check_List_Moteur_1 *****************
  4975 ;; Defined at:
  4976 ;;		line 104 in file "action.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;		None
  4979 ;; Auto vars:     Size  Location     Type
  4980 ;;		None
  4981 ;; Return value:  Size  Location     Type
  4982 ;;                  1    wreg      void 
  4983 ;; Registers used:
  4984 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4985 ;; Tracked objects:
  4986 ;;		On entry : 0/0
  4987 ;;		On exit  : 3F/0
  4988 ;;		Unchanged: 0/0
  4989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4990 ;;      Params:         0       0       0       0
  4991 ;;      Locals:         0       0       0       0
  4992 ;;      Temps:          0       0       0       0
  4993 ;;      Totals:         0       0       0       0
  4994 ;;Total ram usage:        0 bytes
  4995 ;; Hardware stack levels used:    1
  4996 ;; Hardware stack levels required when called:   17
  4997 ;; This function calls:
  4998 ;;		_Alarme_On
  4999 ;;		_EUSART1_Check_Buffer
  5000 ;;		_SPI_Check_Buffer
  5001 ;; This function is called by:
  5002 ;;		_Mouvement_X
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text25
  5007  001E92                     __ptext25:
  5008                           	opt stack 0
  5009  001E92                     _Check_List_Moteur_1:
  5010                           	opt stack 11
  5011                           
  5012                           ;action.c: 107: if(PORTCbits.RC4 == 0){
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;incstack = 0
  5016  001E92  B882               	btfsc	3970,4,c	;volatile
  5017  001E94  D002               	goto	l8009
  5018                           
  5019                           ;action.c: 108: Compteur_IRQ_I_Moteur_1 = 0;
  5020  001E96  0100               	movlb	0	; () banked
  5021  001E98  6B89               	clrf	_Compteur_IRQ_I_Moteur_1& (0+255),b	;volatile
  5022  001E9A                     l8009:
  5023                           
  5024                           ;action.c: 109: }
  5025                           ;action.c: 112: EUSART1_Check_Buffer();
  5026  001E9A  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  5027                           
  5028                           ;action.c: 113: SPI_Check_Buffer();
  5029  001E9E  EC60  F00F         	call	_SPI_Check_Buffer	;wreg free
  5030                           
  5031                           ;action.c: 115: if (nb_s_fonctionnement > nb_s_patinage) {
  5032  001EA2  0100               	movlb	0	; () banked
  5033  001EA4  51A6               	movf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  5034  001EA6  5DA5               	subwf	_nb_s_patinage& (0+255),w,b
  5035  001EA8  E203               	bc	l8015
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;action.c: 120: Alarme_On(3);
  5039  001EAA  0E03               	movlw	3
  5040  001EAC  EC67  F011         	call	_Alarme_On
  5041  001EB0                     l8015:
  5042                           
  5043                           ;action.c: 122: }
  5044                           ;action.c: 125: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5045  001EB0  0EB4               	movlw	180
  5046  001EB2  0100               	movlb	0	; () banked
  5047  001EB4  659C               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5048  001EB6  0CB4               	retlw	180
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;action.c: 126: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5052  001EB8  C09D  F09E         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5053                           
  5054                           ;action.c: 127: Capteur_Capot_Compteur_Temps_S = 0;
  5055  001EBC  6B9C               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5056                           
  5057                           ; BSR set to: 0
  5058  001EBE  0012               	return		;funcret
  5059  001EC0                     __end_of_Check_List_Moteur_1:
  5060                           	opt stack 0
  5061                           tblptru	equ	0xFF8
  5062                           prodl	equ	0xFF3
  5063                           intcon	equ	0xFF2
  5064                           intcon2	equ	0xFF1
  5065                           intcon3	equ	0xFF0
  5066                           postinc0	equ	0xFEE
  5067                           wreg	equ	0xFE8
  5068                           postdec1	equ	0xFE5
  5069                           fsr1h	equ	0xFE2
  5070                           fsr1l	equ	0xFE1
  5071                           indf2	equ	0xFDF
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076 ;; *************** function _Capteur_Capot_On *****************
  5077 ;; Defined at:
  5078 ;;		line 176 in file "interrupt.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;		None
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      void 
  5085 ;; Registers used:
  5086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 3F/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5092 ;;      Params:         0       0       0       0
  5093 ;;      Locals:         0       0       0       0
  5094 ;;      Temps:          0       0       0       0
  5095 ;;      Totals:         0       0       0       0
  5096 ;;Total ram usage:        0 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:   11
  5099 ;; This function calls:
  5100 ;;		_Etat_Update
  5101 ;; This function is called by:
  5102 ;;		_Mouvement_X
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text26
  5107  00228E                     __ptext26:
  5108                           	opt stack 0
  5109  00228E                     _Capteur_Capot_On:
  5110                           	opt stack 17
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;incstack = 0
  5117  00228E  88F2               	bsf	intcon,4,c	;volatile
  5118                           
  5119                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  5120  002290  92F2               	bcf	intcon,1,c	;volatile
  5121                           
  5122                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  5123  002292  B682               	btfsc	3970,3,c	;volatile
  5124  002294  0012               	return	
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;interrupt.c: 185: P4_busy = 0;
  5128  002296  6BAB               	clrf	_P4_busy& (0+255),b
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;interrupt.c: 186: Etat_Update(77);
  5132  002298  0E4D               	movlw	77
  5133  00229A  EF66  F010         	goto	_Etat_Update
  5134  00229E                     __end_of_Capteur_Capot_On:
  5135                           	opt stack 0
  5136                           tblptru	equ	0xFF8
  5137                           prodl	equ	0xFF3
  5138                           intcon	equ	0xFF2
  5139                           intcon2	equ	0xFF1
  5140                           intcon3	equ	0xFF0
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           postdec1	equ	0xFE5
  5144                           fsr1h	equ	0xFE2
  5145                           fsr1l	equ	0xFE1
  5146                           indf2	equ	0xFDF
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _Capteur_Capot_Off *****************
  5152 ;; Defined at:
  5153 ;;		line 194 in file "interrupt.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;		None
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;		None
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      void 
  5160 ;; Registers used:
  5161 ;;		None
  5162 ;; Tracked objects:
  5163 ;;		On entry : 3F/0
  5164 ;;		On exit  : 3F/0
  5165 ;;		Unchanged: 3F/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5167 ;;      Params:         0       0       0       0
  5168 ;;      Locals:         0       0       0       0
  5169 ;;      Temps:          0       0       0       0
  5170 ;;      Totals:         0       0       0       0
  5171 ;;Total ram usage:        0 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:   10
  5174 ;; This function calls:
  5175 ;;		Nothing
  5176 ;; This function is called by:
  5177 ;;		_Mouvement_X
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text27
  5182  0023C6                     __ptext27:
  5183                           	opt stack 0
  5184  0023C6                     _Capteur_Capot_Off:
  5185                           	opt stack 18
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  5189                           
  5190                           ;incstack = 0
  5191  0023C6  98F2               	bcf	intcon,4,c	;volatile
  5192                           
  5193                           ; BSR set to: 0
  5194  0023C8  0012               	return		;funcret
  5195  0023CA                     __end_of_Capteur_Capot_Off:
  5196                           	opt stack 0
  5197                           tblptru	equ	0xFF8
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon2	equ	0xFF1
  5201                           intcon3	equ	0xFF0
  5202                           postinc0	equ	0xFEE
  5203                           wreg	equ	0xFE8
  5204                           postdec1	equ	0xFE5
  5205                           fsr1h	equ	0xFE2
  5206                           fsr1l	equ	0xFE1
  5207                           indf2	equ	0xFDF
  5208                           fsr2h	equ	0xFDA
  5209                           fsr2l	equ	0xFD9
  5210                           status	equ	0xFD8
  5211                           
  5212 ;; *************** function _Mouvement_Bequille *****************
  5213 ;; Defined at:
  5214 ;;		line 763 in file "action.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  direction       1    wreg     unsigned char 
  5217 ;;  type_consign    1    7[BANK2 ] unsigned char 
  5218 ;;  option          1    8[BANK2 ] unsigned char 
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;  direction       1    9[BANK2 ] unsigned char 
  5221 ;;  index           2    0        unsigned int 
  5222 ;;  Option_Temps    1    0        unsigned char 
  5223 ;;  i_max           1    0        unsigned char 
  5224 ;;  i_min           1    0        unsigned char 
  5225 ;;  i               1    0        unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5230 ;; Tracked objects:
  5231 ;;		On entry : 3F/0
  5232 ;;		On exit  : 3F/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5235 ;;      Params:         0       0       0       2
  5236 ;;      Locals:         0       0       0       1
  5237 ;;      Temps:          0       0       0       0
  5238 ;;      Totals:         0       0       0       3
  5239 ;;Total ram usage:        3 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:   18
  5242 ;; This function calls:
  5243 ;;		_Check_List_Moteur_Bequille
  5244 ;;		_Coupe_Moteur
  5245 ;;		_Detection_Pion_Off
  5246 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  5247 ;;		_Init_Moteur_Bequille
  5248 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  5249 ;;		_TIMER2_On
  5250 ;;		_delay_s
  5251 ;;		_u_Init_PWM
  5252 ;; This function is called by:
  5253 ;;		_Cycle
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text28
  5258  00172E                     __ptext28:
  5259                           	opt stack 0
  5260  00172E                     _Mouvement_Bequille:
  5261                           	opt stack 11
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;incstack = 0
  5265                           ;Mouvement_Bequille@direction stored from wreg
  5266  00172E  0102               	movlb	2	; () banked
  5267  001730  6F89               	movwf	Mouvement_Bequille@direction& (0+255),b
  5268                           
  5269                           ;action.c: 764: unsigned char i, i_min, i_max;
  5270                           ;action.c: 765: unsigned char Option_Temps_S;
  5271                           ;action.c: 772: Surveillance_Consommation_Moteur_2_Desactiver();
  5272  001732  ECAF  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  5273                           
  5274                           ;action.c: 774: Detection_Pion_Off();
  5275  001736  ECBF  F011         	call	_Detection_Pion_Off	;wreg free
  5276                           
  5277                           ;action.c: 777: nb_s_bequille = option;
  5278  00173A  C288  F04C         	movff	Mouvement_Bequille@option,_nb_s_bequille
  5279                           
  5280                           ;action.c: 780: consigne = 10;
  5281  00173E  0E0A               	movlw	10
  5282  001740  0100               	movlb	0	; () banked
  5283  001742  6F96               	movwf	_consigne& (0+255),b	;volatile
  5284                           
  5285                           ; BSR set to: 0
  5286                           ;action.c: 791: index = 0;
  5287  001744  EC79  F00D         	call	_u_Init_PWM	;wreg free
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;action.c: 792: TMR2 = 0;
  5291  001748  6ACC               	clrf	4044,c	;volatile
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;action.c: 793: TMR2IF = 0;
  5295  00174A  929E               	bcf	3998,1,c	;volatile
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;action.c: 798: LATEbits.LATE2 = 1;
  5299  00174C  848D               	bsf	3981,2,c	;volatile
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;action.c: 803: moteur_indice = 3;
  5303  00174E  0E03               	movlw	3
  5304  001750  6F97               	movwf	_moteur_indice& (0+255),b	;volatile
  5305                           
  5306                           ; BSR set to: 0
  5307                           ;action.c: 804: Init_ADC_Single_Shoot_I_Moteur_2();
  5308  001752  EC53  F00C         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;action.c: 807: if (direction == 0) {
  5312  001756  0102               	movlb	2	; () banked
  5313  001758  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  5314  00175A  E103               	bnz	l986
  5315                           
  5316                           ; BSR set to: 2
  5317                           ;action.c: 808: LATD7 = 0;LATD6 = 1;
  5318  00175C  9E8C               	bcf	3980,7,c	;volatile
  5319  00175E  8C8C               	bsf	3980,6,c	;volatile
  5320                           
  5321                           ;action.c: 809: } else {
  5322  001760  D002               	goto	l8275
  5323  001762                     l986:
  5324                           
  5325                           ; BSR set to: 2
  5326                           ;action.c: 810: LATD6 = 0;LATD7 = 1;
  5327  001762  9C8C               	bcf	3980,6,c	;volatile
  5328  001764  8E8C               	bsf	3980,7,c	;volatile
  5329  001766                     l8275:
  5330                           
  5331                           ; BSR set to: 2
  5332                           ;action.c: 811: }
  5333                           ;action.c: 812: PDC1L = 1 << 2;
  5334  001766  0E04               	movlw	4
  5335  001768  6E77               	movwf	3959,c	;volatile
  5336                           
  5337                           ; BSR set to: 2
  5338                           ;action.c: 813: PDC1H = 0;
  5339  00176A  6A76               	clrf	3958,c	;volatile
  5340                           
  5341                           ;action.c: 814: OVDCOND = 0b00000100;
  5342  00176C  0E04               	movlw	4
  5343  00176E  6E6B               	movwf	3947,c	;volatile
  5344                           
  5345                           ; BSR set to: 2
  5346                           ;action.c: 815: LATCbits.LATC1 = 1;
  5347  001770  828B               	bsf	3979,1,c	;volatile
  5348                           
  5349                           ;action.c: 817: erreur = 1;
  5350  001772  0100               	movlb	0	; () banked
  5351  001774  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  5352  001776  0E01               	movlw	1
  5353  001778  6F84               	movwf	_erreur& (0+255),b	;volatile
  5354                           
  5355                           ; BSR set to: 0
  5356                           ;action.c: 818: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  5357  00177A  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  5358  00177C  46E8               	rlncf	wreg,f,c
  5359  00177E  0BFC               	andlw	252
  5360  001780  6E77               	movwf	3959,c	;volatile
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;action.c: 819: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  5364  001782  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  5365  001784  46E8               	rlncf	wreg,f,c
  5366  001786  0B03               	andlw	3
  5367  001788  6E76               	movwf	3958,c	;volatile
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;action.c: 822: erreur_accumulator = 0;
  5371  00178A  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  5372  00178C  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;action.c: 825: Nouvelle_Valeur_ADC = 0;
  5376  00178E  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;action.c: 829: PIE3bits.PTIE = 0;
  5380  001790  98A3               	bcf	4003,4,c	;volatile
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;action.c: 830: PIE1bits.ADIE = 1;
  5384  001792  8C9D               	bsf	3997,6,c	;volatile
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;action.c: 831: PIE1bits.ADIE = 1;
  5388  001794  8C9D               	bsf	3997,6,c	;volatile
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;action.c: 833: PEIE = 1;
  5392  001796  8CF2               	bsf	intcon,6,c	;volatile
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;action.c: 834: GIE = 1;
  5396  001798  8EF2               	bsf	intcon,7,c	;volatile
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;action.c: 835: TIMER2_On();
  5400  00179A  ECCF  F011         	call	_TIMER2_On	;wreg free
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;action.c: 836: ADIF = 0;
  5404  00179E  9C9E               	bcf	3998,6,c	;volatile
  5405                           
  5406                           ;action.c: 853: Init_Moteur_Bequille();
  5407  0017A0  EC4F  F011         	call	_Init_Moteur_Bequille	;wreg free
  5408  0017A4                     l8303:
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;action.c: 857: Check_List_Moteur_Bequille();
  5412  0017A4  ECC6  F00E         	call	_Check_List_Moteur_Bequille	;wreg free
  5413                           
  5414                           ;action.c: 858: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  5415  0017A8  0102               	movlb	2	; () banked
  5416  0017AA  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  5417  0017AC  E104               	bnz	l8309
  5418                           
  5419                           ; BSR set to: 2
  5420  0017AE  0E08               	movlw	8
  5421  0017B0  0100               	movlb	0	; () banked
  5422  0017B2  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  5423  0017B4  E0F7               	bz	l8303
  5424  0017B6                     l8309:
  5425  0017B6  0102               	movlb	2	; () banked
  5426  0017B8  0589               	decf	Mouvement_Bequille@direction& (0+255),w,b
  5427  0017BA  E104               	bnz	l993
  5428                           
  5429                           ; BSR set to: 2
  5430  0017BC  0E09               	movlw	9
  5431  0017BE  0100               	movlb	0	; () banked
  5432  0017C0  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  5433  0017C2  E0F0               	bz	l8303
  5434  0017C4                     l993:
  5435                           
  5436                           ;action.c: 862: PIE3bits.PTIE = 0;
  5437  0017C4  98A3               	bcf	4003,4,c	;volatile
  5438                           
  5439                           ;action.c: 863: PIE1bits.ADIE = 0;
  5440  0017C6  9C9D               	bcf	3997,6,c	;volatile
  5441                           
  5442                           ;action.c: 869: LATEbits.LATE2 = 0;
  5443  0017C8  948D               	bcf	3981,2,c	;volatile
  5444                           
  5445                           ;action.c: 874: Surveillance_Consommation_Moteur_2_Desactiver();
  5446  0017CA  ECAF  F011         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  5447                           
  5448                           ;action.c: 876: Coupe_Moteur();
  5449  0017CE  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  5450                           
  5451                           ;action.c: 877: delay_s(1);
  5452  0017D2  0E01               	movlw	1
  5453  0017D4  EFEE  F00F         	goto	_delay_s
  5454  0017D8                     __end_of_Mouvement_Bequille:
  5455                           	opt stack 0
  5456                           tblptru	equ	0xFF8
  5457                           prodl	equ	0xFF3
  5458                           intcon	equ	0xFF2
  5459                           intcon2	equ	0xFF1
  5460                           intcon3	equ	0xFF0
  5461                           postinc0	equ	0xFEE
  5462                           wreg	equ	0xFE8
  5463                           postdec1	equ	0xFE5
  5464                           fsr1h	equ	0xFE2
  5465                           fsr1l	equ	0xFE1
  5466                           indf2	equ	0xFDF
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function _u_Init_PWM *****************
  5472 ;; Defined at:
  5473 ;;		line 56 in file "pwm.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;		None
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  1    wreg      void 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0
  5482 ;; Tracked objects:
  5483 ;;		On entry : 3F/0
  5484 ;;		On exit  : 3F/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5487 ;;      Params:         0       0       0       0
  5488 ;;      Locals:         0       0       0       0
  5489 ;;      Temps:          0       0       0       0
  5490 ;;      Totals:         0       0       0       0
  5491 ;;Total ram usage:        0 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:   10
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_Mouvement_Bequille
  5498 ;;		_Mouvement_Z
  5499 ;;		_Mouvement_X
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	text29
  5504  001AF2                     __ptext29:
  5505                           	opt stack 0
  5506  001AF2                     _u_Init_PWM:
  5507                           	opt stack 18
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;incstack = 0
  5514  001AF2  9E7E               	bcf	3966,7,c	;volatile
  5515                           
  5516                           ; BSR set to: 0
  5517                           ;pwm.c: 64: PDC0L = 1 << 2;
  5518  001AF4  0E04               	movlw	4
  5519  001AF6  6E79               	movwf	3961,c	;volatile
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;pwm.c: 65: PDC0H = 0;
  5523  001AF8  6A78               	clrf	3960,c	;volatile
  5524                           
  5525                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  5526  001AFA  0E1F               	movlw	31
  5527  001AFC  6E7B               	movwf	3963,c	;volatile
  5528                           
  5529                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  5530  001AFE  0E3F               	movlw	63
  5531  001B00  6E7B               	movwf	3963,c	;volatile
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  5535  001B02  287B               	incf	3963,w,c	;volatile
  5536  001B04  6F8C               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  5540  001B06  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  5541  001B08  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;pwm.c: 87: PTPERH = 0;
  5545  001B0A  6A7A               	clrf	3962,c	;volatile
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;pwm.c: 94: PTCON0 = 0b00000011;
  5549  001B0C  0E03               	movlw	3
  5550  001B0E  6E7F               	movwf	3967,c	;volatile
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  5554  001B10  0E0F               	movlw	-241
  5555  001B12  167F               	andwf	3967,f,c	;volatile
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  5559  001B14  0EF3               	movlw	-13
  5560  001B16  167F               	andwf	3967,f,c	;volatile
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  5564  001B18  507F               	movf	3967,w,c	;volatile
  5565  001B1A  0BFC               	andlw	-4
  5566  001B1C  0902               	iorlw	2
  5567  001B1E  6E7F               	movwf	3967,c	;volatile
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;pwm.c: 116: PTCON1 = 0b10000000;
  5571  001B20  0E80               	movlw	128
  5572  001B22  6E7E               	movwf	3966,c	;volatile
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  5576  001B24  506F               	movf	3951,w,c	;volatile
  5577  001B26  0B8F               	andlw	-113
  5578  001B28  0910               	iorlw	16
  5579  001B2A  6E6F               	movwf	3951,c	;volatile
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  5583  001B2C  0E0F               	movlw	15
  5584  001B2E  126F               	iorwf	3951,f,c	;volatile
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  5588  001B30  0E3F               	movlw	63
  5589  001B32  6E6F               	movwf	3951,c	;volatile
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  5593  001B34  6A6E               	clrf	3950,c	;volatile
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  5597  001B36  0E01               	movlw	1
  5598  001B38  6E6E               	movwf	3950,c	;volatile
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;pwm.c: 155: DTCON = 0b00000000;
  5602  001B3A  6A6D               	clrf	3949,c	;volatile
  5603                           
  5604                           ; BSR set to: 0
  5605                           ;pwm.c: 156: OVDCOND = 0b00000101;
  5606  001B3C  0E05               	movlw	5
  5607  001B3E  6E6B               	movwf	3947,c	;volatile
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;pwm.c: 158: OVDCONS = 0b00000000;
  5611  001B40  6A6A               	clrf	3946,c	;volatile
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;pwm.c: 164: SEVTDIR = 0;
  5615  001B42  966E               	bcf	3950,3,c	;volatile
  5616                           
  5617                           ; BSR set to: 0
  5618                           ;pwm.c: 166: SEVTCMPH = 0;
  5619  001B44  6A70               	clrf	3952,c	;volatile
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;pwm.c: 167: SEVTCMPL = 10;
  5623  001B46  0E0A               	movlw	10
  5624  001B48  6E71               	movwf	3953,c	;volatile
  5625                           
  5626                           ; BSR set to: 0
  5627  001B4A  0C0A               	retlw	10	;funcret
  5628  001B4C                     __end_of_u_Init_PWM:
  5629                           	opt stack 0
  5630                           tblptru	equ	0xFF8
  5631                           prodl	equ	0xFF3
  5632                           intcon	equ	0xFF2
  5633                           intcon2	equ	0xFF1
  5634                           intcon3	equ	0xFF0
  5635                           postinc0	equ	0xFEE
  5636                           wreg	equ	0xFE8
  5637                           postdec1	equ	0xFE5
  5638                           fsr1h	equ	0xFE2
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           fsr2h	equ	0xFDA
  5642                           fsr2l	equ	0xFD9
  5643                           status	equ	0xFD8
  5644                           
  5645 ;; *************** function _delay_s *****************
  5646 ;; Defined at:
  5647 ;;		line 91 in file "horloge.c"
  5648 ;; Parameters:    Size  Location     Type
  5649 ;;  delay_time      1    wreg     unsigned char 
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;  delay_time      1   17[BANK0 ] unsigned char 
  5652 ;;  Timer_0_Etat    1   18[BANK0 ] unsigned char 
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  1    wreg      void 
  5655 ;; Registers used:
  5656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 3F/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5662 ;;      Params:         0       0       0       0
  5663 ;;      Locals:         0       2       0       0
  5664 ;;      Temps:          0       0       0       0
  5665 ;;      Totals:         0       2       0       0
  5666 ;;Total ram usage:        2 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:   17
  5669 ;; This function calls:
  5670 ;;		_EUSART1_Check_Buffer
  5671 ;;		_TIMER0_Off
  5672 ;;		_TIMER0_On
  5673 ;; This function is called by:
  5674 ;;		_Cycle
  5675 ;;		_Mouvement_Bequille
  5676 ;;		_Mouvement_Z
  5677 ;; This function uses a non-reentrant model
  5678 ;;
  5679                           
  5680                           	psect	text30
  5681  001FDC                     __ptext30:
  5682                           	opt stack 0
  5683  001FDC                     _delay_s:
  5684                           	opt stack 12
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;incstack = 0
  5688                           ;delay_s@delay_time stored from wreg
  5689  001FDC  0100               	movlb	0	; () banked
  5690  001FDE  6FFE               	movwf	delay_s@delay_time& (0+255),b
  5691                           
  5692                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  5693                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  5694  001FE0  C088  F0FF         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  5695                           
  5696                           ;horloge.c: 95: delay_s_counter = 0;
  5697  001FE4  6B8B               	clrf	_delay_s_counter& (0+255),b	;volatile
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;horloge.c: 98: TIMER0_On();
  5701  001FE6  ECE1  F010         	call	_TIMER0_On	;wreg free
  5702                           
  5703                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  5704  001FEA  D002               	goto	l7875
  5705  001FEC                     l7873:
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;horloge.c: 101: EUSART1_Check_Buffer();
  5709  001FEC  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  5710  001FF0                     l7875:
  5711  001FF0  0100               	movlb	0	; () banked
  5712  001FF2  51FE               	movf	delay_s@delay_time& (0+255),w,b
  5713  001FF4  5D8B               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  5714  001FF6  E3FA               	bnc	l7873
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;horloge.c: 104: }
  5718                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  5719  001FF8  51FF               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  5720  001FFA  B4D8               	btfsc	status,2,c
  5721                           
  5722                           ; BSR set to: 0
  5723  001FFC  ECA9  F011         	call	_TIMER0_Off	;wreg free
  5724                           
  5725                           ; BSR set to: 0
  5726  002000  0012               	return		;funcret
  5727  002002                     __end_of_delay_s:
  5728                           	opt stack 0
  5729                           tblptru	equ	0xFF8
  5730                           prodl	equ	0xFF3
  5731                           intcon	equ	0xFF2
  5732                           intcon2	equ	0xFF1
  5733                           intcon3	equ	0xFF0
  5734                           postinc0	equ	0xFEE
  5735                           wreg	equ	0xFE8
  5736                           postdec1	equ	0xFE5
  5737                           fsr1h	equ	0xFE2
  5738                           fsr1l	equ	0xFE1
  5739                           indf2	equ	0xFDF
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _TIMER0_Off *****************
  5745 ;; Defined at:
  5746 ;;		line 111 in file "timer.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		None
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 3F/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5760 ;;      Params:         0       0       0       0
  5761 ;;      Locals:         0       0       0       0
  5762 ;;      Temps:          0       0       0       0
  5763 ;;      Totals:         0       0       0       0
  5764 ;;Total ram usage:        0 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:   10
  5767 ;; This function calls:
  5768 ;;		Nothing
  5769 ;; This function is called by:
  5770 ;;		_Stop_Moteur_1
  5771 ;;		_delay_s
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           	psect	text31
  5776  002352                     __ptext31:
  5777                           	opt stack 0
  5778  002352                     _TIMER0_Off:
  5779                           	opt stack 18
  5780                           
  5781                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  5782                           
  5783                           ; BSR set to: 0
  5784                           ;incstack = 0
  5785  002352  9ED5               	bcf	4053,7,c	;volatile
  5786                           
  5787                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  5788  002354  9AF2               	bcf	intcon,5,c	;volatile
  5789                           
  5790                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  5791  002356  94F2               	bcf	intcon,2,c	;volatile
  5792                           
  5793                           ;timer.c: 117: TIMER0_Etat = 0;
  5794  002358  0100               	movlb	0	; () banked
  5795  00235A  6B88               	clrf	_TIMER0_Etat& (0+255),b
  5796                           
  5797                           ; BSR set to: 0
  5798  00235C  0012               	return		;funcret
  5799  00235E                     __end_of_TIMER0_Off:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           prodl	equ	0xFF3
  5803                           intcon	equ	0xFF2
  5804                           intcon2	equ	0xFF1
  5805                           intcon3	equ	0xFF0
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           postdec1	equ	0xFE5
  5809                           fsr1h	equ	0xFE2
  5810                           fsr1l	equ	0xFE1
  5811                           indf2	equ	0xFDF
  5812                           fsr2h	equ	0xFDA
  5813                           fsr2l	equ	0xFD9
  5814                           status	equ	0xFD8
  5815                           
  5816 ;; *************** function _TIMER2_On *****************
  5817 ;; Defined at:
  5818 ;;		line 158 in file "timer.c"
  5819 ;; Parameters:    Size  Location     Type
  5820 ;;		None
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;		None
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  1    wreg      void 
  5825 ;; Registers used:
  5826 ;;		None
  5827 ;; Tracked objects:
  5828 ;;		On entry : 3F/0
  5829 ;;		On exit  : 3F/0
  5830 ;;		Unchanged: 3F/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5832 ;;      Params:         0       0       0       0
  5833 ;;      Locals:         0       0       0       0
  5834 ;;      Temps:          0       0       0       0
  5835 ;;      Totals:         0       0       0       0
  5836 ;;Total ram usage:        0 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:   10
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_Mouvement_Bequille
  5843 ;;		_Mouvement_Z
  5844 ;;		_Mouvement_X
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text32
  5849  00239E                     __ptext32:
  5850                           	opt stack 0
  5851  00239E                     _TIMER2_On:
  5852                           	opt stack 18
  5853                           
  5854                           ; BSR set to: 0
  5855                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;incstack = 0
  5859  00239E  829D               	bsf	3997,1,c	;volatile
  5860                           
  5861                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  5862  0023A0  929E               	bcf	3998,1,c	;volatile
  5863                           
  5864                           ; BSR set to: 0
  5865  0023A2  0012               	return		;funcret
  5866  0023A4                     __end_of_TIMER2_On:
  5867                           	opt stack 0
  5868                           tblptru	equ	0xFF8
  5869                           prodl	equ	0xFF3
  5870                           intcon	equ	0xFF2
  5871                           intcon2	equ	0xFF1
  5872                           intcon3	equ	0xFF0
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           postdec1	equ	0xFE5
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  5884 ;; Defined at:
  5885 ;;		line 872 in file "interrupt.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;                  1    wreg      void 
  5892 ;; Registers used:
  5893 ;;		wreg, status,2
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/2
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5899 ;;      Params:         0       0       0       0
  5900 ;;      Locals:         0       0       0       0
  5901 ;;      Temps:          0       0       0       0
  5902 ;;      Totals:         0       0       0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; Hardware stack levels required when called:   10
  5906 ;; This function calls:
  5907 ;;		Nothing
  5908 ;; This function is called by:
  5909 ;;		_Mouvement_Bequille
  5910 ;;		_Mouvement_Z
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text33
  5915  00235E                     __ptext33:
  5916                           	opt stack 0
  5917  00235E                     _Surveillance_Consommation_Moteur_2_Desactiver:
  5918                           	opt stack 18
  5919                           
  5920                           ;interrupt.c: 873: if (Surveillance_Consommation_Moteur_2 != 0) {
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;incstack = 0
  5924  00235E  5048               	movf	_Surveillance_Consommation_Moteur_2,w,c
  5925  002360  B4D8               	btfsc	status,2,c
  5926  002362  0012               	return	
  5927                           
  5928                           ;interrupt.c: 874: Surveillance_Consommation_Moteur_2 = 0;
  5929  002364  6A48               	clrf	_Surveillance_Consommation_Moteur_2,c
  5930                           
  5931                           ;interrupt.c: 875: INTCON3bits.INT2IE = 0;
  5932  002366  98F0               	bcf	intcon3,4,c	;volatile
  5933  002368  0012               	return		;funcret
  5934  00236A                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  5935                           	opt stack 0
  5936                           tblptru	equ	0xFF8
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           intcon2	equ	0xFF1
  5940                           intcon3	equ	0xFF0
  5941                           postinc0	equ	0xFEE
  5942                           wreg	equ	0xFE8
  5943                           postdec1	equ	0xFE5
  5944                           fsr1h	equ	0xFE2
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function _Init_Moteur_Bequille *****************
  5952 ;; Defined at:
  5953 ;;		line 189 in file "action.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 3F/0
  5964 ;;		On exit  : 3F/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5967 ;;      Params:         0       0       0       0
  5968 ;;      Locals:         0       0       0       0
  5969 ;;      Temps:          0       0       0       0
  5970 ;;      Totals:         0       0       0       0
  5971 ;;Total ram usage:        0 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:   11
  5974 ;; This function calls:
  5975 ;;		_TIMER0_On
  5976 ;; This function is called by:
  5977 ;;		_Mouvement_Bequille
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text34
  5982  00229E                     __ptext34:
  5983                           	opt stack 0
  5984  00229E                     _Init_Moteur_Bequille:
  5985                           	opt stack 17
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;action.c: 194: nb_s_fonctionnement = 0;
  5989                           
  5990                           ;incstack = 0
  5991  00229E  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  5992                           
  5993                           ;action.c: 195: nb_Pion = 0;
  5994  0022A0  6BA0               	clrf	_nb_Pion& (0+255),b	;volatile
  5995                           
  5996                           ;action.c: 196: nb_100ms_Timer_5 = 0;
  5997  0022A2  6BA4               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  5998                           
  5999                           ; BSR set to: 0
  6000                           ;action.c: 197: TIMER0_On();
  6001  0022A4  ECE1  F010         	call	_TIMER0_On	;wreg free
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;action.c: 199: INTCON3bits.INT2IE = 1;
  6005  0022A8  88F0               	bsf	intcon3,4,c	;volatile
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;action.c: 200: Compteur_IRQ_I_Moteur_2 = 0;
  6009  0022AA  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6010                           
  6011                           ; BSR set to: 0
  6012  0022AC  0012               	return		;funcret
  6013  0022AE                     __end_of_Init_Moteur_Bequille:
  6014                           	opt stack 0
  6015                           tblptru	equ	0xFF8
  6016                           prodl	equ	0xFF3
  6017                           intcon	equ	0xFF2
  6018                           intcon2	equ	0xFF1
  6019                           intcon3	equ	0xFF0
  6020                           postinc0	equ	0xFEE
  6021                           wreg	equ	0xFE8
  6022                           postdec1	equ	0xFE5
  6023                           fsr1h	equ	0xFE2
  6024                           fsr1l	equ	0xFE1
  6025                           indf2	equ	0xFDF
  6026                           fsr2h	equ	0xFDA
  6027                           fsr2l	equ	0xFD9
  6028                           status	equ	0xFD8
  6029                           
  6030 ;; *************** function _TIMER0_On *****************
  6031 ;; Defined at:
  6032 ;;		line 87 in file "timer.c"
  6033 ;; Parameters:    Size  Location     Type
  6034 ;;		None
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;		None
  6037 ;; Return value:  Size  Location     Type
  6038 ;;                  1    wreg      void 
  6039 ;; Registers used:
  6040 ;;		wreg, status,2
  6041 ;; Tracked objects:
  6042 ;;		On entry : 3F/0
  6043 ;;		On exit  : 3F/0
  6044 ;;		Unchanged: 0/0
  6045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6046 ;;      Params:         0       0       0       0
  6047 ;;      Locals:         0       0       0       0
  6048 ;;      Temps:          0       0       0       0
  6049 ;;      Totals:         0       0       0       0
  6050 ;;Total ram usage:        0 bytes
  6051 ;; Hardware stack levels used:    1
  6052 ;; Hardware stack levels required when called:   10
  6053 ;; This function calls:
  6054 ;;		Nothing
  6055 ;; This function is called by:
  6056 ;;		_Init_Moteur_1
  6057 ;;		_Init_Moteur_2
  6058 ;;		_Init_Moteur_Bequille
  6059 ;;		_delay_s
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text35
  6064  0021C2                     __ptext35:
  6065                           	opt stack 0
  6066  0021C2                     _TIMER0_On:
  6067                           	opt stack 18
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;timer.c: 88: TMR0H=0;
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;incstack = 0
  6074  0021C2  6AD7               	clrf	4055,c	;volatile
  6075                           
  6076                           ;timer.c: 89: TMR0L=0;
  6077  0021C4  6AD6               	clrf	4054,c	;volatile
  6078                           
  6079                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6080  0021C6  BED5               	btfsc	4053,7,c	;volatile
  6081  0021C8  D004               	goto	l7829
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6085  0021CA  8AF2               	bsf	intcon,5,c	;volatile
  6086                           
  6087                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6088  0021CC  94F2               	bcf	intcon,2,c	;volatile
  6089                           
  6090                           ;timer.c: 94: LATC5=1;
  6091  0021CE  8A8B               	bsf	3979,5,c	;volatile
  6092                           
  6093                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  6094  0021D0  8ED5               	bsf	4053,7,c	;volatile
  6095  0021D2                     l7829:
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;timer.c: 97: }
  6099                           ;timer.c: 98: TIMER0_Etat = 1;
  6100  0021D2  0E01               	movlw	1
  6101  0021D4  6F88               	movwf	_TIMER0_Etat& (0+255),b
  6102                           
  6103                           ; BSR set to: 0
  6104  0021D6  0C01               	retlw	1	;funcret
  6105  0021D8                     __end_of_TIMER0_On:
  6106                           	opt stack 0
  6107                           tblptru	equ	0xFF8
  6108                           prodl	equ	0xFF3
  6109                           intcon	equ	0xFF2
  6110                           intcon2	equ	0xFF1
  6111                           intcon3	equ	0xFF0
  6112                           postinc0	equ	0xFEE
  6113                           wreg	equ	0xFE8
  6114                           postdec1	equ	0xFE5
  6115                           fsr1h	equ	0xFE2
  6116                           fsr1l	equ	0xFE1
  6117                           indf2	equ	0xFDF
  6118                           fsr2h	equ	0xFDA
  6119                           fsr2l	equ	0xFD9
  6120                           status	equ	0xFD8
  6121                           
  6122 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  6123 ;; Defined at:
  6124 ;;		line 192 in file "adc.c"
  6125 ;; Parameters:    Size  Location     Type
  6126 ;;		None
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;		None
  6129 ;; Return value:  Size  Location     Type
  6130 ;;                  1    wreg      void 
  6131 ;; Registers used:
  6132 ;;		wreg, status,2
  6133 ;; Tracked objects:
  6134 ;;		On entry : 3F/0
  6135 ;;		On exit  : 3F/0
  6136 ;;		Unchanged: 3F/0
  6137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6138 ;;      Params:         0       0       0       0
  6139 ;;      Locals:         0       0       0       0
  6140 ;;      Temps:          0       0       0       0
  6141 ;;      Totals:         0       0       0       0
  6142 ;;Total ram usage:        0 bytes
  6143 ;; Hardware stack levels used:    1
  6144 ;; Hardware stack levels required when called:   10
  6145 ;; This function calls:
  6146 ;;		Nothing
  6147 ;; This function is called by:
  6148 ;;		_Mouvement_Bequille
  6149 ;;		_Mouvement_Z
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           	psect	text36
  6154  0018A6                     __ptext36:
  6155                           	opt stack 0
  6156  0018A6                     _Init_ADC_Single_Shoot_I_Moteur_2:
  6157                           	opt stack 18
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;incstack = 0
  6164  0018A6  9AC2               	bcf	4034,5,c	;volatile
  6165                           
  6166                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  6167  0018A8  98C2               	bcf	4034,4,c	;volatile
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  6171  0018AA  50C2               	movf	4034,w,c	;volatile
  6172  0018AC  0BF3               	andlw	-13
  6173  0018AE  0904               	iorlw	4
  6174  0018B0  6EC2               	movwf	4034,c	;volatile
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;adc.c: 199: ADCON0bits.ADON = 0;
  6178  0018B2  90C2               	bcf	4034,0,c	;volatile
  6179                           
  6180                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  6181  0018B4  0E3F               	movlw	-193
  6182  0018B6  16C1               	andwf	4033,f,c	;volatile
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  6186  0018B8  98C1               	bcf	4033,4,c	;volatile
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;adc.c: 212: ADCON1 = 0b00000000;
  6190  0018BA  6AC1               	clrf	4033,c	;volatile
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  6194  0018BC  9EC0               	bcf	4032,7,c	;volatile
  6195                           
  6196                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  6197  0018BE  50C0               	movf	4032,w,c	;volatile
  6198  0018C0  0B87               	andlw	-121
  6199  0018C2  0910               	iorlw	16
  6200  0018C4  6EC0               	movwf	4032,c	;volatile
  6201                           
  6202                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  6203  0018C6  50C0               	movf	4032,w,c	;volatile
  6204  0018C8  0BF8               	andlw	-8
  6205  0018CA  0904               	iorlw	4
  6206  0018CC  6EC0               	movwf	4032,c	;volatile
  6207                           
  6208                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  6209  0018CE  50C0               	movf	4032,w,c	;volatile
  6210  0018D0  0BF8               	andlw	-8
  6211  0018D2  0901               	iorlw	1
  6212  0018D4  6EC0               	movwf	4032,c	;volatile
  6213                           
  6214                           ;adc.c: 219: ADCON2 = 0b00010100;
  6215  0018D6  0E14               	movlw	20
  6216  0018D8  6EC0               	movwf	4032,c	;volatile
  6217                           
  6218                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  6219  0018DA  50C0               	movf	4032,w,c	;volatile
  6220  0018DC  0BF8               	andlw	-8
  6221  0018DE  0901               	iorlw	1
  6222  0018E0  6EC0               	movwf	4032,c	;volatile
  6223                           
  6224                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  6225  0018E2  0E3F               	movlw	-193
  6226  0018E4  169A               	andwf	3994,f,c	;volatile
  6227                           
  6228                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  6229  0018E6  509A               	movf	3994,w,c	;volatile
  6230  0018E8  0BE0               	andlw	-32
  6231  0018EA  0910               	iorlw	16
  6232  0018EC  6E9A               	movwf	3994,c	;volatile
  6233                           
  6234                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  6235  0018EE  0EE0               	movlw	-32
  6236  0018F0  169A               	andwf	3994,f,c	;volatile
  6237                           
  6238                           ;adc.c: 235: ADCON3 = 0b00010000;
  6239  0018F2  0E10               	movlw	16
  6240  0018F4  6E9A               	movwf	3994,c	;volatile
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;adc.c: 236: ADCON3 = 0x00;
  6244  0018F6  6A9A               	clrf	3994,c	;volatile
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;adc.c: 241: ADCHS = 0b00000000;
  6248  0018F8  6A99               	clrf	3993,c	;volatile
  6249                           
  6250                           ;adc.c: 242: ANSEL0 = 0b00000011;
  6251  0018FA  0E03               	movlw	3
  6252  0018FC  6EB8               	movwf	4024,c	;volatile
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;adc.c: 244: ANSEL1 = 0b00000000;
  6256  0018FE  6AB9               	clrf	4025,c	;volatile
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;adc.c: 253: PIE1bits.ADIE = 1;
  6260  001900  8C9D               	bsf	3997,6,c	;volatile
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;adc.c: 254: ADIF=0;
  6264  001902  9C9E               	bcf	3998,6,c	;volatile
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;adc.c: 255: IPR1bits.ADIP = 0;
  6268  001904  9C9F               	bcf	3999,6,c	;volatile
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;adc.c: 260: ADON = 1;
  6272  001906  80C2               	bsf	4034,0,c	;volatile
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  6276  001908  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6277                           
  6278                           ; BSR set to: 0
  6279  00190A  0012               	return		;funcret
  6280  00190C                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  6281                           	opt stack 0
  6282                           tblptru	equ	0xFF8
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           intcon2	equ	0xFF1
  6286                           intcon3	equ	0xFF0
  6287                           postinc0	equ	0xFEE
  6288                           wreg	equ	0xFE8
  6289                           postdec1	equ	0xFE5
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           fsr2h	equ	0xFDA
  6294                           fsr2l	equ	0xFD9
  6295                           status	equ	0xFD8
  6296                           
  6297 ;; *************** function _Detection_Pion_Off *****************
  6298 ;; Defined at:
  6299 ;;		line 126 in file "pion.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      void 
  6306 ;; Registers used:
  6307 ;;		None
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/2
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6313 ;;      Params:         0       0       0       0
  6314 ;;      Locals:         0       0       0       0
  6315 ;;      Temps:          0       0       0       0
  6316 ;;      Totals:         0       0       0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:   10
  6320 ;; This function calls:
  6321 ;;		Nothing
  6322 ;; This function is called by:
  6323 ;;		_Mouvement_Bequille
  6324 ;;		_Mouvement_Z
  6325 ;;		_Mouvement_X
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           	psect	text37
  6330  00237E                     __ptext37:
  6331                           	opt stack 0
  6332  00237E                     _Detection_Pion_Off:
  6333                           	opt stack 18
  6334                           
  6335                           ;pion.c: 141: Detecteur_Pion = 0;
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;incstack = 0
  6339  00237E  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  6340                           
  6341                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  6342  002380  92A3               	bcf	4003,1,c	;volatile
  6343                           
  6344                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  6345  002382  92A4               	bcf	4004,1,c	;volatile
  6346  002384  0012               	return		;funcret
  6347  002386                     __end_of_Detection_Pion_Off:
  6348                           	opt stack 0
  6349                           tblptru	equ	0xFF8
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           intcon2	equ	0xFF1
  6353                           intcon3	equ	0xFF0
  6354                           postinc0	equ	0xFEE
  6355                           wreg	equ	0xFE8
  6356                           postdec1	equ	0xFE5
  6357                           fsr1h	equ	0xFE2
  6358                           fsr1l	equ	0xFE1
  6359                           indf2	equ	0xFDF
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _Check_List_Moteur_Bequille *****************
  6365 ;; Defined at:
  6366 ;;		line 211 in file "action.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;                  1    wreg      void 
  6373 ;; Registers used:
  6374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6380 ;;      Params:         0       0       0       0
  6381 ;;      Locals:         0       0       0       0
  6382 ;;      Temps:          0       1       0       0
  6383 ;;      Totals:         0       1       0       0
  6384 ;;Total ram usage:        1 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:   17
  6387 ;; This function calls:
  6388 ;;		_EUSART1_Check_Buffer
  6389 ;;		_Etat_Update
  6390 ;;		_SPI_Check_Buffer
  6391 ;;		___lbdiv
  6392 ;; This function is called by:
  6393 ;;		_Mouvement_Bequille
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           	psect	text38
  6398  001D8C                     __ptext38:
  6399                           	opt stack 0
  6400  001D8C                     _Check_List_Moteur_Bequille:
  6401                           	opt stack 11
  6402                           
  6403                           ;action.c: 215: if(PORTCbits.RC5 == 0){
  6404                           
  6405                           ;incstack = 0
  6406  001D8C  AA82               	btfss	3970,5,c	;volatile
  6407                           
  6408                           ;action.c: 216: Compteur_IRQ_I_Moteur_2 = 0;
  6409  001D8E  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6410                           
  6411                           ;action.c: 217: }
  6412                           ;action.c: 221: EUSART1_Check_Buffer();
  6413  001D90  EC76  F00F         	call	_EUSART1_Check_Buffer	;wreg free
  6414                           
  6415                           ;action.c: 222: SPI_Check_Buffer();
  6416  001D94  EC60  F00F         	call	_SPI_Check_Buffer	;wreg free
  6417                           
  6418                           ;action.c: 226: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  6419  001D98  504C               	movf	_nb_s_bequille,w,c
  6420  001D9A  0100               	movlb	0	; () banked
  6421  001D9C  5DA6               	subwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  6422  001D9E  E20E               	bc	l968
  6423                           
  6424                           ; BSR set to: 0
  6425  001DA0  0E02               	movlw	2
  6426  001DA2  65A6               	cpfsgt	_nb_s_fonctionnement& (0+255),b	;volatile
  6427  001DA4  0C02               	retlw	2
  6428                           
  6429                           ; BSR set to: 0
  6430  001DA6  0E05               	movlw	5
  6431  001DA8  6E0F               	movwf	___lbdiv@divisor,c
  6432  001DAA  5198               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  6433  001DAC  ECFC  F00E         	call	___lbdiv
  6434  001DB0  0100               	movlb	0	; () banked
  6435  001DB2  6FFE               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  6436  001DB4  504A               	movf	_Bequille_I_Max,w,c
  6437  001DB6  5DFE               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  6438  001DB8  A0D8               	btfss	status,0,c
  6439  001DBA  0012               	return	
  6440  001DBC                     l968:
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;action.c: 229: P4_busy = 0;
  6444  001DBC  6BAB               	clrf	_P4_busy& (0+255),b
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;action.c: 230: Etat_Update(0);
  6448  001DBE  0E00               	movlw	0
  6449  001DC0  EF66  F010         	goto	_Etat_Update
  6450  001DC4                     __end_of_Check_List_Moteur_Bequille:
  6451                           	opt stack 0
  6452                           tblptru	equ	0xFF8
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           intcon2	equ	0xFF1
  6456                           intcon3	equ	0xFF0
  6457                           postinc0	equ	0xFEE
  6458                           wreg	equ	0xFE8
  6459                           postdec1	equ	0xFE5
  6460                           fsr1h	equ	0xFE2
  6461                           fsr1l	equ	0xFE1
  6462                           indf2	equ	0xFDF
  6463                           fsr2h	equ	0xFDA
  6464                           fsr2l	equ	0xFD9
  6465                           status	equ	0xFD8
  6466                           
  6467 ;; *************** function ___lbdiv *****************
  6468 ;; Defined at:
  6469 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  6470 ;; Parameters:    Size  Location     Type
  6471 ;;  dividend        1    wreg     unsigned char 
  6472 ;;  divisor         1   14[COMRAM] unsigned char 
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;  dividend        1   15[COMRAM] unsigned char 
  6475 ;;  quotient        1   17[COMRAM] unsigned char 
  6476 ;;  counter         1   16[COMRAM] unsigned char 
  6477 ;; Return value:  Size  Location     Type
  6478 ;;                  1    wreg      unsigned char 
  6479 ;; Registers used:
  6480 ;;		wreg, status,2, status,0
  6481 ;; Tracked objects:
  6482 ;;		On entry : 3F/0
  6483 ;;		On exit  : 0/0
  6484 ;;		Unchanged: 0/0
  6485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6486 ;;      Params:         1       0       0       0
  6487 ;;      Locals:         3       0       0       0
  6488 ;;      Temps:          0       0       0       0
  6489 ;;      Totals:         4       0       0       0
  6490 ;;Total ram usage:        4 bytes
  6491 ;; Hardware stack levels used:    1
  6492 ;; Hardware stack levels required when called:   10
  6493 ;; This function calls:
  6494 ;;		Nothing
  6495 ;; This function is called by:
  6496 ;;		_Check_List_Moteur_Bequille
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text39
  6501  001DF8                     __ptext39:
  6502                           	opt stack 0
  6503  001DF8                     ___lbdiv:
  6504                           	opt stack 17
  6505                           
  6506                           ;incstack = 0
  6507                           ;___lbdiv@dividend stored from wreg
  6508  001DF8  6E10               	movwf	___lbdiv@dividend,c
  6509  001DFA  6A12               	clrf	___lbdiv@quotient,c
  6510  001DFC  500F               	movf	___lbdiv@divisor,w,c
  6511  001DFE  E014               	bz	l7855
  6512  001E00  0E01               	movlw	1
  6513  001E02  6E11               	movwf	___lbdiv@counter,c
  6514  001E04  D003               	goto	l7843
  6515  001E06                     l7839:
  6516  001E06  90D8               	bcf	status,0,c
  6517  001E08  360F               	rlcf	___lbdiv@divisor,f,c
  6518  001E0A  2A11               	incf	___lbdiv@counter,f,c
  6519  001E0C                     l7843:
  6520  001E0C  AE0F               	btfss	___lbdiv@divisor,7,c
  6521  001E0E  D7FB               	goto	l7839
  6522  001E10                     l7845:
  6523  001E10  90D8               	bcf	status,0,c
  6524  001E12  3612               	rlcf	___lbdiv@quotient,f,c
  6525  001E14  500F               	movf	___lbdiv@divisor,w,c
  6526  001E16  5C10               	subwf	___lbdiv@dividend,w,c
  6527  001E18  E303               	bnc	l7851
  6528  001E1A  500F               	movf	___lbdiv@divisor,w,c
  6529  001E1C  5E10               	subwf	___lbdiv@dividend,f,c
  6530  001E1E  8012               	bsf	___lbdiv@quotient,0,c
  6531  001E20                     l7851:
  6532  001E20  90D8               	bcf	status,0,c
  6533  001E22  320F               	rrcf	___lbdiv@divisor,f,c
  6534  001E24  2E11               	decfsz	___lbdiv@counter,f,c
  6535  001E26  D7F4               	goto	l7845
  6536  001E28                     l7855:
  6537  001E28  5012               	movf	___lbdiv@quotient,w,c
  6538  001E2A  0012               	return		;funcret
  6539  001E2C                     __end_of___lbdiv:
  6540                           	opt stack 0
  6541                           tblptru	equ	0xFF8
  6542                           prodl	equ	0xFF3
  6543                           intcon	equ	0xFF2
  6544                           intcon2	equ	0xFF1
  6545                           intcon3	equ	0xFF0
  6546                           postinc0	equ	0xFEE
  6547                           wreg	equ	0xFE8
  6548                           postdec1	equ	0xFE5
  6549                           fsr1h	equ	0xFE2
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _SPI_Check_Buffer *****************
  6557 ;; Defined at:
  6558 ;;		line 348 in file "spi.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6572 ;;      Params:         0       0       0       0
  6573 ;;      Locals:         0       0       0       0
  6574 ;;      Temps:          0       0       0       0
  6575 ;;      Totals:         0       0       0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:   16
  6579 ;; This function calls:
  6580 ;;		_EUSART1_RX_T3_LOCAL
  6581 ;; This function is called by:
  6582 ;;		_Cycle
  6583 ;;		_Check_List_Moteur_1
  6584 ;;		_Check_List_Moteur_2
  6585 ;;		_Check_List_Moteur_Bequille
  6586 ;;		_Mouvement_X
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text40
  6591  001EC0                     __ptext40:
  6592                           	opt stack 0
  6593  001EC0                     _SPI_Check_Buffer:
  6594                           	opt stack 13
  6595                           
  6596                           ;spi.c: 396: if (SPI_full == 1) {
  6597                           
  6598                           ;incstack = 0
  6599  001EC0  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  6600  001EC2  0012               	return	
  6601                           
  6602                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  6603                           ;spi.c: 400: SPI_RX_TEXT[1],
  6604                           ;spi.c: 401: SPI_RX_TEXT[2],
  6605                           ;spi.c: 402: SPI_RX_TEXT[3],
  6606                           ;spi.c: 403: SPI_RX_TEXT[4],
  6607                           ;spi.c: 404: SPI_RX_TEXT[5],
  6608                           ;spi.c: 405: SPI_RX_TEXT[6],
  6609                           ;spi.c: 406: SPI_RX_TEXT[7]);
  6610  001EC4  C101  F280         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  6611  001EC8  C102  F281         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  6612  001ECC  C103  F282         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  6613  001ED0  C104  F283         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  6614  001ED4  C105  F284         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  6615  001ED8  C106  F285         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  6616  001EDC  C107  F286         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  6617  001EE0  0101               	movlb	1	; () banked
  6618  001EE2  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  6619  001EE4  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  6620                           
  6621                           ;spi.c: 408: SPI_full = 0;
  6622  001EE8  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  6623  001EEA  0012               	return		;funcret
  6624  001EEC                     __end_of_SPI_Check_Buffer:
  6625                           	opt stack 0
  6626                           tblptru	equ	0xFF8
  6627                           prodl	equ	0xFF3
  6628                           intcon	equ	0xFF2
  6629                           intcon2	equ	0xFF1
  6630                           intcon3	equ	0xFF0
  6631                           postinc0	equ	0xFEE
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           fsr1h	equ	0xFE2
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           fsr2h	equ	0xFDA
  6638                           fsr2l	equ	0xFD9
  6639                           status	equ	0xFD8
  6640                           
  6641 ;; *************** function _EUSART1_Check_Buffer *****************
  6642 ;; Defined at:
  6643 ;;		line 268 in file "eusart.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6657 ;;      Params:         0       0       0       0
  6658 ;;      Locals:         0       0       0       0
  6659 ;;      Temps:          0       0       0       0
  6660 ;;      Totals:         0       0       0       0
  6661 ;;Total ram usage:        0 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:   16
  6664 ;; This function calls:
  6665 ;;		_EUSART1_RX_T3_LOCAL
  6666 ;; This function is called by:
  6667 ;;		_Cycle
  6668 ;;		_Check_List_Moteur_1
  6669 ;;		_Check_List_Moteur_2
  6670 ;;		_Check_List_Moteur_Bequille
  6671 ;;		_Mouvement_X
  6672 ;;		_delay_s
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text41
  6677  001EEC                     __ptext41:
  6678                           	opt stack 0
  6679  001EEC                     _EUSART1_Check_Buffer:
  6680                           	opt stack 12
  6681                           
  6682                           ;eusart.c: 270: if (RX1_full == 1) {
  6683                           
  6684                           ;incstack = 0
  6685  001EEC  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  6686  001EEE  0012               	return	
  6687                           
  6688                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  6689                           ;eusart.c: 274: UART_RX_TEXT[1],
  6690                           ;eusart.c: 275: UART_RX_TEXT[2],
  6691                           ;eusart.c: 276: UART_RX_TEXT[3],
  6692                           ;eusart.c: 277: UART_RX_TEXT[4],
  6693                           ;eusart.c: 278: UART_RX_TEXT[5],
  6694                           ;eusart.c: 279: UART_RX_TEXT[6],
  6695                           ;eusart.c: 280: UART_RX_TEXT[7]);
  6696  001EF0  C1C1  F280         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  6697  001EF4  C1C2  F281         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  6698  001EF8  C1C3  F282         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  6699  001EFC  C1C4  F283         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  6700  001F00  C1C5  F284         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  6701  001F04  C1C6  F285         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  6702  001F08  C1C7  F286         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  6703  001F0C  0101               	movlb	1	; () banked
  6704  001F0E  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  6705  001F10  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  6706                           
  6707                           ;eusart.c: 282: RX1_full = 0;
  6708  001F14  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  6709  001F16  0012               	return		;funcret
  6710  001F18                     __end_of_EUSART1_Check_Buffer:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           prodl	equ	0xFF3
  6714                           intcon	equ	0xFF2
  6715                           intcon2	equ	0xFF1
  6716                           intcon3	equ	0xFF0
  6717                           postinc0	equ	0xFEE
  6718                           wreg	equ	0xFE8
  6719                           postdec1	equ	0xFE5
  6720                           fsr1h	equ	0xFE2
  6721                           fsr1l	equ	0xFE1
  6722                           indf2	equ	0xFDF
  6723                           fsr2h	equ	0xFDA
  6724                           fsr2l	equ	0xFD9
  6725                           status	equ	0xFD8
  6726                           
  6727 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  6728 ;; Defined at:
  6729 ;;		line 822 in file "eusart.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  Ad              1    wreg     unsigned char 
  6732 ;;  Da              1    0[BANK2 ] unsigned char 
  6733 ;;  A               1    1[BANK2 ] unsigned char 
  6734 ;;  B               1    2[BANK2 ] unsigned char 
  6735 ;;  C               1    3[BANK2 ] unsigned char 
  6736 ;;  D               1    4[BANK2 ] unsigned char 
  6737 ;;  E               1    5[BANK2 ] unsigned char 
  6738 ;;  F               1    6[BANK2 ] unsigned char 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  Ad              1   63[COMRAM] unsigned char 
  6741 ;;  i               2   64[COMRAM] int 
  6742 ;;  Reponse         1    0        unsigned char 
  6743 ;; Return value:  Size  Location     Type
  6744 ;;                  1    wreg      void 
  6745 ;; Registers used:
  6746 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6747 ;; Tracked objects:
  6748 ;;		On entry : 3F/1
  6749 ;;		On exit  : 0/0
  6750 ;;		Unchanged: 0/0
  6751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6752 ;;      Params:         0       0       0       7
  6753 ;;      Locals:         3       0       0       0
  6754 ;;      Temps:          0       4       0       0
  6755 ;;      Totals:         3       4       0       7
  6756 ;;Total ram usage:       14 bytes
  6757 ;; Hardware stack levels used:    1
  6758 ;; Hardware stack levels required when called:   15
  6759 ;; This function calls:
  6760 ;;		_Alarme_On
  6761 ;;		_Coupe_Moteur
  6762 ;;		_EUSART1_Buffer_Send
  6763 ;;		_Etat_Get
  6764 ;;		_Etat_Intitule
  6765 ;;		_Etat_Update
  6766 ;;		_IRQ_Execution
  6767 ;;		___awmod
  6768 ;;		_delay_1s
  6769 ;;		_sprintf
  6770 ;; This function is called by:
  6771 ;;		_EUSART1_Check_Buffer
  6772 ;;		_SPI_Check_Buffer
  6773 ;; This function uses a non-reentrant model
  6774 ;;
  6775                           
  6776                           	psect	text42
  6777  0000D2                     __ptext42:
  6778                           	opt stack 0
  6779  0000D2                     _EUSART1_RX_T3_LOCAL:
  6780                           	opt stack 12
  6781                           
  6782                           ;incstack = 0
  6783                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  6784  0000D2  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  6785                           
  6786                           ;eusart.c: 823: int i;
  6787                           ;eusart.c: 824: unsigned char Reponse;
  6788                           ;eusart.c: 830: switch (Ad) {
  6789  0000D4  D391               	goto	l7779
  6790  0000D6                     l7489:
  6791                           
  6792                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  6793  0000D6  C280  F0FA         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  6794  0000DA  0ED0               	movlw	208
  6795  0000DC  0100               	movlb	0	; () banked
  6796  0000DE  27FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  6797  0000E0  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  6798  0000E2  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  6799  0000E4  508B               	movf	3979,w,c	;volatile
  6800  0000E6  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  6801  0000E8  0BFB               	andlw	-5
  6802  0000EA  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  6803  0000EC  6E8B               	movwf	3979,c	;volatile
  6804                           
  6805                           ;eusart.c: 847: break;
  6806  0000EE  0012               	return	
  6807  0000F0                     l7491:
  6808                           
  6809                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  6810  0000F0  0EAC               	movlw	low _UART_TX_TEXT
  6811  0000F2  6E1B               	movwf	sprintf@sp,c
  6812  0000F4  0EB9               	movlw	low (STR_4+30)
  6813  0000F6  6E1C               	movwf	sprintf@f,c
  6814  0000F8  0E3F               	movlw	high (STR_4+30)
  6815  0000FA  6E1D               	movwf	sprintf@f+1,c
  6816  0000FC  C099  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  6817  000100  6A1F               	clrf	?_sprintf+4,c
  6818  000102  EC6C  F004         	call	_sprintf	;wreg free
  6819  000106                     l7493:
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  6823  000106  0EAC               	movlw	low _UART_TX_TEXT
  6824  000108  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  6825  00010A  EF8A  F00A         	goto	_EUSART1_Buffer_Send	;wreg free
  6826  00010E                     l7495:
  6827                           
  6828                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  6829  00010E  0EAC               	movlw	low _UART_TX_TEXT
  6830  000110  6E1B               	movwf	sprintf@sp,c
  6831  000112  0EB7               	movlw	low STR_2
  6832  000114  6E1C               	movwf	sprintf@f,c
  6833  000116  0E3E               	movlw	high STR_2
  6834  000118  6E1D               	movwf	sprintf@f+1,c
  6835  00011A  C096  F01E         	movff	_consigne,?_sprintf+3	;volatile
  6836  00011E  6A1F               	clrf	?_sprintf+4,c
  6837  000120  C099  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  6838  000124  6A21               	clrf	?_sprintf+6,c
  6839  000126  C098  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  6840  00012A  6A23               	clrf	?_sprintf+8,c
  6841  00012C  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  6842  000130  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  6843  000134  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  6844  000138  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  6845  00013C  C09B  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  6846  000140  6A29               	clrf	?_sprintf+14,c
  6847  000142  C09E  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  6848  000146  6A2B               	clrf	?_sprintf+16,c
  6849  000148  EC6C  F004         	call	_sprintf	;wreg free
  6850  00014C  D7DC               	goto	l7493
  6851  00014E                     l7499:
  6852                           
  6853                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  6854  00014E  0EAC               	movlw	low _UART_TX_TEXT
  6855  000150  6E1B               	movwf	sprintf@sp,c
  6856  000152  0EEC               	movlw	low STR_3
  6857  000154  6E1C               	movwf	sprintf@f,c
  6858  000156  0E3F               	movlw	high STR_3
  6859  000158  6E1D               	movwf	sprintf@f+1,c
  6860  00015A  0E00               	movlw	0
  6861  00015C  EC30  F00F         	call	_Etat_Get
  6862  000160  6E1E               	movwf	?_sprintf+3,c
  6863  000162  6A1F               	clrf	?_sprintf+4,c
  6864  000164  0E01               	movlw	1
  6865  000166  EC30  F00F         	call	_Etat_Get
  6866  00016A  6E20               	movwf	?_sprintf+5,c
  6867  00016C  6A21               	clrf	?_sprintf+6,c
  6868  00016E  C0A8  F022         	movff	_Alarme,?_sprintf+7	;volatile
  6869  000172  6A23               	clrf	?_sprintf+8,c
  6870  000174  EC6C  F004         	call	_sprintf	;wreg free
  6871  000178  D7C6               	goto	l7493
  6872  00017A                     l1353:
  6873                           
  6874                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  6875  00017A  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  6876  00017C  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  6877  00017E                     l7507:
  6878                           
  6879                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  6880  00017E  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  6881  000180  08B5               	sublw	low (_UART_TX_TEXT+9)
  6882  000182  6ED9               	movwf	fsr2l,c
  6883  000184  6ADA               	clrf	fsr2h,c
  6884  000186  504D               	movf	_Etat_Precedent_Index,w,c
  6885  000188  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  6886  00018A  6E0F               	movwf	___awmod@dividend,c
  6887  00018C  0E00               	movlw	0
  6888  00018E  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  6889  000190  6E10               	movwf	___awmod@dividend+1,c
  6890  000192  6A12               	clrf	___awmod@divisor+1,c
  6891  000194  0E0A               	movlw	10
  6892  000196  6E11               	movwf	___awmod@divisor,c
  6893  000198  ECEC  F00B         	call	___awmod	;wreg free
  6894  00019C  500F               	movf	?___awmod,w,c
  6895  00019E  0F6A               	addlw	low _Etat_Log
  6896  0001A0  6EE1               	movwf	fsr1l,c
  6897  0001A2  6AE2               	clrf	fsr1h,c
  6898  0001A4  50E7               	movf	indf1,w,c
  6899  0001A6  EC16  F00F         	call	_Etat_Intitule
  6900  0001AA  6EDF               	movwf	indf2,c
  6901  0001AC  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  6902  0001AE  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  6903  0001B0  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  6904  0001B2  D7E5               	goto	l7507
  6905  0001B4  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  6906  0001B6  E103               	bnz	u5420
  6907  0001B8  0E0A               	movlw	10
  6908  0001BA  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  6909  0001BC  E3E0               	bnc	l7507
  6910  0001BE                     u5420:
  6911                           
  6912                           ;eusart.c: 882: }
  6913                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  6914  0001BE  0100               	movlb	0	; () banked
  6915  0001C0  6BB6               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  6916  0001C2  D7A1               	goto	l7493
  6917  0001C4                     l7515:
  6918                           
  6919                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  6920  0001C4  0EAC               	movlw	low _UART_TX_TEXT
  6921  0001C6  6E1B               	movwf	sprintf@sp,c
  6922  0001C8  0E9B               	movlw	low STR_4
  6923  0001CA  6E1C               	movwf	sprintf@f,c
  6924  0001CC  0E3F               	movlw	high STR_4
  6925  0001CE  6E1D               	movwf	sprintf@f+1,c
  6926  0001D0  C0A6  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  6927  0001D4  6A1F               	clrf	?_sprintf+4,c
  6928  0001D6  C0A0  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  6929  0001DA  6A21               	clrf	?_sprintf+6,c
  6930  0001DC  C0A4  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  6931  0001E0  6A23               	clrf	?_sprintf+8,c
  6932  0001E2  EC6C  F004         	call	_sprintf	;wreg free
  6933  0001E6  D78F               	goto	l7493
  6934  0001E8                     l7519:
  6935                           
  6936                           ;eusart.c: 898: consigne = (char) (5 * Da);
  6937  0001E8  0102               	movlb	2	; () banked
  6938  0001EA  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  6939  0001EC  0D05               	mullw	5
  6940  0001EE  CFF3 F096          	movff	prodl,_consigne	;volatile
  6941                           
  6942                           ;eusart.c: 900: break;
  6943  0001F2  0012               	return	
  6944  0001F4                     l7521:
  6945                           
  6946                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  6947  0001F4  0EAC               	movlw	low _UART_TX_TEXT
  6948  0001F6  6E1B               	movwf	sprintf@sp,c
  6949  0001F8  0EF9               	movlw	low STR_5
  6950  0001FA  6E1C               	movwf	sprintf@f,c
  6951  0001FC  0E3F               	movlw	high STR_5
  6952  0001FE  6E1D               	movwf	sprintf@f+1,c
  6953  000200  C0AB  F01E         	movff	_P4_busy,?_sprintf+3
  6954  000204  6A1F               	clrf	?_sprintf+4,c
  6955  000206  EC6C  F004         	call	_sprintf	;wreg free
  6956  00020A  D77D               	goto	l7493
  6957  00020C                     l7525:
  6958                           
  6959                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  6960  00020C  0EAC               	movlw	low _UART_TX_TEXT
  6961  00020E  6E1B               	movwf	sprintf@sp,c
  6962  000210  0EB9               	movlw	low (STR_4+30)
  6963  000212  6E1C               	movwf	sprintf@f,c
  6964  000214  0E3F               	movlw	high (STR_4+30)
  6965  000216  6E1D               	movwf	sprintf@f+1,c
  6966  000218  0102               	movlb	2	; () banked
  6967  00021A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  6968  00021C  0FD0               	addlw	208
  6969  00021E  EC30  F00F         	call	_Etat_Get
  6970  000222  6E1E               	movwf	?_sprintf+3,c
  6971  000224  6A1F               	clrf	?_sprintf+4,c
  6972  000226  EC6C  F004         	call	_sprintf	;wreg free
  6973  00022A  D76D               	goto	l7493
  6974  00022C                     l7529:
  6975                           
  6976                           ;eusart.c: 920: Etat_Update(Da);
  6977  00022C  0102               	movlb	2	; () banked
  6978  00022E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  6979  000230  EF66  F010         	goto	_Etat_Update
  6980  000234                     l7531:
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  6984  000234  0102               	movlb	2	; () banked
  6985  000236  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  6986  000238  0D0A               	mullw	10
  6987  00023A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  6988  00023E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  6989  000240  0D64               	mullw	100
  6990  000242  50F3               	movf	prodl,w,c
  6991  000244  0100               	movlb	0	; () banked
  6992  000246  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  6993  000248  0102               	movlb	2	; () banked
  6994  00024A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  6995  00024C  0F30               	addlw	48
  6996  00024E  0100               	movlb	0	; () banked
  6997  000250  6F91               	movwf	_Pelle_I_Max& (0+255),b
  6998                           
  6999                           ;eusart.c: 943: break;
  7000  000252  0012               	return	
  7001  000254                     l7533:
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7005  000254  0102               	movlb	2	; () banked
  7006  000256  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7007  000258  0D0A               	mullw	10
  7008  00025A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7009  00025E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7010  000260  0D64               	mullw	100
  7011  000262  50F3               	movf	prodl,w,c
  7012  000264  0100               	movlb	0	; () banked
  7013  000266  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7014  000268  0102               	movlb	2	; () banked
  7015  00026A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7016  00026C  0F30               	addlw	48
  7017  00026E  6E4A               	movwf	_Bequille_I_Max,c
  7018                           
  7019                           ;eusart.c: 946: break;
  7020  000270  0012               	return	
  7021  000272                     l7537:
  7022  000272  0ED0               	movlw	208
  7023  000274  0100               	movlb	0	; () banked
  7024  000276  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7025  000278  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7026  00027A  0102               	movlb	2	; () banked
  7027  00027C  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7028  00027E  0100               	movlb	0	; () banked
  7029  000280  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7030  000282  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7031  000284  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7032  000286  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7033  000288  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7034  00028A  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7035                           
  7036                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7037                           ; Switch size 1, requested type "speed"
  7038                           ; Number of cases is 1, Range of values is 0 to 0
  7039                           ; switch strategies available:
  7040                           ; Name         Instructions Cycles
  7041                           ; simple_byte            4     3 (average)
  7042                           ;	Chosen strategy is simple_byte
  7043  00028C  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7044  00028E  A4D8               	btfss	status,2,c
  7045  000290  0012               	return	
  7046                           
  7047                           ; BSR set to: 0
  7048                           ; Switch size 1, requested type "speed"
  7049                           ; Number of cases is 3, Range of values is 1 to 3
  7050                           ; switch strategies available:
  7051                           ; Name         Instructions Cycles
  7052                           ; simple_byte           10     6 (average)
  7053                           ;	Chosen strategy is simple_byte
  7054  000292  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7055  000294  0A01               	xorlw	1	; case 1
  7056  000296  B4D8               	btfsc	status,2,c
  7057  000298  0012               	return	
  7058  00029A  0A03               	xorlw	3	; case 2
  7059  00029C  E0CB               	bz	l7531
  7060  00029E  0A01               	xorlw	1	; case 3
  7061  0002A0  E0D9               	bz	l7533
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;eusart.c: 949: break;
  7065  0002A2  0012               	return	
  7066  0002A4                     l7539:
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7070  0002A4  0102               	movlb	2	; () banked
  7071  0002A6  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7072  0002A8  0D0A               	mullw	10
  7073  0002AA  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7074  0002AE  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7075  0002B0  0D64               	mullw	100
  7076  0002B2  50F3               	movf	prodl,w,c
  7077  0002B4  0100               	movlb	0	; () banked
  7078  0002B6  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7079  0002B8  0102               	movlb	2	; () banked
  7080  0002BA  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7081  0002BC  0F30               	addlw	48
  7082  0002BE  6E4B               	movwf	_Consigne_en_A,c
  7083                           
  7084                           ; BSR set to: 2
  7085                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  7086  0002C0  C04B  F096         	movff	_Consigne_en_A,_consigne	;volatile
  7087                           
  7088                           ; BSR set to: 2
  7089                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  7090  0002C4  C096  F095         	movff	_consigne,_Consigne_Max	;volatile
  7091                           
  7092                           ;eusart.c: 968: break;
  7093  0002C8  D0D7               	goto	l7591
  7094  0002CA                     l7545:
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7098  0002CA  0102               	movlb	2	; () banked
  7099  0002CC  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7100  0002CE  0D0A               	mullw	10
  7101  0002D0  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7102  0002D4  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7103  0002D6  0D64               	mullw	100
  7104  0002D8  50F3               	movf	prodl,w,c
  7105  0002DA  0100               	movlb	0	; () banked
  7106  0002DC  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7107  0002DE  0102               	movlb	2	; () banked
  7108  0002E0  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7109  0002E2  0F30               	addlw	48
  7110  0002E4  0100               	movlb	0	; () banked
  7111  0002E6  6FA5               	movwf	_nb_s_patinage& (0+255),b
  7112                           
  7113                           ;eusart.c: 971: break;
  7114  0002E8  D0C7               	goto	l7591
  7115  0002EA                     l7547:
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7119  0002EA  0102               	movlb	2	; () banked
  7120  0002EC  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7121  0002EE  0D0A               	mullw	10
  7122  0002F0  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7123  0002F4  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7124  0002F6  0D64               	mullw	100
  7125  0002F8  50F3               	movf	prodl,w,c
  7126  0002FA  0100               	movlb	0	; () banked
  7127  0002FC  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7128  0002FE  0102               	movlb	2	; () banked
  7129  000300  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7130  000302  0F30               	addlw	48
  7131  000304  0100               	movlb	0	; () banked
  7132  000306  6FA3               	movwf	_nb_100ms_pion& (0+255),b
  7133                           
  7134                           ;eusart.c: 974: break;
  7135  000308  D0B7               	goto	l7591
  7136  00030A                     l7549:
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  7140  00030A  0102               	movlb	2	; () banked
  7141  00030C  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7142  00030E  0D0A               	mullw	10
  7143  000310  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7144  000314  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7145  000316  0D64               	mullw	100
  7146  000318  50F3               	movf	prodl,w,c
  7147  00031A  0100               	movlb	0	; () banked
  7148  00031C  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7149  00031E  0102               	movlb	2	; () banked
  7150  000320  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7151  000322  0F30               	addlw	48
  7152  000324  0100               	movlb	0	; () banked
  7153  000326  6FA2               	movwf	_nb_100ms_platine& (0+255),b
  7154                           
  7155                           ; BSR set to: 0
  7156                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  7157  000328  C0A2  F0EC         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  7158                           
  7159                           ;eusart.c: 983: break;
  7160  00032C  D0A5               	goto	l7591
  7161  00032E                     l7553:
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  7165  00032E  0102               	movlb	2	; () banked
  7166  000330  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7167  000332  0D0A               	mullw	10
  7168  000334  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7169  000338  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7170  00033A  0D64               	mullw	100
  7171  00033C  50F3               	movf	prodl,w,c
  7172  00033E  0100               	movlb	0	; () banked
  7173  000340  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7174  000342  0102               	movlb	2	; () banked
  7175  000344  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7176  000346  0F30               	addlw	48
  7177  000348  0100               	movlb	0	; () banked
  7178  00034A  6FA1               	movwf	_nb_s_pelle& (0+255),b
  7179                           
  7180                           ;eusart.c: 986: break;
  7181  00034C  D095               	goto	l7591
  7182  00034E                     l7555:
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  7186  00034E  0102               	movlb	2	; () banked
  7187  000350  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7188  000352  0FD0               	addlw	208
  7189  000354  0100               	movlb	0	; () banked
  7190  000356  6F9D               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser& (0+255),b
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  7194  000358  C09D  F09E         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  7195                           
  7196                           ;eusart.c: 990: break;
  7197  00035C  D08D               	goto	l7591
  7198  00035E                     l7559:
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  7202  00035E  0102               	movlb	2	; () banked
  7203  000360  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7204  000362  0FD0               	addlw	208
  7205  000364  0100               	movlb	0	; () banked
  7206  000366  6F9B               	movwf	_Patinage_Nb_Essai& (0+255),b
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  7210  000368  C09A  F09B         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  7211                           
  7212                           ;eusart.c: 994: break;
  7213  00036C  D085               	goto	l7591
  7214  00036E                     l7563:
  7215                           
  7216                           ; BSR set to: 0
  7217                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7218  00036E  0102               	movlb	2	; () banked
  7219  000370  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7220  000372  0D0A               	mullw	10
  7221  000374  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7222  000378  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7223  00037A  0D64               	mullw	100
  7224  00037C  50F3               	movf	prodl,w,c
  7225  00037E  0100               	movlb	0	; () banked
  7226  000380  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7227  000382  0102               	movlb	2	; () banked
  7228  000384  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7229  000386  0F30               	addlw	48
  7230  000388  6E4B               	movwf	_Consigne_en_A,c
  7231                           
  7232                           ; BSR set to: 2
  7233                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  7234  00038A  C04B  F094         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  7235                           
  7236                           ;eusart.c: 1000: break;
  7237  00038E  D074               	goto	l7591
  7238  000390                     l7567:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7242  000390  0102               	movlb	2	; () banked
  7243  000392  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7244  000394  0D0A               	mullw	10
  7245  000396  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7246  00039A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7247  00039C  0D64               	mullw	100
  7248  00039E  50F3               	movf	prodl,w,c
  7249  0003A0  0100               	movlb	0	; () banked
  7250  0003A2  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7251  0003A4  0102               	movlb	2	; () banked
  7252  0003A6  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7253  0003A8  0F30               	addlw	48
  7254  0003AA  6E4B               	movwf	_Consigne_en_A,c
  7255                           
  7256                           ; BSR set to: 2
  7257                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  7258  0003AC  C04B  F093         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  7259                           
  7260                           ;eusart.c: 1006: break;
  7261  0003B0  D063               	goto	l7591
  7262  0003B2                     l7571:
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7266  0003B2  0102               	movlb	2	; () banked
  7267  0003B4  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7268  0003B6  0D0A               	mullw	10
  7269  0003B8  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7270  0003BC  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7271  0003BE  0D64               	mullw	100
  7272  0003C0  50F3               	movf	prodl,w,c
  7273  0003C2  0100               	movlb	0	; () banked
  7274  0003C4  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7275  0003C6  0102               	movlb	2	; () banked
  7276  0003C8  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7277  0003CA  0F30               	addlw	48
  7278  0003CC  6E4B               	movwf	_Consigne_en_A,c
  7279                           
  7280                           ; BSR set to: 2
  7281                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  7282  0003CE  C04B  F092         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  7283                           
  7284                           ;eusart.c: 1012: break;
  7285  0003D2  D052               	goto	l7591
  7286  0003D4                     l7577:
  7287  0003D4  0ED0               	movlw	208
  7288  0003D6  0100               	movlb	0	; () banked
  7289  0003D8  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7290  0003DA  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7291  0003DC  0102               	movlb	2	; () banked
  7292  0003DE  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7293  0003E0  0100               	movlb	0	; () banked
  7294  0003E2  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7295  0003E4  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7296  0003E6  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7297  0003E8  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7298  0003EA  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7299  0003EC  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7300                           
  7301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7302                           ; Switch size 1, requested type "speed"
  7303                           ; Number of cases is 1, Range of values is 0 to 0
  7304                           ; switch strategies available:
  7305                           ; Name         Instructions Cycles
  7306                           ; simple_byte            4     3 (average)
  7307                           ;	Chosen strategy is simple_byte
  7308  0003EE  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7309  0003F0  E143               	bnz	l7591
  7310                           
  7311                           ; BSR set to: 0
  7312                           ; Switch size 1, requested type "speed"
  7313                           ; Number of cases is 10, Range of values is 0 to 9
  7314                           ; switch strategies available:
  7315                           ; Name         Instructions Cycles
  7316                           ; simple_byte           31    16 (average)
  7317                           ;	Chosen strategy is simple_byte
  7318  0003F2  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7319  0003F4  E101 D756          	bz	l7539
  7320  0003F8  0A01               	xorlw	1	; case 1
  7321  0003FA  E101 D766          	bz	l7545
  7322  0003FE  0A03               	xorlw	3	; case 2
  7323  000400  E101 D773          	bz	l7547
  7324  000404  0A01               	xorlw	1	; case 3
  7325  000406  E081               	bz	l7549
  7326  000408  0A07               	xorlw	7	; case 4
  7327  00040A  E091               	bz	l7553
  7328  00040C  0A01               	xorlw	1	; case 5
  7329  00040E  E09F               	bz	l7555
  7330  000410  0A03               	xorlw	3	; case 6
  7331  000412  E0A5               	bz	l7559
  7332  000414  0A01               	xorlw	1	; case 7
  7333  000416  E0AB               	bz	l7563
  7334  000418  0A0F               	xorlw	15	; case 8
  7335  00041A  E0BA               	bz	l7567
  7336  00041C  0A01               	xorlw	1	; case 9
  7337  00041E  E0C9               	bz	l7571
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;eusart.c: 1031: switch (Da - 0x30) {
  7341                           
  7342                           ;eusart.c: 1024: case 'V':
  7343  000420  D02B               	goto	l7591
  7344  000422                     l7579:
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  7348  000422  0EAC               	movlw	low _UART_TX_TEXT
  7349  000424  6E1B               	movwf	sprintf@sp,c
  7350  000426  0E6A               	movlw	low STR_7
  7351  000428  6E1C               	movwf	sprintf@f,c
  7352  00042A  0E3F               	movlw	high STR_7
  7353  00042C  6E1D               	movwf	sprintf@f+1,c
  7354  00042E  C096  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7355  000432  6A1F               	clrf	?_sprintf+4,c
  7356  000434  C0A5  F020         	movff	_nb_s_patinage,?_sprintf+5
  7357  000438  6A21               	clrf	?_sprintf+6,c
  7358  00043A  C0A3  F022         	movff	_nb_100ms_pion,?_sprintf+7
  7359  00043E  6A23               	clrf	?_sprintf+8,c
  7360  000440  C0A2  F024         	movff	_nb_100ms_platine,?_sprintf+9
  7361  000444  6A25               	clrf	?_sprintf+10,c
  7362  000446  C0A1  F026         	movff	_nb_s_pelle,?_sprintf+11
  7363  00044A  6A27               	clrf	?_sprintf+12,c
  7364  00044C  EC6C  F004         	call	_sprintf	;wreg free
  7365  000450  D65A               	goto	l7493
  7366  000452                     l7583:
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  7370  000452  0EAC               	movlw	low _UART_TX_TEXT
  7371  000454  6E1B               	movwf	sprintf@sp,c
  7372  000456  0EBC               	movlw	low STR_8
  7373  000458  6E1C               	movwf	sprintf@f,c
  7374  00045A  0E3F               	movlw	high STR_8
  7375  00045C  6E1D               	movwf	sprintf@f+1,c
  7376  00045E  C0A9  F01E         	movff	_Etat,?_sprintf+3	;volatile
  7377  000462  6A1F               	clrf	?_sprintf+4,c
  7378  000464  C0A6  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  7379  000468  6A21               	clrf	?_sprintf+6,c
  7380  00046A  EC6C  F004         	call	_sprintf	;wreg free
  7381  00046E  D64B               	goto	l7493
  7382  000470                     l1387:
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  7386  000470  C281  F0AC         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  7387                           
  7388                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  7389  000474  6BAD               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  7390  000476  D647               	goto	l7493
  7391  000478                     l7591:
  7392  000478  0ED0               	movlw	208
  7393  00047A  0100               	movlb	0	; () banked
  7394  00047C  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7395  00047E  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7396  000480  0102               	movlb	2	; () banked
  7397  000482  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7398  000484  0100               	movlb	0	; () banked
  7399  000486  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7400  000488  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7401  00048A  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7402  00048C  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7403  00048E  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7404  000490  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7405                           
  7406                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7407                           ; Switch size 1, requested type "speed"
  7408                           ; Number of cases is 1, Range of values is 0 to 0
  7409                           ; switch strategies available:
  7410                           ; Name         Instructions Cycles
  7411                           ; simple_byte            4     3 (average)
  7412                           ;	Chosen strategy is simple_byte
  7413  000492  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7414  000494  A4D8               	btfss	status,2,c
  7415  000496  0012               	return	
  7416                           
  7417                           ; BSR set to: 0
  7418                           ; Switch size 1, requested type "speed"
  7419                           ; Number of cases is 3, Range of values is 0 to 9
  7420                           ; switch strategies available:
  7421                           ; Name         Instructions Cycles
  7422                           ; simple_byte           10     6 (average)
  7423                           ;	Chosen strategy is simple_byte
  7424  000498  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7425  00049A  E0C3               	bz	l7579
  7426  00049C  0A01               	xorlw	1	; case 1
  7427  00049E  E0D9               	bz	l7583
  7428  0004A0  0A08               	xorlw	8	; case 9
  7429  0004A2  A4D8               	btfss	status,2,c
  7430  0004A4  0012               	return	
  7431  0004A6  D7E4               	goto	l1387
  7432  0004A8                     l7593:
  7433                           
  7434                           ;eusart.c: 1062: Alarme_On(8);
  7435  0004A8  0E08               	movlw	8
  7436  0004AA  EF67  F011         	goto	_Alarme_On
  7437  0004AE                     l7595:
  7438                           
  7439                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  7440  0004AE  0EAC               	movlw	low _UART_TX_TEXT
  7441  0004B0  6E1B               	movwf	sprintf@sp,c
  7442  0004B2  0EB9               	movlw	low (STR_4+30)
  7443  0004B4  6E1C               	movwf	sprintf@f,c
  7444  0004B6  0E3F               	movlw	high (STR_4+30)
  7445  0004B8  6E1D               	movwf	sprintf@f+1,c
  7446  0004BA  C0AA  F01E         	movff	_Version,?_sprintf+3
  7447  0004BE  6A1F               	clrf	?_sprintf+4,c
  7448  0004C0  EC6C  F004         	call	_sprintf	;wreg free
  7449  0004C4  D620               	goto	l7493
  7450  0004C6                     l7599:
  7451                           
  7452                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  7453  0004C6  0EAC               	movlw	low _UART_TX_TEXT
  7454  0004C8  6E1B               	movwf	sprintf@sp,c
  7455  0004CA  0E16               	movlw	low STR_10
  7456  0004CC  6E1C               	movwf	sprintf@f,c
  7457  0004CE  0E3F               	movlw	high STR_10
  7458  0004D0  6E1D               	movwf	sprintf@f+1,c
  7459  0004D2  0E00               	movlw	0
  7460  0004D4  EC30  F00F         	call	_Etat_Get
  7461  0004D8  6E1E               	movwf	?_sprintf+3,c
  7462  0004DA  6A1F               	clrf	?_sprintf+4,c
  7463  0004DC  0E01               	movlw	1
  7464  0004DE  EC30  F00F         	call	_Etat_Get
  7465  0004E2  6E20               	movwf	?_sprintf+5,c
  7466  0004E4  6A21               	clrf	?_sprintf+6,c
  7467  0004E6  C0A8  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7468  0004EA  6A23               	clrf	?_sprintf+8,c
  7469  0004EC  C0A0  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  7470  0004F0  6A25               	clrf	?_sprintf+10,c
  7471  0004F2  C099  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  7472  0004F6  6A27               	clrf	?_sprintf+12,c
  7473  0004F8  C098  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  7474  0004FC  6A29               	clrf	?_sprintf+14,c
  7475  0004FE  C096  F02A         	movff	_consigne,?_sprintf+15	;volatile
  7476  000502  6A2B               	clrf	?_sprintf+16,c
  7477  000504  C0A5  F02C         	movff	_nb_s_patinage,?_sprintf+17
  7478  000508  6A2D               	clrf	?_sprintf+18,c
  7479  00050A  C0A3  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  7480  00050E  6A2F               	clrf	?_sprintf+20,c
  7481  000510  C0A2  F030         	movff	_nb_100ms_platine,?_sprintf+21
  7482  000514  6A31               	clrf	?_sprintf+22,c
  7483  000516  C0A1  F032         	movff	_nb_s_pelle,?_sprintf+23
  7484  00051A  6A33               	clrf	?_sprintf+24,c
  7485  00051C  0E01               	movlw	1
  7486  00051E  A480               	btfss	3968,2,c	;volatile
  7487  000520  0E00               	movlw	0
  7488  000522  6E34               	movwf	?_sprintf+25,c
  7489  000524  6A35               	clrf	?_sprintf+26,c
  7490  000526  0E01               	movlw	1
  7491  000528  A682               	btfss	3970,3,c	;volatile
  7492  00052A  0E00               	movlw	0
  7493  00052C  6E36               	movwf	?_sprintf+27,c
  7494  00052E  6A37               	clrf	?_sprintf+28,c
  7495  000530  0E01               	movlw	1
  7496  000532  A48D               	btfss	3981,2,c	;volatile
  7497  000534  0E00               	movlw	0
  7498  000536  6E38               	movwf	?_sprintf+29,c
  7499  000538  6A39               	clrf	?_sprintf+30,c
  7500  00053A  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  7501  00053E  6A3B               	clrf	?_sprintf+32,c
  7502  000540  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  7503  000544  6A3D               	clrf	?_sprintf+34,c
  7504  000546  C0AA  F03E         	movff	_Version,?_sprintf+35
  7505  00054A  6A3F               	clrf	?_sprintf+36,c
  7506  00054C  EC6C  F004         	call	_sprintf	;wreg free
  7507  000550  D5DA               	goto	l7493
  7508  000552                     l7603:
  7509                           
  7510                           ;eusart.c: 1148: Alarme_On(7);
  7511  000552  0E07               	movlw	7
  7512  000554  EF67  F011         	goto	_Alarme_On
  7513  000558                     l7605:
  7514                           
  7515                           ;eusart.c: 1155: Etat_Update(0);
  7516  000558  0E00               	movlw	0
  7517  00055A  EC66  F010         	call	_Etat_Update
  7518  00055E                     l7607:
  7519                           
  7520                           ;eusart.c: 1157: P4_busy = 0;
  7521  00055E  0100               	movlb	0	; () banked
  7522  000560  6BAB               	clrf	_P4_busy& (0+255),b
  7523                           
  7524                           ;eusart.c: 1161: break;
  7525  000562  0012               	return	
  7526  000564                     l1396:
  7527                           
  7528                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  7529  000564  A682               	btfss	3970,3,c	;volatile
  7530  000566  D0DB               	goto	l7723
  7531                           
  7532                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  7533  000568  0102               	movlb	2	; () banked
  7534  00056A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7535  00056C  0FD0               	addlw	208
  7536  00056E  0100               	movlb	0	; () banked
  7537  000570  6F8E               	movwf	_direction& (0+255),b	;volatile
  7538                           
  7539                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  7540  000572  0102               	movlb	2	; () banked
  7541  000574  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7542  000576  0FD0               	addlw	208
  7543  000578  0100               	movlb	0	; () banked
  7544  00057A  6F90               	movwf	_type_consigne& (0+255),b
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  7548  00057C  0102               	movlb	2	; () banked
  7549  00057E  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7550  000580  0D0A               	mullw	10
  7551  000582  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7552  000586  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7553  000588  0D64               	mullw	100
  7554  00058A  50F3               	movf	prodl,w,c
  7555  00058C  0100               	movlb	0	; () banked
  7556  00058E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7557  000590  0102               	movlb	2	; () banked
  7558  000592  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  7559  000594  0F30               	addlw	48
  7560  000596  0100               	movlb	0	; () banked
  7561  000598  6F8F               	movwf	_mouvement_option& (0+255),b
  7562                           
  7563                           ;eusart.c: 1180: switch (E - 0x30) {
  7564  00059A  D008               	goto	l7615
  7565  00059C                     l1399:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;eusart.c: 1182: Option_Multitas = 1;
  7569  00059C  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7570  00059E  D004               	goto	L1
  7571  0005A0                     l1401:
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;eusart.c: 1186: Option_Multitas = 0;
  7575  0005A0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7576                           
  7577                           ;eusart.c: 1187: Option_Pailleux = 1;
  7578  0005A2  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  7579                           
  7580                           ;eusart.c: 1188: break;
  7581  0005A4  D017               	goto	l7617
  7582  0005A6                     l1402:
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;eusart.c: 1192: Option_Multitas = 0;
  7586  0005A6  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7587  0005A8                     L1:
  7588                           
  7589                           ;eusart.c: 1193: Option_Pailleux = 0;
  7590  0005A8  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  7591                           
  7592                           ;eusart.c: 1194: }
  7593  0005AA  D014               	goto	l7617
  7594  0005AC                     l7615:
  7595                           
  7596                           ; BSR set to: 0
  7597  0005AC  0ED0               	movlw	208
  7598  0005AE  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7599  0005B0  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7600  0005B2  0102               	movlb	2	; () banked
  7601  0005B4  5185               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  7602  0005B6  0100               	movlb	0	; () banked
  7603  0005B8  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7604  0005BA  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7605  0005BC  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7606  0005BE  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7607  0005C0  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7608  0005C2  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7609                           
  7610                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7611                           ; Switch size 1, requested type "speed"
  7612                           ; Number of cases is 1, Range of values is 0 to 0
  7613                           ; switch strategies available:
  7614                           ; Name         Instructions Cycles
  7615                           ; simple_byte            4     3 (average)
  7616                           ;	Chosen strategy is simple_byte
  7617  0005C4  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7618  0005C6  E1EF               	bnz	l1402
  7619                           
  7620                           ; BSR set to: 0
  7621                           ; Switch size 1, requested type "speed"
  7622                           ; Number of cases is 2, Range of values is 1 to 2
  7623                           ; switch strategies available:
  7624                           ; Name         Instructions Cycles
  7625                           ; simple_byte            7     4 (average)
  7626                           ;	Chosen strategy is simple_byte
  7627  0005C8  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7628  0005CA  0A01               	xorlw	1	; case 1
  7629  0005CC  E0E7               	bz	l1399
  7630  0005CE  0A03               	xorlw	3	; case 2
  7631  0005D0  E0E7               	bz	l1401
  7632  0005D2  D7E9               	goto	l1402
  7633  0005D4                     l7617:
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  7637  0005D4  0E31               	movlw	49
  7638  0005D6  0102               	movlb	2	; () banked
  7639  0005D8  1985               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  7640  0005DA  E102               	bnz	l1403
  7641                           
  7642                           ; BSR set to: 2
  7643                           ;eusart.c: 1200: Option_Multitas = 1;
  7644  0005DC  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7645                           
  7646                           ;eusart.c: 1202: } else {
  7647  0005DE  D001               	goto	l1404
  7648  0005E0                     l1403:
  7649                           
  7650                           ; BSR set to: 2
  7651                           ;eusart.c: 1203: Option_Multitas = 0;
  7652  0005E0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  7653  0005E2                     l1404:
  7654                           
  7655                           ; BSR set to: 2
  7656                           ;eusart.c: 1204: }
  7657                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  7658  0005E2  C09D  F09E         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  7659                           
  7660                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  7661  0005E6  C09A  F09B         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  7662                           
  7663                           ; BSR set to: 2
  7664                           ;eusart.c: 1214: P4_busy = 1;
  7665  0005EA  0E01               	movlw	1
  7666  0005EC  0100               	movlb	0	; () banked
  7667  0005EE  6FAB               	movwf	_P4_busy& (0+255),b
  7668                           
  7669                           ;eusart.c: 1215: switch (direction) {
  7670  0005F0  D018               	goto	l7649
  7671  0005F2                     l7623:
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;eusart.c: 1218: if (Etat == 0) {
  7675  0005F2  51A9               	movf	_Etat& (0+255),w,b	;volatile
  7676  0005F4  E101               	bnz	l7627
  7677  0005F6  D0B7               	goto	l7733
  7678  0005F8                     l7627:
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;eusart.c: 1223: if (Etat != 2) {
  7682  0005F8  0E02               	movlw	2
  7683  0005FA  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  7684  0005FC  B4D8               	btfsc	status,2,c
  7685  0005FE  0012               	return	
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;eusart.c: 1224: Coupe_Moteur();
  7689  000600  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  7690                           
  7691                           ;eusart.c: 1225: delay_1s();
  7692  000604  ECA0  F00F         	call	_delay_1s	;wreg free
  7693  000608  D0AE               	goto	l7733
  7694  00060A                     l7635:
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;eusart.c: 1233: if (Etat == 0) {
  7698  00060A  51A9               	movf	_Etat& (0+255),w,b	;volatile
  7699  00060C  E101               	bnz	l7639
  7700  00060E  D0AF               	goto	l7739
  7701  000610                     l7639:
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;eusart.c: 1236: if (Etat != 3) {
  7705  000610  0E03               	movlw	3
  7706  000612  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  7707  000614  B4D8               	btfsc	status,2,c
  7708  000616  0012               	return	
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;eusart.c: 1237: Coupe_Moteur();
  7712  000618  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  7713                           
  7714                           ;eusart.c: 1238: delay_1s();
  7715  00061C  ECA0  F00F         	call	_delay_1s	;wreg free
  7716  000620  D0A6               	goto	l7739
  7717  000622                     l7649:
  7718                           
  7719                           ; BSR set to: 0
  7720  000622  518E               	movf	_direction& (0+255),w,b	;volatile
  7721                           
  7722                           ; Switch size 1, requested type "speed"
  7723                           ; Number of cases is 2, Range of values is 0 to 1
  7724                           ; switch strategies available:
  7725                           ; Name         Instructions Cycles
  7726                           ; simple_byte            7     4 (average)
  7727                           ;	Chosen strategy is simple_byte
  7728  000624  E0F2               	bz	l7635
  7729  000626  0A01               	xorlw	1	; case 1
  7730  000628  A4D8               	btfss	status,2,c
  7731  00062A  0012               	return	
  7732  00062C  D7E2               	goto	l7623
  7733  00062E                     l1417:
  7734                           
  7735                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  7736  00062E  A682               	btfss	3970,3,c	;volatile
  7737  000630  D076               	goto	l7723
  7738                           
  7739                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  7740  000632  0102               	movlb	2	; () banked
  7741  000634  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7742  000636  0FD0               	addlw	208
  7743  000638  0100               	movlb	0	; () banked
  7744  00063A  6F8E               	movwf	_direction& (0+255),b	;volatile
  7745                           
  7746                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  7747  00063C  0102               	movlb	2	; () banked
  7748  00063E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7749  000640  0FD0               	addlw	208
  7750  000642  0100               	movlb	0	; () banked
  7751  000644  6F90               	movwf	_type_consigne& (0+255),b
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  7755  000646  0102               	movlb	2	; () banked
  7756  000648  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7757  00064A  0D0A               	mullw	10
  7758  00064C  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7759  000650  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7760  000652  0D64               	mullw	100
  7761  000654  50F3               	movf	prodl,w,c
  7762  000656  0100               	movlb	0	; () banked
  7763  000658  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7764  00065A  0102               	movlb	2	; () banked
  7765  00065C  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  7766  00065E  0F30               	addlw	48
  7767  000660  0100               	movlb	0	; () banked
  7768  000662  6F8F               	movwf	_mouvement_option& (0+255),b
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;eusart.c: 1269: P4_busy = 1;
  7772  000664  0E01               	movlw	1
  7773  000666  6FAB               	movwf	_P4_busy& (0+255),b
  7774                           
  7775                           ;eusart.c: 1270: switch (direction) {
  7776  000668  D018               	goto	l7685
  7777  00066A                     l7659:
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;eusart.c: 1274: if (Etat == 0) {
  7781  00066A  51A9               	movf	_Etat& (0+255),w,b	;volatile
  7782  00066C  E101               	bnz	l7663
  7783  00066E  D088               	goto	l7745
  7784  000670                     l7663:
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;eusart.c: 1277: if (Etat != 5) {
  7788  000670  0E05               	movlw	5
  7789  000672  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  7790  000674  B4D8               	btfsc	status,2,c
  7791  000676  0012               	return	
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;eusart.c: 1278: Coupe_Moteur();
  7795  000678  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  7796                           
  7797                           ;eusart.c: 1279: delay_1s();
  7798  00067C  ECA0  F00F         	call	_delay_1s	;wreg free
  7799  000680  D07F               	goto	l7745
  7800  000682                     l7671:
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;eusart.c: 1299: if (Etat == 0) {
  7804  000682  51A9               	movf	_Etat& (0+255),w,b	;volatile
  7805  000684  E101               	bnz	l7675
  7806  000686  D07F               	goto	l7747
  7807  000688                     l7675:
  7808                           
  7809                           ; BSR set to: 0
  7810                           ;eusart.c: 1302: if (Etat != 4) {
  7811  000688  0E04               	movlw	4
  7812  00068A  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  7813  00068C  B4D8               	btfsc	status,2,c
  7814  00068E  0012               	return	
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;eusart.c: 1303: Coupe_Moteur();
  7818  000690  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  7819                           
  7820                           ;eusart.c: 1304: delay_1s();
  7821  000694  ECA0  F00F         	call	_delay_1s	;wreg free
  7822  000698  D076               	goto	l7747
  7823  00069A                     l7685:
  7824                           
  7825                           ; BSR set to: 0
  7826  00069A  518E               	movf	_direction& (0+255),w,b	;volatile
  7827                           
  7828                           ; Switch size 1, requested type "speed"
  7829                           ; Number of cases is 2, Range of values is 0 to 1
  7830                           ; switch strategies available:
  7831                           ; Name         Instructions Cycles
  7832                           ; simple_byte            7     4 (average)
  7833                           ;	Chosen strategy is simple_byte
  7834  00069C  E0F2               	bz	l7671
  7835  00069E  0A01               	xorlw	1	; case 1
  7836  0006A0  A4D8               	btfss	status,2,c
  7837  0006A2  0012               	return	
  7838  0006A4  D7E2               	goto	l7659
  7839  0006A6                     l1431:
  7840                           
  7841                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  7842  0006A6  A682               	btfss	3970,3,c	;volatile
  7843  0006A8  D03A               	goto	l7723
  7844                           
  7845                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  7846  0006AA  0102               	movlb	2	; () banked
  7847  0006AC  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7848  0006AE  0FD0               	addlw	208
  7849  0006B0  0100               	movlb	0	; () banked
  7850  0006B2  6F8E               	movwf	_direction& (0+255),b	;volatile
  7851                           
  7852                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  7853  0006B4  0102               	movlb	2	; () banked
  7854  0006B6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7855  0006B8  0FD0               	addlw	208
  7856  0006BA  0100               	movlb	0	; () banked
  7857  0006BC  6F90               	movwf	_type_consigne& (0+255),b
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  7861  0006BE  0102               	movlb	2	; () banked
  7862  0006C0  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7863  0006C2  0D0A               	mullw	10
  7864  0006C4  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7865  0006C8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7866  0006CA  0D64               	mullw	100
  7867  0006CC  50F3               	movf	prodl,w,c
  7868  0006CE  0100               	movlb	0	; () banked
  7869  0006D0  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7870  0006D2  0102               	movlb	2	; () banked
  7871  0006D4  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  7872  0006D6  0F30               	addlw	48
  7873  0006D8  0100               	movlb	0	; () banked
  7874  0006DA  6F8F               	movwf	_mouvement_option& (0+255),b
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;eusart.c: 1341: P4_busy = 1;
  7878  0006DC  0E01               	movlw	1
  7879  0006DE  6FAB               	movwf	_P4_busy& (0+255),b
  7880                           
  7881                           ;eusart.c: 1342: switch (direction) {
  7882  0006E0  D018               	goto	l7721
  7883  0006E2                     l7695:
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;eusart.c: 1348: if (Etat == 0) {
  7887  0006E2  51A9               	movf	_Etat& (0+255),w,b	;volatile
  7888  0006E4  E101               	bnz	l7699
  7889  0006E6  D058               	goto	l7753
  7890  0006E8                     l7699:
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;eusart.c: 1351: if (Etat != 9) {
  7894  0006E8  0E09               	movlw	9
  7895  0006EA  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  7896  0006EC  B4D8               	btfsc	status,2,c
  7897  0006EE  0012               	return	
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;eusart.c: 1352: Coupe_Moteur();
  7901  0006F0  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  7902                           
  7903                           ;eusart.c: 1353: delay_1s();
  7904  0006F4  ECA0  F00F         	call	_delay_1s	;wreg free
  7905  0006F8  D04F               	goto	l7753
  7906  0006FA                     l7707:
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;eusart.c: 1371: if (Etat == 0) {
  7910  0006FA  51A9               	movf	_Etat& (0+255),w,b	;volatile
  7911  0006FC  E101               	bnz	l7711
  7912  0006FE  D04F               	goto	l7755
  7913  000700                     l7711:
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;eusart.c: 1374: if (Etat != 8) {
  7917  000700  0E08               	movlw	8
  7918  000702  19A9               	xorwf	_Etat& (0+255),w,b	;volatile
  7919  000704  B4D8               	btfsc	status,2,c
  7920  000706  0012               	return	
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;eusart.c: 1375: Coupe_Moteur();
  7924  000708  ECF7  F010         	call	_Coupe_Moteur	;wreg free
  7925                           
  7926                           ;eusart.c: 1376: delay_1s();
  7927  00070C  ECA0  F00F         	call	_delay_1s	;wreg free
  7928  000710  D046               	goto	l7755
  7929  000712                     l7721:
  7930                           
  7931                           ; BSR set to: 0
  7932  000712  518E               	movf	_direction& (0+255),w,b	;volatile
  7933                           
  7934                           ; Switch size 1, requested type "speed"
  7935                           ; Number of cases is 2, Range of values is 0 to 1
  7936                           ; switch strategies available:
  7937                           ; Name         Instructions Cycles
  7938                           ; simple_byte            7     4 (average)
  7939                           ;	Chosen strategy is simple_byte
  7940  000714  E0F2               	bz	l7707
  7941  000716  0A01               	xorlw	1	; case 1
  7942  000718  A4D8               	btfss	status,2,c
  7943  00071A  0012               	return	
  7944  00071C  D7E2               	goto	l7695
  7945  00071E                     l7723:
  7946                           
  7947                           ;eusart.c: 1392: Alarme_On(4);
  7948  00071E  0E04               	movlw	4
  7949  000720  EF67  F011         	goto	_Alarme_On
  7950  000724                     l7725:
  7951                           
  7952                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  7953  000724  0102               	movlb	2	; () banked
  7954  000726  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7955  000728  0FD0               	addlw	208
  7956  00072A  0100               	movlb	0	; () banked
  7957  00072C  6F97               	movwf	_moteur_indice& (0+255),b	;volatile
  7958                           
  7959                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  7960  00072E  0102               	movlb	2	; () banked
  7961  000730  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7962  000732  0FD0               	addlw	208
  7963  000734  0100               	movlb	0	; () banked
  7964  000736  6F8E               	movwf	_direction& (0+255),b	;volatile
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  7968  000738  0102               	movlb	2	; () banked
  7969  00073A  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7970  00073C  0D0A               	mullw	10
  7971  00073E  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7972  000742  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7973  000744  0D64               	mullw	100
  7974  000746  50F3               	movf	prodl,w,c
  7975  000748  0100               	movlb	0	; () banked
  7976  00074A  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7977  00074C  0102               	movlb	2	; () banked
  7978  00074E  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  7979  000750  0F30               	addlw	48
  7980  000752  0100               	movlb	0	; () banked
  7981  000754  6F9F               	movwf	_nb_Pion_Objectif& (0+255),b
  7982                           
  7983                           ;eusart.c: 1410: switch (moteur_indice) {
  7984  000756  D02C               	goto	l7763
  7985  000758                     l1447:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;eusart.c: 1412: Alarme = 0;
  7989  000758  6BA8               	clrf	_Alarme& (0+255),b	;volatile
  7990                           
  7991                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  7992  00075A  C09D  F09E         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  7993                           
  7994                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  7995  00075E  C09A  F09B         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  7996                           
  7997                           ;eusart.c: 1416: switch (direction) {
  7998  000762  D008               	goto	l7743
  7999  000764                     l7729:
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;eusart.c: 1419: if (Etat == 0) {
  8003  000764  51A9               	movf	_Etat& (0+255),w,b	;volatile
  8004  000766                     l7733:
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;eusart.c: 1425: Etat_Update(2);
  8008  000766  0E02               	movlw	2
  8009  000768  EF66  F010         	goto	_Etat_Update
  8010  00076C                     l7735:
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;eusart.c: 1430: if (Etat == 0) {
  8014  00076C  51A9               	movf	_Etat& (0+255),w,b	;volatile
  8015  00076E                     l7739:
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;eusart.c: 1434: Etat_Update(3);
  8019  00076E  0E03               	movlw	3
  8020  000770  EF66  F010         	goto	_Etat_Update
  8021  000774                     l7743:
  8022                           
  8023                           ; BSR set to: 0
  8024  000774  518E               	movf	_direction& (0+255),w,b	;volatile
  8025                           
  8026                           ; Switch size 1, requested type "speed"
  8027                           ; Number of cases is 2, Range of values is 0 to 1
  8028                           ; switch strategies available:
  8029                           ; Name         Instructions Cycles
  8030                           ; simple_byte            7     4 (average)
  8031                           ;	Chosen strategy is simple_byte
  8032  000776  E0FA               	bz	l7735
  8033  000778  0A01               	xorlw	1	; case 1
  8034  00077A  A4D8               	btfss	status,2,c
  8035  00077C  0012               	return	
  8036  00077E  D7F2               	goto	l7729
  8037  000780                     l7745:
  8038                           
  8039                           ; BSR set to: 0
  8040                           ;eusart.c: 1451: Etat_Update(5);
  8041  000780  0E05               	movlw	5
  8042  000782  EF66  F010         	goto	_Etat_Update
  8043  000786                     l7747:
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;eusart.c: 1456: Etat_Update(4);
  8047  000786  0E04               	movlw	4
  8048  000788  EF66  F010         	goto	_Etat_Update
  8049  00078C                     l7751:
  8050                           
  8051                           ; BSR set to: 0
  8052  00078C  518E               	movf	_direction& (0+255),w,b	;volatile
  8053                           
  8054                           ; Switch size 1, requested type "speed"
  8055                           ; Number of cases is 2, Range of values is 0 to 1
  8056                           ; switch strategies available:
  8057                           ; Name         Instructions Cycles
  8058                           ; simple_byte            7     4 (average)
  8059                           ;	Chosen strategy is simple_byte
  8060  00078E  E0FB               	bz	l7747
  8061  000790  0A01               	xorlw	1	; case 1
  8062  000792  A4D8               	btfss	status,2,c
  8063  000794  0012               	return	
  8064  000796  D7F4               	goto	l7745
  8065  000798                     l7753:
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;eusart.c: 1473: Etat_Update(9);
  8069  000798  0E09               	movlw	9
  8070  00079A  EF66  F010         	goto	_Etat_Update
  8071  00079E                     l7755:
  8072                           
  8073                           ; BSR set to: 0
  8074                           ;eusart.c: 1478: Etat_Update(8);
  8075  00079E  0E08               	movlw	8
  8076  0007A0  EF66  F010         	goto	_Etat_Update
  8077  0007A4                     l7759:
  8078                           
  8079                           ; BSR set to: 0
  8080  0007A4  518E               	movf	_direction& (0+255),w,b	;volatile
  8081                           
  8082                           ; Switch size 1, requested type "speed"
  8083                           ; Number of cases is 2, Range of values is 0 to 1
  8084                           ; switch strategies available:
  8085                           ; Name         Instructions Cycles
  8086                           ; simple_byte            7     4 (average)
  8087                           ;	Chosen strategy is simple_byte
  8088  0007A6  E0FB               	bz	l7755
  8089  0007A8  0A01               	xorlw	1	; case 1
  8090  0007AA  A4D8               	btfss	status,2,c
  8091  0007AC  0012               	return	
  8092  0007AE  D7F4               	goto	l7753
  8093  0007B0                     l7763:
  8094                           
  8095                           ; BSR set to: 0
  8096  0007B0  5197               	movf	_moteur_indice& (0+255),w,b	;volatile
  8097                           
  8098                           ; Switch size 1, requested type "speed"
  8099                           ; Number of cases is 3, Range of values is 1 to 3
  8100                           ; switch strategies available:
  8101                           ; Name         Instructions Cycles
  8102                           ; simple_byte           10     6 (average)
  8103                           ;	Chosen strategy is simple_byte
  8104  0007B2  0A01               	xorlw	1	; case 1
  8105  0007B4  E0D1               	bz	l1447
  8106  0007B6  0A03               	xorlw	3	; case 2
  8107  0007B8  E0E9               	bz	l7751
  8108  0007BA  0A01               	xorlw	1	; case 3
  8109  0007BC  A4D8               	btfss	status,2,c
  8110  0007BE  0012               	return	
  8111  0007C0  D7F1               	goto	l7759
  8112  0007C2                     l1471:
  8113                           
  8114                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  8115  0007C2  0102               	movlb	2	; () banked
  8116  0007C4  B180               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  8117  0007C6  D002               	bra	u5645
  8118  0007C8  948D               	bcf	3981,2,c	;volatile
  8119  0007CA  D001               	bra	u5646
  8120  0007CC                     u5645:
  8121  0007CC  848D               	bsf	3981,2,c	;volatile
  8122  0007CE                     u5646:
  8123                           
  8124                           ;eusart.c: 1507: break;
  8125  0007CE  0012               	return	
  8126  0007D0                     l7765:
  8127                           
  8128                           ;eusart.c: 1510: Etat_Update(0);
  8129  0007D0  0E00               	movlw	0
  8130  0007D2  EC66  F010         	call	_Etat_Update
  8131  0007D6  D6C3               	goto	l7607
  8132  0007D8                     l1473:
  8133                           
  8134                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  8135  0007D8  C280  F0A6         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  8136                           
  8137                           ;eusart.c: 1522: break;
  8138  0007DC  0012               	return	
  8139  0007DE                     l7769:
  8140                           
  8141                           ;eusart.c: 1528: IRQ_Execution(Da);
  8142  0007DE  0102               	movlb	2	; () banked
  8143  0007E0  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8144  0007E2  EFA6  F00D         	goto	_IRQ_Execution
  8145  0007E6                     l7771:
  8146                           
  8147                           ;eusart.c: 1536: Etat_Update(0);
  8148  0007E6  0E00               	movlw	0
  8149  0007E8  EF66  F010         	goto	_Etat_Update
  8150  0007EC                     l7773:
  8151                           
  8152                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  8153  0007EC  0E0D               	movlw	13
  8154  0007EE  0102               	movlb	2	; () banked
  8155  0007F0  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  8156  0007F2  A4D8               	btfss	status,2,c
  8157                           
  8158                           ; BSR set to: 2
  8159                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  8160  0007F4  848B               	bsf	3979,2,c	;volatile
  8161  0007F6  0012               	return	
  8162  0007F8                     l7779:
  8163  0007F8  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  8164                           
  8165                           ; Switch size 1, requested type "speed"
  8166                           ; Number of cases is 38, Range of values is 48 to 118
  8167                           ; switch strategies available:
  8168                           ; Name         Instructions Cycles
  8169                           ; simple_byte          115    58 (average)
  8170                           ;	Chosen strategy is simple_byte
  8171  0007FA  0A30               	xorlw	48	; case 48
  8172  0007FC  E0F4               	bz	l7771
  8173  0007FE  0A01               	xorlw	1	; case 49
  8174  000800  B4D8               	btfsc	status,2,c
  8175  000802  0012               	return	
  8176  000804  0A03               	xorlw	3	; case 50
  8177  000806  B4D8               	btfsc	status,2,c
  8178  000808  0012               	return	
  8179  00080A  0A01               	xorlw	1	; case 51
  8180  00080C  B4D8               	btfsc	status,2,c
  8181  00080E  0012               	return	
  8182  000810  0A07               	xorlw	7	; case 52
  8183  000812  B4D8               	btfsc	status,2,c
  8184  000814  0012               	return	
  8185  000816  0A01               	xorlw	1	; case 53
  8186  000818  B4D8               	btfsc	status,2,c
  8187  00081A  0012               	return	
  8188  00081C  0A03               	xorlw	3	; case 54
  8189  00081E  B4D8               	btfsc	status,2,c
  8190  000820  0012               	return	
  8191  000822  0A01               	xorlw	1	; case 55
  8192  000824  B4D8               	btfsc	status,2,c
  8193  000826  0012               	return	
  8194  000828  0A76               	xorlw	118	; case 65
  8195  00082A  E102 EFF7  F010    	bz	_Coupe_Moteur
  8196  000830  0A03               	xorlw	3	; case 66
  8197  000832  E101 D738          	bz	l1431
  8198  000836  0A06               	xorlw	6	; case 68
  8199  000838  B4D8               	btfsc	status,2,c
  8200  00083A  0012               	return	
  8201  00083C  0A01               	xorlw	1	; case 69
  8202  00083E  E101 D4E5          	bz	l7525
  8203  000842  0A03               	xorlw	3	; case 70
  8204  000844  B4D8               	btfsc	status,2,c
  8205  000846  0012               	return	
  8206  000848  0A0E               	xorlw	14	; case 72
  8207  00084A  E101 D685          	bz	l7605
  8208  00084E  0A01               	xorlw	1	; case 73
  8209  000850  E0C6               	bz	l7769
  8210  000852  0A05               	xorlw	5	; case 76
  8211  000854  E101 D43F          	bz	l7489
  8212  000858  0A01               	xorlw	1	; case 77
  8213  00085A  E101 D763          	bz	l7725
  8214  00085E  0A1D               	xorlw	29	; case 80
  8215  000860  E101 D5B8          	bz	l7577
  8216  000864  0A02               	xorlw	2	; case 82
  8217  000866  E0AD               	bz	l1471
  8218  000868  0A01               	xorlw	1	; case 83
  8219  00086A  E101 D62C          	bz	l7599
  8220  00086E  0A07               	xorlw	7	; case 84
  8221  000870  E101 D61A          	bz	l7593
  8222  000874  0A01               	xorlw	1	; case 85
  8223  000876  B4D8               	btfsc	status,2,c
  8224  000878  0012               	return	
  8225  00087A  0A03               	xorlw	3	; case 86
  8226  00087C  E101 D5FC          	bz	l7591
  8227  000880  0A01               	xorlw	1	; case 87
  8228  000882  E101 D666          	bz	l7603
  8229  000886  0A0F               	xorlw	15	; case 88
  8230  000888  E101 D66C          	bz	l1396
  8231  00088C  0A02               	xorlw	2	; case 90
  8232  00088E  E101 D6CE          	bz	l1417
  8233  000892  0A38               	xorlw	56	; case 98
  8234  000894  E101 D4AE          	bz	l7521
  8235  000898  0A01               	xorlw	1	; case 99
  8236  00089A  E101 D4A5          	bz	l7519
  8237  00089E  0A06               	xorlw	6	; case 101
  8238  0008A0  E101 D4C4          	bz	l7529
  8239  0008A4  0A03               	xorlw	3	; case 102
  8240  0008A6  E098               	bz	l1473
  8241  0008A8  0A0F               	xorlw	15	; case 105
  8242  0008AA  E101 D421          	bz	l7491
  8243  0008AE  0A05               	xorlw	5	; case 108
  8244  0008B0  E101 D463          	bz	l1353
  8245  0008B4  0A01               	xorlw	1	; case 109
  8246  0008B6  E101 D4DC          	bz	l7537
  8247  0008BA  0A1D               	xorlw	29	; case 112
  8248  0008BC  E101 D427          	bz	l7495
  8249  0008C0  0A01               	xorlw	1	; case 113
  8250  0008C2  E101 D47F          	bz	l7515
  8251  0008C6  0A03               	xorlw	3	; case 114
  8252  0008C8  E083               	bz	l7765
  8253  0008CA  0A01               	xorlw	1	; case 115
  8254  0008CC  E101 D43F          	bz	l7499
  8255  0008D0  0A05               	xorlw	5	; case 118
  8256  0008D2  E101 D5EC          	bz	l7595
  8257  0008D6  D78A               	goto	l7773
  8258  0008D8                     __end_of_EUSART1_RX_T3_LOCAL:
  8259                           	opt stack 0
  8260                           tblptru	equ	0xFF8
  8261                           prodl	equ	0xFF3
  8262                           intcon	equ	0xFF2
  8263                           intcon2	equ	0xFF1
  8264                           intcon3	equ	0xFF0
  8265                           postinc0	equ	0xFEE
  8266                           wreg	equ	0xFE8
  8267                           indf1	equ	0xFE7
  8268                           postdec1	equ	0xFE5
  8269                           fsr1h	equ	0xFE2
  8270                           fsr1l	equ	0xFE1
  8271                           indf2	equ	0xFDF
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _sprintf *****************
  8277 ;; Defined at:
  8278 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  sp              1   26[COMRAM] PTR unsigned char 
  8281 ;;		 -> UART_TX_TEXT(64), 
  8282 ;;  f               2   27[COMRAM] PTR const unsigned char 
  8283 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  8284 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  8285 ;;		 -> STR_2(95), STR_1(3), 
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  idx             1    4[BANK0 ] unsigned char 
  8288 ;;  tmpval          4    0        struct .
  8289 ;;  cp              3    0        PTR const unsigned char 
  8290 ;;  width           2   10[BANK0 ] int 
  8291 ;;  val             2    7[BANK0 ] unsigned int 
  8292 ;;  len             2    0        unsigned int 
  8293 ;;  c               1   12[BANK0 ] char 
  8294 ;;  flag            1    9[BANK0 ] unsigned char 
  8295 ;;  prec            1    6[BANK0 ] char 
  8296 ;;  ap              1    5[BANK0 ] PTR void [1]
  8297 ;;		 -> ?_sprintf(2), 
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  2   26[COMRAM] int 
  8300 ;; Registers used:
  8301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/1
  8304 ;;		On exit  : 3F/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8307 ;;      Params:        37       0       0       0
  8308 ;;      Locals:         0       9       0       0
  8309 ;;      Temps:          0       4       0       0
  8310 ;;      Totals:        37      13       0       0
  8311 ;;Total ram usage:       50 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:   11
  8314 ;; This function calls:
  8315 ;;		___lwdiv
  8316 ;;		___lwmod
  8317 ;;		___wmul
  8318 ;;		_isdigit
  8319 ;; This function is called by:
  8320 ;;		_EUSART1_RX_T3_LOCAL
  8321 ;; This function uses a non-reentrant model
  8322 ;;
  8323                           
  8324                           	psect	text43
  8325  0008D8                     __ptext43:
  8326                           	opt stack 0
  8327  0008D8                     _sprintf:
  8328                           	opt stack 15
  8329                           
  8330                           ;doprnt.c: 494: va_list ap;
  8331                           ;doprnt.c: 499: signed char c;
  8332                           ;doprnt.c: 501: int width;
  8333                           ;doprnt.c: 506: signed char prec;
  8334                           ;doprnt.c: 508: unsigned char flag;
  8335                           ;doprnt.c: 523: union {
  8336                           ;doprnt.c: 524: unsigned long vd;
  8337                           ;doprnt.c: 525: double integ;
  8338                           ;doprnt.c: 526: } tmpval;
  8339                           ;doprnt.c: 528: unsigned int val;
  8340                           ;doprnt.c: 529: unsigned len;
  8341                           ;doprnt.c: 530: const char * cp;
  8342                           ;doprnt.c: 533: *ap = __va_start();
  8343                           
  8344                           ;incstack = 0
  8345  0008D8  0E1E               	movlw	low (?_sprintf+3)
  8346  0008DA  0100               	movlb	0	; () banked
  8347  0008DC  6FF2               	movwf	sprintf@ap& (0+255),b
  8348                           
  8349                           ;doprnt.c: 536: while(c = *f++) {
  8350  0008DE  D15E               	goto	l7479
  8351  0008E0                     l7347:
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;doprnt.c: 538: if(c != '%')
  8355  0008E0  0E25               	movlw	37
  8356  0008E2  19F9               	xorwf	sprintf@c& (0+255),w,b
  8357  0008E4  E007               	bz	l1687
  8358                           
  8359                           ; BSR set to: 0
  8360                           ;doprnt.c: 540: {
  8361                           ;doprnt.c: 541: ((*sp++ = (c)));
  8362  0008E6  501B               	movf	sprintf@sp,w,c
  8363  0008E8  6ED9               	movwf	fsr2l,c
  8364  0008EA  6ADA               	clrf	fsr2h,c
  8365  0008EC  C0F9  FFDF         	movff	sprintf@c,indf2
  8366                           
  8367                           ; BSR set to: 0
  8368  0008F0  2A1B               	incf	sprintf@sp,f,c
  8369                           
  8370                           ;doprnt.c: 542: continue;
  8371  0008F2  D154               	goto	l7479
  8372  0008F4                     l1687:
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;doprnt.c: 543: }
  8376                           ;doprnt.c: 546: width = 0;
  8377  0008F4  6BF7               	clrf	sprintf@width& (0+255),b
  8378  0008F6  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  8379                           
  8380                           ;doprnt.c: 548: flag = 0;
  8381  0008F8  6BF6               	clrf	sprintf@flag& (0+255),b
  8382  0008FA  D003               	goto	l7357
  8383  0008FC                     l7353:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;doprnt.c: 580: flag |= 0x04;
  8387  0008FC  85F6               	bsf	sprintf@flag& (0+255),2,b
  8388                           
  8389                           ;doprnt.c: 581: f++;
  8390  0008FE  4A1C               	infsnz	sprintf@f,f,c
  8391  000900  2A1D               	incf	sprintf@f+1,f,c
  8392  000902                     l7357:
  8393                           
  8394                           ; BSR set to: 0
  8395  000902  C01C  FFF6         	movff	sprintf@f,tblptrl
  8396  000906  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8397  00090A                     	if	0	;tblptru may be non-zero
  8398  00090A                     	endif
  8399  00090A                     	if	0	;tblptru may be non-zero
  8400  00090A                     	endif
  8401  00090A  0008               	tblrd		*
  8402  00090C  50F5               	movf	tablat,w,c
  8403                           
  8404                           ; Switch size 1, requested type "speed"
  8405                           ; Number of cases is 1, Range of values is 48 to 48
  8406                           ; switch strategies available:
  8407                           ; Name         Instructions Cycles
  8408                           ; simple_byte            4     3 (average)
  8409                           ;	Chosen strategy is simple_byte
  8410  00090E  0A30               	xorlw	48	; case 48
  8411  000910  E0F5               	bz	l7353
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8415  000912  C01C  FFF6         	movff	sprintf@f,tblptrl
  8416  000916  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8417  00091A                     	if	0	;tblptru may be non-zero
  8418  00091A                     	endif
  8419  00091A                     	if	0	;tblptru may be non-zero
  8420  00091A                     	endif
  8421  00091A  0008               	tblrd		*
  8422  00091C  50F5               	movf	tablat,w,c
  8423  00091E  ECA1  F010         	call	_isdigit
  8424  000922  E332               	bnc	l7375
  8425                           
  8426                           ;doprnt.c: 598: width = 0;
  8427  000924  0100               	movlb	0	; () banked
  8428  000926  6BF7               	clrf	sprintf@width& (0+255),b
  8429  000928  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  8430  00092A                     l7363:
  8431                           
  8432                           ;doprnt.c: 600: width *= 10;
  8433  00092A  C0F7  F00F         	movff	sprintf@width,___wmul@multiplier
  8434  00092E  C0F8  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  8435  000932  6A12               	clrf	___wmul@multiplicand+1,c
  8436  000934  0E0A               	movlw	10
  8437  000936  6E11               	movwf	___wmul@multiplicand,c
  8438  000938  EC01  F010         	call	___wmul	;wreg free
  8439  00093C  C00F  F0F7         	movff	?___wmul,sprintf@width
  8440  000940  C010  F0F8         	movff	?___wmul+1,sprintf@width+1
  8441                           
  8442                           ;doprnt.c: 601: width += *f++ - '0';
  8443  000944  0ED0               	movlw	208
  8444  000946  0100               	movlb	0	; () banked
  8445  000948  6FED               	movwf	??_sprintf& (0+255),b
  8446  00094A  69EE               	setf	(??_sprintf+1)& (0+255),b
  8447  00094C  C01C  FFF6         	movff	sprintf@f,tblptrl
  8448  000950  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8449  000954                     	if	0	;tblptru may be non-zero
  8450  000954                     	endif
  8451  000954                     	if	0	;tblptru may be non-zero
  8452  000954                     	endif
  8453  000954  0008               	tblrd		*
  8454  000956  50F5               	movf	tablat,w,c
  8455  000958  6FEF               	movwf	(??_sprintf+2)& (0+255),b
  8456  00095A  6BF0               	clrf	(??_sprintf+3)& (0+255),b
  8457  00095C  51ED               	movf	??_sprintf& (0+255),w,b
  8458  00095E  27EF               	addwf	(??_sprintf+2)& (0+255),f,b
  8459  000960  51EE               	movf	(??_sprintf+1)& (0+255),w,b
  8460  000962  23F0               	addwfc	(??_sprintf+3)& (0+255),f,b
  8461  000964  51EF               	movf	(??_sprintf+2)& (0+255),w,b
  8462  000966  27F7               	addwf	sprintf@width& (0+255),f,b
  8463  000968  51F0               	movf	(??_sprintf+3)& (0+255),w,b
  8464  00096A  23F8               	addwfc	(sprintf@width+1)& (0+255),f,b
  8465                           
  8466                           ; BSR set to: 0
  8467  00096C  4A1C               	infsnz	sprintf@f,f,c
  8468  00096E  2A1D               	incf	sprintf@f+1,f,c
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8472  000970  C01C  FFF6         	movff	sprintf@f,tblptrl
  8473  000974  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8474  000978                     	if	0	;tblptru may be non-zero
  8475  000978                     	endif
  8476  000978                     	if	0	;tblptru may be non-zero
  8477  000978                     	endif
  8478  000978  0008               	tblrd		*
  8479  00097A  50F5               	movf	tablat,w,c
  8480  00097C  ECA1  F010         	call	_isdigit
  8481  000980  E303               	bnc	l7375
  8482  000982  D7D3               	goto	l7363
  8483  000984                     l7371:
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;doprnt.c: 718: case 'x':
  8487                           ;doprnt.c: 721: flag |= 0x80;
  8488  000984  8FF6               	bsf	sprintf@flag& (0+255),7,b
  8489                           
  8490                           ;doprnt.c: 723: break;
  8491  000986  D016               	goto	l1702
  8492  000988                     l7375:
  8493  000988  C01C  FFF6         	movff	sprintf@f,tblptrl
  8494  00098C  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8495  000990  4A1C               	infsnz	sprintf@f,f,c
  8496  000992  2A1D               	incf	sprintf@f+1,f,c
  8497  000994                     	if	0	;tblptru may be non-zero
  8498  000994                     	endif
  8499  000994                     	if	0	;tblptru may be non-zero
  8500  000994                     	endif
  8501  000994  0008               	tblrd		*
  8502  000996  CFF5 F0F9          	movff	tablat,sprintf@c
  8503  00099A  0100               	movlb	0	; () banked
  8504  00099C  51F9               	movf	sprintf@c& (0+255),w,b
  8505                           
  8506                           ; Switch size 1, requested type "speed"
  8507                           ; Number of cases is 5, Range of values is 0 to 120
  8508                           ; switch strategies available:
  8509                           ; Name         Instructions Cycles
  8510                           ; simple_byte           16     9 (average)
  8511                           ;	Chosen strategy is simple_byte
  8512  00099E  E101 D109          	bz	l7481
  8513  0009A2  0A58               	xorlw	88	; case 88
  8514  0009A4  E0EF               	bz	l7371
  8515  0009A6  0A3C               	xorlw	60	; case 100
  8516  0009A8  E005               	bz	l1702
  8517  0009AA  0A0D               	xorlw	13	; case 105
  8518  0009AC  E003               	bz	l1702
  8519  0009AE  0A11               	xorlw	17	; case 120
  8520  0009B0  E0E9               	bz	l7371
  8521  0009B2  D0F4               	goto	l7479
  8522  0009B4                     l1702:
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8526  0009B4  BFF6               	btfsc	sprintf@flag& (0+255),7,b
  8527  0009B6  D012               	goto	l7387
  8528                           
  8529                           ; BSR set to: 0
  8530                           ;doprnt.c: 1253: {
  8531                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8532  0009B8  51F2               	movf	sprintf@ap& (0+255),w,b
  8533  0009BA  6ED9               	movwf	fsr2l,c
  8534  0009BC  6ADA               	clrf	fsr2h,c
  8535  0009BE  CFDE F0F4          	movff	postinc2,sprintf@val
  8536  0009C2  CFDD F0F5          	movff	postdec2,sprintf@val+1
  8537                           
  8538                           ; BSR set to: 0
  8539  0009C6  0E02               	movlw	2
  8540  0009C8  27F2               	addwf	sprintf@ap& (0+255),f,b
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;doprnt.c: 1261: if((int)val < 0) {
  8544  0009CA  AFF5               	btfss	(sprintf@val+1)& (0+255),7,b
  8545  0009CC  D03D               	goto	l7421
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;doprnt.c: 1262: flag |= 0x03;
  8549  0009CE  0E03               	movlw	3
  8550  0009D0  13F6               	iorwf	sprintf@flag& (0+255),f,b
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;doprnt.c: 1263: val = -val;
  8554  0009D2  6DF4               	negf	sprintf@val& (0+255),b
  8555  0009D4  1FF5               	comf	(sprintf@val+1)& (0+255),f,b
  8556  0009D6  B0D8               	btfsc	status,0,c
  8557  0009D8  2BF5               	incf	(sprintf@val+1)& (0+255),f,b
  8558  0009DA  D036               	goto	l7421
  8559  0009DC                     l7387:
  8560                           
  8561                           ; BSR set to: 0
  8562                           ;doprnt.c: 1268: else
  8563                           ;doprnt.c: 1273: {
  8564                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8565  0009DC  51F2               	movf	sprintf@ap& (0+255),w,b
  8566  0009DE  6ED9               	movwf	fsr2l,c
  8567  0009E0  6ADA               	clrf	fsr2h,c
  8568  0009E2  CFDE F0F4          	movff	postinc2,sprintf@val
  8569  0009E6  CFDD F0F5          	movff	postdec2,sprintf@val+1
  8570                           
  8571                           ; BSR set to: 0
  8572  0009EA  0E02               	movlw	2
  8573  0009EC  27F2               	addwf	sprintf@ap& (0+255),f,b
  8574  0009EE  D02C               	goto	l7421
  8575  0009F0                     l7391:
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8579  0009F0  0E01               	movlw	1
  8580  0009F2  6FF9               	movwf	sprintf@c& (0+255),b
  8581  0009F4                     l7397:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;doprnt.c: 1306: if(val < dpowers[c])
  8585  0009F4  51F9               	movf	sprintf@c& (0+255),w,b
  8586  0009F6  0D02               	mullw	2
  8587  0009F8  0EA5               	movlw	low _dpowers
  8588  0009FA  24F3               	addwf	prodl,w,c
  8589  0009FC  6EF6               	movwf	tblptrl,c
  8590  0009FE  0E3E               	movlw	high _dpowers
  8591  000A00  20F4               	addwfc	prodh,w,c
  8592  000A02  6EF7               	movwf	tblptrh,c
  8593  000A04                     	if	0	;There are less than 3 active tblptr bytes
  8594  000A04                     	endif
  8595  000A04  0009               	tblrd		*+
  8596  000A06  50F5               	movf	tablat,w,c
  8597  000A08  5DF4               	subwf	sprintf@val& (0+255),w,b
  8598  000A0A  0009               	tblrd		*+
  8599  000A0C  50F5               	movf	tablat,w,c
  8600  000A0E  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  8601  000A10  E320               	bnc	l7423
  8602                           
  8603                           ; BSR set to: 0
  8604  000A12  2BF9               	incf	sprintf@c& (0+255),f,b
  8605                           
  8606                           ; BSR set to: 0
  8607  000A14  0E05               	movlw	5
  8608  000A16  19F9               	xorwf	sprintf@c& (0+255),w,b
  8609  000A18  E01C               	bz	l7423
  8610  000A1A  D7EC               	goto	l7397
  8611  000A1C                     l7405:
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8615  000A1C  0E01               	movlw	1
  8616  000A1E  6FF9               	movwf	sprintf@c& (0+255),b
  8617  000A20                     l7411:
  8618                           
  8619                           ; BSR set to: 0
  8620                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8621  000A20  51F9               	movf	sprintf@c& (0+255),w,b
  8622  000A22  0D02               	mullw	2
  8623  000A24  0EAF               	movlw	low _hexpowers
  8624  000A26  24F3               	addwf	prodl,w,c
  8625  000A28  6EF6               	movwf	tblptrl,c
  8626  000A2A  0E3E               	movlw	high _hexpowers
  8627  000A2C  20F4               	addwfc	prodh,w,c
  8628  000A2E  6EF7               	movwf	tblptrh,c
  8629  000A30                     	if	0	;There are less than 3 active tblptr bytes
  8630  000A30                     	endif
  8631  000A30  0009               	tblrd		*+
  8632  000A32  50F5               	movf	tablat,w,c
  8633  000A34  5DF4               	subwf	sprintf@val& (0+255),w,b
  8634  000A36  0009               	tblrd		*+
  8635  000A38  50F5               	movf	tablat,w,c
  8636  000A3A  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  8637  000A3C  E30A               	bnc	l7423
  8638                           
  8639                           ; BSR set to: 0
  8640  000A3E  2BF9               	incf	sprintf@c& (0+255),f,b
  8641                           
  8642                           ; BSR set to: 0
  8643  000A40  0E04               	movlw	4
  8644  000A42  19F9               	xorwf	sprintf@c& (0+255),w,b
  8645  000A44  E006               	bz	l7423
  8646  000A46  D7EC               	goto	l7411
  8647  000A48                     l7421:
  8648                           
  8649                           ; BSR set to: 0
  8650  000A48  51F6               	movf	sprintf@flag& (0+255),w,b
  8651  000A4A  0B80               	andlw	128
  8652                           
  8653                           ; Switch size 1, requested type "speed"
  8654                           ; Number of cases is 2, Range of values is 0 to 128
  8655                           ; switch strategies available:
  8656                           ; Name         Instructions Cycles
  8657                           ; simple_byte            7     4 (average)
  8658                           ;	Chosen strategy is simple_byte
  8659  000A4C  E0D1               	bz	l7391
  8660  000A4E  0A80               	xorlw	128	; case 128
  8661  000A50  E0E5               	bz	l7405
  8662  000A52                     l7423:
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8666  000A52  51F7               	movf	sprintf@width& (0+255),w,b
  8667  000A54  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  8668  000A56  E008               	bz	l7429
  8669                           
  8670                           ; BSR set to: 0
  8671  000A58  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  8672  000A5C  0E03               	movlw	3
  8673  000A5E  17ED               	andwf	??_sprintf& (0+255),f,b
  8674  000A60  E003               	bz	l7429
  8675                           
  8676                           ; BSR set to: 0
  8677                           ;doprnt.c: 1346: width--;
  8678  000A62  07F7               	decf	sprintf@width& (0+255),f,b
  8679  000A64  A0D8               	btfss	status,0,c
  8680  000A66  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  8681  000A68                     l7429:
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;doprnt.c: 1381: if(width > c)
  8685  000A68  0E80               	movlw	128
  8686  000A6A  BFF9               	btfsc	sprintf@c& (0+255),7,b
  8687  000A6C  0E7F               	movlw	127
  8688  000A6E  6FED               	movwf	??_sprintf& (0+255),b
  8689  000A70  51F7               	movf	sprintf@width& (0+255),w,b
  8690  000A72  5DF9               	subwf	sprintf@c& (0+255),w,b
  8691  000A74  51F8               	movf	(sprintf@width+1)& (0+255),w,b
  8692  000A76  0A80               	xorlw	128
  8693  000A78  59ED               	subwfb	??_sprintf& (0+255),w,b
  8694  000A7A  E207               	bc	l1720
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;doprnt.c: 1382: width -= c;
  8698  000A7C  51F9               	movf	sprintf@c& (0+255),w,b
  8699  000A7E  5FF7               	subwf	sprintf@width& (0+255),f,b
  8700  000A80  0E00               	movlw	0
  8701  000A82  BFF9               	btfsc	sprintf@c& (0+255),7,b
  8702  000A84  0EFF               	movlw	255
  8703  000A86  5BF8               	subwfb	(sprintf@width+1)& (0+255),f,b
  8704  000A88  D002               	goto	l1721
  8705  000A8A                     l1720:
  8706                           
  8707                           ; BSR set to: 0
  8708                           ;doprnt.c: 1383: else
  8709                           ;doprnt.c: 1384: width = 0;
  8710  000A8A  6BF7               	clrf	sprintf@width& (0+255),b
  8711  000A8C  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  8712  000A8E                     l1721:
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;doprnt.c: 1387: if(flag & 0x04) {
  8716  000A8E  A5F6               	btfss	sprintf@flag& (0+255),2,b
  8717  000A90  D018               	goto	l7447
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;doprnt.c: 1392: if(flag & 0x03)
  8721  000A92  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  8722  000A96  0E03               	movlw	3
  8723  000A98  17ED               	andwf	??_sprintf& (0+255),f,b
  8724  000A9A  E006               	bz	l7439
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  8728  000A9C  501B               	movf	sprintf@sp,w,c
  8729  000A9E  6ED9               	movwf	fsr2l,c
  8730  000AA0  6ADA               	clrf	fsr2h,c
  8731  000AA2  0E2D               	movlw	45
  8732  000AA4  6EDF               	movwf	indf2,c
  8733                           
  8734                           ; BSR set to: 0
  8735  000AA6  2A1B               	incf	sprintf@sp,f,c
  8736  000AA8                     l7439:
  8737                           
  8738                           ; BSR set to: 0
  8739                           ;doprnt.c: 1415: if(width)
  8740  000AA8  51F7               	movf	sprintf@width& (0+255),w,b
  8741  000AAA  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  8742  000AAC  E024               	bz	l7461
  8743                           
  8744                           ; BSR set to: 0
  8745                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  8746  000AAE  501B               	movf	sprintf@sp,w,c
  8747  000AB0  6ED9               	movwf	fsr2l,c
  8748  000AB2  6ADA               	clrf	fsr2h,c
  8749  000AB4  0E30               	movlw	48
  8750  000AB6  6EDF               	movwf	indf2,c
  8751                           
  8752                           ; BSR set to: 0
  8753  000AB8  2A1B               	incf	sprintf@sp,f,c
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;doprnt.c: 1418: while(--width);
  8757  000ABA  07F7               	decf	sprintf@width& (0+255),f,b
  8758  000ABC  A0D8               	btfss	status,0,c
  8759  000ABE  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  8760  000AC0  D7F3               	goto	l7439
  8761  000AC2                     l7447:
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;doprnt.c: 1422: {
  8765                           ;doprnt.c: 1424: if(width
  8766                           ;doprnt.c: 1428: )
  8767  000AC2  51F7               	movf	sprintf@width& (0+255),w,b
  8768  000AC4  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  8769  000AC6  E00C               	bz	l7455
  8770  000AC8                     l7449:
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  8774  000AC8  501B               	movf	sprintf@sp,w,c
  8775  000ACA  6ED9               	movwf	fsr2l,c
  8776  000ACC  6ADA               	clrf	fsr2h,c
  8777  000ACE  0E20               	movlw	32
  8778  000AD0  6EDF               	movwf	indf2,c
  8779                           
  8780                           ; BSR set to: 0
  8781  000AD2  2A1B               	incf	sprintf@sp,f,c
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;doprnt.c: 1431: while(--width);
  8785  000AD4  07F7               	decf	sprintf@width& (0+255),f,b
  8786  000AD6  A0D8               	btfss	status,0,c
  8787  000AD8  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  8788  000ADA  51F7               	movf	sprintf@width& (0+255),w,b
  8789  000ADC  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  8790  000ADE  E1F4               	bnz	l7449
  8791  000AE0                     l7455:
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;doprnt.c: 1438: if(flag & 0x03)
  8795  000AE0  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  8796  000AE4  0E03               	movlw	3
  8797  000AE6  17ED               	andwf	??_sprintf& (0+255),f,b
  8798  000AE8  E006               	bz	l7461
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  8802  000AEA  501B               	movf	sprintf@sp,w,c
  8803  000AEC  6ED9               	movwf	fsr2l,c
  8804  000AEE  6ADA               	clrf	fsr2h,c
  8805  000AF0  0E2D               	movlw	45
  8806  000AF2  6EDF               	movwf	indf2,c
  8807                           
  8808                           ; BSR set to: 0
  8809  000AF4  2A1B               	incf	sprintf@sp,f,c
  8810  000AF6                     l7461:
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;doprnt.c: 1469: }
  8814                           ;doprnt.c: 1472: prec = c;
  8815  000AF6  C0F9  F0F3         	movff	sprintf@c,sprintf@prec
  8816                           
  8817                           ;doprnt.c: 1474: while(prec--) {
  8818  000AFA  D04D               	goto	l7477
  8819  000AFC                     l7463:
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8823  000AFC  51F3               	movf	sprintf@prec& (0+255),w,b
  8824  000AFE  0D02               	mullw	2
  8825  000B00  0EA5               	movlw	low _dpowers
  8826  000B02  24F3               	addwf	prodl,w,c
  8827  000B04  6EF6               	movwf	tblptrl,c
  8828  000B06  0E3E               	movlw	high _dpowers
  8829  000B08  20F4               	addwfc	prodh,w,c
  8830  000B0A  6EF7               	movwf	tblptrh,c
  8831  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  8832  000B0C                     	endif
  8833  000B0C  0009               	tblrd		*+
  8834  000B0E  CFF5 F011          	movff	tablat,___lwdiv@divisor
  8835  000B12  000A               	tblrd		*-
  8836  000B14  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  8837  000B18  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  8838  000B1C  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  8839  000B20  EC45  F00E         	call	___lwdiv	;wreg free
  8840  000B24  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  8841  000B28  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  8842  000B2C  6A19               	clrf	___lwmod@divisor+1,c
  8843  000B2E  0E0A               	movlw	10
  8844  000B30  6E18               	movwf	___lwmod@divisor,c
  8845  000B32  EC8B  F00E         	call	___lwmod	;wreg free
  8846  000B36  5016               	movf	?___lwmod,w,c
  8847  000B38  0F30               	addlw	48
  8848  000B3A  6FF9               	movwf	sprintf@c& (0+255),b
  8849                           
  8850                           ;doprnt.c: 1491: break;
  8851  000B3C  D026               	goto	l7473
  8852  000B3E                     l7465:
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;doprnt.c: 1499: {
  8856                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  8857  000B3E  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  8858  000B42  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  8859  000B46  51F3               	movf	sprintf@prec& (0+255),w,b
  8860  000B48  0D02               	mullw	2
  8861  000B4A  0EAF               	movlw	low _hexpowers
  8862  000B4C  24F3               	addwf	prodl,w,c
  8863  000B4E  6EF6               	movwf	tblptrl,c
  8864  000B50  0E3E               	movlw	high _hexpowers
  8865  000B52  20F4               	addwfc	prodh,w,c
  8866  000B54  6EF7               	movwf	tblptrh,c
  8867  000B56                     	if	0	;There are less than 3 active tblptr bytes
  8868  000B56                     	endif
  8869  000B56  0009               	tblrd		*+
  8870  000B58  CFF5 F011          	movff	tablat,___lwdiv@divisor
  8871  000B5C  000A               	tblrd		*-
  8872  000B5E  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  8873  000B62  EC45  F00E         	call	___lwdiv	;wreg free
  8874  000B66  500F               	movf	?___lwdiv,w,c
  8875  000B68  0B0F               	andlw	15
  8876  000B6A  6FF1               	movwf	sprintf@idx& (0+255),b
  8877                           
  8878                           ; BSR set to: 0
  8879                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  8880  000B6C  0EDB               	movlw	low STR_11
  8881  000B6E  25F1               	addwf	sprintf@idx& (0+255),w,b
  8882  000B70  6EF6               	movwf	tblptrl,c
  8883  000B72  6AF7               	clrf	tblptrh,c
  8884  000B74  0E3F               	movlw	high STR_11
  8885  000B76  22F7               	addwfc	tblptrh,f,c
  8886  000B78                     	if	0	;There are less than 3 active tblptr bytes
  8887  000B78                     	endif
  8888  000B78  0008               	tblrd		*
  8889  000B7A  CFF5 F0F9          	movff	tablat,sprintf@c
  8890                           
  8891                           ;doprnt.c: 1508: }
  8892                           ;doprnt.c: 1510: break;
  8893  000B7E  D005               	goto	l7473
  8894  000B80                     l7471:
  8895                           
  8896                           ; BSR set to: 0
  8897  000B80  51F6               	movf	sprintf@flag& (0+255),w,b
  8898  000B82  0B80               	andlw	128
  8899                           
  8900                           ; Switch size 1, requested type "speed"
  8901                           ; Number of cases is 2, Range of values is 0 to 128
  8902                           ; switch strategies available:
  8903                           ; Name         Instructions Cycles
  8904                           ; simple_byte            7     4 (average)
  8905                           ;	Chosen strategy is simple_byte
  8906  000B84  E0BB               	bz	l7463
  8907  000B86  0A80               	xorlw	128	; case 128
  8908  000B88  E0DA               	bz	l7465
  8909  000B8A                     l7473:
  8910                           
  8911                           ; BSR set to: 0
  8912                           ;doprnt.c: 1524: ((*sp++ = (c)));
  8913  000B8A  501B               	movf	sprintf@sp,w,c
  8914  000B8C  6ED9               	movwf	fsr2l,c
  8915  000B8E  6ADA               	clrf	fsr2h,c
  8916  000B90  C0F9  FFDF         	movff	sprintf@c,indf2
  8917                           
  8918                           ; BSR set to: 0
  8919  000B94  2A1B               	incf	sprintf@sp,f,c
  8920  000B96                     l7477:
  8921                           
  8922                           ; BSR set to: 0
  8923  000B96  07F3               	decf	sprintf@prec& (0+255),f,b
  8924  000B98  29F3               	incf	sprintf@prec& (0+255),w,b
  8925  000B9A  E1F2               	bnz	l7471
  8926  000B9C                     l7479:
  8927                           
  8928                           ; BSR set to: 0
  8929  000B9C  C01C  FFF6         	movff	sprintf@f,tblptrl
  8930  000BA0  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  8931  000BA4  4A1C               	infsnz	sprintf@f,f,c
  8932  000BA6  2A1D               	incf	sprintf@f+1,f,c
  8933  000BA8                     	if	0	;tblptru may be non-zero
  8934  000BA8                     	endif
  8935  000BA8                     	if	0	;tblptru may be non-zero
  8936  000BA8                     	endif
  8937  000BA8  0008               	tblrd		*
  8938  000BAA  CFF5 F0F9          	movff	tablat,sprintf@c
  8939  000BAE  51F9               	movf	sprintf@c& (0+255),w,b
  8940  000BB0  E001 D696          	bnz	l7347
  8941  000BB4                     l7481:
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;doprnt.c: 1538: *sp = 0;
  8945  000BB4  501B               	movf	sprintf@sp,w,c
  8946  000BB6  6ED9               	movwf	fsr2l,c
  8947  000BB8  6ADA               	clrf	fsr2h,c
  8948  000BBA  6ADF               	clrf	indf2,c
  8949                           
  8950                           ; BSR set to: 0
  8951  000BBC  0C00               	retlw	0	;funcret
  8952  000BBE                     __end_of_sprintf:
  8953                           	opt stack 0
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           intcon	equ	0xFF2
  8961                           intcon2	equ	0xFF1
  8962                           intcon3	equ	0xFF0
  8963                           postinc0	equ	0xFEE
  8964                           wreg	equ	0xFE8
  8965                           indf1	equ	0xFE7
  8966                           postdec1	equ	0xFE5
  8967                           fsr1h	equ	0xFE2
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _isdigit *****************
  8977 ;; Defined at:
  8978 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;  c               1    wreg     unsigned char 
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;  c               1   16[COMRAM] unsigned char 
  8983 ;; Return value:  Size  Location     Type
  8984 ;;		None               void
  8985 ;; Registers used:
  8986 ;;		wreg, status,2, status,0
  8987 ;; Tracked objects:
  8988 ;;		On entry : 3F/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8992 ;;      Params:         0       0       0       0
  8993 ;;      Locals:         2       0       0       0
  8994 ;;      Temps:          1       0       0       0
  8995 ;;      Totals:         3       0       0       0
  8996 ;;Total ram usage:        3 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:   10
  8999 ;; This function calls:
  9000 ;;		Nothing
  9001 ;; This function is called by:
  9002 ;;		_sprintf
  9003 ;; This function uses a non-reentrant model
  9004 ;;
  9005                           
  9006                           	psect	text44
  9007  002142                     __ptext44:
  9008                           	opt stack 0
  9009  002142                     _isdigit:
  9010                           	opt stack 15
  9011                           
  9012                           ; BSR set to: 0
  9013                           ;incstack = 0
  9014                           ;isdigit@c stored from wreg
  9015  002142  6E11               	movwf	isdigit@c,c
  9016  002144  6A10               	clrf	_isdigit$3598,c
  9017  002146  0E3A               	movlw	58
  9018  002148  6011               	cpfslt	isdigit@c,c
  9019  00214A  D005               	goto	l7169
  9020  00214C  0E2F               	movlw	47
  9021  00214E  6411               	cpfsgt	isdigit@c,c
  9022  002150  D002               	goto	l7169
  9023  002152  0E01               	movlw	1
  9024  002154  6E10               	movwf	_isdigit$3598,c
  9025  002156                     l7169:
  9026  002156  C010  F00F         	movff	_isdigit$3598,??_isdigit
  9027  00215A  300F               	rrcf	??_isdigit,w,c
  9028  00215C  0012               	return		;funcret
  9029  00215E                     __end_of_isdigit:
  9030                           	opt stack 0
  9031                           tblptru	equ	0xFF8
  9032                           tblptrh	equ	0xFF7
  9033                           tblptrl	equ	0xFF6
  9034                           tablat	equ	0xFF5
  9035                           prodh	equ	0xFF4
  9036                           prodl	equ	0xFF3
  9037                           intcon	equ	0xFF2
  9038                           intcon2	equ	0xFF1
  9039                           intcon3	equ	0xFF0
  9040                           postinc0	equ	0xFEE
  9041                           wreg	equ	0xFE8
  9042                           indf1	equ	0xFE7
  9043                           postdec1	equ	0xFE5
  9044                           fsr1h	equ	0xFE2
  9045                           fsr1l	equ	0xFE1
  9046                           indf2	equ	0xFDF
  9047                           postinc2	equ	0xFDE
  9048                           postdec2	equ	0xFDD
  9049                           fsr2h	equ	0xFDA
  9050                           fsr2l	equ	0xFD9
  9051                           status	equ	0xFD8
  9052                           
  9053 ;; *************** function ___wmul *****************
  9054 ;; Defined at:
  9055 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  multiplier      2   14[COMRAM] unsigned int 
  9058 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;  product         2   18[COMRAM] unsigned int 
  9061 ;; Return value:  Size  Location     Type
  9062 ;;                  2   14[COMRAM] unsigned int 
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0, prodl, prodh
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9070 ;;      Params:         4       0       0       0
  9071 ;;      Locals:         2       0       0       0
  9072 ;;      Temps:          0       0       0       0
  9073 ;;      Totals:         6       0       0       0
  9074 ;;Total ram usage:        6 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; Hardware stack levels required when called:   10
  9077 ;; This function calls:
  9078 ;;		Nothing
  9079 ;; This function is called by:
  9080 ;;		_sprintf
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           	psect	text45
  9085  002002                     __ptext45:
  9086                           	opt stack 0
  9087  002002                     ___wmul:
  9088                           	opt stack 15
  9089                           
  9090                           ;incstack = 0
  9091  002002  500F               	movf	___wmul@multiplier,w,c
  9092  002004  0211               	mulwf	___wmul@multiplicand,c
  9093  002006  CFF3 F013          	movff	prodl,___wmul@product
  9094  00200A  CFF4 F014          	movff	prodh,___wmul@product+1
  9095  00200E  500F               	movf	___wmul@multiplier,w,c
  9096  002010  0212               	mulwf	___wmul@multiplicand+1,c
  9097  002012  50F3               	movf	prodl,w,c
  9098  002014  2614               	addwf	___wmul@product+1,f,c
  9099  002016  5010               	movf	___wmul@multiplier+1,w,c
  9100  002018  0211               	mulwf	___wmul@multiplicand,c
  9101  00201A  50F3               	movf	prodl,w,c
  9102  00201C  2614               	addwf	___wmul@product+1,f,c
  9103  00201E  C013  F00F         	movff	___wmul@product,?___wmul
  9104  002022  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9105  002026  0012               	return		;funcret
  9106  002028                     __end_of___wmul:
  9107                           	opt stack 0
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon2	equ	0xFF1
  9116                           intcon3	equ	0xFF0
  9117                           postinc0	equ	0xFEE
  9118                           wreg	equ	0xFE8
  9119                           indf1	equ	0xFE7
  9120                           postdec1	equ	0xFE5
  9121                           fsr1h	equ	0xFE2
  9122                           fsr1l	equ	0xFE1
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           fsr2h	equ	0xFDA
  9127                           fsr2l	equ	0xFD9
  9128                           status	equ	0xFD8
  9129                           
  9130 ;; *************** function ___lwmod *****************
  9131 ;; Defined at:
  9132 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  dividend        2   21[COMRAM] unsigned int 
  9135 ;;  divisor         2   23[COMRAM] unsigned int 
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;  counter         1   25[COMRAM] unsigned char 
  9138 ;; Return value:  Size  Location     Type
  9139 ;;                  2   21[COMRAM] unsigned int 
  9140 ;; Registers used:
  9141 ;;		wreg, status,2, status,0
  9142 ;; Tracked objects:
  9143 ;;		On entry : 3F/0
  9144 ;;		On exit  : 3F/0
  9145 ;;		Unchanged: 3F/0
  9146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9147 ;;      Params:         4       0       0       0
  9148 ;;      Locals:         1       0       0       0
  9149 ;;      Temps:          0       0       0       0
  9150 ;;      Totals:         5       0       0       0
  9151 ;;Total ram usage:        5 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; Hardware stack levels required when called:   10
  9154 ;; This function calls:
  9155 ;;		Nothing
  9156 ;; This function is called by:
  9157 ;;		_sprintf
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           	psect	text46
  9162  001D16                     __ptext46:
  9163                           	opt stack 0
  9164  001D16                     ___lwmod:
  9165                           	opt stack 15
  9166                           
  9167                           ; BSR set to: 0
  9168                           
  9169                           ;incstack = 0
  9170  001D16  5018               	movf	___lwmod@divisor,w,c
  9171  001D18  1019               	iorwf	___lwmod@divisor+1,w,c
  9172  001D1A  E017               	bz	l2152
  9173                           
  9174                           ; BSR set to: 0
  9175  001D1C  0E01               	movlw	1
  9176  001D1E  6E1A               	movwf	___lwmod@counter,c
  9177  001D20  D004               	goto	l7243
  9178  001D22                     l7241:
  9179                           
  9180                           ; BSR set to: 0
  9181  001D22  90D8               	bcf	status,0,c
  9182  001D24  3618               	rlcf	___lwmod@divisor,f,c
  9183  001D26  3619               	rlcf	___lwmod@divisor+1,f,c
  9184  001D28  2A1A               	incf	___lwmod@counter,f,c
  9185  001D2A                     l7243:
  9186                           
  9187                           ; BSR set to: 0
  9188  001D2A  AE19               	btfss	___lwmod@divisor+1,7,c
  9189  001D2C  D7FA               	goto	l7241
  9190  001D2E                     l7245:
  9191                           
  9192                           ; BSR set to: 0
  9193  001D2E  5018               	movf	___lwmod@divisor,w,c
  9194  001D30  5C16               	subwf	___lwmod@dividend,w,c
  9195  001D32  5019               	movf	___lwmod@divisor+1,w,c
  9196  001D34  5817               	subwfb	___lwmod@dividend+1,w,c
  9197  001D36  E304               	bnc	l7249
  9198                           
  9199                           ; BSR set to: 0
  9200  001D38  5018               	movf	___lwmod@divisor,w,c
  9201  001D3A  5E16               	subwf	___lwmod@dividend,f,c
  9202  001D3C  5019               	movf	___lwmod@divisor+1,w,c
  9203  001D3E  5A17               	subwfb	___lwmod@dividend+1,f,c
  9204  001D40                     l7249:
  9205                           
  9206                           ; BSR set to: 0
  9207  001D40  90D8               	bcf	status,0,c
  9208  001D42  3219               	rrcf	___lwmod@divisor+1,f,c
  9209  001D44  3218               	rrcf	___lwmod@divisor,f,c
  9210                           
  9211                           ; BSR set to: 0
  9212  001D46  2E1A               	decfsz	___lwmod@counter,f,c
  9213  001D48  D7F2               	goto	l7245
  9214  001D4A                     l2152:
  9215                           
  9216                           ; BSR set to: 0
  9217  001D4A  C016  F016         	movff	___lwmod@dividend,?___lwmod
  9218  001D4E  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
  9219                           
  9220                           ; BSR set to: 0
  9221  001D52  0012               	return		;funcret
  9222  001D54                     __end_of___lwmod:
  9223                           	opt stack 0
  9224                           tblptru	equ	0xFF8
  9225                           tblptrh	equ	0xFF7
  9226                           tblptrl	equ	0xFF6
  9227                           tablat	equ	0xFF5
  9228                           prodh	equ	0xFF4
  9229                           prodl	equ	0xFF3
  9230                           intcon	equ	0xFF2
  9231                           intcon2	equ	0xFF1
  9232                           intcon3	equ	0xFF0
  9233                           postinc0	equ	0xFEE
  9234                           wreg	equ	0xFE8
  9235                           indf1	equ	0xFE7
  9236                           postdec1	equ	0xFE5
  9237                           fsr1h	equ	0xFE2
  9238                           fsr1l	equ	0xFE1
  9239                           indf2	equ	0xFDF
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function ___lwdiv *****************
  9247 ;; Defined at:
  9248 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;  dividend        2   14[COMRAM] unsigned int 
  9251 ;;  divisor         2   16[COMRAM] unsigned int 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  quotient        2   19[COMRAM] unsigned int 
  9254 ;;  counter         1   18[COMRAM] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;                  2   14[COMRAM] unsigned int 
  9257 ;; Registers used:
  9258 ;;		wreg, status,2, status,0
  9259 ;; Tracked objects:
  9260 ;;		On entry : 3F/0
  9261 ;;		On exit  : 3F/0
  9262 ;;		Unchanged: 3F/0
  9263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9264 ;;      Params:         4       0       0       0
  9265 ;;      Locals:         3       0       0       0
  9266 ;;      Temps:          0       0       0       0
  9267 ;;      Totals:         7       0       0       0
  9268 ;;Total ram usage:        7 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:   10
  9271 ;; This function calls:
  9272 ;;		Nothing
  9273 ;; This function is called by:
  9274 ;;		_sprintf
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text47
  9279  001C8A                     __ptext47:
  9280                           	opt stack 0
  9281  001C8A                     ___lwdiv:
  9282                           	opt stack 15
  9283                           
  9284                           ; BSR set to: 0
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;incstack = 0
  9288  001C8A  6A14               	clrf	___lwdiv@quotient,c
  9289  001C8C  6A15               	clrf	___lwdiv@quotient+1,c
  9290                           
  9291                           ; BSR set to: 0
  9292  001C8E  5011               	movf	___lwdiv@divisor,w,c
  9293  001C90  1012               	iorwf	___lwdiv@divisor+1,w,c
  9294  001C92  E01B               	bz	l2142
  9295                           
  9296                           ; BSR set to: 0
  9297  001C94  0E01               	movlw	1
  9298  001C96  6E13               	movwf	___lwdiv@counter,c
  9299  001C98  D004               	goto	l7223
  9300  001C9A                     l7221:
  9301                           
  9302                           ; BSR set to: 0
  9303  001C9A  90D8               	bcf	status,0,c
  9304  001C9C  3611               	rlcf	___lwdiv@divisor,f,c
  9305  001C9E  3612               	rlcf	___lwdiv@divisor+1,f,c
  9306  001CA0  2A13               	incf	___lwdiv@counter,f,c
  9307  001CA2                     l7223:
  9308                           
  9309                           ; BSR set to: 0
  9310  001CA2  AE12               	btfss	___lwdiv@divisor+1,7,c
  9311  001CA4  D7FA               	goto	l7221
  9312  001CA6                     l7225:
  9313                           
  9314                           ; BSR set to: 0
  9315  001CA6  90D8               	bcf	status,0,c
  9316  001CA8  3614               	rlcf	___lwdiv@quotient,f,c
  9317  001CAA  3615               	rlcf	___lwdiv@quotient+1,f,c
  9318                           
  9319                           ; BSR set to: 0
  9320  001CAC  5011               	movf	___lwdiv@divisor,w,c
  9321  001CAE  5C0F               	subwf	___lwdiv@dividend,w,c
  9322  001CB0  5012               	movf	___lwdiv@divisor+1,w,c
  9323  001CB2  5810               	subwfb	___lwdiv@dividend+1,w,c
  9324  001CB4  E305               	bnc	l7233
  9325                           
  9326                           ; BSR set to: 0
  9327  001CB6  5011               	movf	___lwdiv@divisor,w,c
  9328  001CB8  5E0F               	subwf	___lwdiv@dividend,f,c
  9329  001CBA  5012               	movf	___lwdiv@divisor+1,w,c
  9330  001CBC  5A10               	subwfb	___lwdiv@dividend+1,f,c
  9331                           
  9332                           ; BSR set to: 0
  9333  001CBE  8014               	bsf	___lwdiv@quotient,0,c
  9334  001CC0                     l7233:
  9335                           
  9336                           ; BSR set to: 0
  9337  001CC0  90D8               	bcf	status,0,c
  9338  001CC2  3212               	rrcf	___lwdiv@divisor+1,f,c
  9339  001CC4  3211               	rrcf	___lwdiv@divisor,f,c
  9340                           
  9341                           ; BSR set to: 0
  9342  001CC6  2E13               	decfsz	___lwdiv@counter,f,c
  9343  001CC8  D7EE               	goto	l7225
  9344  001CCA                     l2142:
  9345                           
  9346                           ; BSR set to: 0
  9347  001CCA  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
  9348  001CCE  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9349                           
  9350                           ; BSR set to: 0
  9351  001CD2  0012               	return		;funcret
  9352  001CD4                     __end_of___lwdiv:
  9353                           	opt stack 0
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           intcon	equ	0xFF2
  9361                           intcon2	equ	0xFF1
  9362                           intcon3	equ	0xFF0
  9363                           postinc0	equ	0xFEE
  9364                           wreg	equ	0xFE8
  9365                           indf1	equ	0xFE7
  9366                           postdec1	equ	0xFE5
  9367                           fsr1h	equ	0xFE2
  9368                           fsr1l	equ	0xFE1
  9369                           indf2	equ	0xFDF
  9370                           postinc2	equ	0xFDE
  9371                           postdec2	equ	0xFDD
  9372                           fsr2h	equ	0xFDA
  9373                           fsr2l	equ	0xFD9
  9374                           status	equ	0xFD8
  9375                           
  9376 ;; *************** function _delay_1s *****************
  9377 ;; Defined at:
  9378 ;;		line 76 in file "horloge.c"
  9379 ;; Parameters:    Size  Location     Type
  9380 ;;		None
  9381 ;; Auto vars:     Size  Location     Type
  9382 ;;		None
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  1    wreg      void 
  9385 ;; Registers used:
  9386 ;;		wreg, cstack
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9392 ;;      Params:         0       0       0       0
  9393 ;;      Locals:         0       0       0       0
  9394 ;;      Temps:          0       0       0       0
  9395 ;;      Totals:         0       0       0       0
  9396 ;;Total ram usage:        0 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:   11
  9399 ;; This function calls:
  9400 ;;		_delay_100ms
  9401 ;; This function is called by:
  9402 ;;		_EUSART1_RX_T3_LOCAL
  9403 ;; This function uses a non-reentrant model
  9404 ;;
  9405                           
  9406                           	psect	text48
  9407  001F40                     __ptext48:
  9408                           	opt stack 0
  9409  001F40                     _delay_1s:
  9410                           	opt stack 15
  9411                           
  9412                           ;horloge.c: 77: delay_100ms();
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;incstack = 0
  9416  001F40  ECE7  F00A         	call	_delay_100ms	;wreg free
  9417                           
  9418                           ;horloge.c: 78: delay_100ms();
  9419  001F44  ECE7  F00A         	call	_delay_100ms	;wreg free
  9420                           
  9421                           ;horloge.c: 79: delay_100ms();
  9422  001F48  ECE7  F00A         	call	_delay_100ms	;wreg free
  9423                           
  9424                           ;horloge.c: 80: delay_100ms();
  9425  001F4C  ECE7  F00A         	call	_delay_100ms	;wreg free
  9426                           
  9427                           ;horloge.c: 81: delay_100ms();
  9428  001F50  ECE7  F00A         	call	_delay_100ms	;wreg free
  9429                           
  9430                           ;horloge.c: 82: delay_100ms();
  9431  001F54  ECE7  F00A         	call	_delay_100ms	;wreg free
  9432                           
  9433                           ;horloge.c: 83: delay_100ms();
  9434  001F58  ECE7  F00A         	call	_delay_100ms	;wreg free
  9435                           
  9436                           ;horloge.c: 84: delay_100ms();
  9437  001F5C  ECE7  F00A         	call	_delay_100ms	;wreg free
  9438                           
  9439                           ;horloge.c: 85: delay_100ms();
  9440  001F60  ECE7  F00A         	call	_delay_100ms	;wreg free
  9441                           
  9442                           ;horloge.c: 86: delay_100ms();
  9443  001F64  EFE7  F00A         	goto	_delay_100ms	;wreg free
  9444  001F68                     __end_of_delay_1s:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           prodh	equ	0xFF4
  9451                           prodl	equ	0xFF3
  9452                           intcon	equ	0xFF2
  9453                           intcon2	equ	0xFF1
  9454                           intcon3	equ	0xFF0
  9455                           postinc0	equ	0xFEE
  9456                           wreg	equ	0xFE8
  9457                           indf1	equ	0xFE7
  9458                           postdec1	equ	0xFE5
  9459                           fsr1h	equ	0xFE2
  9460                           fsr1l	equ	0xFE1
  9461                           indf2	equ	0xFDF
  9462                           postinc2	equ	0xFDE
  9463                           postdec2	equ	0xFDD
  9464                           fsr2h	equ	0xFDA
  9465                           fsr2l	equ	0xFD9
  9466                           status	equ	0xFD8
  9467                           
  9468 ;; *************** function _delay_100ms *****************
  9469 ;; Defined at:
  9470 ;;		line 46 in file "horloge.c"
  9471 ;; Parameters:    Size  Location     Type
  9472 ;;		None
  9473 ;; Auto vars:     Size  Location     Type
  9474 ;;		None
  9475 ;; Return value:  Size  Location     Type
  9476 ;;                  1    wreg      void 
  9477 ;; Registers used:
  9478 ;;		wreg
  9479 ;; Tracked objects:
  9480 ;;		On entry : 0/2
  9481 ;;		On exit  : 0/0
  9482 ;;		Unchanged: 0/0
  9483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9484 ;;      Params:         0       0       0       0
  9485 ;;      Locals:         0       0       0       0
  9486 ;;      Temps:          1       0       0       0
  9487 ;;      Totals:         1       0       0       0
  9488 ;;Total ram usage:        1 bytes
  9489 ;; Hardware stack levels used:    1
  9490 ;; Hardware stack levels required when called:   10
  9491 ;; This function calls:
  9492 ;;		Nothing
  9493 ;; This function is called by:
  9494 ;;		_delay_n_100ms
  9495 ;;		_delay_1s
  9496 ;; This function uses a non-reentrant model
  9497 ;;
  9498                           
  9499                           	psect	text49
  9500  0015CE                     __ptext49:
  9501                           	opt stack 0
  9502  0015CE                     _delay_100ms:
  9503                           	opt stack 15
  9504                           
  9505                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
  9506                           
  9507                           ;incstack = 0
  9508  0015CE  0E1A               	movlw	26
  9509  0015D0  6E0F               	movwf	??_delay_100ms& (0+255),c
  9510  0015D2  0EF8               	movlw	248
  9511  0015D4                     u6257:
  9512  0015D4  2EE8               	decfsz	wreg,f,c
  9513  0015D6  D7FE               	bra	u6257
  9514  0015D8  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9515  0015DA  D7FC               	bra	u6257
  9516  0015DC  F000 F000          	nop2	
  9517                           
  9518                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
  9519  0015E0  0E1A               	movlw	26
  9520  0015E2  6E0F               	movwf	??_delay_100ms& (0+255),c
  9521  0015E4  0EF8               	movlw	248
  9522  0015E6                     u6267:
  9523  0015E6  2EE8               	decfsz	wreg,f,c
  9524  0015E8  D7FE               	bra	u6267
  9525  0015EA  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9526  0015EC  D7FC               	bra	u6267
  9527  0015EE  F000 F000          	nop2	
  9528                           
  9529                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
  9530  0015F2  0E1A               	movlw	26
  9531  0015F4  6E0F               	movwf	??_delay_100ms& (0+255),c
  9532  0015F6  0EF8               	movlw	248
  9533  0015F8                     u6277:
  9534  0015F8  2EE8               	decfsz	wreg,f,c
  9535  0015FA  D7FE               	bra	u6277
  9536  0015FC  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9537  0015FE  D7FC               	bra	u6277
  9538  001600  F000 F000          	nop2	
  9539                           
  9540                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
  9541  001604  0E1A               	movlw	26
  9542  001606  6E0F               	movwf	??_delay_100ms& (0+255),c
  9543  001608  0EF8               	movlw	248
  9544  00160A                     u6287:
  9545  00160A  2EE8               	decfsz	wreg,f,c
  9546  00160C  D7FE               	bra	u6287
  9547  00160E  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9548  001610  D7FC               	bra	u6287
  9549  001612  F000 F000          	nop2	
  9550                           
  9551                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
  9552  001616  0E1A               	movlw	26
  9553  001618  6E0F               	movwf	??_delay_100ms& (0+255),c
  9554  00161A  0EF8               	movlw	248
  9555  00161C                     u6297:
  9556  00161C  2EE8               	decfsz	wreg,f,c
  9557  00161E  D7FE               	bra	u6297
  9558  001620  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9559  001622  D7FC               	bra	u6297
  9560  001624  F000 F000          	nop2	
  9561                           
  9562                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
  9563  001628  0E1A               	movlw	26
  9564  00162A  6E0F               	movwf	??_delay_100ms& (0+255),c
  9565  00162C  0EF8               	movlw	248
  9566  00162E                     u6307:
  9567  00162E  2EE8               	decfsz	wreg,f,c
  9568  001630  D7FE               	bra	u6307
  9569  001632  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9570  001634  D7FC               	bra	u6307
  9571  001636  F000 F000          	nop2	
  9572                           
  9573                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
  9574  00163A  0E1A               	movlw	26
  9575  00163C  6E0F               	movwf	??_delay_100ms& (0+255),c
  9576  00163E  0EF8               	movlw	248
  9577  001640                     u6317:
  9578  001640  2EE8               	decfsz	wreg,f,c
  9579  001642  D7FE               	bra	u6317
  9580  001644  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9581  001646  D7FC               	bra	u6317
  9582  001648  F000 F000          	nop2	
  9583                           
  9584                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
  9585  00164C  0E1A               	movlw	26
  9586  00164E  6E0F               	movwf	??_delay_100ms& (0+255),c
  9587  001650  0EF8               	movlw	248
  9588  001652                     u6327:
  9589  001652  2EE8               	decfsz	wreg,f,c
  9590  001654  D7FE               	bra	u6327
  9591  001656  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9592  001658  D7FC               	bra	u6327
  9593  00165A  F000 F000          	nop2	
  9594                           
  9595                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
  9596  00165E  0E1A               	movlw	26
  9597  001660  6E0F               	movwf	??_delay_100ms& (0+255),c
  9598  001662  0EF8               	movlw	248
  9599  001664                     u6337:
  9600  001664  2EE8               	decfsz	wreg,f,c
  9601  001666  D7FE               	bra	u6337
  9602  001668  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9603  00166A  D7FC               	bra	u6337
  9604  00166C  F000 F000          	nop2	
  9605                           
  9606                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
  9607  001670  0E1A               	movlw	26
  9608  001672  6E0F               	movwf	??_delay_100ms& (0+255),c
  9609  001674  0EF8               	movlw	248
  9610  001676                     u6347:
  9611  001676  2EE8               	decfsz	wreg,f,c
  9612  001678  D7FE               	bra	u6347
  9613  00167A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
  9614  00167C  D7FC               	bra	u6347
  9615  00167E  F000 F000          	nop2	
  9616  001682  0012               	return		;funcret
  9617  001684                     __end_of_delay_100ms:
  9618                           	opt stack 0
  9619                           tblptru	equ	0xFF8
  9620                           tblptrh	equ	0xFF7
  9621                           tblptrl	equ	0xFF6
  9622                           tablat	equ	0xFF5
  9623                           prodh	equ	0xFF4
  9624                           prodl	equ	0xFF3
  9625                           intcon	equ	0xFF2
  9626                           intcon2	equ	0xFF1
  9627                           intcon3	equ	0xFF0
  9628                           postinc0	equ	0xFEE
  9629                           wreg	equ	0xFE8
  9630                           indf1	equ	0xFE7
  9631                           postdec1	equ	0xFE5
  9632                           fsr1h	equ	0xFE2
  9633                           fsr1l	equ	0xFE1
  9634                           indf2	equ	0xFDF
  9635                           postinc2	equ	0xFDE
  9636                           postdec2	equ	0xFDD
  9637                           fsr2h	equ	0xFDA
  9638                           fsr2l	equ	0xFD9
  9639                           status	equ	0xFD8
  9640                           
  9641 ;; *************** function _IRQ_Execution *****************
  9642 ;; Defined at:
  9643 ;;		line 40 in file "interrupt.c"
  9644 ;; Parameters:    Size  Location     Type
  9645 ;;  IRQ_Indice      1    wreg     unsigned char 
  9646 ;; Auto vars:     Size  Location     Type
  9647 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
  9648 ;; Return value:  Size  Location     Type
  9649 ;;                  1    wreg      void 
  9650 ;; Registers used:
  9651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9652 ;; Tracked objects:
  9653 ;;		On entry : 3F/2
  9654 ;;		On exit  : 0/0
  9655 ;;		Unchanged: 0/0
  9656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9657 ;;      Params:         0       0       0       0
  9658 ;;      Locals:         1       0       0       0
  9659 ;;      Temps:          0       0       0       0
  9660 ;;      Totals:         1       0       0       0
  9661 ;;Total ram usage:        1 bytes
  9662 ;; Hardware stack levels used:    1
  9663 ;; Hardware stack levels required when called:   14
  9664 ;; This function calls:
  9665 ;;		_IRQ_ADC
  9666 ;;		_IRQ_CAPOT
  9667 ;;		_IRQ_I_MOTEUR_1
  9668 ;;		_IRQ_I_MOTEUR_2
  9669 ;;		_IRQ_PION_Metal_Apparait
  9670 ;;		_IRQ_PION_Metal_Disparait
  9671 ;;		_IRQ_PWM
  9672 ;;		_IRQ_TIMER2
  9673 ;;		_IRQ_TIMER_0
  9674 ;;		_IRQ_TIMER_5
  9675 ;; This function is called by:
  9676 ;;		_EUSART1_RX_T3_LOCAL
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text50
  9681  001B4C                     __ptext50:
  9682                           	opt stack 0
  9683  001B4C                     _IRQ_Execution:
  9684                           	opt stack 12
  9685                           
  9686                           ;incstack = 0
  9687                           ;IRQ_Execution@IRQ_Indice stored from wreg
  9688  001B4C  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
  9689                           
  9690                           ;interrupt.c: 62: break;
  9691                           
  9692                           ;interrupt.c: 60: break;
  9693                           
  9694                           ;interrupt.c: 58: break;
  9695                           
  9696                           ;interrupt.c: 56: break;
  9697                           
  9698                           ;interrupt.c: 54: break;
  9699                           
  9700                           ;interrupt.c: 52: break;
  9701                           
  9702                           ;interrupt.c: 50: break;
  9703                           
  9704                           ;interrupt.c: 48: break;
  9705                           
  9706                           ;interrupt.c: 46: break;
  9707                           
  9708                           ;interrupt.c: 44: break;
  9709                           
  9710                           ;interrupt.c: 41: switch (IRQ_Indice) {
  9711  001B4E  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
  9712                           
  9713                           ; Switch size 1, requested type "speed"
  9714                           ; Number of cases is 10, Range of values is 0 to 9
  9715                           ; switch strategies available:
  9716                           ; Name         Instructions Cycles
  9717                           ; simple_byte           31    16 (average)
  9718                           ;	Chosen strategy is simple_byte
  9719  001B50  E102 EFC3  F011    	bz	_IRQ_CAPOT
  9720  001B56  0A01               	xorlw	1	; case 1
  9721  001B58  E102 EFC9  F010    	bz	_IRQ_I_MOTEUR_1
  9722  001B5E  0A03               	xorlw	3	; case 2
  9723  001B60  E102 EFEC  F010    	bz	_IRQ_I_MOTEUR_2
  9724  001B66  0A01               	xorlw	1	; case 3
  9725  001B68  E102 EF57  F010    	bz	_IRQ_PION_Metal_Apparait
  9726  001B6E  0A07               	xorlw	7	; case 4
  9727  001B70  E102 EFBC  F010    	bz	_IRQ_PION_Metal_Disparait
  9728  001B76  0A01               	xorlw	1	; case 5
  9729  001B78  E102 EF1B  F00D    	bz	_IRQ_TIMER_0
  9730  001B7E  0A03               	xorlw	3	; case 6
  9731  001B80  E102 EFD2  F011    	bz	_IRQ_TIMER2
  9732  001B86  0A01               	xorlw	1	; case 7
  9733  001B88  E102 EF86  F00C    	bz	_IRQ_TIMER_5
  9734  001B8E  0A0F               	xorlw	15	; case 8
  9735  001B90  E102 EF02  F007    	bz	_IRQ_ADC
  9736  001B96  0A01               	xorlw	1	; case 9
  9737  001B98  E102 EFE5  F011    	bz	_IRQ_PWM
  9738  001B9E  0012               	return		;funcret
  9739  001BA0                     __end_of_IRQ_Execution:
  9740                           	opt stack 0
  9741                           tblptru	equ	0xFF8
  9742                           tblptrh	equ	0xFF7
  9743                           tblptrl	equ	0xFF6
  9744                           tablat	equ	0xFF5
  9745                           prodh	equ	0xFF4
  9746                           prodl	equ	0xFF3
  9747                           intcon	equ	0xFF2
  9748                           intcon2	equ	0xFF1
  9749                           intcon3	equ	0xFF0
  9750                           postinc0	equ	0xFEE
  9751                           wreg	equ	0xFE8
  9752                           indf1	equ	0xFE7
  9753                           postdec1	equ	0xFE5
  9754                           fsr1h	equ	0xFE2
  9755                           fsr1l	equ	0xFE1
  9756                           indf2	equ	0xFDF
  9757                           postinc2	equ	0xFDE
  9758                           postdec2	equ	0xFDD
  9759                           fsr2h	equ	0xFDA
  9760                           fsr2l	equ	0xFD9
  9761                           status	equ	0xFD8
  9762                           
  9763 ;; *************** function _IRQ_TIMER_5 *****************
  9764 ;; Defined at:
  9765 ;;		line 409 in file "interrupt.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;		None
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;		None
  9770 ;; Return value:  Size  Location     Type
  9771 ;;                  1    wreg      void 
  9772 ;; Registers used:
  9773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/2
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9779 ;;      Params:         0       0       0       0
  9780 ;;      Locals:         0       0       0       0
  9781 ;;      Temps:          0       0       0       0
  9782 ;;      Totals:         0       0       0       0
  9783 ;;Total ram usage:        0 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:   13
  9786 ;; This function calls:
  9787 ;;		_Alarme_On
  9788 ;;		_Buzzer_Etat
  9789 ;;		_Etat_Update
  9790 ;;		_TIMER5_Off
  9791 ;; This function is called by:
  9792 ;;		_IRQ_Execution
  9793 ;; This function uses a non-reentrant model
  9794 ;;
  9795                           
  9796                           	psect	text51
  9797  00190C                     __ptext51:
  9798                           	opt stack 0
  9799  00190C                     _IRQ_TIMER_5:
  9800                           	opt stack 12
  9801                           
  9802                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
  9803                           
  9804                           ;incstack = 0
  9805  00190C  90A4               	bcf	4004,0,c	;volatile
  9806                           
  9807                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
  9808  00190E  0100               	movlb	0	; () banked
  9809  001910  2BA4               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
  9810                           
  9811                           ; BSR set to: 0
  9812                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
  9813  001912  51A3               	movf	_nb_100ms_pion& (0+255),w,b
  9814  001914  19A4               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
  9815  001916  E115               	bnz	l7083
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
  9819  001918  044E               	decf	_Mouvement_Startup,w,c
  9820  00191A  E001               	bz	l7069
  9821                           
  9822                           ; BSR set to: 0
  9823                           ;interrupt.c: 418: nb_Pion += 1;
  9824  00191C  2BA0               	incf	_nb_Pion& (0+255),f,b	;volatile
  9825  00191E                     l7069:
  9826                           
  9827                           ; BSR set to: 0
  9828                           ;interrupt.c: 419: }
  9829                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
  9830  00191E  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
  9831                           
  9832                           ; BSR set to: 0
  9833                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
  9834  001920  519F               	movf	_nb_Pion_Objectif& (0+255),w,b
  9835  001922  E003               	bz	l597
  9836                           
  9837                           ; BSR set to: 0
  9838  001924  519F               	movf	_nb_Pion_Objectif& (0+255),w,b
  9839  001926  5DA0               	subwf	_nb_Pion& (0+255),w,b	;volatile
  9840  001928  E202               	bc	l7075
  9841  00192A                     l597:
  9842                           
  9843                           ; BSR set to: 0
  9844  00192A  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  9845  00192C  0012               	return	
  9846  00192E                     l7075:
  9847                           
  9848                           ; BSR set to: 0
  9849                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
  9850  00192E  0E00               	movlw	0
  9851  001930  EC8F  F011         	call	_Buzzer_Etat
  9852                           
  9853                           ;interrupt.c: 430: P4_busy = 0;
  9854  001934  0100               	movlb	0	; () banked
  9855  001936  6BAB               	clrf	_P4_busy& (0+255),b
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;interrupt.c: 431: TIMER5_Off();
  9859  001938  ECB5  F011         	call	_TIMER5_Off	;wreg free
  9860                           
  9861                           ;interrupt.c: 432: Etat_Update(0);
  9862  00193C  0E00               	movlw	0
  9863  00193E  EF66  F010         	goto	_Etat_Update
  9864  001942                     l7083:
  9865                           
  9866                           ; BSR set to: 0
  9867  001942  51A2               	movf	_nb_100ms_platine& (0+255),w,b
  9868  001944  19A4               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
  9869  001946  A4D8               	btfss	status,2,c
  9870  001948  0012               	return	
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
  9874  00194A  0597               	decf	_moteur_indice& (0+255),w,b	;volatile
  9875  00194C  E108               	bnz	l600
  9876                           
  9877                           ; BSR set to: 0
  9878  00194E  B480               	btfsc	3968,2,c	;volatile
  9879  001950  D006               	goto	l600
  9880                           
  9881                           ; BSR set to: 0
  9882  001952  044E               	decf	_Mouvement_Startup,w,c
  9883  001954  E104               	bnz	l600
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;interrupt.c: 460: Alarme_On(6);
  9887  001956  0E06               	movlw	6
  9888  001958  EC67  F011         	call	_Alarme_On
  9889                           
  9890                           ;interrupt.c: 462: } else {
  9891  00195C  D004               	goto	l7095
  9892  00195E                     l600:
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;interrupt.c: 463: P4_busy = 0;
  9896  00195E  6BAB               	clrf	_P4_busy& (0+255),b
  9897                           
  9898                           ; BSR set to: 0
  9899                           ;interrupt.c: 464: Etat_Update(6);
  9900  001960  0E06               	movlw	6
  9901  001962  EC66  F010         	call	_Etat_Update
  9902  001966                     l7095:
  9903                           
  9904                           ;interrupt.c: 467: }
  9905                           ;interrupt.c: 469: Buzzer_Etat((unsigned char) 0);
  9906  001966  0E00               	movlw	0
  9907  001968  EC8F  F011         	call	_Buzzer_Etat
  9908                           
  9909                           ;interrupt.c: 470: TIMER5_Off();
  9910  00196C  EFB5  F011         	goto	_TIMER5_Off	;wreg free
  9911  001970                     __end_of_IRQ_TIMER_5:
  9912                           	opt stack 0
  9913                           tblptru	equ	0xFF8
  9914                           tblptrh	equ	0xFF7
  9915                           tblptrl	equ	0xFF6
  9916                           tablat	equ	0xFF5
  9917                           prodh	equ	0xFF4
  9918                           prodl	equ	0xFF3
  9919                           intcon	equ	0xFF2
  9920                           intcon2	equ	0xFF1
  9921                           intcon3	equ	0xFF0
  9922                           postinc0	equ	0xFEE
  9923                           wreg	equ	0xFE8
  9924                           indf1	equ	0xFE7
  9925                           postdec1	equ	0xFE5
  9926                           fsr1h	equ	0xFE2
  9927                           fsr1l	equ	0xFE1
  9928                           indf2	equ	0xFDF
  9929                           postinc2	equ	0xFDE
  9930                           postdec2	equ	0xFDD
  9931                           fsr2h	equ	0xFDA
  9932                           fsr2l	equ	0xFD9
  9933                           status	equ	0xFD8
  9934                           
  9935 ;; *************** function _IRQ_TIMER_0 *****************
  9936 ;; Defined at:
  9937 ;;		line 361 in file "interrupt.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;		None
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;		None
  9942 ;; Return value:  Size  Location     Type
  9943 ;;                  1    wreg      void 
  9944 ;; Registers used:
  9945 ;;		wreg, status,2, status,0, cstack
  9946 ;; Tracked objects:
  9947 ;;		On entry : 0/2
  9948 ;;		On exit  : 3F/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9951 ;;      Params:         0       0       0       0
  9952 ;;      Locals:         0       0       0       0
  9953 ;;      Temps:          0       0       0       0
  9954 ;;      Totals:         0       0       0       0
  9955 ;;Total ram usage:        0 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:   11
  9958 ;; This function calls:
  9959 ;;		_Surveillance_Consommation_Moteur_1_Activer
  9960 ;;		_Surveillance_Consommation_Moteur_2_Activer
  9961 ;; This function is called by:
  9962 ;;		_IRQ_Execution
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           	psect	text52
  9967  001A36                     __ptext52:
  9968                           	opt stack 0
  9969  001A36                     _IRQ_TIMER_0:
  9970                           	opt stack 14
  9971                           
  9972                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
  9973                           
  9974                           ;incstack = 0
  9975  001A36  94F2               	bcf	intcon,2,c	;volatile
  9976                           
  9977                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
  9978  001A38  0100               	movlb	0	; () banked
  9979  001A3A  2BA6               	incf	_nb_s_fonctionnement& (0+255),f,b	;volatile
  9980                           
  9981                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
  9982  001A3C  2B9C               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
  9983                           
  9984                           ;interrupt.c: 366: delay_s_counter += 1;
  9985  001A3E  2B8B               	incf	_delay_s_counter& (0+255),f,b	;volatile
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
  9989  001A40  0E02               	movlw	2
  9990  001A42  19A6               	xorwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
  9991  001A44  E01F               	bz	l7055
  9992  001A46  0012               	return	
  9993  001A48                     l7035:
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
  9997  001A48  EC5F  F011         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
  9998                           
  9999                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10000  001A4C  0100               	movlb	0	; () banked
 10001  001A4E  5194               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10002  001A50  5D95               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10003  001A52  E203               	bc	l578
 10004  001A54                     l7039:
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;interrupt.c: 381: consigne = Consigne_Max;
 10008  001A54  C095  F096         	movff	_Consigne_Max,_consigne	;volatile
 10009                           
 10010                           ;interrupt.c: 382: } else {
 10011  001A58  0012               	return	
 10012  001A5A                     l578:
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 10016  001A5A  C094  F096         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10017  001A5E  0012               	return	
 10018  001A60                     l7041:
 10019                           
 10020                           ; BSR set to: 0
 10021                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 10022  001A60  EC57  F011         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10023                           
 10024                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10025  001A64  0100               	movlb	0	; () banked
 10026  001A66  5193               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10027  001A68  5D95               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10028  001A6A  E3F4               	bnc	l7039
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 10032  001A6C  C093  F096         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10033  001A70  0012               	return	
 10034  001A72                     l7047:
 10035                           
 10036                           ; BSR set to: 0
 10037                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 10038  001A72  EC57  F011         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10039                           
 10040                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10041  001A76  0100               	movlb	0	; () banked
 10042  001A78  5192               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10043  001A7A  5D95               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10044  001A7C  E3EB               	bnc	l7039
 10045                           
 10046                           ; BSR set to: 0
 10047                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 10048  001A7E  C092  F096         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10049  001A82  0012               	return	
 10050  001A84                     l7055:
 10051                           
 10052                           ; BSR set to: 0
 10053  001A84  5197               	movf	_moteur_indice& (0+255),w,b	;volatile
 10054                           
 10055                           ; Switch size 1, requested type "speed"
 10056                           ; Number of cases is 3, Range of values is 1 to 3
 10057                           ; switch strategies available:
 10058                           ; Name         Instructions Cycles
 10059                           ; simple_byte           10     6 (average)
 10060                           ;	Chosen strategy is simple_byte
 10061  001A86  0A01               	xorlw	1	; case 1
 10062  001A88  E0DF               	bz	l7035
 10063  001A8A  0A03               	xorlw	3	; case 2
 10064  001A8C  E0E9               	bz	l7041
 10065  001A8E  0A01               	xorlw	1	; case 3
 10066  001A90  E0F0               	bz	l7047
 10067                           
 10068                           ; BSR set to: 0
 10069  001A92  0012               	return		;funcret
 10070  001A94                     __end_of_IRQ_TIMER_0:
 10071                           	opt stack 0
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           intcon2	equ	0xFF1
 10080                           intcon3	equ	0xFF0
 10081                           postinc0	equ	0xFEE
 10082                           wreg	equ	0xFE8
 10083                           indf1	equ	0xFE7
 10084                           postdec1	equ	0xFE5
 10085                           fsr1h	equ	0xFE2
 10086                           fsr1l	equ	0xFE1
 10087                           indf2	equ	0xFDF
 10088                           postinc2	equ	0xFDE
 10089                           postdec2	equ	0xFDD
 10090                           fsr2h	equ	0xFDA
 10091                           fsr2l	equ	0xFD9
 10092                           status	equ	0xFD8
 10093                           
 10094 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 10095 ;; Defined at:
 10096 ;;		line 864 in file "interrupt.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;		None
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;		None
 10101 ;; Return value:  Size  Location     Type
 10102 ;;                  1    wreg      void 
 10103 ;; Registers used:
 10104 ;;		wreg, status,2, status,0
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10110 ;;      Params:         0       0       0       0
 10111 ;;      Locals:         0       0       0       0
 10112 ;;      Temps:          0       0       0       0
 10113 ;;      Totals:         0       0       0       0
 10114 ;;Total ram usage:        0 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:   10
 10117 ;; This function calls:
 10118 ;;		Nothing
 10119 ;; This function is called by:
 10120 ;;		_IRQ_TIMER_0
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           	psect	text53
 10125  0022AE                     __ptext53:
 10126                           	opt stack 0
 10127  0022AE                     _Surveillance_Consommation_Moteur_2_Activer:
 10128                           	opt stack 14
 10129                           
 10130                           ;interrupt.c: 865: if (Surveillance_Consommation_Moteur_2 != 1) {
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;incstack = 0
 10134  0022AE  0448               	decf	_Surveillance_Consommation_Moteur_2,w,c
 10135  0022B0  B4D8               	btfsc	status,2,c
 10136  0022B2  0012               	return	
 10137                           
 10138                           ;interrupt.c: 866: Surveillance_Consommation_Moteur_2 = 1;
 10139  0022B4  0E01               	movlw	1
 10140  0022B6  6E48               	movwf	_Surveillance_Consommation_Moteur_2,c
 10141                           
 10142                           ;interrupt.c: 867: INTCON3bits.INT2IF = 0;
 10143  0022B8  92F0               	bcf	intcon3,1,c	;volatile
 10144                           
 10145                           ;interrupt.c: 868: INTCON3bits.INT2IE = 1;
 10146  0022BA  88F0               	bsf	intcon3,4,c	;volatile
 10147  0022BC  0C01               	retlw	1	;funcret
 10148  0022BE                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 10149                           	opt stack 0
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           intcon2	equ	0xFF1
 10158                           intcon3	equ	0xFF0
 10159                           postinc0	equ	0xFEE
 10160                           wreg	equ	0xFE8
 10161                           indf1	equ	0xFE7
 10162                           postdec1	equ	0xFE5
 10163                           fsr1h	equ	0xFE2
 10164                           fsr1l	equ	0xFE1
 10165                           indf2	equ	0xFDF
 10166                           postinc2	equ	0xFDE
 10167                           postdec2	equ	0xFDD
 10168                           fsr2h	equ	0xFDA
 10169                           fsr2l	equ	0xFD9
 10170                           status	equ	0xFD8
 10171                           
 10172 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 10173 ;; Defined at:
 10174 ;;		line 848 in file "interrupt.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;		None
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  1    wreg      void 
 10181 ;; Registers used:
 10182 ;;		wreg, status,2, status,0
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 0/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10188 ;;      Params:         0       0       0       0
 10189 ;;      Locals:         0       0       0       0
 10190 ;;      Temps:          0       0       0       0
 10191 ;;      Totals:         0       0       0       0
 10192 ;;Total ram usage:        0 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:   10
 10195 ;; This function calls:
 10196 ;;		Nothing
 10197 ;; This function is called by:
 10198 ;;		_IRQ_TIMER_0
 10199 ;; This function uses a non-reentrant model
 10200 ;;
 10201                           
 10202                           	psect	text54
 10203  0022BE                     __ptext54:
 10204                           	opt stack 0
 10205  0022BE                     _Surveillance_Consommation_Moteur_1_Activer:
 10206                           	opt stack 14
 10207                           
 10208                           ;interrupt.c: 849: if (Surveillance_Consommation_Moteur_1 != 1) {
 10209                           
 10210                           ;incstack = 0
 10211  0022BE  0449               	decf	_Surveillance_Consommation_Moteur_1,w,c
 10212  0022C0  B4D8               	btfsc	status,2,c
 10213  0022C2  0012               	return	
 10214                           
 10215                           ;interrupt.c: 850: Surveillance_Consommation_Moteur_1 = 1;
 10216  0022C4  0E01               	movlw	1
 10217  0022C6  6E49               	movwf	_Surveillance_Consommation_Moteur_1,c
 10218                           
 10219                           ;interrupt.c: 851: INTCON3bits.INT1IF = 0;
 10220  0022C8  90F0               	bcf	intcon3,0,c	;volatile
 10221                           
 10222                           ;interrupt.c: 852: INTCON3bits.INT1IE = 1;
 10223  0022CA  86F0               	bsf	intcon3,3,c	;volatile
 10224  0022CC  0C01               	retlw	1	;funcret
 10225  0022CE                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 10226                           	opt stack 0
 10227                           tblptru	equ	0xFF8
 10228                           tblptrh	equ	0xFF7
 10229                           tblptrl	equ	0xFF6
 10230                           tablat	equ	0xFF5
 10231                           prodh	equ	0xFF4
 10232                           prodl	equ	0xFF3
 10233                           intcon	equ	0xFF2
 10234                           intcon2	equ	0xFF1
 10235                           intcon3	equ	0xFF0
 10236                           postinc0	equ	0xFEE
 10237                           wreg	equ	0xFE8
 10238                           indf1	equ	0xFE7
 10239                           postdec1	equ	0xFE5
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           fsr2h	equ	0xFDA
 10246                           fsr2l	equ	0xFD9
 10247                           status	equ	0xFD8
 10248                           
 10249 ;; *************** function _IRQ_TIMER2 *****************
 10250 ;; Defined at:
 10251 ;;		line 879 in file "interrupt.c"
 10252 ;; Parameters:    Size  Location     Type
 10253 ;;		None
 10254 ;; Auto vars:     Size  Location     Type
 10255 ;;		None
 10256 ;; Return value:  Size  Location     Type
 10257 ;;                  1    wreg      void 
 10258 ;; Registers used:
 10259 ;;		None
 10260 ;; Tracked objects:
 10261 ;;		On entry : 0/2
 10262 ;;		On exit  : 0/0
 10263 ;;		Unchanged: 0/0
 10264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10265 ;;      Params:         0       0       0       0
 10266 ;;      Locals:         0       0       0       0
 10267 ;;      Temps:          0       0       0       0
 10268 ;;      Totals:         0       0       0       0
 10269 ;;Total ram usage:        0 bytes
 10270 ;; Hardware stack levels used:    1
 10271 ;; Hardware stack levels required when called:   10
 10272 ;; This function calls:
 10273 ;;		Nothing
 10274 ;; This function is called by:
 10275 ;;		_IRQ_Execution
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           	psect	text55
 10280  0023A4                     __ptext55:
 10281                           	opt stack 0
 10282  0023A4                     _IRQ_TIMER2:
 10283                           	opt stack 15
 10284                           
 10285                           ;interrupt.c: 880: PIR1bits.TMR2IF = 0;
 10286                           
 10287                           ;incstack = 0
 10288  0023A4  929E               	bcf	3998,1,c	;volatile
 10289                           
 10290                           ;interrupt.c: 883: GODONE = 1;
 10291  0023A6  82C2               	bsf	4034,1,c	;volatile
 10292  0023A8  0012               	return		;funcret
 10293  0023AA                     __end_of_IRQ_TIMER2:
 10294                           	opt stack 0
 10295                           tblptru	equ	0xFF8
 10296                           tblptrh	equ	0xFF7
 10297                           tblptrl	equ	0xFF6
 10298                           tablat	equ	0xFF5
 10299                           prodh	equ	0xFF4
 10300                           prodl	equ	0xFF3
 10301                           intcon	equ	0xFF2
 10302                           intcon2	equ	0xFF1
 10303                           intcon3	equ	0xFF0
 10304                           postinc0	equ	0xFEE
 10305                           wreg	equ	0xFE8
 10306                           indf1	equ	0xFE7
 10307                           postdec1	equ	0xFE5
 10308                           fsr1h	equ	0xFE2
 10309                           fsr1l	equ	0xFE1
 10310                           indf2	equ	0xFDF
 10311                           postinc2	equ	0xFDE
 10312                           postdec2	equ	0xFDD
 10313                           fsr2h	equ	0xFDA
 10314                           fsr2l	equ	0xFD9
 10315                           status	equ	0xFD8
 10316                           
 10317 ;; *************** function _IRQ_PWM *****************
 10318 ;; Defined at:
 10319 ;;		line 477 in file "interrupt.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;		None
 10322 ;; Auto vars:     Size  Location     Type
 10323 ;;		None
 10324 ;; Return value:  Size  Location     Type
 10325 ;;                  1    wreg      void 
 10326 ;; Registers used:
 10327 ;;		None
 10328 ;; Tracked objects:
 10329 ;;		On entry : 0/2
 10330 ;;		On exit  : 0/0
 10331 ;;		Unchanged: 0/0
 10332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10333 ;;      Params:         0       0       0       0
 10334 ;;      Locals:         0       0       0       0
 10335 ;;      Temps:          0       0       0       0
 10336 ;;      Totals:         0       0       0       0
 10337 ;;Total ram usage:        0 bytes
 10338 ;; Hardware stack levels used:    1
 10339 ;; Hardware stack levels required when called:   10
 10340 ;; This function calls:
 10341 ;;		Nothing
 10342 ;; This function is called by:
 10343 ;;		_IRQ_Execution
 10344 ;; This function uses a non-reentrant model
 10345 ;;
 10346                           
 10347                           	psect	text56
 10348  0023CA                     __ptext56:
 10349                           	opt stack 0
 10350  0023CA                     _IRQ_PWM:
 10351                           	opt stack 15
 10352                           
 10353                           ;interrupt.c: 479: PTIF = 0;
 10354                           
 10355                           ;incstack = 0
 10356  0023CA  98A4               	bcf	4004,4,c	;volatile
 10357  0023CC  0012               	return		;funcret
 10358  0023CE                     __end_of_IRQ_PWM:
 10359                           	opt stack 0
 10360                           tblptru	equ	0xFF8
 10361                           tblptrh	equ	0xFF7
 10362                           tblptrl	equ	0xFF6
 10363                           tablat	equ	0xFF5
 10364                           prodh	equ	0xFF4
 10365                           prodl	equ	0xFF3
 10366                           intcon	equ	0xFF2
 10367                           intcon2	equ	0xFF1
 10368                           intcon3	equ	0xFF0
 10369                           postinc0	equ	0xFEE
 10370                           wreg	equ	0xFE8
 10371                           indf1	equ	0xFE7
 10372                           postdec1	equ	0xFE5
 10373                           fsr1h	equ	0xFE2
 10374                           fsr1l	equ	0xFE1
 10375                           indf2	equ	0xFDF
 10376                           postinc2	equ	0xFDE
 10377                           postdec2	equ	0xFDD
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 10383 ;; Defined at:
 10384 ;;		line 287 in file "interrupt.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;		None
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;		None
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  1    wreg      void 
 10391 ;; Registers used:
 10392 ;;		wreg, status,2, status,0, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/2
 10395 ;;		On exit  : 3F/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10398 ;;      Params:         0       0       0       0
 10399 ;;      Locals:         0       0       0       0
 10400 ;;      Temps:          0       0       0       0
 10401 ;;      Totals:         0       0       0       0
 10402 ;;Total ram usage:        0 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:   11
 10405 ;; This function calls:
 10406 ;;		_Buzzer_Etat
 10407 ;;		_TIMER5_Off
 10408 ;; This function is called by:
 10409 ;;		_IRQ_Execution
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           	psect	text57
 10414  002178                     __ptext57:
 10415                           	opt stack 0
 10416  002178                     _IRQ_PION_Metal_Disparait:
 10417                           	opt stack 14
 10418                           
 10419                           ;interrupt.c: 289: Buzzer_Etat((unsigned char) 0);
 10420                           
 10421                           ;incstack = 0
 10422  002178  0E00               	movlw	0
 10423  00217A  EC8F  F011         	call	_Buzzer_Etat
 10424                           
 10425                           ;interrupt.c: 290: PIE3bits.IC2QEIE = 0;
 10426  00217E  94A3               	bcf	4003,2,c	;volatile
 10427                           
 10428                           ;interrupt.c: 291: PIR3bits.IC2QEIF = 0;
 10429  002180  94A4               	bcf	4004,2,c	;volatile
 10430                           
 10431                           ;interrupt.c: 293: TIMER5_Off();
 10432  002182  ECB5  F011         	call	_TIMER5_Off	;wreg free
 10433                           
 10434                           ;interrupt.c: 295: nb_100ms_Timer_5 = 0;
 10435  002186  0100               	movlb	0	; () banked
 10436  002188  6BA4               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;interrupt.c: 299: nb_100ms_platine = nb_100ms_platine_backup;
 10440  00218A  C0EC  F0A2         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;interrupt.c: 301: Mouvement_Startup = 0;
 10444  00218E  6A4E               	clrf	_Mouvement_Startup,c
 10445                           
 10446                           ; BSR set to: 0
 10447  002190  0012               	return		;funcret
 10448  002192                     __end_of_IRQ_PION_Metal_Disparait:
 10449                           	opt stack 0
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           intcon2	equ	0xFF1
 10458                           intcon3	equ	0xFF0
 10459                           postinc0	equ	0xFEE
 10460                           wreg	equ	0xFE8
 10461                           indf1	equ	0xFE7
 10462                           postdec1	equ	0xFE5
 10463                           fsr1h	equ	0xFE2
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           fsr2h	equ	0xFDA
 10469                           fsr2l	equ	0xFD9
 10470                           status	equ	0xFD8
 10471                           
 10472 ;; *************** function _TIMER5_Off *****************
 10473 ;; Defined at:
 10474 ;;		line 263 in file "timer.c"
 10475 ;; Parameters:    Size  Location     Type
 10476 ;;		None
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;		None
 10479 ;; Return value:  Size  Location     Type
 10480 ;;                  1    wreg      void 
 10481 ;; Registers used:
 10482 ;;		None
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10488 ;;      Params:         0       0       0       0
 10489 ;;      Locals:         0       0       0       0
 10490 ;;      Temps:          0       0       0       0
 10491 ;;      Totals:         0       0       0       0
 10492 ;;Total ram usage:        0 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; Hardware stack levels required when called:   10
 10495 ;; This function calls:
 10496 ;;		Nothing
 10497 ;; This function is called by:
 10498 ;;		_IRQ_PION_Metal_Disparait
 10499 ;;		_IRQ_TIMER_5
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           	psect	text58
 10504  00236A                     __ptext58:
 10505                           	opt stack 0
 10506  00236A                     _TIMER5_Off:
 10507                           	opt stack 14
 10508                           
 10509                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 10510                           
 10511                           ; BSR set to: 0
 10512                           ;incstack = 0
 10513  00236A  90B7               	bcf	4023,0,c	;volatile
 10514                           
 10515                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 10516  00236C  90A4               	bcf	4004,0,c	;volatile
 10517                           
 10518                           ;timer.c: 268: TMR5L = 0;
 10519  00236E  6A87               	clrf	3975,c	;volatile
 10520                           
 10521                           ;timer.c: 269: TMR5H = 0;
 10522  002370  6A88               	clrf	3976,c	;volatile
 10523  002372  0012               	return		;funcret
 10524  002374                     __end_of_TIMER5_Off:
 10525                           	opt stack 0
 10526                           tblptru	equ	0xFF8
 10527                           tblptrh	equ	0xFF7
 10528                           tblptrl	equ	0xFF6
 10529                           tablat	equ	0xFF5
 10530                           prodh	equ	0xFF4
 10531                           prodl	equ	0xFF3
 10532                           intcon	equ	0xFF2
 10533                           intcon2	equ	0xFF1
 10534                           intcon3	equ	0xFF0
 10535                           postinc0	equ	0xFEE
 10536                           wreg	equ	0xFE8
 10537                           indf1	equ	0xFE7
 10538                           postdec1	equ	0xFE5
 10539                           fsr1h	equ	0xFE2
 10540                           fsr1l	equ	0xFE1
 10541                           indf2	equ	0xFDF
 10542                           postinc2	equ	0xFDE
 10543                           postdec2	equ	0xFDD
 10544                           fsr2h	equ	0xFDA
 10545                           fsr2l	equ	0xFD9
 10546                           status	equ	0xFD8
 10547                           
 10548 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 10549 ;; Defined at:
 10550 ;;		line 268 in file "interrupt.c"
 10551 ;; Parameters:    Size  Location     Type
 10552 ;;		None
 10553 ;; Auto vars:     Size  Location     Type
 10554 ;;		None
 10555 ;; Return value:  Size  Location     Type
 10556 ;;                  1    wreg      void 
 10557 ;; Registers used:
 10558 ;;		wreg, status,2, status,0, cstack
 10559 ;; Tracked objects:
 10560 ;;		On entry : 0/0
 10561 ;;		On exit  : 0/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10564 ;;      Params:         0       0       0       0
 10565 ;;      Locals:         0       0       0       0
 10566 ;;      Temps:          0       0       0       0
 10567 ;;      Totals:         0       0       0       0
 10568 ;;Total ram usage:        0 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; Hardware stack levels required when called:   11
 10571 ;; This function calls:
 10572 ;;		_Buzzer_Etat
 10573 ;;		_TIMER5_On
 10574 ;; This function is called by:
 10575 ;;		_IRQ_Execution
 10576 ;;		_Detection_Pion_On
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580                           	psect	text59
 10581  0020AE                     __ptext59:
 10582                           	opt stack 0
 10583  0020AE                     _IRQ_PION_Metal_Apparait:
 10584                           	opt stack 14
 10585                           
 10586                           ;interrupt.c: 270: Buzzer_Etat((unsigned char) 1);
 10587                           
 10588                           ;incstack = 0
 10589  0020AE  0E01               	movlw	1
 10590  0020B0  EC8F  F011         	call	_Buzzer_Etat
 10591                           
 10592                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 10593  0020B4  92A4               	bcf	4004,1,c	;volatile
 10594                           
 10595                           ;interrupt.c: 273: PIR3bits.IC2QEIF = 0;
 10596  0020B6  94A4               	bcf	4004,2,c	;volatile
 10597                           
 10598                           ;interrupt.c: 274: if (PIE3bits.IC2QEIE == 1) {
 10599  0020B8  A4A3               	btfss	4003,2,c	;volatile
 10600  0020BA  D005               	goto	l567
 10601                           
 10602                           ;interrupt.c: 275: Alarme = 10;
 10603  0020BC  0E0A               	movlw	10
 10604  0020BE  0100               	movlb	0	; () banked
 10605  0020C0  6FA8               	movwf	_Alarme& (0+255),b	;volatile
 10606                           
 10607                           ;interrupt.c: 276: } else {
 10608  0020C2  EFE7  F011         	goto	_TIMER5_On
 10609  0020C6                     l567:
 10610                           
 10611                           ;interrupt.c: 278: PIE3bits.IC2QEIE = 1;
 10612  0020C6  84A3               	bsf	4003,2,c	;volatile
 10613                           
 10614                           ;interrupt.c: 279: }
 10615                           ;interrupt.c: 281: TIMER5_On();
 10616  0020C8  EFE7  F011         	goto	_TIMER5_On	;wreg free
 10617  0020CC                     __end_of_IRQ_PION_Metal_Apparait:
 10618                           	opt stack 0
 10619                           tblptru	equ	0xFF8
 10620                           tblptrh	equ	0xFF7
 10621                           tblptrl	equ	0xFF6
 10622                           tablat	equ	0xFF5
 10623                           prodh	equ	0xFF4
 10624                           prodl	equ	0xFF3
 10625                           intcon	equ	0xFF2
 10626                           intcon2	equ	0xFF1
 10627                           intcon3	equ	0xFF0
 10628                           postinc0	equ	0xFEE
 10629                           wreg	equ	0xFE8
 10630                           indf1	equ	0xFE7
 10631                           postdec1	equ	0xFE5
 10632                           fsr1h	equ	0xFE2
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           fsr2h	equ	0xFDA
 10638                           fsr2l	equ	0xFD9
 10639                           status	equ	0xFD8
 10640                           
 10641 ;; *************** function _TIMER5_On *****************
 10642 ;; Defined at:
 10643 ;;		line 253 in file "timer.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;		None
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;		None
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      void 
 10650 ;; Registers used:
 10651 ;;		None
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10657 ;;      Params:         0       0       0       0
 10658 ;;      Locals:         0       0       0       0
 10659 ;;      Temps:          0       0       0       0
 10660 ;;      Totals:         0       0       0       0
 10661 ;;Total ram usage:        0 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:   10
 10664 ;; This function calls:
 10665 ;;		Nothing
 10666 ;; This function is called by:
 10667 ;;		_IRQ_PION_Metal_Apparait
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           	psect	text60
 10672  0023CE                     __ptext60:
 10673                           	opt stack 0
 10674  0023CE                     _TIMER5_On:
 10675                           	opt stack 14
 10676                           
 10677                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 10678                           
 10679                           ;incstack = 0
 10680  0023CE  80B7               	bsf	4023,0,c	;volatile
 10681  0023D0  0012               	return		;funcret
 10682  0023D2                     __end_of_TIMER5_On:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           intcon2	equ	0xFF1
 10692                           intcon3	equ	0xFF0
 10693                           postinc0	equ	0xFEE
 10694                           wreg	equ	0xFE8
 10695                           indf1	equ	0xFE7
 10696                           postdec1	equ	0xFE5
 10697                           fsr1h	equ	0xFE2
 10698                           fsr1l	equ	0xFE1
 10699                           indf2	equ	0xFDF
 10700                           postinc2	equ	0xFDE
 10701                           postdec2	equ	0xFDD
 10702                           fsr2h	equ	0xFDA
 10703                           fsr2l	equ	0xFD9
 10704                           status	equ	0xFD8
 10705                           
 10706 ;; *************** function _Buzzer_Etat *****************
 10707 ;; Defined at:
 10708 ;;		line 29 in file "interrupt.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;  Activation      1    wreg     unsigned char 
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;  Activation      1   14[COMRAM] unsigned char 
 10713 ;; Return value:  Size  Location     Type
 10714 ;;                  1    wreg      void 
 10715 ;; Registers used:
 10716 ;;		wreg, status,2, status,0
 10717 ;; Tracked objects:
 10718 ;;		On entry : 0/2
 10719 ;;		On exit  : 0/0
 10720 ;;		Unchanged: 0/0
 10721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10722 ;;      Params:         0       0       0       0
 10723 ;;      Locals:         1       0       0       0
 10724 ;;      Temps:          0       0       0       0
 10725 ;;      Totals:         1       0       0       0
 10726 ;;Total ram usage:        1 bytes
 10727 ;; Hardware stack levels used:    1
 10728 ;; Hardware stack levels required when called:   10
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		_Cycle
 10733 ;;		_IRQ_PION_Metal_Apparait
 10734 ;;		_IRQ_PION_Metal_Disparait
 10735 ;;		_IRQ_TIMER_5
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text61
 10740  00231E                     __ptext61:
 10741                           	opt stack 0
 10742  00231E                     _Buzzer_Etat:
 10743                           	opt stack 14
 10744                           
 10745                           ;incstack = 0
 10746                           ;Buzzer_Etat@Activation stored from wreg
 10747  00231E  6E0F               	movwf	Buzzer_Etat@Activation,c
 10748                           
 10749                           ;interrupt.c: 30: if (Activation == 1) {
 10750  002320  040F               	decf	Buzzer_Etat@Activation,w,c
 10751  002322  E102               	bnz	l521
 10752                           
 10753                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 10754  002324  8C89               	bsf	3977,6,c	;volatile
 10755                           
 10756                           ;interrupt.c: 33: } else {
 10757  002326  0012               	return	
 10758  002328                     l521:
 10759                           
 10760                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 10761  002328  9C89               	bcf	3977,6,c	;volatile
 10762  00232A  0012               	return		;funcret
 10763  00232C                     __end_of_Buzzer_Etat:
 10764                           	opt stack 0
 10765                           tblptru	equ	0xFF8
 10766                           tblptrh	equ	0xFF7
 10767                           tblptrl	equ	0xFF6
 10768                           tablat	equ	0xFF5
 10769                           prodh	equ	0xFF4
 10770                           prodl	equ	0xFF3
 10771                           intcon	equ	0xFF2
 10772                           intcon2	equ	0xFF1
 10773                           intcon3	equ	0xFF0
 10774                           postinc0	equ	0xFEE
 10775                           wreg	equ	0xFE8
 10776                           indf1	equ	0xFE7
 10777                           postdec1	equ	0xFE5
 10778                           fsr1h	equ	0xFE2
 10779                           fsr1l	equ	0xFE1
 10780                           indf2	equ	0xFDF
 10781                           postinc2	equ	0xFDE
 10782                           postdec2	equ	0xFDD
 10783                           fsr2h	equ	0xFDA
 10784                           fsr2l	equ	0xFD9
 10785                           status	equ	0xFD8
 10786                           
 10787 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 10788 ;; Defined at:
 10789 ;;		line 905 in file "interrupt.c"
 10790 ;; Parameters:    Size  Location     Type
 10791 ;;		None
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;		None
 10794 ;; Return value:  Size  Location     Type
 10795 ;;                  1    wreg      void 
 10796 ;; Registers used:
 10797 ;;		wreg, status,2, status,0
 10798 ;; Tracked objects:
 10799 ;;		On entry : 0/2
 10800 ;;		On exit  : 0/0
 10801 ;;		Unchanged: 0/0
 10802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10803 ;;      Params:         0       0       0       0
 10804 ;;      Locals:         0       0       0       0
 10805 ;;      Temps:          0       0       0       0
 10806 ;;      Totals:         0       0       0       0
 10807 ;;Total ram usage:        0 bytes
 10808 ;; Hardware stack levels used:    1
 10809 ;; Hardware stack levels required when called:   10
 10810 ;; This function calls:
 10811 ;;		Nothing
 10812 ;; This function is called by:
 10813 ;;		_IRQ_Execution
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           	psect	text62
 10818  0021D8                     __ptext62:
 10819                           	opt stack 0
 10820  0021D8                     _IRQ_I_MOTEUR_2:
 10821                           	opt stack 15
 10822                           
 10823                           ;interrupt.c: 910: LATCbits.LATC1 = 0;
 10824                           
 10825                           ;incstack = 0
 10826  0021D8  928B               	bcf	3979,1,c	;volatile
 10827                           
 10828                           ;interrupt.c: 912: while(TMR2 > 0) __nop();
 10829  0021DA  D001               	goto	l6995
 10830  0021DC                     l687:
 10831  0021DC  F000               	nop	
 10832  0021DE                     l6995:
 10833  0021DE  50CC               	movf	4044,w,c	;volatile
 10834  0021E0  E1FD               	bnz	l687
 10835                           
 10836                           ;interrupt.c: 914: LATCbits.LATC1 = 1;
 10837  0021E2  828B               	bsf	3979,1,c	;volatile
 10838                           
 10839                           ;interrupt.c: 928: LATCbits.LATC2^=1;
 10840  0021E4  748B               	btg	3979,2,c	;volatile
 10841                           
 10842                           ;interrupt.c: 929: INTCON3bits.INT2IF = 0;
 10843  0021E6  92F0               	bcf	intcon3,1,c	;volatile
 10844                           
 10845                           ;interrupt.c: 933: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 10846  0021E8  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 10847  0021EA  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 10848  0021EC  0012               	return		;funcret
 10849  0021EE                     __end_of_IRQ_I_MOTEUR_2:
 10850                           	opt stack 0
 10851                           tblptru	equ	0xFF8
 10852                           tblptrh	equ	0xFF7
 10853                           tblptrl	equ	0xFF6
 10854                           tablat	equ	0xFF5
 10855                           prodh	equ	0xFF4
 10856                           prodl	equ	0xFF3
 10857                           intcon	equ	0xFF2
 10858                           intcon2	equ	0xFF1
 10859                           intcon3	equ	0xFF0
 10860                           postinc0	equ	0xFEE
 10861                           wreg	equ	0xFE8
 10862                           indf1	equ	0xFE7
 10863                           postdec1	equ	0xFE5
 10864                           fsr1h	equ	0xFE2
 10865                           fsr1l	equ	0xFE1
 10866                           indf2	equ	0xFDF
 10867                           postinc2	equ	0xFDE
 10868                           postdec2	equ	0xFDD
 10869                           fsr2h	equ	0xFDA
 10870                           fsr2l	equ	0xFD9
 10871                           status	equ	0xFD8
 10872                           
 10873 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 10874 ;; Defined at:
 10875 ;;		line 891 in file "interrupt.c"
 10876 ;; Parameters:    Size  Location     Type
 10877 ;;		None
 10878 ;; Auto vars:     Size  Location     Type
 10879 ;;		None
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  1    wreg      void 
 10882 ;; Registers used:
 10883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/2
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10889 ;;      Params:         0       0       0       0
 10890 ;;      Locals:         0       0       0       0
 10891 ;;      Temps:          0       0       0       0
 10892 ;;      Totals:         0       0       0       0
 10893 ;;Total ram usage:        0 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:   13
 10896 ;; This function calls:
 10897 ;;		_Alarme_On
 10898 ;; This function is called by:
 10899 ;;		_IRQ_Execution
 10900 ;; This function uses a non-reentrant model
 10901 ;;
 10902                           
 10903                           	psect	text63
 10904  002192                     __ptext63:
 10905                           	opt stack 0
 10906  002192                     _IRQ_I_MOTEUR_1:
 10907                           	opt stack 12
 10908                           
 10909                           ;interrupt.c: 892: INTCON3bits.INT1IF = 0;
 10910                           
 10911                           ;incstack = 0
 10912  002192  90F0               	bcf	intcon3,0,c	;volatile
 10913                           
 10914                           ;interrupt.c: 893: Compteur_IRQ_I_Moteur_1 += 1;
 10915  002194  0100               	movlb	0	; () banked
 10916  002196  2B89               	incf	_Compteur_IRQ_I_Moteur_1& (0+255),f,b	;volatile
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;interrupt.c: 894: if (Compteur_IRQ_I_Moteur_1 == 0) {
 10920  002198  5189               	movf	_Compteur_IRQ_I_Moteur_1& (0+255),w,b	;volatile
 10921  00219A  A4D8               	btfss	status,2,c
 10922  00219C  0012               	return	
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;interrupt.c: 895: LATCbits.LATC2 = 1;
 10926  00219E  848B               	bsf	3979,2,c	;volatile
 10927                           
 10928                           ;interrupt.c: 897: LATCbits.LATC0 = 0;
 10929  0021A0  908B               	bcf	3979,0,c	;volatile
 10930                           
 10931                           ;interrupt.c: 898: LATCbits.LATC1 = 0;
 10932  0021A2  928B               	bcf	3979,1,c	;volatile
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;interrupt.c: 900: Alarme_On(1);
 10936  0021A4  0E01               	movlw	1
 10937  0021A6  EF67  F011         	goto	_Alarme_On
 10938  0021AA                     __end_of_IRQ_I_MOTEUR_1:
 10939                           	opt stack 0
 10940                           tblptru	equ	0xFF8
 10941                           tblptrh	equ	0xFF7
 10942                           tblptrl	equ	0xFF6
 10943                           tablat	equ	0xFF5
 10944                           prodh	equ	0xFF4
 10945                           prodl	equ	0xFF3
 10946                           intcon	equ	0xFF2
 10947                           intcon2	equ	0xFF1
 10948                           intcon3	equ	0xFF0
 10949                           postinc0	equ	0xFEE
 10950                           wreg	equ	0xFE8
 10951                           indf1	equ	0xFE7
 10952                           postdec1	equ	0xFE5
 10953                           fsr1h	equ	0xFE2
 10954                           fsr1l	equ	0xFE1
 10955                           indf2	equ	0xFDF
 10956                           postinc2	equ	0xFDE
 10957                           postdec2	equ	0xFDD
 10958                           fsr2h	equ	0xFDA
 10959                           fsr2l	equ	0xFD9
 10960                           status	equ	0xFD8
 10961                           
 10962 ;; *************** function _IRQ_CAPOT *****************
 10963 ;; Defined at:
 10964 ;;		line 886 in file "interrupt.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;		None
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;		None
 10969 ;; Return value:  Size  Location     Type
 10970 ;;                  1    wreg      void 
 10971 ;; Registers used:
 10972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10973 ;; Tracked objects:
 10974 ;;		On entry : 0/2
 10975 ;;		On exit  : 0/0
 10976 ;;		Unchanged: 0/0
 10977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10978 ;;      Params:         0       0       0       0
 10979 ;;      Locals:         0       0       0       0
 10980 ;;      Temps:          0       0       0       0
 10981 ;;      Totals:         0       0       0       0
 10982 ;;Total ram usage:        0 bytes
 10983 ;; Hardware stack levels used:    1
 10984 ;; Hardware stack levels required when called:   13
 10985 ;; This function calls:
 10986 ;;		_Alarme_On
 10987 ;; This function is called by:
 10988 ;;		_IRQ_Execution
 10989 ;; This function uses a non-reentrant model
 10990 ;;
 10991                           
 10992                           	psect	text64
 10993  002386                     __ptext64:
 10994                           	opt stack 0
 10995  002386                     _IRQ_CAPOT:
 10996                           	opt stack 12
 10997                           
 10998                           ;interrupt.c: 887: INT0IF = 0;
 10999                           
 11000                           ;incstack = 0
 11001  002386  92F2               	bcf	intcon,1,c	;volatile
 11002                           
 11003                           ;interrupt.c: 888: Alarme_On(4);
 11004  002388  0E04               	movlw	4
 11005  00238A  EF67  F011         	goto	_Alarme_On
 11006  00238E                     __end_of_IRQ_CAPOT:
 11007                           	opt stack 0
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon2	equ	0xFF1
 11016                           intcon3	equ	0xFF0
 11017                           postinc0	equ	0xFEE
 11018                           wreg	equ	0xFE8
 11019                           indf1	equ	0xFE7
 11020                           postdec1	equ	0xFE5
 11021                           fsr1h	equ	0xFE2
 11022                           fsr1l	equ	0xFE1
 11023                           indf2	equ	0xFDF
 11024                           postinc2	equ	0xFDE
 11025                           postdec2	equ	0xFDD
 11026                           fsr2h	equ	0xFDA
 11027                           fsr2l	equ	0xFD9
 11028                           status	equ	0xFD8
 11029                           
 11030 ;; *************** function _Alarme_On *****************
 11031 ;; Defined at:
 11032 ;;		line 18 in file "alarme.c"
 11033 ;; Parameters:    Size  Location     Type
 11034 ;;  alarme_new_v    1    wreg     unsigned char 
 11035 ;; Auto vars:     Size  Location     Type
 11036 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  1    wreg      void 
 11039 ;; Registers used:
 11040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11046 ;;      Params:         0       0       0       0
 11047 ;;      Locals:         1       0       0       0
 11048 ;;      Temps:          0       0       0       0
 11049 ;;      Totals:         1       0       0       0
 11050 ;;Total ram usage:        1 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:   12
 11053 ;; This function calls:
 11054 ;;		_Coupe_Moteur
 11055 ;;		_Etat_Update
 11056 ;; This function is called by:
 11057 ;;		_IRQ_TIMER_5
 11058 ;;		_IRQ_CAPOT
 11059 ;;		_IRQ_I_MOTEUR_1
 11060 ;;		_Check_List_Moteur_1
 11061 ;;		_EUSART1_RX_T3_LOCAL
 11062 ;; This function uses a non-reentrant model
 11063 ;;
 11064                           
 11065                           	psect	text65
 11066  0022CE                     __ptext65:
 11067                           	opt stack 0
 11068  0022CE                     _Alarme_On:
 11069                           	opt stack 12
 11070                           
 11071                           ;incstack = 0
 11072                           ;Alarme_On@alarme_new_value stored from wreg
 11073  0022CE  6E10               	movwf	Alarme_On@alarme_new_value,c
 11074                           
 11075                           ;alarme.c: 22: Etat_Update(1);
 11076  0022D0  0E01               	movlw	1
 11077  0022D2  EC66  F010         	call	_Etat_Update
 11078                           
 11079                           ;alarme.c: 23: Alarme = alarme_new_value;
 11080  0022D6  C010  F0A8         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 11081                           
 11082                           ;alarme.c: 24: Coupe_Moteur();
 11083  0022DA  EFF7  F010         	goto	_Coupe_Moteur	;wreg free
 11084  0022DE                     __end_of_Alarme_On:
 11085                           	opt stack 0
 11086                           tblptru	equ	0xFF8
 11087                           tblptrh	equ	0xFF7
 11088                           tblptrl	equ	0xFF6
 11089                           tablat	equ	0xFF5
 11090                           prodh	equ	0xFF4
 11091                           prodl	equ	0xFF3
 11092                           intcon	equ	0xFF2
 11093                           intcon2	equ	0xFF1
 11094                           intcon3	equ	0xFF0
 11095                           postinc0	equ	0xFEE
 11096                           wreg	equ	0xFE8
 11097                           indf1	equ	0xFE7
 11098                           postdec1	equ	0xFE5
 11099                           fsr1h	equ	0xFE2
 11100                           fsr1l	equ	0xFE1
 11101                           indf2	equ	0xFDF
 11102                           postinc2	equ	0xFDE
 11103                           postdec2	equ	0xFDD
 11104                           fsr2h	equ	0xFDA
 11105                           fsr2l	equ	0xFD9
 11106                           status	equ	0xFD8
 11107                           
 11108 ;; *************** function _Etat_Update *****************
 11109 ;; Defined at:
 11110 ;;		line 67 in file "action.c"
 11111 ;; Parameters:    Size  Location     Type
 11112 ;;  etat_new_val    1    wreg     unsigned char 
 11113 ;; Auto vars:     Size  Location     Type
 11114 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 11115 ;; Return value:  Size  Location     Type
 11116 ;;                  1    wreg      void 
 11117 ;; Registers used:
 11118 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11119 ;; Tracked objects:
 11120 ;;		On entry : 0/0
 11121 ;;		On exit  : 0/0
 11122 ;;		Unchanged: 0/0
 11123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11124 ;;      Params:         0       0       0       0
 11125 ;;      Locals:         1       0       0       0
 11126 ;;      Temps:          0       0       0       0
 11127 ;;      Totals:         1       0       0       0
 11128 ;;Total ram usage:        1 bytes
 11129 ;; Hardware stack levels used:    1
 11130 ;; Hardware stack levels required when called:   10
 11131 ;; This function calls:
 11132 ;;		Nothing
 11133 ;; This function is called by:
 11134 ;;		_Cycle
 11135 ;;		_Capteur_Capot_On
 11136 ;;		_IRQ_TIMER_5
 11137 ;;		_Check_List_Moteur_2
 11138 ;;		_Check_List_Moteur_Bequille
 11139 ;;		_Mouvement_X
 11140 ;;		_EUSART1_RX_T3_LOCAL
 11141 ;;		_Alarme_On
 11142 ;; This function uses a non-reentrant model
 11143 ;;
 11144                           
 11145                           	psect	text66
 11146  0020CC                     __ptext66:
 11147                           	opt stack 0
 11148  0020CC                     _Etat_Update:
 11149                           	opt stack 14
 11150                           
 11151                           ;incstack = 0
 11152                           ;Etat_Update@etat_new_value stored from wreg
 11153  0020CC  6E0F               	movwf	Etat_Update@etat_new_value,c
 11154                           
 11155                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 11156  0020CE  504D               	movf	_Etat_Precedent_Index,w,c
 11157  0020D0  0F6A               	addlw	low _Etat_Log
 11158  0020D2  6ED9               	movwf	fsr2l,c
 11159  0020D4  6ADA               	clrf	fsr2h,c
 11160  0020D6  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 11161                           
 11162                           ;action.c: 69: Etat = etat_new_value;
 11163  0020DA  C00F  F0A9         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 11164                           
 11165                           ;action.c: 70: Etat_Precedent_Index++;
 11166  0020DE  2A4D               	incf	_Etat_Precedent_Index,f,c
 11167                           
 11168                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 11169  0020E0  0E0A               	movlw	10
 11170  0020E2  184D               	xorwf	_Etat_Precedent_Index,w,c
 11171  0020E4  B4D8               	btfsc	status,2,c
 11172                           
 11173                           ;action.c: 72: Etat_Precedent_Index = 0;
 11174  0020E6  6A4D               	clrf	_Etat_Precedent_Index,c
 11175  0020E8  0012               	return		;funcret
 11176  0020EA                     __end_of_Etat_Update:
 11177                           	opt stack 0
 11178                           tblptru	equ	0xFF8
 11179                           tblptrh	equ	0xFF7
 11180                           tblptrl	equ	0xFF6
 11181                           tablat	equ	0xFF5
 11182                           prodh	equ	0xFF4
 11183                           prodl	equ	0xFF3
 11184                           intcon	equ	0xFF2
 11185                           intcon2	equ	0xFF1
 11186                           intcon3	equ	0xFF0
 11187                           postinc0	equ	0xFEE
 11188                           wreg	equ	0xFE8
 11189                           indf1	equ	0xFE7
 11190                           postdec1	equ	0xFE5
 11191                           fsr1h	equ	0xFE2
 11192                           fsr1l	equ	0xFE1
 11193                           indf2	equ	0xFDF
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           fsr2h	equ	0xFDA
 11197                           fsr2l	equ	0xFD9
 11198                           status	equ	0xFD8
 11199                           
 11200 ;; *************** function _Coupe_Moteur *****************
 11201 ;; Defined at:
 11202 ;;		line 237 in file "action.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;		None
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;		None
 11207 ;; Return value:  Size  Location     Type
 11208 ;;                  1    wreg      void 
 11209 ;; Registers used:
 11210 ;;		cstack
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/2
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11216 ;;      Params:         0       0       0       0
 11217 ;;      Locals:         0       0       0       0
 11218 ;;      Temps:          0       0       0       0
 11219 ;;      Totals:         0       0       0       0
 11220 ;;Total ram usage:        0 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; Hardware stack levels required when called:   11
 11223 ;; This function calls:
 11224 ;;		_TIMER2_Off
 11225 ;; This function is called by:
 11226 ;;		_Mouvement_Bequille
 11227 ;;		_Mouvement_Z
 11228 ;;		_Mouvement_X
 11229 ;;		_EUSART1_RX_T3_LOCAL
 11230 ;;		_Alarme_On
 11231 ;; This function uses a non-reentrant model
 11232 ;;
 11233                           
 11234                           	psect	text67
 11235  0021EE                     __ptext67:
 11236                           	opt stack 0
 11237  0021EE                     _Coupe_Moteur:
 11238                           	opt stack 12
 11239                           
 11240                           ;action.c: 238: TIMER2_Off();
 11241                           
 11242                           ;incstack = 0
 11243  0021EE  ECD5  F011         	call	_TIMER2_Off	;wreg free
 11244                           
 11245                           ;action.c: 243: LATEbits.LATE2 = 0;
 11246  0021F2  948D               	bcf	3981,2,c	;volatile
 11247                           
 11248                           ;action.c: 250: LATCbits.LATC0 = 0;
 11249  0021F4  908B               	bcf	3979,0,c	;volatile
 11250                           
 11251                           ;action.c: 251: LATCbits.LATC1 = 0;
 11252  0021F6  928B               	bcf	3979,1,c	;volatile
 11253                           
 11254                           ;action.c: 252: OVDCOND = 0b00000000;
 11255  0021F8  6A6B               	clrf	3947,c	;volatile
 11256                           
 11257                           ;action.c: 253: LATD4 = 0;LATD5 = 0;
 11258  0021FA  988C               	bcf	3980,4,c	;volatile
 11259  0021FC  9A8C               	bcf	3980,5,c	;volatile
 11260                           
 11261                           ;action.c: 254: LATD6 = 0;LATD7 = 0;
 11262  0021FE  9C8C               	bcf	3980,6,c	;volatile
 11263  002200  9E8C               	bcf	3980,7,c	;volatile
 11264  002202  0012               	return		;funcret
 11265  002204                     __end_of_Coupe_Moteur:
 11266                           	opt stack 0
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           intcon2	equ	0xFF1
 11275                           intcon3	equ	0xFF0
 11276                           postinc0	equ	0xFEE
 11277                           wreg	equ	0xFE8
 11278                           indf1	equ	0xFE7
 11279                           postdec1	equ	0xFE5
 11280                           fsr1h	equ	0xFE2
 11281                           fsr1l	equ	0xFE1
 11282                           indf2	equ	0xFDF
 11283                           postinc2	equ	0xFDE
 11284                           postdec2	equ	0xFDD
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _TIMER2_Off *****************
 11290 ;; Defined at:
 11291 ;;		line 165 in file "timer.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		None
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/2
 11302 ;;		On exit  : 0/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11305 ;;      Params:         0       0       0       0
 11306 ;;      Locals:         0       0       0       0
 11307 ;;      Temps:          0       0       0       0
 11308 ;;      Totals:         0       0       0       0
 11309 ;;Total ram usage:        0 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:   10
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		_Coupe_Moteur
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text68
 11320  0023AA                     __ptext68:
 11321                           	opt stack 0
 11322  0023AA                     _TIMER2_Off:
 11323                           	opt stack 12
 11324                           
 11325                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 11326                           
 11327                           ;incstack = 0
 11328  0023AA  929D               	bcf	3997,1,c	;volatile
 11329                           
 11330                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 11331  0023AC  929E               	bcf	3998,1,c	;volatile
 11332  0023AE  0012               	return		;funcret
 11333  0023B0                     __end_of_TIMER2_Off:
 11334                           	opt stack 0
 11335                           tblptru	equ	0xFF8
 11336                           tblptrh	equ	0xFF7
 11337                           tblptrl	equ	0xFF6
 11338                           tablat	equ	0xFF5
 11339                           prodh	equ	0xFF4
 11340                           prodl	equ	0xFF3
 11341                           intcon	equ	0xFF2
 11342                           intcon2	equ	0xFF1
 11343                           intcon3	equ	0xFF0
 11344                           postinc0	equ	0xFEE
 11345                           wreg	equ	0xFE8
 11346                           indf1	equ	0xFE7
 11347                           postdec1	equ	0xFE5
 11348                           fsr1h	equ	0xFE2
 11349                           fsr1l	equ	0xFE1
 11350                           indf2	equ	0xFDF
 11351                           postinc2	equ	0xFDE
 11352                           postdec2	equ	0xFDD
 11353                           fsr2h	equ	0xFDA
 11354                           fsr2l	equ	0xFD9
 11355                           status	equ	0xFD8
 11356                           
 11357 ;; *************** function _IRQ_ADC *****************
 11358 ;; Defined at:
 11359 ;;		line 482 in file "interrupt.c"
 11360 ;; Parameters:    Size  Location     Type
 11361 ;;		None
 11362 ;; Auto vars:     Size  Location     Type
 11363 ;;		None
 11364 ;; Return value:  Size  Location     Type
 11365 ;;                  1    wreg      void 
 11366 ;; Registers used:
 11367 ;;		wreg, status,2, status,0
 11368 ;; Tracked objects:
 11369 ;;		On entry : 0/2
 11370 ;;		On exit  : 3F/0
 11371 ;;		Unchanged: 0/0
 11372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11373 ;;      Params:         0       0       0       0
 11374 ;;      Locals:         0       0       0       0
 11375 ;;      Temps:          3       0       0       0
 11376 ;;      Totals:         3       0       0       0
 11377 ;;Total ram usage:        3 bytes
 11378 ;; Hardware stack levels used:    1
 11379 ;; Hardware stack levels required when called:   10
 11380 ;; This function calls:
 11381 ;;		Nothing
 11382 ;; This function is called by:
 11383 ;;		_IRQ_Execution
 11384 ;; This function uses a non-reentrant model
 11385 ;;
 11386                           
 11387                           	psect	text69
 11388  000E04                     __ptext69:
 11389                           	opt stack 0
 11390  000E04                     _IRQ_ADC:
 11391                           	opt stack 15
 11392                           
 11393                           ;interrupt.c: 483: switch (moteur_indice) {
 11394                           
 11395                           ;incstack = 0
 11396  000E04  D0C7               	goto	l7155
 11397  000E06                     l610:
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;interrupt.c: 485: Image_Courant_Moteur_1 = ADRESH;
 11401  000E06  CFC4 F099          	movff	4036,_Image_Courant_Moteur_1	;volatile
 11402                           
 11403                           ;interrupt.c: 486: Nouvelle_Valeur_ADC = 1;
 11404  000E0A  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11405                           
 11406                           ;interrupt.c: 488: ADIF = 0;
 11407  000E0C  9C9E               	bcf	3998,6,c	;volatile
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;interrupt.c: 491: erreur = consigne - Image_Courant_Moteur_1;
 11411  000E0E  5199               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 11412  000E10  5D96               	subwf	_consigne& (0+255),w,b	;volatile
 11413  000E12  6F84               	movwf	_erreur& (0+255),b	;volatile
 11414  000E14  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11415  000E16  A0D8               	btfss	status,0,c
 11416  000E18  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11417                           
 11418                           ;interrupt.c: 492: if (erreur >= 10) duty++;
 11419  000E1A  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11420  000E1C  D008               	goto	l7105
 11421  000E1E  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11422  000E20  E103               	bnz	u4920
 11423  000E22  0E0A               	movlw	10
 11424  000E24  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11425  000E26  E303               	bnc	l7105
 11426  000E28                     u4920:
 11427                           
 11428                           ; BSR set to: 0
 11429  000E28  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11430  000E2A  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11431  000E2C  D006               	goto	l612
 11432  000E2E                     l7105:
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;interrupt.c: 494: else if (erreur < 0) duty += erreur;
 11436  000E2E  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11437  000E30  D004               	goto	l612
 11438                           
 11439                           ; BSR set to: 0
 11440  000E32  5184               	movf	_erreur& (0+255),w,b	;volatile
 11441  000E34  2786               	addwf	_duty& (0+255),f,b	;volatile
 11442  000E36  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11443  000E38  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 11444  000E3A                     l612:
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;interrupt.c: 499: if (duty > PTPERL) duty = PTPERL;
 11448  000E3A  507B               	movf	3963,w,c	;volatile
 11449  000E3C  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11450  000E3E  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11451  000E40  5186               	movf	_duty& (0+255),w,b	;volatile
 11452  000E42  5C0F               	subwf	??_IRQ_ADC,w,c
 11453  000E44  5010               	movf	??_IRQ_ADC+1,w,c
 11454  000E46  0A80               	xorlw	128
 11455  000E48  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11456  000E4A  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11457  000E4C  0A80               	xorlw	128
 11458  000E4E  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11459  000E50  E203               	bc	l7111
 11460                           
 11461                           ; BSR set to: 0
 11462  000E52  CF7B F086          	movff	3963,_duty	;volatile
 11463  000E56  D003               	goto	L2
 11464  000E58                     l7111:
 11465                           
 11466                           ; BSR set to: 0
 11467                           ;interrupt.c: 500: else if (duty < 0) duty = 0;
 11468  000E58  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11469  000E5A  D002               	goto	l7115
 11470                           
 11471                           ; BSR set to: 0
 11472  000E5C  6B86               	clrf	_duty& (0+255),b	;volatile
 11473  000E5E                     L2:
 11474  000E5E  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11475  000E60                     l7115:
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;interrupt.c: 501: PDC0L = (char) (duty << 2);
 11479  000E60  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11480  000E62  46E8               	rlncf	wreg,f,c
 11481  000E64  0BFC               	andlw	252
 11482  000E66  6E79               	movwf	3961,c	;volatile
 11483                           
 11484                           ;interrupt.c: 502: PDC0H = (char) ((duty << 2) >> 8);
 11485  000E68  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11486  000E6C  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11487  000E70  90D8               	bcf	status,0,c
 11488  000E72  360F               	rlcf	??_IRQ_ADC,f,c
 11489  000E74  3610               	rlcf	??_IRQ_ADC+1,f,c
 11490  000E76  90D8               	bcf	status,0,c
 11491  000E78  360F               	rlcf	??_IRQ_ADC,f,c
 11492  000E7A  3610               	rlcf	??_IRQ_ADC+1,f,c
 11493  000E7C  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11494  000E80  6A10               	clrf	??_IRQ_ADC+1,c
 11495  000E82  BE0F               	btfsc	??_IRQ_ADC,7,c
 11496  000E84  6810               	setf	??_IRQ_ADC+1,c
 11497  000E86  500F               	movf	??_IRQ_ADC,w,c
 11498  000E88  6E78               	movwf	3960,c	;volatile
 11499                           
 11500                           ;interrupt.c: 504: break;
 11501  000E8A  0012               	return	
 11502  000E8C                     l618:
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;interrupt.c: 511: Image_Courant_Moteur_2 = ADRESH;
 11506  000E8C  CFC4 F098          	movff	4036,_Image_Courant_Moteur_2	;volatile
 11507                           
 11508                           ;interrupt.c: 512: Nouvelle_Valeur_ADC = 1;
 11509  000E90  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11510                           
 11511                           ;interrupt.c: 514: ADIF = 0;
 11512  000E92  9C9E               	bcf	3998,6,c	;volatile
 11513                           
 11514                           ; BSR set to: 0
 11515                           ;interrupt.c: 517: erreur = consigne - Image_Courant_Moteur_2;
 11516  000E94  5198               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 11517  000E96  5D96               	subwf	_consigne& (0+255),w,b	;volatile
 11518  000E98  6F84               	movwf	_erreur& (0+255),b	;volatile
 11519  000E9A  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11520  000E9C  A0D8               	btfss	status,0,c
 11521  000E9E  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11522                           
 11523                           ;interrupt.c: 518: if (erreur >= 10) duty++;
 11524  000EA0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11525  000EA2  D008               	goto	l7121
 11526  000EA4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11527  000EA6  E103               	bnz	u4960
 11528  000EA8  0E0A               	movlw	10
 11529  000EAA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11530  000EAC  E303               	bnc	l7121
 11531  000EAE                     u4960:
 11532                           
 11533                           ; BSR set to: 0
 11534  000EAE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11535  000EB0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11536  000EB2  D005               	goto	l7125
 11537  000EB4                     l7121:
 11538                           
 11539                           ; BSR set to: 0
 11540                           ;interrupt.c: 519: else if (erreur < 0) duty--;
 11541  000EB4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11542  000EB6  D003               	goto	l7125
 11543                           
 11544                           ; BSR set to: 0
 11545  000EB8  0786               	decf	_duty& (0+255),f,b	;volatile
 11546  000EBA  A0D8               	btfss	status,0,c
 11547  000EBC  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 11548  000EBE                     l7125:
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;interrupt.c: 523: if (duty > PTPERL) duty = PTPERL;
 11552  000EBE  507B               	movf	3963,w,c	;volatile
 11553  000EC0  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11554  000EC2  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11555  000EC4  5186               	movf	_duty& (0+255),w,b	;volatile
 11556  000EC6  5C0F               	subwf	??_IRQ_ADC,w,c
 11557  000EC8  5010               	movf	??_IRQ_ADC+1,w,c
 11558  000ECA  0A80               	xorlw	128
 11559  000ECC  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11560  000ECE  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11561  000ED0  0A80               	xorlw	128
 11562  000ED2  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11563  000ED4  E203               	bc	l7129
 11564                           
 11565                           ; BSR set to: 0
 11566  000ED6  CF7B F086          	movff	3963,_duty	;volatile
 11567  000EDA  D003               	goto	L3
 11568  000EDC                     l7129:
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;interrupt.c: 524: else if (duty < 0) duty = 0;
 11572  000EDC  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11573  000EDE  D002               	goto	l7133
 11574                           
 11575                           ; BSR set to: 0
 11576  000EE0  6B86               	clrf	_duty& (0+255),b	;volatile
 11577  000EE2                     L3:
 11578  000EE2  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11579  000EE4                     l7133:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;interrupt.c: 525: PDC1L = (char) (duty << 2);
 11583  000EE4  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11584  000EE6  46E8               	rlncf	wreg,f,c
 11585  000EE8  0BFC               	andlw	252
 11586  000EEA  6E77               	movwf	3959,c	;volatile
 11587                           
 11588                           ;interrupt.c: 526: PDC1H = (char) ((duty << 2) >> 8);
 11589  000EEC  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11590  000EF0  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11591  000EF4  90D8               	bcf	status,0,c
 11592  000EF6  360F               	rlcf	??_IRQ_ADC,f,c
 11593  000EF8  3610               	rlcf	??_IRQ_ADC+1,f,c
 11594  000EFA  90D8               	bcf	status,0,c
 11595  000EFC  360F               	rlcf	??_IRQ_ADC,f,c
 11596  000EFE  3610               	rlcf	??_IRQ_ADC+1,f,c
 11597  000F00  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11598  000F04  6A10               	clrf	??_IRQ_ADC+1,c
 11599  000F06  BE0F               	btfsc	??_IRQ_ADC,7,c
 11600  000F08  6810               	setf	??_IRQ_ADC+1,c
 11601  000F0A  500F               	movf	??_IRQ_ADC,w,c
 11602  000F0C  6E76               	movwf	3958,c	;volatile
 11603                           
 11604                           ;interrupt.c: 528: break;
 11605  000F0E  0012               	return	
 11606  000F10                     l625:
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;interrupt.c: 532: Image_Courant_Moteur_2 = ADRESH;
 11610  000F10  CFC4 F098          	movff	4036,_Image_Courant_Moteur_2	;volatile
 11611                           
 11612                           ;interrupt.c: 533: Nouvelle_Valeur_ADC = 1;
 11613  000F14  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 11614                           
 11615                           ;interrupt.c: 535: ADIF = 0;
 11616  000F16  9C9E               	bcf	3998,6,c	;volatile
 11617                           
 11618                           ; BSR set to: 0
 11619                           ;interrupt.c: 538: erreur = consigne - Image_Courant_Moteur_2;
 11620  000F18  5198               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 11621  000F1A  5D96               	subwf	_consigne& (0+255),w,b	;volatile
 11622  000F1C  6F84               	movwf	_erreur& (0+255),b	;volatile
 11623  000F1E  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 11624  000F20  A0D8               	btfss	status,0,c
 11625  000F22  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 11626                           
 11627                           ;interrupt.c: 539: if (erreur >= 10) duty++;
 11628  000F24  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 11629  000F26  D008               	goto	l7139
 11630  000F28  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 11631  000F2A  E103               	bnz	u5000
 11632  000F2C  0E0A               	movlw	10
 11633  000F2E  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 11634  000F30  E303               	bnc	l7139
 11635  000F32                     u5000:
 11636                           
 11637                           ; BSR set to: 0
 11638  000F32  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 11639  000F34  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 11640  000F36  D005               	goto	l7143
 11641  000F38                     l7139:
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;interrupt.c: 540: else if (erreur < 0) duty--;
 11645  000F38  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 11646  000F3A  D003               	goto	l7143
 11647                           
 11648                           ; BSR set to: 0
 11649  000F3C  0786               	decf	_duty& (0+255),f,b	;volatile
 11650  000F3E  A0D8               	btfss	status,0,c
 11651  000F40  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 11652  000F42                     l7143:
 11653                           
 11654                           ; BSR set to: 0
 11655                           ;interrupt.c: 544: if (duty > PTPERL) duty = PTPERL;
 11656  000F42  507B               	movf	3963,w,c	;volatile
 11657  000F44  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 11658  000F46  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 11659  000F48  5186               	movf	_duty& (0+255),w,b	;volatile
 11660  000F4A  5C0F               	subwf	??_IRQ_ADC,w,c
 11661  000F4C  5010               	movf	??_IRQ_ADC+1,w,c
 11662  000F4E  0A80               	xorlw	128
 11663  000F50  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 11664  000F52  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 11665  000F54  0A80               	xorlw	128
 11666  000F56  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 11667  000F58  E203               	bc	l7147
 11668                           
 11669                           ; BSR set to: 0
 11670  000F5A  CF7B F086          	movff	3963,_duty	;volatile
 11671  000F5E  D003               	goto	L4
 11672  000F60                     l7147:
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;interrupt.c: 545: else if (duty < 0) duty = 0;
 11676  000F60  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 11677  000F62  D002               	goto	l7151
 11678                           
 11679                           ; BSR set to: 0
 11680  000F64  6B86               	clrf	_duty& (0+255),b	;volatile
 11681  000F66                     L4:
 11682  000F66  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 11683  000F68                     l7151:
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;interrupt.c: 546: PDC1L = (char) (duty << 2);
 11687  000F68  4586               	rlncf	_duty& (0+255),w,b	;volatile
 11688  000F6A  46E8               	rlncf	wreg,f,c
 11689  000F6C  0BFC               	andlw	252
 11690  000F6E  6E77               	movwf	3959,c	;volatile
 11691                           
 11692                           ;interrupt.c: 547: PDC1H = (char) ((duty << 2) >> 8);
 11693  000F70  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 11694  000F74  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 11695  000F78  90D8               	bcf	status,0,c
 11696  000F7A  360F               	rlcf	??_IRQ_ADC,f,c
 11697  000F7C  3610               	rlcf	??_IRQ_ADC+1,f,c
 11698  000F7E  90D8               	bcf	status,0,c
 11699  000F80  360F               	rlcf	??_IRQ_ADC,f,c
 11700  000F82  3610               	rlcf	??_IRQ_ADC+1,f,c
 11701  000F84  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 11702  000F88  6A10               	clrf	??_IRQ_ADC+1,c
 11703  000F8A  BE0F               	btfsc	??_IRQ_ADC,7,c
 11704  000F8C  6810               	setf	??_IRQ_ADC+1,c
 11705  000F8E  500F               	movf	??_IRQ_ADC,w,c
 11706  000F90  6E76               	movwf	3958,c	;volatile
 11707                           
 11708                           ;interrupt.c: 549: break;
 11709  000F92  0012               	return	
 11710  000F94                     l7155:
 11711  000F94  0100               	movlb	0	; () banked
 11712  000F96  5197               	movf	_moteur_indice& (0+255),w,b	;volatile
 11713                           
 11714                           ; Switch size 1, requested type "speed"
 11715                           ; Number of cases is 3, Range of values is 1 to 3
 11716                           ; switch strategies available:
 11717                           ; Name         Instructions Cycles
 11718                           ; simple_byte           10     6 (average)
 11719                           ;	Chosen strategy is simple_byte
 11720  000F98  0A01               	xorlw	1	; case 1
 11721  000F9A  E101 D734          	bz	l610
 11722  000F9E  0A03               	xorlw	3	; case 2
 11723  000FA0  E101 D774          	bz	l618
 11724  000FA4  0A01               	xorlw	1	; case 3
 11725  000FA6  E0B4               	bz	l625
 11726                           
 11727                           ; BSR set to: 0
 11728  000FA8  0012               	return		;funcret
 11729  000FAA                     __end_of_IRQ_ADC:
 11730                           	opt stack 0
 11731                           tblptru	equ	0xFF8
 11732                           tblptrh	equ	0xFF7
 11733                           tblptrl	equ	0xFF6
 11734                           tablat	equ	0xFF5
 11735                           prodh	equ	0xFF4
 11736                           prodl	equ	0xFF3
 11737                           intcon	equ	0xFF2
 11738                           intcon2	equ	0xFF1
 11739                           intcon3	equ	0xFF0
 11740                           postinc0	equ	0xFEE
 11741                           wreg	equ	0xFE8
 11742                           indf1	equ	0xFE7
 11743                           postdec1	equ	0xFE5
 11744                           fsr1h	equ	0xFE2
 11745                           fsr1l	equ	0xFE1
 11746                           indf2	equ	0xFDF
 11747                           postinc2	equ	0xFDE
 11748                           postdec2	equ	0xFDD
 11749                           fsr2h	equ	0xFDA
 11750                           fsr2l	equ	0xFD9
 11751                           status	equ	0xFD8
 11752                           
 11753 ;; *************** function _Etat_Intitule *****************
 11754 ;; Defined at:
 11755 ;;		line 22 in file "action.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;  Etat_Number     1    wreg     unsigned char 
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;                  1    wreg      unsigned char 
 11762 ;; Registers used:
 11763 ;;		wreg, status,2, status,0
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/1
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11769 ;;      Params:         0       0       0       0
 11770 ;;      Locals:         1       0       0       0
 11771 ;;      Temps:          0       0       0       0
 11772 ;;      Totals:         1       0       0       0
 11773 ;;Total ram usage:        1 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:   10
 11776 ;; This function calls:
 11777 ;;		Nothing
 11778 ;; This function is called by:
 11779 ;;		_EUSART1_RX_T3_LOCAL
 11780 ;; This function uses a non-reentrant model
 11781 ;;
 11782                           
 11783                           	psect	text70
 11784  001E2C                     __ptext70:
 11785                           	opt stack 0
 11786  001E2C                     _Etat_Intitule:
 11787                           	opt stack 16
 11788                           
 11789                           ; BSR set to: 0
 11790                           ;incstack = 0
 11791                           ;Etat_Intitule@Etat_Number stored from wreg
 11792  001E2C  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 11793                           
 11794                           ;action.c: 24: switch (Etat_Number) {
 11795  001E2E  500F               	movf	Etat_Intitule@Etat_Number,w,c
 11796                           
 11797                           ; Switch size 1, requested type "speed"
 11798                           ; Number of cases is 8, Range of values is 0 to 255
 11799                           ; switch strategies available:
 11800                           ; Name         Instructions Cycles
 11801                           ; simple_byte           25    13 (average)
 11802                           ;	Chosen strategy is simple_byte
 11803  001E30  B4D8               	btfsc	status,2,c
 11804  001E32  0C49               	retlw	73
 11805  001E34  0A01               	xorlw	1	; case 1
 11806  001E36  B4D8               	btfsc	status,2,c
 11807  001E38  0C21               	retlw	33
 11808  001E3A  0A03               	xorlw	3	; case 2
 11809  001E3C  B4D8               	btfsc	status,2,c
 11810  001E3E  0C41               	retlw	65
 11811  001E40  0A01               	xorlw	1	; case 3
 11812  001E42  B4D8               	btfsc	status,2,c
 11813  001E44  0C52               	retlw	82
 11814  001E46  0A07               	xorlw	7	; case 4
 11815  001E48  B4D8               	btfsc	status,2,c
 11816  001E4A  0C4C               	retlw	76
 11817  001E4C  0A01               	xorlw	1	; case 5
 11818  001E4E  B4D8               	btfsc	status,2,c
 11819  001E50  0C42               	retlw	66
 11820  001E52  0A03               	xorlw	3	; case 6
 11821  001E54  B4D8               	btfsc	status,2,c
 11822  001E56  0C50               	retlw	80
 11823  001E58  0AF9               	xorlw	249	; case 255
 11824  001E5A  B4D8               	btfsc	status,2,c
 11825  001E5C  0C48               	retlw	72
 11826  001E5E  0C20               	retlw	32
 11827  001E60                     __end_of_Etat_Intitule:
 11828                           	opt stack 0
 11829                           tblptru	equ	0xFF8
 11830                           tblptrh	equ	0xFF7
 11831                           tblptrl	equ	0xFF6
 11832                           tablat	equ	0xFF5
 11833                           prodh	equ	0xFF4
 11834                           prodl	equ	0xFF3
 11835                           intcon	equ	0xFF2
 11836                           intcon2	equ	0xFF1
 11837                           intcon3	equ	0xFF0
 11838                           postinc0	equ	0xFEE
 11839                           wreg	equ	0xFE8
 11840                           indf1	equ	0xFE7
 11841                           postdec1	equ	0xFE5
 11842                           fsr1h	equ	0xFE2
 11843                           fsr1l	equ	0xFE1
 11844                           indf2	equ	0xFDF
 11845                           postinc2	equ	0xFDE
 11846                           postdec2	equ	0xFDD
 11847                           fsr2h	equ	0xFDA
 11848                           fsr2l	equ	0xFD9
 11849                           status	equ	0xFD8
 11850                           
 11851 ;; *************** function _Etat_Get *****************
 11852 ;; Defined at:
 11853 ;;		line 42 in file "action.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  Etat_Indice     1    wreg     unsigned char 
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 11858 ;; Return value:  Size  Location     Type
 11859 ;;                  1    wreg      unsigned char 
 11860 ;; Registers used:
 11861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11867 ;;      Params:         0       0       0       0
 11868 ;;      Locals:         1       0       0       0
 11869 ;;      Temps:          2       0       0       0
 11870 ;;      Totals:         3       0       0       0
 11871 ;;Total ram usage:        3 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:   11
 11874 ;; This function calls:
 11875 ;;		___awmod
 11876 ;; This function is called by:
 11877 ;;		_Cycle
 11878 ;;		_EUSART1_RX_T3_LOCAL
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           	psect	text71
 11883  001E60                     __ptext71:
 11884                           	opt stack 0
 11885  001E60                     _Etat_Get:
 11886                           	opt stack 15
 11887                           
 11888                           ;incstack = 0
 11889                           ;Etat_Get@Etat_Indice stored from wreg
 11890  001E60  6E17               	movwf	Etat_Get@Etat_Indice,c
 11891                           
 11892                           ;action.c: 55: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 11893  001E62  5017               	movf	Etat_Get@Etat_Indice,w,c
 11894  001E64  C04D  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 11895  001E68  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 11896  001E6A  5E15               	subwf	??_Etat_Get,f,c
 11897  001E6C  0E00               	movlw	0
 11898  001E6E  5A16               	subwfb	??_Etat_Get+1,f,c
 11899  001E70  0E09               	movlw	9
 11900  001E72  2415               	addwf	??_Etat_Get,w,c
 11901  001E74  6E0F               	movwf	___awmod@dividend,c
 11902  001E76  0E00               	movlw	0
 11903  001E78  2016               	addwfc	??_Etat_Get+1,w,c
 11904  001E7A  6E10               	movwf	___awmod@dividend+1,c
 11905  001E7C  6A12               	clrf	___awmod@divisor+1,c
 11906  001E7E  0E0A               	movlw	10
 11907  001E80  6E11               	movwf	___awmod@divisor,c
 11908  001E82  ECEC  F00B         	call	___awmod	;wreg free
 11909  001E86  500F               	movf	?___awmod,w,c
 11910  001E88  0F6A               	addlw	low _Etat_Log
 11911  001E8A  6ED9               	movwf	fsr2l,c
 11912  001E8C  6ADA               	clrf	fsr2h,c
 11913  001E8E  50DF               	movf	indf2,w,c
 11914  001E90  0012               	return		;funcret
 11915  001E92                     __end_of_Etat_Get:
 11916                           	opt stack 0
 11917                           tblptru	equ	0xFF8
 11918                           tblptrh	equ	0xFF7
 11919                           tblptrl	equ	0xFF6
 11920                           tablat	equ	0xFF5
 11921                           prodh	equ	0xFF4
 11922                           prodl	equ	0xFF3
 11923                           intcon	equ	0xFF2
 11924                           intcon2	equ	0xFF1
 11925                           intcon3	equ	0xFF0
 11926                           postinc0	equ	0xFEE
 11927                           wreg	equ	0xFE8
 11928                           indf1	equ	0xFE7
 11929                           postdec1	equ	0xFE5
 11930                           fsr1h	equ	0xFE2
 11931                           fsr1l	equ	0xFE1
 11932                           indf2	equ	0xFDF
 11933                           postinc2	equ	0xFDE
 11934                           postdec2	equ	0xFDD
 11935                           fsr2h	equ	0xFDA
 11936                           fsr2l	equ	0xFD9
 11937                           status	equ	0xFD8
 11938                           
 11939 ;; *************** function ___awmod *****************
 11940 ;; Defined at:
 11941 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;  dividend        2   14[COMRAM] int 
 11944 ;;  divisor         2   16[COMRAM] int 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;  sign            1   19[COMRAM] unsigned char 
 11947 ;;  counter         1   18[COMRAM] unsigned char 
 11948 ;; Return value:  Size  Location     Type
 11949 ;;                  2   14[COMRAM] int 
 11950 ;; Registers used:
 11951 ;;		wreg, status,2, status,0
 11952 ;; Tracked objects:
 11953 ;;		On entry : 0/1
 11954 ;;		On exit  : 0/0
 11955 ;;		Unchanged: 0/0
 11956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11957 ;;      Params:         4       0       0       0
 11958 ;;      Locals:         2       0       0       0
 11959 ;;      Temps:          0       0       0       0
 11960 ;;      Totals:         6       0       0       0
 11961 ;;Total ram usage:        6 bytes
 11962 ;; Hardware stack levels used:    1
 11963 ;; Hardware stack levels required when called:   10
 11964 ;; This function calls:
 11965 ;;		Nothing
 11966 ;; This function is called by:
 11967 ;;		_Etat_Get
 11968 ;;		_EUSART1_RX_T3_LOCAL
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           	psect	text72
 11973  0017D8                     __ptext72:
 11974                           	opt stack 0
 11975  0017D8                     ___awmod:
 11976                           	opt stack 16
 11977                           
 11978                           ;incstack = 0
 11979  0017D8  6A14               	clrf	___awmod@sign,c
 11980  0017DA  AE10               	btfss	___awmod@dividend+1,7,c
 11981  0017DC  D006               	goto	l7187
 11982  0017DE  6C0F               	negf	___awmod@dividend,c
 11983  0017E0  1E10               	comf	___awmod@dividend+1,f,c
 11984  0017E2  B0D8               	btfsc	status,0,c
 11985  0017E4  2A10               	incf	___awmod@dividend+1,f,c
 11986  0017E6  0E01               	movlw	1
 11987  0017E8  6E14               	movwf	___awmod@sign,c
 11988  0017EA                     l7187:
 11989  0017EA  AE12               	btfss	___awmod@divisor+1,7,c
 11990  0017EC  D004               	goto	l7191
 11991  0017EE  6C11               	negf	___awmod@divisor,c
 11992  0017F0  1E12               	comf	___awmod@divisor+1,f,c
 11993  0017F2  B0D8               	btfsc	status,0,c
 11994  0017F4  2A12               	incf	___awmod@divisor+1,f,c
 11995  0017F6                     l7191:
 11996  0017F6  5011               	movf	___awmod@divisor,w,c
 11997  0017F8  1012               	iorwf	___awmod@divisor+1,w,c
 11998  0017FA  E017               	bz	l7207
 11999  0017FC  0E01               	movlw	1
 12000  0017FE  6E13               	movwf	___awmod@counter,c
 12001  001800  D004               	goto	l7197
 12002  001802                     l7195:
 12003  001802  90D8               	bcf	status,0,c
 12004  001804  3611               	rlcf	___awmod@divisor,f,c
 12005  001806  3612               	rlcf	___awmod@divisor+1,f,c
 12006  001808  2A13               	incf	___awmod@counter,f,c
 12007  00180A                     l7197:
 12008  00180A  AE12               	btfss	___awmod@divisor+1,7,c
 12009  00180C  D7FA               	goto	l7195
 12010  00180E                     l7199:
 12011  00180E  5011               	movf	___awmod@divisor,w,c
 12012  001810  5C0F               	subwf	___awmod@dividend,w,c
 12013  001812  5012               	movf	___awmod@divisor+1,w,c
 12014  001814  5810               	subwfb	___awmod@dividend+1,w,c
 12015  001816  E304               	bnc	l7203
 12016  001818  5011               	movf	___awmod@divisor,w,c
 12017  00181A  5E0F               	subwf	___awmod@dividend,f,c
 12018  00181C  5012               	movf	___awmod@divisor+1,w,c
 12019  00181E  5A10               	subwfb	___awmod@dividend+1,f,c
 12020  001820                     l7203:
 12021  001820  90D8               	bcf	status,0,c
 12022  001822  3212               	rrcf	___awmod@divisor+1,f,c
 12023  001824  3211               	rrcf	___awmod@divisor,f,c
 12024  001826  2E13               	decfsz	___awmod@counter,f,c
 12025  001828  D7F2               	goto	l7199
 12026  00182A                     l7207:
 12027  00182A  5014               	movf	___awmod@sign,w,c
 12028  00182C  E004               	bz	l7211
 12029  00182E  6C0F               	negf	___awmod@dividend,c
 12030  001830  1E10               	comf	___awmod@dividend+1,f,c
 12031  001832  B0D8               	btfsc	status,0,c
 12032  001834  2A10               	incf	___awmod@dividend+1,f,c
 12033  001836                     l7211:
 12034  001836  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12035  00183A  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12036  00183E  0012               	return		;funcret
 12037  001840                     __end_of___awmod:
 12038                           	opt stack 0
 12039                           tblptru	equ	0xFF8
 12040                           tblptrh	equ	0xFF7
 12041                           tblptrl	equ	0xFF6
 12042                           tablat	equ	0xFF5
 12043                           prodh	equ	0xFF4
 12044                           prodl	equ	0xFF3
 12045                           intcon	equ	0xFF2
 12046                           intcon2	equ	0xFF1
 12047                           intcon3	equ	0xFF0
 12048                           postinc0	equ	0xFEE
 12049                           wreg	equ	0xFE8
 12050                           indf1	equ	0xFE7
 12051                           postdec1	equ	0xFE5
 12052                           fsr1h	equ	0xFE2
 12053                           fsr1l	equ	0xFE1
 12054                           indf2	equ	0xFDF
 12055                           postinc2	equ	0xFDE
 12056                           postdec2	equ	0xFDD
 12057                           fsr2h	equ	0xFDA
 12058                           fsr2l	equ	0xFD9
 12059                           status	equ	0xFD8
 12060                           
 12061 ;; *************** function _EUSART1_Buffer_Send *****************
 12062 ;; Defined at:
 12063 ;;		line 511 in file "eusart.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;  text            1   14[COMRAM] PTR unsigned char 
 12066 ;;		 -> UART_TX_TEXT(64), 
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  i               2   15[COMRAM] unsigned int 
 12069 ;; Return value:  Size  Location     Type
 12070 ;;                  1    wreg      void 
 12071 ;; Registers used:
 12072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12078 ;;      Params:         1       0       0       0
 12079 ;;      Locals:         2       0       0       0
 12080 ;;      Temps:          0       0       0       0
 12081 ;;      Totals:         3       0       0       0
 12082 ;;Total ram usage:        3 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:   10
 12085 ;; This function calls:
 12086 ;;		Nothing
 12087 ;; This function is called by:
 12088 ;;		_EUSART1_RX_T3_LOCAL
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           	psect	text73
 12093  001514                     __ptext73:
 12094                           	opt stack 0
 12095  001514                     _EUSART1_Buffer_Send:
 12096                           	opt stack 16
 12097  001514                     l1297:
 12098  001514  A2AC               	btfss	4012,1,c	;volatile
 12099  001516  D7FE               	goto	l1297
 12100                           
 12101                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 12102  001518  6A10               	clrf	EUSART1_Buffer_Send@i,c
 12103  00151A  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 12104  00151C  D01A               	goto	l7331
 12105  00151E                     l7327:
 12106                           
 12107                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 12108  00151E  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12109  001520  0FAC               	addlw	low _UART_TX_TEXT
 12110  001522  6ED9               	movwf	fsr2l,c
 12111  001524  6ADA               	clrf	fsr2h,c
 12112  001526  0E80               	movlw	low _eusart1TxBuffer
 12113  001528  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12114  00152A  6EE1               	movwf	fsr1l,c
 12115  00152C  0E01               	movlw	high _eusart1TxBuffer
 12116  00152E  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12117  001530  6EE2               	movwf	fsr1h,c
 12118  001532  CFDF FFE7          	movff	indf2,indf1
 12119                           
 12120                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 12121  001536  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12122  001538  0FAC               	addlw	low _UART_TX_TEXT
 12123  00153A  6ED9               	movwf	fsr2l,c
 12124  00153C  6ADA               	clrf	fsr2h,c
 12125  00153E  0E40               	movlw	low _spiTxBuffer
 12126  001540  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12127  001542  6EE1               	movwf	fsr1l,c
 12128  001544  0E01               	movlw	high _spiTxBuffer
 12129  001546  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12130  001548  6EE2               	movwf	fsr1h,c
 12131  00154A  CFDF FFE7          	movff	indf2,indf1
 12132  00154E  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 12133  001550  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 12134  001552                     l7331:
 12135  001552  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 12136  001554  E109               	bnz	l7335
 12137  001556  0E40               	movlw	64
 12138  001558  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 12139  00155A  E206               	bc	l7335
 12140  00155C  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12141  00155E  0FAC               	addlw	low _UART_TX_TEXT
 12142  001560  6ED9               	movwf	fsr2l,c
 12143  001562  6ADA               	clrf	fsr2h,c
 12144  001564  50DF               	movf	indf2,w,c
 12145  001566  E1DB               	bnz	l7327
 12146  001568                     l7335:
 12147                           
 12148                           ;eusart.c: 526: }
 12149                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 12150  001568  0E80               	movlw	low _eusart1TxBuffer
 12151  00156A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12152  00156C  6ED9               	movwf	fsr2l,c
 12153  00156E  0E01               	movlw	high _eusart1TxBuffer
 12154  001570  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12155  001572  6EDA               	movwf	fsr2h,c
 12156  001574  0E0D               	movlw	13
 12157  001576  6EDF               	movwf	indf2,c
 12158                           
 12159                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 12160  001578  0E40               	movlw	low _spiTxBuffer
 12161  00157A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12162  00157C  6ED9               	movwf	fsr2l,c
 12163  00157E  0E01               	movlw	high _spiTxBuffer
 12164  001580  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12165  001582  6EDA               	movwf	fsr2h,c
 12166  001584  0E0D               	movlw	13
 12167  001586  6EDF               	movwf	indf2,c
 12168                           
 12169                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 12170  001588  0E81               	movlw	low (_eusart1TxBuffer+1)
 12171  00158A  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12172  00158C  6ED9               	movwf	fsr2l,c
 12173  00158E  0E01               	movlw	high (_eusart1TxBuffer+1)
 12174  001590  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12175  001592  6EDA               	movwf	fsr2h,c
 12176  001594  6ADF               	clrf	indf2,c
 12177                           
 12178                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 12179  001596  0E41               	movlw	low (_spiTxBuffer+1)
 12180  001598  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 12181  00159A  6ED9               	movwf	fsr2l,c
 12182  00159C  0E01               	movlw	high (_spiTxBuffer+1)
 12183  00159E  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 12184  0015A0  6EDA               	movwf	fsr2h,c
 12185  0015A2  6ADF               	clrf	indf2,c
 12186                           
 12187                           ;eusart.c: 537: eusart1TxIndex = 0;
 12188  0015A4  6A46               	clrf	_eusart1TxIndex,c	;volatile
 12189                           
 12190                           ;eusart.c: 538: spiTxIndex = 0;
 12191  0015A6  6A44               	clrf	_spiTxIndex,c	;volatile
 12192                           
 12193                           ;eusart.c: 540: SPI_MODE = 1;
 12194  0015A8  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 12195                           
 12196                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 12197  0015AA  0E40               	movlw	low _spiTxBuffer
 12198  0015AC  2444               	addwf	_spiTxIndex,w,c	;volatile
 12199  0015AE  6ED9               	movwf	fsr2l,c
 12200  0015B0  6ADA               	clrf	fsr2h,c
 12201  0015B2  0E01               	movlw	high _spiTxBuffer
 12202  0015B4  22DA               	addwfc	fsr2h,f,c
 12203  0015B6  50DF               	movf	indf2,w,c
 12204  0015B8  6EC9               	movwf	4041,c	;volatile
 12205                           
 12206                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 12207  0015BA  0E80               	movlw	low _eusart1TxBuffer
 12208  0015BC  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 12209  0015BE  6ED9               	movwf	fsr2l,c
 12210  0015C0  6ADA               	clrf	fsr2h,c
 12211  0015C2  0E01               	movlw	high _eusart1TxBuffer
 12212  0015C4  22DA               	addwfc	fsr2h,f,c
 12213  0015C6  50DF               	movf	indf2,w,c
 12214  0015C8  6EAD               	movwf	4013,c	;volatile
 12215                           
 12216                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 12217  0015CA  889D               	bsf	3997,4,c	;volatile
 12218  0015CC  0012               	return		;funcret
 12219  0015CE                     __end_of_EUSART1_Buffer_Send:
 12220                           	opt stack 0
 12221                           tblptru	equ	0xFF8
 12222                           tblptrh	equ	0xFF7
 12223                           tblptrl	equ	0xFF6
 12224                           tablat	equ	0xFF5
 12225                           prodh	equ	0xFF4
 12226                           prodl	equ	0xFF3
 12227                           intcon	equ	0xFF2
 12228                           intcon2	equ	0xFF1
 12229                           intcon3	equ	0xFF0
 12230                           postinc0	equ	0xFEE
 12231                           wreg	equ	0xFE8
 12232                           indf1	equ	0xFE7
 12233                           postdec1	equ	0xFE5
 12234                           fsr1h	equ	0xFE2
 12235                           fsr1l	equ	0xFE1
 12236                           indf2	equ	0xFDF
 12237                           postinc2	equ	0xFDE
 12238                           postdec2	equ	0xFDD
 12239                           fsr2h	equ	0xFDA
 12240                           fsr2l	equ	0xFD9
 12241                           status	equ	0xFD8
 12242                           
 12243 ;; *************** function _LOW_PRIORITY_IRQ *****************
 12244 ;; Defined at:
 12245 ;;		line 555 in file "interrupt.c"
 12246 ;; Parameters:    Size  Location     Type
 12247 ;;		None
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;		None
 12250 ;; Return value:  Size  Location     Type
 12251 ;;                  1    wreg      void 
 12252 ;; Registers used:
 12253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12254 ;; Tracked objects:
 12255 ;;		On entry : 0/0
 12256 ;;		On exit  : 0/0
 12257 ;;		Unchanged: 0/0
 12258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12259 ;;      Params:         0       0       0       0
 12260 ;;      Locals:         0       0       0       0
 12261 ;;      Temps:          7       0       0       0
 12262 ;;      Totals:         7       0       0       0
 12263 ;;Total ram usage:        7 bytes
 12264 ;; Hardware stack levels used:    1
 12265 ;; Hardware stack levels required when called:    9
 12266 ;; This function calls:
 12267 ;;		_EUSART1_Receive_ISR
 12268 ;;		_EUSART1_Transmit_ISR
 12269 ;;		_IRQ_PION_CHANGEMENT_ETAT
 12270 ;;		_SPI_ISR
 12271 ;;		i1_IRQ_ADC
 12272 ;;		i1_IRQ_PWM
 12273 ;;		i1_IRQ_TIMER_0
 12274 ;;		i1_IRQ_TIMER_5
 12275 ;; This function is called by:
 12276 ;;		Interrupt level 1
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           	psect	intcodelo
 12281  000018                     __pintcodelo:
 12282                           	opt stack 0
 12283  000018                     _LOW_PRIORITY_IRQ:
 12284                           	opt stack 11
 12285                           
 12286                           ;incstack = 0
 12287  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12288  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 12289  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 12290  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 12291  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 12292  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 12293  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 12294  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 12295                           
 12296                           ;interrupt.c: 558: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 12297  000036  B2A3               	btfsc	4003,1,c	;volatile
 12298  000038  A2A4               	btfss	4004,1,c	;volatile
 12299  00003A  D003               	goto	i1l638
 12300                           
 12301                           ;interrupt.c: 560: IRQ_PION_CHANGEMENT_ETAT();
 12302  00003C  ECF8  F00D         	call	_IRQ_PION_CHANGEMENT_ETAT	;wreg free
 12303                           
 12304                           ;interrupt.c: 575: } else
 12305  000040  D036               	goto	i1l657
 12306  000042                     i1l638:
 12307                           
 12308                           ;interrupt.c: 577: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 12309  000042  B4A3               	btfsc	4003,2,c	;volatile
 12310  000044  A4A4               	btfss	4004,2,c	;volatile
 12311  000046  D002               	goto	i1l640
 12312                           
 12313                           ;interrupt.c: 578: PIR3bits.IC2QEIF = 0;
 12314  000048  94A4               	bcf	4004,2,c	;volatile
 12315                           
 12316                           ;interrupt.c: 590: } else
 12317  00004A  D031               	goto	i1l657
 12318  00004C                     i1l640:
 12319                           
 12320                           ;interrupt.c: 591: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 12321  00004C  B69D               	btfsc	3997,3,c	;volatile
 12322  00004E  A69E               	btfss	3998,3,c	;volatile
 12323  000050  D003               	goto	i1l642
 12324                           
 12325                           ;interrupt.c: 592: SPI_ISR();
 12326  000052  EC3C  F009         	call	_SPI_ISR	;wreg free
 12327                           
 12328                           ;interrupt.c: 594: } else
 12329  000056  D02B               	goto	i1l657
 12330  000058                     i1l642:
 12331                           
 12332                           ;interrupt.c: 595: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 12333  000058  B89D               	btfsc	3997,4,c	;volatile
 12334  00005A  A89E               	btfss	3998,4,c	;volatile
 12335  00005C  D003               	goto	i1l644
 12336                           
 12337                           ;interrupt.c: 596: EUSART1_Transmit_ISR();
 12338  00005E  ECB4  F00F         	call	_EUSART1_Transmit_ISR	;wreg free
 12339                           
 12340                           ;interrupt.c: 598: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 12341  000062  D025               	goto	i1l657
 12342  000064                     i1l644:
 12343  000064  BA9D               	btfsc	3997,5,c	;volatile
 12344  000066  AA9E               	btfss	3998,5,c	;volatile
 12345  000068  D00B               	goto	i1l646
 12346                           
 12347                           ;interrupt.c: 599: if (RX1_ABR==0){
 12348  00006A  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 12349  00006C  D003               	goto	i1l647
 12350                           
 12351                           ;interrupt.c: 600: EUSART1_Receive_ISR();
 12352  00006E  ECC3  F009         	call	_EUSART1_Receive_ISR	;wreg free
 12353                           
 12354                           ;interrupt.c: 601: }else{
 12355  000072  D01D               	goto	i1l657
 12356  000074                     i1l647:
 12357                           
 12358                           ;interrupt.c: 602: eusart1RxIndex = RCREG;
 12359  000074  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 12360                           
 12361                           ;interrupt.c: 603: eusart1RxIndex = 0;
 12362  000078  6A45               	clrf	_eusart1RxIndex,c	;volatile
 12363                           
 12364                           ;interrupt.c: 604: PIR1bits.RC1IF = 0;
 12365  00007A  9A9E               	bcf	3998,5,c	;volatile
 12366                           
 12367                           ;interrupt.c: 605: RX1_ABR = 0;}
 12368  00007C  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 12369                           
 12370                           ;interrupt.c: 607: } else
 12371  00007E  D017               	goto	i1l657
 12372  000080                     i1l646:
 12373                           
 12374                           ;interrupt.c: 611: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 12375  000080  BAF2               	btfsc	intcon,5,c	;volatile
 12376  000082  A4F2               	btfss	intcon,2,c	;volatile
 12377  000084  D003               	goto	i1l650
 12378                           
 12379                           ;interrupt.c: 612: IRQ_TIMER_0();
 12380  000086  EC4A  F00D         	call	i1_IRQ_TIMER_0	;wreg free
 12381                           
 12382                           ;interrupt.c: 618: } else
 12383  00008A  D011               	goto	i1l657
 12384  00008C                     i1l650:
 12385                           
 12386                           ;interrupt.c: 621: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 12387  00008C  B0A3               	btfsc	4003,0,c	;volatile
 12388  00008E  A0A4               	btfss	4004,0,c	;volatile
 12389  000090  D003               	goto	i1l652
 12390                           
 12391                           ;interrupt.c: 622: IRQ_TIMER_5();
 12392  000092  ECB8  F00C         	call	i1_IRQ_TIMER_5	;wreg free
 12393                           
 12394                           ;interrupt.c: 644: } else
 12395  000096  D00B               	goto	i1l657
 12396  000098                     i1l652:
 12397                           
 12398                           ;interrupt.c: 646: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 12399  000098  B8A3               	btfsc	4003,4,c	;volatile
 12400  00009A  A8A4               	btfss	4004,4,c	;volatile
 12401  00009C  D003               	goto	i1l654
 12402                           
 12403                           ;interrupt.c: 647: IRQ_PWM();
 12404  00009E  ECE9  F011         	call	i1_IRQ_PWM	;wreg free
 12405                           
 12406                           ;interrupt.c: 651: } else
 12407  0000A2  D005               	goto	i1l657
 12408  0000A4                     i1l654:
 12409                           
 12410                           ;interrupt.c: 656: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 12411  0000A4  BC9D               	btfsc	3997,6,c	;volatile
 12412  0000A6  AC9E               	btfss	3998,6,c	;volatile
 12413  0000A8  D002               	goto	i1l657
 12414                           
 12415                           ;interrupt.c: 663: IRQ_ADC();
 12416  0000AA  ECD5  F007         	call	i1_IRQ_ADC	;wreg free
 12417  0000AE                     i1l657:
 12418  0000AE  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 12419  0000B2  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 12420  0000B6  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 12421  0000BA  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 12422  0000BE  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 12423  0000C2  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 12424  0000C6  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 12425  0000CA  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12426  0000CC  0010               	retfie	
 12427  0000CE                     __end_of_LOW_PRIORITY_IRQ:
 12428                           	opt stack 0
 12429                           tblptru	equ	0xFF8
 12430                           tblptrh	equ	0xFF7
 12431                           tblptrl	equ	0xFF6
 12432                           tablat	equ	0xFF5
 12433                           prodh	equ	0xFF4
 12434                           prodl	equ	0xFF3
 12435                           intcon	equ	0xFF2
 12436                           intcon2	equ	0xFF1
 12437                           intcon3	equ	0xFF0
 12438                           postinc0	equ	0xFEE
 12439                           wreg	equ	0xFE8
 12440                           indf1	equ	0xFE7
 12441                           postdec1	equ	0xFE5
 12442                           fsr1h	equ	0xFE2
 12443                           fsr1l	equ	0xFE1
 12444                           bsr	equ	0xFE0
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           postdec2	equ	0xFDD
 12448                           fsr2h	equ	0xFDA
 12449                           fsr2l	equ	0xFD9
 12450                           status	equ	0xFD8
 12451                           
 12452 ;; *************** function i1_IRQ_TIMER_5 *****************
 12453 ;; Defined at:
 12454 ;;		line 409 in file "interrupt.c"
 12455 ;; Parameters:    Size  Location     Type
 12456 ;;		None
 12457 ;; Auto vars:     Size  Location     Type
 12458 ;;		None
 12459 ;; Return value:  Size  Location     Type
 12460 ;;                  1    wreg      void 
 12461 ;; Registers used:
 12462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12463 ;; Tracked objects:
 12464 ;;		On entry : 0/0
 12465 ;;		On exit  : 0/0
 12466 ;;		Unchanged: 0/0
 12467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12468 ;;      Params:         0       0       0       0
 12469 ;;      Locals:         0       0       0       0
 12470 ;;      Temps:          0       0       0       0
 12471 ;;      Totals:         0       0       0       0
 12472 ;;Total ram usage:        0 bytes
 12473 ;; Hardware stack levels used:    1
 12474 ;; Hardware stack levels required when called:    8
 12475 ;; This function calls:
 12476 ;;		i1_Alarme_On
 12477 ;;		i1_Buzzer_Etat
 12478 ;;		i1_Etat_Update
 12479 ;;		i1_TIMER5_Off
 12480 ;; This function is called by:
 12481 ;;		_LOW_PRIORITY_IRQ
 12482 ;; This function uses a non-reentrant model
 12483 ;;
 12484                           
 12485                           	psect	text75
 12486  001970                     __ptext75:
 12487                           	opt stack 0
 12488  001970                     i1_IRQ_TIMER_5:
 12489                           	opt stack 11
 12490                           
 12491                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 12492                           
 12493                           ;incstack = 0
 12494  001970  90A4               	bcf	4004,0,c	;volatile
 12495                           
 12496                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 12497  001972  0100               	movlb	0	; () banked
 12498  001974  2BA4               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 12502  001976  51A3               	movf	_nb_100ms_pion& (0+255),w,b
 12503  001978  19A4               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 12504  00197A  E115               	bnz	i1l6569
 12505                           
 12506                           ; BSR set to: 0
 12507                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 12508  00197C  044E               	decf	_Mouvement_Startup,w,c
 12509  00197E  E001               	bz	i1l6555
 12510                           
 12511                           ; BSR set to: 0
 12512                           ;interrupt.c: 418: nb_Pion += 1;
 12513  001980  2BA0               	incf	_nb_Pion& (0+255),f,b	;volatile
 12514  001982                     i1l6555:
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;interrupt.c: 419: }
 12518                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 12519  001982  6BA6               	clrf	_nb_s_fonctionnement& (0+255),b	;volatile
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 12523  001984  519F               	movf	_nb_Pion_Objectif& (0+255),w,b
 12524  001986  E003               	bz	i1l597
 12525                           
 12526                           ; BSR set to: 0
 12527  001988  519F               	movf	_nb_Pion_Objectif& (0+255),w,b
 12528  00198A  5DA0               	subwf	_nb_Pion& (0+255),w,b	;volatile
 12529  00198C  E202               	bc	i1l6561
 12530  00198E                     i1l597:
 12531                           
 12532                           ; BSR set to: 0
 12533  00198E  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 12534  001990  0012               	return	
 12535  001992                     i1l6561:
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 12539  001992  0E00               	movlw	0
 12540  001994  EC96  F011         	call	i1_Buzzer_Etat
 12541                           
 12542                           ;interrupt.c: 430: P4_busy = 0;
 12543  001998  0100               	movlb	0	; () banked
 12544  00199A  6BAB               	clrf	_P4_busy& (0+255),b
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;interrupt.c: 431: TIMER5_Off();
 12548  00199C  ECBA  F011         	call	i1_TIMER5_Off	;wreg free
 12549                           
 12550                           ;interrupt.c: 432: Etat_Update(0);
 12551  0019A0  0E00               	movlw	0
 12552  0019A2  EF75  F010         	goto	i1_Etat_Update
 12553  0019A6                     i1l6569:
 12554                           
 12555                           ; BSR set to: 0
 12556  0019A6  51A2               	movf	_nb_100ms_platine& (0+255),w,b
 12557  0019A8  19A4               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 12558  0019AA  A4D8               	btfss	status,2,c
 12559  0019AC  0012               	return	
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 12563  0019AE  0597               	decf	_moteur_indice& (0+255),w,b	;volatile
 12564  0019B0  E108               	bnz	i1l600
 12565                           
 12566                           ; BSR set to: 0
 12567  0019B2  B480               	btfsc	3968,2,c	;volatile
 12568  0019B4  D006               	goto	i1l600
 12569                           
 12570                           ; BSR set to: 0
 12571  0019B6  044E               	decf	_Mouvement_Startup,w,c
 12572  0019B8  E104               	bnz	i1l600
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;interrupt.c: 460: Alarme_On(6);
 12576  0019BA  0E06               	movlw	6
 12577  0019BC  EC6F  F011         	call	i1_Alarme_On
 12578                           
 12579                           ;interrupt.c: 462: } else {
 12580  0019C0  D004               	goto	i1l6581
 12581  0019C2                     i1l600:
 12582                           
 12583                           ; BSR set to: 0
 12584                           ;interrupt.c: 463: P4_busy = 0;
 12585  0019C2  6BAB               	clrf	_P4_busy& (0+255),b
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;interrupt.c: 464: Etat_Update(6);
 12589  0019C4  0E06               	movlw	6
 12590  0019C6  EC75  F010         	call	i1_Etat_Update
 12591  0019CA                     i1l6581:
 12592                           
 12593                           ;interrupt.c: 467: }
 12594                           ;interrupt.c: 469: Buzzer_Etat((unsigned char) 0);
 12595  0019CA  0E00               	movlw	0
 12596  0019CC  EC96  F011         	call	i1_Buzzer_Etat
 12597                           
 12598                           ;interrupt.c: 470: TIMER5_Off();
 12599  0019D0  EFBA  F011         	goto	i1_TIMER5_Off	;wreg free
 12600  0019D4                     __end_ofi1_IRQ_TIMER_5:
 12601                           	opt stack 0
 12602                           tblptru	equ	0xFF8
 12603                           tblptrh	equ	0xFF7
 12604                           tblptrl	equ	0xFF6
 12605                           tablat	equ	0xFF5
 12606                           prodh	equ	0xFF4
 12607                           prodl	equ	0xFF3
 12608                           intcon	equ	0xFF2
 12609                           intcon2	equ	0xFF1
 12610                           intcon3	equ	0xFF0
 12611                           postinc0	equ	0xFEE
 12612                           wreg	equ	0xFE8
 12613                           indf1	equ	0xFE7
 12614                           postdec1	equ	0xFE5
 12615                           fsr1h	equ	0xFE2
 12616                           fsr1l	equ	0xFE1
 12617                           bsr	equ	0xFE0
 12618                           indf2	equ	0xFDF
 12619                           postinc2	equ	0xFDE
 12620                           postdec2	equ	0xFDD
 12621                           fsr2h	equ	0xFDA
 12622                           fsr2l	equ	0xFD9
 12623                           status	equ	0xFD8
 12624                           
 12625 ;; *************** function i1_Alarme_On *****************
 12626 ;; Defined at:
 12627 ;;		line 18 in file "alarme.c"
 12628 ;; Parameters:    Size  Location     Type
 12629 ;;  alarme_new_v    1    wreg     unsigned char 
 12630 ;; Auto vars:     Size  Location     Type
 12631 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 12632 ;; Return value:  Size  Location     Type
 12633 ;;                  1    wreg      void 
 12634 ;; Registers used:
 12635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12636 ;; Tracked objects:
 12637 ;;		On entry : 3F/0
 12638 ;;		On exit  : 0/0
 12639 ;;		Unchanged: 0/0
 12640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12641 ;;      Params:         0       0       0       0
 12642 ;;      Locals:         1       0       0       0
 12643 ;;      Temps:          0       0       0       0
 12644 ;;      Totals:         1       0       0       0
 12645 ;;Total ram usage:        1 bytes
 12646 ;; Hardware stack levels used:    1
 12647 ;; Hardware stack levels required when called:    7
 12648 ;; This function calls:
 12649 ;;		i1_Coupe_Moteur
 12650 ;;		i1_Etat_Update
 12651 ;; This function is called by:
 12652 ;;		i1_IRQ_TIMER_5
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           	psect	text76
 12657  0022DE                     __ptext76:
 12658                           	opt stack 0
 12659  0022DE                     i1_Alarme_On:
 12660                           	opt stack 11
 12661                           
 12662                           ;incstack = 0
 12663                           ;i1Alarme_On@alarme_new_value stored from wreg
 12664  0022DE  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 12665                           
 12666                           ;alarme.c: 22: Etat_Update(1);
 12667  0022E0  0E01               	movlw	1
 12668  0022E2  EC75  F010         	call	i1_Etat_Update
 12669                           
 12670                           ;alarme.c: 23: Alarme = alarme_new_value;
 12671  0022E6  C006  F0A8         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 12672                           
 12673                           ;alarme.c: 24: Coupe_Moteur();
 12674  0022EA  EF02  F011         	goto	i1_Coupe_Moteur	;wreg free
 12675  0022EE                     __end_ofi1_Alarme_On:
 12676                           	opt stack 0
 12677                           tblptru	equ	0xFF8
 12678                           tblptrh	equ	0xFF7
 12679                           tblptrl	equ	0xFF6
 12680                           tablat	equ	0xFF5
 12681                           prodh	equ	0xFF4
 12682                           prodl	equ	0xFF3
 12683                           intcon	equ	0xFF2
 12684                           intcon2	equ	0xFF1
 12685                           intcon3	equ	0xFF0
 12686                           postinc0	equ	0xFEE
 12687                           wreg	equ	0xFE8
 12688                           indf1	equ	0xFE7
 12689                           postdec1	equ	0xFE5
 12690                           fsr1h	equ	0xFE2
 12691                           fsr1l	equ	0xFE1
 12692                           bsr	equ	0xFE0
 12693                           indf2	equ	0xFDF
 12694                           postinc2	equ	0xFDE
 12695                           postdec2	equ	0xFDD
 12696                           fsr2h	equ	0xFDA
 12697                           fsr2l	equ	0xFD9
 12698                           status	equ	0xFD8
 12699                           
 12700 ;; *************** function i1_Etat_Update *****************
 12701 ;; Defined at:
 12702 ;;		line 67 in file "action.c"
 12703 ;; Parameters:    Size  Location     Type
 12704 ;;  etat_new_val    1    wreg     unsigned char 
 12705 ;; Auto vars:     Size  Location     Type
 12706 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 12707 ;; Return value:  Size  Location     Type
 12708 ;;                  1    wreg      void 
 12709 ;; Registers used:
 12710 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12711 ;; Tracked objects:
 12712 ;;		On entry : 0/0
 12713 ;;		On exit  : 0/0
 12714 ;;		Unchanged: 0/0
 12715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12716 ;;      Params:         0       0       0       0
 12717 ;;      Locals:         1       0       0       0
 12718 ;;      Temps:          0       0       0       0
 12719 ;;      Totals:         1       0       0       0
 12720 ;;Total ram usage:        1 bytes
 12721 ;; Hardware stack levels used:    1
 12722 ;; Hardware stack levels required when called:    5
 12723 ;; This function calls:
 12724 ;;		Nothing
 12725 ;; This function is called by:
 12726 ;;		i1_IRQ_TIMER_5
 12727 ;;		i1_Alarme_On
 12728 ;; This function uses a non-reentrant model
 12729 ;;
 12730                           
 12731                           	psect	text77
 12732  0020EA                     __ptext77:
 12733                           	opt stack 0
 12734  0020EA                     i1_Etat_Update:
 12735                           	opt stack 13
 12736                           
 12737                           ;incstack = 0
 12738                           ;i1Etat_Update@etat_new_value stored from wreg
 12739  0020EA  6E05               	movwf	i1Etat_Update@etat_new_value,c
 12740                           
 12741                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 12742  0020EC  504D               	movf	_Etat_Precedent_Index,w,c
 12743  0020EE  0F6A               	addlw	low _Etat_Log
 12744  0020F0  6ED9               	movwf	fsr2l,c
 12745  0020F2  6ADA               	clrf	fsr2h,c
 12746  0020F4  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 12747                           
 12748                           ;action.c: 69: Etat = etat_new_value;
 12749  0020F8  C005  F0A9         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 12750                           
 12751                           ;action.c: 70: Etat_Precedent_Index++;
 12752  0020FC  2A4D               	incf	_Etat_Precedent_Index,f,c
 12753                           
 12754                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 12755  0020FE  0E0A               	movlw	10
 12756  002100  184D               	xorwf	_Etat_Precedent_Index,w,c
 12757  002102  B4D8               	btfsc	status,2,c
 12758                           
 12759                           ;action.c: 72: Etat_Precedent_Index = 0;
 12760  002104  6A4D               	clrf	_Etat_Precedent_Index,c
 12761  002106  0012               	return		;funcret
 12762  002108                     __end_ofi1_Etat_Update:
 12763                           	opt stack 0
 12764                           tblptru	equ	0xFF8
 12765                           tblptrh	equ	0xFF7
 12766                           tblptrl	equ	0xFF6
 12767                           tablat	equ	0xFF5
 12768                           prodh	equ	0xFF4
 12769                           prodl	equ	0xFF3
 12770                           intcon	equ	0xFF2
 12771                           intcon2	equ	0xFF1
 12772                           intcon3	equ	0xFF0
 12773                           postinc0	equ	0xFEE
 12774                           wreg	equ	0xFE8
 12775                           indf1	equ	0xFE7
 12776                           postdec1	equ	0xFE5
 12777                           fsr1h	equ	0xFE2
 12778                           fsr1l	equ	0xFE1
 12779                           bsr	equ	0xFE0
 12780                           indf2	equ	0xFDF
 12781                           postinc2	equ	0xFDE
 12782                           postdec2	equ	0xFDD
 12783                           fsr2h	equ	0xFDA
 12784                           fsr2l	equ	0xFD9
 12785                           status	equ	0xFD8
 12786                           
 12787 ;; *************** function i1_Coupe_Moteur *****************
 12788 ;; Defined at:
 12789 ;;		line 237 in file "action.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;		None
 12792 ;; Auto vars:     Size  Location     Type
 12793 ;;		None
 12794 ;; Return value:  Size  Location     Type
 12795 ;;                  1    wreg      void 
 12796 ;; Registers used:
 12797 ;;		cstack
 12798 ;; Tracked objects:
 12799 ;;		On entry : 0/0
 12800 ;;		On exit  : 0/0
 12801 ;;		Unchanged: 0/0
 12802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12803 ;;      Params:         0       0       0       0
 12804 ;;      Locals:         0       0       0       0
 12805 ;;      Temps:          0       0       0       0
 12806 ;;      Totals:         0       0       0       0
 12807 ;;Total ram usage:        0 bytes
 12808 ;; Hardware stack levels used:    1
 12809 ;; Hardware stack levels required when called:    6
 12810 ;; This function calls:
 12811 ;;		i1_TIMER2_Off
 12812 ;; This function is called by:
 12813 ;;		i1_Alarme_On
 12814 ;; This function uses a non-reentrant model
 12815 ;;
 12816                           
 12817                           	psect	text78
 12818  002204                     __ptext78:
 12819                           	opt stack 0
 12820  002204                     i1_Coupe_Moteur:
 12821                           	opt stack 11
 12822                           
 12823                           ;action.c: 238: TIMER2_Off();
 12824                           
 12825                           ;incstack = 0
 12826  002204  ECD8  F011         	call	i1_TIMER2_Off	;wreg free
 12827                           
 12828                           ;action.c: 243: LATEbits.LATE2 = 0;
 12829  002208  948D               	bcf	3981,2,c	;volatile
 12830                           
 12831                           ;action.c: 250: LATCbits.LATC0 = 0;
 12832  00220A  908B               	bcf	3979,0,c	;volatile
 12833                           
 12834                           ;action.c: 251: LATCbits.LATC1 = 0;
 12835  00220C  928B               	bcf	3979,1,c	;volatile
 12836                           
 12837                           ;action.c: 252: OVDCOND = 0b00000000;
 12838  00220E  6A6B               	clrf	3947,c	;volatile
 12839                           
 12840                           ;action.c: 253: LATD4 = 0;LATD5 = 0;
 12841  002210  988C               	bcf	3980,4,c	;volatile
 12842  002212  9A8C               	bcf	3980,5,c	;volatile
 12843                           
 12844                           ;action.c: 254: LATD6 = 0;LATD7 = 0;
 12845  002214  9C8C               	bcf	3980,6,c	;volatile
 12846  002216  9E8C               	bcf	3980,7,c	;volatile
 12847  002218  0012               	return		;funcret
 12848  00221A                     __end_ofi1_Coupe_Moteur:
 12849                           	opt stack 0
 12850                           tblptru	equ	0xFF8
 12851                           tblptrh	equ	0xFF7
 12852                           tblptrl	equ	0xFF6
 12853                           tablat	equ	0xFF5
 12854                           prodh	equ	0xFF4
 12855                           prodl	equ	0xFF3
 12856                           intcon	equ	0xFF2
 12857                           intcon2	equ	0xFF1
 12858                           intcon3	equ	0xFF0
 12859                           postinc0	equ	0xFEE
 12860                           wreg	equ	0xFE8
 12861                           indf1	equ	0xFE7
 12862                           postdec1	equ	0xFE5
 12863                           fsr1h	equ	0xFE2
 12864                           fsr1l	equ	0xFE1
 12865                           bsr	equ	0xFE0
 12866                           indf2	equ	0xFDF
 12867                           postinc2	equ	0xFDE
 12868                           postdec2	equ	0xFDD
 12869                           fsr2h	equ	0xFDA
 12870                           fsr2l	equ	0xFD9
 12871                           status	equ	0xFD8
 12872                           
 12873 ;; *************** function i1_TIMER2_Off *****************
 12874 ;; Defined at:
 12875 ;;		line 165 in file "timer.c"
 12876 ;; Parameters:    Size  Location     Type
 12877 ;;		None
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;		None
 12880 ;; Return value:  Size  Location     Type
 12881 ;;                  1    wreg      void 
 12882 ;; Registers used:
 12883 ;;		None
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12889 ;;      Params:         0       0       0       0
 12890 ;;      Locals:         0       0       0       0
 12891 ;;      Temps:          0       0       0       0
 12892 ;;      Totals:         0       0       0       0
 12893 ;;Total ram usage:        0 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; Hardware stack levels required when called:    5
 12896 ;; This function calls:
 12897 ;;		Nothing
 12898 ;; This function is called by:
 12899 ;;		i1_Coupe_Moteur
 12900 ;; This function uses a non-reentrant model
 12901 ;;
 12902                           
 12903                           	psect	text79
 12904  0023B0                     __ptext79:
 12905                           	opt stack 0
 12906  0023B0                     i1_TIMER2_Off:
 12907                           	opt stack 11
 12908                           
 12909                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 12910                           
 12911                           ;incstack = 0
 12912  0023B0  929D               	bcf	3997,1,c	;volatile
 12913                           
 12914                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 12915  0023B2  929E               	bcf	3998,1,c	;volatile
 12916  0023B4  0012               	return		;funcret
 12917  0023B6                     __end_ofi1_TIMER2_Off:
 12918                           	opt stack 0
 12919                           tblptru	equ	0xFF8
 12920                           tblptrh	equ	0xFF7
 12921                           tblptrl	equ	0xFF6
 12922                           tablat	equ	0xFF5
 12923                           prodh	equ	0xFF4
 12924                           prodl	equ	0xFF3
 12925                           intcon	equ	0xFF2
 12926                           intcon2	equ	0xFF1
 12927                           intcon3	equ	0xFF0
 12928                           postinc0	equ	0xFEE
 12929                           wreg	equ	0xFE8
 12930                           indf1	equ	0xFE7
 12931                           postdec1	equ	0xFE5
 12932                           fsr1h	equ	0xFE2
 12933                           fsr1l	equ	0xFE1
 12934                           bsr	equ	0xFE0
 12935                           indf2	equ	0xFDF
 12936                           postinc2	equ	0xFDE
 12937                           postdec2	equ	0xFDD
 12938                           fsr2h	equ	0xFDA
 12939                           fsr2l	equ	0xFD9
 12940                           status	equ	0xFD8
 12941                           
 12942 ;; *************** function i1_IRQ_TIMER_0 *****************
 12943 ;; Defined at:
 12944 ;;		line 361 in file "interrupt.c"
 12945 ;; Parameters:    Size  Location     Type
 12946 ;;		None
 12947 ;; Auto vars:     Size  Location     Type
 12948 ;;		None
 12949 ;; Return value:  Size  Location     Type
 12950 ;;                  1    wreg      void 
 12951 ;; Registers used:
 12952 ;;		wreg, status,2, status,0, cstack
 12953 ;; Tracked objects:
 12954 ;;		On entry : 0/0
 12955 ;;		On exit  : 3F/0
 12956 ;;		Unchanged: 0/0
 12957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12958 ;;      Params:         0       0       0       0
 12959 ;;      Locals:         0       0       0       0
 12960 ;;      Temps:          0       0       0       0
 12961 ;;      Totals:         0       0       0       0
 12962 ;;Total ram usage:        0 bytes
 12963 ;; Hardware stack levels used:    1
 12964 ;; Hardware stack levels required when called:    6
 12965 ;; This function calls:
 12966 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 12967 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 12968 ;; This function is called by:
 12969 ;;		_LOW_PRIORITY_IRQ
 12970 ;; This function uses a non-reentrant model
 12971 ;;
 12972                           
 12973                           	psect	text80
 12974  001A94                     __ptext80:
 12975                           	opt stack 0
 12976  001A94                     i1_IRQ_TIMER_0:
 12977                           	opt stack 13
 12978                           
 12979                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 12980                           
 12981                           ;incstack = 0
 12982  001A94  94F2               	bcf	intcon,2,c	;volatile
 12983                           
 12984                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 12985  001A96  0100               	movlb	0	; () banked
 12986  001A98  2BA6               	incf	_nb_s_fonctionnement& (0+255),f,b	;volatile
 12987                           
 12988                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 12989  001A9A  2B9C               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 12990                           
 12991                           ;interrupt.c: 366: delay_s_counter += 1;
 12992  001A9C  2B8B               	incf	_delay_s_counter& (0+255),f,b	;volatile
 12993                           
 12994                           ; BSR set to: 0
 12995                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 12996  001A9E  0E02               	movlw	2
 12997  001AA0  19A6               	xorwf	_nb_s_fonctionnement& (0+255),w,b	;volatile
 12998  001AA2  E01F               	bz	i1l6543
 12999  001AA4  0012               	return	
 13000  001AA6                     i1l6523:
 13001                           
 13002                           ; BSR set to: 0
 13003                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 13004  001AA6  EC7F  F011         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13005                           
 13006                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13007  001AAA  0100               	movlb	0	; () banked
 13008  001AAC  5194               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13009  001AAE  5D95               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13010  001AB0  E203               	bc	i1l578
 13011  001AB2                     i1l6527:
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;interrupt.c: 381: consigne = Consigne_Max;
 13015  001AB2  C095  F096         	movff	_Consigne_Max,_consigne	;volatile
 13016                           
 13017                           ;interrupt.c: 382: } else {
 13018  001AB6  0012               	return	
 13019  001AB8                     i1l578:
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 13023  001AB8  C094  F096         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13024  001ABC  0012               	return	
 13025  001ABE                     i1l6529:
 13026                           
 13027                           ; BSR set to: 0
 13028                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 13029  001ABE  EC77  F011         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13030                           
 13031                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 13032  001AC2  0100               	movlb	0	; () banked
 13033  001AC4  5193               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 13034  001AC6  5D95               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13035  001AC8  E3F4               	bnc	i1l6527
 13036                           
 13037                           ; BSR set to: 0
 13038                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 13039  001ACA  C093  F096         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 13040  001ACE  0012               	return	
 13041  001AD0                     i1l6535:
 13042                           
 13043                           ; BSR set to: 0
 13044                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 13045  001AD0  EC77  F011         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13046                           
 13047                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 13048  001AD4  0100               	movlb	0	; () banked
 13049  001AD6  5192               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 13050  001AD8  5D95               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13051  001ADA  E3EB               	bnc	i1l6527
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 13055  001ADC  C092  F096         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 13056  001AE0  0012               	return	
 13057  001AE2                     i1l6543:
 13058                           
 13059                           ; BSR set to: 0
 13060  001AE2  5197               	movf	_moteur_indice& (0+255),w,b	;volatile
 13061                           
 13062                           ; Switch size 1, requested type "speed"
 13063                           ; Number of cases is 3, Range of values is 1 to 3
 13064                           ; switch strategies available:
 13065                           ; Name         Instructions Cycles
 13066                           ; simple_byte           10     6 (average)
 13067                           ;	Chosen strategy is simple_byte
 13068  001AE4  0A01               	xorlw	1	; case 1
 13069  001AE6  E0DF               	bz	i1l6523
 13070  001AE8  0A03               	xorlw	3	; case 2
 13071  001AEA  E0E9               	bz	i1l6529
 13072  001AEC  0A01               	xorlw	1	; case 3
 13073  001AEE  E0F0               	bz	i1l6535
 13074                           
 13075                           ; BSR set to: 0
 13076  001AF0  0012               	return		;funcret
 13077  001AF2                     __end_ofi1_IRQ_TIMER_0:
 13078                           	opt stack 0
 13079                           tblptru	equ	0xFF8
 13080                           tblptrh	equ	0xFF7
 13081                           tblptrl	equ	0xFF6
 13082                           tablat	equ	0xFF5
 13083                           prodh	equ	0xFF4
 13084                           prodl	equ	0xFF3
 13085                           intcon	equ	0xFF2
 13086                           intcon2	equ	0xFF1
 13087                           intcon3	equ	0xFF0
 13088                           postinc0	equ	0xFEE
 13089                           wreg	equ	0xFE8
 13090                           indf1	equ	0xFE7
 13091                           postdec1	equ	0xFE5
 13092                           fsr1h	equ	0xFE2
 13093                           fsr1l	equ	0xFE1
 13094                           bsr	equ	0xFE0
 13095                           indf2	equ	0xFDF
 13096                           postinc2	equ	0xFDE
 13097                           postdec2	equ	0xFDD
 13098                           fsr2h	equ	0xFDA
 13099                           fsr2l	equ	0xFD9
 13100                           status	equ	0xFD8
 13101                           
 13102 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 13103 ;; Defined at:
 13104 ;;		line 864 in file "interrupt.c"
 13105 ;; Parameters:    Size  Location     Type
 13106 ;;		None
 13107 ;; Auto vars:     Size  Location     Type
 13108 ;;		None
 13109 ;; Return value:  Size  Location     Type
 13110 ;;                  1    wreg      void 
 13111 ;; Registers used:
 13112 ;;		wreg, status,2, status,0
 13113 ;; Tracked objects:
 13114 ;;		On entry : 0/0
 13115 ;;		On exit  : 0/0
 13116 ;;		Unchanged: 0/0
 13117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13118 ;;      Params:         0       0       0       0
 13119 ;;      Locals:         0       0       0       0
 13120 ;;      Temps:          0       0       0       0
 13121 ;;      Totals:         0       0       0       0
 13122 ;;Total ram usage:        0 bytes
 13123 ;; Hardware stack levels used:    1
 13124 ;; Hardware stack levels required when called:    5
 13125 ;; This function calls:
 13126 ;;		Nothing
 13127 ;; This function is called by:
 13128 ;;		i1_IRQ_TIMER_0
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           	psect	text81
 13133  0022EE                     __ptext81:
 13134                           	opt stack 0
 13135  0022EE                     i1_Surveillance_Consommation_Moteur_2_Activer:
 13136                           	opt stack 13
 13137                           
 13138                           ;interrupt.c: 865: if (Surveillance_Consommation_Moteur_2 != 1) {
 13139                           
 13140                           ; BSR set to: 0
 13141                           ;incstack = 0
 13142  0022EE  0448               	decf	_Surveillance_Consommation_Moteur_2,w,c
 13143  0022F0  B4D8               	btfsc	status,2,c
 13144  0022F2  0012               	return	
 13145                           
 13146                           ;interrupt.c: 866: Surveillance_Consommation_Moteur_2 = 1;
 13147  0022F4  0E01               	movlw	1
 13148  0022F6  6E48               	movwf	_Surveillance_Consommation_Moteur_2,c
 13149                           
 13150                           ;interrupt.c: 867: INTCON3bits.INT2IF = 0;
 13151  0022F8  92F0               	bcf	intcon3,1,c	;volatile
 13152                           
 13153                           ;interrupt.c: 868: INTCON3bits.INT2IE = 1;
 13154  0022FA  88F0               	bsf	intcon3,4,c	;volatile
 13155  0022FC  0C01               	retlw	1	;funcret
 13156  0022FE                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 13157                           	opt stack 0
 13158                           tblptru	equ	0xFF8
 13159                           tblptrh	equ	0xFF7
 13160                           tblptrl	equ	0xFF6
 13161                           tablat	equ	0xFF5
 13162                           prodh	equ	0xFF4
 13163                           prodl	equ	0xFF3
 13164                           intcon	equ	0xFF2
 13165                           intcon2	equ	0xFF1
 13166                           intcon3	equ	0xFF0
 13167                           postinc0	equ	0xFEE
 13168                           wreg	equ	0xFE8
 13169                           indf1	equ	0xFE7
 13170                           postdec1	equ	0xFE5
 13171                           fsr1h	equ	0xFE2
 13172                           fsr1l	equ	0xFE1
 13173                           bsr	equ	0xFE0
 13174                           indf2	equ	0xFDF
 13175                           postinc2	equ	0xFDE
 13176                           postdec2	equ	0xFDD
 13177                           fsr2h	equ	0xFDA
 13178                           fsr2l	equ	0xFD9
 13179                           status	equ	0xFD8
 13180                           
 13181 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 13182 ;; Defined at:
 13183 ;;		line 848 in file "interrupt.c"
 13184 ;; Parameters:    Size  Location     Type
 13185 ;;		None
 13186 ;; Auto vars:     Size  Location     Type
 13187 ;;		None
 13188 ;; Return value:  Size  Location     Type
 13189 ;;                  1    wreg      void 
 13190 ;; Registers used:
 13191 ;;		wreg, status,2, status,0
 13192 ;; Tracked objects:
 13193 ;;		On entry : 0/0
 13194 ;;		On exit  : 0/0
 13195 ;;		Unchanged: 0/0
 13196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13197 ;;      Params:         0       0       0       0
 13198 ;;      Locals:         0       0       0       0
 13199 ;;      Temps:          0       0       0       0
 13200 ;;      Totals:         0       0       0       0
 13201 ;;Total ram usage:        0 bytes
 13202 ;; Hardware stack levels used:    1
 13203 ;; Hardware stack levels required when called:    5
 13204 ;; This function calls:
 13205 ;;		Nothing
 13206 ;; This function is called by:
 13207 ;;		i1_IRQ_TIMER_0
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           	psect	text82
 13212  0022FE                     __ptext82:
 13213                           	opt stack 0
 13214  0022FE                     i1_Surveillance_Consommation_Moteur_1_Activer:
 13215                           	opt stack 13
 13216                           
 13217                           ;interrupt.c: 849: if (Surveillance_Consommation_Moteur_1 != 1) {
 13218                           
 13219                           ;incstack = 0
 13220  0022FE  0449               	decf	_Surveillance_Consommation_Moteur_1,w,c
 13221  002300  B4D8               	btfsc	status,2,c
 13222  002302  0012               	return	
 13223                           
 13224                           ;interrupt.c: 850: Surveillance_Consommation_Moteur_1 = 1;
 13225  002304  0E01               	movlw	1
 13226  002306  6E49               	movwf	_Surveillance_Consommation_Moteur_1,c
 13227                           
 13228                           ;interrupt.c: 851: INTCON3bits.INT1IF = 0;
 13229  002308  90F0               	bcf	intcon3,0,c	;volatile
 13230                           
 13231                           ;interrupt.c: 852: INTCON3bits.INT1IE = 1;
 13232  00230A  86F0               	bsf	intcon3,3,c	;volatile
 13233  00230C  0C01               	retlw	1	;funcret
 13234  00230E                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 13235                           	opt stack 0
 13236                           tblptru	equ	0xFF8
 13237                           tblptrh	equ	0xFF7
 13238                           tblptrl	equ	0xFF6
 13239                           tablat	equ	0xFF5
 13240                           prodh	equ	0xFF4
 13241                           prodl	equ	0xFF3
 13242                           intcon	equ	0xFF2
 13243                           intcon2	equ	0xFF1
 13244                           intcon3	equ	0xFF0
 13245                           postinc0	equ	0xFEE
 13246                           wreg	equ	0xFE8
 13247                           indf1	equ	0xFE7
 13248                           postdec1	equ	0xFE5
 13249                           fsr1h	equ	0xFE2
 13250                           fsr1l	equ	0xFE1
 13251                           bsr	equ	0xFE0
 13252                           indf2	equ	0xFDF
 13253                           postinc2	equ	0xFDE
 13254                           postdec2	equ	0xFDD
 13255                           fsr2h	equ	0xFDA
 13256                           fsr2l	equ	0xFD9
 13257                           status	equ	0xFD8
 13258                           
 13259 ;; *************** function i1_IRQ_PWM *****************
 13260 ;; Defined at:
 13261 ;;		line 477 in file "interrupt.c"
 13262 ;; Parameters:    Size  Location     Type
 13263 ;;		None
 13264 ;; Auto vars:     Size  Location     Type
 13265 ;;		None
 13266 ;; Return value:  Size  Location     Type
 13267 ;;                  1    wreg      void 
 13268 ;; Registers used:
 13269 ;;		None
 13270 ;; Tracked objects:
 13271 ;;		On entry : 0/0
 13272 ;;		On exit  : 0/0
 13273 ;;		Unchanged: 0/0
 13274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13275 ;;      Params:         0       0       0       0
 13276 ;;      Locals:         0       0       0       0
 13277 ;;      Temps:          0       0       0       0
 13278 ;;      Totals:         0       0       0       0
 13279 ;;Total ram usage:        0 bytes
 13280 ;; Hardware stack levels used:    1
 13281 ;; Hardware stack levels required when called:    5
 13282 ;; This function calls:
 13283 ;;		Nothing
 13284 ;; This function is called by:
 13285 ;;		_LOW_PRIORITY_IRQ
 13286 ;; This function uses a non-reentrant model
 13287 ;;
 13288                           
 13289                           	psect	text83
 13290  0023D2                     __ptext83:
 13291                           	opt stack 0
 13292  0023D2                     i1_IRQ_PWM:
 13293                           	opt stack 14
 13294                           
 13295                           ;interrupt.c: 479: PTIF = 0;
 13296                           
 13297                           ;incstack = 0
 13298  0023D2  98A4               	bcf	4004,4,c	;volatile
 13299  0023D4  0012               	return		;funcret
 13300  0023D6                     __end_ofi1_IRQ_PWM:
 13301                           	opt stack 0
 13302                           tblptru	equ	0xFF8
 13303                           tblptrh	equ	0xFF7
 13304                           tblptrl	equ	0xFF6
 13305                           tablat	equ	0xFF5
 13306                           prodh	equ	0xFF4
 13307                           prodl	equ	0xFF3
 13308                           intcon	equ	0xFF2
 13309                           intcon2	equ	0xFF1
 13310                           intcon3	equ	0xFF0
 13311                           postinc0	equ	0xFEE
 13312                           wreg	equ	0xFE8
 13313                           indf1	equ	0xFE7
 13314                           postdec1	equ	0xFE5
 13315                           fsr1h	equ	0xFE2
 13316                           fsr1l	equ	0xFE1
 13317                           bsr	equ	0xFE0
 13318                           indf2	equ	0xFDF
 13319                           postinc2	equ	0xFDE
 13320                           postdec2	equ	0xFDD
 13321                           fsr2h	equ	0xFDA
 13322                           fsr2l	equ	0xFD9
 13323                           status	equ	0xFD8
 13324                           
 13325 ;; *************** function i1_IRQ_ADC *****************
 13326 ;; Defined at:
 13327 ;;		line 482 in file "interrupt.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;		None
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;		None
 13332 ;; Return value:  Size  Location     Type
 13333 ;;                  1    wreg      void 
 13334 ;; Registers used:
 13335 ;;		wreg, status,2, status,0
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 3F/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13341 ;;      Params:         0       0       0       0
 13342 ;;      Locals:         0       0       0       0
 13343 ;;      Temps:          3       0       0       0
 13344 ;;      Totals:         3       0       0       0
 13345 ;;Total ram usage:        3 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    5
 13348 ;; This function calls:
 13349 ;;		Nothing
 13350 ;; This function is called by:
 13351 ;;		_LOW_PRIORITY_IRQ
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355                           	psect	text84
 13356  000FAA                     __ptext84:
 13357                           	opt stack 0
 13358  000FAA                     i1_IRQ_ADC:
 13359                           	opt stack 14
 13360                           
 13361                           ;interrupt.c: 483: switch (moteur_indice) {
 13362                           
 13363                           ;incstack = 0
 13364  000FAA  D0C7               	goto	i1l6641
 13365  000FAC                     i1l610:
 13366                           
 13367                           ; BSR set to: 0
 13368                           ;interrupt.c: 485: Image_Courant_Moteur_1 = ADRESH;
 13369  000FAC  CFC4 F099          	movff	4036,_Image_Courant_Moteur_1	;volatile
 13370                           
 13371                           ;interrupt.c: 486: Nouvelle_Valeur_ADC = 1;
 13372  000FB0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13373                           
 13374                           ;interrupt.c: 488: ADIF = 0;
 13375  000FB2  9C9E               	bcf	3998,6,c	;volatile
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;interrupt.c: 491: erreur = consigne - Image_Courant_Moteur_1;
 13379  000FB4  5199               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 13380  000FB6  5D96               	subwf	_consigne& (0+255),w,b	;volatile
 13381  000FB8  6F84               	movwf	_erreur& (0+255),b	;volatile
 13382  000FBA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13383  000FBC  A0D8               	btfss	status,0,c
 13384  000FBE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13385                           
 13386                           ;interrupt.c: 492: if (erreur >= 10) duty++;
 13387  000FC0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13388  000FC2  D008               	goto	i1l6591
 13389  000FC4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13390  000FC6  E103               	bnz	i1u431_20
 13391  000FC8  0E0A               	movlw	10
 13392  000FCA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13393  000FCC  E303               	bnc	i1l6591
 13394  000FCE                     i1u431_20:
 13395                           
 13396                           ; BSR set to: 0
 13397  000FCE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13398  000FD0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13399  000FD2  D006               	goto	i1l612
 13400  000FD4                     i1l6591:
 13401                           
 13402                           ; BSR set to: 0
 13403                           ;interrupt.c: 494: else if (erreur < 0) duty += erreur;
 13404  000FD4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13405  000FD6  D004               	goto	i1l612
 13406                           
 13407                           ; BSR set to: 0
 13408  000FD8  5184               	movf	_erreur& (0+255),w,b	;volatile
 13409  000FDA  2786               	addwf	_duty& (0+255),f,b	;volatile
 13410  000FDC  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13411  000FDE  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 13412  000FE0                     i1l612:
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;interrupt.c: 499: if (duty > PTPERL) duty = PTPERL;
 13416  000FE0  507B               	movf	3963,w,c	;volatile
 13417  000FE2  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13418  000FE4  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13419  000FE6  5186               	movf	_duty& (0+255),w,b	;volatile
 13420  000FE8  5C05               	subwf	??i1_IRQ_ADC,w,c
 13421  000FEA  5006               	movf	??i1_IRQ_ADC+1,w,c
 13422  000FEC  0A80               	xorlw	128
 13423  000FEE  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13424  000FF0  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13425  000FF2  0A80               	xorlw	128
 13426  000FF4  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13427  000FF6  E203               	bc	i1l6597
 13428                           
 13429                           ; BSR set to: 0
 13430  000FF8  CF7B F086          	movff	3963,_duty	;volatile
 13431  000FFC  D003               	goto	L5
 13432  000FFE                     i1l6597:
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;interrupt.c: 500: else if (duty < 0) duty = 0;
 13436  000FFE  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13437  001000  D002               	goto	i1l6601
 13438                           
 13439                           ; BSR set to: 0
 13440  001002  6B86               	clrf	_duty& (0+255),b	;volatile
 13441  001004                     L5:
 13442  001004  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13443  001006                     i1l6601:
 13444                           
 13445                           ; BSR set to: 0
 13446                           ;interrupt.c: 501: PDC0L = (char) (duty << 2);
 13447  001006  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13448  001008  46E8               	rlncf	wreg,f,c
 13449  00100A  0BFC               	andlw	252
 13450  00100C  6E79               	movwf	3961,c	;volatile
 13451                           
 13452                           ;interrupt.c: 502: PDC0H = (char) ((duty << 2) >> 8);
 13453  00100E  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 13454  001012  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 13455  001016  90D8               	bcf	status,0,c
 13456  001018  3605               	rlcf	??i1_IRQ_ADC,f,c
 13457  00101A  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13458  00101C  90D8               	bcf	status,0,c
 13459  00101E  3605               	rlcf	??i1_IRQ_ADC,f,c
 13460  001020  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13461  001022  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 13462  001026  6A06               	clrf	??i1_IRQ_ADC+1,c
 13463  001028  BE05               	btfsc	??i1_IRQ_ADC,7,c
 13464  00102A  6806               	setf	??i1_IRQ_ADC+1,c
 13465  00102C  5005               	movf	??i1_IRQ_ADC,w,c
 13466  00102E  6E78               	movwf	3960,c	;volatile
 13467                           
 13468                           ;interrupt.c: 504: break;
 13469  001030  0012               	return	
 13470  001032                     i1l618:
 13471                           
 13472                           ; BSR set to: 0
 13473                           ;interrupt.c: 511: Image_Courant_Moteur_2 = ADRESH;
 13474  001032  CFC4 F098          	movff	4036,_Image_Courant_Moteur_2	;volatile
 13475                           
 13476                           ;interrupt.c: 512: Nouvelle_Valeur_ADC = 1;
 13477  001036  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13478                           
 13479                           ;interrupt.c: 514: ADIF = 0;
 13480  001038  9C9E               	bcf	3998,6,c	;volatile
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;interrupt.c: 517: erreur = consigne - Image_Courant_Moteur_2;
 13484  00103A  5198               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 13485  00103C  5D96               	subwf	_consigne& (0+255),w,b	;volatile
 13486  00103E  6F84               	movwf	_erreur& (0+255),b	;volatile
 13487  001040  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13488  001042  A0D8               	btfss	status,0,c
 13489  001044  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13490                           
 13491                           ;interrupt.c: 518: if (erreur >= 10) duty++;
 13492  001046  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13493  001048  D008               	goto	i1l6607
 13494  00104A  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13495  00104C  E103               	bnz	i1u435_20
 13496  00104E  0E0A               	movlw	10
 13497  001050  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13498  001052  E303               	bnc	i1l6607
 13499  001054                     i1u435_20:
 13500                           
 13501                           ; BSR set to: 0
 13502  001054  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13503  001056  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13504  001058  D005               	goto	i1l6611
 13505  00105A                     i1l6607:
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;interrupt.c: 519: else if (erreur < 0) duty--;
 13509  00105A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13510  00105C  D003               	goto	i1l6611
 13511                           
 13512                           ; BSR set to: 0
 13513  00105E  0786               	decf	_duty& (0+255),f,b	;volatile
 13514  001060  A0D8               	btfss	status,0,c
 13515  001062  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 13516  001064                     i1l6611:
 13517                           
 13518                           ; BSR set to: 0
 13519                           ;interrupt.c: 523: if (duty > PTPERL) duty = PTPERL;
 13520  001064  507B               	movf	3963,w,c	;volatile
 13521  001066  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13522  001068  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13523  00106A  5186               	movf	_duty& (0+255),w,b	;volatile
 13524  00106C  5C05               	subwf	??i1_IRQ_ADC,w,c
 13525  00106E  5006               	movf	??i1_IRQ_ADC+1,w,c
 13526  001070  0A80               	xorlw	128
 13527  001072  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13528  001074  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13529  001076  0A80               	xorlw	128
 13530  001078  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13531  00107A  E203               	bc	i1l6615
 13532                           
 13533                           ; BSR set to: 0
 13534  00107C  CF7B F086          	movff	3963,_duty	;volatile
 13535  001080  D003               	goto	L6
 13536  001082                     i1l6615:
 13537                           
 13538                           ; BSR set to: 0
 13539                           ;interrupt.c: 524: else if (duty < 0) duty = 0;
 13540  001082  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13541  001084  D002               	goto	i1l6619
 13542                           
 13543                           ; BSR set to: 0
 13544  001086  6B86               	clrf	_duty& (0+255),b	;volatile
 13545  001088                     L6:
 13546  001088  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13547  00108A                     i1l6619:
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;interrupt.c: 525: PDC1L = (char) (duty << 2);
 13551  00108A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13552  00108C  46E8               	rlncf	wreg,f,c
 13553  00108E  0BFC               	andlw	252
 13554  001090  6E77               	movwf	3959,c	;volatile
 13555                           
 13556                           ;interrupt.c: 526: PDC1H = (char) ((duty << 2) >> 8);
 13557  001092  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 13558  001096  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 13559  00109A  90D8               	bcf	status,0,c
 13560  00109C  3605               	rlcf	??i1_IRQ_ADC,f,c
 13561  00109E  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13562  0010A0  90D8               	bcf	status,0,c
 13563  0010A2  3605               	rlcf	??i1_IRQ_ADC,f,c
 13564  0010A4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13565  0010A6  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 13566  0010AA  6A06               	clrf	??i1_IRQ_ADC+1,c
 13567  0010AC  BE05               	btfsc	??i1_IRQ_ADC,7,c
 13568  0010AE  6806               	setf	??i1_IRQ_ADC+1,c
 13569  0010B0  5005               	movf	??i1_IRQ_ADC,w,c
 13570  0010B2  6E76               	movwf	3958,c	;volatile
 13571                           
 13572                           ;interrupt.c: 528: break;
 13573  0010B4  0012               	return	
 13574  0010B6                     i1l625:
 13575                           
 13576                           ; BSR set to: 0
 13577                           ;interrupt.c: 532: Image_Courant_Moteur_2 = ADRESH;
 13578  0010B6  CFC4 F098          	movff	4036,_Image_Courant_Moteur_2	;volatile
 13579                           
 13580                           ;interrupt.c: 533: Nouvelle_Valeur_ADC = 1;
 13581  0010BA  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 13582                           
 13583                           ;interrupt.c: 535: ADIF = 0;
 13584  0010BC  9C9E               	bcf	3998,6,c	;volatile
 13585                           
 13586                           ; BSR set to: 0
 13587                           ;interrupt.c: 538: erreur = consigne - Image_Courant_Moteur_2;
 13588  0010BE  5198               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 13589  0010C0  5D96               	subwf	_consigne& (0+255),w,b	;volatile
 13590  0010C2  6F84               	movwf	_erreur& (0+255),b	;volatile
 13591  0010C4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 13592  0010C6  A0D8               	btfss	status,0,c
 13593  0010C8  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 13594                           
 13595                           ;interrupt.c: 539: if (erreur >= 10) duty++;
 13596  0010CA  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 13597  0010CC  D008               	goto	i1l6625
 13598  0010CE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 13599  0010D0  E103               	bnz	i1u439_20
 13600  0010D2  0E0A               	movlw	10
 13601  0010D4  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 13602  0010D6  E303               	bnc	i1l6625
 13603  0010D8                     i1u439_20:
 13604                           
 13605                           ; BSR set to: 0
 13606  0010D8  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 13607  0010DA  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 13608  0010DC  D005               	goto	i1l6629
 13609  0010DE                     i1l6625:
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;interrupt.c: 540: else if (erreur < 0) duty--;
 13613  0010DE  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 13614  0010E0  D003               	goto	i1l6629
 13615                           
 13616                           ; BSR set to: 0
 13617  0010E2  0786               	decf	_duty& (0+255),f,b	;volatile
 13618  0010E4  A0D8               	btfss	status,0,c
 13619  0010E6  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 13620  0010E8                     i1l6629:
 13621                           
 13622                           ; BSR set to: 0
 13623                           ;interrupt.c: 544: if (duty > PTPERL) duty = PTPERL;
 13624  0010E8  507B               	movf	3963,w,c	;volatile
 13625  0010EA  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 13626  0010EC  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 13627  0010EE  5186               	movf	_duty& (0+255),w,b	;volatile
 13628  0010F0  5C05               	subwf	??i1_IRQ_ADC,w,c
 13629  0010F2  5006               	movf	??i1_IRQ_ADC+1,w,c
 13630  0010F4  0A80               	xorlw	128
 13631  0010F6  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 13632  0010F8  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 13633  0010FA  0A80               	xorlw	128
 13634  0010FC  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 13635  0010FE  E203               	bc	i1l6633
 13636                           
 13637                           ; BSR set to: 0
 13638  001100  CF7B F086          	movff	3963,_duty	;volatile
 13639  001104  D003               	goto	L7
 13640  001106                     i1l6633:
 13641                           
 13642                           ; BSR set to: 0
 13643                           ;interrupt.c: 545: else if (duty < 0) duty = 0;
 13644  001106  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 13645  001108  D002               	goto	i1l6637
 13646                           
 13647                           ; BSR set to: 0
 13648  00110A  6B86               	clrf	_duty& (0+255),b	;volatile
 13649  00110C                     L7:
 13650  00110C  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 13651  00110E                     i1l6637:
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;interrupt.c: 546: PDC1L = (char) (duty << 2);
 13655  00110E  4586               	rlncf	_duty& (0+255),w,b	;volatile
 13656  001110  46E8               	rlncf	wreg,f,c
 13657  001112  0BFC               	andlw	252
 13658  001114  6E77               	movwf	3959,c	;volatile
 13659                           
 13660                           ;interrupt.c: 547: PDC1H = (char) ((duty << 2) >> 8);
 13661  001116  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 13662  00111A  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 13663  00111E  90D8               	bcf	status,0,c
 13664  001120  3605               	rlcf	??i1_IRQ_ADC,f,c
 13665  001122  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13666  001124  90D8               	bcf	status,0,c
 13667  001126  3605               	rlcf	??i1_IRQ_ADC,f,c
 13668  001128  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 13669  00112A  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 13670  00112E  6A06               	clrf	??i1_IRQ_ADC+1,c
 13671  001130  BE05               	btfsc	??i1_IRQ_ADC,7,c
 13672  001132  6806               	setf	??i1_IRQ_ADC+1,c
 13673  001134  5005               	movf	??i1_IRQ_ADC,w,c
 13674  001136  6E76               	movwf	3958,c	;volatile
 13675                           
 13676                           ;interrupt.c: 549: break;
 13677  001138  0012               	return	
 13678  00113A                     i1l6641:
 13679  00113A  0100               	movlb	0	; () banked
 13680  00113C  5197               	movf	_moteur_indice& (0+255),w,b	;volatile
 13681                           
 13682                           ; Switch size 1, requested type "speed"
 13683                           ; Number of cases is 3, Range of values is 1 to 3
 13684                           ; switch strategies available:
 13685                           ; Name         Instructions Cycles
 13686                           ; simple_byte           10     6 (average)
 13687                           ;	Chosen strategy is simple_byte
 13688  00113E  0A01               	xorlw	1	; case 1
 13689  001140  E101 D734          	bz	i1l610
 13690  001144  0A03               	xorlw	3	; case 2
 13691  001146  E101 D774          	bz	i1l618
 13692  00114A  0A01               	xorlw	1	; case 3
 13693  00114C  E0B4               	bz	i1l625
 13694                           
 13695                           ; BSR set to: 0
 13696  00114E  0012               	return		;funcret
 13697  001150                     __end_ofi1_IRQ_ADC:
 13698                           	opt stack 0
 13699                           tblptru	equ	0xFF8
 13700                           tblptrh	equ	0xFF7
 13701                           tblptrl	equ	0xFF6
 13702                           tablat	equ	0xFF5
 13703                           prodh	equ	0xFF4
 13704                           prodl	equ	0xFF3
 13705                           intcon	equ	0xFF2
 13706                           intcon2	equ	0xFF1
 13707                           intcon3	equ	0xFF0
 13708                           postinc0	equ	0xFEE
 13709                           wreg	equ	0xFE8
 13710                           indf1	equ	0xFE7
 13711                           postdec1	equ	0xFE5
 13712                           fsr1h	equ	0xFE2
 13713                           fsr1l	equ	0xFE1
 13714                           bsr	equ	0xFE0
 13715                           indf2	equ	0xFDF
 13716                           postinc2	equ	0xFDE
 13717                           postdec2	equ	0xFDD
 13718                           fsr2h	equ	0xFDA
 13719                           fsr2l	equ	0xFD9
 13720                           status	equ	0xFD8
 13721                           
 13722 ;; *************** function _SPI_ISR *****************
 13723 ;; Defined at:
 13724 ;;		line 169 in file "spi.c"
 13725 ;; Parameters:    Size  Location     Type
 13726 ;;		None
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;  i               1    6[COMRAM] unsigned char 
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  1    wreg      void 
 13731 ;; Registers used:
 13732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13738 ;;      Params:         0       0       0       0
 13739 ;;      Locals:         1       0       0       0
 13740 ;;      Temps:          2       0       0       0
 13741 ;;      Totals:         3       0       0       0
 13742 ;;Total ram usage:        3 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    5
 13745 ;; This function calls:
 13746 ;;		Nothing
 13747 ;; This function is called by:
 13748 ;;		_LOW_PRIORITY_IRQ
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           	psect	text85
 13753  001278                     __ptext85:
 13754                           	opt stack 0
 13755  001278                     _SPI_ISR:
 13756                           	opt stack 14
 13757                           
 13758                           ;spi.c: 171: unsigned char i;
 13759                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 13760                           
 13761                           ; BSR set to: 0
 13762                           ;incstack = 0
 13763  001278  969E               	bcf	3998,3,c	;volatile
 13764                           
 13765                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 13766  00127A  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 13767                           
 13768                           ;spi.c: 180: switch(SPI_MODE){
 13769  00127E  D075               	goto	i1l6461
 13770  001280                     i1l6425:
 13771                           
 13772                           ;spi.c: 196: if (i!=0x0D){
 13773  001280  0E0D               	movlw	13
 13774  001282  1807               	xorwf	SPI_ISR@i,w,c
 13775  001284  E012               	bz	i1l1628
 13776                           
 13777                           ;spi.c: 197: spiTxIndex++;
 13778  001286  2A44               	incf	_spiTxIndex,f,c	;volatile
 13779                           
 13780                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 13781  001288  0E40               	movlw	low _spiTxBuffer
 13782  00128A  2444               	addwf	_spiTxIndex,w,c	;volatile
 13783  00128C  6ED9               	movwf	fsr2l,c
 13784  00128E  6ADA               	clrf	fsr2h,c
 13785  001290  0E01               	movlw	high _spiTxBuffer
 13786  001292  22DA               	addwfc	fsr2h,f,c
 13787  001294  50DF               	movf	indf2,w,c
 13788  001296  E009               	bz	i1l1628
 13789                           
 13790                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 13791  001298  0E40               	movlw	low _spiTxBuffer
 13792  00129A  2444               	addwf	_spiTxIndex,w,c	;volatile
 13793  00129C  6ED9               	movwf	fsr2l,c
 13794  00129E  6ADA               	clrf	fsr2h,c
 13795  0012A0  0E01               	movlw	high _spiTxBuffer
 13796  0012A2  22DA               	addwfc	fsr2h,f,c
 13797  0012A4  50DF               	movf	indf2,w,c
 13798  0012A6  6EC9               	movwf	4041,c	;volatile
 13799                           
 13800                           ;spi.c: 201: } else {
 13801  0012A8  0012               	return	
 13802  0012AA                     i1l1628:
 13803                           
 13804                           ;spi.c: 202: SPI_MODE = 0;
 13805  0012AA  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 13806  0012AC  0012               	return	
 13807  0012AE                     i1l6433:
 13808                           
 13809                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 13810  0012AE  0E00               	movlw	low _spiRxBuffer
 13811  0012B0  2443               	addwf	_spiRxIndex,w,c	;volatile
 13812  0012B2  6ED9               	movwf	fsr2l,c
 13813  0012B4  6ADA               	clrf	fsr2h,c
 13814  0012B6  0E02               	movlw	high _spiRxBuffer
 13815  0012B8  22DA               	addwfc	fsr2h,f,c
 13816  0012BA  C007  FFDF         	movff	SPI_ISR@i,indf2
 13817                           
 13818                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 13819  0012BE  0E00               	movlw	low _spiRxBuffer
 13820  0012C0  2443               	addwf	_spiRxIndex,w,c	;volatile
 13821  0012C2  6ED9               	movwf	fsr2l,c
 13822  0012C4  6ADA               	clrf	fsr2h,c
 13823  0012C6  0E02               	movlw	high _spiRxBuffer
 13824  0012C8  22DA               	addwfc	fsr2h,f,c
 13825  0012CA  50DF               	movf	indf2,w,c
 13826  0012CC  0E01               	movlw	1
 13827  0012CE  A4D8               	btfss	status,2,c
 13828  0012D0  0E00               	movlw	0
 13829  0012D2  6E05               	movwf	??_SPI_ISR& (0+255),c
 13830  0012D4  0E00               	movlw	low _spiRxBuffer
 13831  0012D6  2443               	addwf	_spiRxIndex,w,c	;volatile
 13832  0012D8  6ED9               	movwf	fsr2l,c
 13833  0012DA  6ADA               	clrf	fsr2h,c
 13834  0012DC  0E02               	movlw	high _spiRxBuffer
 13835  0012DE  22DA               	addwfc	fsr2h,f,c
 13836  0012E0  0E0D               	movlw	13
 13837  0012E2  18DE               	xorwf	postinc2,w,c
 13838  0012E4  0E01               	movlw	1
 13839  0012E6  A4D8               	btfss	status,2,c
 13840  0012E8  0E00               	movlw	0
 13841  0012EA  1005               	iorwf	??_SPI_ISR,w,c
 13842  0012EC  A0E8               	btfss	wreg,0,c
 13843  0012EE  D031               	goto	i1l6457
 13844                           
 13845                           ;spi.c: 223: if (spiRxIndex != 0) {
 13846  0012F0  5043               	movf	_spiRxIndex,w,c	;volatile
 13847  0012F2  E015               	bz	i1l6445
 13848                           
 13849                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 13850  0012F4  6A07               	clrf	SPI_ISR@i,c
 13851  0012F6  D00F               	goto	i1l6443
 13852  0012F8                     i1l6439:
 13853                           
 13854                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 13855  0012F8  0E00               	movlw	low _spiRxBuffer
 13856  0012FA  2407               	addwf	SPI_ISR@i,w,c
 13857  0012FC  6ED9               	movwf	fsr2l,c
 13858  0012FE  6ADA               	clrf	fsr2h,c
 13859  001300  0E02               	movlw	high _spiRxBuffer
 13860  001302  22DA               	addwfc	fsr2h,f,c
 13861  001304  0E00               	movlw	low _SPI_RX_TEXT
 13862  001306  2407               	addwf	SPI_ISR@i,w,c
 13863  001308  6EE1               	movwf	fsr1l,c
 13864  00130A  6AE2               	clrf	fsr1h,c
 13865  00130C  0E01               	movlw	high _SPI_RX_TEXT
 13866  00130E  22E2               	addwfc	fsr1h,f,c
 13867  001310  CFDF FFE7          	movff	indf2,indf1
 13868  001314  2A07               	incf	SPI_ISR@i,f,c
 13869  001316                     i1l6443:
 13870  001316  5043               	movf	_spiRxIndex,w,c	;volatile
 13871  001318  5C07               	subwf	SPI_ISR@i,w,c
 13872  00131A  E3EE               	bnc	i1l6439
 13873                           
 13874                           ;spi.c: 226: }
 13875                           ;spi.c: 227: SPI_full = 1;
 13876  00131C  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 13877  00131E                     i1l6445:
 13878                           
 13879                           ;spi.c: 228: }
 13880                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 13881  00131E  0E00               	movlw	low _SPI_RX_TEXT
 13882  001320  2443               	addwf	_spiRxIndex,w,c	;volatile
 13883  001322  6ED9               	movwf	fsr2l,c
 13884  001324  6ADA               	clrf	fsr2h,c
 13885  001326  0E01               	movlw	high _SPI_RX_TEXT
 13886  001328  22DA               	addwfc	fsr2h,f,c
 13887  00132A  0E00               	movlw	0
 13888  00132C  6ADF               	clrf	indf2,c
 13889                           
 13890                           ;spi.c: 230: spiRxIndex = 0;
 13891  00132E  6A43               	clrf	_spiRxIndex,c	;volatile
 13892                           
 13893                           ;spi.c: 231: } else {
 13894  001330  0012               	return	
 13895  001332                     i1l6449:
 13896                           
 13897                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 13898  001332  5043               	movf	_spiRxIndex,w,c	;volatile
 13899  001334  6E05               	movwf	??_SPI_ISR& (0+255),c
 13900  001336  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 13901  001338  2A05               	incf	??_SPI_ISR,f,c
 13902  00133A  0E00               	movlw	0
 13903  00133C  2206               	addwfc	??_SPI_ISR+1,f,c
 13904  00133E  0E40               	movlw	64
 13905  001340  1805               	xorwf	??_SPI_ISR,w,c
 13906  001342  1006               	iorwf	??_SPI_ISR+1,w,c
 13907  001344  E104               	bnz	i1l6453
 13908                           
 13909                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 13910  001346  0101               	movlb	1	; () banked
 13911  001348  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 13912                           
 13913                           ;spi.c: 236: spiRxIndex = 0;
 13914  00134A  6A43               	clrf	_spiRxIndex,c	;volatile
 13915                           
 13916                           ;spi.c: 239: } else {
 13917  00134C  0012               	return	
 13918  00134E                     i1l6453:
 13919                           
 13920                           ;spi.c: 240: spiRxIndex++;
 13921  00134E  2A43               	incf	_spiRxIndex,f,c	;volatile
 13922  001350  0012               	return	
 13923  001352                     i1l6457:
 13924  001352  0E01               	movlw	1
 13925  001354  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 13926  001356  0E00               	movlw	0
 13927  001358  6E05               	movwf	??_SPI_ISR& (0+255),c
 13928  00135A  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 13929                           
 13930                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13931                           ; Switch size 1, requested type "speed"
 13932                           ; Number of cases is 1, Range of values is 0 to 0
 13933                           ; switch strategies available:
 13934                           ; Name         Instructions Cycles
 13935                           ; simple_byte            4     3 (average)
 13936                           ;	Chosen strategy is simple_byte
 13937  00135C  5006               	movf	??_SPI_ISR+1,w,c
 13938  00135E  A4D8               	btfss	status,2,c
 13939  001360  0012               	return	
 13940                           
 13941                           ; Switch size 1, requested type "speed"
 13942                           ; Number of cases is 2, Range of values is 0 to 1
 13943                           ; switch strategies available:
 13944                           ; Name         Instructions Cycles
 13945                           ; simple_byte            7     4 (average)
 13946                           ;	Chosen strategy is simple_byte
 13947  001362  5005               	movf	??_SPI_ISR,w,c
 13948  001364  E0E6               	bz	i1l6449
 13949  001366  0A01               	xorlw	1	; case 1
 13950  001368  0012               	return	
 13951  00136A                     i1l6461:
 13952  00136A  0E01               	movlw	1
 13953  00136C  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 13954  00136E  0E00               	movlw	0
 13955  001370  6E05               	movwf	??_SPI_ISR& (0+255),c
 13956  001372  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 13957                           
 13958                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13959                           ; Switch size 1, requested type "speed"
 13960                           ; Number of cases is 1, Range of values is 0 to 0
 13961                           ; switch strategies available:
 13962                           ; Name         Instructions Cycles
 13963                           ; simple_byte            4     3 (average)
 13964                           ;	Chosen strategy is simple_byte
 13965  001374  5006               	movf	??_SPI_ISR+1,w,c
 13966  001376  A4D8               	btfss	status,2,c
 13967  001378  0012               	return	
 13968                           
 13969                           ; Switch size 1, requested type "speed"
 13970                           ; Number of cases is 2, Range of values is 0 to 1
 13971                           ; switch strategies available:
 13972                           ; Name         Instructions Cycles
 13973                           ; simple_byte            7     4 (average)
 13974                           ;	Chosen strategy is simple_byte
 13975  00137A  5005               	movf	??_SPI_ISR,w,c
 13976  00137C  E098               	bz	i1l6433
 13977  00137E  0A01               	xorlw	1	; case 1
 13978  001380  E101 D77E          	bz	i1l6425
 13979  001384  0012               	return		;funcret
 13980  001386                     __end_of_SPI_ISR:
 13981                           	opt stack 0
 13982                           tblptru	equ	0xFF8
 13983                           tblptrh	equ	0xFF7
 13984                           tblptrl	equ	0xFF6
 13985                           tablat	equ	0xFF5
 13986                           prodh	equ	0xFF4
 13987                           prodl	equ	0xFF3
 13988                           intcon	equ	0xFF2
 13989                           intcon2	equ	0xFF1
 13990                           intcon3	equ	0xFF0
 13991                           postinc0	equ	0xFEE
 13992                           wreg	equ	0xFE8
 13993                           indf1	equ	0xFE7
 13994                           postdec1	equ	0xFE5
 13995                           fsr1h	equ	0xFE2
 13996                           fsr1l	equ	0xFE1
 13997                           bsr	equ	0xFE0
 13998                           indf2	equ	0xFDF
 13999                           postinc2	equ	0xFDE
 14000                           postdec2	equ	0xFDD
 14001                           fsr2h	equ	0xFDA
 14002                           fsr2l	equ	0xFD9
 14003                           status	equ	0xFD8
 14004                           
 14005 ;; *************** function _IRQ_PION_CHANGEMENT_ETAT *****************
 14006 ;; Defined at:
 14007 ;;		line 199 in file "interrupt.c"
 14008 ;; Parameters:    Size  Location     Type
 14009 ;;		None
 14010 ;; Auto vars:     Size  Location     Type
 14011 ;;		None
 14012 ;; Return value:  Size  Location     Type
 14013 ;;                  1    wreg      void 
 14014 ;; Registers used:
 14015 ;;		wreg, status,2, status,0, cstack
 14016 ;; Tracked objects:
 14017 ;;		On entry : 0/0
 14018 ;;		On exit  : 0/0
 14019 ;;		Unchanged: 0/0
 14020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14021 ;;      Params:         0       0       0       0
 14022 ;;      Locals:         0       0       0       0
 14023 ;;      Temps:          0       0       0       0
 14024 ;;      Totals:         0       0       0       0
 14025 ;;Total ram usage:        0 bytes
 14026 ;; Hardware stack levels used:    1
 14027 ;; Hardware stack levels required when called:    6
 14028 ;; This function calls:
 14029 ;;		i1_Buzzer_Etat
 14030 ;;		i1_TIMER5_Off
 14031 ;;		i1_TIMER5_On
 14032 ;; This function is called by:
 14033 ;;		_LOW_PRIORITY_IRQ
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           	psect	text86
 14038  001BF0                     __ptext86:
 14039                           	opt stack 0
 14040  001BF0                     _IRQ_PION_CHANGEMENT_ETAT:
 14041                           	opt stack 13
 14042                           
 14043                           ;interrupt.c: 200: PIR3bits.IC1IF = 0;
 14044                           
 14045                           ;incstack = 0
 14046  001BF0  92A4               	bcf	4004,1,c	;volatile
 14047                           
 14048                           ;interrupt.c: 203: switch (Surveillance_Capteur_Pion) {
 14049  001BF2  D020               	goto	i1l6421
 14050  001BF4                     i1l556:
 14051                           
 14052                           ; BSR set to: 0
 14053                           ;interrupt.c: 208: if (PORTAbits.RA2 == 0) {
 14054  001BF4  B480               	btfsc	3968,2,c	;volatile
 14055  001BF6  D004               	goto	i1l6391
 14056                           
 14057                           ; BSR set to: 0
 14058                           ;interrupt.c: 209: Surveillance_Capteur_Pion = 0;
 14059  001BF8  6B8A               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 14060                           
 14061                           ; BSR set to: 0
 14062                           ;interrupt.c: 210: TIMER5_On();
 14063  001BFA  ECEB  F011         	call	i1_TIMER5_On	;wreg free
 14064  001BFE  D011               	goto	i1l6405
 14065  001C00                     i1l6391:
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;interrupt.c: 214: Surveillance_Capteur_Pion = 1;
 14069  001C00  0E01               	movlw	1
 14070  001C02  6F8A               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 14071                           
 14072                           ;interrupt.c: 215: Alarme = 9;
 14073  001C04  0E09               	movlw	9
 14074  001C06  6FA8               	movwf	_Alarme& (0+255),b	;volatile
 14075  001C08                     i1l6393:
 14076                           
 14077                           ;interrupt.c: 217: TIMER5_Off();
 14078  001C08  ECBA  F011         	call	i1_TIMER5_Off	;wreg free
 14079                           
 14080                           ;interrupt.c: 219: nb_100ms_Timer_5 = 0;
 14081  001C0C  0100               	movlb	0	; () banked
 14082  001C0E  6BA4               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;interrupt.c: 222: nb_100ms_platine = nb_100ms_platine_backup;
 14086  001C10  C0EC  F0A2         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;interrupt.c: 223: Mouvement_Startup = 0;
 14090  001C14  6A4E               	clrf	_Mouvement_Startup,c
 14091  001C16  0012               	return	
 14092  001C18                     i1l560:
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;interrupt.c: 234: if (PORTAbits.RA2 == 0) {
 14096  001C18  B480               	btfsc	3968,2,c	;volatile
 14097  001C1A  D006               	goto	i1l6407
 14098                           
 14099                           ; BSR set to: 0
 14100                           ;interrupt.c: 235: Surveillance_Capteur_Pion = 0;
 14101  001C1C  6B8A               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 14102                           
 14103                           ; BSR set to: 0
 14104                           ;interrupt.c: 236: Alarme = 5;
 14105  001C1E  0E05               	movlw	5
 14106  001C20  6FA8               	movwf	_Alarme& (0+255),b	;volatile
 14107  001C22                     i1l6405:
 14108                           
 14109                           ; BSR set to: 0
 14110                           ;interrupt.c: 238: Buzzer_Etat((unsigned char) 1);
 14111  001C22  0E01               	movlw	1
 14112  001C24  EF96  F011         	goto	i1_Buzzer_Etat
 14113  001C28                     i1l6407:
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;interrupt.c: 240: Surveillance_Capteur_Pion = 1;
 14117  001C28  0E01               	movlw	1
 14118  001C2A  6F8A               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 14119                           
 14120                           ; BSR set to: 0
 14121                           ;interrupt.c: 242: Buzzer_Etat((unsigned char) 0);
 14122  001C2C  0E00               	movlw	0
 14123  001C2E  EC96  F011         	call	i1_Buzzer_Etat
 14124  001C32  D7EA               	goto	i1l6393
 14125  001C34                     i1l6421:
 14126  001C34  0100               	movlb	0	; () banked
 14127  001C36  518A               	movf	_Surveillance_Capteur_Pion& (0+255),w,b
 14128                           
 14129                           ; Switch size 1, requested type "speed"
 14130                           ; Number of cases is 2, Range of values is 0 to 1
 14131                           ; switch strategies available:
 14132                           ; Name         Instructions Cycles
 14133                           ; simple_byte            7     4 (average)
 14134                           ;	Chosen strategy is simple_byte
 14135  001C38  E0EF               	bz	i1l560
 14136  001C3A  0A01               	xorlw	1	; case 1
 14137  001C3C  E0DB               	bz	i1l556
 14138  001C3E  0012               	return		;funcret
 14139  001C40                     __end_of_IRQ_PION_CHANGEMENT_ETAT:
 14140                           	opt stack 0
 14141                           tblptru	equ	0xFF8
 14142                           tblptrh	equ	0xFF7
 14143                           tblptrl	equ	0xFF6
 14144                           tablat	equ	0xFF5
 14145                           prodh	equ	0xFF4
 14146                           prodl	equ	0xFF3
 14147                           intcon	equ	0xFF2
 14148                           intcon2	equ	0xFF1
 14149                           intcon3	equ	0xFF0
 14150                           postinc0	equ	0xFEE
 14151                           wreg	equ	0xFE8
 14152                           indf1	equ	0xFE7
 14153                           postdec1	equ	0xFE5
 14154                           fsr1h	equ	0xFE2
 14155                           fsr1l	equ	0xFE1
 14156                           bsr	equ	0xFE0
 14157                           indf2	equ	0xFDF
 14158                           postinc2	equ	0xFDE
 14159                           postdec2	equ	0xFDD
 14160                           fsr2h	equ	0xFDA
 14161                           fsr2l	equ	0xFD9
 14162                           status	equ	0xFD8
 14163                           
 14164 ;; *************** function i1_TIMER5_On *****************
 14165 ;; Defined at:
 14166 ;;		line 253 in file "timer.c"
 14167 ;; Parameters:    Size  Location     Type
 14168 ;;		None
 14169 ;; Auto vars:     Size  Location     Type
 14170 ;;		None
 14171 ;; Return value:  Size  Location     Type
 14172 ;;                  1    wreg      void 
 14173 ;; Registers used:
 14174 ;;		None
 14175 ;; Tracked objects:
 14176 ;;		On entry : 3F/0
 14177 ;;		On exit  : 3F/0
 14178 ;;		Unchanged: 3F/0
 14179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14180 ;;      Params:         0       0       0       0
 14181 ;;      Locals:         0       0       0       0
 14182 ;;      Temps:          0       0       0       0
 14183 ;;      Totals:         0       0       0       0
 14184 ;;Total ram usage:        0 bytes
 14185 ;; Hardware stack levels used:    1
 14186 ;; Hardware stack levels required when called:    5
 14187 ;; This function calls:
 14188 ;;		Nothing
 14189 ;; This function is called by:
 14190 ;;		_IRQ_PION_CHANGEMENT_ETAT
 14191 ;; This function uses a non-reentrant model
 14192 ;;
 14193                           
 14194                           	psect	text87
 14195  0023D6                     __ptext87:
 14196                           	opt stack 0
 14197  0023D6                     i1_TIMER5_On:
 14198                           	opt stack 13
 14199                           
 14200                           ; BSR set to: 0
 14201                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 14202                           
 14203                           ;incstack = 0
 14204  0023D6  80B7               	bsf	4023,0,c	;volatile
 14205                           
 14206                           ; BSR set to: 0
 14207  0023D8  0012               	return		;funcret
 14208  0023DA                     __end_ofi1_TIMER5_On:
 14209                           	opt stack 0
 14210                           tblptru	equ	0xFF8
 14211                           tblptrh	equ	0xFF7
 14212                           tblptrl	equ	0xFF6
 14213                           tablat	equ	0xFF5
 14214                           prodh	equ	0xFF4
 14215                           prodl	equ	0xFF3
 14216                           intcon	equ	0xFF2
 14217                           intcon2	equ	0xFF1
 14218                           intcon3	equ	0xFF0
 14219                           postinc0	equ	0xFEE
 14220                           wreg	equ	0xFE8
 14221                           indf1	equ	0xFE7
 14222                           postdec1	equ	0xFE5
 14223                           fsr1h	equ	0xFE2
 14224                           fsr1l	equ	0xFE1
 14225                           bsr	equ	0xFE0
 14226                           indf2	equ	0xFDF
 14227                           postinc2	equ	0xFDE
 14228                           postdec2	equ	0xFDD
 14229                           fsr2h	equ	0xFDA
 14230                           fsr2l	equ	0xFD9
 14231                           status	equ	0xFD8
 14232                           
 14233 ;; *************** function i1_TIMER5_Off *****************
 14234 ;; Defined at:
 14235 ;;		line 263 in file "timer.c"
 14236 ;; Parameters:    Size  Location     Type
 14237 ;;		None
 14238 ;; Auto vars:     Size  Location     Type
 14239 ;;		None
 14240 ;; Return value:  Size  Location     Type
 14241 ;;                  1    wreg      void 
 14242 ;; Registers used:
 14243 ;;		None
 14244 ;; Tracked objects:
 14245 ;;		On entry : 0/0
 14246 ;;		On exit  : 0/0
 14247 ;;		Unchanged: 0/0
 14248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14249 ;;      Params:         0       0       0       0
 14250 ;;      Locals:         0       0       0       0
 14251 ;;      Temps:          0       0       0       0
 14252 ;;      Totals:         0       0       0       0
 14253 ;;Total ram usage:        0 bytes
 14254 ;; Hardware stack levels used:    1
 14255 ;; Hardware stack levels required when called:    5
 14256 ;; This function calls:
 14257 ;;		Nothing
 14258 ;; This function is called by:
 14259 ;;		_IRQ_PION_CHANGEMENT_ETAT
 14260 ;;		i1_IRQ_TIMER_5
 14261 ;; This function uses a non-reentrant model
 14262 ;;
 14263                           
 14264                           	psect	text88
 14265  002374                     __ptext88:
 14266                           	opt stack 0
 14267  002374                     i1_TIMER5_Off:
 14268                           	opt stack 13
 14269                           
 14270                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;incstack = 0
 14274  002374  90B7               	bcf	4023,0,c	;volatile
 14275                           
 14276                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 14277  002376  90A4               	bcf	4004,0,c	;volatile
 14278                           
 14279                           ;timer.c: 268: TMR5L = 0;
 14280  002378  6A87               	clrf	3975,c	;volatile
 14281                           
 14282                           ;timer.c: 269: TMR5H = 0;
 14283  00237A  6A88               	clrf	3976,c	;volatile
 14284  00237C  0012               	return		;funcret
 14285  00237E                     __end_ofi1_TIMER5_Off:
 14286                           	opt stack 0
 14287                           tblptru	equ	0xFF8
 14288                           tblptrh	equ	0xFF7
 14289                           tblptrl	equ	0xFF6
 14290                           tablat	equ	0xFF5
 14291                           prodh	equ	0xFF4
 14292                           prodl	equ	0xFF3
 14293                           intcon	equ	0xFF2
 14294                           intcon2	equ	0xFF1
 14295                           intcon3	equ	0xFF0
 14296                           postinc0	equ	0xFEE
 14297                           wreg	equ	0xFE8
 14298                           indf1	equ	0xFE7
 14299                           postdec1	equ	0xFE5
 14300                           fsr1h	equ	0xFE2
 14301                           fsr1l	equ	0xFE1
 14302                           bsr	equ	0xFE0
 14303                           indf2	equ	0xFDF
 14304                           postinc2	equ	0xFDE
 14305                           postdec2	equ	0xFDD
 14306                           fsr2h	equ	0xFDA
 14307                           fsr2l	equ	0xFD9
 14308                           status	equ	0xFD8
 14309                           
 14310 ;; *************** function i1_Buzzer_Etat *****************
 14311 ;; Defined at:
 14312 ;;		line 29 in file "interrupt.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;  Activation      1    wreg     unsigned char 
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;  Activation      1    4[COMRAM] unsigned char 
 14317 ;; Return value:  Size  Location     Type
 14318 ;;                  1    wreg      void 
 14319 ;; Registers used:
 14320 ;;		wreg, status,2, status,0
 14321 ;; Tracked objects:
 14322 ;;		On entry : 0/0
 14323 ;;		On exit  : 0/0
 14324 ;;		Unchanged: 0/0
 14325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14326 ;;      Params:         0       0       0       0
 14327 ;;      Locals:         1       0       0       0
 14328 ;;      Temps:          0       0       0       0
 14329 ;;      Totals:         1       0       0       0
 14330 ;;Total ram usage:        1 bytes
 14331 ;; Hardware stack levels used:    1
 14332 ;; Hardware stack levels required when called:    5
 14333 ;; This function calls:
 14334 ;;		Nothing
 14335 ;; This function is called by:
 14336 ;;		_IRQ_PION_CHANGEMENT_ETAT
 14337 ;;		i1_IRQ_TIMER_5
 14338 ;; This function uses a non-reentrant model
 14339 ;;
 14340                           
 14341                           	psect	text89
 14342  00232C                     __ptext89:
 14343                           	opt stack 0
 14344  00232C                     i1_Buzzer_Etat:
 14345                           	opt stack 13
 14346                           
 14347                           ;incstack = 0
 14348                           ;i1Buzzer_Etat@Activation stored from wreg
 14349  00232C  6E05               	movwf	i1Buzzer_Etat@Activation,c
 14350                           
 14351                           ;interrupt.c: 30: if (Activation == 1) {
 14352  00232E  0405               	decf	i1Buzzer_Etat@Activation,w,c
 14353  002330  E102               	bnz	i1l521
 14354                           
 14355                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 14356  002332  8C89               	bsf	3977,6,c	;volatile
 14357                           
 14358                           ;interrupt.c: 33: } else {
 14359  002334  0012               	return	
 14360  002336                     i1l521:
 14361                           
 14362                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 14363  002336  9C89               	bcf	3977,6,c	;volatile
 14364  002338  0012               	return		;funcret
 14365  00233A                     __end_ofi1_Buzzer_Etat:
 14366                           	opt stack 0
 14367                           tblptru	equ	0xFF8
 14368                           tblptrh	equ	0xFF7
 14369                           tblptrl	equ	0xFF6
 14370                           tablat	equ	0xFF5
 14371                           prodh	equ	0xFF4
 14372                           prodl	equ	0xFF3
 14373                           intcon	equ	0xFF2
 14374                           intcon2	equ	0xFF1
 14375                           intcon3	equ	0xFF0
 14376                           postinc0	equ	0xFEE
 14377                           wreg	equ	0xFE8
 14378                           indf1	equ	0xFE7
 14379                           postdec1	equ	0xFE5
 14380                           fsr1h	equ	0xFE2
 14381                           fsr1l	equ	0xFE1
 14382                           bsr	equ	0xFE0
 14383                           indf2	equ	0xFDF
 14384                           postinc2	equ	0xFDE
 14385                           postdec2	equ	0xFDD
 14386                           fsr2h	equ	0xFDA
 14387                           fsr2l	equ	0xFD9
 14388                           status	equ	0xFD8
 14389                           
 14390 ;; *************** function _EUSART1_Transmit_ISR *****************
 14391 ;; Defined at:
 14392 ;;		line 552 in file "eusart.c"
 14393 ;; Parameters:    Size  Location     Type
 14394 ;;		None
 14395 ;; Auto vars:     Size  Location     Type
 14396 ;;		None
 14397 ;; Return value:  Size  Location     Type
 14398 ;;                  1    wreg      void 
 14399 ;; Registers used:
 14400 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14401 ;; Tracked objects:
 14402 ;;		On entry : 0/0
 14403 ;;		On exit  : 0/0
 14404 ;;		Unchanged: 0/0
 14405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14406 ;;      Params:         0       0       0       0
 14407 ;;      Locals:         0       0       0       0
 14408 ;;      Temps:          0       0       0       0
 14409 ;;      Totals:         0       0       0       0
 14410 ;;Total ram usage:        0 bytes
 14411 ;; Hardware stack levels used:    1
 14412 ;; Hardware stack levels required when called:    5
 14413 ;; This function calls:
 14414 ;;		Nothing
 14415 ;; This function is called by:
 14416 ;;		_LOW_PRIORITY_IRQ
 14417 ;; This function uses a non-reentrant model
 14418 ;;
 14419                           
 14420                           	psect	text90
 14421  001F68                     __ptext90:
 14422                           	opt stack 0
 14423  001F68                     _EUSART1_Transmit_ISR:
 14424                           	opt stack 14
 14425                           
 14426                           ;eusart.c: 554: eusart1TxIndex++;
 14427                           
 14428                           ;incstack = 0
 14429  001F68  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 14430                           
 14431                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 14432  001F6A  0E80               	movlw	low _eusart1TxBuffer
 14433  001F6C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 14434  001F6E  6ED9               	movwf	fsr2l,c
 14435  001F70  6ADA               	clrf	fsr2h,c
 14436  001F72  0E01               	movlw	high _eusart1TxBuffer
 14437  001F74  22DA               	addwfc	fsr2h,f,c
 14438  001F76  50DF               	movf	indf2,w,c
 14439  001F78  E009               	bz	i1l1308
 14440                           
 14441                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 14442  001F7A  0E80               	movlw	low _eusart1TxBuffer
 14443  001F7C  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 14444  001F7E  6ED9               	movwf	fsr2l,c
 14445  001F80  6ADA               	clrf	fsr2h,c
 14446  001F82  0E01               	movlw	high _eusart1TxBuffer
 14447  001F84  22DA               	addwfc	fsr2h,f,c
 14448  001F86  50DF               	movf	indf2,w,c
 14449  001F88  6EAD               	movwf	4013,c	;volatile
 14450                           
 14451                           ;eusart.c: 574: } else {
 14452  001F8A  0012               	return	
 14453  001F8C                     i1l1308:
 14454                           
 14455                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 14456  001F8C  989D               	bcf	3997,4,c	;volatile
 14457  001F8E  0012               	return		;funcret
 14458  001F90                     __end_of_EUSART1_Transmit_ISR:
 14459                           	opt stack 0
 14460                           tblptru	equ	0xFF8
 14461                           tblptrh	equ	0xFF7
 14462                           tblptrl	equ	0xFF6
 14463                           tablat	equ	0xFF5
 14464                           prodh	equ	0xFF4
 14465                           prodl	equ	0xFF3
 14466                           intcon	equ	0xFF2
 14467                           intcon2	equ	0xFF1
 14468                           intcon3	equ	0xFF0
 14469                           postinc0	equ	0xFEE
 14470                           wreg	equ	0xFE8
 14471                           indf1	equ	0xFE7
 14472                           postdec1	equ	0xFE5
 14473                           fsr1h	equ	0xFE2
 14474                           fsr1l	equ	0xFE1
 14475                           bsr	equ	0xFE0
 14476                           indf2	equ	0xFDF
 14477                           postinc2	equ	0xFDE
 14478                           postdec2	equ	0xFDD
 14479                           fsr2h	equ	0xFDA
 14480                           fsr2l	equ	0xFD9
 14481                           status	equ	0xFD8
 14482                           
 14483 ;; *************** function _EUSART1_Receive_ISR *****************
 14484 ;; Defined at:
 14485 ;;		line 597 in file "eusart.c"
 14486 ;; Parameters:    Size  Location     Type
 14487 ;;		None
 14488 ;; Auto vars:     Size  Location     Type
 14489 ;;  i               1    6[COMRAM] unsigned char 
 14490 ;; Return value:  Size  Location     Type
 14491 ;;                  1    wreg      void 
 14492 ;; Registers used:
 14493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14494 ;; Tracked objects:
 14495 ;;		On entry : 0/0
 14496 ;;		On exit  : 0/0
 14497 ;;		Unchanged: 0/0
 14498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14499 ;;      Params:         0       0       0       0
 14500 ;;      Locals:         1       0       0       0
 14501 ;;      Temps:          2       0       0       0
 14502 ;;      Totals:         3       0       0       0
 14503 ;;Total ram usage:        3 bytes
 14504 ;; Hardware stack levels used:    1
 14505 ;; Hardware stack levels required when called:    6
 14506 ;; This function calls:
 14507 ;;		_EUSART1_Erreur_Get
 14508 ;; This function is called by:
 14509 ;;		_LOW_PRIORITY_IRQ
 14510 ;; This function uses a non-reentrant model
 14511 ;;
 14512                           
 14513                           	psect	text91
 14514  001386                     __ptext91:
 14515                           	opt stack 0
 14516  001386                     _EUSART1_Receive_ISR:
 14517                           	opt stack 13
 14518                           
 14519                           ;eusart.c: 600: unsigned char i;
 14520                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 14521                           
 14522                           ;incstack = 0
 14523  001386  9A9E               	bcf	3998,5,c	;volatile
 14524                           
 14525                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 14526  001388  A2AB               	btfss	4011,1,c	;volatile
 14527  00138A  D004               	goto	i1l6481
 14528                           
 14529                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 14530  00138C  9EAB               	bcf	4011,7,c	;volatile
 14531                           
 14532                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 14533  00138E  8EAB               	bsf	4011,7,c	;volatile
 14534                           
 14535                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 14536  001390  98AB               	bcf	4011,4,c	;volatile
 14537                           
 14538                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 14539  001392  88AB               	bsf	4011,4,c	;volatile
 14540  001394                     i1l6481:
 14541                           
 14542                           ;eusart.c: 610: }
 14543                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 14544  001394  0E40               	movlw	low _eusart1RxBuffer
 14545  001396  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14546  001398  6ED9               	movwf	fsr2l,c
 14547  00139A  6ADA               	clrf	fsr2h,c
 14548  00139C  0E02               	movlw	high _eusart1RxBuffer
 14549  00139E  22DA               	addwfc	fsr2h,f,c
 14550  0013A0  CFAE FFDF          	movff	4014,indf2	;volatile
 14551                           
 14552                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 14553  0013A4  0E40               	movlw	low _eusart1RxBuffer
 14554  0013A6  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14555  0013A8  6ED9               	movwf	fsr2l,c
 14556  0013AA  6ADA               	clrf	fsr2h,c
 14557  0013AC  0E02               	movlw	high _eusart1RxBuffer
 14558  0013AE  22DA               	addwfc	fsr2h,f,c
 14559  0013B0  50DF               	movf	indf2,w,c
 14560  0013B2  0E01               	movlw	1
 14561  0013B4  A4D8               	btfss	status,2,c
 14562  0013B6  0E00               	movlw	0
 14563  0013B8  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14564  0013BA  0E40               	movlw	low _eusart1RxBuffer
 14565  0013BC  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14566  0013BE  6ED9               	movwf	fsr2l,c
 14567  0013C0  6ADA               	clrf	fsr2h,c
 14568  0013C2  0E02               	movlw	high _eusart1RxBuffer
 14569  0013C4  22DA               	addwfc	fsr2h,f,c
 14570  0013C6  0E0D               	movlw	13
 14571  0013C8  18DE               	xorwf	postinc2,w,c
 14572  0013CA  0E01               	movlw	1
 14573  0013CC  A4D8               	btfss	status,2,c
 14574  0013CE  0E00               	movlw	0
 14575  0013D0  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 14576  0013D2  A0E8               	btfss	wreg,0,c
 14577  0013D4  D032               	goto	i1l6509
 14578                           
 14579                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 14580  0013D6  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14581  0013D8  E015               	bz	i1l6493
 14582                           
 14583                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 14584  0013DA  6A07               	clrf	EUSART1_Receive_ISR@i,c
 14585  0013DC  D00F               	goto	i1l6491
 14586  0013DE                     i1l6487:
 14587                           
 14588                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 14589  0013DE  0E40               	movlw	low _eusart1RxBuffer
 14590  0013E0  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 14591  0013E2  6ED9               	movwf	fsr2l,c
 14592  0013E4  6ADA               	clrf	fsr2h,c
 14593  0013E6  0E02               	movlw	high _eusart1RxBuffer
 14594  0013E8  22DA               	addwfc	fsr2h,f,c
 14595  0013EA  0EC0               	movlw	low _UART_RX_TEXT
 14596  0013EC  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 14597  0013EE  6EE1               	movwf	fsr1l,c
 14598  0013F0  6AE2               	clrf	fsr1h,c
 14599  0013F2  0E01               	movlw	high _UART_RX_TEXT
 14600  0013F4  22E2               	addwfc	fsr1h,f,c
 14601  0013F6  CFDF FFE7          	movff	indf2,indf1
 14602  0013FA  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 14603  0013FC                     i1l6491:
 14604  0013FC  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14605  0013FE  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 14606  001400  E3EE               	bnc	i1l6487
 14607                           
 14608                           ;eusart.c: 623: }
 14609                           ;eusart.c: 624: RX1_full = 1;
 14610  001402  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 14611  001404                     i1l6493:
 14612                           
 14613                           ;eusart.c: 625: }
 14614                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 14615  001404  0EC0               	movlw	low _UART_RX_TEXT
 14616  001406  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 14617  001408  6ED9               	movwf	fsr2l,c
 14618  00140A  6ADA               	clrf	fsr2h,c
 14619  00140C  0E01               	movlw	high _UART_RX_TEXT
 14620  00140E  22DA               	addwfc	fsr2h,f,c
 14621  001410  0E00               	movlw	0
 14622  001412  6ADF               	clrf	indf2,c
 14623                           
 14624                           ;eusart.c: 629: eusart1RxIndex = 0;
 14625  001414  6A45               	clrf	_eusart1RxIndex,c	;volatile
 14626                           
 14627                           ;eusart.c: 631: } else {
 14628  001416  0012               	return	
 14629  001418                     i1l6497:
 14630                           
 14631                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 14632  001418  5045               	movf	_eusart1RxIndex,w,c	;volatile
 14633  00141A  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14634  00141C  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 14635  00141E  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 14636  001420  0E00               	movlw	0
 14637  001422  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 14638  001424  0E40               	movlw	64
 14639  001426  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 14640  001428  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 14641  00142A  E105               	bnz	i1l6503
 14642                           
 14643                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 14644  00142C  0101               	movlb	1	; () banked
 14645  00142E  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 14646                           
 14647                           ;eusart.c: 636: eusart1RxIndex = 0;
 14648  001430  6A45               	clrf	_eusart1RxIndex,c	;volatile
 14649                           
 14650                           ;eusart.c: 638: EUSART1_Erreur_Get();
 14651  001432  EFC7  F011         	goto	_EUSART1_Erreur_Get	;wreg free
 14652  001436                     i1l6503:
 14653                           
 14654                           ;eusart.c: 640: eusart1RxIndex++;
 14655  001436  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 14656  001438  0012               	return	
 14657  00143A                     i1l6509:
 14658  00143A  0E01               	movlw	1
 14659  00143C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 14660  00143E  0E00               	movlw	0
 14661  001440  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 14662  001442  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 14663                           
 14664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14665                           ; Switch size 1, requested type "speed"
 14666                           ; Number of cases is 1, Range of values is 0 to 0
 14667                           ; switch strategies available:
 14668                           ; Name         Instructions Cycles
 14669                           ; simple_byte            4     3 (average)
 14670                           ;	Chosen strategy is simple_byte
 14671  001444  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 14672  001446  A4D8               	btfss	status,2,c
 14673  001448  0012               	return	
 14674                           
 14675                           ; Switch size 1, requested type "speed"
 14676                           ; Number of cases is 2, Range of values is 0 to 1
 14677                           ; switch strategies available:
 14678                           ; Name         Instructions Cycles
 14679                           ; simple_byte            7     4 (average)
 14680                           ;	Chosen strategy is simple_byte
 14681  00144A  5005               	movf	??_EUSART1_Receive_ISR,w,c
 14682  00144C  E0E5               	bz	i1l6497
 14683  00144E  0A01               	xorlw	1	; case 1
 14684  001450  E102 EFC7  F011    	bz	_EUSART1_Erreur_Get
 14685  001456  0012               	return		;funcret
 14686  001458                     __end_of_EUSART1_Receive_ISR:
 14687                           	opt stack 0
 14688                           tblptru	equ	0xFF8
 14689                           tblptrh	equ	0xFF7
 14690                           tblptrl	equ	0xFF6
 14691                           tablat	equ	0xFF5
 14692                           prodh	equ	0xFF4
 14693                           prodl	equ	0xFF3
 14694                           intcon	equ	0xFF2
 14695                           intcon2	equ	0xFF1
 14696                           intcon3	equ	0xFF0
 14697                           postinc0	equ	0xFEE
 14698                           wreg	equ	0xFE8
 14699                           indf1	equ	0xFE7
 14700                           postdec1	equ	0xFE5
 14701                           fsr1h	equ	0xFE2
 14702                           fsr1l	equ	0xFE1
 14703                           bsr	equ	0xFE0
 14704                           indf2	equ	0xFDF
 14705                           postinc2	equ	0xFDE
 14706                           postdec2	equ	0xFDD
 14707                           fsr2h	equ	0xFDA
 14708                           fsr2l	equ	0xFD9
 14709                           status	equ	0xFD8
 14710                           
 14711 ;; *************** function _EUSART1_Erreur_Get *****************
 14712 ;; Defined at:
 14713 ;;		line 585 in file "eusart.c"
 14714 ;; Parameters:    Size  Location     Type
 14715 ;;		None
 14716 ;; Auto vars:     Size  Location     Type
 14717 ;;		None
 14718 ;; Return value:  Size  Location     Type
 14719 ;;                  1    wreg      void 
 14720 ;; Registers used:
 14721 ;;		None
 14722 ;; Tracked objects:
 14723 ;;		On entry : 0/1
 14724 ;;		On exit  : 0/0
 14725 ;;		Unchanged: 0/0
 14726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14727 ;;      Params:         0       0       0       0
 14728 ;;      Locals:         0       0       0       0
 14729 ;;      Temps:          0       0       0       0
 14730 ;;      Totals:         0       0       0       0
 14731 ;;Total ram usage:        0 bytes
 14732 ;; Hardware stack levels used:    1
 14733 ;; Hardware stack levels required when called:    5
 14734 ;; This function calls:
 14735 ;;		Nothing
 14736 ;; This function is called by:
 14737 ;;		_EUSART1_Receive_ISR
 14738 ;; This function uses a non-reentrant model
 14739 ;;
 14740                           
 14741                           	psect	text92
 14742  00238E                     __ptext92:
 14743                           	opt stack 0
 14744  00238E                     _EUSART1_Erreur_Get:
 14745                           	opt stack 13
 14746                           
 14747                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 14748                           
 14749                           ;incstack = 0
 14750  00238E  848B               	bsf	3979,2,c	;volatile
 14751                           
 14752                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 14753  002390  948B               	bcf	3979,2,c	;volatile
 14754                           
 14755                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 14756  002392  848B               	bsf	3979,2,c	;volatile
 14757  002394  0012               	return		;funcret
 14758  002396                     __end_of_EUSART1_Erreur_Get:
 14759                           	opt stack 0
 14760                           tblptru	equ	0xFF8
 14761                           tblptrh	equ	0xFF7
 14762                           tblptrl	equ	0xFF6
 14763                           tablat	equ	0xFF5
 14764                           prodh	equ	0xFF4
 14765                           prodl	equ	0xFF3
 14766                           intcon	equ	0xFF2
 14767                           intcon2	equ	0xFF1
 14768                           intcon3	equ	0xFF0
 14769                           postinc0	equ	0xFEE
 14770                           wreg	equ	0xFE8
 14771                           indf1	equ	0xFE7
 14772                           postdec1	equ	0xFE5
 14773                           fsr1h	equ	0xFE2
 14774                           fsr1l	equ	0xFE1
 14775                           bsr	equ	0xFE0
 14776                           indf2	equ	0xFDF
 14777                           postinc2	equ	0xFDE
 14778                           postdec2	equ	0xFDD
 14779                           fsr2h	equ	0xFDA
 14780                           fsr2l	equ	0xFD9
 14781                           status	equ	0xFD8
 14782                           
 14783 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 14784 ;; Defined at:
 14785 ;;		line 951 in file "interrupt.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;		None
 14788 ;; Auto vars:     Size  Location     Type
 14789 ;;		None
 14790 ;; Return value:  Size  Location     Type
 14791 ;;                  1    wreg      void 
 14792 ;; Registers used:
 14793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14794 ;; Tracked objects:
 14795 ;;		On entry : 0/0
 14796 ;;		On exit  : 0/0
 14797 ;;		Unchanged: 0/0
 14798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14799 ;;      Params:         0       0       0       0
 14800 ;;      Locals:         0       0       0       0
 14801 ;;      Temps:          2       0       0       0
 14802 ;;      Totals:         2       0       0       0
 14803 ;;Total ram usage:        2 bytes
 14804 ;; Hardware stack levels used:    1
 14805 ;; Hardware stack levels required when called:    4
 14806 ;; This function calls:
 14807 ;;		i2_IRQ_CAPOT
 14808 ;;		i2_IRQ_I_MOTEUR_1
 14809 ;;		i2_IRQ_I_MOTEUR_2
 14810 ;;		i2_IRQ_TIMER2
 14811 ;; This function is called by:
 14812 ;;		Interrupt level 2
 14813 ;; This function uses a non-reentrant model
 14814 ;;
 14815                           
 14816                           	psect	intcode
 14817  000008                     __pintcode:
 14818                           	opt stack 0
 14819  000008                     _HIGH_PRIORITY_IRQ:
 14820                           	opt stack 11
 14821                           
 14822                           ;incstack = 0
 14823  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14824  00000A  EF6A  F00E         	goto	int_func
 14825                           tblptru	equ	0xFF8
 14826                           tblptrh	equ	0xFF7
 14827                           tblptrl	equ	0xFF6
 14828                           tablat	equ	0xFF5
 14829                           prodh	equ	0xFF4
 14830                           prodl	equ	0xFF3
 14831                           intcon	equ	0xFF2
 14832                           intcon2	equ	0xFF1
 14833                           intcon3	equ	0xFF0
 14834                           postinc0	equ	0xFEE
 14835                           wreg	equ	0xFE8
 14836                           indf1	equ	0xFE7
 14837                           postdec1	equ	0xFE5
 14838                           fsr1h	equ	0xFE2
 14839                           fsr1l	equ	0xFE1
 14840                           bsr	equ	0xFE0
 14841                           indf2	equ	0xFDF
 14842                           postinc2	equ	0xFDE
 14843                           postdec2	equ	0xFDD
 14844                           fsr2h	equ	0xFDA
 14845                           fsr2l	equ	0xFD9
 14846                           status	equ	0xFD8
 14847                           
 14848                           	psect	intcode_body
 14849  001CD4                     __pintcode_body:
 14850                           	opt stack 11
 14851  001CD4                     int_func:
 14852                           	opt stack 11
 14853  001CD4  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 14854  001CD8  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 14855                           
 14856                           ;interrupt.c: 954: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 14857  001CDC  B29D               	btfsc	3997,1,c	;volatile
 14858  001CDE  A29E               	btfss	3998,1,c	;volatile
 14859  001CE0  D003               	goto	i2l694
 14860                           
 14861                           ;interrupt.c: 955: IRQ_TIMER2();
 14862  001CE2  ECDB  F011         	call	i2_IRQ_TIMER2	;wreg free
 14863                           
 14864                           ;interrupt.c: 961: }
 14865  001CE6  D011               	goto	i2l701
 14866  001CE8                     i2l694:
 14867                           
 14868                           ;interrupt.c: 962: else
 14869                           ;interrupt.c: 963: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 14870  001CE8  B8F2               	btfsc	intcon,4,c	;volatile
 14871  001CEA  A2F2               	btfss	intcon,1,c	;volatile
 14872  001CEC  D003               	goto	i2l696
 14873                           
 14874                           ;interrupt.c: 964: {
 14875                           ;interrupt.c: 965: IRQ_CAPOT();
 14876  001CEE  ECCB  F011         	call	i2_IRQ_CAPOT	;wreg free
 14877                           
 14878                           ;interrupt.c: 980: } else
 14879  001CF2  D00B               	goto	i2l701
 14880  001CF4                     i2l696:
 14881                           
 14882                           ;interrupt.c: 981: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 14883  001CF4  B6F0               	btfsc	intcon3,3,c	;volatile
 14884  001CF6  A0F0               	btfss	intcon3,0,c	;volatile
 14885  001CF8  D003               	goto	i2l698
 14886                           
 14887                           ;interrupt.c: 987: IRQ_I_MOTEUR_1();
 14888  001CFA  ECD5  F010         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 14889                           
 14890                           ;interrupt.c: 999: } else
 14891  001CFE  D005               	goto	i2l701
 14892  001D00                     i2l698:
 14893                           
 14894                           ;interrupt.c: 1000: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 14895  001D00  B8F0               	btfsc	intcon3,4,c	;volatile
 14896  001D02  A2F0               	btfss	intcon3,1,c	;volatile
 14897  001D04  D002               	goto	i2l701
 14898                           
 14899                           ;interrupt.c: 1006: IRQ_I_MOTEUR_2();
 14900  001D06  EC0D  F011         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 14901  001D0A                     i2l701:
 14902  001D0A  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 14903  001D0E  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 14904  001D12  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14905  001D14  0011               	retfie		f
 14906  001D16                     __end_of_HIGH_PRIORITY_IRQ:
 14907                           	opt stack 0
 14908                           tblptru	equ	0xFF8
 14909                           tblptrh	equ	0xFF7
 14910                           tblptrl	equ	0xFF6
 14911                           tablat	equ	0xFF5
 14912                           prodh	equ	0xFF4
 14913                           prodl	equ	0xFF3
 14914                           intcon	equ	0xFF2
 14915                           intcon2	equ	0xFF1
 14916                           intcon3	equ	0xFF0
 14917                           postinc0	equ	0xFEE
 14918                           wreg	equ	0xFE8
 14919                           indf1	equ	0xFE7
 14920                           postdec1	equ	0xFE5
 14921                           fsr1h	equ	0xFE2
 14922                           fsr1l	equ	0xFE1
 14923                           bsr	equ	0xFE0
 14924                           indf2	equ	0xFDF
 14925                           postinc2	equ	0xFDE
 14926                           postdec2	equ	0xFDD
 14927                           fsr2h	equ	0xFDA
 14928                           fsr2l	equ	0xFD9
 14929                           status	equ	0xFD8
 14930                           
 14931 ;; *************** function i2_IRQ_TIMER2 *****************
 14932 ;; Defined at:
 14933 ;;		line 879 in file "interrupt.c"
 14934 ;; Parameters:    Size  Location     Type
 14935 ;;		None
 14936 ;; Auto vars:     Size  Location     Type
 14937 ;;		None
 14938 ;; Return value:  Size  Location     Type
 14939 ;;                  1    wreg      void 
 14940 ;; Registers used:
 14941 ;;		None
 14942 ;; Tracked objects:
 14943 ;;		On entry : 0/0
 14944 ;;		On exit  : 0/0
 14945 ;;		Unchanged: 0/0
 14946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14947 ;;      Params:         0       0       0       0
 14948 ;;      Locals:         0       0       0       0
 14949 ;;      Temps:          0       0       0       0
 14950 ;;      Totals:         0       0       0       0
 14951 ;;Total ram usage:        0 bytes
 14952 ;; Hardware stack levels used:    1
 14953 ;; This function calls:
 14954 ;;		Nothing
 14955 ;; This function is called by:
 14956 ;;		_HIGH_PRIORITY_IRQ
 14957 ;; This function uses a non-reentrant model
 14958 ;;
 14959                           
 14960                           	psect	text94
 14961  0023B6                     __ptext94:
 14962                           	opt stack 0
 14963  0023B6                     i2_IRQ_TIMER2:
 14964                           	opt stack 14
 14965                           
 14966                           ;interrupt.c: 880: PIR1bits.TMR2IF = 0;
 14967                           
 14968                           ;incstack = 0
 14969  0023B6  929E               	bcf	3998,1,c	;volatile
 14970                           
 14971                           ;interrupt.c: 883: GODONE = 1;
 14972  0023B8  82C2               	bsf	4034,1,c	;volatile
 14973  0023BA  0012               	return		;funcret
 14974  0023BC                     __end_ofi2_IRQ_TIMER2:
 14975                           	opt stack 0
 14976                           tblptru	equ	0xFF8
 14977                           tblptrh	equ	0xFF7
 14978                           tblptrl	equ	0xFF6
 14979                           tablat	equ	0xFF5
 14980                           prodh	equ	0xFF4
 14981                           prodl	equ	0xFF3
 14982                           intcon	equ	0xFF2
 14983                           intcon2	equ	0xFF1
 14984                           intcon3	equ	0xFF0
 14985                           postinc0	equ	0xFEE
 14986                           wreg	equ	0xFE8
 14987                           indf1	equ	0xFE7
 14988                           postdec1	equ	0xFE5
 14989                           fsr1h	equ	0xFE2
 14990                           fsr1l	equ	0xFE1
 14991                           bsr	equ	0xFE0
 14992                           indf2	equ	0xFDF
 14993                           postinc2	equ	0xFDE
 14994                           postdec2	equ	0xFDD
 14995                           fsr2h	equ	0xFDA
 14996                           fsr2l	equ	0xFD9
 14997                           status	equ	0xFD8
 14998                           
 14999 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15000 ;; Defined at:
 15001 ;;		line 905 in file "interrupt.c"
 15002 ;; Parameters:    Size  Location     Type
 15003 ;;		None
 15004 ;; Auto vars:     Size  Location     Type
 15005 ;;		None
 15006 ;; Return value:  Size  Location     Type
 15007 ;;                  1    wreg      void 
 15008 ;; Registers used:
 15009 ;;		wreg, status,2, status,0
 15010 ;; Tracked objects:
 15011 ;;		On entry : 0/0
 15012 ;;		On exit  : 0/0
 15013 ;;		Unchanged: 0/0
 15014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15015 ;;      Params:         0       0       0       0
 15016 ;;      Locals:         0       0       0       0
 15017 ;;      Temps:          0       0       0       0
 15018 ;;      Totals:         0       0       0       0
 15019 ;;Total ram usage:        0 bytes
 15020 ;; Hardware stack levels used:    1
 15021 ;; This function calls:
 15022 ;;		Nothing
 15023 ;; This function is called by:
 15024 ;;		_HIGH_PRIORITY_IRQ
 15025 ;; This function uses a non-reentrant model
 15026 ;;
 15027                           
 15028                           	psect	text95
 15029  00221A                     __ptext95:
 15030                           	opt stack 0
 15031  00221A                     i2_IRQ_I_MOTEUR_2:
 15032                           	opt stack 14
 15033                           
 15034                           ;interrupt.c: 910: LATCbits.LATC1 = 0;
 15035                           
 15036                           ;incstack = 0
 15037  00221A  928B               	bcf	3979,1,c	;volatile
 15038                           
 15039                           ;interrupt.c: 912: while(TMR2 > 0) __nop();
 15040  00221C  D001               	goto	i2l4549
 15041  00221E                     i2l687:
 15042  00221E  F000               	nop	
 15043  002220                     i2l4549:
 15044  002220  50CC               	movf	4044,w,c	;volatile
 15045  002222  E1FD               	bnz	i2l687
 15046                           
 15047                           ;interrupt.c: 914: LATCbits.LATC1 = 1;
 15048  002224  828B               	bsf	3979,1,c	;volatile
 15049                           
 15050                           ;interrupt.c: 928: LATCbits.LATC2^=1;
 15051  002226  748B               	btg	3979,2,c	;volatile
 15052                           
 15053                           ;interrupt.c: 929: INTCON3bits.INT2IF = 0;
 15054  002228  92F0               	bcf	intcon3,1,c	;volatile
 15055                           
 15056                           ;interrupt.c: 933: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 15057  00222A  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 15058  00222C  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 15059  00222E  0012               	return		;funcret
 15060  002230                     __end_ofi2_IRQ_I_MOTEUR_2:
 15061                           	opt stack 0
 15062                           tblptru	equ	0xFF8
 15063                           tblptrh	equ	0xFF7
 15064                           tblptrl	equ	0xFF6
 15065                           tablat	equ	0xFF5
 15066                           prodh	equ	0xFF4
 15067                           prodl	equ	0xFF3
 15068                           intcon	equ	0xFF2
 15069                           intcon2	equ	0xFF1
 15070                           intcon3	equ	0xFF0
 15071                           postinc0	equ	0xFEE
 15072                           wreg	equ	0xFE8
 15073                           indf1	equ	0xFE7
 15074                           postdec1	equ	0xFE5
 15075                           fsr1h	equ	0xFE2
 15076                           fsr1l	equ	0xFE1
 15077                           bsr	equ	0xFE0
 15078                           indf2	equ	0xFDF
 15079                           postinc2	equ	0xFDE
 15080                           postdec2	equ	0xFDD
 15081                           fsr2h	equ	0xFDA
 15082                           fsr2l	equ	0xFD9
 15083                           status	equ	0xFD8
 15084                           
 15085 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 15086 ;; Defined at:
 15087 ;;		line 891 in file "interrupt.c"
 15088 ;; Parameters:    Size  Location     Type
 15089 ;;		None
 15090 ;; Auto vars:     Size  Location     Type
 15091 ;;		None
 15092 ;; Return value:  Size  Location     Type
 15093 ;;                  1    wreg      void 
 15094 ;; Registers used:
 15095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15096 ;; Tracked objects:
 15097 ;;		On entry : 0/0
 15098 ;;		On exit  : 0/0
 15099 ;;		Unchanged: 0/0
 15100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15101 ;;      Params:         0       0       0       0
 15102 ;;      Locals:         0       0       0       0
 15103 ;;      Temps:          0       0       0       0
 15104 ;;      Totals:         0       0       0       0
 15105 ;;Total ram usage:        0 bytes
 15106 ;; Hardware stack levels used:    1
 15107 ;; Hardware stack levels required when called:    3
 15108 ;; This function calls:
 15109 ;;		i2_Alarme_On
 15110 ;; This function is called by:
 15111 ;;		_HIGH_PRIORITY_IRQ
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           	psect	text96
 15116  0021AA                     __ptext96:
 15117                           	opt stack 0
 15118  0021AA                     i2_IRQ_I_MOTEUR_1:
 15119                           	opt stack 11
 15120                           
 15121                           ;interrupt.c: 892: INTCON3bits.INT1IF = 0;
 15122                           
 15123                           ;incstack = 0
 15124  0021AA  90F0               	bcf	intcon3,0,c	;volatile
 15125                           
 15126                           ;interrupt.c: 893: Compteur_IRQ_I_Moteur_1 += 1;
 15127  0021AC  0100               	movlb	0	; () banked
 15128  0021AE  2B89               	incf	_Compteur_IRQ_I_Moteur_1& (0+255),f,b	;volatile
 15129                           
 15130                           ; BSR set to: 0
 15131                           ;interrupt.c: 894: if (Compteur_IRQ_I_Moteur_1 == 0) {
 15132  0021B0  5189               	movf	_Compteur_IRQ_I_Moteur_1& (0+255),w,b	;volatile
 15133  0021B2  A4D8               	btfss	status,2,c
 15134  0021B4  0012               	return	
 15135                           
 15136                           ; BSR set to: 0
 15137                           ;interrupt.c: 895: LATCbits.LATC2 = 1;
 15138  0021B6  848B               	bsf	3979,2,c	;volatile
 15139                           
 15140                           ;interrupt.c: 897: LATCbits.LATC0 = 0;
 15141  0021B8  908B               	bcf	3979,0,c	;volatile
 15142                           
 15143                           ;interrupt.c: 898: LATCbits.LATC1 = 0;
 15144  0021BA  928B               	bcf	3979,1,c	;volatile
 15145                           
 15146                           ; BSR set to: 0
 15147                           ;interrupt.c: 900: Alarme_On(1);
 15148  0021BC  0E01               	movlw	1
 15149  0021BE  EF87  F011         	goto	i2_Alarme_On
 15150  0021C2                     __end_ofi2_IRQ_I_MOTEUR_1:
 15151                           	opt stack 0
 15152                           tblptru	equ	0xFF8
 15153                           tblptrh	equ	0xFF7
 15154                           tblptrl	equ	0xFF6
 15155                           tablat	equ	0xFF5
 15156                           prodh	equ	0xFF4
 15157                           prodl	equ	0xFF3
 15158                           intcon	equ	0xFF2
 15159                           intcon2	equ	0xFF1
 15160                           intcon3	equ	0xFF0
 15161                           postinc0	equ	0xFEE
 15162                           wreg	equ	0xFE8
 15163                           indf1	equ	0xFE7
 15164                           postdec1	equ	0xFE5
 15165                           fsr1h	equ	0xFE2
 15166                           fsr1l	equ	0xFE1
 15167                           bsr	equ	0xFE0
 15168                           indf2	equ	0xFDF
 15169                           postinc2	equ	0xFDE
 15170                           postdec2	equ	0xFDD
 15171                           fsr2h	equ	0xFDA
 15172                           fsr2l	equ	0xFD9
 15173                           status	equ	0xFD8
 15174                           
 15175 ;; *************** function i2_IRQ_CAPOT *****************
 15176 ;; Defined at:
 15177 ;;		line 886 in file "interrupt.c"
 15178 ;; Parameters:    Size  Location     Type
 15179 ;;		None
 15180 ;; Auto vars:     Size  Location     Type
 15181 ;;		None
 15182 ;; Return value:  Size  Location     Type
 15183 ;;                  1    wreg      void 
 15184 ;; Registers used:
 15185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15186 ;; Tracked objects:
 15187 ;;		On entry : 0/0
 15188 ;;		On exit  : 0/0
 15189 ;;		Unchanged: 0/0
 15190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15191 ;;      Params:         0       0       0       0
 15192 ;;      Locals:         0       0       0       0
 15193 ;;      Temps:          0       0       0       0
 15194 ;;      Totals:         0       0       0       0
 15195 ;;Total ram usage:        0 bytes
 15196 ;; Hardware stack levels used:    1
 15197 ;; Hardware stack levels required when called:    3
 15198 ;; This function calls:
 15199 ;;		i2_Alarme_On
 15200 ;; This function is called by:
 15201 ;;		_HIGH_PRIORITY_IRQ
 15202 ;; This function uses a non-reentrant model
 15203 ;;
 15204                           
 15205                           	psect	text97
 15206  002396                     __ptext97:
 15207                           	opt stack 0
 15208  002396                     i2_IRQ_CAPOT:
 15209                           	opt stack 11
 15210                           
 15211                           ;interrupt.c: 887: INT0IF = 0;
 15212                           
 15213                           ;incstack = 0
 15214  002396  92F2               	bcf	intcon,1,c	;volatile
 15215                           
 15216                           ;interrupt.c: 888: Alarme_On(4);
 15217  002398  0E04               	movlw	4
 15218  00239A  EF87  F011         	goto	i2_Alarme_On
 15219  00239E                     __end_ofi2_IRQ_CAPOT:
 15220                           	opt stack 0
 15221                           tblptru	equ	0xFF8
 15222                           tblptrh	equ	0xFF7
 15223                           tblptrl	equ	0xFF6
 15224                           tablat	equ	0xFF5
 15225                           prodh	equ	0xFF4
 15226                           prodl	equ	0xFF3
 15227                           intcon	equ	0xFF2
 15228                           intcon2	equ	0xFF1
 15229                           intcon3	equ	0xFF0
 15230                           postinc0	equ	0xFEE
 15231                           wreg	equ	0xFE8
 15232                           indf1	equ	0xFE7
 15233                           postdec1	equ	0xFE5
 15234                           fsr1h	equ	0xFE2
 15235                           fsr1l	equ	0xFE1
 15236                           bsr	equ	0xFE0
 15237                           indf2	equ	0xFDF
 15238                           postinc2	equ	0xFDE
 15239                           postdec2	equ	0xFDD
 15240                           fsr2h	equ	0xFDA
 15241                           fsr2l	equ	0xFD9
 15242                           status	equ	0xFD8
 15243                           
 15244 ;; *************** function i2_Alarme_On *****************
 15245 ;; Defined at:
 15246 ;;		line 18 in file "alarme.c"
 15247 ;; Parameters:    Size  Location     Type
 15248 ;;  alarme_new_v    1    wreg     unsigned char 
 15249 ;; Auto vars:     Size  Location     Type
 15250 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 15251 ;; Return value:  Size  Location     Type
 15252 ;;                  1    wreg      void 
 15253 ;; Registers used:
 15254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15255 ;; Tracked objects:
 15256 ;;		On entry : 0/0
 15257 ;;		On exit  : 0/0
 15258 ;;		Unchanged: 0/0
 15259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15260 ;;      Params:         0       0       0       0
 15261 ;;      Locals:         1       0       0       0
 15262 ;;      Temps:          0       0       0       0
 15263 ;;      Totals:         1       0       0       0
 15264 ;;Total ram usage:        1 bytes
 15265 ;; Hardware stack levels used:    1
 15266 ;; Hardware stack levels required when called:    2
 15267 ;; This function calls:
 15268 ;;		i2_Coupe_Moteur
 15269 ;;		i2_Etat_Update
 15270 ;; This function is called by:
 15271 ;;		i2_IRQ_CAPOT
 15272 ;;		i2_IRQ_I_MOTEUR_1
 15273 ;; This function uses a non-reentrant model
 15274 ;;
 15275                           
 15276                           	psect	text98
 15277  00230E                     __ptext98:
 15278                           	opt stack 0
 15279  00230E                     i2_Alarme_On:
 15280                           	opt stack 11
 15281                           
 15282                           ;incstack = 0
 15283                           ;i2Alarme_On@alarme_new_value stored from wreg
 15284  00230E  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 15285                           
 15286                           ;alarme.c: 22: Etat_Update(1);
 15287  002310  0E01               	movlw	1
 15288  002312  EC84  F010         	call	i2_Etat_Update
 15289                           
 15290                           ;alarme.c: 23: Alarme = alarme_new_value;
 15291  002316  C002  F0A8         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 15292                           
 15293                           ;alarme.c: 24: Coupe_Moteur();
 15294  00231A  EF18  F011         	goto	i2_Coupe_Moteur	;wreg free
 15295  00231E                     __end_ofi2_Alarme_On:
 15296                           	opt stack 0
 15297                           tblptru	equ	0xFF8
 15298                           tblptrh	equ	0xFF7
 15299                           tblptrl	equ	0xFF6
 15300                           tablat	equ	0xFF5
 15301                           prodh	equ	0xFF4
 15302                           prodl	equ	0xFF3
 15303                           intcon	equ	0xFF2
 15304                           intcon2	equ	0xFF1
 15305                           intcon3	equ	0xFF0
 15306                           postinc0	equ	0xFEE
 15307                           wreg	equ	0xFE8
 15308                           indf1	equ	0xFE7
 15309                           postdec1	equ	0xFE5
 15310                           fsr1h	equ	0xFE2
 15311                           fsr1l	equ	0xFE1
 15312                           bsr	equ	0xFE0
 15313                           indf2	equ	0xFDF
 15314                           postinc2	equ	0xFDE
 15315                           postdec2	equ	0xFDD
 15316                           fsr2h	equ	0xFDA
 15317                           fsr2l	equ	0xFD9
 15318                           status	equ	0xFD8
 15319                           
 15320 ;; *************** function i2_Etat_Update *****************
 15321 ;; Defined at:
 15322 ;;		line 67 in file "action.c"
 15323 ;; Parameters:    Size  Location     Type
 15324 ;;  etat_new_val    1    wreg     unsigned char 
 15325 ;; Auto vars:     Size  Location     Type
 15326 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 15327 ;; Return value:  Size  Location     Type
 15328 ;;                  1    wreg      void 
 15329 ;; Registers used:
 15330 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15331 ;; Tracked objects:
 15332 ;;		On entry : 0/0
 15333 ;;		On exit  : 0/0
 15334 ;;		Unchanged: 0/0
 15335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15336 ;;      Params:         0       0       0       0
 15337 ;;      Locals:         1       0       0       0
 15338 ;;      Temps:          0       0       0       0
 15339 ;;      Totals:         1       0       0       0
 15340 ;;Total ram usage:        1 bytes
 15341 ;; Hardware stack levels used:    1
 15342 ;; This function calls:
 15343 ;;		Nothing
 15344 ;; This function is called by:
 15345 ;;		i2_Alarme_On
 15346 ;; This function uses a non-reentrant model
 15347 ;;
 15348                           
 15349                           	psect	text99
 15350  002108                     __ptext99:
 15351                           	opt stack 0
 15352  002108                     i2_Etat_Update:
 15353                           	opt stack 12
 15354                           
 15355                           ;incstack = 0
 15356                           ;i2Etat_Update@etat_new_value stored from wreg
 15357  002108  6E01               	movwf	i2Etat_Update@etat_new_value,c
 15358                           
 15359                           ;action.c: 68: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 15360  00210A  504D               	movf	_Etat_Precedent_Index,w,c
 15361  00210C  0F6A               	addlw	low _Etat_Log
 15362  00210E  6ED9               	movwf	fsr2l,c
 15363  002110  6ADA               	clrf	fsr2h,c
 15364  002112  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 15365                           
 15366                           ;action.c: 69: Etat = etat_new_value;
 15367  002116  C001  F0A9         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 15368                           
 15369                           ;action.c: 70: Etat_Precedent_Index++;
 15370  00211A  2A4D               	incf	_Etat_Precedent_Index,f,c
 15371                           
 15372                           ;action.c: 71: if (Etat_Precedent_Index == 10) {
 15373  00211C  0E0A               	movlw	10
 15374  00211E  184D               	xorwf	_Etat_Precedent_Index,w,c
 15375  002120  B4D8               	btfsc	status,2,c
 15376                           
 15377                           ;action.c: 72: Etat_Precedent_Index = 0;
 15378  002122  6A4D               	clrf	_Etat_Precedent_Index,c
 15379  002124  0012               	return		;funcret
 15380  002126                     __end_ofi2_Etat_Update:
 15381                           	opt stack 0
 15382                           tblptru	equ	0xFF8
 15383                           tblptrh	equ	0xFF7
 15384                           tblptrl	equ	0xFF6
 15385                           tablat	equ	0xFF5
 15386                           prodh	equ	0xFF4
 15387                           prodl	equ	0xFF3
 15388                           intcon	equ	0xFF2
 15389                           intcon2	equ	0xFF1
 15390                           intcon3	equ	0xFF0
 15391                           postinc0	equ	0xFEE
 15392                           wreg	equ	0xFE8
 15393                           indf1	equ	0xFE7
 15394                           postdec1	equ	0xFE5
 15395                           fsr1h	equ	0xFE2
 15396                           fsr1l	equ	0xFE1
 15397                           bsr	equ	0xFE0
 15398                           indf2	equ	0xFDF
 15399                           postinc2	equ	0xFDE
 15400                           postdec2	equ	0xFDD
 15401                           fsr2h	equ	0xFDA
 15402                           fsr2l	equ	0xFD9
 15403                           status	equ	0xFD8
 15404                           
 15405 ;; *************** function i2_Coupe_Moteur *****************
 15406 ;; Defined at:
 15407 ;;		line 237 in file "action.c"
 15408 ;; Parameters:    Size  Location     Type
 15409 ;;		None
 15410 ;; Auto vars:     Size  Location     Type
 15411 ;;		None
 15412 ;; Return value:  Size  Location     Type
 15413 ;;                  1    wreg      void 
 15414 ;; Registers used:
 15415 ;;		cstack
 15416 ;; Tracked objects:
 15417 ;;		On entry : 0/0
 15418 ;;		On exit  : 0/0
 15419 ;;		Unchanged: 0/0
 15420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15421 ;;      Params:         0       0       0       0
 15422 ;;      Locals:         0       0       0       0
 15423 ;;      Temps:          0       0       0       0
 15424 ;;      Totals:         0       0       0       0
 15425 ;;Total ram usage:        0 bytes
 15426 ;; Hardware stack levels used:    1
 15427 ;; Hardware stack levels required when called:    1
 15428 ;; This function calls:
 15429 ;;		i2_TIMER2_Off
 15430 ;; This function is called by:
 15431 ;;		i2_Alarme_On
 15432 ;; This function uses a non-reentrant model
 15433 ;;
 15434                           
 15435                           	psect	text100
 15436  002230                     __ptext100:
 15437                           	opt stack 0
 15438  002230                     i2_Coupe_Moteur:
 15439                           	opt stack 11
 15440                           
 15441                           ;action.c: 238: TIMER2_Off();
 15442                           
 15443                           ;incstack = 0
 15444  002230  ECDE  F011         	call	i2_TIMER2_Off	;wreg free
 15445                           
 15446                           ;action.c: 243: LATEbits.LATE2 = 0;
 15447  002234  948D               	bcf	3981,2,c	;volatile
 15448                           
 15449                           ;action.c: 250: LATCbits.LATC0 = 0;
 15450  002236  908B               	bcf	3979,0,c	;volatile
 15451                           
 15452                           ;action.c: 251: LATCbits.LATC1 = 0;
 15453  002238  928B               	bcf	3979,1,c	;volatile
 15454                           
 15455                           ;action.c: 252: OVDCOND = 0b00000000;
 15456  00223A  6A6B               	clrf	3947,c	;volatile
 15457                           
 15458                           ;action.c: 253: LATD4 = 0;LATD5 = 0;
 15459  00223C  988C               	bcf	3980,4,c	;volatile
 15460  00223E  9A8C               	bcf	3980,5,c	;volatile
 15461                           
 15462                           ;action.c: 254: LATD6 = 0;LATD7 = 0;
 15463  002240  9C8C               	bcf	3980,6,c	;volatile
 15464  002242  9E8C               	bcf	3980,7,c	;volatile
 15465  002244  0012               	return		;funcret
 15466  002246                     __end_ofi2_Coupe_Moteur:
 15467                           	opt stack 0
 15468                           tblptru	equ	0xFF8
 15469                           tblptrh	equ	0xFF7
 15470                           tblptrl	equ	0xFF6
 15471                           tablat	equ	0xFF5
 15472                           prodh	equ	0xFF4
 15473                           prodl	equ	0xFF3
 15474                           intcon	equ	0xFF2
 15475                           intcon2	equ	0xFF1
 15476                           intcon3	equ	0xFF0
 15477                           postinc0	equ	0xFEE
 15478                           wreg	equ	0xFE8
 15479                           indf1	equ	0xFE7
 15480                           postdec1	equ	0xFE5
 15481                           fsr1h	equ	0xFE2
 15482                           fsr1l	equ	0xFE1
 15483                           bsr	equ	0xFE0
 15484                           indf2	equ	0xFDF
 15485                           postinc2	equ	0xFDE
 15486                           postdec2	equ	0xFDD
 15487                           fsr2h	equ	0xFDA
 15488                           fsr2l	equ	0xFD9
 15489                           status	equ	0xFD8
 15490                           
 15491 ;; *************** function i2_TIMER2_Off *****************
 15492 ;; Defined at:
 15493 ;;		line 165 in file "timer.c"
 15494 ;; Parameters:    Size  Location     Type
 15495 ;;		None
 15496 ;; Auto vars:     Size  Location     Type
 15497 ;;		None
 15498 ;; Return value:  Size  Location     Type
 15499 ;;                  1    wreg      void 
 15500 ;; Registers used:
 15501 ;;		None
 15502 ;; Tracked objects:
 15503 ;;		On entry : 0/0
 15504 ;;		On exit  : 0/0
 15505 ;;		Unchanged: 0/0
 15506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15507 ;;      Params:         0       0       0       0
 15508 ;;      Locals:         0       0       0       0
 15509 ;;      Temps:          0       0       0       0
 15510 ;;      Totals:         0       0       0       0
 15511 ;;Total ram usage:        0 bytes
 15512 ;; Hardware stack levels used:    1
 15513 ;; This function calls:
 15514 ;;		Nothing
 15515 ;; This function is called by:
 15516 ;;		i2_Coupe_Moteur
 15517 ;; This function uses a non-reentrant model
 15518 ;;
 15519                           
 15520                           	psect	text101
 15521  0023BC                     __ptext101:
 15522                           	opt stack 0
 15523  0023BC                     i2_TIMER2_Off:
 15524                           	opt stack 11
 15525                           
 15526                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 15527                           
 15528                           ;incstack = 0
 15529  0023BC  929D               	bcf	3997,1,c	;volatile
 15530                           
 15531                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 15532  0023BE  929E               	bcf	3998,1,c	;volatile
 15533  0023C0  0012               	return		;funcret
 15534  0023C2                     __end_ofi2_TIMER2_Off:
 15535                           	opt stack 0
 15536                           tblptru	equ	0xFF8
 15537                           tblptrh	equ	0xFF7
 15538                           tblptrl	equ	0xFF6
 15539                           tablat	equ	0xFF5
 15540                           prodh	equ	0xFF4
 15541                           prodl	equ	0xFF3
 15542                           intcon	equ	0xFF2
 15543                           intcon2	equ	0xFF1
 15544                           intcon3	equ	0xFF0
 15545                           postinc0	equ	0xFEE
 15546                           wreg	equ	0xFE8
 15547                           indf1	equ	0xFE7
 15548                           postdec1	equ	0xFE5
 15549                           fsr1h	equ	0xFE2
 15550                           fsr1l	equ	0xFE1
 15551                           bsr	equ	0xFE0
 15552                           indf2	equ	0xFDF
 15553                           postinc2	equ	0xFDE
 15554                           postdec2	equ	0xFDD
 15555                           fsr2h	equ	0xFDA
 15556                           fsr2l	equ	0xFD9
 15557                           status	equ	0xFD8
 15558                           tblptru	equ	0xFF8
 15559                           tblptrh	equ	0xFF7
 15560                           tblptrl	equ	0xFF6
 15561                           tablat	equ	0xFF5
 15562                           prodh	equ	0xFF4
 15563                           prodl	equ	0xFF3
 15564                           intcon	equ	0xFF2
 15565                           intcon2	equ	0xFF1
 15566                           intcon3	equ	0xFF0
 15567                           postinc0	equ	0xFEE
 15568                           wreg	equ	0xFE8
 15569                           indf1	equ	0xFE7
 15570                           postdec1	equ	0xFE5
 15571                           fsr1h	equ	0xFE2
 15572                           fsr1l	equ	0xFE1
 15573                           bsr	equ	0xFE0
 15574                           indf2	equ	0xFDF
 15575                           postinc2	equ	0xFDE
 15576                           postdec2	equ	0xFDD
 15577                           fsr2h	equ	0xFDA
 15578                           fsr2l	equ	0xFD9
 15579                           status	equ	0xFD8
 15580                           
 15581                           	psect	rparam
 15582  0000                     tblptru	equ	0xFF8
 15583                           tblptrh	equ	0xFF7
 15584                           tblptrl	equ	0xFF6
 15585                           tablat	equ	0xFF5
 15586                           prodh	equ	0xFF4
 15587                           prodl	equ	0xFF3
 15588                           intcon	equ	0xFF2
 15589                           intcon2	equ	0xFF1
 15590                           intcon3	equ	0xFF0
 15591                           postinc0	equ	0xFEE
 15592                           wreg	equ	0xFE8
 15593                           indf1	equ	0xFE7
 15594                           postdec1	equ	0xFE5
 15595                           fsr1h	equ	0xFE2
 15596                           fsr1l	equ	0xFE1
 15597                           bsr	equ	0xFE0
 15598                           indf2	equ	0xFDF
 15599                           postinc2	equ	0xFDE
 15600                           postdec2	equ	0xFDD
 15601                           fsr2h	equ	0xFDA
 15602                           fsr2l	equ	0xFD9
 15603                           status	equ	0xFD8
 15604                           
 15605                           	psect	temp
 15606  000051                     btemp:
 15607                           	opt stack 0
 15608  000051                     	ds	1
 15609  0000                     int$flags	set	btemp
 15610                           tblptru	equ	0xFF8
 15611                           tblptrh	equ	0xFF7
 15612                           tblptrl	equ	0xFF6
 15613                           tablat	equ	0xFF5
 15614                           prodh	equ	0xFF4
 15615                           prodl	equ	0xFF3
 15616                           intcon	equ	0xFF2
 15617                           intcon2	equ	0xFF1
 15618                           intcon3	equ	0xFF0
 15619                           postinc0	equ	0xFEE
 15620                           wreg	equ	0xFE8
 15621                           indf1	equ	0xFE7
 15622                           postdec1	equ	0xFE5
 15623                           fsr1h	equ	0xFE2
 15624                           fsr1l	equ	0xFE1
 15625                           bsr	equ	0xFE0
 15626                           indf2	equ	0xFDF
 15627                           postinc2	equ	0xFDE
 15628                           postdec2	equ	0xFDD
 15629                           fsr2h	equ	0xFDA
 15630                           fsr2l	equ	0xFD9
 15631                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         537
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     19     160
    BANK1           256      0     256
    BANK2           256     11     139

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Disparait->_Buzzer_Etat
    _IRQ_PION_Metal_Apparait->_Buzzer_Etat
    _IRQ_I_MOTEUR_1->_Alarme_On
    _IRQ_CAPOT->_Alarme_On
    _Alarme_On->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update
    _IRQ_PION_CHANGEMENT_ETAT->i1_Buzzer_Etat

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_IRQ_CAPOT->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update

Critical Paths under _main in BANK0

    _Cycle->_Mouvement_X
    _Cycle->_delay_s
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  175091
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  174992
                                             10 BANK2      1     1      0
                        _Buzzer_Etat
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   39998
                                              7 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26320
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   54092
                                             17 BANK0      2     0      2
                                              7 BANK2      1     1      0
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      31
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   26351
                          _Alarme_On
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40329
                                              7 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13194
                                             17 BANK0      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26651
                                             17 BANK0      1     1      0
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13129
                                             63 COMRAM     3     3      0
                                             13 BANK0      4     4      0
                                              0 BANK2      7     0      7
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     465
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0      31
                        _Buzzer_Etat
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      31
                        _Buzzer_Etat
                          _TIMER5_On
 ---------------------------------------------------------------------------------
 (7) _TIMER5_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     335
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
           _IRQ_PION_CHANGEMENT_ETAT
                            _SPI_ISR
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _IRQ_PION_CHANGEMENT_ETAT                            0     0      0      22
                      i1_Buzzer_Etat
                       i1_TIMER5_Off
                        i1_TIMER5_On
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_On                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     132
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Buzzer_Etat
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Buzzer_Etat
           _TIMER5_On
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _IRQ_PION_CHANGEMENT_ETAT
     i1_Buzzer_Etat
     i1_TIMER5_Off
     i1_TIMER5_On
   _SPI_ISR
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      B      8B       9       54.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      A0       5      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27B       3        0.0%
DATA                 0      0     27B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Feb 12 13:54:11 2019

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l241 0C54  
                                                   l252 0CEC  
                                                   l600 195E  
                                                   l521 2328  
                                                   l610 0E06  
                                                   l275 1D58  
                                                   l612 0E3A  
                                                   l625 0F10  
                                                   l618 0E8C  
                                                   l567 20C6  
                                                   l578 1A5A  
                                                   l597 192A  
                                                   l687 21DC  
                                                   l955 1FAE  
                                                   l968 1DBC  
                                                   l993 17C4  
                                                   l986 1762  
                                                   _GIE 007F97  
                                                   l997 16B8  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009E  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 23C2  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0288  
                                                  l1004 171A  
                                                  l1009 1182  
                                                  l1027 126C  
                                                  l1028 1228  
                                                  l1401 05A0  
                                                  l1402 05A6  
                                                  l1403 05E0  
                                                  l1404 05E2  
                                                  l2142 1CCA  
                                                  l1431 06A6  
                                                  l2152 1D4A  
                                                  l1417 062E  
                                                  l1353 017A  
                                                  l1702 09B4  
                                                  l1471 07C2  
                                                  l1447 0758  
                                                  l1720 0A8A  
                                                  l1297 1514  
                                                  l1721 0A8E  
                                                  l1473 07D8  
                                                  l1387 0470  
                                                  l1396 0564  
                                                  l1399 059C  
                                                  l1687 08F4  
                                                  l7111 0E58  
                                                  l7121 0EB4  
                                                  l7105 0E2E  
                                                  l7041 1A60  
                                                  l7211 1836  
                                                  l7203 1820  
                                                  l7115 0E60  
                                                  l7035 1A48  
                                                  l7133 0EE4  
                                                  l7125 0EBE  
                                                  l7221 1C9A  
                                                  l7207 182A  
                                                  l7151 0F68  
                                                  l7143 0F42  
                                                  l7047 1A72  
                                                  l7039 1A54  
                                                  l7055 1A84  
                                                  l7223 1CA2  
                                                  l8015 1EB0  
                                                  l7129 0EDC  
                                                  l7233 1CC0  
                                                  l7225 1CA6  
                                                  l7241 1D22  
                                                  l8009 1E9A  
                                                  l7331 1552  
                                                  l7147 0F60  
                                                  l7139 0F38  
                                                  l7155 0F94  
                                                  l7075 192E  
                                                  l7083 1942  
                                                  l7243 1D2A  
                                                  l7411 0A20  
                                                  l8131 11D6  
                                                  l8123 11C2  
                                                  l7069 191E  
                                                  l7245 1D2E  
                                                  l7405 0A1C  
                                                  l7421 0A48  
                                                  l8133 11DA  
                                                  l8141 11F8  
                                                  l7335 1568  
                                                  l7327 151E  
                                                  l7191 17F6  
                                                  l7095 1966  
                                                  l7423 0A52  
                                                  l8303 17A4  
                                                  l8071 1FD0  
                                                  l8151 121C  
                                                  _ADIF 007CF6  
                                                  l7249 1D40  
                                                  l7169 2156  
                                                  l7353 08FC  
                                                  l7521 01F4  
                                                  l8145 1208  
                                                  l8209 16BC  
                                                  l7195 1802  
                                                  l7187 17EA  
                                                  l7371 0984  
                                                  l7363 092A  
                                                  l7347 08E0  
                                                  l7603 0552  
                                                  l7531 0234  
                                                  l7515 01C4  
                                                  l7507 017E  
                                                  l8139 11F0  
                                                  l8243 170C  
                                                  l8411 0BC8  
                                                  l7197 180A  
                                                  l7461 0AF6  
                                                  l7429 0A68  
                                                  l7357 0902  
                                                  l7605 0558  
                                                  l7533 0254  
                                                  l7525 020C  
                                                  l8309 17B6  
                                                  l8165 1248  
                                                  l8173 1264  
                                                  l8237 16FA  
                                                  l8181 224C  
                                                  l7199 180E  
                                                  l7471 0B80  
                                                  l7463 0AFC  
                                                  l7455 0AE0  
                                                  l7439 0AA8  
                                                  l7447 0AC2  
                                                  l7391 09F0  
                                                  l7375 0988  
                                                  l7711 0700  
                                                  l7623 05F2  
                                                  l7615 05AC  
                                                  l7607 055E  
                                                  l7519 01E8  
                                                  l8159 1236  
                                                  l8511 0D3A  
                                                  l8431 0C0A  
                                                  l8327 1460  
                                                  l7465 0B3E  
                                                  l7473 0B8A  
                                                  l7449 0AC8  
                                                  l7481 0BB4  
                                                  l7721 0712  
                                                  l7617 05D4  
                                                  l7553 032E  
                                                  l7545 02CA  
                                                  l7537 0272  
                                                  l7529 022C  
                                                  l8169 1256  
                                                  l8097 1186  
                                                  l8185 2252  
                                                  l8521 0D48  
                                                  l8505 0D16  
                                                  l8409 0BBE  
                                                  l7387 09DC  
                                                  l7707 06FA  
                                                  l7723 071E  
                                                  l7635 060A  
                                                  l7627 05F8  
                                                  l7571 03B2  
                                                  l7563 036E  
                                                  l7555 034E  
                                                  l7547 02EA  
                                                  l7539 02A4  
                                                  l7491 00F0  
                                                  l8275 1766  
                                                  l8531 0D82  
                                                  l8435 0C16  
                                                  l8427 0BF8  
                                                  l7477 0B96  
                                                  l7397 09F4  
                                                  l7733 0766  
                                                  l7725 0724  
                                                  l7549 030A  
                                                  l7493 0106  
                                                  l8541 0DD2  
                                                  l8533 0D92  
                                                  l7479 0B9C  
                                                  l7751 078C  
                                                  l7735 076C  
                                                  l7743 0774  
                                                  l7671 0682  
                                                  l7663 0670  
                                                  l7639 0610  
                                                  l7583 0452  
                                                  l7567 0390  
                                                  l7559 035E  
                                                  l7591 0478  
                                                  l7495 010E  
                                                  l8535 0DA2  
                                                  l8455 0C60  
                                                  l8447 0C42  
                                                  l7753 0798  
                                                  l7745 0780  
                                                  l7729 0764  
                                                  l7649 0622  
                                                  l7593 04A8  
                                                  l7577 03D4  
                                                  l7489 00D6  
                                                  l8537 0DB2  
                                                  l8529 0D6C  
                                                  l8473 0CAE  
                                                  l8457 0C70  
                                                  l8545 0DE2  
                                                  l7771 07E6  
                                                  l7755 079E  
                                                  l7747 0786  
                                                  l7739 076E  
                                                  l7763 07B0  
                                                  l7675 0688  
                                                  l7659 066A  
                                                  l7595 04AE  
                                                  l7579 0422  
                                                  l7499 014E  
                                                  l7851 1E20  
                                                  l7843 1E0C  
                                                  l8539 0DC2  
                                                  _ADON 007E10  
                                                  l7773 07EC  
                                                  l7765 07D0  
                                                  l7685 069A  
                                                  l7845 1E10  
                                                  l7829 21D2  
                                                  l8493 0CF8  
                                                  l8485 0CDA  
                                                  l8469 0C9C  
                                                  l7759 07A4  
                                                  l7695 06E2  
                                                  l7599 04C6  
                                                  l7839 1E06  
                                                  l7855 1E28  
                                                  l8495 0D08  
                                                  l7769 07DE  
                                                  l7873 1FEC  
                                                  l7865 2266  
                                                  l6995 21DE  
                                                  l7699 06E8  
                                                  l7779 07F8  
                                                  l7875 1FF0  
                                                  STR_1 3FB9  
                                                  STR_2 3EB7  
                                                  STR_3 3FEC  
                                                  STR_4 3F9B  
                                                  STR_5 3FF9  
                                                  STR_6 3FB9  
                                                  STR_7 3F6A  
                                                  STR_8 3FBC  
                                                  STR_9 3FB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0FAA  
                                      ??i2_Coupe_Moteur 0001  
                                                  u5000 0F32  
                                                  _IOFS 007E9A  
                                                  _PEIE 007F96  
                                                  u5420 01BE  
                                                  u6307 162E  
                                                  u6317 1640  
                                                  u6327 1652  
                                                  u4920 0E28  
                                                  u6337 1664  
                                                  u6257 15D4  
                                                  _PR5H 000F91  
                                                  u6347 1676  
                                                  u6267 15E6  
                                                  u6277 15F8  
                                                  u5645 07CC  
                                                  u5646 07CE  
                                                  _PR5L 000F90  
                                                  u6287 160A  
                                                  u4960 0EAE  
                                                  u6297 161C  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 23CE  
                                    _Detection_Pion_Off 237E  
                                         _nb_s_bequille 004C  
                                       _Option_Multitas 027E  
                                                  _Etat 00A9  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 1D54  
                               IRQ_Execution@IRQ_Indice 0012  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 1386  
                                 __end_of_IRQ_Execution 1BA0  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 00EC  
                           __end_of_EUSART1_RX_T3_LOCAL 08D8  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00CE  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A5  
                                       __end_of_Init_IT 1DF8  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 0008  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 009D  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 230E  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0010  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 22CE  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0010  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 22FE  
            _Surveillance_Consommation_Moteur_1_Activer 22BE  
                                    __size_ofi1_IRQ_PWM 0004  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 22FE  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0010  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 22BE  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0010  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 22EE  
            _Surveillance_Consommation_Moteur_2_Activer 22AE  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0287  
                                       __end_of___lbdiv 1E2C  
                                                 STR_10 3F16  
                                                 STR_11 3FDB  
                                       __end_of___awmod 1840  
                                        _Bequille_I_Max 004A  
                                      _LOW_PRIORITY_IRQ 0018  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 001E  
                                       __end_of___lwdiv 1CD4  
                                         _Init_Moteur_1 227E  
                                         _Init_Moteur_2 226E  
                                                 i1l600 19C2  
                                                 i1l521 2336  
                                       __end_of___lwmod 1D54  
                                                 i1l610 0FAC  
                                                 i1l612 0FE0  
                                                 i1l560 1C18  
                                                 i1l640 004C  
                                                 i1l625 10B6  
                                                 i1l618 1032  
                                                 i1l650 008C  
                                                 i1l642 0058  
                                                 i1l556 1BF4  
                                                 i1l652 0098  
                                                 i1l644 0064  
                                                 i1l654 00A4  
                                                 i1l646 0080  
                                                 i1l638 0042  
                                                 i1l647 0074  
                                                 i1l657 00AE  
                                                 i1l578 1AB8  
                                                 i2l701 1D0A  
                                                 i1l597 198E  
                                                 i2l694 1CE8  
                                                 i2l687 221E  
                                                 i2l696 1CF4  
                                                 i2l698 1D00  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                    __size_of_TIMER5_On 0004  
                                         _Init_Variable 1458  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 225A  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 2002  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0BBE  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 1F68  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3EAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 20EA  
                                       __end_of_isdigit 215E  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0287  
                                                 status 000FD8  
                                     _Mouvement_Startup 004E  
                                       __end_of_sprintf 0BBE  
                          __end_of_EUSART1_Check_Buffer 1F18  
                                       ___lbdiv@divisor 000F  
                                          ?i1_TIMER5_On 0001  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 002E  
                          __size_of_Check_List_Moteur_2 0026  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 2396  
                                       __initialization 1C40  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 0281  
                                  EUSART1_RX_T3_LOCAL@B 0282  
                                  EUSART1_RX_T3_LOCAL@C 0283  
                                  EUSART1_RX_T3_LOCAL@D 0284  
                                  EUSART1_RX_T3_LOCAL@E 0285  
                                  EUSART1_RX_T3_LOCAL@F 0286  
                                      __end_of_Etat_Get 1E92  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1BF0  
                                          __end_of_main 1D8C  
                                   __end_of_Init_TIMER0 208E  
                                   __end_of_Init_TIMER2 2178  
                                   __end_of_Init_TIMER5 1F40  
                                      __end_of_Init_ADC 20AE  
                            ??_IRQ_PION_CHANGEMENT_ETAT 0006  
                                      __end_of_Init_SPI 204C  
                                      __end_of_Init_PWM 2142  
                                 __end_of_delay_n_100ms 225A  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0289  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                          _Consigne_Max_Moteur_Bequille 0092  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 1DC4  
                            _Check_List_Moteur_Bequille 1D8C  
                           __end_of_EUSART1_Buffer_Send 15CE  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1308 1F8C  
                                                i1l1628 12AA  
                                                i1l6405 1C22  
                                                i1l6421 1C34  
                                     __end_of_IRQ_CAPOT 238E  
                                                i1l6503 1436  
                                                i1l6407 1C28  
                                                i1l6433 12AE  
                                                i1l6425 1280  
                                                i1l6601 1006  
                                                i1l6443 1316  
                                                i1l6611 1064  
                                                i1l6523 1AA6  
                                                i1l6509 143A  
                                                i1l6453 134E  
                                                i1l6445 131E  
                                                i1l6461 136A  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6391 1C00  
                                                i1l6439 12F8  
                                                i1l6615 1082  
                                                i1l6607 105A  
                                                i1l6535 1AD0  
                                                i1l6527 1AB2  
                                                i1l6543 1AE2  
                                                i1l6481 1394  
                                                i1l6393 1C08  
                                                i1l6449 1332  
                                                i1l6457 1352  
                                                i1l6633 1106  
                                                i1l6625 10DE  
                                                i1l6641 113A  
                                                i1l6529 1ABE  
                                                i1l6561 1992  
                                                i1l6491 13FC  
                                                i1l6619 108A  
                                                i1l6555 1982  
                                                i1l6493 1404  
                                                i1l6637 110E  
                                                i1l6629 10E8  
                                                i1l6581 19CA  
                                                i1l6487 13DE  
                                                i1l6591 0FD4  
                                                i1l6497 1418  
                                                i1l6569 19A6  
                                                i1l6597 0FFE  
                                                i2l4549 2220  
                                     __end_ofi1_IRQ_ADC 1150  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 23D6  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 001A  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 028A  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A3  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A8  
                                      __end_of_delay_1s 1F68  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 21D8  
                                 _Consigne_Max_Moteur_X 0094  
                                 _Consigne_Max_Moteur_Z 0093  
                                     __end_of_TIMER2_On 23A4  
                                     __end_of_TIMER5_On 23D2  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 172E  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 232C  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0289  
                                                ___wmul 2002  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 2352  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 2346  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0287  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1C46  
                                                clear_1 1C54  
                                                clear_2 1C66  
                                                clear_3 1C76  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 2204  
                                           _Etat_Update 20CC  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3EA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00ED  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 236A  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 235E  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 22DE  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 1D16  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 1C7C  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 206E  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 206E  
                                           _Init_TIMER2 215E  
                                           _Init_TIMER5 1F18  
                                         ___rparam_used 000001  
                                         ?i2_IRQ_TIMER2 0001  
                                     _Capteur_Capot_Off 23C6  
                                         __end_of_Cycle 0E04  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 0280  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 20AE  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 18A6  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 2108  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 1EEC  
                                __size_ofi1_IRQ_TIMER_0 005E  
                                __size_ofi1_IRQ_TIMER_5 0064  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 1458  
                                   __end_of_Mouvement_X 1278  
                                   __end_of_Mouvement_Z 172E  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F7  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0091  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 231E  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00CE  
                             __end_of_Capteur_Capot_Off 23CA  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_ofi1_TIMER5_On 0004  
                                  __size_of_IRQ_TIMER_0 005E  
                                  __size_of_IRQ_TIMER_5 0064  
                               __size_ofi1_Coupe_Moteur 0016  
                                  __size_ofi2_IRQ_CAPOT 0008  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0089  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                                 __end_ofi2_Etat_Update 2126  
                                   _Check_List_Moteur_1 1E92  
                                   _Check_List_Moteur_2 1F90  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0E04  
                                               _P4_busy 00AB  
                                               _IRQ_PWM 23CA  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 23AA  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 009A  
                                               _SPI_ISR 1278  
                              Mouvement_X@type_consigne 00FE  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 1D0E  
                                 __end_ofi1_Buzzer_Etat 233A  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1AF2  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A1  
                                     delay_s@delay_time 00FE  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 235E  
                                    __end_of_TIMER2_Off 23B0  
                                    __end_of_TIMER5_Off 2374  
                                      _consigne_pwm_max 008C  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 1DC4  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1A94  
                                         i1_IRQ_TIMER_5 1970  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00AA  
                                               ___lbdiv 1DF8  
                                               ___awmod 17D8  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                 __size_of_Coupe_Moteur 0016  
                                       __size_of___wmul 0026  
                          __size_of_EUSART1_RX_T3_LOCAL 0806  
                                 __end_of_Etat_Intitule 1E60  
                                               ___lwdiv 1C8A  
                                               ___lwmod 1D16  
                                         _type_consigne 0090  
                                               __pcinit 1C40  
                                               _delay_s 1FDC  
                                               __ramtop 0300  
                                               __ptext0 1D54  
                                               _nb_Pion 00A0  
                                               __ptext1 1458  
                                               __ptext2 1F18  
                                               __ptext3 215E  
                                               __ptext4 206E  
                                               __ptext5 2028  
                                               __ptext6 1840  
                          __end_of_Init_Moteur_Bequille 22AE  
                                               __ptext7 2126  
                                               __ptext8 1DC4  
                                               __ptext9 204C  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 238E  
                                           _Mouvement_X 1150  
                                           _Mouvement_Z 1684  
                                     __end_of_hexpowers 3EB7  
                                  _Init_Input_Capture_0 204C  
                        _Capteur_Capot_Compteur_Temps_S 009C  
                                               _dpowers 3EA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 2192  
                                               _isdigit 2142  
                                   _EUSART1_IT_ACTIVATE 233A  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1BA0  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0010  
                                          _Consigne_Max 0095  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08D8  
                                        __pintcode_body 1CD4  
                                  end_of_initialization 1C7C  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004D  
                                         __Lmediumconst 3EA4  
                             _Surveillance_Capteur_Pion 008A  
                                               int_func 1CD4  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 21EE  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 2386  
                                             i1_IRQ_ADC 0FAA  
                    _Surveillance_Consommation_Moteur_1 0049  
                    _Surveillance_Consommation_Moteur_2 0048  
                                             i1_IRQ_PWM 23D2  
                               __size_ofi2_Coupe_Moteur 0016  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 21C2  
                                             _TIMER2_On 239E  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                             _TIMER5_On 23CE  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 009F  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A4  
                                  __end_ofi1_TIMER2_Off 23B6  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 237E  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 23BC  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                     __size_of_IRQ_PION_CHANGEMENT_ETAT 0050  
                             ?_IRQ_PION_CHANGEMENT_ETAT 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0018  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 226E  
                                      _nb_100ms_platine 00A2  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 23C2  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 00FF  
                                   __end_of_delay_100ms 1684  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 00FF  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 1FB6  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008D  
                                         _IRQ_Execution 1B4C  
                                             _Alarme_On 22CE  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0288  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 2204  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                            ?_TIMER5_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 2028  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1C40  
                                 __end_of_Stop_Moteur_1 23C6  
                                             _Init_Port 1840  
                              _IRQ_PION_Metal_Disparait 2178  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                                       _delay_s_counter 008B  
                             __end_of_Detection_Pion_On 1FDC  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 1EC0  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 221A  
                                  _Init_Moteur_Bequille 229E  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 0038  
                                         _delay_n_100ms 2246  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005A  
                                 __end_of_Init_Moteur_1 228E  
                                 __end_of_Init_Moteur_2 227E  
                                 __end_of_Init_Variable 1514  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 0099  
                                _Image_Courant_Moteur_2 0098  
                                         __pcstackBANK0 00ED  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 228E  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 15CE  
                                            ?_Init_Port 0001  
                                          _isdigit$3598 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00D2  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F6  
                                           sprintf@prec 00F3  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??i1_TIMER5_On 0005  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0003  
                                           ??_IRQ_CAPOT 0011  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 2230  
                                             __pintcode 0008  
                                         __pmediumconst 3EA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0018  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                           ??_TIMER5_On 000F  
                                             __ptext100 2230  
                                             __ptext101 23BC  
                                              ?___lbdiv 000F  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 0280  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008E  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A7  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 00FE  
                                          ?_Mouvement_Z 0287  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0246  
                                  __size_of_Etat_Update 001E  
                                             _hexpowers 3EAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 21AA  
                                      i2_IRQ_I_MOTEUR_2 221A  
                                          i1_TIMER2_Off 23B0  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 2374  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 2246  
                                              _PIE3bits 000FA3  
                                              i1u431_20 0FCE  
                                __size_ofi2_Etat_Update 001E  
                                              i1u435_20 1054  
                                              i1u439_20 10D8  
                                          i2_IRQ_TIMER2 23B6  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 00FA  
                                   __end_ofi1_TIMER5_On 23DA  
                                   __end_of_IRQ_TIMER_0 1A94  
                                   __end_of_IRQ_TIMER_5 1970  
                                   __end_ofi2_IRQ_CAPOT 239E  
                                              _SPI_MODE 0278  
                      __end_of_IRQ_PION_CHANGEMENT_ETAT 1C40  
                                          i2_TIMER2_Off 23BC  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 2386  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 1514  
                                         i1_Etat_Update 20EA  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0097  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1EC0  
                           __end_of_Check_List_Moteur_2 1FB6  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 1E60  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 208E  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 2028  
                                              _Init_PWM 2126  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009B  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1A36  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 19D4  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 190C  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 18A6  
                                   __end_ofi1_Alarme_On 22EE  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 231E  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                            ??_IRQ_PION_Metal_Disparait 0010  
                                      __size_of_delay_s 0026  
                              __end_of_SPI_Check_Buffer 1EEC  
                                    __end_of_u_Init_PWM 1B4C  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F1  
                                            sprintf@val 00F4  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 2108  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 1F40  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 208E  
                                              __ptext11 1BA0  
                                              __ptext20 23C2  
                                              __ptext12 233A  
                                              __ptext21 227E  
                                              __ptext13 0BBE  
                                              __ptext30 1FDC  
                                              __ptext22 19D4  
                                              __ptext14 2246  
                                              __ptext31 2352  
                                              __ptext23 1FB6  
                                              __ptext15 1684  
                                              __ptext40 1EC0  
                                              __ptext32 239E  
                                              __ptext24 225A  
                                              __ptext16 226E  
                                              __ptext41 1EEC  
                                              __ptext33 235E  
                                              __ptext25 1E92  
                                              __ptext17 1F90  
                                              __ptext50 1B4C  
                                              __ptext42 00D2  
                                              __ptext34 229E  
                                              __ptext26 228E  
                                              __ptext18 1150  
                                              __ptext51 190C  
                                              __ptext43 08D8  
                                              __ptext35 21C2  
                                              __ptext27 23C6  
                                              __ptext19 2346  
                                              __ptext60 23CE  
                                              __ptext52 1A36  
                                              __ptext44 2142  
                                              __ptext36 18A6  
                                              __ptext28 172E  
                                              __ptext61 231E  
                                              __ptext53 22AE  
                                              __ptext45 2002  
                                              __ptext37 237E  
                                              __ptext29 1AF2  
                                              __ptext70 1E2C  
                                              __ptext62 21D8  
                                              __ptext54 22BE  
                                              __ptext46 1D16  
                                              __ptext38 1D8C  
                                              __ptext71 1E60  
                                              __ptext63 2192  
                                              __ptext55 23A4  
                                              __ptext47 1C8A  
                                              __ptext39 1DF8  
                                              __ptext80 1A94  
                                              __ptext72 17D8  
                                              __ptext64 2386  
                                              __ptext56 23CA  
                                              __ptext48 1F40  
                                              __ptext81 22EE  
                                              __ptext73 1514  
                                              __ptext65 22CE  
                                              __ptext57 2178  
                                              __ptext49 15CE  
                                              __ptext90 1F68  
                                              __ptext82 22FE  
                                              __ptext66 20CC  
                                              __ptext58 236A  
                                              __ptext91 1386  
                                              __ptext83 23D2  
                                              __ptext75 1970  
                                              __ptext67 21EE  
                                              __ptext59 20AE  
                                              __ptext92 238E  
                                              __ptext84 0FAA  
                                              __ptext76 22DE  
                                              __ptext68 23AA  
                                              __ptext85 1278  
                                              __ptext77 20EA  
                                              __ptext69 0E04  
                                              __ptext94 23B6  
                                              __ptext86 1BF0  
                                              __ptext78 2204  
                                              __ptext95 221A  
                                              __ptext87 23D6  
                                              __ptext79 23B0  
                                              __ptext96 21AA  
                                              __ptext88 2374  
                                              __ptext97 2396  
                                              __ptext89 232C  
                                              __ptext98 230E  
                                              __ptext99 2108  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 2346  
                                          _UART_TX_TEXT 00AC  
                                      __size_of_sprintf 02E6  
                                              _consigne 0096  
                                         i1_Buzzer_Etat 232C  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 0038  
                                           i1_TIMER5_On 23D6  
                                           _IRQ_TIMER_0 1A36  
                                           _IRQ_TIMER_5 190C  
                          __size_of_Detection_Pion_Init 0014  
                                           i2_IRQ_CAPOT 2396  
                              __end_of_Capteur_Capot_On 229E  
                                        _IRQ_I_MOTEUR_1 2192  
                                        _IRQ_I_MOTEUR_2 21D8  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 004B  
                                         _Etat_Intitule 1E2C  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 1386  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00B6  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                              _IRQ_PION_CHANGEMENT_ETAT 1BF0  
                                  __size_of_Mouvement_X 0128  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 17D8  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 008F  
                                           i1_Alarme_On 22DE  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F2  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 20CC  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0287  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1AF2  
                                 __end_ofi1_IRQ_TIMER_5 19D4  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 230E  
                          __end_of_EUSART1_Transmit_ISR 1F90  
                                __end_of_IRQ_I_MOTEUR_1 21AA  
                                __end_of_IRQ_I_MOTEUR_2 21EE  
                                            _IRQ_TIMER2 23A4  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 00A6  
                              __end_ofi2_IRQ_I_MOTEUR_1 21C2  
                              __end_ofi2_IRQ_I_MOTEUR_2 2230  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 2352  
                                            _TIMER2_Off 23AA  
                                            _TIMER5_Off 236A  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F9  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 00FE  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
