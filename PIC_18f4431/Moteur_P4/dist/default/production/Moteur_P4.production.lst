

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Mar 19 15:59:02 2019

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.42
   128                           ; Generated 13/04/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F4431 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162                           	psect	mediumconst
   163  003EA4                     __pmediumconst:
   164                           	opt stack 0
   165  003EA4  00                 	db	0
   166  003EA5                     _dpowers:
   167                           	opt stack 0
   168  003EA5  0001               	dw	1
   169  003EA7  000A               	dw	10
   170  003EA9  0064               	dw	100
   171  003EAB  03E8               	dw	1000
   172  003EAD  2710               	dw	10000
   173  003EAF                     __end_of_dpowers:
   174                           	opt stack 0
   175  003EAF                     _hexpowers:
   176                           	opt stack 0
   177  003EAF  0001               	dw	1
   178  003EB1  0010               	dw	16
   179  003EB3  0100               	dw	256
   180  003EB5  1000               	dw	4096
   181  003EB7                     __end_of_hexpowers:
   182                           	opt stack 0
   183  0000                     _SSPCONbits	set	4038
   184  0000                     _SSPSTATbits	set	4039
   185  0000                     _RCREG1	set	4014
   186  0000                     _SSPBUF	set	4041
   187  0000                     _TXREG1	set	4013
   188  0000                     _TXSTA1	set	4012
   189  0000                     _RCSTA1	set	4011
   190  0000                     _BAUDCON	set	4010
   191  0000                     _RCSTA1bits	set	4011
   192  0000                     _SPBRGH	set	4016
   193  0000                     _SPBRG	set	4015
   194  0000                     _TXSTA1bits	set	4012
   195  0000                     _BAUDCONbits	set	4010
   196  0000                     _PR5L	set	3984
   197  0000                     _PR5H	set	3985
   198  0000                     _TMR5H	set	3976
   199  0000                     _TMR5L	set	3975
   200  0000                     _T5CONbits	set	4023
   201  0000                     _PR2	set	4043
   202  0000                     _T2CONbits	set	4042
   203  0000                     _T2CON	set	4042
   204  0000                     _TMR0L	set	4054
   205  0000                     _TMR0H	set	4055
   206  0000                     _T0CONbits	set	4053
   207  0000                     _LATEbits	set	3981
   208  0000                     _SEVTCMPL	set	3953
   209  0000                     _SEVTCMPH	set	3952
   210  0000                     _PWMCON0bits	set	3951
   211  0000                     _PTCON0bits	set	3967
   212  0000                     _PTCON1bits	set	3966
   213  0000                     _OVDCONS	set	3946
   214  0000                     _OVDCOND	set	3947
   215  0000                     _DTCON	set	3949
   216  0000                     _PWMCON1	set	3950
   217  0000                     _PWMCON0	set	3951
   218  0000                     _PTCON1	set	3966
   219  0000                     _PTCON0	set	3967
   220  0000                     _PTPERH	set	3962
   221  0000                     _LATE	set	3981
   222  0000                     _LATD	set	3980
   223  0000                     _LATC	set	3979
   224  0000                     _LATB	set	3978
   225  0000                     _LATA	set	3977
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISE	set	3990
   228  0000                     _TRISDbits	set	3989
   229  0000                     _TRISD	set	3989
   230  0000                     _TRISCbits	set	3988
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISBbits	set	3987
   233  0000                     _TRISB	set	3987
   234  0000                     _TRISAbits	set	3986
   235  0000                     _TRISA	set	3986
   236  0000                     _TMR2	set	4044
   237  0000                     _LATCbits	set	3979
   238  0000                     _RCREG	set	4014
   239  0000                     _PIR1bits	set	3998
   240  0000                     _PDC1H	set	3958
   241  0000                     _PDC1L	set	3959
   242  0000                     _PDC0H	set	3960
   243  0000                     _PDC0L	set	3961
   244  0000                     _PTPERL	set	3963
   245  0000                     _PORTAbits	set	3968
   246  0000                     _PORTCbits	set	3970
   247  0000                     _CAP2CONbits	set	3938
   248  0000                     _PIR3bits	set	4004
   249  0000                     _IPR3bits	set	4005
   250  0000                     _PIE3bits	set	4003
   251  0000                     _CAP1CONbits	set	3939
   252  0000                     _RCONbits	set	4048
   253  0000                     _INTCON3bits	set	4080
   254  0000                     _INTCON2bits	set	4081
   255  0000                     _INTCONbits	set	4082
   256  0000                     _LATAbits	set	3977
   257  0000                     _ADRESH	set	4036
   258  0000                     _IPR1bits	set	3999
   259  0000                     _PIE1bits	set	3997
   260  0000                     _ADCON3bits	set	3994
   261  0000                     _ADCON1bits	set	4033
   262  0000                     _ADCON0bits	set	4034
   263  0000                     _ANSEL1	set	4025
   264  0000                     _ANSEL0	set	4024
   265  0000                     _ADCHS	set	3993
   266  0000                     _ADCON3	set	3994
   267  0000                     _ADCON2bits	set	4032
   268  0000                     _ADCON2	set	4032
   269  0000                     _ADCON1	set	4033
   270  0000                     _ADCON0	set	4034
   271  0000                     _OSCCON	set	4051
   272  0000                     _TRMT1	set	32097
   273  0000                     _LATC5	set	31837
   274  0000                     _GIE	set	32663
   275  0000                     _PEIE	set	32662
   276  0000                     _TMR2IF	set	31985
   277  0000                     _LATD7	set	31847
   278  0000                     _LATD6	set	31846
   279  0000                     _LATD5	set	31845
   280  0000                     _LATD4	set	31844
   281  0000                     _SEVTDIR	set	31603
   282  0000                     _INT0IF	set	32657
   283  0000                     _PTIF	set	32036
   284  0000                     _GODONE	set	32273
   285  0000                     _ADIF	set	31990
   286  0000                     _ADON	set	32272
   287  0000                     _IOFS	set	32410
   288  003EB7                     STR_2:
   289  003EB7  63                 	db	99	;'c'
   290  003EB8  6F                 	db	111	;'o'
   291  003EB9  6E                 	db	110	;'n'
   292  003EBA  73                 	db	115	;'s'
   293  003EBB  69                 	db	105	;'i'
   294  003EBC  67                 	db	103	;'g'
   295  003EBD  6E                 	db	110	;'n'
   296  003EBE  65                 	db	101	;'e'
   297  003EBF  3D                 	db	61	;'='
   298  003EC0  25                 	db	37
   299  003EC1  64                 	db	100	;'d'
   300  003EC2  20                 	db	32
   301  003EC3  69                 	db	105	;'i'
   302  003EC4  5F                 	db	95	;'_'
   303  003EC5  31                 	db	49	;'1'
   304  003EC6  3D                 	db	61	;'='
   305  003EC7  25                 	db	37
   306  003EC8  64                 	db	100	;'d'
   307  003EC9  20                 	db	32
   308  003ECA  69                 	db	105	;'i'
   309  003ECB  5F                 	db	95	;'_'
   310  003ECC  32                 	db	50	;'2'
   311  003ECD  3D                 	db	61	;'='
   312  003ECE  25                 	db	37
   313  003ECF  64                 	db	100	;'d'
   314  003ED0  20                 	db	32
   315  003ED1  64                 	db	100	;'d'
   316  003ED2  75                 	db	117	;'u'
   317  003ED3  74                 	db	116	;'t'
   318  003ED4  79                 	db	121	;'y'
   319  003ED5  3D                 	db	61	;'='
   320  003ED6  25                 	db	37
   321  003ED7  64                 	db	100	;'d'
   322  003ED8  20                 	db	32
   323  003ED9  65                 	db	101	;'e'
   324  003EDA  72                 	db	114	;'r'
   325  003EDB  72                 	db	114	;'r'
   326  003EDC  65                 	db	101	;'e'
   327  003EDD  75                 	db	117	;'u'
   328  003EDE  72                 	db	114	;'r'
   329  003EDF  3D                 	db	61	;'='
   330  003EE0  25                 	db	37
   331  003EE1  64                 	db	100	;'d'
   332  003EE2  20                 	db	32
   333  003EE3  50                 	db	80	;'P'
   334  003EE4  61                 	db	97	;'a'
   335  003EE5  74                 	db	116	;'t'
   336  003EE6  69                 	db	105	;'i'
   337  003EE7  6E                 	db	110	;'n'
   338  003EE8  61                 	db	97	;'a'
   339  003EE9  67                 	db	103	;'g'
   340  003EEA  65                 	db	101	;'e'
   341  003EEB  5F                 	db	95	;'_'
   342  003EEC  4E                 	db	78	;'N'
   343  003EED  62                 	db	98	;'b'
   344  003EEE  5F                 	db	95	;'_'
   345  003EEF  45                 	db	69	;'E'
   346  003EF0  73                 	db	115	;'s'
   347  003EF1  73                 	db	115	;'s'
   348  003EF2  61                 	db	97	;'a'
   349  003EF3  69                 	db	105	;'i'
   350  003EF4  3D                 	db	61	;'='
   351  003EF5  25                 	db	37
   352  003EF6  64                 	db	100	;'d'
   353  003EF7  20                 	db	32
   354  003EF8  43                 	db	67	;'C'
   355  003EF9  61                 	db	97	;'a'
   356  003EFA  70                 	db	112	;'p'
   357  003EFB  74                 	db	116	;'t'
   358  003EFC  65                 	db	101	;'e'
   359  003EFD  75                 	db	117	;'u'
   360  003EFE  72                 	db	114	;'r'
   361  003EFF  5F                 	db	95	;'_'
   362  003F00  43                 	db	67	;'C'
   363  003F01  61                 	db	97	;'a'
   364  003F02  70                 	db	112	;'p'
   365  003F03  6F                 	db	111	;'o'
   366  003F04  74                 	db	116	;'t'
   367  003F05  5F                 	db	95	;'_'
   368  003F06  4E                 	db	78	;'N'
   369  003F07  62                 	db	98	;'b'
   370  003F08  5F                 	db	95	;'_'
   371  003F09  45                 	db	69	;'E'
   372  003F0A  76                 	db	118	;'v'
   373  003F0B  65                 	db	101	;'e'
   374  003F0C  6E                 	db	110	;'n'
   375  003F0D  65                 	db	101	;'e'
   376  003F0E  6D                 	db	109	;'m'
   377  003F0F  65                 	db	101	;'e'
   378  003F10  6E                 	db	110	;'n'
   379  003F11  74                 	db	116	;'t'
   380  003F12  3D                 	db	61	;'='
   381  003F13  25                 	db	37
   382  003F14  64                 	db	100	;'d'
   383  003F15  00                 	db	0
   384  003F16                     STR_10:
   385  003F16  25                 	db	37
   386  003F17  30                 	db	48	;'0'
   387  003F18  32                 	db	50	;'2'
   388  003F19  58                 	db	88	;'X'
   389  003F1A  20                 	db	32
   390  003F1B  25                 	db	37
   391  003F1C  30                 	db	48	;'0'
   392  003F1D  32                 	db	50	;'2'
   393  003F1E  58                 	db	88	;'X'
   394  003F1F  20                 	db	32
   395  003F20  25                 	db	37
   396  003F21  30                 	db	48	;'0'
   397  003F22  32                 	db	50	;'2'
   398  003F23  58                 	db	88	;'X'
   399  003F24  20                 	db	32
   400  003F25  25                 	db	37
   401  003F26  30                 	db	48	;'0'
   402  003F27  32                 	db	50	;'2'
   403  003F28  58                 	db	88	;'X'
   404  003F29  20                 	db	32
   405  003F2A  25                 	db	37
   406  003F2B  30                 	db	48	;'0'
   407  003F2C  32                 	db	50	;'2'
   408  003F2D  58                 	db	88	;'X'
   409  003F2E  20                 	db	32
   410  003F2F  25                 	db	37
   411  003F30  30                 	db	48	;'0'
   412  003F31  32                 	db	50	;'2'
   413  003F32  58                 	db	88	;'X'
   414  003F33  20                 	db	32
   415  003F34  25                 	db	37
   416  003F35  30                 	db	48	;'0'
   417  003F36  32                 	db	50	;'2'
   418  003F37  58                 	db	88	;'X'
   419  003F38  20                 	db	32
   420  003F39  25                 	db	37
   421  003F3A  30                 	db	48	;'0'
   422  003F3B  32                 	db	50	;'2'
   423  003F3C  58                 	db	88	;'X'
   424  003F3D  20                 	db	32
   425  003F3E  25                 	db	37
   426  003F3F  30                 	db	48	;'0'
   427  003F40  32                 	db	50	;'2'
   428  003F41  58                 	db	88	;'X'
   429  003F42  20                 	db	32
   430  003F43  25                 	db	37
   431  003F44  30                 	db	48	;'0'
   432  003F45  32                 	db	50	;'2'
   433  003F46  58                 	db	88	;'X'
   434  003F47  20                 	db	32
   435  003F48  25                 	db	37
   436  003F49  30                 	db	48	;'0'
   437  003F4A  32                 	db	50	;'2'
   438  003F4B  58                 	db	88	;'X'
   439  003F4C  20                 	db	32
   440  003F4D  25                 	db	37
   441  003F4E  30                 	db	48	;'0'
   442  003F4F  31                 	db	49	;'1'
   443  003F50  58                 	db	88	;'X'
   444  003F51  20                 	db	32
   445  003F52  25                 	db	37
   446  003F53  30                 	db	48	;'0'
   447  003F54  31                 	db	49	;'1'
   448  003F55  58                 	db	88	;'X'
   449  003F56  20                 	db	32
   450  003F57  25                 	db	37
   451  003F58  30                 	db	48	;'0'
   452  003F59  31                 	db	49	;'1'
   453  003F5A  58                 	db	88	;'X'
   454  003F5B  20                 	db	32
   455  003F5C  25                 	db	37
   456  003F5D  30                 	db	48	;'0'
   457  003F5E  32                 	db	50	;'2'
   458  003F5F  58                 	db	88	;'X'
   459  003F60  25                 	db	37
   460  003F61  30                 	db	48	;'0'
   461  003F62  32                 	db	50	;'2'
   462  003F63  58                 	db	88	;'X'
   463  003F64  20                 	db	32
   464  003F65  25                 	db	37
   465  003F66  30                 	db	48	;'0'
   466  003F67  32                 	db	50	;'2'
   467  003F68  58                 	db	88	;'X'
   468  003F69  00                 	db	0
   469  003F6A                     STR_7:
   470  003F6A  63                 	db	99	;'c'
   471  003F6B  6F                 	db	111	;'o'
   472  003F6C  6E                 	db	110	;'n'
   473  003F6D  73                 	db	115	;'s'
   474  003F6E  69                 	db	105	;'i'
   475  003F6F  67                 	db	103	;'g'
   476  003F70  6E                 	db	110	;'n'
   477  003F71  65                 	db	101	;'e'
   478  003F72  3D                 	db	61	;'='
   479  003F73  25                 	db	37
   480  003F74  64                 	db	100	;'d'
   481  003F75  20                 	db	32
   482  003F76  70                 	db	112	;'p'
   483  003F77  61                 	db	97	;'a'
   484  003F78  74                 	db	116	;'t'
   485  003F79  69                 	db	105	;'i'
   486  003F7A  6E                 	db	110	;'n'
   487  003F7B  3D                 	db	61	;'='
   488  003F7C  25                 	db	37
   489  003F7D  64                 	db	100	;'d'
   490  003F7E  20                 	db	32
   491  003F7F  70                 	db	112	;'p'
   492  003F80  69                 	db	105	;'i'
   493  003F81  6F                 	db	111	;'o'
   494  003F82  6E                 	db	110	;'n'
   495  003F83  3D                 	db	61	;'='
   496  003F84  25                 	db	37
   497  003F85  64                 	db	100	;'d'
   498  003F86  20                 	db	32
   499  003F87  70                 	db	112	;'p'
   500  003F88  6C                 	db	108	;'l'
   501  003F89  61                 	db	97	;'a'
   502  003F8A  74                 	db	116	;'t'
   503  003F8B  69                 	db	105	;'i'
   504  003F8C  6E                 	db	110	;'n'
   505  003F8D  65                 	db	101	;'e'
   506  003F8E  3D                 	db	61	;'='
   507  003F8F  25                 	db	37
   508  003F90  64                 	db	100	;'d'
   509  003F91  20                 	db	32
   510  003F92  70                 	db	112	;'p'
   511  003F93  65                 	db	101	;'e'
   512  003F94  6C                 	db	108	;'l'
   513  003F95  6C                 	db	108	;'l'
   514  003F96  65                 	db	101	;'e'
   515  003F97  3D                 	db	61	;'='
   516  003F98  25                 	db	37
   517  003F99  64                 	db	100	;'d'
   518  003F9A  00                 	db	0
   519  003F9B                     STR_4:
   520  003F9B  6E                 	db	110	;'n'
   521  003F9C  62                 	db	98	;'b'
   522  003F9D  5F                 	db	95	;'_'
   523  003F9E  73                 	db	115	;'s'
   524  003F9F  3D                 	db	61	;'='
   525  003FA0  25                 	db	37
   526  003FA1  64                 	db	100	;'d'
   527  003FA2  20                 	db	32
   528  003FA3  6E                 	db	110	;'n'
   529  003FA4  62                 	db	98	;'b'
   530  003FA5  5F                 	db	95	;'_'
   531  003FA6  50                 	db	80	;'P'
   532  003FA7  69                 	db	105	;'i'
   533  003FA8  6F                 	db	111	;'o'
   534  003FA9  6E                 	db	110	;'n'
   535  003FAA  3D                 	db	61	;'='
   536  003FAB  25                 	db	37
   537  003FAC  64                 	db	100	;'d'
   538  003FAD  20                 	db	32
   539  003FAE  6E                 	db	110	;'n'
   540  003FAF  62                 	db	98	;'b'
   541  003FB0  5F                 	db	95	;'_'
   542  003FB1  54                 	db	84	;'T'
   543  003FB2  69                 	db	105	;'i'
   544  003FB3  6D                 	db	109	;'m'
   545  003FB4  65                 	db	101	;'e'
   546  003FB5  72                 	db	114	;'r'
   547  003FB6  5F                 	db	95	;'_'
   548  003FB7  35                 	db	53	;'5'
   549  003FB8  3D                 	db	61	;'='
   550  003FB9  25                 	db	37
   551  003FBA  64                 	db	100	;'d'
   552  003FBB  00                 	db	0
   553  003FBC                     STR_8:
   554  003FBC  45                 	db	69	;'E'
   555  003FBD  74                 	db	116	;'t'
   556  003FBE  61                 	db	97	;'a'
   557  003FBF  74                 	db	116	;'t'
   558  003FC0  3D                 	db	61	;'='
   559  003FC1  25                 	db	37
   560  003FC2  64                 	db	100	;'d'
   561  003FC3  20                 	db	32
   562  003FC4  6E                 	db	110	;'n'
   563  003FC5  62                 	db	98	;'b'
   564  003FC6  5F                 	db	95	;'_'
   565  003FC7  73                 	db	115	;'s'
   566  003FC8  5F                 	db	95	;'_'
   567  003FC9  66                 	db	102	;'f'
   568  003FCA  6F                 	db	111	;'o'
   569  003FCB  6E                 	db	110	;'n'
   570  003FCC  63                 	db	99	;'c'
   571  003FCD  74                 	db	116	;'t'
   572  003FCE  69                 	db	105	;'i'
   573  003FCF  6F                 	db	111	;'o'
   574  003FD0  6E                 	db	110	;'n'
   575  003FD1  6E                 	db	110	;'n'
   576  003FD2  65                 	db	101	;'e'
   577  003FD3  6D                 	db	109	;'m'
   578  003FD4  65                 	db	101	;'e'
   579  003FD5  6E                 	db	110	;'n'
   580  003FD6  74                 	db	116	;'t'
   581  003FD7  3D                 	db	61	;'='
   582  003FD8  25                 	db	37
   583  003FD9  64                 	db	100	;'d'
   584  003FDA  00                 	db	0
   585  003FDB                     STR_11:
   586  003FDB  30                 	db	48	;'0'
   587  003FDC  31                 	db	49	;'1'
   588  003FDD  32                 	db	50	;'2'
   589  003FDE  33                 	db	51	;'3'
   590  003FDF  34                 	db	52	;'4'
   591  003FE0  35                 	db	53	;'5'
   592  003FE1  36                 	db	54	;'6'
   593  003FE2  37                 	db	55	;'7'
   594  003FE3  38                 	db	56	;'8'
   595  003FE4  39                 	db	57	;'9'
   596  003FE5  41                 	db	65	;'A'
   597  003FE6  42                 	db	66	;'B'
   598  003FE7  43                 	db	67	;'C'
   599  003FE8  44                 	db	68	;'D'
   600  003FE9  45                 	db	69	;'E'
   601  003FEA  46                 	db	70	;'F'
   602  003FEB  00                 	db	0
   603  003FEC                     STR_3:
   604  003FEC  25                 	db	37
   605  003FED  30                 	db	48	;'0'
   606  003FEE  32                 	db	50	;'2'
   607  003FEF  58                 	db	88	;'X'
   608  003FF0  25                 	db	37
   609  003FF1  30                 	db	48	;'0'
   610  003FF2  32                 	db	50	;'2'
   611  003FF3  58                 	db	88	;'X'
   612  003FF4  25                 	db	37
   613  003FF5  30                 	db	48	;'0'
   614  003FF6  32                 	db	50	;'2'
   615  003FF7  58                 	db	88	;'X'
   616  003FF8  00                 	db	0
   617  003FF9                     STR_5:
   618  003FF9  25                 	db	37
   619  003FFA  30                 	db	48	;'0'
   620  003FFB  31                 	db	49	;'1'
   621  003FFC  58                 	db	88	;'X'
   622  003FFD  00                 	db	0
   623  0000                     
   624                           ; #config settings
   625  003FFE  00                 	db	0	; dummy byte at the end
   626  0000                     
   627                           	psect	cinit
   628  001FAE                     __pcinit:
   629                           	opt stack 0
   630  001FAE                     start_initialization:
   631                           	opt stack 0
   632  001FAE                     __initialization:
   633                           	opt stack 0
   634                           
   635                           ; Clear objects allocated to BANK2 (128 bytes)
   636  001FAE  EE02  F000         	lfsr	0,__pbssBANK2
   637  001FB2  0E80               	movlw	128
   638  001FB4                     clear_0:
   639  001FB4  6AEE               	clrf	postinc0,c
   640  001FB6  06E8               	decf	wreg,f,c
   641  001FB8  E1FD               	bnz	clear_0
   642                           
   643                           ; Clear objects allocated to BANK1 (256 bytes)
   644  001FBA  EE01  F000         	lfsr	0,__pbssBANK1
   645  001FBE  EE11 F000          	lfsr	1,256
   646  001FC2                     clear_1:
   647  001FC2  6AEE               	clrf	postinc0,c
   648  001FC4  50E5               	movf	postdec1,w,c
   649  001FC6  50E1               	movf	fsr1l,w,c
   650  001FC8  E1FC               	bnz	clear_1
   651  001FCA  50E2               	movf	fsr1h,w,c
   652  001FCC  E1FA               	bnz	clear_1
   653                           
   654                           ; Clear objects allocated to BANK0 (141 bytes)
   655  001FCE  EE00  F060         	lfsr	0,__pbssBANK0
   656  001FD2  0E8D               	movlw	141
   657  001FD4                     clear_2:
   658  001FD4  6AEE               	clrf	postinc0,c
   659  001FD6  06E8               	decf	wreg,f,c
   660  001FD8  E1FD               	bnz	clear_2
   661                           
   662                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   663  001FDA  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   664  001FDC  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   665                           
   666                           ; Clear objects allocated to COMRAM (12 bytes)
   667  001FDE  EE00  F043         	lfsr	0,__pbssCOMRAM
   668  001FE2  0E0C               	movlw	12
   669  001FE4                     clear_3:
   670  001FE4  6AEE               	clrf	postinc0,c
   671  001FE6  06E8               	decf	wreg,f,c
   672  001FE8  E1FD               	bnz	clear_3
   673  001FEA                     end_of_initialization:
   674                           	opt stack 0
   675  001FEA                     __end_of__initialization:
   676                           	opt stack 0
   677  001FEA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   678  001FEC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   679  001FEE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   680  001FF0  6EF8               	movwf	tblptru,c
   681  001FF2  0100               	movlb	0
   682  001FF4  EF61  F010         	goto	_main	;jump to C main() function
   683                           tblptru	equ	0xFF8
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postdec1	equ	0xFE5
   687                           fsr1h	equ	0xFE2
   688                           fsr1l	equ	0xFE1
   689                           
   690                           	psect	bitbssCOMRAM
   691  000278                     __pbitbssCOMRAM:
   692                           	opt stack 0
   693  000278                     _SPI_MODE:
   694                           	opt stack 0
   695  000278                     	ds	1
   696  000279                     _UART_TEST:
   697                           	opt stack 0
   698  000279                     	ds	1
   699  00027A                     _SPI_full:
   700                           	opt stack 0
   701  00027A                     	ds	1
   702  00027B                     _RX1_full:
   703                           	opt stack 0
   704  00027B                     	ds	1
   705  00027C                     _RX1_ABR:
   706                           	opt stack 0
   707  00027C                     	ds	1
   708  00027D                     _Option_Pailleux:
   709                           	opt stack 0
   710  00027D                     	ds	1
   711  00027E                     _Option_Multitas:
   712                           	opt stack 0
   713  00027E                     	ds	1
   714  00027F                     _Nouvelle_Valeur_ADC:
   715                           	opt stack 0
   716  00027F                     	ds	1
   717  000280                     _Detecteur_Pion:
   718                           	opt stack 0
   719  000280                     	ds	1
   720                           tblptru	equ	0xFF8
   721                           postinc0	equ	0xFEE
   722                           wreg	equ	0xFE8
   723                           postdec1	equ	0xFE5
   724                           fsr1h	equ	0xFE2
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	bssCOMRAM
   728  000043                     __pbssCOMRAM:
   729                           	opt stack 0
   730  000043                     _spiRxIndex:
   731                           	opt stack 0
   732  000043                     	ds	1
   733  000044                     _spiTxIndex:
   734                           	opt stack 0
   735  000044                     	ds	1
   736  000045                     _eusart1RxIndex:
   737                           	opt stack 0
   738  000045                     	ds	1
   739  000046                     _eusart1TxIndex:
   740                           	opt stack 0
   741  000046                     	ds	1
   742  000047                     _Compteur_IRQ_I_Moteur_2:
   743                           	opt stack 0
   744  000047                     	ds	1
   745  000048                     _Compteur_IRQ_I_Moteur_1:
   746                           	opt stack 0
   747  000048                     	ds	1
   748  000049                     _Consigne_en_A:
   749                           	opt stack 0
   750  000049                     	ds	1
   751  00004A                     _Capteur_Capot_Nb_Evenement_Autoriser:
   752                           	opt stack 0
   753  00004A                     	ds	1
   754  00004B                     _nb_s_fonctionnement:
   755                           	opt stack 0
   756  00004B                     	ds	1
   757  00004C                     _Etat_Precedent_Index:
   758                           	opt stack 0
   759  00004C                     	ds	1
   760  00004D                     _Mouvement_Startup:
   761                           	opt stack 0
   762  00004D                     	ds	1
   763  00004E                     _nb_100ms_platine_backup:
   764                           	opt stack 0
   765  00004E                     	ds	1
   766                           tblptru	equ	0xFF8
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postdec1	equ	0xFE5
   770                           fsr1h	equ	0xFE2
   771                           fsr1l	equ	0xFE1
   772                           
   773                           	psect	bssBANK0
   774  000060                     __pbssBANK0:
   775                           	opt stack 0
   776  000060                     _eusart1TxBuffer_Test:
   777                           	opt stack 0
   778  000060                     	ds	10
   779  00006A                     _Etat_Log:
   780                           	opt stack 0
   781  00006A                     	ds	10
   782  000074                     _DVT_Tableau_Pause:
   783                           	opt stack 0
   784  000074                     	ds	6
   785  00007A                     lecture_I_Mot2@Resul:
   786                           	opt stack 0
   787  00007A                     	ds	2
   788  00007C                     lecture_I_Mot1@Resul:
   789                           	opt stack 0
   790  00007C                     	ds	2
   791  00007E                     _erreur_accumulator_max:
   792                           	opt stack 0
   793  00007E                     	ds	2
   794  000080                     _PID_out:
   795                           	opt stack 0
   796  000080                     	ds	2
   797  000082                     _erreur_accumulator:
   798                           	opt stack 0
   799  000082                     	ds	2
   800  000084                     _erreur:
   801                           	opt stack 0
   802  000084                     	ds	2
   803  000086                     _duty:
   804                           	opt stack 0
   805  000086                     	ds	2
   806  000088                     _TIMER0_Etat:
   807                           	opt stack 0
   808  000088                     	ds	1
   809  000089                     _Surveillance_Capteur_Pion:
   810                           	opt stack 0
   811  000089                     	ds	1
   812  00008A                     _Surveillance_Consommation_Moteur_2:
   813                           	opt stack 0
   814  00008A                     	ds	1
   815  00008B                     _Surveillance_Consommation_Moteur_1:
   816                           	opt stack 0
   817  00008B                     	ds	1
   818  00008C                     _delay_s_counter:
   819                           	opt stack 0
   820  00008C                     	ds	1
   821  00008D                     _consigne_pwm_max:
   822                           	opt stack 0
   823  00008D                     	ds	1
   824  00008E                     _consigne_pwm:
   825                           	opt stack 0
   826  00008E                     	ds	1
   827  00008F                     _direction:
   828                           	opt stack 0
   829  00008F                     	ds	1
   830  000090                     _mouvement_option:
   831                           	opt stack 0
   832  000090                     	ds	1
   833  000091                     _type_consigne:
   834                           	opt stack 0
   835  000091                     	ds	1
   836  000092                     _Bequille_I_Max:
   837                           	opt stack 0
   838  000092                     	ds	1
   839  000093                     _Pelle_I_Max:
   840                           	opt stack 0
   841  000093                     	ds	1
   842  000094                     _Consigne_Max_Moteur_Bequille:
   843                           	opt stack 0
   844  000094                     	ds	1
   845  000095                     _Consigne_Max_Moteur_Z:
   846                           	opt stack 0
   847  000095                     	ds	1
   848  000096                     _Consigne_Max_Moteur_X:
   849                           	opt stack 0
   850  000096                     	ds	1
   851  000097                     _Consigne_Max:
   852                           	opt stack 0
   853  000097                     	ds	1
   854  000098                     _consigne:
   855                           	opt stack 0
   856  000098                     	ds	1
   857  000099                     _moteur_indice:
   858                           	opt stack 0
   859  000099                     	ds	1
   860  00009A                     _Image_Courant_Moteur_2:
   861                           	opt stack 0
   862  00009A                     	ds	1
   863  00009B                     _Image_Courant_Moteur_1:
   864                           	opt stack 0
   865  00009B                     	ds	1
   866  00009C                     _Patinage_Nb_Essai_Autoriser:
   867                           	opt stack 0
   868  00009C                     	ds	1
   869  00009D                     _Patinage_Nb_Essai:
   870                           	opt stack 0
   871  00009D                     	ds	1
   872  00009E                     _Capteur_Capot_Compteur_Temps_S:
   873                           	opt stack 0
   874  00009E                     	ds	1
   875  00009F                     _Capteur_Capot_Nb_Evenement:
   876                           	opt stack 0
   877  00009F                     	ds	1
   878  0000A0                     _nb_Pion_Objectif:
   879                           	opt stack 0
   880  0000A0                     	ds	1
   881  0000A1                     _nb_Pion:
   882                           	opt stack 0
   883  0000A1                     	ds	1
   884  0000A2                     _nb_s_bequille:
   885                           	opt stack 0
   886  0000A2                     	ds	1
   887  0000A3                     _nb_s_pelle:
   888                           	opt stack 0
   889  0000A3                     	ds	1
   890  0000A4                     _nb_100ms_platine:
   891                           	opt stack 0
   892  0000A4                     	ds	1
   893  0000A5                     _nb_100ms_pion:
   894                           	opt stack 0
   895  0000A5                     	ds	1
   896  0000A6                     _nb_100ms_Timer_5:
   897                           	opt stack 0
   898  0000A6                     	ds	1
   899  0000A7                     _nb_s_patinage:
   900                           	opt stack 0
   901  0000A7                     	ds	1
   902  0000A8                     _nb_s_fonctionnement_souhaiter:
   903                           	opt stack 0
   904  0000A8                     	ds	1
   905  0000A9                     _Alarme:
   906                           	opt stack 0
   907  0000A9                     	ds	1
   908  0000AA                     _Etat:
   909                           	opt stack 0
   910  0000AA                     	ds	1
   911  0000AB                     _Version:
   912                           	opt stack 0
   913  0000AB                     	ds	1
   914  0000AC                     _P4_busy:
   915                           	opt stack 0
   916  0000AC                     	ds	1
   917  0000AD                     _UART_TX_TEXT:
   918                           	opt stack 0
   919  0000AD                     	ds	64
   920                           tblptru	equ	0xFF8
   921                           postinc0	equ	0xFEE
   922                           wreg	equ	0xFE8
   923                           postdec1	equ	0xFE5
   924                           fsr1h	equ	0xFE2
   925                           fsr1l	equ	0xFE1
   926                           
   927                           	psect	bssBANK1
   928  000100                     __pbssBANK1:
   929                           	opt stack 0
   930  000100                     _SPI_RX_TEXT:
   931                           	opt stack 0
   932  000100                     	ds	64
   933  000140                     _spiTxBuffer:
   934                           	opt stack 0
   935  000140                     	ds	64
   936  000180                     _eusart1TxBuffer:
   937                           	opt stack 0
   938  000180                     	ds	64
   939  0001C0                     _UART_RX_TEXT:
   940                           	opt stack 0
   941  0001C0                     	ds	64
   942                           tblptru	equ	0xFF8
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1h	equ	0xFE2
   947                           fsr1l	equ	0xFE1
   948                           
   949                           	psect	bssBANK2
   950  000200                     __pbssBANK2:
   951                           	opt stack 0
   952  000200                     _spiRxBuffer:
   953                           	opt stack 0
   954  000200                     	ds	64
   955  000240                     _eusart1RxBuffer:
   956                           	opt stack 0
   957  000240                     	ds	64
   958                           tblptru	equ	0xFF8
   959                           postinc0	equ	0xFEE
   960                           wreg	equ	0xFE8
   961                           postdec1	equ	0xFE5
   962                           fsr1h	equ	0xFE2
   963                           fsr1l	equ	0xFE1
   964                           
   965                           	psect	cstackBANK2
   966  000280                     __pcstackBANK2:
   967                           	opt stack 0
   968  000280                     EUSART1_RX_T3_LOCAL@Da:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x0
   972  000280                     	ds	1
   973  000281                     EUSART1_RX_T3_LOCAL@A:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x1
   977  000281                     	ds	1
   978  000282                     EUSART1_RX_T3_LOCAL@B:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x2
   982  000282                     	ds	1
   983  000283                     EUSART1_RX_T3_LOCAL@C:
   984                           	opt stack 0
   985                           
   986                           ; 1 bytes @ 0x3
   987  000283                     	ds	1
   988  000284                     EUSART1_RX_T3_LOCAL@D:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x4
   992  000284                     	ds	1
   993  000285                     EUSART1_RX_T3_LOCAL@E:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x5
   997  000285                     	ds	1
   998  000286                     EUSART1_RX_T3_LOCAL@F:
   999                           	opt stack 0
  1000                           
  1001                           ; 1 bytes @ 0x6
  1002  000286                     	ds	1
  1003  000287                     Mouvement_Bequille@type_consigne:
  1004                           	opt stack 0
  1005  000287                     Mouvement_Z@type_consigne:
  1006                           	opt stack 0
  1007  000287                     Mouvement_X@direction:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x7
  1011  000287                     	ds	1
  1012  000288                     Mouvement_Bequille@option:
  1013                           	opt stack 0
  1014  000288                     Mouvement_Z@option:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x8
  1018  000288                     	ds	1
  1019  000289                     Mouvement_Bequille@direction:
  1020                           	opt stack 0
  1021  000289                     Mouvement_Z@direction:
  1022                           	opt stack 0
  1023                           
  1024                           ; 1 bytes @ 0x9
  1025  000289                     	ds	1
  1026  00028A                     Cycle@i:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0xA
  1030  00028A                     	ds	1
  1031                           tblptru	equ	0xFF8
  1032                           postinc0	equ	0xFEE
  1033                           wreg	equ	0xFE8
  1034                           postdec1	equ	0xFE5
  1035                           fsr1h	equ	0xFE2
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	cstackBANK0
  1039  0000ED                     __pcstackBANK0:
  1040                           	opt stack 0
  1041  0000ED                     ??_sprintf:
  1042  0000ED                     ___fttol@sign1:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x0
  1046  0000ED                     	ds	1
  1047  0000EE                     ___fttol@lval:
  1048                           	opt stack 0
  1049                           
  1050                           ; 4 bytes @ 0x1
  1051  0000EE                     	ds	3
  1052  0000F1                     sprintf@idx:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x4
  1056  0000F1                     	ds	1
  1057  0000F2                     sprintf@ap:
  1058                           	opt stack 0
  1059  0000F2                     ___fttol@exp1:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x5
  1063  0000F2                     	ds	1
  1064  0000F3                     sprintf@prec:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x6
  1068  0000F3                     	ds	1
  1069  0000F4                     sprintf@val:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x7
  1073  0000F4                     	ds	2
  1074  0000F6                     sprintf@flag:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x9
  1078  0000F6                     	ds	1
  1079  0000F7                     sprintf@width:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0xA
  1083  0000F7                     	ds	2
  1084  0000F9                     sprintf@c:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0xC
  1088  0000F9                     	ds	1
  1089  0000FA                     ??_EUSART1_RX_T3_LOCAL:
  1090                           
  1091                           ; 1 bytes @ 0xD
  1092  0000FA                     	ds	4
  1093  0000FE                     ??_Check_List_Moteur_Bequille:
  1094  0000FE                     Mouvement_X@type_consigne:
  1095                           	opt stack 0
  1096  0000FE                     delay_s@delay_time:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x11
  1100  0000FE                     	ds	1
  1101  0000FF                     Mouvement_X@option:
  1102                           	opt stack 0
  1103  0000FF                     delay_s@Timer_0_Etat_Prealable:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x12
  1107  0000FF                     	ds	1
  1108                           tblptru	equ	0xFF8
  1109                           postinc0	equ	0xFEE
  1110                           wreg	equ	0xFE8
  1111                           postdec1	equ	0xFE5
  1112                           fsr1h	equ	0xFE2
  1113                           fsr1l	equ	0xFE1
  1114                           
  1115                           	psect	cstackCOMRAM
  1116  000001                     __pcstackCOMRAM:
  1117                           	opt stack 0
  1118  000001                     i2Etat_Update@etat_new_value:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x0
  1122  000001                     	ds	1
  1123  000002                     i2Alarme_On@alarme_new_value:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x1
  1127  000002                     	ds	1
  1128  000003                     ??_HIGH_PRIORITY_IRQ:
  1129  000003                     
  1130                           ; 1 bytes @ 0x2
  1131  000003                     	ds	2
  1132  000005                     ??_SPI_ISR:
  1133  000005                     ??_EUSART1_Receive_ISR:
  1134  000005                     ??i1_IRQ_ADC:
  1135  000005                     i1Buzzer_Etat@Activation:
  1136                           	opt stack 0
  1137  000005                     i1Etat_Update@etat_new_value:
  1138                           	opt stack 0
  1139                           
  1140                           ; 1 bytes @ 0x4
  1141  000005                     	ds	1
  1142  000006                     i1Alarme_On@alarme_new_value:
  1143                           	opt stack 0
  1144                           
  1145                           ; 1 bytes @ 0x5
  1146  000006                     	ds	1
  1147  000007                     EUSART1_Receive_ISR@i:
  1148                           	opt stack 0
  1149  000007                     SPI_ISR@i:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x6
  1153  000007                     	ds	1
  1154  000008                     ??_LOW_PRIORITY_IRQ:
  1155                           
  1156                           ; 1 bytes @ 0x7
  1157  000008                     	ds	7
  1158  00000F                     ??_IRQ_ADC:
  1159  00000F                     ??_delay_100ms:
  1160  00000F                     ??_isdigit:
  1161  00000F                     ?___wmul:
  1162                           	opt stack 0
  1163  00000F                     ?___awmod:
  1164                           	opt stack 0
  1165  00000F                     ?___lwdiv:
  1166                           	opt stack 0
  1167  00000F                     ?___ftpack:
  1168                           	opt stack 0
  1169  00000F                     Init_Variable@i:
  1170                           	opt stack 0
  1171  00000F                     Buzzer_Etat@Activation:
  1172                           	opt stack 0
  1173  00000F                     Etat_Intitule@Etat_Number:
  1174                           	opt stack 0
  1175  00000F                     Etat_Update@etat_new_value:
  1176                           	opt stack 0
  1177  00000F                     EUSART1_Buffer_Send@text:
  1178                           	opt stack 0
  1179  00000F                     ___lbdiv@divisor:
  1180                           	opt stack 0
  1181  00000F                     ___wmul@multiplier:
  1182                           	opt stack 0
  1183  00000F                     ___awmod@dividend:
  1184                           	opt stack 0
  1185  00000F                     ___lwdiv@dividend:
  1186                           	opt stack 0
  1187  00000F                     ___ftpack@arg:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0xE
  1191  00000F                     	ds	1
  1192  000010                     delay_n_100ms@nb_100ms:
  1193                           	opt stack 0
  1194  000010                     Alarme_On@alarme_new_value:
  1195                           	opt stack 0
  1196  000010                     _isdigit$3602:
  1197                           	opt stack 0
  1198  000010                     ___lbdiv@dividend:
  1199                           	opt stack 0
  1200  000010                     EUSART1_Buffer_Send@i:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0xF
  1204  000010                     	ds	1
  1205  000011                     delay_n_100ms@i:
  1206                           	opt stack 0
  1207  000011                     isdigit@c:
  1208                           	opt stack 0
  1209  000011                     ___lbdiv@counter:
  1210                           	opt stack 0
  1211  000011                     ___wmul@multiplicand:
  1212                           	opt stack 0
  1213  000011                     ___awmod@divisor:
  1214                           	opt stack 0
  1215  000011                     ___lwdiv@divisor:
  1216                           	opt stack 0
  1217                           
  1218                           ; 2 bytes @ 0x10
  1219  000011                     	ds	1
  1220  000012                     IRQ_Execution@IRQ_Indice:
  1221                           	opt stack 0
  1222  000012                     ___ftpack@exp:
  1223                           	opt stack 0
  1224  000012                     ___lbdiv@quotient:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x11
  1228  000012                     	ds	1
  1229  000013                     ___awmod@counter:
  1230                           	opt stack 0
  1231  000013                     ___ftpack@sign:
  1232                           	opt stack 0
  1233  000013                     ___lwdiv@counter:
  1234                           	opt stack 0
  1235  000013                     ___wmul@product:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x12
  1239  000013                     	ds	1
  1240  000014                     ??___ftpack:
  1241  000014                     ___awmod@sign:
  1242                           	opt stack 0
  1243  000014                     ___lwdiv@quotient:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x13
  1247  000014                     	ds	1
  1248  000015                     ??_Etat_Get:
  1249                           
  1250                           ; 1 bytes @ 0x14
  1251  000015                     	ds	1
  1252  000016                     ?___lwmod:
  1253                           	opt stack 0
  1254  000016                     ___lwmod@dividend:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x15
  1258  000016                     	ds	1
  1259  000017                     ?___lbtoft:
  1260                           	opt stack 0
  1261  000017                     Etat_Get@Etat_Indice:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x16
  1265  000017                     	ds	1
  1266  000018                     ___lwmod@divisor:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x17
  1270  000018                     	ds	2
  1271  00001A                     ___lbtoft@c:
  1272                           	opt stack 0
  1273  00001A                     ___lwmod@counter:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x19
  1277  00001A                     	ds	1
  1278  00001B                     ?_sprintf:
  1279                           	opt stack 0
  1280  00001B                     ?___ftmul:
  1281                           	opt stack 0
  1282  00001B                     sprintf@sp:
  1283                           	opt stack 0
  1284  00001B                     ___ftmul@f1:
  1285                           	opt stack 0
  1286                           
  1287                           ; 3 bytes @ 0x1A
  1288  00001B                     	ds	1
  1289  00001C                     sprintf@f:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x1B
  1293  00001C                     	ds	2
  1294  00001E                     ___ftmul@f2:
  1295                           	opt stack 0
  1296                           
  1297                           ; 3 bytes @ 0x1D
  1298  00001E                     	ds	3
  1299  000021                     ??___ftmul:
  1300                           
  1301                           ; 1 bytes @ 0x20
  1302  000021                     	ds	3
  1303  000024                     ___ftmul@exp:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x23
  1307  000024                     	ds	1
  1308  000025                     ___ftmul@sign:
  1309                           	opt stack 0
  1310                           
  1311                           ; 1 bytes @ 0x24
  1312  000025                     	ds	1
  1313  000026                     ___ftmul@f3_as_product:
  1314                           	opt stack 0
  1315                           
  1316                           ; 3 bytes @ 0x25
  1317  000026                     	ds	3
  1318  000029                     ?___ftdiv:
  1319                           	opt stack 0
  1320  000029                     ___ftdiv@f1:
  1321                           	opt stack 0
  1322                           
  1323                           ; 3 bytes @ 0x28
  1324  000029                     	ds	3
  1325  00002C                     ___ftdiv@f2:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x2B
  1329  00002C                     	ds	3
  1330  00002F                     ??___ftdiv:
  1331                           
  1332                           ; 1 bytes @ 0x2E
  1333  00002F                     	ds	3
  1334  000032                     ___ftdiv@cntr:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x31
  1338  000032                     	ds	1
  1339  000033                     ___ftdiv@f3:
  1340                           	opt stack 0
  1341                           
  1342                           ; 3 bytes @ 0x32
  1343  000033                     	ds	3
  1344  000036                     ___ftdiv@exp:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x35
  1348  000036                     	ds	1
  1349  000037                     ___ftdiv@sign:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x36
  1353  000037                     	ds	1
  1354  000038                     ?___fttol:
  1355                           	opt stack 0
  1356  000038                     ___fttol@f1:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x37
  1360  000038                     	ds	4
  1361  00003C                     ??___fttol:
  1362                           
  1363                           ; 1 bytes @ 0x3B
  1364  00003C                     	ds	4
  1365  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1366                           	opt stack 0
  1367                           
  1368                           ; 1 bytes @ 0x3F
  1369  000040                     	ds	1
  1370  000041                     EUSART1_RX_T3_LOCAL@i:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x40
  1374  000041                     	ds	2
  1375  000043                     tblptru	equ	0xFF8
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1h	equ	0xFE2
  1380                           fsr1l	equ	0xFE1
  1381                           
  1382                           ; 1 bytes @ 0x42
  1383 ;;
  1384 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1385 ;;
  1386 ;; *************** function _main *****************
  1387 ;; Defined at:
  1388 ;;		line 594 in file "MOTEUR.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;		None
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;		None
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 3F/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1402 ;;      Params:         0       0       0       0
  1403 ;;      Locals:         0       0       0       0
  1404 ;;      Temps:          0       0       0       0
  1405 ;;      Totals:         0       0       0       0
  1406 ;;Total ram usage:        0 bytes
  1407 ;; Hardware stack levels required when called:   20
  1408 ;; This function calls:
  1409 ;;		_Cycle
  1410 ;;		_EUSART1_Initialize
  1411 ;;		_Init_ADC
  1412 ;;		_Init_IT
  1413 ;;		_Init_PWM
  1414 ;;		_Init_Port
  1415 ;;		_Init_SPI
  1416 ;;		_Init_TIMER0
  1417 ;;		_Init_TIMER2
  1418 ;;		_Init_TIMER5
  1419 ;;		_Init_Variable
  1420 ;; This function is called by:
  1421 ;;		Startup code after reset
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text0
  1426  0020C2                     __ptext0:
  1427                           	opt stack 0
  1428  0020C2                     _main:
  1429                           	opt stack 11
  1430                           
  1431                           ;MOTEUR.c: 596: OSCCON = 0b01110000;
  1432                           
  1433                           ;incstack = 0
  1434  0020C2  0E70               	movlw	112
  1435  0020C4  6ED3               	movwf	4051,c	;volatile
  1436  0020C6                     l275:
  1437  0020C6  A4D3               	btfss	4051,2,c	;volatile
  1438  0020C8  D7FE               	goto	l275
  1439                           
  1440                           ;MOTEUR.c: 607: Init_Variable();
  1441  0020CA  EC97  F00A         	call	_Init_Variable	;wreg free
  1442                           
  1443                           ; BSR set to: 0
  1444                           ;MOTEUR.c: 611: Init_Port();
  1445  0020CE  EC41  F00E         	call	_Init_Port	;wreg free
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;MOTEUR.c: 646: Init_IT();
  1449  0020D2  EC99  F010         	call	_Init_IT	;wreg free
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;MOTEUR.c: 665: EUSART1_Initialize();
  1453  0020D6  EC87  F00F         	call	_EUSART1_Initialize	;wreg free
  1454                           
  1455                           ; BSR set to: 0
  1456                           ;MOTEUR.c: 666: Init_SPI();
  1457  0020DA  ECB4  F011         	call	_Init_SPI	;wreg free
  1458                           
  1459                           ;MOTEUR.c: 670: Init_ADC();
  1460  0020DE  ECF9  F011         	call	_Init_ADC	;wreg free
  1461                           
  1462                           ;MOTEUR.c: 672: Init_TIMER0();
  1463  0020E2  ECE9  F011         	call	_Init_TIMER0	;wreg free
  1464                           
  1465                           ;MOTEUR.c: 673: Init_TIMER2();
  1466  0020E6  EC61  F012         	call	_Init_TIMER2	;wreg free
  1467                           
  1468                           ;MOTEUR.c: 674: Init_TIMER5();
  1469  0020EA  EC2C  F011         	call	_Init_TIMER5	;wreg free
  1470                           
  1471                           ;MOTEUR.c: 677: Init_PWM();
  1472  0020EE  EC45  F012         	call	_Init_PWM	;wreg free
  1473                           
  1474                           ;MOTEUR.c: 739: Cycle();
  1475  0020F2  ECDF  F005         	call	_Cycle	;wreg free
  1476                           
  1477                           ; BSR set to: 0
  1478  0020F6  EF67  F000         	goto	start
  1479  0020FA                     __end_of_main:
  1480                           	opt stack 0
  1481                           tblptru	equ	0xFF8
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1h	equ	0xFE2
  1486                           fsr1l	equ	0xFE1
  1487                           
  1488 ;; *************** function _Init_Variable *****************
  1489 ;; Defined at:
  1490 ;;		line 143 in file "MOTEUR.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;		None
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  i               1   14[COMRAM] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 3F/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1504 ;;      Params:         0       0       0       0
  1505 ;;      Locals:         1       0       0       0
  1506 ;;      Temps:          0       0       0       0
  1507 ;;      Totals:         1       0       0       0
  1508 ;;Total ram usage:        1 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; Hardware stack levels required when called:   11
  1511 ;; This function calls:
  1512 ;;		_Detection_Pion_Init
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           	psect	text1
  1519  00152E                     __ptext1:
  1520                           	opt stack 0
  1521  00152E                     _Init_Variable:
  1522                           	opt stack 19
  1523                           
  1524                           ;MOTEUR.c: 184: Batterie_mV = 0;
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;incstack = 0
  1528  00152E  0E0B               	movlw	11
  1529  001530  0100               	movlb	0	; () banked
  1530  001532  6FAB               	movwf	_Version& (0+255),b
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;MOTEUR.c: 187: unsigned char i;
  1534                           ;MOTEUR.c: 189: for (i = 0; i < 10; i++) {
  1535  001534  6A0F               	clrf	Init_Variable@i,c
  1536  001536                     l8826:
  1537                           
  1538                           ;MOTEUR.c: 190: Etat_Log[i] = 255;
  1539  001536  500F               	movf	Init_Variable@i,w,c
  1540  001538  0F6A               	addlw	low _Etat_Log
  1541  00153A  6ED9               	movwf	fsr2l,c
  1542  00153C  6ADA               	clrf	fsr2h,c
  1543  00153E  68DF               	setf	indf2,c
  1544  001540  2A0F               	incf	Init_Variable@i,f,c
  1545  001542  0E09               	movlw	9
  1546  001544  640F               	cpfsgt	Init_Variable@i,c
  1547  001546  D7F7               	goto	l8826
  1548                           
  1549                           ;MOTEUR.c: 193: }
  1550                           ;MOTEUR.c: 195: Etat_Precedent_Index = 0;
  1551  001548  6A4C               	clrf	_Etat_Precedent_Index,c
  1552                           
  1553                           ;MOTEUR.c: 196: Etat = 255;
  1554  00154A  0100               	movlb	0	; () banked
  1555  00154C  69AA               	setf	_Etat& (0+255),b	;volatile
  1556                           
  1557                           ;MOTEUR.c: 199: Alarme = 0;
  1558  00154E  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  1559                           
  1560                           ;MOTEUR.c: 201: nb_s_fonctionnement_souhaiter = 0;
  1561  001550  6BA8               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1562                           
  1563                           ;MOTEUR.c: 202: nb_s_fonctionnement = 0;
  1564  001552  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;MOTEUR.c: 205: nb_s_patinage = 90;
  1568  001554  0E5A               	movlw	90
  1569  001556  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1570                           
  1571                           ;MOTEUR.c: 206: nb_s_patinage = 45;
  1572  001558  0E2D               	movlw	45
  1573  00155A  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1574                           
  1575                           ;MOTEUR.c: 207: nb_s_patinage = 50;
  1576  00155C  0E32               	movlw	50
  1577  00155E  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;MOTEUR.c: 210: nb_100ms_Timer_5 = 0;
  1581  001560  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1582                           
  1583                           ;MOTEUR.c: 212: nb_100ms_pion = 2;
  1584  001562  0E02               	movlw	2
  1585  001564  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  1586                           
  1587                           ;MOTEUR.c: 213: nb_100ms_platine = 30;
  1588  001566  0E1E               	movlw	30
  1589  001568  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  1590                           
  1591                           ;MOTEUR.c: 215: nb_s_pelle = 30;
  1592  00156A  6FA3               	movwf	_nb_s_pelle& (0+255),b
  1593                           
  1594                           ;MOTEUR.c: 216: nb_s_bequille = 10;
  1595  00156C  0E0A               	movlw	10
  1596  00156E  6FA2               	movwf	_nb_s_bequille& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;MOTEUR.c: 218: Detecteur_Pion = 0;
  1600  001570  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;MOTEUR.c: 219: nb_Pion = 0;
  1604  001572  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;MOTEUR.c: 220: nb_Pion_Objectif = 0;
  1608  001574  6BA0               	clrf	_nb_Pion_Objectif& (0+255),b
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;MOTEUR.c: 221: Mouvement_Startup = 0;
  1612  001576  6A4D               	clrf	_Mouvement_Startup,c
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;MOTEUR.c: 223: delay_s_counter = 0;
  1616  001578  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  1617                           
  1618                           ;MOTEUR.c: 225: moteur_indice = 1;
  1619  00157A  0E01               	movlw	1
  1620  00157C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;MOTEUR.c: 226: consigne = 0;
  1624  00157E  6B98               	clrf	_consigne& (0+255),b	;volatile
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;MOTEUR.c: 227: direction = 0;
  1628  001580  6B8F               	clrf	_direction& (0+255),b	;volatile
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;MOTEUR.c: 228: mouvement_option = 0;
  1632  001582  6B90               	clrf	_mouvement_option& (0+255),b
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;MOTEUR.c: 229: Option_Multitas = 0;
  1636  001584  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;MOTEUR.c: 230: type_consigne = 0;
  1640  001586  6B91               	clrf	_type_consigne& (0+255),b
  1641                           
  1642                           ;MOTEUR.c: 231: Consigne_Max = 20 * 5;
  1643  001588  0E64               	movlw	100
  1644  00158A  6F97               	movwf	_Consigne_Max& (0+255),b	;volatile
  1645                           
  1646                           ;MOTEUR.c: 232: Consigne_Max_Moteur_X = 20 * 5;
  1647  00158C  6F96               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1648                           
  1649                           ;MOTEUR.c: 233: Consigne_Max_Moteur_Z = 20 * 5;
  1650  00158E  6F95               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1651                           
  1652                           ;MOTEUR.c: 236: Moteur_I_Max = 100;
  1653  001590  6F94               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1654                           
  1655                           ;MOTEUR.c: 237: Pelle_I_Max = 45;
  1656  001592  0E2D               	movlw	45
  1657  001594  6F93               	movwf	_Pelle_I_Max& (0+255),b
  1658                           
  1659                           ;MOTEUR.c: 238: Bequille_I_Max = 22;
  1660  001596  0E16               	movlw	22
  1661  001598  6F92               	movwf	_Bequille_I_Max& (0+255),b
  1662                           
  1663                           ;MOTEUR.c: 241: Consigne_en_A = 4;
  1664  00159A  0E04               	movlw	4
  1665  00159C  6E49               	movwf	_Consigne_en_A,c
  1666                           
  1667                           ; BSR set to: 0
  1668                           ;MOTEUR.c: 242: consigne = (char) (Consigne_en_A * 5);
  1669  00159E  5049               	movf	_Consigne_en_A,w,c
  1670  0015A0  0D05               	mullw	5
  1671  0015A2  CFF3 F098          	movff	prodl,_consigne	;volatile
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;MOTEUR.c: 245: Patinage_Nb_Essai_Autoriser = 3;
  1675  0015A6  0E03               	movlw	3
  1676  0015A8  6F9C               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;MOTEUR.c: 246: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1680  0015AA  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;MOTEUR.c: 247: Capteur_Capot_Compteur_Temps_S = 0;
  1684  0015AC  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;MOTEUR.c: 248: Patinage_Nb_Essai = 0;
  1688  0015AE  6B9D               	clrf	_Patinage_Nb_Essai& (0+255),b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;MOTEUR.c: 249: Capteur_Capot_Nb_Evenement = 0;
  1692  0015B0  6B9F               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;MOTEUR.c: 255: consigne_moteur_3 = 50;
  1696  0015B2  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;MOTEUR.c: 257: Surveillance_Consommation_Moteur_1 = 0;
  1700  0015B4  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;MOTEUR.c: 258: Surveillance_Consommation_Moteur_2 = 0;
  1704  0015B6  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;MOTEUR.c: 260: Detection_Pion_Init();
  1708  0015B8  ECBC  F012         	call	_Detection_Pion_Init	;wreg free
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;MOTEUR.c: 268: Compteur_IRQ_I_Moteur_1 = 0;
  1712  0015BC  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;MOTEUR.c: 269: Compteur_IRQ_I_Moteur_2 = 0;
  1716  0015BE  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;MOTEUR.c: 286: DVT_Compteur = 0;
  1720  0015C0  6BAC               	clrf	_P4_busy& (0+255),b
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;MOTEUR.c: 288: DVT_Tableau_Pause[0] = 9;
  1724  0015C2  0E09               	movlw	9
  1725  0015C4  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;MOTEUR.c: 289: DVT_Tableau_Pause[1] = 7;
  1729  0015C6  0E07               	movlw	7
  1730  0015C8  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;MOTEUR.c: 290: DVT_Tableau_Pause[2] = 6;
  1734  0015CA  0E06               	movlw	6
  1735  0015CC  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;MOTEUR.c: 291: DVT_Tableau_Pause[3] = 5;
  1739  0015CE  0E05               	movlw	5
  1740  0015D0  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;MOTEUR.c: 292: DVT_Tableau_Pause[4] = 4;
  1744  0015D2  0E04               	movlw	4
  1745  0015D4  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;MOTEUR.c: 302: Multitas_Courant_Max = 20 * 5 ;
  1749  0015D6  0E03               	movlw	3
  1750  0015D8  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;MOTEUR.c: 305: UART_TEST = 0;
  1754  0015DA  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;MOTEUR.c: 306: RX1_ABR = 0;
  1758  0015DC  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1759                           
  1760                           ; BSR set to: 0
  1761                           ;MOTEUR.c: 307: RX1_full = 0;
  1762  0015DE  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;MOTEUR.c: 308: SPI_full = 0;
  1766  0015E0  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;MOTEUR.c: 310: spiRxIndex = 0;
  1770  0015E2  6A43               	clrf	_spiRxIndex,c	;volatile
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;MOTEUR.c: 311: spiTxIndex = 0;
  1774  0015E4  6A44               	clrf	_spiTxIndex,c	;volatile
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;MOTEUR.c: 312: SPI_MODE = 0;
  1778  0015E6  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1779                           
  1780                           ; BSR set to: 0
  1781  0015E8  0012               	return		;funcret
  1782  0015EA                     __end_of_Init_Variable:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           prodl	equ	0xFF3
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           postdec1	equ	0xFE5
  1789                           fsr1h	equ	0xFE2
  1790                           fsr1l	equ	0xFE1
  1791                           indf2	equ	0xFDF
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           
  1795 ;; *************** function _Init_TIMER5 *****************
  1796 ;; Defined at:
  1797 ;;		line 183 in file "timer.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, status,2
  1806 ;; Tracked objects:
  1807 ;;		On entry : 0/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1811 ;;      Params:         0       0       0       0
  1812 ;;      Locals:         0       0       0       0
  1813 ;;      Temps:          0       0       0       0
  1814 ;;      Totals:         0       0       0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels used:    1
  1817 ;; Hardware stack levels required when called:   10
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		_main
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           	psect	text2
  1826  002258                     __ptext2:
  1827                           	opt stack 0
  1828  002258                     _Init_TIMER5:
  1829                           	opt stack 20
  1830                           
  1831                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;incstack = 0
  1835  002258  9EB7               	bcf	4023,7,c	;volatile
  1836                           
  1837                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1838  00225A  8CB7               	bsf	4023,6,c	;volatile
  1839                           
  1840                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1841  00225C  9AB7               	bcf	4023,5,c	;volatile
  1842                           
  1843                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1844  00225E  0E18               	movlw	24
  1845  002260  12B7               	iorwf	4023,f,c	;volatile
  1846                           
  1847                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1848  002262  84B7               	bsf	4023,2,c	;volatile
  1849                           
  1850                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1851  002264  92B7               	bcf	4023,1,c	;volatile
  1852                           
  1853                           ;timer.c: 218: TMR5L = 0;
  1854  002266  6A87               	clrf	3975,c	;volatile
  1855                           
  1856                           ;timer.c: 219: TMR5H = 0;
  1857  002268  6A88               	clrf	3976,c	;volatile
  1858                           
  1859                           ;timer.c: 221: PR5H = 0x61;
  1860  00226A  0E61               	movlw	97
  1861  00226C  6E91               	movwf	3985,c	;volatile
  1862                           
  1863                           ;timer.c: 222: PR5L = 0xA8;
  1864  00226E  0EA8               	movlw	168
  1865  002270  6E90               	movwf	3984,c	;volatile
  1866                           
  1867                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1868  002272  90B7               	bcf	4023,0,c	;volatile
  1869                           
  1870                           ;timer.c: 228: TMR5L = 0;
  1871  002274  6A87               	clrf	3975,c	;volatile
  1872                           
  1873                           ;timer.c: 229: TMR5H = 0;
  1874  002276  6A88               	clrf	3976,c	;volatile
  1875                           
  1876                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1877  002278  90A5               	bcf	4005,0,c	;volatile
  1878                           
  1879                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1880  00227A  80A3               	bsf	4003,0,c	;volatile
  1881                           
  1882                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1883  00227C  90A4               	bcf	4004,0,c	;volatile
  1884  00227E  0012               	return		;funcret
  1885  002280                     __end_of_Init_TIMER5:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           prodl	equ	0xFF3
  1889                           postinc0	equ	0xFEE
  1890                           wreg	equ	0xFE8
  1891                           postdec1	equ	0xFE5
  1892                           fsr1h	equ	0xFE2
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           fsr2h	equ	0xFDA
  1896                           fsr2l	equ	0xFD9
  1897                           
  1898 ;; *************** function _Init_TIMER2 *****************
  1899 ;; Defined at:
  1900 ;;		line 133 in file "timer.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;		None
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, status,2
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1914 ;;      Params:         0       0       0       0
  1915 ;;      Locals:         0       0       0       0
  1916 ;;      Temps:          0       0       0       0
  1917 ;;      Totals:         0       0       0       0
  1918 ;;Total ram usage:        0 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:   10
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_main
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           	psect	text3
  1929  0024C2                     __ptext3:
  1930                           	opt stack 0
  1931  0024C2                     _Init_TIMER2:
  1932                           	opt stack 20
  1933                           
  1934                           ;timer.c: 138: T2CON = 0b00100100;
  1935                           
  1936                           ;incstack = 0
  1937  0024C2  0E24               	movlw	36
  1938  0024C4  6ECA               	movwf	4042,c	;volatile
  1939                           
  1940                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1941  0024C6  50CA               	movf	4042,w,c	;volatile
  1942  0024C8  0B87               	andlw	-121
  1943  0024CA  0940               	iorlw	64
  1944  0024CC  6ECA               	movwf	4042,c	;volatile
  1945                           
  1946                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1947  0024CE  0EFC               	movlw	-4
  1948  0024D0  16CA               	andwf	4042,f,c	;volatile
  1949                           
  1950                           ;timer.c: 149: PR2 = 200;
  1951  0024D2  0EC8               	movlw	200
  1952  0024D4  6ECB               	movwf	4043,c	;volatile
  1953                           
  1954                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1955  0024D6  929F               	bcf	3999,1,c	;volatile
  1956                           
  1957                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1958  0024D8  829F               	bsf	3999,1,c	;volatile
  1959  0024DA  0CC8               	retlw	200	;funcret
  1960  0024DC                     __end_of_Init_TIMER2:
  1961                           	opt stack 0
  1962                           tblptru	equ	0xFF8
  1963                           prodl	equ	0xFF3
  1964                           postinc0	equ	0xFEE
  1965                           wreg	equ	0xFE8
  1966                           postdec1	equ	0xFE5
  1967                           fsr1h	equ	0xFE2
  1968                           fsr1l	equ	0xFE1
  1969                           indf2	equ	0xFDF
  1970                           fsr2h	equ	0xFDA
  1971                           fsr2l	equ	0xFD9
  1972                           
  1973 ;; *************** function _Init_TIMER0 *****************
  1974 ;; Defined at:
  1975 ;;		line 21 in file "timer.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1989 ;;      Params:         0       0       0       0
  1990 ;;      Locals:         0       0       0       0
  1991 ;;      Temps:          0       0       0       0
  1992 ;;      Totals:         0       0       0       0
  1993 ;;Total ram usage:        0 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:   10
  1996 ;; This function calls:
  1997 ;;		Nothing
  1998 ;; This function is called by:
  1999 ;;		_main
  2000 ;; This function uses a non-reentrant model
  2001 ;;
  2002                           
  2003                           	psect	text4
  2004  0023D2                     __ptext4:
  2005                           	opt stack 0
  2006  0023D2                     _Init_TIMER0:
  2007                           	opt stack 20
  2008                           
  2009                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  2010                           
  2011                           ;incstack = 0
  2012  0023D2  9ED5               	bcf	4053,7,c	;volatile
  2013                           
  2014                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  2015  0023D4  9CD5               	bcf	4053,6,c	;volatile
  2016                           
  2017                           ;timer.c: 33: T0CONbits.T0CS = 0;
  2018  0023D6  9AD5               	bcf	4053,5,c	;volatile
  2019                           
  2020                           ;timer.c: 37: T0CONbits.T0SE = 0;
  2021  0023D8  98D5               	bcf	4053,4,c	;volatile
  2022                           
  2023                           ;timer.c: 41: T0CONbits.PSA = 0;
  2024  0023DA  96D5               	bcf	4053,3,c	;volatile
  2025                           
  2026                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  2027  0023DC  0E07               	movlw	7
  2028  0023DE  12D5               	iorwf	4053,f,c	;volatile
  2029                           
  2030                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  2031  0023E0  12D5               	iorwf	4053,f,c	;volatile
  2032                           
  2033                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  2034  0023E2  50D5               	movf	4053,w,c	;volatile
  2035  0023E4  0BF8               	andlw	-8
  2036  0023E6  0904               	iorlw	4
  2037  0023E8  6ED5               	movwf	4053,c	;volatile
  2038                           
  2039                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  2040  0023EA  94F1               	bcf	intcon2,2,c	;volatile
  2041                           
  2042                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  2043  0023EC  9AF2               	bcf	intcon,5,c	;volatile
  2044                           
  2045                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  2046  0023EE  94F2               	bcf	intcon,2,c	;volatile
  2047  0023F0  0012               	return		;funcret
  2048  0023F2                     __end_of_Init_TIMER0:
  2049                           	opt stack 0
  2050                           tblptru	equ	0xFF8
  2051                           prodl	equ	0xFF3
  2052                           intcon	equ	0xFF2
  2053                           intcon2	equ	0xFF1
  2054                           postinc0	equ	0xFEE
  2055                           wreg	equ	0xFE8
  2056                           postdec1	equ	0xFE5
  2057                           fsr1h	equ	0xFE2
  2058                           fsr1l	equ	0xFE1
  2059                           indf2	equ	0xFDF
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           
  2063 ;; *************** function _Init_SPI *****************
  2064 ;; Defined at:
  2065 ;;		line 24 in file "spi.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2
  2074 ;; Tracked objects:
  2075 ;;		On entry : 3F/0
  2076 ;;		On exit  : 3F/0
  2077 ;;		Unchanged: 3F/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2079 ;;      Params:         0       0       0       0
  2080 ;;      Locals:         0       0       0       0
  2081 ;;      Temps:          0       0       0       0
  2082 ;;      Totals:         0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:   10
  2086 ;; This function calls:
  2087 ;;		Nothing
  2088 ;; This function is called by:
  2089 ;;		_main
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092                           
  2093                           	psect	text5
  2094  002368                     __ptext5:
  2095                           	opt stack 0
  2096  002368                     _Init_SPI:
  2097                           	opt stack 20
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  2101                           
  2102                           ;incstack = 0
  2103  002368  8695               	bsf	3989,3,c	;volatile
  2104                           
  2105                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2106  00236A  8495               	bsf	3989,2,c	;volatile
  2107                           
  2108                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2109  00236C  9295               	bcf	3989,1,c	;volatile
  2110                           
  2111                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2112  00236E  9EC7               	bcf	4039,7,c	;volatile
  2113                           
  2114                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2115  002370  9CC7               	bcf	4039,6,c	;volatile
  2116                           
  2117                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2118  002372  8CC7               	bsf	4039,6,c	;volatile
  2119                           
  2120                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2121  002374  9EC6               	bcf	4038,7,c	;volatile
  2122                           
  2123                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2124  002376  9CC6               	bcf	4038,6,c	;volatile
  2125                           
  2126                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2127  002378  8AC6               	bsf	4038,5,c	;volatile
  2128                           
  2129                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2130  00237A  88C6               	bsf	4038,4,c	;volatile
  2131                           
  2132                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2133  00237C  98C6               	bcf	4038,4,c	;volatile
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2137  00237E  50C6               	movf	4038,w,c	;volatile
  2138  002380  0BF0               	andlw	-16
  2139  002382  0905               	iorlw	5
  2140  002384  6EC6               	movwf	4038,c	;volatile
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2144  002386  969E               	bcf	3998,3,c	;volatile
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2148  002388  869D               	bsf	3997,3,c	;volatile
  2149                           
  2150                           ; BSR set to: 0
  2151  00238A  0012               	return		;funcret
  2152  00238C                     __end_of_Init_SPI:
  2153                           	opt stack 0
  2154                           tblptru	equ	0xFF8
  2155                           prodl	equ	0xFF3
  2156                           intcon	equ	0xFF2
  2157                           intcon2	equ	0xFF1
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1h	equ	0xFE2
  2162                           fsr1l	equ	0xFE1
  2163                           indf2	equ	0xFDF
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           
  2167 ;; *************** function _Init_Port *****************
  2168 ;; Defined at:
  2169 ;;		line 14 in file "init.c"
  2170 ;; Parameters:    Size  Location     Type
  2171 ;;		None
  2172 ;; Auto vars:     Size  Location     Type
  2173 ;;		None
  2174 ;; Return value:  Size  Location     Type
  2175 ;;                  1    wreg      void 
  2176 ;; Registers used:
  2177 ;;		wreg, status,2
  2178 ;; Tracked objects:
  2179 ;;		On entry : 3F/0
  2180 ;;		On exit  : 3F/0
  2181 ;;		Unchanged: 3F/0
  2182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2183 ;;      Params:         0       0       0       0
  2184 ;;      Locals:         0       0       0       0
  2185 ;;      Temps:          0       0       0       0
  2186 ;;      Totals:         0       0       0       0
  2187 ;;Total ram usage:        0 bytes
  2188 ;; Hardware stack levels used:    1
  2189 ;; Hardware stack levels required when called:   10
  2190 ;; This function calls:
  2191 ;;		Nothing
  2192 ;; This function is called by:
  2193 ;;		_main
  2194 ;; This function uses a non-reentrant model
  2195 ;;
  2196                           
  2197                           	psect	text6
  2198  001C82                     __ptext6:
  2199                           	opt stack 0
  2200  001C82                     _Init_Port:
  2201                           	opt stack 20
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;init.c: 24: TRISA = 0b11111111;
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;incstack = 0
  2208  001C82  6892               	setf	3986,c	;volatile
  2209                           
  2210                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2211  001C84  8092               	bsf	3986,0,c	;volatile
  2212                           
  2213                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2214  001C86  8292               	bsf	3986,1,c	;volatile
  2215                           
  2216                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2217  001C88  8492               	bsf	3986,2,c	;volatile
  2218                           
  2219                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2220  001C8A  8692               	bsf	3986,3,c	;volatile
  2221                           
  2222                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2223  001C8C  8892               	bsf	3986,4,c	;volatile
  2224                           
  2225                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2226  001C8E  8A92               	bsf	3986,5,c	;volatile
  2227                           
  2228                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2229  001C90  9C92               	bcf	3986,6,c	;volatile
  2230                           
  2231                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2232  001C92  8E92               	bsf	3986,7,c	;volatile
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;init.c: 33: TRISB = 0b11111010;
  2236  001C94  0EFA               	movlw	250
  2237  001C96  6E93               	movwf	3987,c	;volatile
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2241  001C98  9093               	bcf	3987,0,c	;volatile
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2245  001C9A  8293               	bsf	3987,1,c	;volatile
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2249  001C9C  9493               	bcf	3987,2,c	;volatile
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2253  001C9E  8693               	bsf	3987,3,c	;volatile
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2257  001CA0  8893               	bsf	3987,4,c	;volatile
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2261  001CA2  8A93               	bsf	3987,5,c	;volatile
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2265  001CA4  8C93               	bsf	3987,6,c	;volatile
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2269  001CA6  8E93               	bsf	3987,7,c	;volatile
  2270                           
  2271                           ;init.c: 42: TRISC = 0b11011100;
  2272  001CA8  0EDC               	movlw	220
  2273  001CAA  6E94               	movwf	3988,c	;volatile
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2277  001CAC  9094               	bcf	3988,0,c	;volatile
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2281  001CAE  9294               	bcf	3988,1,c	;volatile
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2285  001CB0  9494               	bcf	3988,2,c	;volatile
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2289  001CB2  8694               	bsf	3988,3,c	;volatile
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2293  001CB4  8894               	bsf	3988,4,c	;volatile
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2297  001CB6  8A94               	bsf	3988,5,c	;volatile
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2301  001CB8  9C94               	bcf	3988,6,c	;volatile
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2305  001CBA  8E94               	bsf	3988,7,c	;volatile
  2306                           
  2307                           ;init.c: 51: TRISD = 0b00001111;
  2308  001CBC  0E0F               	movlw	15
  2309  001CBE  6E95               	movwf	3989,c	;volatile
  2310                           
  2311                           ;init.c: 52: TRISD = 0b00000111;
  2312  001CC0  0E07               	movlw	7
  2313  001CC2  6E95               	movwf	3989,c	;volatile
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2317  001CC4  8095               	bsf	3989,0,c	;volatile
  2318                           
  2319                           ; BSR set to: 0
  2320                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2321  001CC6  8295               	bsf	3989,1,c	;volatile
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2325  001CC8  8495               	bsf	3989,2,c	;volatile
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2329  001CCA  9695               	bcf	3989,3,c	;volatile
  2330                           
  2331                           ; BSR set to: 0
  2332                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2333  001CCC  9895               	bcf	3989,4,c	;volatile
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2337  001CCE  9A95               	bcf	3989,5,c	;volatile
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2341  001CD0  9C95               	bcf	3989,6,c	;volatile
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2345  001CD2  9E95               	bcf	3989,7,c	;volatile
  2346                           
  2347                           ;init.c: 62: TRISE = 0b00000111;
  2348  001CD4  6E96               	movwf	3990,c	;volatile
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2352  001CD6  8096               	bsf	3990,0,c	;volatile
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2356  001CD8  8296               	bsf	3990,1,c	;volatile
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2360  001CDA  9496               	bcf	3990,2,c	;volatile
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;init.c: 78: LATA = 0b00000000;
  2364  001CDC  6A89               	clrf	3977,c	;volatile
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;init.c: 79: LATB = 0b00000000;
  2368  001CDE  6A8A               	clrf	3978,c	;volatile
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;init.c: 80: LATC = 0b00000000;
  2372  001CE0  6A8B               	clrf	3979,c	;volatile
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;init.c: 81: LATD = 0b00000000;
  2376  001CE2  6A8C               	clrf	3980,c	;volatile
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;init.c: 82: LATE = 0b00000000;
  2380  001CE4  6A8D               	clrf	3981,c	;volatile
  2381                           
  2382                           ; BSR set to: 0
  2383  001CE6  0012               	return		;funcret
  2384  001CE8                     __end_of_Init_Port:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           prodl	equ	0xFF3
  2388                           intcon	equ	0xFF2
  2389                           intcon2	equ	0xFF1
  2390                           postinc0	equ	0xFEE
  2391                           wreg	equ	0xFE8
  2392                           postdec1	equ	0xFE5
  2393                           fsr1h	equ	0xFE2
  2394                           fsr1l	equ	0xFE1
  2395                           indf2	equ	0xFDF
  2396                           fsr2h	equ	0xFDA
  2397                           fsr2l	equ	0xFD9
  2398                           
  2399 ;; *************** function _Init_PWM *****************
  2400 ;; Defined at:
  2401 ;;		line 14 in file "pwm.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;		None
  2404 ;; Auto vars:     Size  Location     Type
  2405 ;;		None
  2406 ;; Return value:  Size  Location     Type
  2407 ;;                  1    wreg      void 
  2408 ;; Registers used:
  2409 ;;		wreg, status,2
  2410 ;; Tracked objects:
  2411 ;;		On entry : 0/0
  2412 ;;		On exit  : 0/0
  2413 ;;		Unchanged: 0/0
  2414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2415 ;;      Params:         0       0       0       0
  2416 ;;      Locals:         0       0       0       0
  2417 ;;      Temps:          0       0       0       0
  2418 ;;      Totals:         0       0       0       0
  2419 ;;Total ram usage:        0 bytes
  2420 ;; Hardware stack levels used:    1
  2421 ;; Hardware stack levels required when called:   10
  2422 ;; This function calls:
  2423 ;;		Nothing
  2424 ;; This function is called by:
  2425 ;;		_main
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           	psect	text7
  2430  00248A                     __ptext7:
  2431                           	opt stack 0
  2432  00248A                     _Init_PWM:
  2433                           	opt stack 20
  2434                           
  2435                           ;pwm.c: 15: PTPERL = 99;
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;incstack = 0
  2439  00248A  0E63               	movlw	99
  2440  00248C  6E7B               	movwf	3963,c	;volatile
  2441                           
  2442                           ;pwm.c: 16: PTPERH = 0;
  2443  00248E  6A7A               	clrf	3962,c	;volatile
  2444                           
  2445                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2446  002490  6A7F               	clrf	3967,c	;volatile
  2447                           
  2448                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2449  002492  0E80               	movlw	128
  2450  002494  6E7E               	movwf	3966,c	;volatile
  2451                           
  2452                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2453  002496  0E3F               	movlw	63
  2454  002498  6E6F               	movwf	3951,c	;volatile
  2455                           
  2456                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2457  00249A  6A6E               	clrf	3950,c	;volatile
  2458                           
  2459                           ;pwm.c: 25: DTCON = 0b00000000;
  2460  00249C  6A6D               	clrf	3949,c	;volatile
  2461                           
  2462                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2463  00249E  0E05               	movlw	5
  2464  0024A0  6E6B               	movwf	3947,c	;volatile
  2465                           
  2466                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2467  0024A2  6A6A               	clrf	3946,c	;volatile
  2468  0024A4  0012               	return		;funcret
  2469  0024A6                     __end_of_Init_PWM:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           prodl	equ	0xFF3
  2473                           intcon	equ	0xFF2
  2474                           intcon2	equ	0xFF1
  2475                           postinc0	equ	0xFEE
  2476                           wreg	equ	0xFE8
  2477                           postdec1	equ	0xFE5
  2478                           fsr1h	equ	0xFE2
  2479                           fsr1l	equ	0xFE1
  2480                           indf2	equ	0xFDF
  2481                           fsr2h	equ	0xFDA
  2482                           fsr2l	equ	0xFD9
  2483                           
  2484 ;; *************** function _Init_IT *****************
  2485 ;; Defined at:
  2486 ;;		line 70 in file "interrupt.c"
  2487 ;; Parameters:    Size  Location     Type
  2488 ;;		None
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;		None
  2491 ;; Return value:  Size  Location     Type
  2492 ;;                  1    wreg      void 
  2493 ;; Registers used:
  2494 ;;		wreg, status,2, cstack
  2495 ;; Tracked objects:
  2496 ;;		On entry : 3F/0
  2497 ;;		On exit  : 3F/0
  2498 ;;		Unchanged: 3F/0
  2499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2500 ;;      Params:         0       0       0       0
  2501 ;;      Locals:         0       0       0       0
  2502 ;;      Temps:          0       0       0       0
  2503 ;;      Totals:         0       0       0       0
  2504 ;;Total ram usage:        0 bytes
  2505 ;; Hardware stack levels used:    1
  2506 ;; Hardware stack levels required when called:   11
  2507 ;; This function calls:
  2508 ;;		_Init_Input_Capture_0
  2509 ;; This function is called by:
  2510 ;;		_main
  2511 ;; This function uses a non-reentrant model
  2512 ;;
  2513                           
  2514                           	psect	text8
  2515  002132                     __ptext8:
  2516                           	opt stack 0
  2517  002132                     _Init_IT:
  2518                           	opt stack 19
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2522                           
  2523                           ;incstack = 0
  2524  002132  8EF2               	bsf	intcon,7,c	;volatile
  2525                           
  2526                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2527  002134  8CF2               	bsf	intcon,6,c	;volatile
  2528                           
  2529                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2530  002136  9AF2               	bcf	intcon,5,c	;volatile
  2531                           
  2532                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2533  002138  98F2               	bcf	intcon,4,c	;volatile
  2534                           
  2535                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2536  00213A  96F2               	bcf	intcon,3,c	;volatile
  2537                           
  2538                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2539  00213C  94F2               	bcf	intcon,2,c	;volatile
  2540                           
  2541                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2542  00213E  92F2               	bcf	intcon,1,c	;volatile
  2543                           
  2544                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2545  002140  90F2               	bcf	intcon,0,c	;volatile
  2546                           
  2547                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2548  002142  8EF1               	bsf	intcon2,7,c	;volatile
  2549                           
  2550                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2551  002144  8CF1               	bsf	intcon2,6,c	;volatile
  2552                           
  2553                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2554  002146  9CF1               	bcf	intcon2,6,c	;volatile
  2555                           
  2556                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2557  002148  8AF1               	bsf	intcon2,5,c	;volatile
  2558                           
  2559                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2560  00214A  88F1               	bsf	intcon2,4,c	;volatile
  2561                           
  2562                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2563  00214C  94F1               	bcf	intcon2,2,c	;volatile
  2564                           
  2565                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2566  00214E  90F1               	bcf	intcon2,0,c	;volatile
  2567                           
  2568                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2569  002150  8EF0               	bsf	intcon3,7,c	;volatile
  2570                           
  2571                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2572  002152  8CF0               	bsf	intcon3,6,c	;volatile
  2573                           
  2574                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2575  002154  98F0               	bcf	intcon3,4,c	;volatile
  2576                           
  2577                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2578  002156  96F0               	bcf	intcon3,3,c	;volatile
  2579                           
  2580                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2581  002158  92F0               	bcf	intcon3,1,c	;volatile
  2582                           
  2583                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2584  00215A  90F0               	bcf	intcon3,0,c	;volatile
  2585                           
  2586                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2587  00215C  8ED0               	bsf	4048,7,c	;volatile
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;interrupt.c: 125: Init_Input_Capture_0();
  2591  00215E  ECD8  F011         	call	_Init_Input_Capture_0	;wreg free
  2592                           
  2593                           ; BSR set to: 0
  2594                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2595  002162  969F               	bcf	3999,3,c	;volatile
  2596                           
  2597                           ; BSR set to: 0
  2598  002164  0012               	return		;funcret
  2599  002166                     __end_of_Init_IT:
  2600                           	opt stack 0
  2601                           tblptru	equ	0xFF8
  2602                           prodl	equ	0xFF3
  2603                           intcon	equ	0xFF2
  2604                           intcon2	equ	0xFF1
  2605                           intcon3	equ	0xFF0
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1h	equ	0xFE2
  2610                           fsr1l	equ	0xFE1
  2611                           indf2	equ	0xFDF
  2612                           fsr2h	equ	0xFDA
  2613                           fsr2l	equ	0xFD9
  2614                           
  2615 ;; *************** function _Init_Input_Capture_0 *****************
  2616 ;; Defined at:
  2617 ;;		line 139 in file "interrupt.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2
  2626 ;; Tracked objects:
  2627 ;;		On entry : 3F/0
  2628 ;;		On exit  : 3F/0
  2629 ;;		Unchanged: 3F/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2631 ;;      Params:         0       0       0       0
  2632 ;;      Locals:         0       0       0       0
  2633 ;;      Temps:          0       0       0       0
  2634 ;;      Totals:         0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:   10
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_Init_IT
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text9
  2646  0023B0                     __ptext9:
  2647                           	opt stack 0
  2648  0023B0                     _Init_Input_Capture_0:
  2649                           	opt stack 19
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;incstack = 0
  2656  0023B0  9C63               	bcf	3939,6,c	;volatile
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2660  0023B2  5063               	movf	3939,w,c	;volatile
  2661  0023B4  0BF0               	andlw	-16
  2662  0023B6  0908               	iorlw	8
  2663  0023B8  6E63               	movwf	3939,c	;volatile
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2667  0023BA  92A3               	bcf	4003,1,c	;volatile
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2671  0023BC  92A5               	bcf	4005,1,c	;volatile
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2675  0023BE  92A4               	bcf	4004,1,c	;volatile
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2679  0023C0  9C62               	bcf	3938,6,c	;volatile
  2680                           
  2681                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2682  0023C2  5062               	movf	3938,w,c	;volatile
  2683  0023C4  0BF0               	andlw	-16
  2684  0023C6  0908               	iorlw	8
  2685  0023C8  6E62               	movwf	3938,c	;volatile
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2689  0023CA  94A3               	bcf	4003,2,c	;volatile
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2693  0023CC  94A5               	bcf	4005,2,c	;volatile
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2697  0023CE  94A4               	bcf	4004,2,c	;volatile
  2698                           
  2699                           ; BSR set to: 0
  2700  0023D0  0012               	return		;funcret
  2701  0023D2                     __end_of_Init_Input_Capture_0:
  2702                           	opt stack 0
  2703                           tblptru	equ	0xFF8
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           intcon2	equ	0xFF1
  2707                           intcon3	equ	0xFF0
  2708                           postinc0	equ	0xFEE
  2709                           wreg	equ	0xFE8
  2710                           postdec1	equ	0xFE5
  2711                           fsr1h	equ	0xFE2
  2712                           fsr1l	equ	0xFE1
  2713                           indf2	equ	0xFDF
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           
  2717 ;; *************** function _Init_ADC *****************
  2718 ;; Defined at:
  2719 ;;		line 14 in file "adc.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;		None
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;		None
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2733 ;;      Params:         0       0       0       0
  2734 ;;      Locals:         0       0       0       0
  2735 ;;      Temps:          0       0       0       0
  2736 ;;      Totals:         0       0       0       0
  2737 ;;Total ram usage:        0 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:   10
  2740 ;; This function calls:
  2741 ;;		Nothing
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text10
  2748  0023F2                     __ptext10:
  2749                           	opt stack 0
  2750  0023F2                     _Init_ADC:
  2751                           	opt stack 20
  2752                           
  2753                           ;adc.c: 15: ADCON0 = 0b00000000;
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;incstack = 0
  2757  0023F2  6AC2               	clrf	4034,c	;volatile
  2758                           
  2759                           ;adc.c: 16: ADCON1 = 0b00000000;
  2760  0023F4  6AC1               	clrf	4033,c	;volatile
  2761                           
  2762                           ;adc.c: 17: ADCON2 = 0b10010100;
  2763  0023F6  0E94               	movlw	148
  2764  0023F8  6EC0               	movwf	4032,c	;volatile
  2765                           
  2766                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2767  0023FA  50C0               	movf	4032,w,c	;volatile
  2768  0023FC  0BF8               	andlw	-8
  2769  0023FE  0901               	iorlw	1
  2770  002400  6EC0               	movwf	4032,c	;volatile
  2771                           
  2772                           ;adc.c: 19: ADCON3 = 0b11000000;
  2773  002402  0EC0               	movlw	192
  2774  002404  6E9A               	movwf	3994,c	;volatile
  2775                           
  2776                           ;adc.c: 20: ADCHS = 0b00000000;
  2777  002406  6A99               	clrf	3993,c	;volatile
  2778                           
  2779                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2780  002408  0E03               	movlw	3
  2781  00240A  6EB8               	movwf	4024,c	;volatile
  2782                           
  2783                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2784  00240C  6AB9               	clrf	4025,c	;volatile
  2785                           
  2786                           ;adc.c: 24: ADON = 1;
  2787  00240E  80C2               	bsf	4034,0,c	;volatile
  2788  002410  0012               	return		;funcret
  2789  002412                     __end_of_Init_ADC:
  2790                           	opt stack 0
  2791                           tblptru	equ	0xFF8
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           intcon2	equ	0xFF1
  2795                           intcon3	equ	0xFF0
  2796                           postinc0	equ	0xFEE
  2797                           wreg	equ	0xFE8
  2798                           postdec1	equ	0xFE5
  2799                           fsr1h	equ	0xFE2
  2800                           fsr1l	equ	0xFE1
  2801                           indf2	equ	0xFDF
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           
  2805 ;; *************** function _EUSART1_Initialize *****************
  2806 ;; Defined at:
  2807 ;;		line 299 in file "eusart.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;		None
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;		None
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 3F/0
  2818 ;;		On exit  : 3F/0
  2819 ;;		Unchanged: 3F/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2821 ;;      Params:         0       0       0       0
  2822 ;;      Locals:         0       0       0       0
  2823 ;;      Temps:          0       0       0       0
  2824 ;;      Totals:         0       0       0       0
  2825 ;;Total ram usage:        0 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:   11
  2828 ;; This function calls:
  2829 ;;		_EUSART1_IT_ACTIVATE
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text11
  2836  001F0E                     __ptext11:
  2837                           	opt stack 0
  2838  001F0E                     _EUSART1_Initialize:
  2839                           	opt stack 19
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2843                           
  2844                           ;incstack = 0
  2845  001F0E  9A9D               	bcf	3997,5,c	;volatile
  2846                           
  2847                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2848  001F10  989D               	bcf	3997,4,c	;volatile
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;eusart.c: 307: BAUDCON = 0x48;
  2852  001F12  0E48               	movlw	72
  2853  001F14  6EAA               	movwf	4010,c	;volatile
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2857  001F16  86AA               	bsf	4010,3,c	;volatile
  2858                           
  2859                           ;eusart.c: 313: RCSTA1 = 0x80;
  2860  001F18  0E80               	movlw	128
  2861  001F1A  6EAB               	movwf	4011,c	;volatile
  2862                           
  2863                           ;eusart.c: 316: TXSTA1 = 0x24;
  2864  001F1C  0E24               	movlw	36
  2865  001F1E  6EAC               	movwf	4012,c	;volatile
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2869  001F20  98AC               	bcf	4012,4,c	;volatile
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2873  001F22  84AC               	bsf	4012,2,c	;volatile
  2874                           
  2875                           ;eusart.c: 321: SPBRG = 0x22;
  2876  001F24  0E22               	movlw	34
  2877  001F26  6EAF               	movwf	4015,c	;volatile
  2878                           
  2879                           ;eusart.c: 322: SPBRG = 0x11;
  2880  001F28  0E11               	movlw	17
  2881  001F2A  6EAF               	movwf	4015,c	;volatile
  2882                           
  2883                           ;eusart.c: 323: SPBRG = 0x12;
  2884  001F2C  0E12               	movlw	18
  2885  001F2E  6EAF               	movwf	4015,c	;volatile
  2886                           
  2887                           ;eusart.c: 324: SPBRG = 0x10;
  2888  001F30  0E10               	movlw	16
  2889  001F32  6EAF               	movwf	4015,c	;volatile
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;eusart.c: 328: SPBRGH = 0x00;
  2893  001F34  6AB0               	clrf	4016,c	;volatile
  2894                           
  2895                           ;eusart.c: 330: SPBRG = 0x0B;
  2896  001F36  0E0B               	movlw	11
  2897  001F38  6EAF               	movwf	4015,c	;volatile
  2898                           
  2899                           ;eusart.c: 331: SPBRGH = 0x33;
  2900  001F3A  0E33               	movlw	51
  2901  001F3C  6EB0               	movwf	4016,c	;volatile
  2902                           
  2903                           ;eusart.c: 333: SPBRG = 205;
  2904  001F3E  0ECD               	movlw	205
  2905  001F40  6EAF               	movwf	4015,c	;volatile
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;eusart.c: 334: SPBRGH = 0x00;
  2909  001F42  6AB0               	clrf	4016,c	;volatile
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2913  001F44  96AA               	bcf	4010,3,c	;volatile
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2917  001F46  94AC               	bcf	4012,2,c	;volatile
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2921  001F48  98AC               	bcf	4012,4,c	;volatile
  2922                           
  2923                           ;eusart.c: 343: SPBRG = 12;
  2924  001F4A  0E0C               	movlw	12
  2925  001F4C  6EAF               	movwf	4015,c	;volatile
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;eusart.c: 344: SPBRGH = 0x00;
  2929  001F4E  6AB0               	clrf	4016,c	;volatile
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;eusart.c: 397: eusart1TxIndex = 0;
  2933  001F50  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;eusart.c: 398: eusart1RxIndex = 0;
  2937  001F52  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2941  001F54  989F               	bcf	3999,4,c	;volatile
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2945  001F56  9A9F               	bcf	3999,5,c	;volatile
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;eusart.c: 431: RX1_full = 0;
  2949  001F58  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2953  001F5A  EF55  F013         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2954  001F5E                     __end_of_EUSART1_Initialize:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           prodl	equ	0xFF3
  2958                           intcon	equ	0xFF2
  2959                           intcon2	equ	0xFF1
  2960                           intcon3	equ	0xFF0
  2961                           postinc0	equ	0xFEE
  2962                           wreg	equ	0xFE8
  2963                           postdec1	equ	0xFE5
  2964                           fsr1h	equ	0xFE2
  2965                           fsr1l	equ	0xFE1
  2966                           indf2	equ	0xFDF
  2967                           fsr2h	equ	0xFDA
  2968                           fsr2l	equ	0xFD9
  2969                           
  2970 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2971 ;; Defined at:
  2972 ;;		line 232 in file "eusart.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;		None
  2975 ;; Auto vars:     Size  Location     Type
  2976 ;;		None
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    wreg      void 
  2979 ;; Registers used:
  2980 ;;		None
  2981 ;; Tracked objects:
  2982 ;;		On entry : 3F/0
  2983 ;;		On exit  : 3F/0
  2984 ;;		Unchanged: 3F/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2986 ;;      Params:         0       0       0       0
  2987 ;;      Locals:         0       0       0       0
  2988 ;;      Temps:          0       0       0       0
  2989 ;;      Totals:         0       0       0       0
  2990 ;;Total ram usage:        0 bytes
  2991 ;; Hardware stack levels used:    1
  2992 ;; Hardware stack levels required when called:   10
  2993 ;; This function calls:
  2994 ;;		Nothing
  2995 ;; This function is called by:
  2996 ;;		_EUSART1_Initialize
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text12
  3001  0026AA                     __ptext12:
  3002                           	opt stack 0
  3003  0026AA                     _EUSART1_IT_ACTIVATE:
  3004                           	opt stack 19
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;incstack = 0
  3011  0026AA  88AB               	bsf	4011,4,c	;volatile
  3012                           
  3013                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  3014  0026AC  9A9E               	bcf	3998,5,c	;volatile
  3015                           
  3016                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  3017  0026AE  8A9D               	bsf	3997,5,c	;volatile
  3018                           
  3019                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  3020  0026B0  989E               	bcf	3998,4,c	;volatile
  3021                           
  3022                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  3023  0026B2  889D               	bsf	3997,4,c	;volatile
  3024                           
  3025                           ; BSR set to: 0
  3026  0026B4  0012               	return		;funcret
  3027  0026B6                     __end_of_EUSART1_IT_ACTIVATE:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           prodl	equ	0xFF3
  3031                           intcon	equ	0xFF2
  3032                           intcon2	equ	0xFF1
  3033                           intcon3	equ	0xFF0
  3034                           postinc0	equ	0xFEE
  3035                           wreg	equ	0xFE8
  3036                           postdec1	equ	0xFE5
  3037                           fsr1h	equ	0xFE2
  3038                           fsr1l	equ	0xFE1
  3039                           indf2	equ	0xFDF
  3040                           fsr2h	equ	0xFDA
  3041                           fsr2l	equ	0xFD9
  3042                           
  3043 ;; *************** function _Cycle *****************
  3044 ;; Defined at:
  3045 ;;		line 321 in file "MOTEUR.c"
  3046 ;; Parameters:    Size  Location     Type
  3047 ;;		None
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;  i               1   10[BANK2 ] unsigned char 
  3050 ;;  j               1    0        unsigned char 
  3051 ;; Return value:  Size  Location     Type
  3052 ;;                  1    wreg      void 
  3053 ;; Registers used:
  3054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3055 ;; Tracked objects:
  3056 ;;		On entry : 0/0
  3057 ;;		On exit  : 3F/0
  3058 ;;		Unchanged: 0/0
  3059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3060 ;;      Params:         0       0       0       0
  3061 ;;      Locals:         0       0       0       1
  3062 ;;      Temps:          0       0       0       0
  3063 ;;      Totals:         0       0       0       1
  3064 ;;Total ram usage:        1 bytes
  3065 ;; Hardware stack levels used:    1
  3066 ;; Hardware stack levels required when called:   19
  3067 ;; This function calls:
  3068 ;;		_Buzzer_Etat
  3069 ;;		_EUSART1_Check_Buffer
  3070 ;;		_Etat_Get
  3071 ;;		_Etat_Update
  3072 ;;		_Mouvement_Bequille
  3073 ;;		_Mouvement_X
  3074 ;;		_Mouvement_Z
  3075 ;;		_SPI_Check_Buffer
  3076 ;;		_delay_n_100ms
  3077 ;;		_delay_s
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text13
  3084  000BBE                     __ptext13:
  3085                           	opt stack 0
  3086  000BBE                     _Cycle:
  3087                           	opt stack 11
  3088  000BBE                     
  3089                           ;MOTEUR.c: 355: EUSART1_Check_Buffer();
  3090  000BBE  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  3091                           
  3092                           ;MOTEUR.c: 357: SPI_Check_Buffer();
  3093  000BC2  EC00  F011         	call	_SPI_Check_Buffer	;wreg free
  3094                           
  3095                           ;MOTEUR.c: 359: switch (Etat) {
  3096  000BC6  D10D               	goto	l9044
  3097  000BC8                     l8910:
  3098                           
  3099                           ;MOTEUR.c: 368: delay_s(1);
  3100  000BC8  0E01               	movlw	1
  3101  000BCA  EC8E  F011         	call	_delay_s
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;MOTEUR.c: 372: if (Option_Multitas == 0) {
  3105  000BCE  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3106  000BD0  D01C               	goto	l8930
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;MOTEUR.c: 375: Mouvement_X(0, 1, 0x02 | 0x60);
  3110  000BD2  0E01               	movlw	1
  3111  000BD4  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3112  000BD6  0E62               	movlw	98
  3113  000BD8  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3114  000BDA  0E00               	movlw	0
  3115  000BDC  ECA8  F008         	call	_Mouvement_X
  3116                           
  3117                           ;MOTEUR.c: 379: Patinage_Nb_Essai -= 1;
  3118  000BE0  0100               	movlb	0	; () banked
  3119  000BE2  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;MOTEUR.c: 380: if (Patinage_Nb_Essai > 0) {
  3123  000BE4  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3124  000BE6  E008               	bz	l8926
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;MOTEUR.c: 381: nb_s_fonctionnement = 0;
  3128  000BE8  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;MOTEUR.c: 386: delay_s(3);
  3132  000BEA  0E03               	movlw	3
  3133  000BEC  EC8E  F011         	call	_delay_s
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;MOTEUR.c: 387: Etat_Update(2);
  3137  000BF0  0E02               	movlw	2
  3138  000BF2  EC18  F012         	call	_Etat_Update
  3139                           
  3140                           ;MOTEUR.c: 388: } else {
  3141  000BF6  D7E3               	goto	l8908
  3142  000BF8                     l8926:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;MOTEUR.c: 389: Etat_Update(2);
  3146  000BF8  0E02               	movlw	2
  3147  000BFA  EC18  F012         	call	_Etat_Update
  3148                           
  3149                           ;MOTEUR.c: 391: P4_busy = 0;
  3150  000BFE  0100               	movlb	0	; () banked
  3151  000C00  6BAC               	clrf	_P4_busy& (0+255),b
  3152                           
  3153                           ;MOTEUR.c: 392: Etat_Update(7);
  3154  000C02  0E07               	movlw	7
  3155  000C04  EC18  F012         	call	_Etat_Update
  3156  000C08  D7DA               	goto	l8908
  3157  000C0A                     l8930:
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;MOTEUR.c: 397: Etat_Update(0);
  3161  000C0A  0E00               	movlw	0
  3162  000C0C  EC18  F012         	call	_Etat_Update
  3163                           
  3164                           ;MOTEUR.c: 399: P4_busy = 0;
  3165  000C10  0100               	movlb	0	; () banked
  3166  000C12  6BAC               	clrf	_P4_busy& (0+255),b
  3167  000C14  D7D4               	goto	l8908
  3168  000C16                     l8934:
  3169                           
  3170                           ;MOTEUR.c: 407: delay_s(1);
  3171  000C16  0E01               	movlw	1
  3172  000C18  EC8E  F011         	call	_delay_s
  3173                           
  3174                           ;MOTEUR.c: 410: Mouvement_X(1, 1, 0x02 | 0x60);
  3175  000C1C  0E01               	movlw	1
  3176  000C1E  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3177  000C20  0E62               	movlw	98
  3178  000C22  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3179  000C24  0E01               	movlw	1
  3180  000C26  ECA8  F008         	call	_Mouvement_X
  3181                           
  3182                           ;MOTEUR.c: 411: Patinage_Nb_Essai -= 1;
  3183  000C2A  0100               	movlb	0	; () banked
  3184  000C2C  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;MOTEUR.c: 412: if (Patinage_Nb_Essai > 0) {
  3188  000C2E  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3189  000C30  E008               	bz	l8946
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;MOTEUR.c: 413: nb_s_fonctionnement = 0;
  3193  000C32  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;MOTEUR.c: 414: delay_s(3);
  3197  000C34  0E03               	movlw	3
  3198  000C36  EC8E  F011         	call	_delay_s
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;MOTEUR.c: 415: Etat_Update(3);
  3202  000C3A  0E03               	movlw	3
  3203  000C3C  EC18  F012         	call	_Etat_Update
  3204                           
  3205                           ;MOTEUR.c: 416: } else {
  3206  000C40  D7BE               	goto	l8908
  3207  000C42                     l8946:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;MOTEUR.c: 417: Etat_Update(3);
  3211  000C42  0E03               	movlw	3
  3212  000C44  EC18  F012         	call	_Etat_Update
  3213                           
  3214                           ;MOTEUR.c: 419: P4_busy = 0;
  3215  000C48  0100               	movlb	0	; () banked
  3216  000C4A  6BAC               	clrf	_P4_busy& (0+255),b
  3217                           
  3218                           ;MOTEUR.c: 420: Etat_Update(7);
  3219  000C4C  0E07               	movlw	7
  3220  000C4E  EC18  F012         	call	_Etat_Update
  3221  000C52  D7B5               	goto	l8908
  3222  000C54                     l241:
  3223                           
  3224                           ;MOTEUR.c: 424: P4_busy = 0;
  3225  000C54  0100               	movlb	0	; () banked
  3226  000C56  6BAC               	clrf	_P4_busy& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;MOTEUR.c: 425: Etat_Update(70);
  3230  000C58  0E46               	movlw	70
  3231  000C5A  EC18  F012         	call	_Etat_Update
  3232                           
  3233                           ;MOTEUR.c: 426: break;
  3234  000C5E  D7AF               	goto	l8908
  3235  000C60                     l8954:
  3236                           
  3237                           ; BSR set to: 0
  3238  000C60  0E01               	movlw	1
  3239  000C62  ECE7  F010         	call	_Etat_Get
  3240                           
  3241                           ; Switch size 1, requested type "speed"
  3242                           ; Number of cases is 2, Range of values is 2 to 3
  3243                           ; switch strategies available:
  3244                           ; Name         Instructions Cycles
  3245                           ; simple_byte            7     4 (average)
  3246                           ;	Chosen strategy is simple_byte
  3247  000C66  0A02               	xorlw	2	; case 2
  3248  000C68  E0AF               	bz	l8910
  3249  000C6A  0A01               	xorlw	1	; case 3
  3250  000C6C  E0D4               	bz	l8934
  3251  000C6E  D7F2               	goto	l241
  3252  000C70                     l8956:
  3253                           
  3254                           ;MOTEUR.c: 438: delay_s(1);
  3255  000C70  0E01               	movlw	1
  3256  000C72  EC8E  F011         	call	_delay_s
  3257                           
  3258                           ;MOTEUR.c: 441: Mouvement_X(0, 1, 0x02 | 0x60);
  3259  000C76  0E01               	movlw	1
  3260  000C78  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3261  000C7A  0E62               	movlw	98
  3262  000C7C  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3263  000C7E  0E00               	movlw	0
  3264  000C80  ECA8  F008         	call	_Mouvement_X
  3265                           
  3266                           ;MOTEUR.c: 442: Capteur_Capot_Nb_Evenement -= 1;
  3267  000C84  0100               	movlb	0	; () banked
  3268  000C86  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;MOTEUR.c: 443: if (Capteur_Capot_Nb_Evenement > 0) {
  3272  000C88  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3273  000C8A  E008               	bz	l8968
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;MOTEUR.c: 444: Capteur_Capot_Compteur_Temps_S = 0;
  3277  000C8C  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;MOTEUR.c: 445: delay_s(3);
  3281  000C8E  0E03               	movlw	3
  3282  000C90  EC8E  F011         	call	_delay_s
  3283                           
  3284                           ; BSR set to: 0
  3285                           ;MOTEUR.c: 446: Etat_Update(2);
  3286  000C94  0E02               	movlw	2
  3287  000C96  EC18  F012         	call	_Etat_Update
  3288                           
  3289                           ;MOTEUR.c: 447: } else {
  3290  000C9A  D791               	goto	l8908
  3291  000C9C                     l8968:
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;MOTEUR.c: 448: Etat_Update(2);
  3295  000C9C  0E02               	movlw	2
  3296  000C9E  EC18  F012         	call	_Etat_Update
  3297                           
  3298                           ;MOTEUR.c: 451: P4_busy = 0;
  3299  000CA2  0100               	movlb	0	; () banked
  3300  000CA4  6BAC               	clrf	_P4_busy& (0+255),b
  3301                           
  3302                           ;MOTEUR.c: 452: Etat_Update(7);
  3303  000CA6  0E07               	movlw	7
  3304  000CA8  EC18  F012         	call	_Etat_Update
  3305  000CAC  D788               	goto	l8908
  3306  000CAE                     l8972:
  3307                           
  3308                           ;MOTEUR.c: 457: delay_s(1);
  3309  000CAE  0E01               	movlw	1
  3310  000CB0  EC8E  F011         	call	_delay_s
  3311                           
  3312                           ;MOTEUR.c: 460: Mouvement_X(1, 1, 0x02 | 0x60);
  3313  000CB4  0E01               	movlw	1
  3314  000CB6  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3315  000CB8  0E62               	movlw	98
  3316  000CBA  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3317  000CBC  0E01               	movlw	1
  3318  000CBE  ECA8  F008         	call	_Mouvement_X
  3319                           
  3320                           ;MOTEUR.c: 461: Capteur_Capot_Nb_Evenement -= 1;
  3321  000CC2  0100               	movlb	0	; () banked
  3322  000CC4  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;MOTEUR.c: 462: if (Capteur_Capot_Nb_Evenement > 0) {
  3326  000CC6  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3327  000CC8  E008               	bz	l8984
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;MOTEUR.c: 463: Capteur_Capot_Compteur_Temps_S = 0;
  3331  000CCA  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3332                           
  3333                           ; BSR set to: 0
  3334                           ;MOTEUR.c: 464: delay_s(3);
  3335  000CCC  0E03               	movlw	3
  3336  000CCE  EC8E  F011         	call	_delay_s
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;MOTEUR.c: 465: Etat_Update(3);
  3340  000CD2  0E03               	movlw	3
  3341  000CD4  EC18  F012         	call	_Etat_Update
  3342                           
  3343                           ;MOTEUR.c: 466: } else {
  3344  000CD8  D772               	goto	l8908
  3345  000CDA                     l8984:
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;MOTEUR.c: 467: Etat_Update(3);
  3349  000CDA  0E03               	movlw	3
  3350  000CDC  EC18  F012         	call	_Etat_Update
  3351                           
  3352                           ;MOTEUR.c: 469: P4_busy = 0;
  3353  000CE0  0100               	movlb	0	; () banked
  3354  000CE2  6BAC               	clrf	_P4_busy& (0+255),b
  3355                           
  3356                           ;MOTEUR.c: 472: Etat_Update(77);
  3357  000CE4  0E4D               	movlw	77
  3358  000CE6  EC18  F012         	call	_Etat_Update
  3359  000CEA  D769               	goto	l8908
  3360  000CEC                     l252:
  3361                           
  3362                           ;MOTEUR.c: 477: P4_busy = 0;
  3363  000CEC  0100               	movlb	0	; () banked
  3364  000CEE  6BAC               	clrf	_P4_busy& (0+255),b
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;MOTEUR.c: 478: Etat_Update(70);
  3368  000CF0  0E46               	movlw	70
  3369  000CF2  EC18  F012         	call	_Etat_Update
  3370                           
  3371                           ;MOTEUR.c: 479: break;
  3372  000CF6  D763               	goto	l8908
  3373  000CF8                     l8992:
  3374                           
  3375                           ; BSR set to: 0
  3376  000CF8  0E01               	movlw	1
  3377  000CFA  ECE7  F010         	call	_Etat_Get
  3378                           
  3379                           ; Switch size 1, requested type "speed"
  3380                           ; Number of cases is 2, Range of values is 2 to 3
  3381                           ; switch strategies available:
  3382                           ; Name         Instructions Cycles
  3383                           ; simple_byte            7     4 (average)
  3384                           ;	Chosen strategy is simple_byte
  3385  000CFE  0A02               	xorlw	2	; case 2
  3386  000D00  E0B7               	bz	l8956
  3387  000D02  0A01               	xorlw	1	; case 3
  3388  000D04  E0D4               	bz	l8972
  3389  000D06  D7F2               	goto	l252
  3390  000D08                     l8994:
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;MOTEUR.c: 493: P4_busy = 1;
  3394  000D08  0E01               	movlw	1
  3395  000D0A  6FAC               	movwf	_P4_busy& (0+255),b
  3396                           
  3397                           ; BSR set to: 0
  3398                           ;MOTEUR.c: 494: Etat_Update(77);
  3399  000D0C  0E4D               	movlw	77
  3400  000D0E  EC18  F012         	call	_Etat_Update
  3401                           
  3402                           ;MOTEUR.c: 495: for (i = 0; i < 4; i++) {
  3403  000D12  0102               	movlb	2	; () banked
  3404  000D14  6B8A               	clrf	Cycle@i& (0+255),b
  3405  000D16                     l9004:
  3406                           
  3407                           ; BSR set to: 2
  3408                           ;MOTEUR.c: 496: Buzzer_Etat((unsigned char) 1);
  3409  000D16  0E01               	movlw	1
  3410  000D18  EC47  F013         	call	_Buzzer_Etat
  3411                           
  3412                           ;MOTEUR.c: 497: delay_n_100ms(4);
  3413  000D1C  0E04               	movlw	4
  3414  000D1E  ECB2  F012         	call	_delay_n_100ms
  3415                           
  3416                           ;MOTEUR.c: 498: Buzzer_Etat((unsigned char) 0);
  3417  000D22  0E00               	movlw	0
  3418  000D24  EC47  F013         	call	_Buzzer_Etat
  3419                           
  3420                           ;MOTEUR.c: 499: delay_n_100ms(2);
  3421  000D28  0E02               	movlw	2
  3422  000D2A  ECB2  F012         	call	_delay_n_100ms
  3423  000D2E  0102               	movlb	2	; () banked
  3424  000D30  2B8A               	incf	Cycle@i& (0+255),f,b
  3425                           
  3426                           ; BSR set to: 2
  3427  000D32  0E03               	movlw	3
  3428  000D34  658A               	cpfsgt	Cycle@i& (0+255),b
  3429  000D36  D7EF               	goto	l9004
  3430  000D38  D742               	goto	l8908
  3431  000D3A                     l9010:
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;MOTEUR.c: 504: P4_busy = 1;
  3435  000D3A  0E01               	movlw	1
  3436  000D3C  6FAC               	movwf	_P4_busy& (0+255),b
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;MOTEUR.c: 505: Etat_Update(77);
  3440  000D3E  0E4D               	movlw	77
  3441  000D40  EC18  F012         	call	_Etat_Update
  3442                           
  3443                           ;MOTEUR.c: 509: for (i = 0; i < 4; i++) {
  3444  000D44  0102               	movlb	2	; () banked
  3445  000D46  6B8A               	clrf	Cycle@i& (0+255),b
  3446  000D48                     l9020:
  3447                           
  3448                           ; BSR set to: 2
  3449                           ;MOTEUR.c: 510: Buzzer_Etat((unsigned char) 1);
  3450  000D48  0E01               	movlw	1
  3451  000D4A  EC47  F013         	call	_Buzzer_Etat
  3452                           
  3453                           ;MOTEUR.c: 511: delay_n_100ms(4);
  3454  000D4E  0E04               	movlw	4
  3455  000D50  ECB2  F012         	call	_delay_n_100ms
  3456                           
  3457                           ;MOTEUR.c: 512: Buzzer_Etat((unsigned char) 0);
  3458  000D54  0E00               	movlw	0
  3459  000D56  EC47  F013         	call	_Buzzer_Etat
  3460                           
  3461                           ;MOTEUR.c: 513: delay_n_100ms(2);
  3462  000D5A  0E02               	movlw	2
  3463  000D5C  ECB2  F012         	call	_delay_n_100ms
  3464  000D60  0102               	movlb	2	; () banked
  3465  000D62  2B8A               	incf	Cycle@i& (0+255),f,b
  3466                           
  3467                           ; BSR set to: 2
  3468  000D64  0E03               	movlw	3
  3469  000D66  658A               	cpfsgt	Cycle@i& (0+255),b
  3470  000D68  D7EF               	goto	l9020
  3471  000D6A  D729               	goto	l8908
  3472  000D6C                     l9028:
  3473                           
  3474                           ; BSR set to: 0
  3475  000D6C  51A9               	movf	_Alarme& (0+255),w,b	;volatile
  3476                           
  3477                           ; Switch size 1, requested type "speed"
  3478                           ; Number of cases is 4, Range of values is 1 to 4
  3479                           ; switch strategies available:
  3480                           ; Name         Instructions Cycles
  3481                           ; simple_byte           13     7 (average)
  3482                           ;	Chosen strategy is simple_byte
  3483  000D6E  0A01               	xorlw	1	; case 1
  3484  000D70  E0CB               	bz	l8994
  3485  000D72  0A03               	xorlw	3	; case 2
  3486  000D74  E0E2               	bz	l9010
  3487  000D76  0A01               	xorlw	1	; case 3
  3488  000D78  E101 D772          	bz	l8954
  3489  000D7C  0A07               	xorlw	7	; case 4
  3490  000D7E  E0BC               	bz	l8992
  3491  000D80  D71E               	goto	l8908
  3492  000D82                     l9030:
  3493                           
  3494                           ; BSR set to: 0
  3495                           ;MOTEUR.c: 535: Mouvement_X(direction, type_consigne, mouvement_option);
  3496  000D82  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3497  000D86  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3498  000D8A  518F               	movf	_direction& (0+255),w,b	;volatile
  3499  000D8C  ECA8  F008         	call	_Mouvement_X
  3500                           
  3501                           ;MOTEUR.c: 536: break;
  3502  000D90  D716               	goto	l8908
  3503  000D92                     l9032:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;MOTEUR.c: 541: Mouvement_X(direction, type_consigne, mouvement_option);
  3507  000D92  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3508  000D96  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3509  000D9A  518F               	movf	_direction& (0+255),w,b	;volatile
  3510  000D9C  ECA8  F008         	call	_Mouvement_X
  3511                           
  3512                           ;MOTEUR.c: 543: break;
  3513  000DA0  D70E               	goto	l8908
  3514  000DA2                     l9034:
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;MOTEUR.c: 547: Mouvement_Z(direction, type_consigne, mouvement_option);
  3518  000DA2  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3519  000DA6  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3520  000DAA  518F               	movf	_direction& (0+255),w,b	;volatile
  3521  000DAC  EC68  F00C         	call	_Mouvement_Z
  3522                           
  3523                           ;MOTEUR.c: 548: break;
  3524  000DB0  D706               	goto	l8908
  3525  000DB2                     l9036:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;MOTEUR.c: 553: Mouvement_Z(direction, type_consigne, mouvement_option);
  3529  000DB2  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3530  000DB6  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3531  000DBA  518F               	movf	_direction& (0+255),w,b	;volatile
  3532  000DBC  EC68  F00C         	call	_Mouvement_Z
  3533                           
  3534                           ;MOTEUR.c: 555: break;
  3535  000DC0  D6FE               	goto	l8908
  3536  000DC2                     l9038:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;MOTEUR.c: 560: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3540  000DC2  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3541  000DC6  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3542  000DCA  518F               	movf	_direction& (0+255),w,b	;volatile
  3543  000DCC  ECBD  F00C         	call	_Mouvement_Bequille
  3544                           
  3545                           ;MOTEUR.c: 562: break;
  3546  000DD0  D6F6               	goto	l8908
  3547  000DD2                     l9040:
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;MOTEUR.c: 568: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3551  000DD2  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3552  000DD6  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3553  000DDA  518F               	movf	_direction& (0+255),w,b	;volatile
  3554  000DDC  ECBD  F00C         	call	_Mouvement_Bequille
  3555                           
  3556                           ;MOTEUR.c: 571: break;
  3557  000DE0  D6EE               	goto	l8908
  3558  000DE2                     l9044:
  3559  000DE2  0100               	movlb	0	; () banked
  3560  000DE4  51AA               	movf	_Etat& (0+255),w,b	;volatile
  3561                           
  3562                           ; Switch size 1, requested type "speed"
  3563                           ; Number of cases is 7, Range of values is 1 to 9
  3564                           ; switch strategies available:
  3565                           ; Name         Instructions Cycles
  3566                           ; simple_byte           22    12 (average)
  3567                           ;	Chosen strategy is simple_byte
  3568  000DE6  0A01               	xorlw	1	; case 1
  3569  000DE8  E0C1               	bz	l9028
  3570  000DEA  0A03               	xorlw	3	; case 2
  3571  000DEC  E0CA               	bz	l9030
  3572  000DEE  0A01               	xorlw	1	; case 3
  3573  000DF0  E0D0               	bz	l9032
  3574  000DF2  0A07               	xorlw	7	; case 4
  3575  000DF4  E0DE               	bz	l9036
  3576  000DF6  0A01               	xorlw	1	; case 5
  3577  000DF8  E0D4               	bz	l9034
  3578  000DFA  0A0D               	xorlw	13	; case 8
  3579  000DFC  E0EA               	bz	l9040
  3580  000DFE  0A01               	xorlw	1	; case 9
  3581  000E00  E0E0               	bz	l9038
  3582                           
  3583                           ; BSR set to: 0
  3584  000E02  D6DD               	goto	l8908
  3585  000E04                     __end_of_Cycle:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           prodl	equ	0xFF3
  3589                           intcon	equ	0xFF2
  3590                           intcon2	equ	0xFF1
  3591                           intcon3	equ	0xFF0
  3592                           postinc0	equ	0xFEE
  3593                           wreg	equ	0xFE8
  3594                           postdec1	equ	0xFE5
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           fsr2h	equ	0xFDA
  3599                           fsr2l	equ	0xFD9
  3600                           
  3601 ;; *************** function _delay_n_100ms *****************
  3602 ;; Defined at:
  3603 ;;		line 61 in file "horloge.c"
  3604 ;; Parameters:    Size  Location     Type
  3605 ;;  nb_100ms        1    wreg     unsigned char 
  3606 ;; Auto vars:     Size  Location     Type
  3607 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3608 ;;  i               1   16[COMRAM] unsigned char 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, status,2, status,0, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/2
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3618 ;;      Params:         0       0       0       0
  3619 ;;      Locals:         2       0       0       0
  3620 ;;      Temps:          0       0       0       0
  3621 ;;      Totals:         2       0       0       0
  3622 ;;Total ram usage:        2 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:   11
  3625 ;; This function calls:
  3626 ;;		_delay_100ms
  3627 ;; This function is called by:
  3628 ;;		_Cycle
  3629 ;; This function uses a non-reentrant model
  3630 ;;
  3631                           
  3632                           	psect	text14
  3633  002564                     __ptext14:
  3634                           	opt stack 0
  3635  002564                     _delay_n_100ms:
  3636                           	opt stack 18
  3637                           
  3638                           ; BSR set to: 0
  3639                           ;incstack = 0
  3640                           ;delay_n_100ms@nb_100ms stored from wreg
  3641  002564  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3642                           
  3643                           ;horloge.c: 62: unsigned char i;
  3644                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3645  002566  6A11               	clrf	delay_n_100ms@i,c
  3646  002568  D003               	goto	l8684
  3647  00256A                     l8680:
  3648                           
  3649                           ;horloge.c: 64: delay_100ms();
  3650  00256A  EC0D  F00C         	call	_delay_100ms	;wreg free
  3651  00256E  2A11               	incf	delay_n_100ms@i,f,c
  3652  002570                     l8684:
  3653  002570  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3654  002572  5C11               	subwf	delay_n_100ms@i,w,c
  3655  002574  E3FA               	bnc	l8680
  3656  002576  0012               	return		;funcret
  3657  002578                     __end_of_delay_n_100ms:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           prodl	equ	0xFF3
  3661                           intcon	equ	0xFF2
  3662                           intcon2	equ	0xFF1
  3663                           intcon3	equ	0xFF0
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1h	equ	0xFE2
  3668                           fsr1l	equ	0xFE1
  3669                           indf2	equ	0xFDF
  3670                           fsr2h	equ	0xFDA
  3671                           fsr2l	equ	0xFD9
  3672                           
  3673 ;; *************** function _Mouvement_Z *****************
  3674 ;; Defined at:
  3675 ;;		line 920 in file "action.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;  direction       1    wreg     unsigned char 
  3678 ;;  type_consign    1    7[BANK2 ] unsigned char 
  3679 ;;  option          1    8[BANK2 ] unsigned char 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  direction       1    9[BANK2 ] unsigned char 
  3682 ;;  index           2    0        unsigned int 
  3683 ;;  Option_Temps    1    0        unsigned char 
  3684 ;;  i_max           1    0        unsigned char 
  3685 ;;  i_min           1    0        unsigned char 
  3686 ;;  i               1    0        unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  1    wreg      void 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 3F/0
  3693 ;;		On exit  : 3F/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3696 ;;      Params:         0       0       0       2
  3697 ;;      Locals:         0       0       0       1
  3698 ;;      Temps:          0       0       0       0
  3699 ;;      Totals:         0       0       0       3
  3700 ;;Total ram usage:        3 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:   18
  3703 ;; This function calls:
  3704 ;;		_Check_List_Moteur_2
  3705 ;;		_Coupe_Moteur
  3706 ;;		_Detection_Pion_Off
  3707 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3708 ;;		_Init_Moteur_2
  3709 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3710 ;;		_TIMER2_On
  3711 ;;		_delay_s
  3712 ;;		_u_Init_PWM
  3713 ;; This function is called by:
  3714 ;;		_Cycle
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text15
  3719  0018D0                     __ptext15:
  3720                           	opt stack 0
  3721  0018D0                     _Mouvement_Z:
  3722                           	opt stack 11
  3723                           
  3724                           ;incstack = 0
  3725                           ;Mouvement_Z@direction stored from wreg
  3726  0018D0  0102               	movlb	2	; () banked
  3727  0018D2  6F89               	movwf	Mouvement_Z@direction& (0+255),b
  3728                           
  3729                           ;action.c: 921: unsigned char i, i_min, i_max;
  3730                           ;action.c: 922: unsigned char Option_Temps_S;
  3731                           ;action.c: 930: Surveillance_Consommation_Moteur_2_Desactiver();
  3732  0018D4  EC40  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3733                           
  3734                           ; BSR set to: 0
  3735                           ;action.c: 932: Detection_Pion_Off();
  3736  0018D8  EC71  F013         	call	_Detection_Pion_Off	;wreg free
  3737                           
  3738                           ;action.c: 935: nb_s_pelle = option;
  3739  0018DC  C288  F0A3         	movff	Mouvement_Z@option,_nb_s_pelle
  3740                           
  3741                           ;action.c: 938: consigne = 10;
  3742  0018E0  0E0A               	movlw	10
  3743  0018E2  0100               	movlb	0	; () banked
  3744  0018E4  6F98               	movwf	_consigne& (0+255),b	;volatile
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;action.c: 949: index = 0;
  3748  0018E6  ECD8  F00E         	call	_u_Init_PWM	;wreg free
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;action.c: 950: TMR2 = 0;
  3752  0018EA  6ACC               	clrf	4044,c	;volatile
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;action.c: 951: TMR2IF = 0;
  3756  0018EC  929E               	bcf	3998,1,c	;volatile
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;action.c: 957: LATEbits.LATE2 = 0;
  3760  0018EE  948D               	bcf	3981,2,c	;volatile
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;action.c: 962: moteur_indice = 2;
  3764  0018F0  0E02               	movlw	2
  3765  0018F2  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;action.c: 963: Init_ADC_Single_Shoot_I_Moteur_2();
  3769  0018F4  EC74  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;action.c: 966: if (direction == 1) {
  3773  0018F8  0102               	movlb	2	; () banked
  3774  0018FA  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3775  0018FC  E103               	bnz	l1010
  3776                           
  3777                           ; BSR set to: 2
  3778                           ;action.c: 967: LATD7 = 0;LATD6 = 1;
  3779  0018FE  9E8C               	bcf	3980,7,c	;volatile
  3780  001900  8C8C               	bsf	3980,6,c	;volatile
  3781                           
  3782                           ;action.c: 968: } else {
  3783  001902  D002               	goto	l8708
  3784  001904                     l1010:
  3785                           
  3786                           ; BSR set to: 2
  3787                           ;action.c: 969: LATD6 = 0;LATD7 = 1;
  3788  001904  9C8C               	bcf	3980,6,c	;volatile
  3789  001906  8E8C               	bsf	3980,7,c	;volatile
  3790  001908                     l8708:
  3791                           
  3792                           ; BSR set to: 2
  3793                           ;action.c: 970: }
  3794                           ;action.c: 971: PDC1L = 1 << 2;
  3795  001908  0E04               	movlw	4
  3796  00190A  6E77               	movwf	3959,c	;volatile
  3797                           
  3798                           ; BSR set to: 2
  3799                           ;action.c: 972: PDC1H = 0;
  3800  00190C  6A76               	clrf	3958,c	;volatile
  3801                           
  3802                           ;action.c: 973: OVDCOND = 0b00000100;
  3803  00190E  0E04               	movlw	4
  3804  001910  6E6B               	movwf	3947,c	;volatile
  3805                           
  3806                           ; BSR set to: 2
  3807                           ;action.c: 974: LATCbits.LATC1 = 1;
  3808  001912  828B               	bsf	3979,1,c	;volatile
  3809                           
  3810                           ;action.c: 976: erreur = 1;
  3811  001914  0100               	movlb	0	; () banked
  3812  001916  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3813  001918  0E01               	movlw	1
  3814  00191A  6F84               	movwf	_erreur& (0+255),b	;volatile
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;action.c: 977: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3818  00191C  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3819  00191E  46E8               	rlncf	wreg,f,c
  3820  001920  0BFC               	andlw	252
  3821  001922  6E77               	movwf	3959,c	;volatile
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;action.c: 978: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3825  001924  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3826  001926  46E8               	rlncf	wreg,f,c
  3827  001928  0B03               	andlw	3
  3828  00192A  6E76               	movwf	3958,c	;volatile
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;action.c: 981: erreur_accumulator = 0;
  3832  00192C  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3833  00192E  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;action.c: 984: Nouvelle_Valeur_ADC = 0;
  3837  001930  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3838                           
  3839                           ; BSR set to: 0
  3840                           ;action.c: 988: PIE3bits.PTIE = 0;
  3841  001932  98A3               	bcf	4003,4,c	;volatile
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;action.c: 989: PIE1bits.ADIE = 1;
  3845  001934  8C9D               	bsf	3997,6,c	;volatile
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;action.c: 990: PIE1bits.ADIE = 1;
  3849  001936  8C9D               	bsf	3997,6,c	;volatile
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;action.c: 992: PEIE = 1;
  3853  001938  8CF2               	bsf	intcon,6,c	;volatile
  3854                           
  3855                           ; BSR set to: 0
  3856                           ;action.c: 993: GIE = 1;
  3857  00193A  8EF2               	bsf	intcon,7,c	;volatile
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;action.c: 994: TIMER2_On();
  3861  00193C  EC81  F013         	call	_TIMER2_On	;wreg free
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;action.c: 995: ADIF = 0;
  3865  001940  9C9E               	bcf	3998,6,c	;volatile
  3866                           
  3867                           ;action.c: 1012: Init_Moteur_2();
  3868  001942  EC08  F013         	call	_Init_Moteur_2	;wreg free
  3869  001946                     l8736:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;action.c: 1016: Check_List_Moteur_2();
  3873  001946  EC68  F011         	call	_Check_List_Moteur_2	;wreg free
  3874                           
  3875                           ;action.c: 1017: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat
      +                           == 4)));
  3876  00194A  0102               	movlb	2	; () banked
  3877  00194C  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3878  00194E  E104               	bnz	l8742
  3879                           
  3880                           ; BSR set to: 2
  3881  001950  0E05               	movlw	5
  3882  001952  0100               	movlb	0	; () banked
  3883  001954  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3884  001956  E0F7               	bz	l8736
  3885  001958                     l8742:
  3886  001958  0102               	movlb	2	; () banked
  3887  00195A  5189               	movf	Mouvement_Z@direction& (0+255),w,b
  3888  00195C  E104               	bnz	l1017
  3889                           
  3890                           ; BSR set to: 2
  3891  00195E  0E04               	movlw	4
  3892  001960  0100               	movlb	0	; () banked
  3893  001962  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3894  001964  E0F0               	bz	l8736
  3895  001966                     l1017:
  3896                           
  3897                           ;action.c: 1021: PIE3bits.PTIE = 0;
  3898  001966  98A3               	bcf	4003,4,c	;volatile
  3899                           
  3900                           ;action.c: 1022: PIE1bits.ADIE = 0;
  3901  001968  9C9D               	bcf	3997,6,c	;volatile
  3902                           
  3903                           ;action.c: 1027: LATEbits.LATE2 = 0;
  3904  00196A  948D               	bcf	3981,2,c	;volatile
  3905                           
  3906                           ;action.c: 1034: Surveillance_Consommation_Moteur_2_Desactiver();
  3907  00196C  EC40  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;action.c: 1036: Coupe_Moteur();
  3911  001970  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  3912                           
  3913                           ;action.c: 1037: delay_s(1);
  3914  001974  0E01               	movlw	1
  3915  001976  EF8E  F011         	goto	_delay_s
  3916  00197A                     __end_of_Mouvement_Z:
  3917                           	opt stack 0
  3918                           tblptru	equ	0xFF8
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           intcon2	equ	0xFF1
  3922                           intcon3	equ	0xFF0
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postdec1	equ	0xFE5
  3926                           fsr1h	equ	0xFE2
  3927                           fsr1l	equ	0xFE1
  3928                           indf2	equ	0xFDF
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           
  3932 ;; *************** function _Init_Moteur_2 *****************
  3933 ;; Defined at:
  3934 ;;		line 158 in file "action.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;		None
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;		None
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 3F/0
  3945 ;;		On exit  : 3F/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3948 ;;      Params:         0       0       0       0
  3949 ;;      Locals:         0       0       0       0
  3950 ;;      Temps:          0       0       0       0
  3951 ;;      Totals:         0       0       0       0
  3952 ;;Total ram usage:        0 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:   11
  3955 ;; This function calls:
  3956 ;;		_TIMER0_On
  3957 ;; This function is called by:
  3958 ;;		_Mouvement_Z
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text16
  3963  002610                     __ptext16:
  3964                           	opt stack 0
  3965  002610                     _Init_Moteur_2:
  3966                           	opt stack 17
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;action.c: 163: nb_s_fonctionnement = 0;
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;incstack = 0
  3973  002610  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3974                           
  3975                           ;action.c: 164: nb_Pion = 0;
  3976  002612  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  3977                           
  3978                           ;action.c: 165: nb_100ms_Timer_5 = 0;
  3979  002614  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;action.c: 166: TIMER0_On();
  3983  002616  EC7B  F012         	call	_TIMER0_On	;wreg free
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;action.c: 169: Compteur_IRQ_I_Moteur_2 = 0;
  3987  00261A  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;action.c: 170: LATCbits.LATC2=0;
  3991  00261C  948B               	bcf	3979,2,c	;volatile
  3992                           
  3993                           ; BSR set to: 0
  3994  00261E  0012               	return		;funcret
  3995  002620                     __end_of_Init_Moteur_2:
  3996                           	opt stack 0
  3997                           tblptru	equ	0xFF8
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           intcon2	equ	0xFF1
  4001                           intcon3	equ	0xFF0
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1h	equ	0xFE2
  4006                           fsr1l	equ	0xFE1
  4007                           indf2	equ	0xFDF
  4008                           fsr2h	equ	0xFDA
  4009                           fsr2l	equ	0xFD9
  4010                           
  4011 ;; *************** function _Check_List_Moteur_2 *****************
  4012 ;; Defined at:
  4013 ;;		line 180 in file "action.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;		None
  4016 ;; Auto vars:     Size  Location     Type
  4017 ;;		None
  4018 ;; Return value:  Size  Location     Type
  4019 ;;                  1    wreg      void 
  4020 ;; Registers used:
  4021 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4022 ;; Tracked objects:
  4023 ;;		On entry : 0/0
  4024 ;;		On exit  : 0/0
  4025 ;;		Unchanged: 0/0
  4026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4027 ;;      Params:         0       0       0       0
  4028 ;;      Locals:         0       0       0       0
  4029 ;;      Temps:          0       0       0       0
  4030 ;;      Totals:         0       0       0       0
  4031 ;;Total ram usage:        0 bytes
  4032 ;; Hardware stack levels used:    1
  4033 ;; Hardware stack levels required when called:   17
  4034 ;; This function calls:
  4035 ;;		_EUSART1_Check_Buffer
  4036 ;;		_Etat_Update
  4037 ;;		_SPI_Check_Buffer
  4038 ;; This function is called by:
  4039 ;;		_Mouvement_Z
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text17
  4044  0022D0                     __ptext17:
  4045                           	opt stack 0
  4046  0022D0                     _Check_List_Moteur_2:
  4047                           	opt stack 11
  4048                           
  4049                           ;action.c: 189: EUSART1_Check_Buffer();
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;incstack = 0
  4053  0022D0  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4054                           
  4055                           ;action.c: 190: SPI_Check_Buffer();
  4056  0022D4  EC00  F011         	call	_SPI_Check_Buffer	;wreg free
  4057                           
  4058                           ;action.c: 201: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  4059  0022D8  0100               	movlb	0	; () banked
  4060  0022DA  51A3               	movf	_nb_s_pelle& (0+255),w,b
  4061  0022DC  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4062  0022DE  E207               	bc	l968
  4063                           
  4064                           ; BSR set to: 0
  4065  0022E0  0E02               	movlw	2
  4066  0022E2  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  4067  0022E4  0C02               	retlw	2
  4068                           
  4069                           ; BSR set to: 0
  4070  0022E6  5193               	movf	_Pelle_I_Max& (0+255),w,b
  4071  0022E8  5D9A               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  4072  0022EA  A0D8               	btfss	status,0,c
  4073  0022EC  0012               	return	
  4074  0022EE                     l968:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;action.c: 205: P4_busy = 0;
  4078  0022EE  6BAC               	clrf	_P4_busy& (0+255),b
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;action.c: 206: Etat_Update(0);
  4082  0022F0  0E00               	movlw	0
  4083  0022F2  EF18  F012         	goto	_Etat_Update
  4084  0022F6                     __end_of_Check_List_Moteur_2:
  4085                           	opt stack 0
  4086                           tblptru	equ	0xFF8
  4087                           prodl	equ	0xFF3
  4088                           intcon	equ	0xFF2
  4089                           intcon2	equ	0xFF1
  4090                           intcon3	equ	0xFF0
  4091                           postinc0	equ	0xFEE
  4092                           wreg	equ	0xFE8
  4093                           postdec1	equ	0xFE5
  4094                           fsr1h	equ	0xFE2
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           fsr2h	equ	0xFDA
  4098                           fsr2l	equ	0xFD9
  4099                           status	equ	0xFD8
  4100                           
  4101 ;; *************** function _Mouvement_X *****************
  4102 ;; Defined at:
  4103 ;;		line 1055 in file "action.c"
  4104 ;; Parameters:    Size  Location     Type
  4105 ;;  direction       1    wreg     unsigned char 
  4106 ;;  type_consign    1   17[BANK0 ] unsigned char 
  4107 ;;  option          1   18[BANK0 ] unsigned char 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  direction       1    7[BANK2 ] unsigned char 
  4110 ;;  index           2    0        unsigned int 
  4111 ;;  Option_Temps    1    0        unsigned char 
  4112 ;;  i_max           1    0        unsigned char 
  4113 ;;  i_min           1    0        unsigned char 
  4114 ;;  i               1    0        unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 3F/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4124 ;;      Params:         0       2       0       0
  4125 ;;      Locals:         0       0       0       1
  4126 ;;      Temps:          0       0       0       0
  4127 ;;      Totals:         0       2       0       1
  4128 ;;Total ram usage:        3 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:   18
  4131 ;; This function calls:
  4132 ;;		_Capteur_Capot_Off
  4133 ;;		_Capteur_Capot_On
  4134 ;;		_Check_List_Moteur_1
  4135 ;;		_Coupe_Moteur
  4136 ;;		_Detection_Pion_Init
  4137 ;;		_Detection_Pion_Off
  4138 ;;		_Detection_Pion_On
  4139 ;;		_EUSART1_Check_Buffer
  4140 ;;		_Etat_Update
  4141 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4142 ;;		_Init_Moteur_1
  4143 ;;		_SPI_Check_Buffer
  4144 ;;		_Stop_Moteur_1
  4145 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4146 ;;		_TIMER2_On
  4147 ;;		_u_Init_PWM
  4148 ;; This function is called by:
  4149 ;;		_Cycle
  4150 ;; This function uses a non-reentrant model
  4151 ;;
  4152                           
  4153                           	psect	text18
  4154  001150                     __ptext18:
  4155                           	opt stack 0
  4156  001150                     _Mouvement_X:
  4157                           	opt stack 11
  4158                           
  4159                           ;incstack = 0
  4160                           ;Mouvement_X@direction stored from wreg
  4161  001150  0102               	movlb	2	; () banked
  4162  001152  6F87               	movwf	Mouvement_X@direction& (0+255),b
  4163                           
  4164                           ;action.c: 1057: unsigned char i, i_min, i_max;
  4165                           ;action.c: 1058: unsigned char Option_Temps_S;
  4166                           ;action.c: 1068: consigne = 10;
  4167  001154  0E0A               	movlw	10
  4168  001156  0100               	movlb	0	; () banked
  4169  001158  6F98               	movwf	_consigne& (0+255),b	;volatile
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;action.c: 1075: Surveillance_Consommation_Moteur_1_Desactiver();
  4173  00115A  EC5B  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;action.c: 1086: index = 0;
  4177  00115E  ECD8  F00E         	call	_u_Init_PWM	;wreg free
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;action.c: 1087: TMR2 = 0;
  4181  001162  6ACC               	clrf	4044,c	;volatile
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;action.c: 1088: TMR2IF = 0;
  4185  001164  929E               	bcf	3998,1,c	;volatile
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;action.c: 1093: if ((!(option & 0x02))
  4189                           ;action.c: 1096: ) {
  4190  001166  A3FF               	btfss	Mouvement_X@option& (0+255),1,b
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;action.c: 1098: Capteur_Capot_On();
  4194  001168  EC18  F013         	call	_Capteur_Capot_On	;wreg free
  4195                           
  4196                           ;action.c: 1100: }
  4197                           ;action.c: 1108: moteur_indice = 1;
  4198  00116C  0E01               	movlw	1
  4199  00116E  0100               	movlb	0	; () banked
  4200  001170  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;action.c: 1109: Init_ADC_Single_Shoot_I_Moteur_1();
  4204  001172  ECA7  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;action.c: 1112: if (direction == 1) {
  4208  001176  0102               	movlb	2	; () banked
  4209  001178  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4210  00117A  E103               	bnz	l1022
  4211                           
  4212                           ; BSR set to: 2
  4213                           ;action.c: 1113: LATD5 = 0;LATD4 = 1;
  4214  00117C  9A8C               	bcf	3980,5,c	;volatile
  4215  00117E  888C               	bsf	3980,4,c	;volatile
  4216                           
  4217                           ;action.c: 1114: } else {
  4218  001180  D002               	goto	l8596
  4219  001182                     l1022:
  4220                           
  4221                           ; BSR set to: 2
  4222                           ;action.c: 1115: LATD4 = 0;LATD5 = 1;
  4223  001182  988C               	bcf	3980,4,c	;volatile
  4224  001184  8A8C               	bsf	3980,5,c	;volatile
  4225  001186                     l8596:
  4226                           
  4227                           ; BSR set to: 2
  4228                           ;action.c: 1116: }
  4229                           ;action.c: 1117: PDC0L = 1 << 2;
  4230  001186  0E04               	movlw	4
  4231  001188  6E79               	movwf	3961,c	;volatile
  4232                           
  4233                           ; BSR set to: 2
  4234                           ;action.c: 1118: PDC0H = 0;
  4235  00118A  6A78               	clrf	3960,c	;volatile
  4236                           
  4237                           ;action.c: 1119: OVDCOND = 0b00000001;
  4238  00118C  0E01               	movlw	1
  4239  00118E  6E6B               	movwf	3947,c	;volatile
  4240                           
  4241                           ; BSR set to: 2
  4242                           ;action.c: 1120: LATCbits.LATC0 = 1;
  4243  001190  808B               	bsf	3979,0,c	;volatile
  4244                           
  4245                           ;action.c: 1123: erreur = 1;
  4246  001192  0100               	movlb	0	; () banked
  4247  001194  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4248  001196  6F84               	movwf	_erreur& (0+255),b	;volatile
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;action.c: 1124: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4252  001198  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4253  00119A  46E8               	rlncf	wreg,f,c
  4254  00119C  0BFC               	andlw	252
  4255  00119E  6E79               	movwf	3961,c	;volatile
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;action.c: 1125: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4259  0011A0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4260  0011A2  46E8               	rlncf	wreg,f,c
  4261  0011A4  0B03               	andlw	3
  4262  0011A6  6E78               	movwf	3960,c	;volatile
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;action.c: 1128: erreur_accumulator = 0;
  4266  0011A8  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4267  0011AA  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;action.c: 1131: Nouvelle_Valeur_ADC = 0;
  4271  0011AC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;action.c: 1141: PIE3bits.PTIE = 0;
  4275  0011AE  98A3               	bcf	4003,4,c	;volatile
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;action.c: 1142: PIE1bits.ADIE = 1;
  4279  0011B0  8C9D               	bsf	3997,6,c	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;action.c: 1144: PEIE = 1;
  4283  0011B2  8CF2               	bsf	intcon,6,c	;volatile
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;action.c: 1145: GIE = 1;
  4287  0011B4  8EF2               	bsf	intcon,7,c	;volatile
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;action.c: 1146: TIMER2_On();
  4291  0011B6  EC81  F013         	call	_TIMER2_On	;wreg free
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;action.c: 1147: ADIF = 0;
  4295  0011BA  9C9E               	bcf	3998,6,c	;volatile
  4296                           
  4297                           ;action.c: 1151: Init_Moteur_1();
  4298  0011BC  EC10  F013         	call	_Init_Moteur_1	;wreg free
  4299                           
  4300                           ;action.c: 1154: switch (type_consigne) {
  4301  0011C0  D051               	goto	l8672
  4302  0011C2                     l8622:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;action.c: 1156: nb_Pion_Objectif = 2;
  4306  0011C2  0E02               	movlw	2
  4307  0011C4  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;action.c: 1158: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4311  0011C6  39FF               	swapf	Mouvement_X@option& (0+255),w,b
  4312  0011C8  0B0F               	andlw	15
  4313  0011CA  6FA8               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;action.c: 1162: if (option & 0x04) {
  4317  0011CC  A5FF               	btfss	Mouvement_X@option& (0+255),2,b
  4318  0011CE  D003               	goto	l8630
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;action.c: 1164: nb_s_fonctionnement_souhaiter *= 3;
  4322  0011D0  90D8               	bcf	status,0,c
  4323  0011D2  35A8               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4324  0011D4  27A8               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4325  0011D6                     l8630:
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;action.c: 1166: }
  4329                           ;action.c: 1168: if (Option_Pailleux==1){
  4330  0011D6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4331  0011D8  D00F               	goto	l8640
  4332  0011DA                     l8632:
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;action.c: 1179: EUSART1_Check_Buffer();
  4336  0011DA  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4337                           
  4338                           ;action.c: 1180: SPI_Check_Buffer();
  4339  0011DE  EC00  F011         	call	_SPI_Check_Buffer	;wreg free
  4340                           
  4341                           ;action.c: 1191: } while(
  4342                           ;action.c: 1192: ((Etat == 2) | (Etat == 3))
  4343                           ;action.c: 1193: &&
  4344                           ;action.c: 1194: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4345                           ;action.c: 1195: )
  4346  0011E2  0E02               	movlw	2
  4347  0011E4  0100               	movlb	0	; () banked
  4348  0011E6  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4349  0011E8  E003               	bz	l8638
  4350                           
  4351                           ; BSR set to: 0
  4352  0011EA  0E03               	movlw	3
  4353  0011EC  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4354  0011EE  E10C               	bnz	l8644
  4355  0011F0                     l8638:
  4356                           
  4357                           ; BSR set to: 0
  4358  0011F0  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4359  0011F2  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4360  0011F4  E209               	bc	l8644
  4361  0011F6  D7F1               	goto	l8632
  4362  0011F8                     l8640:
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;action.c: 1205: EUSART1_Check_Buffer();
  4366  0011F8  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4367                           
  4368                           ;action.c: 1206: SPI_Check_Buffer();
  4369  0011FC  EC00  F011         	call	_SPI_Check_Buffer	;wreg free
  4370                           
  4371                           ;action.c: 1209: } while(nb_s_fonctionnement < nb_s_fonctionnement_souhaiter);
  4372  001200  0100               	movlb	0	; () banked
  4373  001202  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4374  001204  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4375  001206  E3F8               	bnc	l8640
  4376  001208                     l8644:
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;action.c: 1210: }
  4380                           ;action.c: 1214: Stop_Moteur_1();
  4381  001208  EC93  F013         	call	_Stop_Moteur_1	;wreg free
  4382                           
  4383                           ;action.c: 1215: Capteur_Capot_Off();
  4384  00120C  EC95  F013         	call	_Capteur_Capot_Off	;wreg free
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;action.c: 1218: if ((Etat == 2) | (Etat == 3)) {
  4388  001210  0E02               	movlw	2
  4389  001212  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4390  001214  E003               	bz	l8650
  4391                           
  4392                           ; BSR set to: 0
  4393  001216  0E03               	movlw	3
  4394  001218  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4395  00121A  E128               	bnz	l1040
  4396  00121C                     l8650:
  4397                           
  4398                           ; BSR set to: 0
  4399                           ;action.c: 1220: Etat_Update(0);
  4400  00121C  0E00               	movlw	0
  4401  00121E  EC18  F012         	call	_Etat_Update
  4402                           
  4403                           ;action.c: 1221: P4_busy = 0;
  4404  001222  0100               	movlb	0	; () banked
  4405  001224  6BAC               	clrf	_P4_busy& (0+255),b
  4406  001226  D022               	goto	l1040
  4407  001228                     l1041:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;action.c: 1238: nb_Pion_Objectif = option;
  4411  001228  C0FF  F0A0         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4412                           
  4413                           ;action.c: 1239: nb_Pion = 0;
  4414  00122C  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;action.c: 1247: Detection_Pion_Init();
  4418  00122E  ECBC  F012         	call	_Detection_Pion_Init	;wreg free
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;action.c: 1248: Detection_Pion_On();
  4422  001232  EC7B  F011         	call	_Detection_Pion_On	;wreg free
  4423  001236                     l8658:
  4424                           
  4425                           ;action.c: 1271: Check_List_Moteur_1();
  4426  001236  EC12  F00D         	call	_Check_List_Moteur_1	;wreg free
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;action.c: 1272: } while (
  4430                           ;action.c: 1273: ((direction == 1) && (Etat == 2))
  4431                           ;action.c: 1274: |
  4432                           ;action.c: 1275: ((direction == 0) && (Etat == 3))
  4433                           ;action.c: 1277: );
  4434  00123A  0102               	movlb	2	; () banked
  4435  00123C  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4436  00123E  E104               	bnz	l8664
  4437                           
  4438                           ; BSR set to: 2
  4439  001240  0E02               	movlw	2
  4440  001242  0100               	movlb	0	; () banked
  4441  001244  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4442  001246  E0F7               	bz	l8658
  4443  001248                     l8664:
  4444  001248  0102               	movlb	2	; () banked
  4445  00124A  5187               	movf	Mouvement_X@direction& (0+255),w,b
  4446  00124C  E104               	bnz	l8668
  4447                           
  4448                           ; BSR set to: 2
  4449  00124E  0E03               	movlw	3
  4450  001250  0100               	movlb	0	; () banked
  4451  001252  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4452  001254  E0F0               	bz	l8658
  4453  001256                     l8668:
  4454                           
  4455                           ;action.c: 1280: Detection_Pion_Off();
  4456  001256  EC71  F013         	call	_Detection_Pion_Off	;wreg free
  4457                           
  4458                           ;action.c: 1288: Stop_Moteur_1();
  4459  00125A  EC93  F013         	call	_Stop_Moteur_1	;wreg free
  4460                           
  4461                           ;action.c: 1289: Capteur_Capot_Off();
  4462  00125E  EC95  F013         	call	_Capteur_Capot_Off	;wreg free
  4463                           
  4464                           ;action.c: 1291: break;
  4465  001262  D004               	goto	l1040
  4466  001264                     l8672:
  4467                           
  4468                           ; BSR set to: 0
  4469  001264  51FE               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4470                           
  4471                           ; Switch size 1, requested type "speed"
  4472                           ; Number of cases is 2, Range of values is 0 to 1
  4473                           ; switch strategies available:
  4474                           ; Name         Instructions Cycles
  4475                           ; simple_byte            7     4 (average)
  4476                           ;	Chosen strategy is simple_byte
  4477  001266  E0E0               	bz	l1041
  4478  001268  0A01               	xorlw	1	; case 1
  4479  00126A  E0AB               	bz	l8622
  4480  00126C                     l1040:
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;action.c: 1338: PIE3bits.PTIE = 0;
  4484  00126C  98A3               	bcf	4003,4,c	;volatile
  4485                           
  4486                           ;action.c: 1339: PIE1bits.ADIE = 0;
  4487  00126E  9C9D               	bcf	3997,6,c	;volatile
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;action.c: 1341: Surveillance_Consommation_Moteur_1_Desactiver();
  4491  001270  EC5B  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;action.c: 1343: Coupe_Moteur();
  4495  001274  EFC6  F012         	goto	_Coupe_Moteur	;wreg free
  4496  001278                     __end_of_Mouvement_X:
  4497                           	opt stack 0
  4498                           tblptru	equ	0xFF8
  4499                           prodl	equ	0xFF3
  4500                           intcon	equ	0xFF2
  4501                           intcon2	equ	0xFF1
  4502                           intcon3	equ	0xFF0
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           postdec1	equ	0xFE5
  4506                           fsr1h	equ	0xFE2
  4507                           fsr1l	equ	0xFE1
  4508                           indf2	equ	0xFDF
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4514 ;; Defined at:
  4515 ;;		line 860 in file "interrupt.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;		None
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;		None
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  1    wreg      void 
  4522 ;; Registers used:
  4523 ;;		wreg, status,2
  4524 ;; Tracked objects:
  4525 ;;		On entry : 3F/0
  4526 ;;		On exit  : 3F/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4529 ;;      Params:         0       0       0       0
  4530 ;;      Locals:         0       0       0       0
  4531 ;;      Temps:          0       0       0       0
  4532 ;;      Totals:         0       0       0       0
  4533 ;;Total ram usage:        0 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:   10
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_Mouvement_X
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text19
  4544  0026B6                     __ptext19:
  4545                           	opt stack 0
  4546  0026B6                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4547                           	opt stack 18
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;interrupt.c: 862: if (Surveillance_Consommation_Moteur_1 != 0) {
  4551                           
  4552                           ;incstack = 0
  4553  0026B6  518B               	movf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
  4554  0026B8  B4D8               	btfsc	status,2,c
  4555  0026BA  0012               	return	
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;interrupt.c: 863: Surveillance_Consommation_Moteur_1 = 0;
  4559  0026BC  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  4560                           
  4561                           ;interrupt.c: 864: INTCON3bits.INT1IE = 0;
  4562  0026BE  96F0               	bcf	intcon3,3,c	;volatile
  4563                           
  4564                           ; BSR set to: 0
  4565  0026C0  0012               	return		;funcret
  4566  0026C2                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4567                           	opt stack 0
  4568                           tblptru	equ	0xFF8
  4569                           prodl	equ	0xFF3
  4570                           intcon	equ	0xFF2
  4571                           intcon2	equ	0xFF1
  4572                           intcon3	equ	0xFF0
  4573                           postinc0	equ	0xFEE
  4574                           wreg	equ	0xFE8
  4575                           postdec1	equ	0xFE5
  4576                           fsr1h	equ	0xFE2
  4577                           fsr1l	equ	0xFE1
  4578                           indf2	equ	0xFDF
  4579                           fsr2h	equ	0xFDA
  4580                           fsr2l	equ	0xFD9
  4581                           status	equ	0xFD8
  4582                           
  4583 ;; *************** function _Stop_Moteur_1 *****************
  4584 ;; Defined at:
  4585 ;;		line 104 in file "action.c"
  4586 ;; Parameters:    Size  Location     Type
  4587 ;;		None
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;		None
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 3D/0
  4596 ;;		On exit  : 3F/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4599 ;;      Params:         0       0       0       0
  4600 ;;      Locals:         0       0       0       0
  4601 ;;      Temps:          0       0       0       0
  4602 ;;      Totals:         0       0       0       0
  4603 ;;Total ram usage:        0 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:   11
  4606 ;; This function calls:
  4607 ;;		_TIMER0_Off
  4608 ;; This function is called by:
  4609 ;;		_Mouvement_X
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text20
  4614  002726                     __ptext20:
  4615                           	opt stack 0
  4616  002726                     _Stop_Moteur_1:
  4617                           	opt stack 17
  4618                           
  4619                           ;action.c: 106: TIMER0_Off();
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;incstack = 0
  4623  002726  EF61  F013         	goto	_TIMER0_Off	;wreg free
  4624  00272A                     __end_of_Stop_Moteur_1:
  4625                           	opt stack 0
  4626                           tblptru	equ	0xFF8
  4627                           prodl	equ	0xFF3
  4628                           intcon	equ	0xFF2
  4629                           intcon2	equ	0xFF1
  4630                           intcon3	equ	0xFF0
  4631                           postinc0	equ	0xFEE
  4632                           wreg	equ	0xFE8
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _Init_Moteur_1 *****************
  4642 ;; Defined at:
  4643 ;;		line 84 in file "action.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 3F/0
  4654 ;;		On exit  : 3F/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4657 ;;      Params:         0       0       0       0
  4658 ;;      Locals:         0       0       0       0
  4659 ;;      Temps:          0       0       0       0
  4660 ;;      Totals:         0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:   11
  4664 ;; This function calls:
  4665 ;;		_TIMER0_On
  4666 ;; This function is called by:
  4667 ;;		_Mouvement_X
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text21
  4672  002620                     __ptext21:
  4673                           	opt stack 0
  4674  002620                     _Init_Moteur_1:
  4675                           	opt stack 17
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;action.c: 91: Capteur_Capot_Compteur_Temps_S = 0;
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;incstack = 0
  4682  002620  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4683                           
  4684                           ;action.c: 94: nb_s_fonctionnement = 0;
  4685  002622  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  4686                           
  4687                           ;action.c: 95: nb_Pion = 0;
  4688  002624  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4689                           
  4690                           ;action.c: 96: nb_100ms_Timer_5 = 0;
  4691  002626  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;action.c: 98: TIMER0_On();
  4695  002628  EC7B  F012         	call	_TIMER0_On	;wreg free
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;action.c: 101: Compteur_IRQ_I_Moteur_1 = 0;
  4699  00262C  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  4700                           
  4701                           ; BSR set to: 0
  4702  00262E  0012               	return		;funcret
  4703  002630                     __end_of_Init_Moteur_1:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           intcon2	equ	0xFF1
  4709                           intcon3	equ	0xFF0
  4710                           postinc0	equ	0xFEE
  4711                           wreg	equ	0xFE8
  4712                           postdec1	equ	0xFE5
  4713                           fsr1h	equ	0xFE2
  4714                           fsr1l	equ	0xFE1
  4715                           indf2	equ	0xFDF
  4716                           fsr2h	equ	0xFDA
  4717                           fsr2l	equ	0xFD9
  4718                           status	equ	0xFD8
  4719                           
  4720 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  4721 ;; Defined at:
  4722 ;;		line 110 in file "adc.c"
  4723 ;; Parameters:    Size  Location     Type
  4724 ;;		None
  4725 ;; Auto vars:     Size  Location     Type
  4726 ;;		None
  4727 ;; Return value:  Size  Location     Type
  4728 ;;                  1    wreg      void 
  4729 ;; Registers used:
  4730 ;;		wreg, status,2
  4731 ;; Tracked objects:
  4732 ;;		On entry : 3F/0
  4733 ;;		On exit  : 3F/0
  4734 ;;		Unchanged: 3F/0
  4735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4736 ;;      Params:         0       0       0       0
  4737 ;;      Locals:         0       0       0       0
  4738 ;;      Temps:          0       0       0       0
  4739 ;;      Totals:         0       0       0       0
  4740 ;;Total ram usage:        0 bytes
  4741 ;; Hardware stack levels used:    1
  4742 ;; Hardware stack levels required when called:   10
  4743 ;; This function calls:
  4744 ;;		Nothing
  4745 ;; This function is called by:
  4746 ;;		_Mouvement_X
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text22
  4751  001D4E                     __ptext22:
  4752                           	opt stack 0
  4753  001D4E                     _Init_ADC_Single_Shoot_I_Moteur_1:
  4754                           	opt stack 18
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  4758                           
  4759                           ; BSR set to: 0
  4760                           ;incstack = 0
  4761  001D4E  9AC2               	bcf	4034,5,c	;volatile
  4762                           
  4763                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  4764  001D50  98C2               	bcf	4034,4,c	;volatile
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  4768  001D52  0EF3               	movlw	-13
  4769  001D54  16C2               	andwf	4034,f,c	;volatile
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;adc.c: 117: ADCON0bits.ADON = 0;
  4773  001D56  90C2               	bcf	4034,0,c	;volatile
  4774                           
  4775                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  4776  001D58  0E3F               	movlw	-193
  4777  001D5A  16C1               	andwf	4033,f,c	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  4781  001D5C  98C1               	bcf	4033,4,c	;volatile
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;adc.c: 130: ADCON1 = 0b00000000;
  4785  001D5E  6AC1               	clrf	4033,c	;volatile
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  4789  001D60  9EC0               	bcf	4032,7,c	;volatile
  4790                           
  4791                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  4792  001D62  50C0               	movf	4032,w,c	;volatile
  4793  001D64  0B87               	andlw	-121
  4794  001D66  0910               	iorlw	16
  4795  001D68  6EC0               	movwf	4032,c	;volatile
  4796                           
  4797                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  4798  001D6A  50C0               	movf	4032,w,c	;volatile
  4799  001D6C  0BF8               	andlw	-8
  4800  001D6E  0904               	iorlw	4
  4801  001D70  6EC0               	movwf	4032,c	;volatile
  4802                           
  4803                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  4804  001D72  50C0               	movf	4032,w,c	;volatile
  4805  001D74  0BF8               	andlw	-8
  4806  001D76  0901               	iorlw	1
  4807  001D78  6EC0               	movwf	4032,c	;volatile
  4808                           
  4809                           ;adc.c: 137: ADCON2 = 0b00010100;
  4810  001D7A  0E14               	movlw	20
  4811  001D7C  6EC0               	movwf	4032,c	;volatile
  4812                           
  4813                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  4814  001D7E  50C0               	movf	4032,w,c	;volatile
  4815  001D80  0BF8               	andlw	-8
  4816  001D82  0901               	iorlw	1
  4817  001D84  6EC0               	movwf	4032,c	;volatile
  4818                           
  4819                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  4820  001D86  0E3F               	movlw	-193
  4821  001D88  169A               	andwf	3994,f,c	;volatile
  4822                           
  4823                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  4824  001D8A  509A               	movf	3994,w,c	;volatile
  4825  001D8C  0BE0               	andlw	-32
  4826  001D8E  0910               	iorlw	16
  4827  001D90  6E9A               	movwf	3994,c	;volatile
  4828                           
  4829                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  4830  001D92  0EE0               	movlw	-32
  4831  001D94  169A               	andwf	3994,f,c	;volatile
  4832                           
  4833                           ;adc.c: 153: ADCON3 = 0b00010000;
  4834  001D96  0E10               	movlw	16
  4835  001D98  6E9A               	movwf	3994,c	;volatile
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;adc.c: 154: ADCON3 = 0x00;
  4839  001D9A  6A9A               	clrf	3994,c	;volatile
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;adc.c: 159: ADCHS = 0b00000000;
  4843  001D9C  6A99               	clrf	3993,c	;volatile
  4844                           
  4845                           ;adc.c: 160: ANSEL0 = 0b00000011;
  4846  001D9E  0E03               	movlw	3
  4847  001DA0  6EB8               	movwf	4024,c	;volatile
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;adc.c: 162: ANSEL1 = 0b00000000;
  4851  001DA2  6AB9               	clrf	4025,c	;volatile
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;adc.c: 171: PIE1bits.ADIE = 1;
  4855  001DA4  8C9D               	bsf	3997,6,c	;volatile
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;adc.c: 172: ADIF=0;
  4859  001DA6  9C9E               	bcf	3998,6,c	;volatile
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;adc.c: 173: IPR1bits.ADIP = 0;
  4863  001DA8  9C9F               	bcf	3999,6,c	;volatile
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;adc.c: 178: ADON = 1;
  4867  001DAA  80C2               	bsf	4034,0,c	;volatile
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  4871  001DAC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4872                           
  4873                           ; BSR set to: 0
  4874  001DAE  0012               	return		;funcret
  4875  001DB0                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  4876                           	opt stack 0
  4877                           tblptru	equ	0xFF8
  4878                           prodl	equ	0xFF3
  4879                           intcon	equ	0xFF2
  4880                           intcon2	equ	0xFF1
  4881                           intcon3	equ	0xFF0
  4882                           postinc0	equ	0xFEE
  4883                           wreg	equ	0xFE8
  4884                           postdec1	equ	0xFE5
  4885                           fsr1h	equ	0xFE2
  4886                           fsr1l	equ	0xFE1
  4887                           indf2	equ	0xFDF
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892 ;; *************** function _Detection_Pion_On *****************
  4893 ;; Defined at:
  4894 ;;		line 29 in file "pion.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;		None
  4897 ;; Auto vars:     Size  Location     Type
  4898 ;;		None
  4899 ;; Return value:  Size  Location     Type
  4900 ;;                  1    wreg      void 
  4901 ;; Registers used:
  4902 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4903 ;; Tracked objects:
  4904 ;;		On entry : 3F/0
  4905 ;;		On exit  : 0/0
  4906 ;;		Unchanged: 0/0
  4907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4908 ;;      Params:         0       0       0       0
  4909 ;;      Locals:         0       0       0       0
  4910 ;;      Temps:          0       0       0       0
  4911 ;;      Totals:         0       0       0       0
  4912 ;;Total ram usage:        0 bytes
  4913 ;; Hardware stack levels used:    1
  4914 ;; Hardware stack levels required when called:   12
  4915 ;; This function calls:
  4916 ;;		_IRQ_PION_Metal_Apparait
  4917 ;; This function is called by:
  4918 ;;		_Mouvement_X
  4919 ;; This function uses a non-reentrant model
  4920 ;;
  4921                           
  4922                           	psect	text23
  4923  0022F6                     __ptext23:
  4924                           	opt stack 0
  4925  0022F6                     _Detection_Pion_On:
  4926                           	opt stack 16
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;incstack = 0
  4933  0022F6  92A4               	bcf	4004,1,c	;volatile
  4934                           
  4935                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  4936  0022F8  82A3               	bsf	4003,1,c	;volatile
  4937                           
  4938                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  4939  0022FA  92A4               	bcf	4004,1,c	;volatile
  4940                           
  4941                           ;pion.c: 64: Detecteur_Pion = 1;
  4942  0022FC  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  4943                           
  4944                           ;pion.c: 68: if (Option_Pailleux != 1) {
  4945  0022FE  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  4949  002300  B480               	btfsc	3968,2,c	;volatile
  4950  002302  0012               	return	
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  4954  002304  0E1F               	movlw	31
  4955  002306  644E               	cpfsgt	_nb_100ms_platine_backup,c
  4956  002308  D003               	goto	l8570
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;pion.c: 91: nb_100ms_platine = 255;
  4960  00230A  69A4               	setf	_nb_100ms_platine& (0+255),b
  4961                           
  4962                           ;pion.c: 92: }else{
  4963  00230C  EF09  F012         	goto	_IRQ_PION_Metal_Apparait
  4964  002310                     l8570:
  4965                           
  4966                           ; BSR set to: 0
  4967                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  4968  002310  504E               	movf	_nb_100ms_platine_backup,w,c
  4969  002312  0D08               	mullw	8
  4970  002314  CFF3 F0A4          	movff	prodl,_nb_100ms_platine
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;pion.c: 94: }
  4974                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  4975  002318  EF09  F012         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  4976  00231C                     __end_of_Detection_Pion_On:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           prodl	equ	0xFF3
  4980                           intcon	equ	0xFF2
  4981                           intcon2	equ	0xFF1
  4982                           intcon3	equ	0xFF0
  4983                           postinc0	equ	0xFEE
  4984                           wreg	equ	0xFE8
  4985                           postdec1	equ	0xFE5
  4986                           fsr1h	equ	0xFE2
  4987                           fsr1l	equ	0xFE1
  4988                           indf2	equ	0xFDF
  4989                           fsr2h	equ	0xFDA
  4990                           fsr2l	equ	0xFD9
  4991                           status	equ	0xFD8
  4992                           
  4993 ;; *************** function _Detection_Pion_Init *****************
  4994 ;; Defined at:
  4995 ;;		line 13 in file "pion.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  1    wreg      void 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2
  5004 ;; Tracked objects:
  5005 ;;		On entry : 3F/0
  5006 ;;		On exit  : 3F/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5009 ;;      Params:         0       0       0       0
  5010 ;;      Locals:         0       0       0       0
  5011 ;;      Temps:          0       0       0       0
  5012 ;;      Totals:         0       0       0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:   10
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_Init_Variable
  5020 ;;		_Mouvement_X
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text24
  5025  002578                     __ptext24:
  5026                           	opt stack 0
  5027  002578                     _Detection_Pion_Init:
  5028                           	opt stack 19
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;pion.c: 15: if (PORTAbits.RA2 == 0) {
  5032                           
  5033                           ;incstack = 0
  5034  002578  B480               	btfsc	3968,2,c	;volatile
  5035  00257A  D004               	goto	l8356
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  5039  00257C  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;pion.c: 17: Mouvement_Startup = 1;
  5043  00257E  0E01               	movlw	1
  5044  002580  6E4D               	movwf	_Mouvement_Startup,c
  5045                           
  5046                           ;pion.c: 18: } else {
  5047  002582  0C01               	retlw	1
  5048  002584                     l8356:
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;pion.c: 19: Surveillance_Capteur_Pion = 1;
  5052  002584  0E01               	movlw	1
  5053  002586  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;pion.c: 20: Mouvement_Startup = 0;
  5057  002588  6A4D               	clrf	_Mouvement_Startup,c
  5058                           
  5059                           ; BSR set to: 0
  5060  00258A  0012               	return		;funcret
  5061  00258C                     __end_of_Detection_Pion_Init:
  5062                           	opt stack 0
  5063                           tblptru	equ	0xFF8
  5064                           prodl	equ	0xFF3
  5065                           intcon	equ	0xFF2
  5066                           intcon2	equ	0xFF1
  5067                           intcon3	equ	0xFF0
  5068                           postinc0	equ	0xFEE
  5069                           wreg	equ	0xFE8
  5070                           postdec1	equ	0xFE5
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078 ;; *************** function _Check_List_Moteur_1 *****************
  5079 ;; Defined at:
  5080 ;;		line 111 in file "action.c"
  5081 ;; Parameters:    Size  Location     Type
  5082 ;;		None
  5083 ;; Auto vars:     Size  Location     Type
  5084 ;;		None
  5085 ;; Return value:  Size  Location     Type
  5086 ;;                  1    wreg      void 
  5087 ;; Registers used:
  5088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5089 ;; Tracked objects:
  5090 ;;		On entry : 0/0
  5091 ;;		On exit  : 3F/0
  5092 ;;		Unchanged: 0/0
  5093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5094 ;;      Params:         0       0       0       0
  5095 ;;      Locals:         0       0       0       0
  5096 ;;      Temps:          0       0       0       0
  5097 ;;      Totals:         0       0       0       0
  5098 ;;Total ram usage:        0 bytes
  5099 ;; Hardware stack levels used:    1
  5100 ;; Hardware stack levels required when called:   17
  5101 ;; This function calls:
  5102 ;;		_Alarme_On
  5103 ;;		_EUSART1_Check_Buffer
  5104 ;;		_SPI_Check_Buffer
  5105 ;;		___ftdiv
  5106 ;;		___ftmul
  5107 ;;		___fttol
  5108 ;;		___lbtoft
  5109 ;; This function is called by:
  5110 ;;		_Mouvement_X
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text25
  5115  001A24                     __ptext25:
  5116                           	opt stack 0
  5117  001A24                     _Check_List_Moteur_1:
  5118                           	opt stack 11
  5119                           
  5120                           ;action.c: 114: if(PORTCbits.RC4 == 0){
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;incstack = 0
  5124  001A24  A882               	btfss	3970,4,c	;volatile
  5125                           
  5126                           ;action.c: 115: Compteur_IRQ_I_Moteur_1 = 0;
  5127  001A26  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  5128                           
  5129                           ;action.c: 116: }
  5130                           ;action.c: 119: EUSART1_Check_Buffer();
  5131  001A28  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  5132                           
  5133                           ;action.c: 120: SPI_Check_Buffer();
  5134  001A2C  EC00  F011         	call	_SPI_Check_Buffer	;wreg free
  5135                           
  5136                           ;action.c: 122: if (nb_s_fonctionnement > nb_s_patinage) {
  5137  001A30  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5138  001A32  0100               	movlb	0	; () banked
  5139  001A34  5DA7               	subwf	_nb_s_patinage& (0+255),w,b
  5140  001A36  E234               	bc	l8514
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;action.c: 136: if ((Mouvement_Startup == 1)&& (Option_Multitas==1)){
  5144  001A38  044D               	decf	_Mouvement_Startup,w,c
  5145  001A3A  E12F               	bnz	l8512
  5146                           
  5147                           ; BSR set to: 0
  5148  001A3C  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  5149  001A3E  D02D               	goto	l8512
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;action.c: 139: if (nb_s_fonctionnement > (unsigned char) (1.1 * 8 * nb_100ms_platine_ba
      +                          ckup / 10.0)){
  5153  001A40  6A2C               	clrf	___ftdiv@f2,c
  5154  001A42  0E20               	movlw	32
  5155  001A44  6E2D               	movwf	___ftdiv@f2+1,c
  5156  001A46  0E41               	movlw	65
  5157  001A48  6E2E               	movwf	___ftdiv@f2+2,c
  5158  001A4A  0ECD               	movlw	205
  5159  001A4C  6E1E               	movwf	___ftmul@f2,c
  5160  001A4E  0E0C               	movlw	12
  5161  001A50  6E1F               	movwf	___ftmul@f2+1,c
  5162  001A52  0E41               	movlw	65
  5163  001A54  6E20               	movwf	___ftmul@f2+2,c
  5164  001A56  504E               	movf	_nb_100ms_platine_backup,w,c
  5165  001A58  ECC6  F011         	call	___lbtoft
  5166  001A5C  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  5167  001A60  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  5168  001A64  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  5169  001A68  ECC3  F009         	call	___ftmul	;wreg free
  5170  001A6C  C01B  F029         	movff	?___ftmul,___ftdiv@f1
  5171  001A70  C01C  F02A         	movff	?___ftmul+1,___ftdiv@f1+1
  5172  001A74  C01D  F02B         	movff	?___ftmul+2,___ftdiv@f1+2
  5173  001A78  EC53  F00B         	call	___ftdiv	;wreg free
  5174  001A7C  C029  F038         	movff	?___ftdiv,___fttol@f1
  5175  001A80  C02A  F039         	movff	?___ftdiv+1,___fttol@f1+1
  5176  001A84  C02B  F03A         	movff	?___ftdiv+2,___fttol@f1+2
  5177  001A88  ECF5  F00A         	call	___fttol	;wreg free
  5178  001A8C  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5179  001A8E  5C38               	subwf	?___fttol,w,c
  5180  001A90  E207               	bc	l8514
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;action.c: 140: Alarme_On(11);
  5184  001A92  0E0B               	movlw	11
  5185  001A94  EC28  F013         	call	_Alarme_On
  5186  001A98  D003               	goto	l8514
  5187  001A9A                     l8512:
  5188                           
  5189                           ; BSR set to: 0
  5190                           ;action.c: 144: Alarme_On(3);
  5191  001A9A  0E03               	movlw	3
  5192  001A9C  EC28  F013         	call	_Alarme_On
  5193  001AA0                     l8514:
  5194                           
  5195                           ;action.c: 145: }
  5196                           ;action.c: 146: }
  5197                           ;action.c: 149: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5198  001AA0  0EB4               	movlw	180
  5199  001AA2  0100               	movlb	0	; () banked
  5200  001AA4  659E               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5201  001AA6  0CB4               	retlw	180
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;action.c: 150: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5205  001AA8  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5206                           
  5207                           ;action.c: 151: Capteur_Capot_Compteur_Temps_S = 0;
  5208  001AAC  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5209                           
  5210                           ; BSR set to: 0
  5211  001AAE  0012               	return		;funcret
  5212  001AB0                     __end_of_Check_List_Moteur_1:
  5213                           	opt stack 0
  5214                           tblptru	equ	0xFF8
  5215                           prodl	equ	0xFF3
  5216                           intcon	equ	0xFF2
  5217                           intcon2	equ	0xFF1
  5218                           intcon3	equ	0xFF0
  5219                           postinc0	equ	0xFEE
  5220                           wreg	equ	0xFE8
  5221                           postdec1	equ	0xFE5
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           indf2	equ	0xFDF
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function ___lbtoft *****************
  5230 ;; Defined at:
  5231 ;;		line 27 in file "/opt/microchip/xc8/v1.42/sources/common/lbtoft.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  c               1    wreg     unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  c               1   25[COMRAM] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  3   22[COMRAM] float 
  5238 ;; Registers used:
  5239 ;;		wreg, status,2, status,0, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 3F/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5245 ;;      Params:         3       0       0       0
  5246 ;;      Locals:         1       0       0       0
  5247 ;;      Temps:          0       0       0       0
  5248 ;;      Totals:         4       0       0       0
  5249 ;;Total ram usage:        4 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:   11
  5252 ;; This function calls:
  5253 ;;		___ftpack
  5254 ;; This function is called by:
  5255 ;;		_Check_List_Moteur_1
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text26
  5260  00238C                     __ptext26:
  5261                           	opt stack 0
  5262  00238C                     ___lbtoft:
  5263                           	opt stack 16
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;incstack = 0
  5267                           ;___lbtoft@c stored from wreg
  5268  00238C  6E1A               	movwf	___lbtoft@c,c
  5269  00238E  501A               	movf	___lbtoft@c,w,c
  5270  002390  6E0F               	movwf	___ftpack@arg,c
  5271  002392  6A10               	clrf	___ftpack@arg+1,c
  5272  002394  6A11               	clrf	___ftpack@arg+2,c
  5273  002396  0E8E               	movlw	142
  5274  002398  6E12               	movwf	___ftpack@exp,c
  5275  00239A  0E00               	movlw	0
  5276  00239C  6E13               	movwf	___ftpack@sign,c
  5277  00239E  EC58  F00D         	call	___ftpack	;wreg free
  5278  0023A2  C00F  F017         	movff	?___ftpack,?___lbtoft
  5279  0023A6  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  5280  0023AA  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  5281  0023AE  0012               	return		;funcret
  5282  0023B0                     __end_of___lbtoft:
  5283                           	opt stack 0
  5284                           tblptru	equ	0xFF8
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           intcon3	equ	0xFF0
  5289                           postinc0	equ	0xFEE
  5290                           wreg	equ	0xFE8
  5291                           postdec1	equ	0xFE5
  5292                           fsr1h	equ	0xFE2
  5293                           fsr1l	equ	0xFE1
  5294                           indf2	equ	0xFDF
  5295                           fsr2h	equ	0xFDA
  5296                           fsr2l	equ	0xFD9
  5297                           status	equ	0xFD8
  5298                           
  5299 ;; *************** function ___fttol *****************
  5300 ;; Defined at:
  5301 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;  f1              3   55[COMRAM] float 
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;  lval            4    1[BANK0 ] unsigned long 
  5306 ;;  exp1            1    5[BANK0 ] unsigned char 
  5307 ;;  sign1           1    0[BANK0 ] unsigned char 
  5308 ;; Return value:  Size  Location     Type
  5309 ;;                  4   55[COMRAM] long 
  5310 ;; Registers used:
  5311 ;;		wreg, status,2, status,0
  5312 ;; Tracked objects:
  5313 ;;		On entry : 0/0
  5314 ;;		On exit  : 3F/0
  5315 ;;		Unchanged: 0/0
  5316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5317 ;;      Params:         4       0       0       0
  5318 ;;      Locals:         0       6       0       0
  5319 ;;      Temps:          5       0       0       0
  5320 ;;      Totals:         9       6       0       0
  5321 ;;Total ram usage:       15 bytes
  5322 ;; Hardware stack levels used:    1
  5323 ;; Hardware stack levels required when called:   10
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_Check_List_Moteur_1
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           	psect	text27
  5332  0015EA                     __ptext27:
  5333                           	opt stack 0
  5334  0015EA                     ___fttol:
  5335                           	opt stack 17
  5336                           
  5337                           ;incstack = 0
  5338  0015EA  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  5339  0015EE  6A3D               	clrf	(??___fttol+1)& (0+255),c
  5340  0015F0  6A3E               	clrf	(??___fttol+2)& (0+255),c
  5341  0015F2  3439               	rlcf	___fttol@f1+1,w,c
  5342  0015F4  363C               	rlcf	??___fttol& (0+255),f,c
  5343  0015F6  E301               	bnc	u6501
  5344  0015F8  803D               	bsf	(??___fttol+1)& (0+255),0,c
  5345  0015FA                     u6501:
  5346  0015FA  503C               	movf	??___fttol,w,c
  5347  0015FC  0100               	movlb	0	; () banked
  5348  0015FE  6FF2               	movwf	___fttol@exp1& (0+255),b
  5349  001600  51F2               	movf	___fttol@exp1& (0+255),w,b
  5350  001602  E105               	bnz	l8284
  5351  001604                     l8282:
  5352                           
  5353                           ; BSR set to: 0
  5354  001604  6A38               	clrf	?___fttol,c
  5355  001606  6A39               	clrf	?___fttol+1,c
  5356  001608  6A3A               	clrf	?___fttol+2,c
  5357  00160A  6A3B               	clrf	?___fttol+3,c
  5358  00160C  0012               	return	
  5359  00160E                     l8284:
  5360                           
  5361                           ; BSR set to: 0
  5362  00160E  0E17               	movlw	23
  5363  001610  6E3C               	movwf	??___fttol& (0+255),c
  5364  001612  C038  F03D         	movff	___fttol@f1,??___fttol+1
  5365  001616  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  5366  00161A  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  5367  00161E  283C               	incf	??___fttol,w,c
  5368  001620  6E40               	movwf	(??___fttol+4)& (0+255),c
  5369  001622  D004               	goto	u6520
  5370  001624                     u6525:
  5371  001624  90D8               	bcf	status,0,c
  5372  001626  323F               	rrcf	??___fttol+3,f,c
  5373  001628  323E               	rrcf	??___fttol+2,f,c
  5374  00162A  323D               	rrcf	??___fttol+1,f,c
  5375  00162C                     u6520:
  5376  00162C  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  5377  00162E  D7FA               	goto	u6525
  5378  001630  503D               	movf	??___fttol+1,w,c
  5379  001632  0100               	movlb	0	; () banked
  5380  001634  6FED               	movwf	___fttol@sign1& (0+255),b
  5381                           
  5382                           ; BSR set to: 0
  5383  001636  8E39               	bsf	___fttol@f1+1,7,c
  5384                           
  5385                           ; BSR set to: 0
  5386  001638  6A3A               	clrf	___fttol@f1+2,c
  5387                           
  5388                           ; BSR set to: 0
  5389  00163A  5038               	movf	___fttol@f1,w,c
  5390  00163C  6FEE               	movwf	___fttol@lval& (0+255),b
  5391  00163E  5039               	movf	___fttol@f1+1,w,c
  5392  001640  6FEF               	movwf	(___fttol@lval+1)& (0+255),b
  5393  001642  503A               	movf	___fttol@f1+2,w,c
  5394  001644  6FF0               	movwf	(___fttol@lval+2)& (0+255),b
  5395  001646  6BF1               	clrf	(___fttol@lval+3)& (0+255),b
  5396                           
  5397                           ; BSR set to: 0
  5398  001648  0E8E               	movlw	142
  5399  00164A  5FF2               	subwf	___fttol@exp1& (0+255),f,b
  5400                           
  5401                           ; BSR set to: 0
  5402  00164C  AFF2               	btfss	___fttol@exp1& (0+255),7,b
  5403  00164E  D00C               	goto	l8304
  5404                           
  5405                           ; BSR set to: 0
  5406  001650  51F2               	movf	___fttol@exp1& (0+255),w,b
  5407  001652  0A80               	xorlw	128
  5408  001654  0F8F               	addlw	143
  5409  001656  E3D6               	bnc	l8282
  5410  001658                     l8300:
  5411                           
  5412                           ; BSR set to: 0
  5413  001658  90D8               	bcf	status,0,c
  5414  00165A  33F1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5415  00165C  33F0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5416  00165E  33EF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5417  001660  33EE               	rrcf	___fttol@lval& (0+255),f,b
  5418                           
  5419                           ; BSR set to: 0
  5420  001662  3FF2               	incfsz	___fttol@exp1& (0+255),f,b
  5421  001664  D7F9               	goto	l8300
  5422  001666  D00C               	goto	l8312
  5423  001668                     l8304:
  5424                           
  5425                           ; BSR set to: 0
  5426  001668  0E17               	movlw	23
  5427  00166A  65F2               	cpfsgt	___fttol@exp1& (0+255),b
  5428  00166C  D007               	goto	l8310
  5429  00166E  D7CA               	goto	l8282
  5430  001670                     l8308:
  5431                           
  5432                           ; BSR set to: 0
  5433  001670  90D8               	bcf	status,0,c
  5434  001672  37EE               	rlcf	___fttol@lval& (0+255),f,b
  5435  001674  37EF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5436  001676  37F0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5437  001678  37F1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5438  00167A  07F2               	decf	___fttol@exp1& (0+255),f,b
  5439  00167C                     l8310:
  5440                           
  5441                           ; BSR set to: 0
  5442  00167C  51F2               	movf	___fttol@exp1& (0+255),w,b
  5443  00167E  E1F8               	bnz	l8308
  5444  001680                     l8312:
  5445                           
  5446                           ; BSR set to: 0
  5447  001680  51ED               	movf	___fttol@sign1& (0+255),w,b
  5448  001682  E008               	bz	l8316
  5449                           
  5450                           ; BSR set to: 0
  5451  001684  1FF1               	comf	(___fttol@lval+3)& (0+255),f,b
  5452  001686  1FF0               	comf	(___fttol@lval+2)& (0+255),f,b
  5453  001688  1FEF               	comf	(___fttol@lval+1)& (0+255),f,b
  5454  00168A  6DEE               	negf	___fttol@lval& (0+255),b
  5455  00168C  0E00               	movlw	0
  5456  00168E  23EF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5457  001690  23F0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5458  001692  23F1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5459  001694                     l8316:
  5460                           
  5461                           ; BSR set to: 0
  5462  001694  C0EE  F038         	movff	___fttol@lval,?___fttol
  5463  001698  C0EF  F039         	movff	___fttol@lval+1,?___fttol+1
  5464  00169C  C0F0  F03A         	movff	___fttol@lval+2,?___fttol+2
  5465  0016A0  C0F1  F03B         	movff	___fttol@lval+3,?___fttol+3
  5466                           
  5467                           ; BSR set to: 0
  5468  0016A4  0012               	return		;funcret
  5469  0016A6                     __end_of___fttol:
  5470                           	opt stack 0
  5471                           tblptru	equ	0xFF8
  5472                           prodl	equ	0xFF3
  5473                           intcon	equ	0xFF2
  5474                           intcon2	equ	0xFF1
  5475                           intcon3	equ	0xFF0
  5476                           postinc0	equ	0xFEE
  5477                           wreg	equ	0xFE8
  5478                           postdec1	equ	0xFE5
  5479                           fsr1h	equ	0xFE2
  5480                           fsr1l	equ	0xFE1
  5481                           indf2	equ	0xFDF
  5482                           fsr2h	equ	0xFDA
  5483                           fsr2l	equ	0xFD9
  5484                           status	equ	0xFD8
  5485                           
  5486 ;; *************** function ___ftmul *****************
  5487 ;; Defined at:
  5488 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;  f1              3   26[COMRAM] float 
  5491 ;;  f2              3   29[COMRAM] float 
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  5494 ;;  sign            1   36[COMRAM] unsigned char 
  5495 ;;  exp             1   35[COMRAM] unsigned char 
  5496 ;;  cntr            1    0        unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  3   26[COMRAM] float 
  5499 ;; Registers used:
  5500 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5506 ;;      Params:         6       0       0       0
  5507 ;;      Locals:         5       0       0       0
  5508 ;;      Temps:          3       0       0       0
  5509 ;;      Totals:        14       0       0       0
  5510 ;;Total ram usage:       14 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:   11
  5513 ;; This function calls:
  5514 ;;		___ftpack
  5515 ;; This function is called by:
  5516 ;;		_Check_List_Moteur_1
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text28
  5521  001386                     __ptext28:
  5522                           	opt stack 0
  5523  001386                     ___ftmul:
  5524                           	opt stack 16
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;incstack = 0
  5528  001386  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5529  00138A  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5530  00138C  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5531  00138E  341C               	rlcf	___ftmul@f1+1,w,c
  5532  001390  3621               	rlcf	??___ftmul& (0+255),f,c
  5533  001392  E301               	bnc	u6451
  5534  001394  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5535  001396                     u6451:
  5536  001396  5021               	movf	??___ftmul,w,c
  5537  001398  6E24               	movwf	___ftmul@exp,c
  5538  00139A  5024               	movf	___ftmul@exp,w,c
  5539  00139C  E104               	bnz	l8246
  5540  00139E  6A1B               	clrf	?___ftmul,c
  5541  0013A0  6A1C               	clrf	?___ftmul+1,c
  5542  0013A2  6A1D               	clrf	?___ftmul+2,c
  5543  0013A4  0012               	return	
  5544  0013A6                     l8246:
  5545  0013A6  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5546  0013AA  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5547  0013AC  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5548  0013AE  341F               	rlcf	___ftmul@f2+1,w,c
  5549  0013B0  3621               	rlcf	??___ftmul& (0+255),f,c
  5550  0013B2  E301               	bnc	u6471
  5551  0013B4  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5552  0013B6                     u6471:
  5553  0013B6  5021               	movf	??___ftmul,w,c
  5554  0013B8  6E25               	movwf	___ftmul@sign,c
  5555  0013BA  5025               	movf	___ftmul@sign,w,c
  5556  0013BC  E104               	bnz	l8250
  5557  0013BE  6A1B               	clrf	?___ftmul,c
  5558  0013C0  6A1C               	clrf	?___ftmul+1,c
  5559  0013C2  6A1D               	clrf	?___ftmul+2,c
  5560  0013C4  0012               	return	
  5561  0013C6                     l8250:
  5562  0013C6  5025               	movf	___ftmul@sign,w,c
  5563  0013C8  0F7B               	addlw	123
  5564  0013CA  2624               	addwf	___ftmul@exp,f,c
  5565  0013CC  C01D  F025         	movff	___ftmul@f1+2,___ftmul@sign
  5566  0013D0  5020               	movf	___ftmul@f2+2,w,c
  5567  0013D2  1A25               	xorwf	___ftmul@sign,f,c
  5568  0013D4  0E80               	movlw	128
  5569  0013D6  1625               	andwf	___ftmul@sign,f,c
  5570  0013D8  8E1C               	bsf	___ftmul@f1+1,7,c
  5571  0013DA  8E1F               	bsf	___ftmul@f2+1,7,c
  5572  0013DC  6A20               	clrf	___ftmul@f2+2,c
  5573  0013DE  6A1D               	clrf	___ftmul@f1+2,c
  5574  0013E0  501B               	movf	___ftmul@f1,w,c
  5575  0013E2  021E               	mulwf	___ftmul@f2,c
  5576  0013E4  CFF4 FFF3          	movff	prodh,prodl
  5577  0013E8  6AF4               	clrf	prodh,c
  5578  0013EA  CFF3 F026          	movff	prodl,___ftmul@f3_as_product
  5579  0013EE  CFF4 F027          	movff	prodh,___ftmul@f3_as_product+1
  5580  0013F2  6A28               	clrf	___ftmul@f3_as_product+2,c
  5581  0013F4  501B               	movf	___ftmul@f1,w,c
  5582  0013F6  021F               	mulwf	___ftmul@f2+1,c
  5583  0013F8  50F3               	movf	prodl,w,c
  5584  0013FA  2626               	addwf	___ftmul@f3_as_product,f,c
  5585  0013FC  50F4               	movf	prodh,w,c
  5586  0013FE  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5587  001400  0E00               	movlw	0
  5588  001402  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5589  001404  501C               	movf	___ftmul@f1+1,w,c
  5590  001406  021E               	mulwf	___ftmul@f2,c
  5591  001408  50F3               	movf	prodl,w,c
  5592  00140A  2626               	addwf	___ftmul@f3_as_product,f,c
  5593  00140C  50F4               	movf	prodh,w,c
  5594  00140E  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5595  001410  0E00               	movlw	0
  5596  001412  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5597  001414  501C               	movf	___ftmul@f1+1,w,c
  5598  001416  021F               	mulwf	___ftmul@f2+1,c
  5599  001418  50F3               	movf	prodl,w,c
  5600  00141A  2627               	addwf	___ftmul@f3_as_product+1,f,c
  5601  00141C  50F4               	movf	prodh,w,c
  5602  00141E  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5603  001420  AE28               	btfss	___ftmul@f3_as_product+2,7,c
  5604  001422  D005               	goto	l2049
  5605  001424  90D8               	bcf	status,0,c
  5606  001426  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5607  001428  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5608  00142A  3226               	rrcf	___ftmul@f3_as_product,f,c
  5609  00142C  2A24               	incf	___ftmul@exp,f,c
  5610  00142E                     l2049:
  5611  00142E  90D8               	bcf	status,0,c
  5612  001430  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5613  001432  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5614  001434  3226               	rrcf	___ftmul@f3_as_product,f,c
  5615  001436  C026  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  5616  00143A  C027  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5617  00143E  C028  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5618  001442  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  5619  001446  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  5620  00144A  EC58  F00D         	call	___ftpack	;wreg free
  5621  00144E  C00F  F01B         	movff	?___ftpack,?___ftmul
  5622  001452  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  5623  001456  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  5624  00145A  0012               	return		;funcret
  5625  00145C                     __end_of___ftmul:
  5626                           	opt stack 0
  5627                           tblptru	equ	0xFF8
  5628                           prodh	equ	0xFF4
  5629                           prodl	equ	0xFF3
  5630                           intcon	equ	0xFF2
  5631                           intcon2	equ	0xFF1
  5632                           intcon3	equ	0xFF0
  5633                           postinc0	equ	0xFEE
  5634                           wreg	equ	0xFE8
  5635                           postdec1	equ	0xFE5
  5636                           fsr1h	equ	0xFE2
  5637                           fsr1l	equ	0xFE1
  5638                           indf2	equ	0xFDF
  5639                           fsr2h	equ	0xFDA
  5640                           fsr2l	equ	0xFD9
  5641                           status	equ	0xFD8
  5642                           
  5643 ;; *************** function ___ftdiv *****************
  5644 ;; Defined at:
  5645 ;;		line 54 in file "/opt/microchip/xc8/v1.42/sources/common/ftdiv.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  f1              3   40[COMRAM] float 
  5648 ;;  f2              3   43[COMRAM] float 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  f3              3   50[COMRAM] float 
  5651 ;;  sign            1   54[COMRAM] unsigned char 
  5652 ;;  exp             1   53[COMRAM] unsigned char 
  5653 ;;  cntr            1   49[COMRAM] unsigned char 
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  3   40[COMRAM] float 
  5656 ;; Registers used:
  5657 ;;		wreg, status,2, status,0, cstack
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5663 ;;      Params:         6       0       0       0
  5664 ;;      Locals:         6       0       0       0
  5665 ;;      Temps:          3       0       0       0
  5666 ;;      Totals:        15       0       0       0
  5667 ;;Total ram usage:       15 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:   11
  5670 ;; This function calls:
  5671 ;;		___ftpack
  5672 ;; This function is called by:
  5673 ;;		_Check_List_Moteur_1
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text29
  5678  0016A6                     __ptext29:
  5679                           	opt stack 0
  5680  0016A6                     ___ftdiv:
  5681                           	opt stack 16
  5682                           
  5683                           ;incstack = 0
  5684  0016A6  C02B  F02F         	movff	___ftdiv@f1+2,??___ftdiv
  5685  0016AA  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5686  0016AC  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5687  0016AE  342A               	rlcf	___ftdiv@f1+1,w,c
  5688  0016B0  362F               	rlcf	??___ftdiv& (0+255),f,c
  5689  0016B2  E301               	bnc	u6401
  5690  0016B4  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5691  0016B6                     u6401:
  5692  0016B6  502F               	movf	??___ftdiv,w,c
  5693  0016B8  6E36               	movwf	___ftdiv@exp,c
  5694  0016BA  5036               	movf	___ftdiv@exp,w,c
  5695  0016BC  E104               	bnz	l8210
  5696  0016BE  6A29               	clrf	?___ftdiv,c
  5697  0016C0  6A2A               	clrf	?___ftdiv+1,c
  5698  0016C2  6A2B               	clrf	?___ftdiv+2,c
  5699  0016C4  0012               	return	
  5700  0016C6                     l8210:
  5701  0016C6  C02E  F02F         	movff	___ftdiv@f2+2,??___ftdiv
  5702  0016CA  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5703  0016CC  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5704  0016CE  342D               	rlcf	___ftdiv@f2+1,w,c
  5705  0016D0  362F               	rlcf	??___ftdiv& (0+255),f,c
  5706  0016D2  E301               	bnc	u6421
  5707  0016D4  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5708  0016D6                     u6421:
  5709  0016D6  502F               	movf	??___ftdiv,w,c
  5710  0016D8  6E37               	movwf	___ftdiv@sign,c
  5711  0016DA  5037               	movf	___ftdiv@sign,w,c
  5712  0016DC  E104               	bnz	l2033
  5713  0016DE  6A29               	clrf	?___ftdiv,c
  5714  0016E0  6A2A               	clrf	?___ftdiv+1,c
  5715  0016E2  6A2B               	clrf	?___ftdiv+2,c
  5716  0016E4  0012               	return	
  5717  0016E6                     l2033:
  5718  0016E6  6A33               	clrf	___ftdiv@f3,c
  5719  0016E8  6A34               	clrf	___ftdiv@f3+1,c
  5720  0016EA  6A35               	clrf	___ftdiv@f3+2,c
  5721  0016EC  5037               	movf	___ftdiv@sign,w,c
  5722  0016EE  0F89               	addlw	137
  5723  0016F0  5E36               	subwf	___ftdiv@exp,f,c
  5724  0016F2  C02B  F037         	movff	___ftdiv@f1+2,___ftdiv@sign
  5725  0016F6  502E               	movf	___ftdiv@f2+2,w,c
  5726  0016F8  1A37               	xorwf	___ftdiv@sign,f,c
  5727  0016FA  0E80               	movlw	128
  5728  0016FC  1637               	andwf	___ftdiv@sign,f,c
  5729  0016FE  8E2A               	bsf	___ftdiv@f1+1,7,c
  5730  001700  6A2B               	clrf	___ftdiv@f1+2,c
  5731  001702  8E2D               	bsf	___ftdiv@f2+1,7,c
  5732  001704  6A2E               	clrf	___ftdiv@f2+2,c
  5733  001706  0E18               	movlw	24
  5734  001708  6E32               	movwf	___ftdiv@cntr,c
  5735  00170A                     l8228:
  5736  00170A  90D8               	bcf	status,0,c
  5737  00170C  3633               	rlcf	___ftdiv@f3,f,c
  5738  00170E  3634               	rlcf	___ftdiv@f3+1,f,c
  5739  001710  3635               	rlcf	___ftdiv@f3+2,f,c
  5740  001712  502C               	movf	___ftdiv@f2,w,c
  5741  001714  5C29               	subwf	___ftdiv@f1,w,c
  5742  001716  502D               	movf	___ftdiv@f2+1,w,c
  5743  001718  582A               	subwfb	___ftdiv@f1+1,w,c
  5744  00171A  502E               	movf	___ftdiv@f2+2,w,c
  5745  00171C  582B               	subwfb	___ftdiv@f1+2,w,c
  5746  00171E  E307               	bnc	l2035
  5747  001720  502C               	movf	___ftdiv@f2,w,c
  5748  001722  5E29               	subwf	___ftdiv@f1,f,c
  5749  001724  502D               	movf	___ftdiv@f2+1,w,c
  5750  001726  5A2A               	subwfb	___ftdiv@f1+1,f,c
  5751  001728  502E               	movf	___ftdiv@f2+2,w,c
  5752  00172A  5A2B               	subwfb	___ftdiv@f1+2,f,c
  5753  00172C  8033               	bsf	___ftdiv@f3,0,c
  5754  00172E                     l2035:
  5755  00172E  90D8               	bcf	status,0,c
  5756  001730  3629               	rlcf	___ftdiv@f1,f,c
  5757  001732  362A               	rlcf	___ftdiv@f1+1,f,c
  5758  001734  362B               	rlcf	___ftdiv@f1+2,f,c
  5759  001736  2E32               	decfsz	___ftdiv@cntr,f,c
  5760  001738  D7E8               	goto	l8228
  5761  00173A  C033  F00F         	movff	___ftdiv@f3,___ftpack@arg
  5762  00173E  C034  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5763  001742  C035  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5764  001746  C036  F012         	movff	___ftdiv@exp,___ftpack@exp
  5765  00174A  C037  F013         	movff	___ftdiv@sign,___ftpack@sign
  5766  00174E  EC58  F00D         	call	___ftpack	;wreg free
  5767  001752  C00F  F029         	movff	?___ftpack,?___ftdiv
  5768  001756  C010  F02A         	movff	?___ftpack+1,?___ftdiv+1
  5769  00175A  C011  F02B         	movff	?___ftpack+2,?___ftdiv+2
  5770  00175E  0012               	return		;funcret
  5771  001760                     __end_of___ftdiv:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           intcon2	equ	0xFF1
  5778                           intcon3	equ	0xFF0
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1h	equ	0xFE2
  5783                           fsr1l	equ	0xFE1
  5784                           indf2	equ	0xFDF
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function ___ftpack *****************
  5790 ;; Defined at:
  5791 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  arg             3   14[COMRAM] unsigned um
  5794 ;;  exp             1   17[COMRAM] unsigned char 
  5795 ;;  sign            1   18[COMRAM] unsigned char 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;		None
  5798 ;; Return value:  Size  Location     Type
  5799 ;;                  3   14[COMRAM] float 
  5800 ;; Registers used:
  5801 ;;		wreg, status,2, status,0
  5802 ;; Tracked objects:
  5803 ;;		On entry : 0/0
  5804 ;;		On exit  : 0/0
  5805 ;;		Unchanged: 0/0
  5806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5807 ;;      Params:         5       0       0       0
  5808 ;;      Locals:         0       0       0       0
  5809 ;;      Temps:          3       0       0       0
  5810 ;;      Totals:         8       0       0       0
  5811 ;;Total ram usage:        8 bytes
  5812 ;; Hardware stack levels used:    1
  5813 ;; Hardware stack levels required when called:   10
  5814 ;; This function calls:
  5815 ;;		Nothing
  5816 ;; This function is called by:
  5817 ;;		___ftdiv
  5818 ;;		___ftmul
  5819 ;;		___lbtoft
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           	psect	text30
  5824  001AB0                     __ptext30:
  5825                           	opt stack 0
  5826  001AB0                     ___ftpack:
  5827                           	opt stack 16
  5828                           
  5829                           ;incstack = 0
  5830  001AB0  5012               	movf	___ftpack@exp,w,c
  5831  001AB2  E004               	bz	l1965
  5832  001AB4  500F               	movf	___ftpack@arg,w,c
  5833  001AB6  1010               	iorwf	___ftpack@arg+1,w,c
  5834  001AB8  1011               	iorwf	___ftpack@arg+2,w,c
  5835  001ABA  E109               	bnz	l8158
  5836  001ABC                     l1965:
  5837  001ABC  6A0F               	clrf	?___ftpack,c
  5838  001ABE  6A10               	clrf	?___ftpack+1,c
  5839  001AC0  6A11               	clrf	?___ftpack+2,c
  5840  001AC2  0012               	return	
  5841  001AC4                     l8156:
  5842  001AC4  2A12               	incf	___ftpack@exp,f,c
  5843  001AC6  90D8               	bcf	status,0,c
  5844  001AC8  3211               	rrcf	___ftpack@arg+2,f,c
  5845  001ACA  3210               	rrcf	___ftpack@arg+1,f,c
  5846  001ACC  320F               	rrcf	___ftpack@arg,f,c
  5847  001ACE                     l8158:
  5848  001ACE  6A14               	clrf	??___ftpack& (0+255),c
  5849  001AD0  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5850  001AD2  0EFE               	movlw	254
  5851  001AD4  1411               	andwf	___ftpack@arg+2,w,c
  5852  001AD6  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5853  001AD8  5014               	movf	??___ftpack,w,c
  5854  001ADA  1015               	iorwf	??___ftpack+1,w,c
  5855  001ADC  1016               	iorwf	??___ftpack+2,w,c
  5856  001ADE  E00A               	bz	l8164
  5857  001AE0  D7F1               	goto	l8156
  5858  001AE2                     l8160:
  5859  001AE2  2A12               	incf	___ftpack@exp,f,c
  5860  001AE4  2A0F               	incf	___ftpack@arg,f,c
  5861  001AE6  0E00               	movlw	0
  5862  001AE8  2210               	addwfc	___ftpack@arg+1,f,c
  5863  001AEA  2211               	addwfc	___ftpack@arg+2,f,c
  5864  001AEC  90D8               	bcf	status,0,c
  5865  001AEE  3211               	rrcf	___ftpack@arg+2,f,c
  5866  001AF0  3210               	rrcf	___ftpack@arg+1,f,c
  5867  001AF2  320F               	rrcf	___ftpack@arg,f,c
  5868  001AF4                     l8164:
  5869  001AF4  6A14               	clrf	??___ftpack& (0+255),c
  5870  001AF6  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5871  001AF8  5011               	movf	___ftpack@arg+2,w,c
  5872  001AFA  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5873  001AFC  5014               	movf	??___ftpack,w,c
  5874  001AFE  1015               	iorwf	??___ftpack+1,w,c
  5875  001B00  1016               	iorwf	??___ftpack+2,w,c
  5876  001B02  E006               	bz	l8168
  5877  001B04  D7EE               	goto	l8160
  5878  001B06                     l8166:
  5879  001B06  0612               	decf	___ftpack@exp,f,c
  5880  001B08  90D8               	bcf	status,0,c
  5881  001B0A  360F               	rlcf	___ftpack@arg,f,c
  5882  001B0C  3610               	rlcf	___ftpack@arg+1,f,c
  5883  001B0E  3611               	rlcf	___ftpack@arg+2,f,c
  5884  001B10                     l8168:
  5885  001B10  BE10               	btfsc	___ftpack@arg+1,7,c
  5886  001B12  D003               	goto	l1977
  5887  001B14  0E02               	movlw	2
  5888  001B16  6012               	cpfslt	___ftpack@exp,c
  5889  001B18  D7F6               	goto	l8166
  5890  001B1A                     l1977:
  5891  001B1A  A012               	btfss	___ftpack@exp,0,c
  5892  001B1C  9E10               	bcf	___ftpack@arg+1,7,c
  5893  001B1E  90D8               	bcf	status,0,c
  5894  001B20  3212               	rrcf	___ftpack@exp,f,c
  5895  001B22  5012               	movf	___ftpack@exp,w,c
  5896  001B24  1211               	iorwf	___ftpack@arg+2,f,c
  5897  001B26  5013               	movf	___ftpack@sign,w,c
  5898  001B28  E001               	bz	l8182
  5899  001B2A  8E11               	bsf	___ftpack@arg+2,7,c
  5900  001B2C                     l8182:
  5901  001B2C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  5902  001B30  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  5903  001B34  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  5904  001B38  0012               	return		;funcret
  5905  001B3A                     __end_of___ftpack:
  5906                           	opt stack 0
  5907                           tblptru	equ	0xFF8
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           intcon2	equ	0xFF1
  5912                           intcon3	equ	0xFF0
  5913                           postinc0	equ	0xFEE
  5914                           wreg	equ	0xFE8
  5915                           postdec1	equ	0xFE5
  5916                           fsr1h	equ	0xFE2
  5917                           fsr1l	equ	0xFE1
  5918                           indf2	equ	0xFDF
  5919                           fsr2h	equ	0xFDA
  5920                           fsr2l	equ	0xFD9
  5921                           status	equ	0xFD8
  5922                           
  5923 ;; *************** function _Capteur_Capot_On *****************
  5924 ;; Defined at:
  5925 ;;		line 176 in file "interrupt.c"
  5926 ;; Parameters:    Size  Location     Type
  5927 ;;		None
  5928 ;; Auto vars:     Size  Location     Type
  5929 ;;		None
  5930 ;; Return value:  Size  Location     Type
  5931 ;;                  1    wreg      void 
  5932 ;; Registers used:
  5933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5934 ;; Tracked objects:
  5935 ;;		On entry : 3F/0
  5936 ;;		On exit  : 0/0
  5937 ;;		Unchanged: 0/0
  5938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5939 ;;      Params:         0       0       0       0
  5940 ;;      Locals:         0       0       0       0
  5941 ;;      Temps:          0       0       0       0
  5942 ;;      Totals:         0       0       0       0
  5943 ;;Total ram usage:        0 bytes
  5944 ;; Hardware stack levels used:    1
  5945 ;; Hardware stack levels required when called:   11
  5946 ;; This function calls:
  5947 ;;		_Etat_Update
  5948 ;; This function is called by:
  5949 ;;		_Mouvement_X
  5950 ;; This function uses a non-reentrant model
  5951 ;;
  5952                           
  5953                           	psect	text31
  5954  002630                     __ptext31:
  5955                           	opt stack 0
  5956  002630                     _Capteur_Capot_On:
  5957                           	opt stack 17
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  5961                           
  5962                           ;incstack = 0
  5963  002630  88F2               	bsf	intcon,4,c	;volatile
  5964                           
  5965                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  5966  002632  92F2               	bcf	intcon,1,c	;volatile
  5967                           
  5968                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  5969  002634  B682               	btfsc	3970,3,c	;volatile
  5970  002636  0012               	return	
  5971                           
  5972                           ; BSR set to: 0
  5973                           ;interrupt.c: 185: P4_busy = 0;
  5974  002638  6BAC               	clrf	_P4_busy& (0+255),b
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;interrupt.c: 186: Etat_Update(77);
  5978  00263A  0E4D               	movlw	77
  5979  00263C  EF18  F012         	goto	_Etat_Update
  5980  002640                     __end_of_Capteur_Capot_On:
  5981                           	opt stack 0
  5982                           tblptru	equ	0xFF8
  5983                           prodh	equ	0xFF4
  5984                           prodl	equ	0xFF3
  5985                           intcon	equ	0xFF2
  5986                           intcon2	equ	0xFF1
  5987                           intcon3	equ	0xFF0
  5988                           postinc0	equ	0xFEE
  5989                           wreg	equ	0xFE8
  5990                           postdec1	equ	0xFE5
  5991                           fsr1h	equ	0xFE2
  5992                           fsr1l	equ	0xFE1
  5993                           indf2	equ	0xFDF
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           
  5998 ;; *************** function _Capteur_Capot_Off *****************
  5999 ;; Defined at:
  6000 ;;		line 194 in file "interrupt.c"
  6001 ;; Parameters:    Size  Location     Type
  6002 ;;		None
  6003 ;; Auto vars:     Size  Location     Type
  6004 ;;		None
  6005 ;; Return value:  Size  Location     Type
  6006 ;;                  1    wreg      void 
  6007 ;; Registers used:
  6008 ;;		None
  6009 ;; Tracked objects:
  6010 ;;		On entry : 3F/0
  6011 ;;		On exit  : 3F/0
  6012 ;;		Unchanged: 3F/0
  6013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6014 ;;      Params:         0       0       0       0
  6015 ;;      Locals:         0       0       0       0
  6016 ;;      Temps:          0       0       0       0
  6017 ;;      Totals:         0       0       0       0
  6018 ;;Total ram usage:        0 bytes
  6019 ;; Hardware stack levels used:    1
  6020 ;; Hardware stack levels required when called:   10
  6021 ;; This function calls:
  6022 ;;		Nothing
  6023 ;; This function is called by:
  6024 ;;		_Mouvement_X
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text32
  6029  00272A                     __ptext32:
  6030                           	opt stack 0
  6031  00272A                     _Capteur_Capot_Off:
  6032                           	opt stack 18
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  6036                           
  6037                           ;incstack = 0
  6038  00272A  98F2               	bcf	intcon,4,c	;volatile
  6039                           
  6040                           ; BSR set to: 0
  6041  00272C  0012               	return		;funcret
  6042  00272E                     __end_of_Capteur_Capot_Off:
  6043                           	opt stack 0
  6044                           tblptru	equ	0xFF8
  6045                           prodh	equ	0xFF4
  6046                           prodl	equ	0xFF3
  6047                           intcon	equ	0xFF2
  6048                           intcon2	equ	0xFF1
  6049                           intcon3	equ	0xFF0
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           fsr2h	equ	0xFDA
  6057                           fsr2l	equ	0xFD9
  6058                           status	equ	0xFD8
  6059                           
  6060 ;; *************** function _Mouvement_Bequille *****************
  6061 ;; Defined at:
  6062 ;;		line 787 in file "action.c"
  6063 ;; Parameters:    Size  Location     Type
  6064 ;;  direction       1    wreg     unsigned char 
  6065 ;;  type_consign    1    7[BANK2 ] unsigned char 
  6066 ;;  option          1    8[BANK2 ] unsigned char 
  6067 ;; Auto vars:     Size  Location     Type
  6068 ;;  direction       1    9[BANK2 ] unsigned char 
  6069 ;;  index           2    0        unsigned int 
  6070 ;;  Option_Temps    1    0        unsigned char 
  6071 ;;  i_max           1    0        unsigned char 
  6072 ;;  i_min           1    0        unsigned char 
  6073 ;;  i               1    0        unsigned char 
  6074 ;; Return value:  Size  Location     Type
  6075 ;;                  1    wreg      void 
  6076 ;; Registers used:
  6077 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6078 ;; Tracked objects:
  6079 ;;		On entry : 3F/0
  6080 ;;		On exit  : 3F/0
  6081 ;;		Unchanged: 0/0
  6082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6083 ;;      Params:         0       0       0       2
  6084 ;;      Locals:         0       0       0       1
  6085 ;;      Temps:          0       0       0       0
  6086 ;;      Totals:         0       0       0       3
  6087 ;;Total ram usage:        3 bytes
  6088 ;; Hardware stack levels used:    1
  6089 ;; Hardware stack levels required when called:   18
  6090 ;; This function calls:
  6091 ;;		_Check_List_Moteur_Bequille
  6092 ;;		_Coupe_Moteur
  6093 ;;		_Detection_Pion_Off
  6094 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  6095 ;;		_Init_Moteur_Bequille
  6096 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  6097 ;;		_TIMER2_On
  6098 ;;		_delay_s
  6099 ;;		_u_Init_PWM
  6100 ;; This function is called by:
  6101 ;;		_Cycle
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text33
  6106  00197A                     __ptext33:
  6107                           	opt stack 0
  6108  00197A                     _Mouvement_Bequille:
  6109                           	opt stack 11
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;incstack = 0
  6113                           ;Mouvement_Bequille@direction stored from wreg
  6114  00197A  0102               	movlb	2	; () banked
  6115  00197C  6F89               	movwf	Mouvement_Bequille@direction& (0+255),b
  6116                           
  6117                           ;action.c: 788: unsigned char i, i_min, i_max;
  6118                           ;action.c: 789: unsigned char Option_Temps_S;
  6119                           ;action.c: 796: Surveillance_Consommation_Moteur_2_Desactiver();
  6120  00197E  EC40  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;action.c: 798: Detection_Pion_Off();
  6124  001982  EC71  F013         	call	_Detection_Pion_Off	;wreg free
  6125                           
  6126                           ;action.c: 801: nb_s_bequille = option;
  6127  001986  C288  F0A2         	movff	Mouvement_Bequille@option,_nb_s_bequille
  6128                           
  6129                           ;action.c: 804: consigne = 10;
  6130  00198A  0E0A               	movlw	10
  6131  00198C  0100               	movlb	0	; () banked
  6132  00198E  6F98               	movwf	_consigne& (0+255),b	;volatile
  6133                           
  6134                           ; BSR set to: 0
  6135                           ;action.c: 815: index = 0;
  6136  001990  ECD8  F00E         	call	_u_Init_PWM	;wreg free
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;action.c: 816: TMR2 = 0;
  6140  001994  6ACC               	clrf	4044,c	;volatile
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;action.c: 817: TMR2IF = 0;
  6144  001996  929E               	bcf	3998,1,c	;volatile
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;action.c: 822: LATEbits.LATE2 = 1;
  6148  001998  848D               	bsf	3981,2,c	;volatile
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;action.c: 827: moteur_indice = 3;
  6152  00199A  0E03               	movlw	3
  6153  00199C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;action.c: 828: Init_ADC_Single_Shoot_I_Moteur_2();
  6157  00199E  EC74  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;action.c: 831: if (direction == 0) {
  6161  0019A2  0102               	movlb	2	; () banked
  6162  0019A4  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6163  0019A6  E103               	bnz	l999
  6164                           
  6165                           ; BSR set to: 2
  6166                           ;action.c: 832: LATD7 = 0;LATD6 = 1;
  6167  0019A8  9E8C               	bcf	3980,7,c	;volatile
  6168  0019AA  8C8C               	bsf	3980,6,c	;volatile
  6169                           
  6170                           ;action.c: 833: } else {
  6171  0019AC  D002               	goto	l8774
  6172  0019AE                     l999:
  6173                           
  6174                           ; BSR set to: 2
  6175                           ;action.c: 834: LATD6 = 0;LATD7 = 1;
  6176  0019AE  9C8C               	bcf	3980,6,c	;volatile
  6177  0019B0  8E8C               	bsf	3980,7,c	;volatile
  6178  0019B2                     l8774:
  6179                           
  6180                           ; BSR set to: 2
  6181                           ;action.c: 835: }
  6182                           ;action.c: 836: PDC1L = 1 << 2;
  6183  0019B2  0E04               	movlw	4
  6184  0019B4  6E77               	movwf	3959,c	;volatile
  6185                           
  6186                           ; BSR set to: 2
  6187                           ;action.c: 837: PDC1H = 0;
  6188  0019B6  6A76               	clrf	3958,c	;volatile
  6189                           
  6190                           ;action.c: 838: OVDCOND = 0b00000100;
  6191  0019B8  0E04               	movlw	4
  6192  0019BA  6E6B               	movwf	3947,c	;volatile
  6193                           
  6194                           ; BSR set to: 2
  6195                           ;action.c: 839: LATCbits.LATC1 = 1;
  6196  0019BC  828B               	bsf	3979,1,c	;volatile
  6197                           
  6198                           ;action.c: 841: erreur = 1;
  6199  0019BE  0100               	movlb	0	; () banked
  6200  0019C0  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  6201  0019C2  0E01               	movlw	1
  6202  0019C4  6F84               	movwf	_erreur& (0+255),b	;volatile
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;action.c: 842: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  6206  0019C6  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6207  0019C8  46E8               	rlncf	wreg,f,c
  6208  0019CA  0BFC               	andlw	252
  6209  0019CC  6E77               	movwf	3959,c	;volatile
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;action.c: 843: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  6213  0019CE  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6214  0019D0  46E8               	rlncf	wreg,f,c
  6215  0019D2  0B03               	andlw	3
  6216  0019D4  6E76               	movwf	3958,c	;volatile
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;action.c: 846: erreur_accumulator = 0;
  6220  0019D6  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  6221  0019D8  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;action.c: 849: Nouvelle_Valeur_ADC = 0;
  6225  0019DA  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;action.c: 853: PIE3bits.PTIE = 0;
  6229  0019DC  98A3               	bcf	4003,4,c	;volatile
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;action.c: 854: PIE1bits.ADIE = 1;
  6233  0019DE  8C9D               	bsf	3997,6,c	;volatile
  6234                           
  6235                           ; BSR set to: 0
  6236                           ;action.c: 855: PIE1bits.ADIE = 1;
  6237  0019E0  8C9D               	bsf	3997,6,c	;volatile
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;action.c: 857: PEIE = 1;
  6241  0019E2  8CF2               	bsf	intcon,6,c	;volatile
  6242                           
  6243                           ; BSR set to: 0
  6244                           ;action.c: 858: GIE = 1;
  6245  0019E4  8EF2               	bsf	intcon,7,c	;volatile
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;action.c: 859: TIMER2_On();
  6249  0019E6  EC81  F013         	call	_TIMER2_On	;wreg free
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;action.c: 860: ADIF = 0;
  6253  0019EA  9C9E               	bcf	3998,6,c	;volatile
  6254                           
  6255                           ;action.c: 877: Init_Moteur_Bequille();
  6256  0019EC  EC20  F013         	call	_Init_Moteur_Bequille	;wreg free
  6257  0019F0                     l8802:
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;action.c: 881: Check_List_Moteur_Bequille();
  6261  0019F0  EC7D  F010         	call	_Check_List_Moteur_Bequille	;wreg free
  6262                           
  6263                           ;action.c: 882: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  6264  0019F4  0102               	movlb	2	; () banked
  6265  0019F6  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6266  0019F8  E104               	bnz	l8808
  6267                           
  6268                           ; BSR set to: 2
  6269  0019FA  0E08               	movlw	8
  6270  0019FC  0100               	movlb	0	; () banked
  6271  0019FE  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6272  001A00  E0F7               	bz	l8802
  6273  001A02                     l8808:
  6274  001A02  0102               	movlb	2	; () banked
  6275  001A04  0589               	decf	Mouvement_Bequille@direction& (0+255),w,b
  6276  001A06  E104               	bnz	l1006
  6277                           
  6278                           ; BSR set to: 2
  6279  001A08  0E09               	movlw	9
  6280  001A0A  0100               	movlb	0	; () banked
  6281  001A0C  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6282  001A0E  E0F0               	bz	l8802
  6283  001A10                     l1006:
  6284                           
  6285                           ;action.c: 886: PIE3bits.PTIE = 0;
  6286  001A10  98A3               	bcf	4003,4,c	;volatile
  6287                           
  6288                           ;action.c: 887: PIE1bits.ADIE = 0;
  6289  001A12  9C9D               	bcf	3997,6,c	;volatile
  6290                           
  6291                           ;action.c: 893: LATEbits.LATE2 = 0;
  6292  001A14  948D               	bcf	3981,2,c	;volatile
  6293                           
  6294                           ;action.c: 898: Surveillance_Consommation_Moteur_2_Desactiver();
  6295  001A16  EC40  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;action.c: 900: Coupe_Moteur();
  6299  001A1A  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  6300                           
  6301                           ;action.c: 901: delay_s(1);
  6302  001A1E  0E01               	movlw	1
  6303  001A20  EF8E  F011         	goto	_delay_s
  6304  001A24                     __end_of_Mouvement_Bequille:
  6305                           	opt stack 0
  6306                           tblptru	equ	0xFF8
  6307                           prodh	equ	0xFF4
  6308                           prodl	equ	0xFF3
  6309                           intcon	equ	0xFF2
  6310                           intcon2	equ	0xFF1
  6311                           intcon3	equ	0xFF0
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           postdec1	equ	0xFE5
  6315                           fsr1h	equ	0xFE2
  6316                           fsr1l	equ	0xFE1
  6317                           indf2	equ	0xFDF
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _u_Init_PWM *****************
  6323 ;; Defined at:
  6324 ;;		line 56 in file "pwm.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 3F/0
  6335 ;;		On exit  : 3F/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6338 ;;      Params:         0       0       0       0
  6339 ;;      Locals:         0       0       0       0
  6340 ;;      Temps:          0       0       0       0
  6341 ;;      Totals:         0       0       0       0
  6342 ;;Total ram usage:        0 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:   10
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_Mouvement_Bequille
  6349 ;;		_Mouvement_Z
  6350 ;;		_Mouvement_X
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           	psect	text34
  6355  001DB0                     __ptext34:
  6356                           	opt stack 0
  6357  001DB0                     _u_Init_PWM:
  6358                           	opt stack 18
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;incstack = 0
  6365  001DB0  9E7E               	bcf	3966,7,c	;volatile
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;pwm.c: 64: PDC0L = 1 << 2;
  6369  001DB2  0E04               	movlw	4
  6370  001DB4  6E79               	movwf	3961,c	;volatile
  6371                           
  6372                           ; BSR set to: 0
  6373                           ;pwm.c: 65: PDC0H = 0;
  6374  001DB6  6A78               	clrf	3960,c	;volatile
  6375                           
  6376                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  6377  001DB8  0E1F               	movlw	31
  6378  001DBA  6E7B               	movwf	3963,c	;volatile
  6379                           
  6380                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  6381  001DBC  0E3F               	movlw	63
  6382  001DBE  6E7B               	movwf	3963,c	;volatile
  6383                           
  6384                           ; BSR set to: 0
  6385                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  6386  001DC0  287B               	incf	3963,w,c	;volatile
  6387  001DC2  6F8D               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  6388                           
  6389                           ; BSR set to: 0
  6390                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  6391  001DC4  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  6392  001DC6  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;pwm.c: 87: PTPERH = 0;
  6396  001DC8  6A7A               	clrf	3962,c	;volatile
  6397                           
  6398                           ; BSR set to: 0
  6399                           ;pwm.c: 94: PTCON0 = 0b00000011;
  6400  001DCA  0E03               	movlw	3
  6401  001DCC  6E7F               	movwf	3967,c	;volatile
  6402                           
  6403                           ; BSR set to: 0
  6404                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  6405  001DCE  0E0F               	movlw	-241
  6406  001DD0  167F               	andwf	3967,f,c	;volatile
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  6410  001DD2  0EF3               	movlw	-13
  6411  001DD4  167F               	andwf	3967,f,c	;volatile
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  6415  001DD6  507F               	movf	3967,w,c	;volatile
  6416  001DD8  0BFC               	andlw	-4
  6417  001DDA  0902               	iorlw	2
  6418  001DDC  6E7F               	movwf	3967,c	;volatile
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;pwm.c: 116: PTCON1 = 0b10000000;
  6422  001DDE  0E80               	movlw	128
  6423  001DE0  6E7E               	movwf	3966,c	;volatile
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  6427  001DE2  506F               	movf	3951,w,c	;volatile
  6428  001DE4  0B8F               	andlw	-113
  6429  001DE6  0910               	iorlw	16
  6430  001DE8  6E6F               	movwf	3951,c	;volatile
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  6434  001DEA  0E0F               	movlw	15
  6435  001DEC  126F               	iorwf	3951,f,c	;volatile
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  6439  001DEE  0E3F               	movlw	63
  6440  001DF0  6E6F               	movwf	3951,c	;volatile
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  6444  001DF2  6A6E               	clrf	3950,c	;volatile
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  6448  001DF4  0E01               	movlw	1
  6449  001DF6  6E6E               	movwf	3950,c	;volatile
  6450                           
  6451                           ; BSR set to: 0
  6452                           ;pwm.c: 155: DTCON = 0b00000000;
  6453  001DF8  6A6D               	clrf	3949,c	;volatile
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;pwm.c: 156: OVDCOND = 0b00000101;
  6457  001DFA  0E05               	movlw	5
  6458  001DFC  6E6B               	movwf	3947,c	;volatile
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;pwm.c: 158: OVDCONS = 0b00000000;
  6462  001DFE  6A6A               	clrf	3946,c	;volatile
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;pwm.c: 164: SEVTDIR = 0;
  6466  001E00  966E               	bcf	3950,3,c	;volatile
  6467                           
  6468                           ; BSR set to: 0
  6469                           ;pwm.c: 166: SEVTCMPH = 0;
  6470  001E02  6A70               	clrf	3952,c	;volatile
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;pwm.c: 167: SEVTCMPL = 10;
  6474  001E04  0E0A               	movlw	10
  6475  001E06  6E71               	movwf	3953,c	;volatile
  6476                           
  6477                           ; BSR set to: 0
  6478  001E08  0C0A               	retlw	10	;funcret
  6479  001E0A                     __end_of_u_Init_PWM:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           prodh	equ	0xFF4
  6483                           prodl	equ	0xFF3
  6484                           intcon	equ	0xFF2
  6485                           intcon2	equ	0xFF1
  6486                           intcon3	equ	0xFF0
  6487                           postinc0	equ	0xFEE
  6488                           wreg	equ	0xFE8
  6489                           postdec1	equ	0xFE5
  6490                           fsr1h	equ	0xFE2
  6491                           fsr1l	equ	0xFE1
  6492                           indf2	equ	0xFDF
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _delay_s *****************
  6498 ;; Defined at:
  6499 ;;		line 91 in file "horloge.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  delay_time      1    wreg     unsigned char 
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;  delay_time      1   17[BANK0 ] unsigned char 
  6504 ;;  Timer_0_Etat    1   18[BANK0 ] unsigned char 
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  1    wreg      void 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 3F/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6514 ;;      Params:         0       0       0       0
  6515 ;;      Locals:         0       2       0       0
  6516 ;;      Temps:          0       0       0       0
  6517 ;;      Totals:         0       2       0       0
  6518 ;;Total ram usage:        2 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; Hardware stack levels required when called:   17
  6521 ;; This function calls:
  6522 ;;		_EUSART1_Check_Buffer
  6523 ;;		_TIMER0_Off
  6524 ;;		_TIMER0_On
  6525 ;; This function is called by:
  6526 ;;		_Cycle
  6527 ;;		_Mouvement_Bequille
  6528 ;;		_Mouvement_Z
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text35
  6533  00231C                     __ptext35:
  6534                           	opt stack 0
  6535  00231C                     _delay_s:
  6536                           	opt stack 12
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;incstack = 0
  6540                           ;delay_s@delay_time stored from wreg
  6541  00231C  0100               	movlb	0	; () banked
  6542  00231E  6FFE               	movwf	delay_s@delay_time& (0+255),b
  6543                           
  6544                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  6545                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  6546  002320  C088  F0FF         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  6547                           
  6548                           ;horloge.c: 95: delay_s_counter = 0;
  6549  002324  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  6550                           
  6551                           ; BSR set to: 0
  6552                           ;horloge.c: 98: TIMER0_On();
  6553  002326  EC7B  F012         	call	_TIMER0_On	;wreg free
  6554                           
  6555                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  6556  00232A  D002               	goto	l8366
  6557  00232C                     l8364:
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;horloge.c: 101: EUSART1_Check_Buffer();
  6561  00232C  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  6562  002330                     l8366:
  6563  002330  0100               	movlb	0	; () banked
  6564  002332  51FE               	movf	delay_s@delay_time& (0+255),w,b
  6565  002334  5D8C               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  6566  002336  E3FA               	bnc	l8364
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;horloge.c: 104: }
  6570                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  6571  002338  51FF               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  6572  00233A  B4D8               	btfsc	status,2,c
  6573                           
  6574                           ; BSR set to: 0
  6575  00233C  EC61  F013         	call	_TIMER0_Off	;wreg free
  6576                           
  6577                           ; BSR set to: 0
  6578  002340  0012               	return		;funcret
  6579  002342                     __end_of_delay_s:
  6580                           	opt stack 0
  6581                           tblptru	equ	0xFF8
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           intcon2	equ	0xFF1
  6586                           intcon3	equ	0xFF0
  6587                           postinc0	equ	0xFEE
  6588                           wreg	equ	0xFE8
  6589                           postdec1	equ	0xFE5
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function _TIMER0_Off *****************
  6598 ;; Defined at:
  6599 ;;		line 111 in file "timer.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;                  1    wreg      void 
  6606 ;; Registers used:
  6607 ;;		None
  6608 ;; Tracked objects:
  6609 ;;		On entry : 3D/0
  6610 ;;		On exit  : 3F/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6613 ;;      Params:         0       0       0       0
  6614 ;;      Locals:         0       0       0       0
  6615 ;;      Temps:          0       0       0       0
  6616 ;;      Totals:         0       0       0       0
  6617 ;;Total ram usage:        0 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:   10
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_Stop_Moteur_1
  6624 ;;		_delay_s
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           	psect	text36
  6629  0026C2                     __ptext36:
  6630                           	opt stack 0
  6631  0026C2                     _TIMER0_Off:
  6632                           	opt stack 18
  6633                           
  6634                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;incstack = 0
  6638  0026C2  9ED5               	bcf	4053,7,c	;volatile
  6639                           
  6640                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  6641  0026C4  9AF2               	bcf	intcon,5,c	;volatile
  6642                           
  6643                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  6644  0026C6  94F2               	bcf	intcon,2,c	;volatile
  6645                           
  6646                           ;timer.c: 117: TIMER0_Etat = 0;
  6647  0026C8  0100               	movlb	0	; () banked
  6648  0026CA  6B88               	clrf	_TIMER0_Etat& (0+255),b
  6649                           
  6650                           ; BSR set to: 0
  6651  0026CC  0012               	return		;funcret
  6652  0026CE                     __end_of_TIMER0_Off:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           intcon2	equ	0xFF1
  6659                           intcon3	equ	0xFF0
  6660                           postinc0	equ	0xFEE
  6661                           wreg	equ	0xFE8
  6662                           postdec1	equ	0xFE5
  6663                           fsr1h	equ	0xFE2
  6664                           fsr1l	equ	0xFE1
  6665                           indf2	equ	0xFDF
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function _TIMER2_On *****************
  6671 ;; Defined at:
  6672 ;;		line 158 in file "timer.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;		None
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		None
  6681 ;; Tracked objects:
  6682 ;;		On entry : 3F/0
  6683 ;;		On exit  : 3F/0
  6684 ;;		Unchanged: 3F/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6686 ;;      Params:         0       0       0       0
  6687 ;;      Locals:         0       0       0       0
  6688 ;;      Temps:          0       0       0       0
  6689 ;;      Totals:         0       0       0       0
  6690 ;;Total ram usage:        0 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:   10
  6693 ;; This function calls:
  6694 ;;		Nothing
  6695 ;; This function is called by:
  6696 ;;		_Mouvement_Bequille
  6697 ;;		_Mouvement_Z
  6698 ;;		_Mouvement_X
  6699 ;; This function uses a non-reentrant model
  6700 ;;
  6701                           
  6702                           	psect	text37
  6703  002702                     __ptext37:
  6704                           	opt stack 0
  6705  002702                     _TIMER2_On:
  6706                           	opt stack 18
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;incstack = 0
  6713  002702  829D               	bsf	3997,1,c	;volatile
  6714                           
  6715                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  6716  002704  929E               	bcf	3998,1,c	;volatile
  6717                           
  6718                           ; BSR set to: 0
  6719  002706  0012               	return		;funcret
  6720  002708                     __end_of_TIMER2_On:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           prodh	equ	0xFF4
  6724                           prodl	equ	0xFF3
  6725                           intcon	equ	0xFF2
  6726                           intcon2	equ	0xFF1
  6727                           intcon3	equ	0xFF0
  6728                           postinc0	equ	0xFEE
  6729                           wreg	equ	0xFE8
  6730                           postdec1	equ	0xFE5
  6731                           fsr1h	equ	0xFE2
  6732                           fsr1l	equ	0xFE1
  6733                           indf2	equ	0xFDF
  6734                           fsr2h	equ	0xFDA
  6735                           fsr2l	equ	0xFD9
  6736                           status	equ	0xFD8
  6737                           
  6738 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  6739 ;; Defined at:
  6740 ;;		line 876 in file "interrupt.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;		None
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;		None
  6745 ;; Return value:  Size  Location     Type
  6746 ;;                  1    wreg      void 
  6747 ;; Registers used:
  6748 ;;		wreg, status,2
  6749 ;; Tracked objects:
  6750 ;;		On entry : 0/2
  6751 ;;		On exit  : 3F/0
  6752 ;;		Unchanged: 0/0
  6753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6754 ;;      Params:         0       0       0       0
  6755 ;;      Locals:         0       0       0       0
  6756 ;;      Temps:          0       0       0       0
  6757 ;;      Totals:         0       0       0       0
  6758 ;;Total ram usage:        0 bytes
  6759 ;; Hardware stack levels used:    1
  6760 ;; Hardware stack levels required when called:   10
  6761 ;; This function calls:
  6762 ;;		Nothing
  6763 ;; This function is called by:
  6764 ;;		_Mouvement_Bequille
  6765 ;;		_Mouvement_Z
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text38
  6770  002680                     __ptext38:
  6771                           	opt stack 0
  6772  002680                     _Surveillance_Consommation_Moteur_2_Desactiver:
  6773                           	opt stack 18
  6774                           
  6775                           ;interrupt.c: 877: if (Surveillance_Consommation_Moteur_2 != 0) {
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;incstack = 0
  6779  002680  0100               	movlb	0	; () banked
  6780  002682  518A               	movf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
  6781  002684  B4D8               	btfsc	status,2,c
  6782  002686  0012               	return	
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;interrupt.c: 878: Surveillance_Consommation_Moteur_2 = 0;
  6786  002688  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  6787                           
  6788                           ;interrupt.c: 879: INTCON3bits.INT2IE = 0;
  6789  00268A  98F0               	bcf	intcon3,4,c	;volatile
  6790                           
  6791                           ; BSR set to: 0
  6792  00268C  0012               	return		;funcret
  6793  00268E                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  6794                           	opt stack 0
  6795                           tblptru	equ	0xFF8
  6796                           prodh	equ	0xFF4
  6797                           prodl	equ	0xFF3
  6798                           intcon	equ	0xFF2
  6799                           intcon2	equ	0xFF1
  6800                           intcon3	equ	0xFF0
  6801                           postinc0	equ	0xFEE
  6802                           wreg	equ	0xFE8
  6803                           postdec1	equ	0xFE5
  6804                           fsr1h	equ	0xFE2
  6805                           fsr1l	equ	0xFE1
  6806                           indf2	equ	0xFDF
  6807                           fsr2h	equ	0xFDA
  6808                           fsr2l	equ	0xFD9
  6809                           status	equ	0xFD8
  6810                           
  6811 ;; *************** function _Init_Moteur_Bequille *****************
  6812 ;; Defined at:
  6813 ;;		line 213 in file "action.c"
  6814 ;; Parameters:    Size  Location     Type
  6815 ;;		None
  6816 ;; Auto vars:     Size  Location     Type
  6817 ;;		None
  6818 ;; Return value:  Size  Location     Type
  6819 ;;                  1    wreg      void 
  6820 ;; Registers used:
  6821 ;;		wreg, status,2, cstack
  6822 ;; Tracked objects:
  6823 ;;		On entry : 3F/0
  6824 ;;		On exit  : 3F/0
  6825 ;;		Unchanged: 0/0
  6826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6827 ;;      Params:         0       0       0       0
  6828 ;;      Locals:         0       0       0       0
  6829 ;;      Temps:          0       0       0       0
  6830 ;;      Totals:         0       0       0       0
  6831 ;;Total ram usage:        0 bytes
  6832 ;; Hardware stack levels used:    1
  6833 ;; Hardware stack levels required when called:   11
  6834 ;; This function calls:
  6835 ;;		_TIMER0_On
  6836 ;; This function is called by:
  6837 ;;		_Mouvement_Bequille
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text39
  6842  002640                     __ptext39:
  6843                           	opt stack 0
  6844  002640                     _Init_Moteur_Bequille:
  6845                           	opt stack 17
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;action.c: 218: nb_s_fonctionnement = 0;
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;incstack = 0
  6852  002640  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  6853                           
  6854                           ;action.c: 219: nb_Pion = 0;
  6855  002642  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  6856                           
  6857                           ;action.c: 220: nb_100ms_Timer_5 = 0;
  6858  002644  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;action.c: 221: TIMER0_On();
  6862  002646  EC7B  F012         	call	_TIMER0_On	;wreg free
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;action.c: 223: INTCON3bits.INT2IE = 1;
  6866  00264A  88F0               	bsf	intcon3,4,c	;volatile
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;action.c: 224: Compteur_IRQ_I_Moteur_2 = 0;
  6870  00264C  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6871                           
  6872                           ; BSR set to: 0
  6873  00264E  0012               	return		;funcret
  6874  002650                     __end_of_Init_Moteur_Bequille:
  6875                           	opt stack 0
  6876                           tblptru	equ	0xFF8
  6877                           prodh	equ	0xFF4
  6878                           prodl	equ	0xFF3
  6879                           intcon	equ	0xFF2
  6880                           intcon2	equ	0xFF1
  6881                           intcon3	equ	0xFF0
  6882                           postinc0	equ	0xFEE
  6883                           wreg	equ	0xFE8
  6884                           postdec1	equ	0xFE5
  6885                           fsr1h	equ	0xFE2
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _TIMER0_On *****************
  6893 ;; Defined at:
  6894 ;;		line 87 in file "timer.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2
  6903 ;; Tracked objects:
  6904 ;;		On entry : 3F/0
  6905 ;;		On exit  : 3F/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6908 ;;      Params:         0       0       0       0
  6909 ;;      Locals:         0       0       0       0
  6910 ;;      Temps:          0       0       0       0
  6911 ;;      Totals:         0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:   10
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_Init_Moteur_1
  6919 ;;		_Init_Moteur_2
  6920 ;;		_Init_Moteur_Bequille
  6921 ;;		_delay_s
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text40
  6926  0024F6                     __ptext40:
  6927                           	opt stack 0
  6928  0024F6                     _TIMER0_On:
  6929                           	opt stack 18
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;timer.c: 88: TMR0H=0;
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;incstack = 0
  6936  0024F6  6AD7               	clrf	4055,c	;volatile
  6937                           
  6938                           ;timer.c: 89: TMR0L=0;
  6939  0024F8  6AD6               	clrf	4054,c	;volatile
  6940                           
  6941                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6942  0024FA  BED5               	btfsc	4053,7,c	;volatile
  6943  0024FC  D004               	goto	l8202
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6947  0024FE  8AF2               	bsf	intcon,5,c	;volatile
  6948                           
  6949                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6950  002500  94F2               	bcf	intcon,2,c	;volatile
  6951                           
  6952                           ;timer.c: 94: LATC5=1;
  6953  002502  8A8B               	bsf	3979,5,c	;volatile
  6954                           
  6955                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  6956  002504  8ED5               	bsf	4053,7,c	;volatile
  6957  002506                     l8202:
  6958                           
  6959                           ; BSR set to: 0
  6960                           ;timer.c: 97: }
  6961                           ;timer.c: 98: TIMER0_Etat = 1;
  6962  002506  0E01               	movlw	1
  6963  002508  6F88               	movwf	_TIMER0_Etat& (0+255),b
  6964                           
  6965                           ; BSR set to: 0
  6966  00250A  0C01               	retlw	1	;funcret
  6967  00250C                     __end_of_TIMER0_On:
  6968                           	opt stack 0
  6969                           tblptru	equ	0xFF8
  6970                           prodh	equ	0xFF4
  6971                           prodl	equ	0xFF3
  6972                           intcon	equ	0xFF2
  6973                           intcon2	equ	0xFF1
  6974                           intcon3	equ	0xFF0
  6975                           postinc0	equ	0xFEE
  6976                           wreg	equ	0xFE8
  6977                           postdec1	equ	0xFE5
  6978                           fsr1h	equ	0xFE2
  6979                           fsr1l	equ	0xFE1
  6980                           indf2	equ	0xFDF
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  6986 ;; Defined at:
  6987 ;;		line 192 in file "adc.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2
  6996 ;; Tracked objects:
  6997 ;;		On entry : 3F/0
  6998 ;;		On exit  : 3F/0
  6999 ;;		Unchanged: 3F/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7001 ;;      Params:         0       0       0       0
  7002 ;;      Locals:         0       0       0       0
  7003 ;;      Temps:          0       0       0       0
  7004 ;;      Totals:         0       0       0       0
  7005 ;;Total ram usage:        0 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:   10
  7008 ;; This function calls:
  7009 ;;		Nothing
  7010 ;; This function is called by:
  7011 ;;		_Mouvement_Bequille
  7012 ;;		_Mouvement_Z
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text41
  7017  001CE8                     __ptext41:
  7018                           	opt stack 0
  7019  001CE8                     _Init_ADC_Single_Shoot_I_Moteur_2:
  7020                           	opt stack 18
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;incstack = 0
  7027  001CE8  9AC2               	bcf	4034,5,c	;volatile
  7028                           
  7029                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  7030  001CEA  98C2               	bcf	4034,4,c	;volatile
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  7034  001CEC  50C2               	movf	4034,w,c	;volatile
  7035  001CEE  0BF3               	andlw	-13
  7036  001CF0  0904               	iorlw	4
  7037  001CF2  6EC2               	movwf	4034,c	;volatile
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;adc.c: 199: ADCON0bits.ADON = 0;
  7041  001CF4  90C2               	bcf	4034,0,c	;volatile
  7042                           
  7043                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  7044  001CF6  0E3F               	movlw	-193
  7045  001CF8  16C1               	andwf	4033,f,c	;volatile
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  7049  001CFA  98C1               	bcf	4033,4,c	;volatile
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;adc.c: 212: ADCON1 = 0b00000000;
  7053  001CFC  6AC1               	clrf	4033,c	;volatile
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  7057  001CFE  9EC0               	bcf	4032,7,c	;volatile
  7058                           
  7059                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  7060  001D00  50C0               	movf	4032,w,c	;volatile
  7061  001D02  0B87               	andlw	-121
  7062  001D04  0910               	iorlw	16
  7063  001D06  6EC0               	movwf	4032,c	;volatile
  7064                           
  7065                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  7066  001D08  50C0               	movf	4032,w,c	;volatile
  7067  001D0A  0BF8               	andlw	-8
  7068  001D0C  0904               	iorlw	4
  7069  001D0E  6EC0               	movwf	4032,c	;volatile
  7070                           
  7071                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  7072  001D10  50C0               	movf	4032,w,c	;volatile
  7073  001D12  0BF8               	andlw	-8
  7074  001D14  0901               	iorlw	1
  7075  001D16  6EC0               	movwf	4032,c	;volatile
  7076                           
  7077                           ;adc.c: 219: ADCON2 = 0b00010100;
  7078  001D18  0E14               	movlw	20
  7079  001D1A  6EC0               	movwf	4032,c	;volatile
  7080                           
  7081                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  7082  001D1C  50C0               	movf	4032,w,c	;volatile
  7083  001D1E  0BF8               	andlw	-8
  7084  001D20  0901               	iorlw	1
  7085  001D22  6EC0               	movwf	4032,c	;volatile
  7086                           
  7087                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  7088  001D24  0E3F               	movlw	-193
  7089  001D26  169A               	andwf	3994,f,c	;volatile
  7090                           
  7091                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  7092  001D28  509A               	movf	3994,w,c	;volatile
  7093  001D2A  0BE0               	andlw	-32
  7094  001D2C  0910               	iorlw	16
  7095  001D2E  6E9A               	movwf	3994,c	;volatile
  7096                           
  7097                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  7098  001D30  0EE0               	movlw	-32
  7099  001D32  169A               	andwf	3994,f,c	;volatile
  7100                           
  7101                           ;adc.c: 235: ADCON3 = 0b00010000;
  7102  001D34  0E10               	movlw	16
  7103  001D36  6E9A               	movwf	3994,c	;volatile
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;adc.c: 236: ADCON3 = 0x00;
  7107  001D38  6A9A               	clrf	3994,c	;volatile
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;adc.c: 241: ADCHS = 0b00000000;
  7111  001D3A  6A99               	clrf	3993,c	;volatile
  7112                           
  7113                           ;adc.c: 242: ANSEL0 = 0b00000011;
  7114  001D3C  0E03               	movlw	3
  7115  001D3E  6EB8               	movwf	4024,c	;volatile
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;adc.c: 244: ANSEL1 = 0b00000000;
  7119  001D40  6AB9               	clrf	4025,c	;volatile
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;adc.c: 253: PIE1bits.ADIE = 1;
  7123  001D42  8C9D               	bsf	3997,6,c	;volatile
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;adc.c: 254: ADIF=0;
  7127  001D44  9C9E               	bcf	3998,6,c	;volatile
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;adc.c: 255: IPR1bits.ADIP = 0;
  7131  001D46  9C9F               	bcf	3999,6,c	;volatile
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;adc.c: 260: ADON = 1;
  7135  001D48  80C2               	bsf	4034,0,c	;volatile
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  7139  001D4A  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  7140                           
  7141                           ; BSR set to: 0
  7142  001D4C  0012               	return		;funcret
  7143  001D4E                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  7144                           	opt stack 0
  7145                           tblptru	equ	0xFF8
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           intcon	equ	0xFF2
  7149                           intcon2	equ	0xFF1
  7150                           intcon3	equ	0xFF0
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           postdec1	equ	0xFE5
  7154                           fsr1h	equ	0xFE2
  7155                           fsr1l	equ	0xFE1
  7156                           indf2	equ	0xFDF
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _Detection_Pion_Off *****************
  7162 ;; Defined at:
  7163 ;;		line 126 in file "pion.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		None
  7172 ;; Tracked objects:
  7173 ;;		On entry : 3D/0
  7174 ;;		On exit  : 3D/0
  7175 ;;		Unchanged: 3D/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7177 ;;      Params:         0       0       0       0
  7178 ;;      Locals:         0       0       0       0
  7179 ;;      Temps:          0       0       0       0
  7180 ;;      Totals:         0       0       0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:   10
  7184 ;; This function calls:
  7185 ;;		Nothing
  7186 ;; This function is called by:
  7187 ;;		_Mouvement_Bequille
  7188 ;;		_Mouvement_Z
  7189 ;;		_Mouvement_X
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text42
  7194  0026E2                     __ptext42:
  7195                           	opt stack 0
  7196  0026E2                     _Detection_Pion_Off:
  7197                           	opt stack 18
  7198                           
  7199                           ;pion.c: 141: Detecteur_Pion = 0;
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;incstack = 0
  7203  0026E2  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  7204                           
  7205                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  7206  0026E4  92A3               	bcf	4003,1,c	;volatile
  7207                           
  7208                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  7209  0026E6  92A4               	bcf	4004,1,c	;volatile
  7210  0026E8  0012               	return		;funcret
  7211  0026EA                     __end_of_Detection_Pion_Off:
  7212                           	opt stack 0
  7213                           tblptru	equ	0xFF8
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           intcon	equ	0xFF2
  7217                           intcon2	equ	0xFF1
  7218                           intcon3	equ	0xFF0
  7219                           postinc0	equ	0xFEE
  7220                           wreg	equ	0xFE8
  7221                           postdec1	equ	0xFE5
  7222                           fsr1h	equ	0xFE2
  7223                           fsr1l	equ	0xFE1
  7224                           indf2	equ	0xFDF
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _Check_List_Moteur_Bequille *****************
  7230 ;; Defined at:
  7231 ;;		line 235 in file "action.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;		None
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;		None
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7245 ;;      Params:         0       0       0       0
  7246 ;;      Locals:         0       0       0       0
  7247 ;;      Temps:          0       1       0       0
  7248 ;;      Totals:         0       1       0       0
  7249 ;;Total ram usage:        1 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:   17
  7252 ;; This function calls:
  7253 ;;		_EUSART1_Check_Buffer
  7254 ;;		_Etat_Update
  7255 ;;		_SPI_Check_Buffer
  7256 ;;		___lbdiv
  7257 ;; This function is called by:
  7258 ;;		_Mouvement_Bequille
  7259 ;; This function uses a non-reentrant model
  7260 ;;
  7261                           
  7262                           	psect	text43
  7263  0020FA                     __ptext43:
  7264                           	opt stack 0
  7265  0020FA                     _Check_List_Moteur_Bequille:
  7266                           	opt stack 11
  7267                           
  7268                           ;action.c: 239: if(PORTCbits.RC5 == 0){
  7269                           
  7270                           ;incstack = 0
  7271  0020FA  AA82               	btfss	3970,5,c	;volatile
  7272                           
  7273                           ;action.c: 240: Compteur_IRQ_I_Moteur_2 = 0;
  7274  0020FC  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  7275                           
  7276                           ;action.c: 241: }
  7277                           ;action.c: 245: EUSART1_Check_Buffer();
  7278  0020FE  EC16  F011         	call	_EUSART1_Check_Buffer	;wreg free
  7279                           
  7280                           ;action.c: 246: SPI_Check_Buffer();
  7281  002102  EC00  F011         	call	_SPI_Check_Buffer	;wreg free
  7282                           
  7283                           ;action.c: 250: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  7284  002106  0100               	movlb	0	; () banked
  7285  002108  51A2               	movf	_nb_s_bequille& (0+255),w,b
  7286  00210A  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  7287  00210C  E20E               	bc	l981
  7288                           
  7289                           ; BSR set to: 0
  7290  00210E  0E02               	movlw	2
  7291  002110  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  7292  002112  0C02               	retlw	2
  7293                           
  7294                           ; BSR set to: 0
  7295  002114  0E05               	movlw	5
  7296  002116  6E0F               	movwf	___lbdiv@divisor,c
  7297  002118  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  7298  00211A  ECB3  F010         	call	___lbdiv
  7299  00211E  0100               	movlb	0	; () banked
  7300  002120  6FFE               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  7301  002122  5192               	movf	_Bequille_I_Max& (0+255),w,b
  7302  002124  5DFE               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  7303  002126  A0D8               	btfss	status,0,c
  7304  002128  0012               	return	
  7305  00212A                     l981:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;action.c: 253: P4_busy = 0;
  7309  00212A  6BAC               	clrf	_P4_busy& (0+255),b
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;action.c: 254: Etat_Update(0);
  7313  00212C  0E00               	movlw	0
  7314  00212E  EF18  F012         	goto	_Etat_Update
  7315  002132                     __end_of_Check_List_Moteur_Bequille:
  7316                           	opt stack 0
  7317                           tblptru	equ	0xFF8
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           intcon	equ	0xFF2
  7321                           intcon2	equ	0xFF1
  7322                           intcon3	equ	0xFF0
  7323                           postinc0	equ	0xFEE
  7324                           wreg	equ	0xFE8
  7325                           postdec1	equ	0xFE5
  7326                           fsr1h	equ	0xFE2
  7327                           fsr1l	equ	0xFE1
  7328                           indf2	equ	0xFDF
  7329                           fsr2h	equ	0xFDA
  7330                           fsr2l	equ	0xFD9
  7331                           status	equ	0xFD8
  7332                           
  7333 ;; *************** function ___lbdiv *****************
  7334 ;; Defined at:
  7335 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  dividend        1    wreg     unsigned char 
  7338 ;;  divisor         1   14[COMRAM] unsigned char 
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  dividend        1   15[COMRAM] unsigned char 
  7341 ;;  quotient        1   17[COMRAM] unsigned char 
  7342 ;;  counter         1   16[COMRAM] unsigned char 
  7343 ;; Return value:  Size  Location     Type
  7344 ;;                  1    wreg      unsigned char 
  7345 ;; Registers used:
  7346 ;;		wreg, status,2, status,0
  7347 ;; Tracked objects:
  7348 ;;		On entry : 3F/0
  7349 ;;		On exit  : 0/0
  7350 ;;		Unchanged: 0/0
  7351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7352 ;;      Params:         1       0       0       0
  7353 ;;      Locals:         3       0       0       0
  7354 ;;      Temps:          0       0       0       0
  7355 ;;      Totals:         4       0       0       0
  7356 ;;Total ram usage:        4 bytes
  7357 ;; Hardware stack levels used:    1
  7358 ;; Hardware stack levels required when called:   10
  7359 ;; This function calls:
  7360 ;;		Nothing
  7361 ;; This function is called by:
  7362 ;;		_Check_List_Moteur_Bequille
  7363 ;; This function uses a non-reentrant model
  7364 ;;
  7365                           
  7366                           	psect	text44
  7367  002166                     __ptext44:
  7368                           	opt stack 0
  7369  002166                     ___lbdiv:
  7370                           	opt stack 17
  7371                           
  7372                           ;incstack = 0
  7373                           ;___lbdiv@dividend stored from wreg
  7374  002166  6E10               	movwf	___lbdiv@dividend,c
  7375  002168  6A12               	clrf	___lbdiv@quotient,c
  7376  00216A  500F               	movf	___lbdiv@divisor,w,c
  7377  00216C  E014               	bz	l8342
  7378  00216E  0E01               	movlw	1
  7379  002170  6E11               	movwf	___lbdiv@counter,c
  7380  002172  D003               	goto	l8330
  7381  002174                     l8326:
  7382  002174  90D8               	bcf	status,0,c
  7383  002176  360F               	rlcf	___lbdiv@divisor,f,c
  7384  002178  2A11               	incf	___lbdiv@counter,f,c
  7385  00217A                     l8330:
  7386  00217A  AE0F               	btfss	___lbdiv@divisor,7,c
  7387  00217C  D7FB               	goto	l8326
  7388  00217E                     l8332:
  7389  00217E  90D8               	bcf	status,0,c
  7390  002180  3612               	rlcf	___lbdiv@quotient,f,c
  7391  002182  500F               	movf	___lbdiv@divisor,w,c
  7392  002184  5C10               	subwf	___lbdiv@dividend,w,c
  7393  002186  E303               	bnc	l8338
  7394  002188  500F               	movf	___lbdiv@divisor,w,c
  7395  00218A  5E10               	subwf	___lbdiv@dividend,f,c
  7396  00218C  8012               	bsf	___lbdiv@quotient,0,c
  7397  00218E                     l8338:
  7398  00218E  90D8               	bcf	status,0,c
  7399  002190  320F               	rrcf	___lbdiv@divisor,f,c
  7400  002192  2E11               	decfsz	___lbdiv@counter,f,c
  7401  002194  D7F4               	goto	l8332
  7402  002196                     l8342:
  7403  002196  5012               	movf	___lbdiv@quotient,w,c
  7404  002198  0012               	return		;funcret
  7405  00219A                     __end_of___lbdiv:
  7406                           	opt stack 0
  7407                           tblptru	equ	0xFF8
  7408                           prodh	equ	0xFF4
  7409                           prodl	equ	0xFF3
  7410                           intcon	equ	0xFF2
  7411                           intcon2	equ	0xFF1
  7412                           intcon3	equ	0xFF0
  7413                           postinc0	equ	0xFEE
  7414                           wreg	equ	0xFE8
  7415                           postdec1	equ	0xFE5
  7416                           fsr1h	equ	0xFE2
  7417                           fsr1l	equ	0xFE1
  7418                           indf2	equ	0xFDF
  7419                           fsr2h	equ	0xFDA
  7420                           fsr2l	equ	0xFD9
  7421                           status	equ	0xFD8
  7422                           
  7423 ;; *************** function _SPI_Check_Buffer *****************
  7424 ;; Defined at:
  7425 ;;		line 348 in file "spi.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;		None
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  1    wreg      void 
  7432 ;; Registers used:
  7433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7434 ;; Tracked objects:
  7435 ;;		On entry : 0/0
  7436 ;;		On exit  : 0/0
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7439 ;;      Params:         0       0       0       0
  7440 ;;      Locals:         0       0       0       0
  7441 ;;      Temps:          0       0       0       0
  7442 ;;      Totals:         0       0       0       0
  7443 ;;Total ram usage:        0 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; Hardware stack levels required when called:   16
  7446 ;; This function calls:
  7447 ;;		_EUSART1_RX_T3_LOCAL
  7448 ;; This function is called by:
  7449 ;;		_Cycle
  7450 ;;		_Check_List_Moteur_1
  7451 ;;		_Check_List_Moteur_2
  7452 ;;		_Check_List_Moteur_Bequille
  7453 ;;		_Mouvement_X
  7454 ;; This function uses a non-reentrant model
  7455 ;;
  7456                           
  7457                           	psect	text45
  7458  002200                     __ptext45:
  7459                           	opt stack 0
  7460  002200                     _SPI_Check_Buffer:
  7461                           	opt stack 13
  7462                           
  7463                           ;spi.c: 396: if (SPI_full == 1) {
  7464                           
  7465                           ;incstack = 0
  7466  002200  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7467  002202  0012               	return	
  7468                           
  7469                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  7470                           ;spi.c: 400: SPI_RX_TEXT[1],
  7471                           ;spi.c: 401: SPI_RX_TEXT[2],
  7472                           ;spi.c: 402: SPI_RX_TEXT[3],
  7473                           ;spi.c: 403: SPI_RX_TEXT[4],
  7474                           ;spi.c: 404: SPI_RX_TEXT[5],
  7475                           ;spi.c: 405: SPI_RX_TEXT[6],
  7476                           ;spi.c: 406: SPI_RX_TEXT[7]);
  7477  002204  C101  F280         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7478  002208  C102  F281         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7479  00220C  C103  F282         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7480  002210  C104  F283         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7481  002214  C105  F284         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7482  002218  C106  F285         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7483  00221C  C107  F286         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7484  002220  0101               	movlb	1	; () banked
  7485  002222  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  7486  002224  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7487                           
  7488                           ;spi.c: 408: SPI_full = 0;
  7489  002228  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7490  00222A  0012               	return		;funcret
  7491  00222C                     __end_of_SPI_Check_Buffer:
  7492                           	opt stack 0
  7493                           tblptru	equ	0xFF8
  7494                           prodh	equ	0xFF4
  7495                           prodl	equ	0xFF3
  7496                           intcon	equ	0xFF2
  7497                           intcon2	equ	0xFF1
  7498                           intcon3	equ	0xFF0
  7499                           postinc0	equ	0xFEE
  7500                           wreg	equ	0xFE8
  7501                           postdec1	equ	0xFE5
  7502                           fsr1h	equ	0xFE2
  7503                           fsr1l	equ	0xFE1
  7504                           indf2	equ	0xFDF
  7505                           fsr2h	equ	0xFDA
  7506                           fsr2l	equ	0xFD9
  7507                           status	equ	0xFD8
  7508                           
  7509 ;; *************** function _EUSART1_Check_Buffer *****************
  7510 ;; Defined at:
  7511 ;;		line 268 in file "eusart.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;		None
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;		None
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  1    wreg      void 
  7518 ;; Registers used:
  7519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7525 ;;      Params:         0       0       0       0
  7526 ;;      Locals:         0       0       0       0
  7527 ;;      Temps:          0       0       0       0
  7528 ;;      Totals:         0       0       0       0
  7529 ;;Total ram usage:        0 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:   16
  7532 ;; This function calls:
  7533 ;;		_EUSART1_RX_T3_LOCAL
  7534 ;; This function is called by:
  7535 ;;		_Cycle
  7536 ;;		_Check_List_Moteur_1
  7537 ;;		_Check_List_Moteur_2
  7538 ;;		_Check_List_Moteur_Bequille
  7539 ;;		_Mouvement_X
  7540 ;;		_delay_s
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           	psect	text46
  7545  00222C                     __ptext46:
  7546                           	opt stack 0
  7547  00222C                     _EUSART1_Check_Buffer:
  7548                           	opt stack 12
  7549                           
  7550                           ;eusart.c: 270: if (RX1_full == 1) {
  7551                           
  7552                           ;incstack = 0
  7553  00222C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7554  00222E  0012               	return	
  7555                           
  7556                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  7557                           ;eusart.c: 274: UART_RX_TEXT[1],
  7558                           ;eusart.c: 275: UART_RX_TEXT[2],
  7559                           ;eusart.c: 276: UART_RX_TEXT[3],
  7560                           ;eusart.c: 277: UART_RX_TEXT[4],
  7561                           ;eusart.c: 278: UART_RX_TEXT[5],
  7562                           ;eusart.c: 279: UART_RX_TEXT[6],
  7563                           ;eusart.c: 280: UART_RX_TEXT[7]);
  7564  002230  C1C1  F280         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7565  002234  C1C2  F281         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7566  002238  C1C3  F282         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7567  00223C  C1C4  F283         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7568  002240  C1C5  F284         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7569  002244  C1C6  F285         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7570  002248  C1C7  F286         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7571  00224C  0101               	movlb	1	; () banked
  7572  00224E  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  7573  002250  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7574                           
  7575                           ;eusart.c: 282: RX1_full = 0;
  7576  002254  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7577  002256  0012               	return		;funcret
  7578  002258                     __end_of_EUSART1_Check_Buffer:
  7579                           	opt stack 0
  7580                           tblptru	equ	0xFF8
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon2	equ	0xFF1
  7585                           intcon3	equ	0xFF0
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           fsr1h	equ	0xFE2
  7590                           fsr1l	equ	0xFE1
  7591                           indf2	equ	0xFDF
  7592                           fsr2h	equ	0xFDA
  7593                           fsr2l	equ	0xFD9
  7594                           status	equ	0xFD8
  7595                           
  7596 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  7597 ;; Defined at:
  7598 ;;		line 822 in file "eusart.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  Ad              1    wreg     unsigned char 
  7601 ;;  Da              1    0[BANK2 ] unsigned char 
  7602 ;;  A               1    1[BANK2 ] unsigned char 
  7603 ;;  B               1    2[BANK2 ] unsigned char 
  7604 ;;  C               1    3[BANK2 ] unsigned char 
  7605 ;;  D               1    4[BANK2 ] unsigned char 
  7606 ;;  E               1    5[BANK2 ] unsigned char 
  7607 ;;  F               1    6[BANK2 ] unsigned char 
  7608 ;; Auto vars:     Size  Location     Type
  7609 ;;  Ad              1   63[COMRAM] unsigned char 
  7610 ;;  i               2   64[COMRAM] int 
  7611 ;;  Reponse         1    0        unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      void 
  7614 ;; Registers used:
  7615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 3F/1
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7621 ;;      Params:         0       0       0       7
  7622 ;;      Locals:         3       0       0       0
  7623 ;;      Temps:          0       4       0       0
  7624 ;;      Totals:         3       4       0       7
  7625 ;;Total ram usage:       14 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:   15
  7628 ;; This function calls:
  7629 ;;		_Alarme_On
  7630 ;;		_Coupe_Moteur
  7631 ;;		_EUSART1_Buffer_Send
  7632 ;;		_Etat_Get
  7633 ;;		_Etat_Intitule
  7634 ;;		_Etat_Update
  7635 ;;		_IRQ_Execution
  7636 ;;		___awmod
  7637 ;;		_delay_1s
  7638 ;;		_sprintf
  7639 ;; This function is called by:
  7640 ;;		_EUSART1_Check_Buffer
  7641 ;;		_SPI_Check_Buffer
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text47
  7646  0000D2                     __ptext47:
  7647                           	opt stack 0
  7648  0000D2                     _EUSART1_RX_T3_LOCAL:
  7649                           	opt stack 12
  7650                           
  7651                           ;incstack = 0
  7652                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  7653  0000D2  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  7654                           
  7655                           ;eusart.c: 823: int i;
  7656                           ;eusart.c: 824: unsigned char Reponse;
  7657                           ;eusart.c: 830: switch (Ad) {
  7658  0000D4  D391               	goto	l8118
  7659  0000D6                     l7828:
  7660                           
  7661                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  7662  0000D6  C280  F0FA         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  7663  0000DA  0ED0               	movlw	208
  7664  0000DC  0100               	movlb	0	; () banked
  7665  0000DE  27FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7666  0000E0  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7667  0000E2  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7668  0000E4  508B               	movf	3979,w,c	;volatile
  7669  0000E6  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7670  0000E8  0BFB               	andlw	-5
  7671  0000EA  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7672  0000EC  6E8B               	movwf	3979,c	;volatile
  7673                           
  7674                           ;eusart.c: 847: break;
  7675  0000EE  0012               	return	
  7676  0000F0                     l7830:
  7677                           
  7678                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  7679  0000F0  0EAD               	movlw	low _UART_TX_TEXT
  7680  0000F2  6E1B               	movwf	sprintf@sp,c
  7681  0000F4  0EB9               	movlw	low (STR_4+30)
  7682  0000F6  6E1C               	movwf	sprintf@f,c
  7683  0000F8  0E3F               	movlw	high (STR_4+30)
  7684  0000FA  6E1D               	movwf	sprintf@f+1,c
  7685  0000FC  C09B  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  7686  000100  6A1F               	clrf	?_sprintf+4,c
  7687  000102  EC6C  F004         	call	_sprintf	;wreg free
  7688  000106                     l7832:
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  7692  000106  0EAD               	movlw	low _UART_TX_TEXT
  7693  000108  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  7694  00010A  EFB0  F00B         	goto	_EUSART1_Buffer_Send	;wreg free
  7695  00010E                     l7834:
  7696                           
  7697                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  7698  00010E  0EAD               	movlw	low _UART_TX_TEXT
  7699  000110  6E1B               	movwf	sprintf@sp,c
  7700  000112  0EB7               	movlw	low STR_2
  7701  000114  6E1C               	movwf	sprintf@f,c
  7702  000116  0E3E               	movlw	high STR_2
  7703  000118  6E1D               	movwf	sprintf@f+1,c
  7704  00011A  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7705  00011E  6A1F               	clrf	?_sprintf+4,c
  7706  000120  C09B  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  7707  000124  6A21               	clrf	?_sprintf+6,c
  7708  000126  C09A  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  7709  00012A  6A23               	clrf	?_sprintf+8,c
  7710  00012C  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  7711  000130  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  7712  000134  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  7713  000138  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  7714  00013C  C09D  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  7715  000140  6A29               	clrf	?_sprintf+14,c
  7716  000142  C09F  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  7717  000146  6A2B               	clrf	?_sprintf+16,c
  7718  000148  EC6C  F004         	call	_sprintf	;wreg free
  7719  00014C  D7DC               	goto	l7832
  7720  00014E                     l7838:
  7721                           
  7722                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  7723  00014E  0EAD               	movlw	low _UART_TX_TEXT
  7724  000150  6E1B               	movwf	sprintf@sp,c
  7725  000152  0EEC               	movlw	low STR_3
  7726  000154  6E1C               	movwf	sprintf@f,c
  7727  000156  0E3F               	movlw	high STR_3
  7728  000158  6E1D               	movwf	sprintf@f+1,c
  7729  00015A  0E00               	movlw	0
  7730  00015C  ECE7  F010         	call	_Etat_Get
  7731  000160  6E1E               	movwf	?_sprintf+3,c
  7732  000162  6A1F               	clrf	?_sprintf+4,c
  7733  000164  0E01               	movlw	1
  7734  000166  ECE7  F010         	call	_Etat_Get
  7735  00016A  6E20               	movwf	?_sprintf+5,c
  7736  00016C  6A21               	clrf	?_sprintf+6,c
  7737  00016E  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7738  000172  6A23               	clrf	?_sprintf+8,c
  7739  000174  EC6C  F004         	call	_sprintf	;wreg free
  7740  000178  D7C6               	goto	l7832
  7741  00017A                     l1366:
  7742                           
  7743                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  7744  00017A  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  7745  00017C  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  7746  00017E                     l7846:
  7747                           
  7748                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  7749  00017E  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  7750  000180  08B6               	sublw	low (_UART_TX_TEXT+9)
  7751  000182  6ED9               	movwf	fsr2l,c
  7752  000184  6ADA               	clrf	fsr2h,c
  7753  000186  504C               	movf	_Etat_Precedent_Index,w,c
  7754  000188  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  7755  00018A  6E0F               	movwf	___awmod@dividend,c
  7756  00018C  0E00               	movlw	0
  7757  00018E  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  7758  000190  6E10               	movwf	___awmod@dividend+1,c
  7759  000192  6A12               	clrf	___awmod@divisor+1,c
  7760  000194  0E0A               	movlw	10
  7761  000196  6E11               	movwf	___awmod@divisor,c
  7762  000198  EC0D  F00E         	call	___awmod	;wreg free
  7763  00019C  500F               	movf	?___awmod,w,c
  7764  00019E  0F6A               	addlw	low _Etat_Log
  7765  0001A0  6EE1               	movwf	fsr1l,c
  7766  0001A2  6AE2               	clrf	fsr1h,c
  7767  0001A4  50E7               	movf	indf1,w,c
  7768  0001A6  ECCD  F010         	call	_Etat_Intitule
  7769  0001AA  6EDF               	movwf	indf2,c
  7770  0001AC  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  7771  0001AE  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  7772  0001B0  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  7773  0001B2  D7E5               	goto	l7846
  7774  0001B4  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  7775  0001B6  E103               	bnz	u6050
  7776  0001B8  0E0A               	movlw	10
  7777  0001BA  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  7778  0001BC  E3E0               	bnc	l7846
  7779  0001BE                     u6050:
  7780                           
  7781                           ;eusart.c: 882: }
  7782                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  7783  0001BE  0100               	movlb	0	; () banked
  7784  0001C0  6BB7               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  7785  0001C2  D7A1               	goto	l7832
  7786  0001C4                     l7854:
  7787                           
  7788                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  7789  0001C4  0EAD               	movlw	low _UART_TX_TEXT
  7790  0001C6  6E1B               	movwf	sprintf@sp,c
  7791  0001C8  0E9B               	movlw	low STR_4
  7792  0001CA  6E1C               	movwf	sprintf@f,c
  7793  0001CC  0E3F               	movlw	high STR_4
  7794  0001CE  6E1D               	movwf	sprintf@f+1,c
  7795  0001D0  C04B  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  7796  0001D4  6A1F               	clrf	?_sprintf+4,c
  7797  0001D6  C0A1  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  7798  0001DA  6A21               	clrf	?_sprintf+6,c
  7799  0001DC  C0A6  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  7800  0001E0  6A23               	clrf	?_sprintf+8,c
  7801  0001E2  EC6C  F004         	call	_sprintf	;wreg free
  7802  0001E6  D78F               	goto	l7832
  7803  0001E8                     l7858:
  7804                           
  7805                           ;eusart.c: 898: consigne = (char) (5 * Da);
  7806  0001E8  0102               	movlb	2	; () banked
  7807  0001EA  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7808  0001EC  0D05               	mullw	5
  7809  0001EE  CFF3 F098          	movff	prodl,_consigne	;volatile
  7810                           
  7811                           ;eusart.c: 900: break;
  7812  0001F2  0012               	return	
  7813  0001F4                     l7860:
  7814                           
  7815                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  7816  0001F4  0EAD               	movlw	low _UART_TX_TEXT
  7817  0001F6  6E1B               	movwf	sprintf@sp,c
  7818  0001F8  0EF9               	movlw	low STR_5
  7819  0001FA  6E1C               	movwf	sprintf@f,c
  7820  0001FC  0E3F               	movlw	high STR_5
  7821  0001FE  6E1D               	movwf	sprintf@f+1,c
  7822  000200  C0AC  F01E         	movff	_P4_busy,?_sprintf+3
  7823  000204  6A1F               	clrf	?_sprintf+4,c
  7824  000206  EC6C  F004         	call	_sprintf	;wreg free
  7825  00020A  D77D               	goto	l7832
  7826  00020C                     l7864:
  7827                           
  7828                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  7829  00020C  0EAD               	movlw	low _UART_TX_TEXT
  7830  00020E  6E1B               	movwf	sprintf@sp,c
  7831  000210  0EB9               	movlw	low (STR_4+30)
  7832  000212  6E1C               	movwf	sprintf@f,c
  7833  000214  0E3F               	movlw	high (STR_4+30)
  7834  000216  6E1D               	movwf	sprintf@f+1,c
  7835  000218  0102               	movlb	2	; () banked
  7836  00021A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7837  00021C  0FD0               	addlw	208
  7838  00021E  ECE7  F010         	call	_Etat_Get
  7839  000222  6E1E               	movwf	?_sprintf+3,c
  7840  000224  6A1F               	clrf	?_sprintf+4,c
  7841  000226  EC6C  F004         	call	_sprintf	;wreg free
  7842  00022A  D76D               	goto	l7832
  7843  00022C                     l7868:
  7844                           
  7845                           ;eusart.c: 920: Etat_Update(Da);
  7846  00022C  0102               	movlb	2	; () banked
  7847  00022E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7848  000230  EF18  F012         	goto	_Etat_Update
  7849  000234                     l7870:
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  7853  000234  0102               	movlb	2	; () banked
  7854  000236  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7855  000238  0D0A               	mullw	10
  7856  00023A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7857  00023E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7858  000240  0D64               	mullw	100
  7859  000242  50F3               	movf	prodl,w,c
  7860  000244  0100               	movlb	0	; () banked
  7861  000246  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7862  000248  0102               	movlb	2	; () banked
  7863  00024A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7864  00024C  0F30               	addlw	48
  7865  00024E  0100               	movlb	0	; () banked
  7866  000250  6F93               	movwf	_Pelle_I_Max& (0+255),b
  7867                           
  7868                           ;eusart.c: 943: break;
  7869  000252  0012               	return	
  7870  000254                     l7872:
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7874  000254  0102               	movlb	2	; () banked
  7875  000256  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7876  000258  0D0A               	mullw	10
  7877  00025A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7878  00025E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7879  000260  0D64               	mullw	100
  7880  000262  50F3               	movf	prodl,w,c
  7881  000264  0100               	movlb	0	; () banked
  7882  000266  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7883  000268  0102               	movlb	2	; () banked
  7884  00026A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7885  00026C  0F30               	addlw	48
  7886  00026E  0100               	movlb	0	; () banked
  7887  000270  6F92               	movwf	_Bequille_I_Max& (0+255),b
  7888                           
  7889                           ;eusart.c: 946: break;
  7890  000272  0012               	return	
  7891  000274                     l7876:
  7892  000274  0ED0               	movlw	208
  7893  000276  0100               	movlb	0	; () banked
  7894  000278  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7895  00027A  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7896  00027C  0102               	movlb	2	; () banked
  7897  00027E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7898  000280  0100               	movlb	0	; () banked
  7899  000282  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7900  000284  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7901  000286  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7902  000288  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7903  00028A  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7904  00028C  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7905                           
  7906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7907                           ; Switch size 1, requested type "speed"
  7908                           ; Number of cases is 1, Range of values is 0 to 0
  7909                           ; switch strategies available:
  7910                           ; Name         Instructions Cycles
  7911                           ; simple_byte            4     3 (average)
  7912                           ;	Chosen strategy is simple_byte
  7913  00028E  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7914  000290  A4D8               	btfss	status,2,c
  7915  000292  0012               	return	
  7916                           
  7917                           ; BSR set to: 0
  7918                           ; Switch size 1, requested type "speed"
  7919                           ; Number of cases is 3, Range of values is 1 to 3
  7920                           ; switch strategies available:
  7921                           ; Name         Instructions Cycles
  7922                           ; simple_byte           10     6 (average)
  7923                           ;	Chosen strategy is simple_byte
  7924  000294  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7925  000296  0A01               	xorlw	1	; case 1
  7926  000298  B4D8               	btfsc	status,2,c
  7927  00029A  0012               	return	
  7928  00029C  0A03               	xorlw	3	; case 2
  7929  00029E  E0CA               	bz	l7870
  7930  0002A0  0A01               	xorlw	1	; case 3
  7931  0002A2  E0D8               	bz	l7872
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;eusart.c: 949: break;
  7935  0002A4  0012               	return	
  7936  0002A6                     l7878:
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7940  0002A6  0102               	movlb	2	; () banked
  7941  0002A8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7942  0002AA  0D0A               	mullw	10
  7943  0002AC  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7944  0002B0  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7945  0002B2  0D64               	mullw	100
  7946  0002B4  50F3               	movf	prodl,w,c
  7947  0002B6  0100               	movlb	0	; () banked
  7948  0002B8  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7949  0002BA  0102               	movlb	2	; () banked
  7950  0002BC  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7951  0002BE  0F30               	addlw	48
  7952  0002C0  6E49               	movwf	_Consigne_en_A,c
  7953                           
  7954                           ; BSR set to: 2
  7955                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  7956  0002C2  C049  F098         	movff	_Consigne_en_A,_consigne	;volatile
  7957                           
  7958                           ; BSR set to: 2
  7959                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  7960  0002C6  C098  F097         	movff	_consigne,_Consigne_Max	;volatile
  7961                           
  7962                           ;eusart.c: 968: break;
  7963  0002CA  D0D6               	goto	l7930
  7964  0002CC                     l7884:
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7968  0002CC  0102               	movlb	2	; () banked
  7969  0002CE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7970  0002D0  0D0A               	mullw	10
  7971  0002D2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7972  0002D6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7973  0002D8  0D64               	mullw	100
  7974  0002DA  50F3               	movf	prodl,w,c
  7975  0002DC  0100               	movlb	0	; () banked
  7976  0002DE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7977  0002E0  0102               	movlb	2	; () banked
  7978  0002E2  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7979  0002E4  0F30               	addlw	48
  7980  0002E6  0100               	movlb	0	; () banked
  7981  0002E8  6FA7               	movwf	_nb_s_patinage& (0+255),b
  7982                           
  7983                           ;eusart.c: 971: break;
  7984  0002EA  D0C6               	goto	l7930
  7985  0002EC                     l7886:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7989  0002EC  0102               	movlb	2	; () banked
  7990  0002EE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7991  0002F0  0D0A               	mullw	10
  7992  0002F2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7993  0002F6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7994  0002F8  0D64               	mullw	100
  7995  0002FA  50F3               	movf	prodl,w,c
  7996  0002FC  0100               	movlb	0	; () banked
  7997  0002FE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7998  000300  0102               	movlb	2	; () banked
  7999  000302  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8000  000304  0F30               	addlw	48
  8001  000306  0100               	movlb	0	; () banked
  8002  000308  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  8003                           
  8004                           ;eusart.c: 974: break;
  8005  00030A  D0B6               	goto	l7930
  8006  00030C                     l7888:
  8007                           
  8008                           ; BSR set to: 0
  8009                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  8010  00030C  0102               	movlb	2	; () banked
  8011  00030E  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8012  000310  0D0A               	mullw	10
  8013  000312  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8014  000316  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8015  000318  0D64               	mullw	100
  8016  00031A  50F3               	movf	prodl,w,c
  8017  00031C  0100               	movlb	0	; () banked
  8018  00031E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8019  000320  0102               	movlb	2	; () banked
  8020  000322  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8021  000324  0F30               	addlw	48
  8022  000326  0100               	movlb	0	; () banked
  8023  000328  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  8027  00032A  C0A4  F04E         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  8028                           
  8029                           ;eusart.c: 983: break;
  8030  00032E  D0A4               	goto	l7930
  8031  000330                     l7892:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  8035  000330  0102               	movlb	2	; () banked
  8036  000332  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8037  000334  0D0A               	mullw	10
  8038  000336  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8039  00033A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8040  00033C  0D64               	mullw	100
  8041  00033E  50F3               	movf	prodl,w,c
  8042  000340  0100               	movlb	0	; () banked
  8043  000342  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8044  000344  0102               	movlb	2	; () banked
  8045  000346  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8046  000348  0F30               	addlw	48
  8047  00034A  0100               	movlb	0	; () banked
  8048  00034C  6FA3               	movwf	_nb_s_pelle& (0+255),b
  8049                           
  8050                           ;eusart.c: 986: break;
  8051  00034E  D094               	goto	l7930
  8052  000350                     l7894:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  8056  000350  0102               	movlb	2	; () banked
  8057  000352  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8058  000354  0FD0               	addlw	208
  8059  000356  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  8060                           
  8061                           ; BSR set to: 2
  8062                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8063  000358  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8064                           
  8065                           ;eusart.c: 990: break;
  8066  00035C  D08D               	goto	l7930
  8067  00035E                     l7898:
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  8071  00035E  0102               	movlb	2	; () banked
  8072  000360  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8073  000362  0FD0               	addlw	208
  8074  000364  0100               	movlb	0	; () banked
  8075  000366  6F9D               	movwf	_Patinage_Nb_Essai& (0+255),b
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8079  000368  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8080                           
  8081                           ;eusart.c: 994: break;
  8082  00036C  D085               	goto	l7930
  8083  00036E                     l7902:
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8087  00036E  0102               	movlb	2	; () banked
  8088  000370  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8089  000372  0D0A               	mullw	10
  8090  000374  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8091  000378  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8092  00037A  0D64               	mullw	100
  8093  00037C  50F3               	movf	prodl,w,c
  8094  00037E  0100               	movlb	0	; () banked
  8095  000380  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8096  000382  0102               	movlb	2	; () banked
  8097  000384  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8098  000386  0F30               	addlw	48
  8099  000388  6E49               	movwf	_Consigne_en_A,c
  8100                           
  8101                           ; BSR set to: 2
  8102                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  8103  00038A  C049  F096         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  8104                           
  8105                           ;eusart.c: 1000: break;
  8106  00038E  D074               	goto	l7930
  8107  000390                     l7906:
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8111  000390  0102               	movlb	2	; () banked
  8112  000392  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8113  000394  0D0A               	mullw	10
  8114  000396  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8115  00039A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8116  00039C  0D64               	mullw	100
  8117  00039E  50F3               	movf	prodl,w,c
  8118  0003A0  0100               	movlb	0	; () banked
  8119  0003A2  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8120  0003A4  0102               	movlb	2	; () banked
  8121  0003A6  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8122  0003A8  0F30               	addlw	48
  8123  0003AA  6E49               	movwf	_Consigne_en_A,c
  8124                           
  8125                           ; BSR set to: 2
  8126                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  8127  0003AC  C049  F095         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  8128                           
  8129                           ;eusart.c: 1006: break;
  8130  0003B0  D063               	goto	l7930
  8131  0003B2                     l7910:
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8135  0003B2  0102               	movlb	2	; () banked
  8136  0003B4  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8137  0003B6  0D0A               	mullw	10
  8138  0003B8  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8139  0003BC  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8140  0003BE  0D64               	mullw	100
  8141  0003C0  50F3               	movf	prodl,w,c
  8142  0003C2  0100               	movlb	0	; () banked
  8143  0003C4  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8144  0003C6  0102               	movlb	2	; () banked
  8145  0003C8  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8146  0003CA  0F30               	addlw	48
  8147  0003CC  6E49               	movwf	_Consigne_en_A,c
  8148                           
  8149                           ; BSR set to: 2
  8150                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  8151  0003CE  C049  F094         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  8152                           
  8153                           ;eusart.c: 1012: break;
  8154  0003D2  D052               	goto	l7930
  8155  0003D4                     l7916:
  8156  0003D4  0ED0               	movlw	208
  8157  0003D6  0100               	movlb	0	; () banked
  8158  0003D8  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8159  0003DA  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8160  0003DC  0102               	movlb	2	; () banked
  8161  0003DE  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8162  0003E0  0100               	movlb	0	; () banked
  8163  0003E2  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8164  0003E4  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8165  0003E6  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8166  0003E8  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8167  0003EA  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8168  0003EC  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8169                           
  8170                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8171                           ; Switch size 1, requested type "speed"
  8172                           ; Number of cases is 1, Range of values is 0 to 0
  8173                           ; switch strategies available:
  8174                           ; Name         Instructions Cycles
  8175                           ; simple_byte            4     3 (average)
  8176                           ;	Chosen strategy is simple_byte
  8177  0003EE  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8178  0003F0  E143               	bnz	l7930
  8179                           
  8180                           ; BSR set to: 0
  8181                           ; Switch size 1, requested type "speed"
  8182                           ; Number of cases is 10, Range of values is 0 to 9
  8183                           ; switch strategies available:
  8184                           ; Name         Instructions Cycles
  8185                           ; simple_byte           31    16 (average)
  8186                           ;	Chosen strategy is simple_byte
  8187  0003F2  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8188  0003F4  E101 D757          	bz	l7878
  8189  0003F8  0A01               	xorlw	1	; case 1
  8190  0003FA  E101 D767          	bz	l7884
  8191  0003FE  0A03               	xorlw	3	; case 2
  8192  000400  E101 D774          	bz	l7886
  8193  000404  0A01               	xorlw	1	; case 3
  8194  000406  E082               	bz	l7888
  8195  000408  0A07               	xorlw	7	; case 4
  8196  00040A  E092               	bz	l7892
  8197  00040C  0A01               	xorlw	1	; case 5
  8198  00040E  E0A0               	bz	l7894
  8199  000410  0A03               	xorlw	3	; case 6
  8200  000412  E0A5               	bz	l7898
  8201  000414  0A01               	xorlw	1	; case 7
  8202  000416  E0AB               	bz	l7902
  8203  000418  0A0F               	xorlw	15	; case 8
  8204  00041A  E0BA               	bz	l7906
  8205  00041C  0A01               	xorlw	1	; case 9
  8206  00041E  E0C9               	bz	l7910
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;eusart.c: 1031: switch (Da - 0x30) {
  8210                           
  8211                           ;eusart.c: 1024: case 'V':
  8212  000420  D02B               	goto	l7930
  8213  000422                     l7918:
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  8217  000422  0EAD               	movlw	low _UART_TX_TEXT
  8218  000424  6E1B               	movwf	sprintf@sp,c
  8219  000426  0E6A               	movlw	low STR_7
  8220  000428  6E1C               	movwf	sprintf@f,c
  8221  00042A  0E3F               	movlw	high STR_7
  8222  00042C  6E1D               	movwf	sprintf@f+1,c
  8223  00042E  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  8224  000432  6A1F               	clrf	?_sprintf+4,c
  8225  000434  C0A7  F020         	movff	_nb_s_patinage,?_sprintf+5
  8226  000438  6A21               	clrf	?_sprintf+6,c
  8227  00043A  C0A5  F022         	movff	_nb_100ms_pion,?_sprintf+7
  8228  00043E  6A23               	clrf	?_sprintf+8,c
  8229  000440  C0A4  F024         	movff	_nb_100ms_platine,?_sprintf+9
  8230  000444  6A25               	clrf	?_sprintf+10,c
  8231  000446  C0A3  F026         	movff	_nb_s_pelle,?_sprintf+11
  8232  00044A  6A27               	clrf	?_sprintf+12,c
  8233  00044C  EC6C  F004         	call	_sprintf	;wreg free
  8234  000450  D65A               	goto	l7832
  8235  000452                     l7922:
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  8239  000452  0EAD               	movlw	low _UART_TX_TEXT
  8240  000454  6E1B               	movwf	sprintf@sp,c
  8241  000456  0EBC               	movlw	low STR_8
  8242  000458  6E1C               	movwf	sprintf@f,c
  8243  00045A  0E3F               	movlw	high STR_8
  8244  00045C  6E1D               	movwf	sprintf@f+1,c
  8245  00045E  C0AA  F01E         	movff	_Etat,?_sprintf+3	;volatile
  8246  000462  6A1F               	clrf	?_sprintf+4,c
  8247  000464  C04B  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  8248  000468  6A21               	clrf	?_sprintf+6,c
  8249  00046A  EC6C  F004         	call	_sprintf	;wreg free
  8250  00046E  D64B               	goto	l7832
  8251  000470                     l1400:
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  8255  000470  C281  F0AD         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  8256                           
  8257                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  8258  000474  6BAE               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  8259  000476  D647               	goto	l7832
  8260  000478                     l7930:
  8261  000478  0ED0               	movlw	208
  8262  00047A  0100               	movlb	0	; () banked
  8263  00047C  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8264  00047E  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8265  000480  0102               	movlb	2	; () banked
  8266  000482  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8267  000484  0100               	movlb	0	; () banked
  8268  000486  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8269  000488  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8270  00048A  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8271  00048C  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8272  00048E  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8273  000490  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8274                           
  8275                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8276                           ; Switch size 1, requested type "speed"
  8277                           ; Number of cases is 1, Range of values is 0 to 0
  8278                           ; switch strategies available:
  8279                           ; Name         Instructions Cycles
  8280                           ; simple_byte            4     3 (average)
  8281                           ;	Chosen strategy is simple_byte
  8282  000492  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8283  000494  A4D8               	btfss	status,2,c
  8284  000496  0012               	return	
  8285                           
  8286                           ; BSR set to: 0
  8287                           ; Switch size 1, requested type "speed"
  8288                           ; Number of cases is 3, Range of values is 0 to 9
  8289                           ; switch strategies available:
  8290                           ; Name         Instructions Cycles
  8291                           ; simple_byte           10     6 (average)
  8292                           ;	Chosen strategy is simple_byte
  8293  000498  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8294  00049A  E0C3               	bz	l7918
  8295  00049C  0A01               	xorlw	1	; case 1
  8296  00049E  E0D9               	bz	l7922
  8297  0004A0  0A08               	xorlw	8	; case 9
  8298  0004A2  A4D8               	btfss	status,2,c
  8299  0004A4  0012               	return	
  8300  0004A6  D7E4               	goto	l1400
  8301  0004A8                     l7932:
  8302                           
  8303                           ;eusart.c: 1062: Alarme_On(8);
  8304  0004A8  0E08               	movlw	8
  8305  0004AA  EF28  F013         	goto	_Alarme_On
  8306  0004AE                     l7934:
  8307                           
  8308                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  8309  0004AE  0EAD               	movlw	low _UART_TX_TEXT
  8310  0004B0  6E1B               	movwf	sprintf@sp,c
  8311  0004B2  0EB9               	movlw	low (STR_4+30)
  8312  0004B4  6E1C               	movwf	sprintf@f,c
  8313  0004B6  0E3F               	movlw	high (STR_4+30)
  8314  0004B8  6E1D               	movwf	sprintf@f+1,c
  8315  0004BA  C0AB  F01E         	movff	_Version,?_sprintf+3
  8316  0004BE  6A1F               	clrf	?_sprintf+4,c
  8317  0004C0  EC6C  F004         	call	_sprintf	;wreg free
  8318  0004C4  D620               	goto	l7832
  8319  0004C6                     l7938:
  8320                           
  8321                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  8322  0004C6  0EAD               	movlw	low _UART_TX_TEXT
  8323  0004C8  6E1B               	movwf	sprintf@sp,c
  8324  0004CA  0E16               	movlw	low STR_10
  8325  0004CC  6E1C               	movwf	sprintf@f,c
  8326  0004CE  0E3F               	movlw	high STR_10
  8327  0004D0  6E1D               	movwf	sprintf@f+1,c
  8328  0004D2  0E00               	movlw	0
  8329  0004D4  ECE7  F010         	call	_Etat_Get
  8330  0004D8  6E1E               	movwf	?_sprintf+3,c
  8331  0004DA  6A1F               	clrf	?_sprintf+4,c
  8332  0004DC  0E01               	movlw	1
  8333  0004DE  ECE7  F010         	call	_Etat_Get
  8334  0004E2  6E20               	movwf	?_sprintf+5,c
  8335  0004E4  6A21               	clrf	?_sprintf+6,c
  8336  0004E6  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  8337  0004EA  6A23               	clrf	?_sprintf+8,c
  8338  0004EC  C0A1  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  8339  0004F0  6A25               	clrf	?_sprintf+10,c
  8340  0004F2  C09B  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  8341  0004F6  6A27               	clrf	?_sprintf+12,c
  8342  0004F8  C09A  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  8343  0004FC  6A29               	clrf	?_sprintf+14,c
  8344  0004FE  C098  F02A         	movff	_consigne,?_sprintf+15	;volatile
  8345  000502  6A2B               	clrf	?_sprintf+16,c
  8346  000504  C0A7  F02C         	movff	_nb_s_patinage,?_sprintf+17
  8347  000508  6A2D               	clrf	?_sprintf+18,c
  8348  00050A  C0A5  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  8349  00050E  6A2F               	clrf	?_sprintf+20,c
  8350  000510  C0A4  F030         	movff	_nb_100ms_platine,?_sprintf+21
  8351  000514  6A31               	clrf	?_sprintf+22,c
  8352  000516  C0A3  F032         	movff	_nb_s_pelle,?_sprintf+23
  8353  00051A  6A33               	clrf	?_sprintf+24,c
  8354  00051C  0E01               	movlw	1
  8355  00051E  A480               	btfss	3968,2,c	;volatile
  8356  000520  0E00               	movlw	0
  8357  000522  6E34               	movwf	?_sprintf+25,c
  8358  000524  6A35               	clrf	?_sprintf+26,c
  8359  000526  0E01               	movlw	1
  8360  000528  A682               	btfss	3970,3,c	;volatile
  8361  00052A  0E00               	movlw	0
  8362  00052C  6E36               	movwf	?_sprintf+27,c
  8363  00052E  6A37               	clrf	?_sprintf+28,c
  8364  000530  0E01               	movlw	1
  8365  000532  A48D               	btfss	3981,2,c	;volatile
  8366  000534  0E00               	movlw	0
  8367  000536  6E38               	movwf	?_sprintf+29,c
  8368  000538  6A39               	clrf	?_sprintf+30,c
  8369  00053A  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  8370  00053E  6A3B               	clrf	?_sprintf+32,c
  8371  000540  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  8372  000544  6A3D               	clrf	?_sprintf+34,c
  8373  000546  C0AB  F03E         	movff	_Version,?_sprintf+35
  8374  00054A  6A3F               	clrf	?_sprintf+36,c
  8375  00054C  EC6C  F004         	call	_sprintf	;wreg free
  8376  000550  D5DA               	goto	l7832
  8377  000552                     l7942:
  8378                           
  8379                           ;eusart.c: 1148: Alarme_On(7);
  8380  000552  0E07               	movlw	7
  8381  000554  EF28  F013         	goto	_Alarme_On
  8382  000558                     l7944:
  8383                           
  8384                           ;eusart.c: 1155: Etat_Update(0);
  8385  000558  0E00               	movlw	0
  8386  00055A  EC18  F012         	call	_Etat_Update
  8387  00055E                     l7946:
  8388                           
  8389                           ;eusart.c: 1157: P4_busy = 0;
  8390  00055E  0100               	movlb	0	; () banked
  8391  000560  6BAC               	clrf	_P4_busy& (0+255),b
  8392                           
  8393                           ;eusart.c: 1161: break;
  8394  000562  0012               	return	
  8395  000564                     l1409:
  8396                           
  8397                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  8398  000564  A682               	btfss	3970,3,c	;volatile
  8399  000566  D0DB               	goto	l8062
  8400                           
  8401                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  8402  000568  0102               	movlb	2	; () banked
  8403  00056A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8404  00056C  0FD0               	addlw	208
  8405  00056E  0100               	movlb	0	; () banked
  8406  000570  6F8F               	movwf	_direction& (0+255),b	;volatile
  8407                           
  8408                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  8409  000572  0102               	movlb	2	; () banked
  8410  000574  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8411  000576  0FD0               	addlw	208
  8412  000578  0100               	movlb	0	; () banked
  8413  00057A  6F91               	movwf	_type_consigne& (0+255),b
  8414                           
  8415                           ; BSR set to: 0
  8416                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8417  00057C  0102               	movlb	2	; () banked
  8418  00057E  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8419  000580  0D0A               	mullw	10
  8420  000582  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8421  000586  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8422  000588  0D64               	mullw	100
  8423  00058A  50F3               	movf	prodl,w,c
  8424  00058C  0100               	movlb	0	; () banked
  8425  00058E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8426  000590  0102               	movlb	2	; () banked
  8427  000592  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8428  000594  0F30               	addlw	48
  8429  000596  0100               	movlb	0	; () banked
  8430  000598  6F90               	movwf	_mouvement_option& (0+255),b
  8431                           
  8432                           ;eusart.c: 1180: switch (E - 0x30) {
  8433  00059A  D008               	goto	l7954
  8434  00059C                     l1412:
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;eusart.c: 1182: Option_Multitas = 1;
  8438  00059C  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8439  00059E  D004               	goto	L1
  8440  0005A0                     l1414:
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;eusart.c: 1186: Option_Multitas = 0;
  8444  0005A0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8445                           
  8446                           ;eusart.c: 1187: Option_Pailleux = 1;
  8447  0005A2  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8448                           
  8449                           ;eusart.c: 1188: break;
  8450  0005A4  D017               	goto	l7956
  8451  0005A6                     l1415:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;eusart.c: 1192: Option_Multitas = 0;
  8455  0005A6  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8456  0005A8                     L1:
  8457                           
  8458                           ;eusart.c: 1193: Option_Pailleux = 0;
  8459  0005A8  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8460                           
  8461                           ;eusart.c: 1194: }
  8462  0005AA  D014               	goto	l7956
  8463  0005AC                     l7954:
  8464                           
  8465                           ; BSR set to: 0
  8466  0005AC  0ED0               	movlw	208
  8467  0005AE  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8468  0005B0  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8469  0005B2  0102               	movlb	2	; () banked
  8470  0005B4  5185               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8471  0005B6  0100               	movlb	0	; () banked
  8472  0005B8  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8473  0005BA  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8474  0005BC  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8475  0005BE  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8476  0005C0  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8477  0005C2  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8478                           
  8479                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8480                           ; Switch size 1, requested type "speed"
  8481                           ; Number of cases is 1, Range of values is 0 to 0
  8482                           ; switch strategies available:
  8483                           ; Name         Instructions Cycles
  8484                           ; simple_byte            4     3 (average)
  8485                           ;	Chosen strategy is simple_byte
  8486  0005C4  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8487  0005C6  E1EF               	bnz	l1415
  8488                           
  8489                           ; BSR set to: 0
  8490                           ; Switch size 1, requested type "speed"
  8491                           ; Number of cases is 2, Range of values is 1 to 2
  8492                           ; switch strategies available:
  8493                           ; Name         Instructions Cycles
  8494                           ; simple_byte            7     4 (average)
  8495                           ;	Chosen strategy is simple_byte
  8496  0005C8  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8497  0005CA  0A01               	xorlw	1	; case 1
  8498  0005CC  E0E7               	bz	l1412
  8499  0005CE  0A03               	xorlw	3	; case 2
  8500  0005D0  E0E7               	bz	l1414
  8501  0005D2  D7E9               	goto	l1415
  8502  0005D4                     l7956:
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  8506  0005D4  0E31               	movlw	49
  8507  0005D6  0102               	movlb	2	; () banked
  8508  0005D8  1985               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8509  0005DA  E102               	bnz	l1416
  8510                           
  8511                           ; BSR set to: 2
  8512                           ;eusart.c: 1200: Option_Multitas = 1;
  8513  0005DC  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8514                           
  8515                           ;eusart.c: 1202: } else {
  8516  0005DE  D001               	goto	l1417
  8517  0005E0                     l1416:
  8518                           
  8519                           ; BSR set to: 2
  8520                           ;eusart.c: 1203: Option_Multitas = 0;
  8521  0005E0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8522  0005E2                     l1417:
  8523                           
  8524                           ; BSR set to: 2
  8525                           ;eusart.c: 1204: }
  8526                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8527  0005E2  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8528                           
  8529                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8530  0005E6  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8531                           
  8532                           ; BSR set to: 2
  8533                           ;eusart.c: 1214: P4_busy = 1;
  8534  0005EA  0E01               	movlw	1
  8535  0005EC  0100               	movlb	0	; () banked
  8536  0005EE  6FAC               	movwf	_P4_busy& (0+255),b
  8537                           
  8538                           ;eusart.c: 1215: switch (direction) {
  8539  0005F0  D018               	goto	l7988
  8540  0005F2                     l7962:
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;eusart.c: 1218: if (Etat == 0) {
  8544  0005F2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8545  0005F4  E101               	bnz	l7966
  8546  0005F6  D0B7               	goto	l8072
  8547  0005F8                     l7966:
  8548                           
  8549                           ; BSR set to: 0
  8550                           ;eusart.c: 1223: if (Etat != 2) {
  8551  0005F8  0E02               	movlw	2
  8552  0005FA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8553  0005FC  B4D8               	btfsc	status,2,c
  8554  0005FE  0012               	return	
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;eusart.c: 1224: Coupe_Moteur();
  8558  000600  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  8559                           
  8560                           ;eusart.c: 1225: delay_1s();
  8561  000604  EC40  F011         	call	_delay_1s	;wreg free
  8562  000608  D0AE               	goto	l8072
  8563  00060A                     l7974:
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;eusart.c: 1233: if (Etat == 0) {
  8567  00060A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8568  00060C  E101               	bnz	l7978
  8569  00060E  D0AF               	goto	l8078
  8570  000610                     l7978:
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;eusart.c: 1236: if (Etat != 3) {
  8574  000610  0E03               	movlw	3
  8575  000612  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8576  000614  B4D8               	btfsc	status,2,c
  8577  000616  0012               	return	
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;eusart.c: 1237: Coupe_Moteur();
  8581  000618  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  8582                           
  8583                           ;eusart.c: 1238: delay_1s();
  8584  00061C  EC40  F011         	call	_delay_1s	;wreg free
  8585  000620  D0A6               	goto	l8078
  8586  000622                     l7988:
  8587                           
  8588                           ; BSR set to: 0
  8589  000622  518F               	movf	_direction& (0+255),w,b	;volatile
  8590                           
  8591                           ; Switch size 1, requested type "speed"
  8592                           ; Number of cases is 2, Range of values is 0 to 1
  8593                           ; switch strategies available:
  8594                           ; Name         Instructions Cycles
  8595                           ; simple_byte            7     4 (average)
  8596                           ;	Chosen strategy is simple_byte
  8597  000624  E0F2               	bz	l7974
  8598  000626  0A01               	xorlw	1	; case 1
  8599  000628  A4D8               	btfss	status,2,c
  8600  00062A  0012               	return	
  8601  00062C  D7E2               	goto	l7962
  8602  00062E                     l1430:
  8603                           
  8604                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  8605  00062E  A682               	btfss	3970,3,c	;volatile
  8606  000630  D076               	goto	l8062
  8607                           
  8608                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  8609  000632  0102               	movlb	2	; () banked
  8610  000634  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8611  000636  0FD0               	addlw	208
  8612  000638  0100               	movlb	0	; () banked
  8613  00063A  6F8F               	movwf	_direction& (0+255),b	;volatile
  8614                           
  8615                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  8616  00063C  0102               	movlb	2	; () banked
  8617  00063E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8618  000640  0FD0               	addlw	208
  8619  000642  0100               	movlb	0	; () banked
  8620  000644  6F91               	movwf	_type_consigne& (0+255),b
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8624  000646  0102               	movlb	2	; () banked
  8625  000648  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8626  00064A  0D0A               	mullw	10
  8627  00064C  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8628  000650  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8629  000652  0D64               	mullw	100
  8630  000654  50F3               	movf	prodl,w,c
  8631  000656  0100               	movlb	0	; () banked
  8632  000658  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8633  00065A  0102               	movlb	2	; () banked
  8634  00065C  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8635  00065E  0F30               	addlw	48
  8636  000660  0100               	movlb	0	; () banked
  8637  000662  6F90               	movwf	_mouvement_option& (0+255),b
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;eusart.c: 1269: P4_busy = 1;
  8641  000664  0E01               	movlw	1
  8642  000666  6FAC               	movwf	_P4_busy& (0+255),b
  8643                           
  8644                           ;eusart.c: 1270: switch (direction) {
  8645  000668  D018               	goto	l8024
  8646  00066A                     l7998:
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;eusart.c: 1274: if (Etat == 0) {
  8650  00066A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8651  00066C  E101               	bnz	l8002
  8652  00066E  D088               	goto	l8084
  8653  000670                     l8002:
  8654                           
  8655                           ; BSR set to: 0
  8656                           ;eusart.c: 1277: if (Etat != 5) {
  8657  000670  0E05               	movlw	5
  8658  000672  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8659  000674  B4D8               	btfsc	status,2,c
  8660  000676  0012               	return	
  8661                           
  8662                           ; BSR set to: 0
  8663                           ;eusart.c: 1278: Coupe_Moteur();
  8664  000678  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  8665                           
  8666                           ;eusart.c: 1279: delay_1s();
  8667  00067C  EC40  F011         	call	_delay_1s	;wreg free
  8668  000680  D07F               	goto	l8084
  8669  000682                     l8010:
  8670                           
  8671                           ; BSR set to: 0
  8672                           ;eusart.c: 1299: if (Etat == 0) {
  8673  000682  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8674  000684  E101               	bnz	l8014
  8675  000686  D07F               	goto	l8086
  8676  000688                     l8014:
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;eusart.c: 1302: if (Etat != 4) {
  8680  000688  0E04               	movlw	4
  8681  00068A  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8682  00068C  B4D8               	btfsc	status,2,c
  8683  00068E  0012               	return	
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;eusart.c: 1303: Coupe_Moteur();
  8687  000690  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  8688                           
  8689                           ;eusart.c: 1304: delay_1s();
  8690  000694  EC40  F011         	call	_delay_1s	;wreg free
  8691  000698  D076               	goto	l8086
  8692  00069A                     l8024:
  8693                           
  8694                           ; BSR set to: 0
  8695  00069A  518F               	movf	_direction& (0+255),w,b	;volatile
  8696                           
  8697                           ; Switch size 1, requested type "speed"
  8698                           ; Number of cases is 2, Range of values is 0 to 1
  8699                           ; switch strategies available:
  8700                           ; Name         Instructions Cycles
  8701                           ; simple_byte            7     4 (average)
  8702                           ;	Chosen strategy is simple_byte
  8703  00069C  E0F2               	bz	l8010
  8704  00069E  0A01               	xorlw	1	; case 1
  8705  0006A0  A4D8               	btfss	status,2,c
  8706  0006A2  0012               	return	
  8707  0006A4  D7E2               	goto	l7998
  8708  0006A6                     l1444:
  8709                           
  8710                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  8711  0006A6  A682               	btfss	3970,3,c	;volatile
  8712  0006A8  D03A               	goto	l8062
  8713                           
  8714                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  8715  0006AA  0102               	movlb	2	; () banked
  8716  0006AC  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8717  0006AE  0FD0               	addlw	208
  8718  0006B0  0100               	movlb	0	; () banked
  8719  0006B2  6F8F               	movwf	_direction& (0+255),b	;volatile
  8720                           
  8721                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  8722  0006B4  0102               	movlb	2	; () banked
  8723  0006B6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8724  0006B8  0FD0               	addlw	208
  8725  0006BA  0100               	movlb	0	; () banked
  8726  0006BC  6F91               	movwf	_type_consigne& (0+255),b
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8730  0006BE  0102               	movlb	2	; () banked
  8731  0006C0  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8732  0006C2  0D0A               	mullw	10
  8733  0006C4  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8734  0006C8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8735  0006CA  0D64               	mullw	100
  8736  0006CC  50F3               	movf	prodl,w,c
  8737  0006CE  0100               	movlb	0	; () banked
  8738  0006D0  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8739  0006D2  0102               	movlb	2	; () banked
  8740  0006D4  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8741  0006D6  0F30               	addlw	48
  8742  0006D8  0100               	movlb	0	; () banked
  8743  0006DA  6F90               	movwf	_mouvement_option& (0+255),b
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;eusart.c: 1341: P4_busy = 1;
  8747  0006DC  0E01               	movlw	1
  8748  0006DE  6FAC               	movwf	_P4_busy& (0+255),b
  8749                           
  8750                           ;eusart.c: 1342: switch (direction) {
  8751  0006E0  D018               	goto	l8060
  8752  0006E2                     l8034:
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;eusart.c: 1348: if (Etat == 0) {
  8756  0006E2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8757  0006E4  E101               	bnz	l8038
  8758  0006E6  D058               	goto	l8092
  8759  0006E8                     l8038:
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;eusart.c: 1351: if (Etat != 9) {
  8763  0006E8  0E09               	movlw	9
  8764  0006EA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8765  0006EC  B4D8               	btfsc	status,2,c
  8766  0006EE  0012               	return	
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;eusart.c: 1352: Coupe_Moteur();
  8770  0006F0  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  8771                           
  8772                           ;eusart.c: 1353: delay_1s();
  8773  0006F4  EC40  F011         	call	_delay_1s	;wreg free
  8774  0006F8  D04F               	goto	l8092
  8775  0006FA                     l8046:
  8776                           
  8777                           ; BSR set to: 0
  8778                           ;eusart.c: 1371: if (Etat == 0) {
  8779  0006FA  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8780  0006FC  E101               	bnz	l8050
  8781  0006FE  D04F               	goto	l8094
  8782  000700                     l8050:
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;eusart.c: 1374: if (Etat != 8) {
  8786  000700  0E08               	movlw	8
  8787  000702  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8788  000704  B4D8               	btfsc	status,2,c
  8789  000706  0012               	return	
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;eusart.c: 1375: Coupe_Moteur();
  8793  000708  ECC6  F012         	call	_Coupe_Moteur	;wreg free
  8794                           
  8795                           ;eusart.c: 1376: delay_1s();
  8796  00070C  EC40  F011         	call	_delay_1s	;wreg free
  8797  000710  D046               	goto	l8094
  8798  000712                     l8060:
  8799                           
  8800                           ; BSR set to: 0
  8801  000712  518F               	movf	_direction& (0+255),w,b	;volatile
  8802                           
  8803                           ; Switch size 1, requested type "speed"
  8804                           ; Number of cases is 2, Range of values is 0 to 1
  8805                           ; switch strategies available:
  8806                           ; Name         Instructions Cycles
  8807                           ; simple_byte            7     4 (average)
  8808                           ;	Chosen strategy is simple_byte
  8809  000714  E0F2               	bz	l8046
  8810  000716  0A01               	xorlw	1	; case 1
  8811  000718  A4D8               	btfss	status,2,c
  8812  00071A  0012               	return	
  8813  00071C  D7E2               	goto	l8034
  8814  00071E                     l8062:
  8815                           
  8816                           ;eusart.c: 1392: Alarme_On(4);
  8817  00071E  0E04               	movlw	4
  8818  000720  EF28  F013         	goto	_Alarme_On
  8819  000724                     l8064:
  8820                           
  8821                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  8822  000724  0102               	movlb	2	; () banked
  8823  000726  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8824  000728  0FD0               	addlw	208
  8825  00072A  0100               	movlb	0	; () banked
  8826  00072C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  8827                           
  8828                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  8829  00072E  0102               	movlb	2	; () banked
  8830  000730  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8831  000732  0FD0               	addlw	208
  8832  000734  0100               	movlb	0	; () banked
  8833  000736  6F8F               	movwf	_direction& (0+255),b	;volatile
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8837  000738  0102               	movlb	2	; () banked
  8838  00073A  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8839  00073C  0D0A               	mullw	10
  8840  00073E  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8841  000742  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8842  000744  0D64               	mullw	100
  8843  000746  50F3               	movf	prodl,w,c
  8844  000748  0100               	movlb	0	; () banked
  8845  00074A  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8846  00074C  0102               	movlb	2	; () banked
  8847  00074E  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8848  000750  0F30               	addlw	48
  8849  000752  0100               	movlb	0	; () banked
  8850  000754  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  8851                           
  8852                           ;eusart.c: 1410: switch (moteur_indice) {
  8853  000756  D02C               	goto	l8102
  8854  000758                     l1460:
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;eusart.c: 1412: Alarme = 0;
  8858  000758  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  8859                           
  8860                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8861  00075A  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8862                           
  8863                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8864  00075E  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8865                           
  8866                           ;eusart.c: 1416: switch (direction) {
  8867  000762  D008               	goto	l8082
  8868  000764                     l8068:
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;eusart.c: 1419: if (Etat == 0) {
  8872  000764  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8873  000766                     l8072:
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;eusart.c: 1425: Etat_Update(2);
  8877  000766  0E02               	movlw	2
  8878  000768  EF18  F012         	goto	_Etat_Update
  8879  00076C                     l8074:
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;eusart.c: 1430: if (Etat == 0) {
  8883  00076C  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8884  00076E                     l8078:
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;eusart.c: 1434: Etat_Update(3);
  8888  00076E  0E03               	movlw	3
  8889  000770  EF18  F012         	goto	_Etat_Update
  8890  000774                     l8082:
  8891                           
  8892                           ; BSR set to: 0
  8893  000774  518F               	movf	_direction& (0+255),w,b	;volatile
  8894                           
  8895                           ; Switch size 1, requested type "speed"
  8896                           ; Number of cases is 2, Range of values is 0 to 1
  8897                           ; switch strategies available:
  8898                           ; Name         Instructions Cycles
  8899                           ; simple_byte            7     4 (average)
  8900                           ;	Chosen strategy is simple_byte
  8901  000776  E0FA               	bz	l8074
  8902  000778  0A01               	xorlw	1	; case 1
  8903  00077A  A4D8               	btfss	status,2,c
  8904  00077C  0012               	return	
  8905  00077E  D7F2               	goto	l8068
  8906  000780                     l8084:
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;eusart.c: 1451: Etat_Update(5);
  8910  000780  0E05               	movlw	5
  8911  000782  EF18  F012         	goto	_Etat_Update
  8912  000786                     l8086:
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;eusart.c: 1456: Etat_Update(4);
  8916  000786  0E04               	movlw	4
  8917  000788  EF18  F012         	goto	_Etat_Update
  8918  00078C                     l8090:
  8919                           
  8920                           ; BSR set to: 0
  8921  00078C  518F               	movf	_direction& (0+255),w,b	;volatile
  8922                           
  8923                           ; Switch size 1, requested type "speed"
  8924                           ; Number of cases is 2, Range of values is 0 to 1
  8925                           ; switch strategies available:
  8926                           ; Name         Instructions Cycles
  8927                           ; simple_byte            7     4 (average)
  8928                           ;	Chosen strategy is simple_byte
  8929  00078E  E0FB               	bz	l8086
  8930  000790  0A01               	xorlw	1	; case 1
  8931  000792  A4D8               	btfss	status,2,c
  8932  000794  0012               	return	
  8933  000796  D7F4               	goto	l8084
  8934  000798                     l8092:
  8935                           
  8936                           ; BSR set to: 0
  8937                           ;eusart.c: 1473: Etat_Update(9);
  8938  000798  0E09               	movlw	9
  8939  00079A  EF18  F012         	goto	_Etat_Update
  8940  00079E                     l8094:
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;eusart.c: 1478: Etat_Update(8);
  8944  00079E  0E08               	movlw	8
  8945  0007A0  EF18  F012         	goto	_Etat_Update
  8946  0007A4                     l8098:
  8947                           
  8948                           ; BSR set to: 0
  8949  0007A4  518F               	movf	_direction& (0+255),w,b	;volatile
  8950                           
  8951                           ; Switch size 1, requested type "speed"
  8952                           ; Number of cases is 2, Range of values is 0 to 1
  8953                           ; switch strategies available:
  8954                           ; Name         Instructions Cycles
  8955                           ; simple_byte            7     4 (average)
  8956                           ;	Chosen strategy is simple_byte
  8957  0007A6  E0FB               	bz	l8094
  8958  0007A8  0A01               	xorlw	1	; case 1
  8959  0007AA  A4D8               	btfss	status,2,c
  8960  0007AC  0012               	return	
  8961  0007AE  D7F4               	goto	l8092
  8962  0007B0                     l8102:
  8963                           
  8964                           ; BSR set to: 0
  8965  0007B0  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
  8966                           
  8967                           ; Switch size 1, requested type "speed"
  8968                           ; Number of cases is 3, Range of values is 1 to 3
  8969                           ; switch strategies available:
  8970                           ; Name         Instructions Cycles
  8971                           ; simple_byte           10     6 (average)
  8972                           ;	Chosen strategy is simple_byte
  8973  0007B2  0A01               	xorlw	1	; case 1
  8974  0007B4  E0D1               	bz	l1460
  8975  0007B6  0A03               	xorlw	3	; case 2
  8976  0007B8  E0E9               	bz	l8090
  8977  0007BA  0A01               	xorlw	1	; case 3
  8978  0007BC  A4D8               	btfss	status,2,c
  8979  0007BE  0012               	return	
  8980  0007C0  D7F1               	goto	l8098
  8981  0007C2                     l1484:
  8982                           
  8983                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  8984  0007C2  0102               	movlb	2	; () banked
  8985  0007C4  B180               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  8986  0007C6  D002               	bra	u6275
  8987  0007C8  948D               	bcf	3981,2,c	;volatile
  8988  0007CA  D001               	bra	u6276
  8989  0007CC                     u6275:
  8990  0007CC  848D               	bsf	3981,2,c	;volatile
  8991  0007CE                     u6276:
  8992                           
  8993                           ;eusart.c: 1507: break;
  8994  0007CE  0012               	return	
  8995  0007D0                     l8104:
  8996                           
  8997                           ;eusart.c: 1510: Etat_Update(0);
  8998  0007D0  0E00               	movlw	0
  8999  0007D2  EC18  F012         	call	_Etat_Update
  9000  0007D6  D6C3               	goto	l7946
  9001  0007D8                     l1486:
  9002                           
  9003                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  9004  0007D8  C280  F04B         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  9005                           
  9006                           ;eusart.c: 1522: break;
  9007  0007DC  0012               	return	
  9008  0007DE                     l8108:
  9009                           
  9010                           ;eusart.c: 1528: IRQ_Execution(Da);
  9011  0007DE  0102               	movlb	2	; () banked
  9012  0007E0  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  9013  0007E2  EF5D  F00F         	goto	_IRQ_Execution
  9014  0007E6                     l8110:
  9015                           
  9016                           ;eusart.c: 1536: Etat_Update(0);
  9017  0007E6  0E00               	movlw	0
  9018  0007E8  EF18  F012         	goto	_Etat_Update
  9019  0007EC                     l8112:
  9020                           
  9021                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  9022  0007EC  0E0D               	movlw	13
  9023  0007EE  0102               	movlb	2	; () banked
  9024  0007F0  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  9025  0007F2  A4D8               	btfss	status,2,c
  9026                           
  9027                           ; BSR set to: 2
  9028                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  9029  0007F4  848B               	bsf	3979,2,c	;volatile
  9030  0007F6  0012               	return	
  9031  0007F8                     l8118:
  9032  0007F8  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  9033                           
  9034                           ; Switch size 1, requested type "speed"
  9035                           ; Number of cases is 38, Range of values is 48 to 118
  9036                           ; switch strategies available:
  9037                           ; Name         Instructions Cycles
  9038                           ; simple_byte          115    58 (average)
  9039                           ;	Chosen strategy is simple_byte
  9040  0007FA  0A30               	xorlw	48	; case 48
  9041  0007FC  E0F4               	bz	l8110
  9042  0007FE  0A01               	xorlw	1	; case 49
  9043  000800  B4D8               	btfsc	status,2,c
  9044  000802  0012               	return	
  9045  000804  0A03               	xorlw	3	; case 50
  9046  000806  B4D8               	btfsc	status,2,c
  9047  000808  0012               	return	
  9048  00080A  0A01               	xorlw	1	; case 51
  9049  00080C  B4D8               	btfsc	status,2,c
  9050  00080E  0012               	return	
  9051  000810  0A07               	xorlw	7	; case 52
  9052  000812  B4D8               	btfsc	status,2,c
  9053  000814  0012               	return	
  9054  000816  0A01               	xorlw	1	; case 53
  9055  000818  B4D8               	btfsc	status,2,c
  9056  00081A  0012               	return	
  9057  00081C  0A03               	xorlw	3	; case 54
  9058  00081E  B4D8               	btfsc	status,2,c
  9059  000820  0012               	return	
  9060  000822  0A01               	xorlw	1	; case 55
  9061  000824  B4D8               	btfsc	status,2,c
  9062  000826  0012               	return	
  9063  000828  0A76               	xorlw	118	; case 65
  9064  00082A  E102 EFC6  F012    	bz	_Coupe_Moteur
  9065  000830  0A03               	xorlw	3	; case 66
  9066  000832  E101 D738          	bz	l1444
  9067  000836  0A06               	xorlw	6	; case 68
  9068  000838  B4D8               	btfsc	status,2,c
  9069  00083A  0012               	return	
  9070  00083C  0A01               	xorlw	1	; case 69
  9071  00083E  E101 D4E5          	bz	l7864
  9072  000842  0A03               	xorlw	3	; case 70
  9073  000844  B4D8               	btfsc	status,2,c
  9074  000846  0012               	return	
  9075  000848  0A0E               	xorlw	14	; case 72
  9076  00084A  E101 D685          	bz	l7944
  9077  00084E  0A01               	xorlw	1	; case 73
  9078  000850  E0C6               	bz	l8108
  9079  000852  0A05               	xorlw	5	; case 76
  9080  000854  E101 D43F          	bz	l7828
  9081  000858  0A01               	xorlw	1	; case 77
  9082  00085A  E101 D763          	bz	l8064
  9083  00085E  0A1D               	xorlw	29	; case 80
  9084  000860  E101 D5B8          	bz	l7916
  9085  000864  0A02               	xorlw	2	; case 82
  9086  000866  E0AD               	bz	l1484
  9087  000868  0A01               	xorlw	1	; case 83
  9088  00086A  E101 D62C          	bz	l7938
  9089  00086E  0A07               	xorlw	7	; case 84
  9090  000870  E101 D61A          	bz	l7932
  9091  000874  0A01               	xorlw	1	; case 85
  9092  000876  B4D8               	btfsc	status,2,c
  9093  000878  0012               	return	
  9094  00087A  0A03               	xorlw	3	; case 86
  9095  00087C  E101 D5FC          	bz	l7930
  9096  000880  0A01               	xorlw	1	; case 87
  9097  000882  E101 D666          	bz	l7942
  9098  000886  0A0F               	xorlw	15	; case 88
  9099  000888  E101 D66C          	bz	l1409
  9100  00088C  0A02               	xorlw	2	; case 90
  9101  00088E  E101 D6CE          	bz	l1430
  9102  000892  0A38               	xorlw	56	; case 98
  9103  000894  E101 D4AE          	bz	l7860
  9104  000898  0A01               	xorlw	1	; case 99
  9105  00089A  E101 D4A5          	bz	l7858
  9106  00089E  0A06               	xorlw	6	; case 101
  9107  0008A0  E101 D4C4          	bz	l7868
  9108  0008A4  0A03               	xorlw	3	; case 102
  9109  0008A6  E098               	bz	l1486
  9110  0008A8  0A0F               	xorlw	15	; case 105
  9111  0008AA  E101 D421          	bz	l7830
  9112  0008AE  0A05               	xorlw	5	; case 108
  9113  0008B0  E101 D463          	bz	l1366
  9114  0008B4  0A01               	xorlw	1	; case 109
  9115  0008B6  E101 D4DD          	bz	l7876
  9116  0008BA  0A1D               	xorlw	29	; case 112
  9117  0008BC  E101 D427          	bz	l7834
  9118  0008C0  0A01               	xorlw	1	; case 113
  9119  0008C2  E101 D47F          	bz	l7854
  9120  0008C6  0A03               	xorlw	3	; case 114
  9121  0008C8  E083               	bz	l8104
  9122  0008CA  0A01               	xorlw	1	; case 115
  9123  0008CC  E101 D43F          	bz	l7838
  9124  0008D0  0A05               	xorlw	5	; case 118
  9125  0008D2  E101 D5EC          	bz	l7934
  9126  0008D6  D78A               	goto	l8112
  9127  0008D8                     __end_of_EUSART1_RX_T3_LOCAL:
  9128                           	opt stack 0
  9129                           tblptru	equ	0xFF8
  9130                           prodh	equ	0xFF4
  9131                           prodl	equ	0xFF3
  9132                           intcon	equ	0xFF2
  9133                           intcon2	equ	0xFF1
  9134                           intcon3	equ	0xFF0
  9135                           postinc0	equ	0xFEE
  9136                           wreg	equ	0xFE8
  9137                           indf1	equ	0xFE7
  9138                           postdec1	equ	0xFE5
  9139                           fsr1h	equ	0xFE2
  9140                           fsr1l	equ	0xFE1
  9141                           indf2	equ	0xFDF
  9142                           fsr2h	equ	0xFDA
  9143                           fsr2l	equ	0xFD9
  9144                           status	equ	0xFD8
  9145                           
  9146 ;; *************** function _sprintf *****************
  9147 ;; Defined at:
  9148 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  9149 ;; Parameters:    Size  Location     Type
  9150 ;;  sp              1   26[COMRAM] PTR unsigned char 
  9151 ;;		 -> UART_TX_TEXT(64), 
  9152 ;;  f               2   27[COMRAM] PTR const unsigned char 
  9153 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  9154 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  9155 ;;		 -> STR_2(95), STR_1(3), 
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  idx             1    4[BANK0 ] unsigned char 
  9158 ;;  tmpval          4    0        struct .
  9159 ;;  cp              3    0        PTR const unsigned char 
  9160 ;;  width           2   10[BANK0 ] int 
  9161 ;;  val             2    7[BANK0 ] unsigned int 
  9162 ;;  len             2    0        unsigned int 
  9163 ;;  c               1   12[BANK0 ] char 
  9164 ;;  flag            1    9[BANK0 ] unsigned char 
  9165 ;;  prec            1    6[BANK0 ] char 
  9166 ;;  ap              1    5[BANK0 ] PTR void [1]
  9167 ;;		 -> ?_sprintf(2), 
  9168 ;; Return value:  Size  Location     Type
  9169 ;;                  2   26[COMRAM] int 
  9170 ;; Registers used:
  9171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9172 ;; Tracked objects:
  9173 ;;		On entry : 0/1
  9174 ;;		On exit  : 3F/0
  9175 ;;		Unchanged: 0/0
  9176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9177 ;;      Params:        37       0       0       0
  9178 ;;      Locals:         0       9       0       0
  9179 ;;      Temps:          0       4       0       0
  9180 ;;      Totals:        37      13       0       0
  9181 ;;Total ram usage:       50 bytes
  9182 ;; Hardware stack levels used:    1
  9183 ;; Hardware stack levels required when called:   11
  9184 ;; This function calls:
  9185 ;;		___lwdiv
  9186 ;;		___lwmod
  9187 ;;		___wmul
  9188 ;;		_isdigit
  9189 ;; This function is called by:
  9190 ;;		_EUSART1_RX_T3_LOCAL
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text48
  9195  0008D8                     __ptext48:
  9196                           	opt stack 0
  9197  0008D8                     _sprintf:
  9198                           	opt stack 15
  9199                           
  9200                           ;doprnt.c: 494: va_list ap;
  9201                           ;doprnt.c: 499: signed char c;
  9202                           ;doprnt.c: 501: int width;
  9203                           ;doprnt.c: 506: signed char prec;
  9204                           ;doprnt.c: 508: unsigned char flag;
  9205                           ;doprnt.c: 523: union {
  9206                           ;doprnt.c: 524: unsigned long vd;
  9207                           ;doprnt.c: 525: double integ;
  9208                           ;doprnt.c: 526: } tmpval;
  9209                           ;doprnt.c: 528: unsigned int val;
  9210                           ;doprnt.c: 529: unsigned len;
  9211                           ;doprnt.c: 530: const char * cp;
  9212                           ;doprnt.c: 533: *ap = __va_start();
  9213                           
  9214                           ;incstack = 0
  9215  0008D8  0E1E               	movlw	low (?_sprintf+3)
  9216  0008DA  0100               	movlb	0	; () banked
  9217  0008DC  6FF2               	movwf	sprintf@ap& (0+255),b
  9218                           
  9219                           ;doprnt.c: 536: while(c = *f++) {
  9220  0008DE  D15E               	goto	l7818
  9221  0008E0                     l7686:
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;doprnt.c: 538: if(c != '%')
  9225  0008E0  0E25               	movlw	37
  9226  0008E2  19F9               	xorwf	sprintf@c& (0+255),w,b
  9227  0008E4  E007               	bz	l1700
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;doprnt.c: 540: {
  9231                           ;doprnt.c: 541: ((*sp++ = (c)));
  9232  0008E6  501B               	movf	sprintf@sp,w,c
  9233  0008E8  6ED9               	movwf	fsr2l,c
  9234  0008EA  6ADA               	clrf	fsr2h,c
  9235  0008EC  C0F9  FFDF         	movff	sprintf@c,indf2
  9236                           
  9237                           ; BSR set to: 0
  9238  0008F0  2A1B               	incf	sprintf@sp,f,c
  9239                           
  9240                           ;doprnt.c: 542: continue;
  9241  0008F2  D154               	goto	l7818
  9242  0008F4                     l1700:
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;doprnt.c: 543: }
  9246                           ;doprnt.c: 546: width = 0;
  9247  0008F4  6BF7               	clrf	sprintf@width& (0+255),b
  9248  0008F6  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9249                           
  9250                           ;doprnt.c: 548: flag = 0;
  9251  0008F8  6BF6               	clrf	sprintf@flag& (0+255),b
  9252  0008FA  D003               	goto	l7696
  9253  0008FC                     l7692:
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;doprnt.c: 580: flag |= 0x04;
  9257  0008FC  85F6               	bsf	sprintf@flag& (0+255),2,b
  9258                           
  9259                           ;doprnt.c: 581: f++;
  9260  0008FE  4A1C               	infsnz	sprintf@f,f,c
  9261  000900  2A1D               	incf	sprintf@f+1,f,c
  9262  000902                     l7696:
  9263                           
  9264                           ; BSR set to: 0
  9265  000902  C01C  FFF6         	movff	sprintf@f,tblptrl
  9266  000906  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9267  00090A                     	if	0	;tblptru may be non-zero
  9268  00090A                     	endif
  9269  00090A                     	if	0	;tblptru may be non-zero
  9270  00090A                     	endif
  9271  00090A  0008               	tblrd		*
  9272  00090C  50F5               	movf	tablat,w,c
  9273                           
  9274                           ; Switch size 1, requested type "speed"
  9275                           ; Number of cases is 1, Range of values is 48 to 48
  9276                           ; switch strategies available:
  9277                           ; Name         Instructions Cycles
  9278                           ; simple_byte            4     3 (average)
  9279                           ;	Chosen strategy is simple_byte
  9280  00090E  0A30               	xorlw	48	; case 48
  9281  000910  E0F5               	bz	l7692
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9285  000912  C01C  FFF6         	movff	sprintf@f,tblptrl
  9286  000916  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9287  00091A                     	if	0	;tblptru may be non-zero
  9288  00091A                     	endif
  9289  00091A                     	if	0	;tblptru may be non-zero
  9290  00091A                     	endif
  9291  00091A  0008               	tblrd		*
  9292  00091C  50F5               	movf	tablat,w,c
  9293  00091E  EC53  F012         	call	_isdigit
  9294  000922  E332               	bnc	l7714
  9295                           
  9296                           ;doprnt.c: 598: width = 0;
  9297  000924  0100               	movlb	0	; () banked
  9298  000926  6BF7               	clrf	sprintf@width& (0+255),b
  9299  000928  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9300  00092A                     l7702:
  9301                           
  9302                           ;doprnt.c: 600: width *= 10;
  9303  00092A  C0F7  F00F         	movff	sprintf@width,___wmul@multiplier
  9304  00092E  C0F8  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  9305  000932  6A12               	clrf	___wmul@multiplicand+1,c
  9306  000934  0E0A               	movlw	10
  9307  000936  6E11               	movwf	___wmul@multiplicand,c
  9308  000938  ECA1  F011         	call	___wmul	;wreg free
  9309  00093C  C00F  F0F7         	movff	?___wmul,sprintf@width
  9310  000940  C010  F0F8         	movff	?___wmul+1,sprintf@width+1
  9311                           
  9312                           ;doprnt.c: 601: width += *f++ - '0';
  9313  000944  0ED0               	movlw	208
  9314  000946  0100               	movlb	0	; () banked
  9315  000948  6FED               	movwf	??_sprintf& (0+255),b
  9316  00094A  69EE               	setf	(??_sprintf+1)& (0+255),b
  9317  00094C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9318  000950  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9319  000954                     	if	0	;tblptru may be non-zero
  9320  000954                     	endif
  9321  000954                     	if	0	;tblptru may be non-zero
  9322  000954                     	endif
  9323  000954  0008               	tblrd		*
  9324  000956  50F5               	movf	tablat,w,c
  9325  000958  6FEF               	movwf	(??_sprintf+2)& (0+255),b
  9326  00095A  6BF0               	clrf	(??_sprintf+3)& (0+255),b
  9327  00095C  51ED               	movf	??_sprintf& (0+255),w,b
  9328  00095E  27EF               	addwf	(??_sprintf+2)& (0+255),f,b
  9329  000960  51EE               	movf	(??_sprintf+1)& (0+255),w,b
  9330  000962  23F0               	addwfc	(??_sprintf+3)& (0+255),f,b
  9331  000964  51EF               	movf	(??_sprintf+2)& (0+255),w,b
  9332  000966  27F7               	addwf	sprintf@width& (0+255),f,b
  9333  000968  51F0               	movf	(??_sprintf+3)& (0+255),w,b
  9334  00096A  23F8               	addwfc	(sprintf@width+1)& (0+255),f,b
  9335                           
  9336                           ; BSR set to: 0
  9337  00096C  4A1C               	infsnz	sprintf@f,f,c
  9338  00096E  2A1D               	incf	sprintf@f+1,f,c
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9342  000970  C01C  FFF6         	movff	sprintf@f,tblptrl
  9343  000974  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9344  000978                     	if	0	;tblptru may be non-zero
  9345  000978                     	endif
  9346  000978                     	if	0	;tblptru may be non-zero
  9347  000978                     	endif
  9348  000978  0008               	tblrd		*
  9349  00097A  50F5               	movf	tablat,w,c
  9350  00097C  EC53  F012         	call	_isdigit
  9351  000980  E303               	bnc	l7714
  9352  000982  D7D3               	goto	l7702
  9353  000984                     l7710:
  9354                           
  9355                           ; BSR set to: 0
  9356                           ;doprnt.c: 718: case 'x':
  9357                           ;doprnt.c: 721: flag |= 0x80;
  9358  000984  8FF6               	bsf	sprintf@flag& (0+255),7,b
  9359                           
  9360                           ;doprnt.c: 723: break;
  9361  000986  D016               	goto	l1715
  9362  000988                     l7714:
  9363  000988  C01C  FFF6         	movff	sprintf@f,tblptrl
  9364  00098C  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9365  000990  4A1C               	infsnz	sprintf@f,f,c
  9366  000992  2A1D               	incf	sprintf@f+1,f,c
  9367  000994                     	if	0	;tblptru may be non-zero
  9368  000994                     	endif
  9369  000994                     	if	0	;tblptru may be non-zero
  9370  000994                     	endif
  9371  000994  0008               	tblrd		*
  9372  000996  CFF5 F0F9          	movff	tablat,sprintf@c
  9373  00099A  0100               	movlb	0	; () banked
  9374  00099C  51F9               	movf	sprintf@c& (0+255),w,b
  9375                           
  9376                           ; Switch size 1, requested type "speed"
  9377                           ; Number of cases is 5, Range of values is 0 to 120
  9378                           ; switch strategies available:
  9379                           ; Name         Instructions Cycles
  9380                           ; simple_byte           16     9 (average)
  9381                           ;	Chosen strategy is simple_byte
  9382  00099E  E101 D109          	bz	l7820
  9383  0009A2  0A58               	xorlw	88	; case 88
  9384  0009A4  E0EF               	bz	l7710
  9385  0009A6  0A3C               	xorlw	60	; case 100
  9386  0009A8  E005               	bz	l1715
  9387  0009AA  0A0D               	xorlw	13	; case 105
  9388  0009AC  E003               	bz	l1715
  9389  0009AE  0A11               	xorlw	17	; case 120
  9390  0009B0  E0E9               	bz	l7710
  9391  0009B2  D0F4               	goto	l7818
  9392  0009B4                     l1715:
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9396  0009B4  BFF6               	btfsc	sprintf@flag& (0+255),7,b
  9397  0009B6  D012               	goto	l7726
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;doprnt.c: 1253: {
  9401                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9402  0009B8  51F2               	movf	sprintf@ap& (0+255),w,b
  9403  0009BA  6ED9               	movwf	fsr2l,c
  9404  0009BC  6ADA               	clrf	fsr2h,c
  9405  0009BE  CFDE F0F4          	movff	postinc2,sprintf@val
  9406  0009C2  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9407                           
  9408                           ; BSR set to: 0
  9409  0009C6  0E02               	movlw	2
  9410  0009C8  27F2               	addwf	sprintf@ap& (0+255),f,b
  9411                           
  9412                           ; BSR set to: 0
  9413                           ;doprnt.c: 1261: if((int)val < 0) {
  9414  0009CA  AFF5               	btfss	(sprintf@val+1)& (0+255),7,b
  9415  0009CC  D03D               	goto	l7760
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;doprnt.c: 1262: flag |= 0x03;
  9419  0009CE  0E03               	movlw	3
  9420  0009D0  13F6               	iorwf	sprintf@flag& (0+255),f,b
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;doprnt.c: 1263: val = -val;
  9424  0009D2  6DF4               	negf	sprintf@val& (0+255),b
  9425  0009D4  1FF5               	comf	(sprintf@val+1)& (0+255),f,b
  9426  0009D6  B0D8               	btfsc	status,0,c
  9427  0009D8  2BF5               	incf	(sprintf@val+1)& (0+255),f,b
  9428  0009DA  D036               	goto	l7760
  9429  0009DC                     l7726:
  9430                           
  9431                           ; BSR set to: 0
  9432                           ;doprnt.c: 1268: else
  9433                           ;doprnt.c: 1273: {
  9434                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9435  0009DC  51F2               	movf	sprintf@ap& (0+255),w,b
  9436  0009DE  6ED9               	movwf	fsr2l,c
  9437  0009E0  6ADA               	clrf	fsr2h,c
  9438  0009E2  CFDE F0F4          	movff	postinc2,sprintf@val
  9439  0009E6  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9440                           
  9441                           ; BSR set to: 0
  9442  0009EA  0E02               	movlw	2
  9443  0009EC  27F2               	addwf	sprintf@ap& (0+255),f,b
  9444  0009EE  D02C               	goto	l7760
  9445  0009F0                     l7730:
  9446                           
  9447                           ; BSR set to: 0
  9448                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9449  0009F0  0E01               	movlw	1
  9450  0009F2  6FF9               	movwf	sprintf@c& (0+255),b
  9451  0009F4                     l7736:
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;doprnt.c: 1306: if(val < dpowers[c])
  9455  0009F4  51F9               	movf	sprintf@c& (0+255),w,b
  9456  0009F6  0D02               	mullw	2
  9457  0009F8  0EA5               	movlw	low _dpowers
  9458  0009FA  24F3               	addwf	prodl,w,c
  9459  0009FC  6EF6               	movwf	tblptrl,c
  9460  0009FE  0E3E               	movlw	high _dpowers
  9461  000A00  20F4               	addwfc	prodh,w,c
  9462  000A02  6EF7               	movwf	tblptrh,c
  9463  000A04                     	if	0	;There are less than 3 active tblptr bytes
  9464  000A04                     	endif
  9465  000A04  0009               	tblrd		*+
  9466  000A06  50F5               	movf	tablat,w,c
  9467  000A08  5DF4               	subwf	sprintf@val& (0+255),w,b
  9468  000A0A  0009               	tblrd		*+
  9469  000A0C  50F5               	movf	tablat,w,c
  9470  000A0E  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9471  000A10  E320               	bnc	l7762
  9472                           
  9473                           ; BSR set to: 0
  9474  000A12  2BF9               	incf	sprintf@c& (0+255),f,b
  9475                           
  9476                           ; BSR set to: 0
  9477  000A14  0E05               	movlw	5
  9478  000A16  19F9               	xorwf	sprintf@c& (0+255),w,b
  9479  000A18  E01C               	bz	l7762
  9480  000A1A  D7EC               	goto	l7736
  9481  000A1C                     l7744:
  9482                           
  9483                           ; BSR set to: 0
  9484                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9485  000A1C  0E01               	movlw	1
  9486  000A1E  6FF9               	movwf	sprintf@c& (0+255),b
  9487  000A20                     l7750:
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9491  000A20  51F9               	movf	sprintf@c& (0+255),w,b
  9492  000A22  0D02               	mullw	2
  9493  000A24  0EAF               	movlw	low _hexpowers
  9494  000A26  24F3               	addwf	prodl,w,c
  9495  000A28  6EF6               	movwf	tblptrl,c
  9496  000A2A  0E3E               	movlw	high _hexpowers
  9497  000A2C  20F4               	addwfc	prodh,w,c
  9498  000A2E  6EF7               	movwf	tblptrh,c
  9499  000A30                     	if	0	;There are less than 3 active tblptr bytes
  9500  000A30                     	endif
  9501  000A30  0009               	tblrd		*+
  9502  000A32  50F5               	movf	tablat,w,c
  9503  000A34  5DF4               	subwf	sprintf@val& (0+255),w,b
  9504  000A36  0009               	tblrd		*+
  9505  000A38  50F5               	movf	tablat,w,c
  9506  000A3A  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9507  000A3C  E30A               	bnc	l7762
  9508                           
  9509                           ; BSR set to: 0
  9510  000A3E  2BF9               	incf	sprintf@c& (0+255),f,b
  9511                           
  9512                           ; BSR set to: 0
  9513  000A40  0E04               	movlw	4
  9514  000A42  19F9               	xorwf	sprintf@c& (0+255),w,b
  9515  000A44  E006               	bz	l7762
  9516  000A46  D7EC               	goto	l7750
  9517  000A48                     l7760:
  9518                           
  9519                           ; BSR set to: 0
  9520  000A48  51F6               	movf	sprintf@flag& (0+255),w,b
  9521  000A4A  0B80               	andlw	128
  9522                           
  9523                           ; Switch size 1, requested type "speed"
  9524                           ; Number of cases is 2, Range of values is 0 to 128
  9525                           ; switch strategies available:
  9526                           ; Name         Instructions Cycles
  9527                           ; simple_byte            7     4 (average)
  9528                           ;	Chosen strategy is simple_byte
  9529  000A4C  E0D1               	bz	l7730
  9530  000A4E  0A80               	xorlw	128	; case 128
  9531  000A50  E0E5               	bz	l7744
  9532  000A52                     l7762:
  9533                           
  9534                           ; BSR set to: 0
  9535                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9536  000A52  51F7               	movf	sprintf@width& (0+255),w,b
  9537  000A54  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9538  000A56  E008               	bz	l7768
  9539                           
  9540                           ; BSR set to: 0
  9541  000A58  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9542  000A5C  0E03               	movlw	3
  9543  000A5E  17ED               	andwf	??_sprintf& (0+255),f,b
  9544  000A60  E003               	bz	l7768
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;doprnt.c: 1346: width--;
  9548  000A62  07F7               	decf	sprintf@width& (0+255),f,b
  9549  000A64  A0D8               	btfss	status,0,c
  9550  000A66  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9551  000A68                     l7768:
  9552                           
  9553                           ; BSR set to: 0
  9554                           ;doprnt.c: 1381: if(width > c)
  9555  000A68  0E80               	movlw	128
  9556  000A6A  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9557  000A6C  0E7F               	movlw	127
  9558  000A6E  6FED               	movwf	??_sprintf& (0+255),b
  9559  000A70  51F7               	movf	sprintf@width& (0+255),w,b
  9560  000A72  5DF9               	subwf	sprintf@c& (0+255),w,b
  9561  000A74  51F8               	movf	(sprintf@width+1)& (0+255),w,b
  9562  000A76  0A80               	xorlw	128
  9563  000A78  59ED               	subwfb	??_sprintf& (0+255),w,b
  9564  000A7A  E207               	bc	l1733
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;doprnt.c: 1382: width -= c;
  9568  000A7C  51F9               	movf	sprintf@c& (0+255),w,b
  9569  000A7E  5FF7               	subwf	sprintf@width& (0+255),f,b
  9570  000A80  0E00               	movlw	0
  9571  000A82  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9572  000A84  0EFF               	movlw	255
  9573  000A86  5BF8               	subwfb	(sprintf@width+1)& (0+255),f,b
  9574  000A88  D002               	goto	l1734
  9575  000A8A                     l1733:
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;doprnt.c: 1383: else
  9579                           ;doprnt.c: 1384: width = 0;
  9580  000A8A  6BF7               	clrf	sprintf@width& (0+255),b
  9581  000A8C  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9582  000A8E                     l1734:
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;doprnt.c: 1387: if(flag & 0x04) {
  9586  000A8E  A5F6               	btfss	sprintf@flag& (0+255),2,b
  9587  000A90  D018               	goto	l7786
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;doprnt.c: 1392: if(flag & 0x03)
  9591  000A92  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9592  000A96  0E03               	movlw	3
  9593  000A98  17ED               	andwf	??_sprintf& (0+255),f,b
  9594  000A9A  E006               	bz	l7778
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9598  000A9C  501B               	movf	sprintf@sp,w,c
  9599  000A9E  6ED9               	movwf	fsr2l,c
  9600  000AA0  6ADA               	clrf	fsr2h,c
  9601  000AA2  0E2D               	movlw	45
  9602  000AA4  6EDF               	movwf	indf2,c
  9603                           
  9604                           ; BSR set to: 0
  9605  000AA6  2A1B               	incf	sprintf@sp,f,c
  9606  000AA8                     l7778:
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;doprnt.c: 1415: if(width)
  9610  000AA8  51F7               	movf	sprintf@width& (0+255),w,b
  9611  000AAA  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9612  000AAC  E024               	bz	l7800
  9613                           
  9614                           ; BSR set to: 0
  9615                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9616  000AAE  501B               	movf	sprintf@sp,w,c
  9617  000AB0  6ED9               	movwf	fsr2l,c
  9618  000AB2  6ADA               	clrf	fsr2h,c
  9619  000AB4  0E30               	movlw	48
  9620  000AB6  6EDF               	movwf	indf2,c
  9621                           
  9622                           ; BSR set to: 0
  9623  000AB8  2A1B               	incf	sprintf@sp,f,c
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;doprnt.c: 1418: while(--width);
  9627  000ABA  07F7               	decf	sprintf@width& (0+255),f,b
  9628  000ABC  A0D8               	btfss	status,0,c
  9629  000ABE  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9630  000AC0  D7F3               	goto	l7778
  9631  000AC2                     l7786:
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;doprnt.c: 1422: {
  9635                           ;doprnt.c: 1424: if(width
  9636                           ;doprnt.c: 1428: )
  9637  000AC2  51F7               	movf	sprintf@width& (0+255),w,b
  9638  000AC4  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9639  000AC6  E00C               	bz	l7794
  9640  000AC8                     l7788:
  9641                           
  9642                           ; BSR set to: 0
  9643                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9644  000AC8  501B               	movf	sprintf@sp,w,c
  9645  000ACA  6ED9               	movwf	fsr2l,c
  9646  000ACC  6ADA               	clrf	fsr2h,c
  9647  000ACE  0E20               	movlw	32
  9648  000AD0  6EDF               	movwf	indf2,c
  9649                           
  9650                           ; BSR set to: 0
  9651  000AD2  2A1B               	incf	sprintf@sp,f,c
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;doprnt.c: 1431: while(--width);
  9655  000AD4  07F7               	decf	sprintf@width& (0+255),f,b
  9656  000AD6  A0D8               	btfss	status,0,c
  9657  000AD8  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9658  000ADA  51F7               	movf	sprintf@width& (0+255),w,b
  9659  000ADC  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9660  000ADE  E1F4               	bnz	l7788
  9661  000AE0                     l7794:
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;doprnt.c: 1438: if(flag & 0x03)
  9665  000AE0  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9666  000AE4  0E03               	movlw	3
  9667  000AE6  17ED               	andwf	??_sprintf& (0+255),f,b
  9668  000AE8  E006               	bz	l7800
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9672  000AEA  501B               	movf	sprintf@sp,w,c
  9673  000AEC  6ED9               	movwf	fsr2l,c
  9674  000AEE  6ADA               	clrf	fsr2h,c
  9675  000AF0  0E2D               	movlw	45
  9676  000AF2  6EDF               	movwf	indf2,c
  9677                           
  9678                           ; BSR set to: 0
  9679  000AF4  2A1B               	incf	sprintf@sp,f,c
  9680  000AF6                     l7800:
  9681                           
  9682                           ; BSR set to: 0
  9683                           ;doprnt.c: 1469: }
  9684                           ;doprnt.c: 1472: prec = c;
  9685  000AF6  C0F9  F0F3         	movff	sprintf@c,sprintf@prec
  9686                           
  9687                           ;doprnt.c: 1474: while(prec--) {
  9688  000AFA  D04D               	goto	l7816
  9689  000AFC                     l7802:
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9693  000AFC  51F3               	movf	sprintf@prec& (0+255),w,b
  9694  000AFE  0D02               	mullw	2
  9695  000B00  0EA5               	movlw	low _dpowers
  9696  000B02  24F3               	addwf	prodl,w,c
  9697  000B04  6EF6               	movwf	tblptrl,c
  9698  000B06  0E3E               	movlw	high _dpowers
  9699  000B08  20F4               	addwfc	prodh,w,c
  9700  000B0A  6EF7               	movwf	tblptrh,c
  9701  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  9702  000B0C                     	endif
  9703  000B0C  0009               	tblrd		*+
  9704  000B0E  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9705  000B12  000A               	tblrd		*-
  9706  000B14  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9707  000B18  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9708  000B1C  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9709  000B20  ECFC  F00F         	call	___lwdiv	;wreg free
  9710  000B24  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  9711  000B28  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  9712  000B2C  6A19               	clrf	___lwmod@divisor+1,c
  9713  000B2E  0E0A               	movlw	10
  9714  000B30  6E18               	movwf	___lwmod@divisor,c
  9715  000B32  EC42  F010         	call	___lwmod	;wreg free
  9716  000B36  5016               	movf	?___lwmod,w,c
  9717  000B38  0F30               	addlw	48
  9718  000B3A  6FF9               	movwf	sprintf@c& (0+255),b
  9719                           
  9720                           ;doprnt.c: 1491: break;
  9721  000B3C  D026               	goto	l7812
  9722  000B3E                     l7804:
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;doprnt.c: 1499: {
  9726                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9727  000B3E  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9728  000B42  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9729  000B46  51F3               	movf	sprintf@prec& (0+255),w,b
  9730  000B48  0D02               	mullw	2
  9731  000B4A  0EAF               	movlw	low _hexpowers
  9732  000B4C  24F3               	addwf	prodl,w,c
  9733  000B4E  6EF6               	movwf	tblptrl,c
  9734  000B50  0E3E               	movlw	high _hexpowers
  9735  000B52  20F4               	addwfc	prodh,w,c
  9736  000B54  6EF7               	movwf	tblptrh,c
  9737  000B56                     	if	0	;There are less than 3 active tblptr bytes
  9738  000B56                     	endif
  9739  000B56  0009               	tblrd		*+
  9740  000B58  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9741  000B5C  000A               	tblrd		*-
  9742  000B5E  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9743  000B62  ECFC  F00F         	call	___lwdiv	;wreg free
  9744  000B66  500F               	movf	?___lwdiv,w,c
  9745  000B68  0B0F               	andlw	15
  9746  000B6A  6FF1               	movwf	sprintf@idx& (0+255),b
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  9750  000B6C  0EDB               	movlw	low STR_11
  9751  000B6E  25F1               	addwf	sprintf@idx& (0+255),w,b
  9752  000B70  6EF6               	movwf	tblptrl,c
  9753  000B72  6AF7               	clrf	tblptrh,c
  9754  000B74  0E3F               	movlw	high STR_11
  9755  000B76  22F7               	addwfc	tblptrh,f,c
  9756  000B78                     	if	0	;There are less than 3 active tblptr bytes
  9757  000B78                     	endif
  9758  000B78  0008               	tblrd		*
  9759  000B7A  CFF5 F0F9          	movff	tablat,sprintf@c
  9760                           
  9761                           ;doprnt.c: 1508: }
  9762                           ;doprnt.c: 1510: break;
  9763  000B7E  D005               	goto	l7812
  9764  000B80                     l7810:
  9765                           
  9766                           ; BSR set to: 0
  9767  000B80  51F6               	movf	sprintf@flag& (0+255),w,b
  9768  000B82  0B80               	andlw	128
  9769                           
  9770                           ; Switch size 1, requested type "speed"
  9771                           ; Number of cases is 2, Range of values is 0 to 128
  9772                           ; switch strategies available:
  9773                           ; Name         Instructions Cycles
  9774                           ; simple_byte            7     4 (average)
  9775                           ;	Chosen strategy is simple_byte
  9776  000B84  E0BB               	bz	l7802
  9777  000B86  0A80               	xorlw	128	; case 128
  9778  000B88  E0DA               	bz	l7804
  9779  000B8A                     l7812:
  9780                           
  9781                           ; BSR set to: 0
  9782                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9783  000B8A  501B               	movf	sprintf@sp,w,c
  9784  000B8C  6ED9               	movwf	fsr2l,c
  9785  000B8E  6ADA               	clrf	fsr2h,c
  9786  000B90  C0F9  FFDF         	movff	sprintf@c,indf2
  9787                           
  9788                           ; BSR set to: 0
  9789  000B94  2A1B               	incf	sprintf@sp,f,c
  9790  000B96                     l7816:
  9791                           
  9792                           ; BSR set to: 0
  9793  000B96  07F3               	decf	sprintf@prec& (0+255),f,b
  9794  000B98  29F3               	incf	sprintf@prec& (0+255),w,b
  9795  000B9A  E1F2               	bnz	l7810
  9796  000B9C                     l7818:
  9797                           
  9798                           ; BSR set to: 0
  9799  000B9C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9800  000BA0  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9801  000BA4  4A1C               	infsnz	sprintf@f,f,c
  9802  000BA6  2A1D               	incf	sprintf@f+1,f,c
  9803  000BA8                     	if	0	;tblptru may be non-zero
  9804  000BA8                     	endif
  9805  000BA8                     	if	0	;tblptru may be non-zero
  9806  000BA8                     	endif
  9807  000BA8  0008               	tblrd		*
  9808  000BAA  CFF5 F0F9          	movff	tablat,sprintf@c
  9809  000BAE  51F9               	movf	sprintf@c& (0+255),w,b
  9810  000BB0  E001 D696          	bnz	l7686
  9811  000BB4                     l7820:
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;doprnt.c: 1538: *sp = 0;
  9815  000BB4  501B               	movf	sprintf@sp,w,c
  9816  000BB6  6ED9               	movwf	fsr2l,c
  9817  000BB8  6ADA               	clrf	fsr2h,c
  9818  000BBA  6ADF               	clrf	indf2,c
  9819                           
  9820                           ; BSR set to: 0
  9821  000BBC  0C00               	retlw	0	;funcret
  9822  000BBE                     __end_of_sprintf:
  9823                           	opt stack 0
  9824                           tblptru	equ	0xFF8
  9825                           tblptrh	equ	0xFF7
  9826                           tblptrl	equ	0xFF6
  9827                           tablat	equ	0xFF5
  9828                           prodh	equ	0xFF4
  9829                           prodl	equ	0xFF3
  9830                           intcon	equ	0xFF2
  9831                           intcon2	equ	0xFF1
  9832                           intcon3	equ	0xFF0
  9833                           postinc0	equ	0xFEE
  9834                           wreg	equ	0xFE8
  9835                           indf1	equ	0xFE7
  9836                           postdec1	equ	0xFE5
  9837                           fsr1h	equ	0xFE2
  9838                           fsr1l	equ	0xFE1
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _isdigit *****************
  9847 ;; Defined at:
  9848 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  c               1    wreg     unsigned char 
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;  c               1   16[COMRAM] unsigned char 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;		None               void
  9855 ;; Registers used:
  9856 ;;		wreg, status,2, status,0
  9857 ;; Tracked objects:
  9858 ;;		On entry : 3F/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9862 ;;      Params:         0       0       0       0
  9863 ;;      Locals:         2       0       0       0
  9864 ;;      Temps:          1       0       0       0
  9865 ;;      Totals:         3       0       0       0
  9866 ;;Total ram usage:        3 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:   10
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_sprintf
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text49
  9877  0024A6                     __ptext49:
  9878                           	opt stack 0
  9879  0024A6                     _isdigit:
  9880                           	opt stack 15
  9881                           
  9882                           ; BSR set to: 0
  9883                           ;incstack = 0
  9884                           ;isdigit@c stored from wreg
  9885  0024A6  6E11               	movwf	isdigit@c,c
  9886  0024A8  6A10               	clrf	_isdigit$3602,c
  9887  0024AA  0E3A               	movlw	58
  9888  0024AC  6011               	cpfslt	isdigit@c,c
  9889  0024AE  D005               	goto	l7508
  9890  0024B0  0E2F               	movlw	47
  9891  0024B2  6411               	cpfsgt	isdigit@c,c
  9892  0024B4  D002               	goto	l7508
  9893  0024B6  0E01               	movlw	1
  9894  0024B8  6E10               	movwf	_isdigit$3602,c
  9895  0024BA                     l7508:
  9896  0024BA  C010  F00F         	movff	_isdigit$3602,??_isdigit
  9897  0024BE  300F               	rrcf	??_isdigit,w,c
  9898  0024C0  0012               	return		;funcret
  9899  0024C2                     __end_of_isdigit:
  9900                           	opt stack 0
  9901                           tblptru	equ	0xFF8
  9902                           tblptrh	equ	0xFF7
  9903                           tblptrl	equ	0xFF6
  9904                           tablat	equ	0xFF5
  9905                           prodh	equ	0xFF4
  9906                           prodl	equ	0xFF3
  9907                           intcon	equ	0xFF2
  9908                           intcon2	equ	0xFF1
  9909                           intcon3	equ	0xFF0
  9910                           postinc0	equ	0xFEE
  9911                           wreg	equ	0xFE8
  9912                           indf1	equ	0xFE7
  9913                           postdec1	equ	0xFE5
  9914                           fsr1h	equ	0xFE2
  9915                           fsr1l	equ	0xFE1
  9916                           indf2	equ	0xFDF
  9917                           postinc2	equ	0xFDE
  9918                           postdec2	equ	0xFDD
  9919                           fsr2h	equ	0xFDA
  9920                           fsr2l	equ	0xFD9
  9921                           status	equ	0xFD8
  9922                           
  9923 ;; *************** function ___wmul *****************
  9924 ;; Defined at:
  9925 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9926 ;; Parameters:    Size  Location     Type
  9927 ;;  multiplier      2   14[COMRAM] unsigned int 
  9928 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9929 ;; Auto vars:     Size  Location     Type
  9930 ;;  product         2   18[COMRAM] unsigned int 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  2   14[COMRAM] unsigned int 
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0, prodl, prodh
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9940 ;;      Params:         4       0       0       0
  9941 ;;      Locals:         2       0       0       0
  9942 ;;      Temps:          0       0       0       0
  9943 ;;      Totals:         6       0       0       0
  9944 ;;Total ram usage:        6 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:   10
  9947 ;; This function calls:
  9948 ;;		Nothing
  9949 ;; This function is called by:
  9950 ;;		_sprintf
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           	psect	text50
  9955  002342                     __ptext50:
  9956                           	opt stack 0
  9957  002342                     ___wmul:
  9958                           	opt stack 15
  9959                           
  9960                           ;incstack = 0
  9961  002342  500F               	movf	___wmul@multiplier,w,c
  9962  002344  0211               	mulwf	___wmul@multiplicand,c
  9963  002346  CFF3 F013          	movff	prodl,___wmul@product
  9964  00234A  CFF4 F014          	movff	prodh,___wmul@product+1
  9965  00234E  500F               	movf	___wmul@multiplier,w,c
  9966  002350  0212               	mulwf	___wmul@multiplicand+1,c
  9967  002352  50F3               	movf	prodl,w,c
  9968  002354  2614               	addwf	___wmul@product+1,f,c
  9969  002356  5010               	movf	___wmul@multiplier+1,w,c
  9970  002358  0211               	mulwf	___wmul@multiplicand,c
  9971  00235A  50F3               	movf	prodl,w,c
  9972  00235C  2614               	addwf	___wmul@product+1,f,c
  9973  00235E  C013  F00F         	movff	___wmul@product,?___wmul
  9974  002362  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9975  002366  0012               	return		;funcret
  9976  002368                     __end_of___wmul:
  9977                           	opt stack 0
  9978                           tblptru	equ	0xFF8
  9979                           tblptrh	equ	0xFF7
  9980                           tblptrl	equ	0xFF6
  9981                           tablat	equ	0xFF5
  9982                           prodh	equ	0xFF4
  9983                           prodl	equ	0xFF3
  9984                           intcon	equ	0xFF2
  9985                           intcon2	equ	0xFF1
  9986                           intcon3	equ	0xFF0
  9987                           postinc0	equ	0xFEE
  9988                           wreg	equ	0xFE8
  9989                           indf1	equ	0xFE7
  9990                           postdec1	equ	0xFE5
  9991                           fsr1h	equ	0xFE2
  9992                           fsr1l	equ	0xFE1
  9993                           indf2	equ	0xFDF
  9994                           postinc2	equ	0xFDE
  9995                           postdec2	equ	0xFDD
  9996                           fsr2h	equ	0xFDA
  9997                           fsr2l	equ	0xFD9
  9998                           status	equ	0xFD8
  9999                           
 10000 ;; *************** function ___lwmod *****************
 10001 ;; Defined at:
 10002 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;  dividend        2   21[COMRAM] unsigned int 
 10005 ;;  divisor         2   23[COMRAM] unsigned int 
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;  counter         1   25[COMRAM] unsigned char 
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  2   21[COMRAM] unsigned int 
 10010 ;; Registers used:
 10011 ;;		wreg, status,2, status,0
 10012 ;; Tracked objects:
 10013 ;;		On entry : 3F/0
 10014 ;;		On exit  : 3F/0
 10015 ;;		Unchanged: 3F/0
 10016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10017 ;;      Params:         4       0       0       0
 10018 ;;      Locals:         1       0       0       0
 10019 ;;      Temps:          0       0       0       0
 10020 ;;      Totals:         5       0       0       0
 10021 ;;Total ram usage:        5 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:   10
 10024 ;; This function calls:
 10025 ;;		Nothing
 10026 ;; This function is called by:
 10027 ;;		_sprintf
 10028 ;; This function uses a non-reentrant model
 10029 ;;
 10030                           
 10031                           	psect	text51
 10032  002084                     __ptext51:
 10033                           	opt stack 0
 10034  002084                     ___lwmod:
 10035                           	opt stack 15
 10036                           
 10037                           ; BSR set to: 0
 10038                           
 10039                           ;incstack = 0
 10040  002084  5018               	movf	___lwmod@divisor,w,c
 10041  002086  1019               	iorwf	___lwmod@divisor+1,w,c
 10042  002088  E017               	bz	l2165
 10043                           
 10044                           ; BSR set to: 0
 10045  00208A  0E01               	movlw	1
 10046  00208C  6E1A               	movwf	___lwmod@counter,c
 10047  00208E  D004               	goto	l7582
 10048  002090                     l7580:
 10049                           
 10050                           ; BSR set to: 0
 10051  002090  90D8               	bcf	status,0,c
 10052  002092  3618               	rlcf	___lwmod@divisor,f,c
 10053  002094  3619               	rlcf	___lwmod@divisor+1,f,c
 10054  002096  2A1A               	incf	___lwmod@counter,f,c
 10055  002098                     l7582:
 10056                           
 10057                           ; BSR set to: 0
 10058  002098  AE19               	btfss	___lwmod@divisor+1,7,c
 10059  00209A  D7FA               	goto	l7580
 10060  00209C                     l7584:
 10061                           
 10062                           ; BSR set to: 0
 10063  00209C  5018               	movf	___lwmod@divisor,w,c
 10064  00209E  5C16               	subwf	___lwmod@dividend,w,c
 10065  0020A0  5019               	movf	___lwmod@divisor+1,w,c
 10066  0020A2  5817               	subwfb	___lwmod@dividend+1,w,c
 10067  0020A4  E304               	bnc	l7588
 10068                           
 10069                           ; BSR set to: 0
 10070  0020A6  5018               	movf	___lwmod@divisor,w,c
 10071  0020A8  5E16               	subwf	___lwmod@dividend,f,c
 10072  0020AA  5019               	movf	___lwmod@divisor+1,w,c
 10073  0020AC  5A17               	subwfb	___lwmod@dividend+1,f,c
 10074  0020AE                     l7588:
 10075                           
 10076                           ; BSR set to: 0
 10077  0020AE  90D8               	bcf	status,0,c
 10078  0020B0  3219               	rrcf	___lwmod@divisor+1,f,c
 10079  0020B2  3218               	rrcf	___lwmod@divisor,f,c
 10080                           
 10081                           ; BSR set to: 0
 10082  0020B4  2E1A               	decfsz	___lwmod@counter,f,c
 10083  0020B6  D7F2               	goto	l7584
 10084  0020B8                     l2165:
 10085                           
 10086                           ; BSR set to: 0
 10087  0020B8  C016  F016         	movff	___lwmod@dividend,?___lwmod
 10088  0020BC  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 10089                           
 10090                           ; BSR set to: 0
 10091  0020C0  0012               	return		;funcret
 10092  0020C2                     __end_of___lwmod:
 10093                           	opt stack 0
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           intcon2	equ	0xFF1
 10102                           intcon3	equ	0xFF0
 10103                           postinc0	equ	0xFEE
 10104                           wreg	equ	0xFE8
 10105                           indf1	equ	0xFE7
 10106                           postdec1	equ	0xFE5
 10107                           fsr1h	equ	0xFE2
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           fsr2h	equ	0xFDA
 10113                           fsr2l	equ	0xFD9
 10114                           status	equ	0xFD8
 10115                           
 10116 ;; *************** function ___lwdiv *****************
 10117 ;; Defined at:
 10118 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;  dividend        2   14[COMRAM] unsigned int 
 10121 ;;  divisor         2   16[COMRAM] unsigned int 
 10122 ;; Auto vars:     Size  Location     Type
 10123 ;;  quotient        2   19[COMRAM] unsigned int 
 10124 ;;  counter         1   18[COMRAM] unsigned char 
 10125 ;; Return value:  Size  Location     Type
 10126 ;;                  2   14[COMRAM] unsigned int 
 10127 ;; Registers used:
 10128 ;;		wreg, status,2, status,0
 10129 ;; Tracked objects:
 10130 ;;		On entry : 3F/0
 10131 ;;		On exit  : 3F/0
 10132 ;;		Unchanged: 3F/0
 10133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10134 ;;      Params:         4       0       0       0
 10135 ;;      Locals:         3       0       0       0
 10136 ;;      Temps:          0       0       0       0
 10137 ;;      Totals:         7       0       0       0
 10138 ;;Total ram usage:        7 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; Hardware stack levels required when called:   10
 10141 ;; This function calls:
 10142 ;;		Nothing
 10143 ;; This function is called by:
 10144 ;;		_sprintf
 10145 ;; This function uses a non-reentrant model
 10146 ;;
 10147                           
 10148                           	psect	text52
 10149  001FF8                     __ptext52:
 10150                           	opt stack 0
 10151  001FF8                     ___lwdiv:
 10152                           	opt stack 15
 10153                           
 10154                           ; BSR set to: 0
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;incstack = 0
 10158  001FF8  6A14               	clrf	___lwdiv@quotient,c
 10159  001FFA  6A15               	clrf	___lwdiv@quotient+1,c
 10160                           
 10161                           ; BSR set to: 0
 10162  001FFC  5011               	movf	___lwdiv@divisor,w,c
 10163  001FFE  1012               	iorwf	___lwdiv@divisor+1,w,c
 10164  002000  E01B               	bz	l2155
 10165                           
 10166                           ; BSR set to: 0
 10167  002002  0E01               	movlw	1
 10168  002004  6E13               	movwf	___lwdiv@counter,c
 10169  002006  D004               	goto	l7562
 10170  002008                     l7560:
 10171                           
 10172                           ; BSR set to: 0
 10173  002008  90D8               	bcf	status,0,c
 10174  00200A  3611               	rlcf	___lwdiv@divisor,f,c
 10175  00200C  3612               	rlcf	___lwdiv@divisor+1,f,c
 10176  00200E  2A13               	incf	___lwdiv@counter,f,c
 10177  002010                     l7562:
 10178                           
 10179                           ; BSR set to: 0
 10180  002010  AE12               	btfss	___lwdiv@divisor+1,7,c
 10181  002012  D7FA               	goto	l7560
 10182  002014                     l7564:
 10183                           
 10184                           ; BSR set to: 0
 10185  002014  90D8               	bcf	status,0,c
 10186  002016  3614               	rlcf	___lwdiv@quotient,f,c
 10187  002018  3615               	rlcf	___lwdiv@quotient+1,f,c
 10188                           
 10189                           ; BSR set to: 0
 10190  00201A  5011               	movf	___lwdiv@divisor,w,c
 10191  00201C  5C0F               	subwf	___lwdiv@dividend,w,c
 10192  00201E  5012               	movf	___lwdiv@divisor+1,w,c
 10193  002020  5810               	subwfb	___lwdiv@dividend+1,w,c
 10194  002022  E305               	bnc	l7572
 10195                           
 10196                           ; BSR set to: 0
 10197  002024  5011               	movf	___lwdiv@divisor,w,c
 10198  002026  5E0F               	subwf	___lwdiv@dividend,f,c
 10199  002028  5012               	movf	___lwdiv@divisor+1,w,c
 10200  00202A  5A10               	subwfb	___lwdiv@dividend+1,f,c
 10201                           
 10202                           ; BSR set to: 0
 10203  00202C  8014               	bsf	___lwdiv@quotient,0,c
 10204  00202E                     l7572:
 10205                           
 10206                           ; BSR set to: 0
 10207  00202E  90D8               	bcf	status,0,c
 10208  002030  3212               	rrcf	___lwdiv@divisor+1,f,c
 10209  002032  3211               	rrcf	___lwdiv@divisor,f,c
 10210                           
 10211                           ; BSR set to: 0
 10212  002034  2E13               	decfsz	___lwdiv@counter,f,c
 10213  002036  D7EE               	goto	l7564
 10214  002038                     l2155:
 10215                           
 10216                           ; BSR set to: 0
 10217  002038  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 10218  00203C  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10219                           
 10220                           ; BSR set to: 0
 10221  002040  0012               	return		;funcret
 10222  002042                     __end_of___lwdiv:
 10223                           	opt stack 0
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           intcon	equ	0xFF2
 10231                           intcon2	equ	0xFF1
 10232                           intcon3	equ	0xFF0
 10233                           postinc0	equ	0xFEE
 10234                           wreg	equ	0xFE8
 10235                           indf1	equ	0xFE7
 10236                           postdec1	equ	0xFE5
 10237                           fsr1h	equ	0xFE2
 10238                           fsr1l	equ	0xFE1
 10239                           indf2	equ	0xFDF
 10240                           postinc2	equ	0xFDE
 10241                           postdec2	equ	0xFDD
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function _delay_1s *****************
 10247 ;; Defined at:
 10248 ;;		line 76 in file "horloge.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;		None
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;		None
 10253 ;; Return value:  Size  Location     Type
 10254 ;;                  1    wreg      void 
 10255 ;; Registers used:
 10256 ;;		wreg, cstack
 10257 ;; Tracked objects:
 10258 ;;		On entry : 0/0
 10259 ;;		On exit  : 0/0
 10260 ;;		Unchanged: 0/0
 10261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10262 ;;      Params:         0       0       0       0
 10263 ;;      Locals:         0       0       0       0
 10264 ;;      Temps:          0       0       0       0
 10265 ;;      Totals:         0       0       0       0
 10266 ;;Total ram usage:        0 bytes
 10267 ;; Hardware stack levels used:    1
 10268 ;; Hardware stack levels required when called:   11
 10269 ;; This function calls:
 10270 ;;		_delay_100ms
 10271 ;; This function is called by:
 10272 ;;		_EUSART1_RX_T3_LOCAL
 10273 ;; This function uses a non-reentrant model
 10274 ;;
 10275                           
 10276                           	psect	text53
 10277  002280                     __ptext53:
 10278                           	opt stack 0
 10279  002280                     _delay_1s:
 10280                           	opt stack 15
 10281                           
 10282                           ;horloge.c: 77: delay_100ms();
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;incstack = 0
 10286  002280  EC0D  F00C         	call	_delay_100ms	;wreg free
 10287                           
 10288                           ;horloge.c: 78: delay_100ms();
 10289  002284  EC0D  F00C         	call	_delay_100ms	;wreg free
 10290                           
 10291                           ;horloge.c: 79: delay_100ms();
 10292  002288  EC0D  F00C         	call	_delay_100ms	;wreg free
 10293                           
 10294                           ;horloge.c: 80: delay_100ms();
 10295  00228C  EC0D  F00C         	call	_delay_100ms	;wreg free
 10296                           
 10297                           ;horloge.c: 81: delay_100ms();
 10298  002290  EC0D  F00C         	call	_delay_100ms	;wreg free
 10299                           
 10300                           ;horloge.c: 82: delay_100ms();
 10301  002294  EC0D  F00C         	call	_delay_100ms	;wreg free
 10302                           
 10303                           ;horloge.c: 83: delay_100ms();
 10304  002298  EC0D  F00C         	call	_delay_100ms	;wreg free
 10305                           
 10306                           ;horloge.c: 84: delay_100ms();
 10307  00229C  EC0D  F00C         	call	_delay_100ms	;wreg free
 10308                           
 10309                           ;horloge.c: 85: delay_100ms();
 10310  0022A0  EC0D  F00C         	call	_delay_100ms	;wreg free
 10311                           
 10312                           ;horloge.c: 86: delay_100ms();
 10313  0022A4  EF0D  F00C         	goto	_delay_100ms	;wreg free
 10314  0022A8                     __end_of_delay_1s:
 10315                           	opt stack 0
 10316                           tblptru	equ	0xFF8
 10317                           tblptrh	equ	0xFF7
 10318                           tblptrl	equ	0xFF6
 10319                           tablat	equ	0xFF5
 10320                           prodh	equ	0xFF4
 10321                           prodl	equ	0xFF3
 10322                           intcon	equ	0xFF2
 10323                           intcon2	equ	0xFF1
 10324                           intcon3	equ	0xFF0
 10325                           postinc0	equ	0xFEE
 10326                           wreg	equ	0xFE8
 10327                           indf1	equ	0xFE7
 10328                           postdec1	equ	0xFE5
 10329                           fsr1h	equ	0xFE2
 10330                           fsr1l	equ	0xFE1
 10331                           indf2	equ	0xFDF
 10332                           postinc2	equ	0xFDE
 10333                           postdec2	equ	0xFDD
 10334                           fsr2h	equ	0xFDA
 10335                           fsr2l	equ	0xFD9
 10336                           status	equ	0xFD8
 10337                           
 10338 ;; *************** function _delay_100ms *****************
 10339 ;; Defined at:
 10340 ;;		line 46 in file "horloge.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;		None
 10343 ;; Auto vars:     Size  Location     Type
 10344 ;;		None
 10345 ;; Return value:  Size  Location     Type
 10346 ;;                  1    wreg      void 
 10347 ;; Registers used:
 10348 ;;		wreg
 10349 ;; Tracked objects:
 10350 ;;		On entry : 0/2
 10351 ;;		On exit  : 0/0
 10352 ;;		Unchanged: 0/0
 10353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10354 ;;      Params:         0       0       0       0
 10355 ;;      Locals:         0       0       0       0
 10356 ;;      Temps:          1       0       0       0
 10357 ;;      Totals:         1       0       0       0
 10358 ;;Total ram usage:        1 bytes
 10359 ;; Hardware stack levels used:    1
 10360 ;; Hardware stack levels required when called:   10
 10361 ;; This function calls:
 10362 ;;		Nothing
 10363 ;; This function is called by:
 10364 ;;		_delay_n_100ms
 10365 ;;		_delay_1s
 10366 ;; This function uses a non-reentrant model
 10367 ;;
 10368                           
 10369                           	psect	text54
 10370  00181A                     __ptext54:
 10371                           	opt stack 0
 10372  00181A                     _delay_100ms:
 10373                           	opt stack 15
 10374                           
 10375                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
 10376                           
 10377                           ;incstack = 0
 10378  00181A  0E1A               	movlw	26
 10379  00181C  6E0F               	movwf	??_delay_100ms& (0+255),c
 10380  00181E  0EF8               	movlw	248
 10381  001820                     u7177:
 10382  001820  2EE8               	decfsz	wreg,f,c
 10383  001822  D7FE               	bra	u7177
 10384  001824  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10385  001826  D7FC               	bra	u7177
 10386  001828  F000 F000          	nop2	
 10387                           
 10388                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
 10389  00182C  0E1A               	movlw	26
 10390  00182E  6E0F               	movwf	??_delay_100ms& (0+255),c
 10391  001830  0EF8               	movlw	248
 10392  001832                     u7187:
 10393  001832  2EE8               	decfsz	wreg,f,c
 10394  001834  D7FE               	bra	u7187
 10395  001836  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10396  001838  D7FC               	bra	u7187
 10397  00183A  F000 F000          	nop2	
 10398                           
 10399                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
 10400  00183E  0E1A               	movlw	26
 10401  001840  6E0F               	movwf	??_delay_100ms& (0+255),c
 10402  001842  0EF8               	movlw	248
 10403  001844                     u7197:
 10404  001844  2EE8               	decfsz	wreg,f,c
 10405  001846  D7FE               	bra	u7197
 10406  001848  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10407  00184A  D7FC               	bra	u7197
 10408  00184C  F000 F000          	nop2	
 10409                           
 10410                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
 10411  001850  0E1A               	movlw	26
 10412  001852  6E0F               	movwf	??_delay_100ms& (0+255),c
 10413  001854  0EF8               	movlw	248
 10414  001856                     u7207:
 10415  001856  2EE8               	decfsz	wreg,f,c
 10416  001858  D7FE               	bra	u7207
 10417  00185A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10418  00185C  D7FC               	bra	u7207
 10419  00185E  F000 F000          	nop2	
 10420                           
 10421                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
 10422  001862  0E1A               	movlw	26
 10423  001864  6E0F               	movwf	??_delay_100ms& (0+255),c
 10424  001866  0EF8               	movlw	248
 10425  001868                     u7217:
 10426  001868  2EE8               	decfsz	wreg,f,c
 10427  00186A  D7FE               	bra	u7217
 10428  00186C  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10429  00186E  D7FC               	bra	u7217
 10430  001870  F000 F000          	nop2	
 10431                           
 10432                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
 10433  001874  0E1A               	movlw	26
 10434  001876  6E0F               	movwf	??_delay_100ms& (0+255),c
 10435  001878  0EF8               	movlw	248
 10436  00187A                     u7227:
 10437  00187A  2EE8               	decfsz	wreg,f,c
 10438  00187C  D7FE               	bra	u7227
 10439  00187E  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10440  001880  D7FC               	bra	u7227
 10441  001882  F000 F000          	nop2	
 10442                           
 10443                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
 10444  001886  0E1A               	movlw	26
 10445  001888  6E0F               	movwf	??_delay_100ms& (0+255),c
 10446  00188A  0EF8               	movlw	248
 10447  00188C                     u7237:
 10448  00188C  2EE8               	decfsz	wreg,f,c
 10449  00188E  D7FE               	bra	u7237
 10450  001890  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10451  001892  D7FC               	bra	u7237
 10452  001894  F000 F000          	nop2	
 10453                           
 10454                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
 10455  001898  0E1A               	movlw	26
 10456  00189A  6E0F               	movwf	??_delay_100ms& (0+255),c
 10457  00189C  0EF8               	movlw	248
 10458  00189E                     u7247:
 10459  00189E  2EE8               	decfsz	wreg,f,c
 10460  0018A0  D7FE               	bra	u7247
 10461  0018A2  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10462  0018A4  D7FC               	bra	u7247
 10463  0018A6  F000 F000          	nop2	
 10464                           
 10465                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
 10466  0018AA  0E1A               	movlw	26
 10467  0018AC  6E0F               	movwf	??_delay_100ms& (0+255),c
 10468  0018AE  0EF8               	movlw	248
 10469  0018B0                     u7257:
 10470  0018B0  2EE8               	decfsz	wreg,f,c
 10471  0018B2  D7FE               	bra	u7257
 10472  0018B4  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10473  0018B6  D7FC               	bra	u7257
 10474  0018B8  F000 F000          	nop2	
 10475                           
 10476                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
 10477  0018BC  0E1A               	movlw	26
 10478  0018BE  6E0F               	movwf	??_delay_100ms& (0+255),c
 10479  0018C0  0EF8               	movlw	248
 10480  0018C2                     u7267:
 10481  0018C2  2EE8               	decfsz	wreg,f,c
 10482  0018C4  D7FE               	bra	u7267
 10483  0018C6  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10484  0018C8  D7FC               	bra	u7267
 10485  0018CA  F000 F000          	nop2	
 10486  0018CE  0012               	return		;funcret
 10487  0018D0                     __end_of_delay_100ms:
 10488                           	opt stack 0
 10489                           tblptru	equ	0xFF8
 10490                           tblptrh	equ	0xFF7
 10491                           tblptrl	equ	0xFF6
 10492                           tablat	equ	0xFF5
 10493                           prodh	equ	0xFF4
 10494                           prodl	equ	0xFF3
 10495                           intcon	equ	0xFF2
 10496                           intcon2	equ	0xFF1
 10497                           intcon3	equ	0xFF0
 10498                           postinc0	equ	0xFEE
 10499                           wreg	equ	0xFE8
 10500                           indf1	equ	0xFE7
 10501                           postdec1	equ	0xFE5
 10502                           fsr1h	equ	0xFE2
 10503                           fsr1l	equ	0xFE1
 10504                           indf2	equ	0xFDF
 10505                           postinc2	equ	0xFDE
 10506                           postdec2	equ	0xFDD
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _IRQ_Execution *****************
 10512 ;; Defined at:
 10513 ;;		line 40 in file "interrupt.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;  IRQ_Indice      1    wreg     unsigned char 
 10516 ;; Auto vars:     Size  Location     Type
 10517 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;                  1    wreg      void 
 10520 ;; Registers used:
 10521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10522 ;; Tracked objects:
 10523 ;;		On entry : 3F/2
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10527 ;;      Params:         0       0       0       0
 10528 ;;      Locals:         1       0       0       0
 10529 ;;      Temps:          0       0       0       0
 10530 ;;      Totals:         1       0       0       0
 10531 ;;Total ram usage:        1 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:   14
 10534 ;; This function calls:
 10535 ;;		_IRQ_ADC
 10536 ;;		_IRQ_CAPOT
 10537 ;;		_IRQ_I_MOTEUR_1
 10538 ;;		_IRQ_I_MOTEUR_2
 10539 ;;		_IRQ_PION_Metal_Apparait
 10540 ;;		_IRQ_PION_Metal_Disparait
 10541 ;;		_IRQ_PWM
 10542 ;;		_IRQ_TIMER2
 10543 ;;		_IRQ_TIMER_0
 10544 ;;		_IRQ_TIMER_5
 10545 ;; This function is called by:
 10546 ;;		_EUSART1_RX_T3_LOCAL
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           	psect	text55
 10551  001EBA                     __ptext55:
 10552                           	opt stack 0
 10553  001EBA                     _IRQ_Execution:
 10554                           	opt stack 12
 10555                           
 10556                           ;incstack = 0
 10557                           ;IRQ_Execution@IRQ_Indice stored from wreg
 10558  001EBA  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
 10559                           
 10560                           ;interrupt.c: 62: break;
 10561                           
 10562                           ;interrupt.c: 60: break;
 10563                           
 10564                           ;interrupt.c: 58: break;
 10565                           
 10566                           ;interrupt.c: 56: break;
 10567                           
 10568                           ;interrupt.c: 54: break;
 10569                           
 10570                           ;interrupt.c: 52: break;
 10571                           
 10572                           ;interrupt.c: 50: break;
 10573                           
 10574                           ;interrupt.c: 48: break;
 10575                           
 10576                           ;interrupt.c: 46: break;
 10577                           
 10578                           ;interrupt.c: 44: break;
 10579                           
 10580                           ;interrupt.c: 41: switch (IRQ_Indice) {
 10581  001EBC  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
 10582                           
 10583                           ; Switch size 1, requested type "speed"
 10584                           ; Number of cases is 10, Range of values is 0 to 9
 10585                           ; switch strategies available:
 10586                           ; Name         Instructions Cycles
 10587                           ; simple_byte           31    16 (average)
 10588                           ;	Chosen strategy is simple_byte
 10589  001EBE  E102 EF75  F013    	bz	_IRQ_CAPOT
 10590  001EC4  0A01               	xorlw	1	; case 1
 10591  001EC6  E102 EF91  F012    	bz	_IRQ_I_MOTEUR_1
 10592  001ECC  0A03               	xorlw	3	; case 2
 10593  001ECE  E102 EF86  F012    	bz	_IRQ_I_MOTEUR_2
 10594  001ED4  0A01               	xorlw	1	; case 3
 10595  001ED6  E102 EF09  F012    	bz	_IRQ_PION_Metal_Apparait
 10596  001EDC  0A07               	xorlw	7	; case 4
 10597  001EDE  E102 EF6E  F012    	bz	_IRQ_PION_Metal_Disparait
 10598  001EE4  0A01               	xorlw	1	; case 5
 10599  001EE6  E102 EF05  F00F    	bz	_IRQ_TIMER_0
 10600  001EEC  0A03               	xorlw	3	; case 6
 10601  001EEE  E102 EF84  F013    	bz	_IRQ_TIMER2
 10602  001EF4  0A01               	xorlw	1	; case 7
 10603  001EF6  E102 EF9D  F00D    	bz	_IRQ_TIMER_5
 10604  001EFC  0A0F               	xorlw	15	; case 8
 10605  001EFE  E102 EF02  F007    	bz	_IRQ_ADC
 10606  001F04  0A01               	xorlw	1	; case 9
 10607  001F06  E102 EF97  F013    	bz	_IRQ_PWM
 10608  001F0C  0012               	return		;funcret
 10609  001F0E                     __end_of_IRQ_Execution:
 10610                           	opt stack 0
 10611                           tblptru	equ	0xFF8
 10612                           tblptrh	equ	0xFF7
 10613                           tblptrl	equ	0xFF6
 10614                           tablat	equ	0xFF5
 10615                           prodh	equ	0xFF4
 10616                           prodl	equ	0xFF3
 10617                           intcon	equ	0xFF2
 10618                           intcon2	equ	0xFF1
 10619                           intcon3	equ	0xFF0
 10620                           postinc0	equ	0xFEE
 10621                           wreg	equ	0xFE8
 10622                           indf1	equ	0xFE7
 10623                           postdec1	equ	0xFE5
 10624                           fsr1h	equ	0xFE2
 10625                           fsr1l	equ	0xFE1
 10626                           indf2	equ	0xFDF
 10627                           postinc2	equ	0xFDE
 10628                           postdec2	equ	0xFDD
 10629                           fsr2h	equ	0xFDA
 10630                           fsr2l	equ	0xFD9
 10631                           status	equ	0xFD8
 10632                           
 10633 ;; *************** function _IRQ_TIMER_5 *****************
 10634 ;; Defined at:
 10635 ;;		line 409 in file "interrupt.c"
 10636 ;; Parameters:    Size  Location     Type
 10637 ;;		None
 10638 ;; Auto vars:     Size  Location     Type
 10639 ;;		None
 10640 ;; Return value:  Size  Location     Type
 10641 ;;                  1    wreg      void 
 10642 ;; Registers used:
 10643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10644 ;; Tracked objects:
 10645 ;;		On entry : 0/2
 10646 ;;		On exit  : 0/0
 10647 ;;		Unchanged: 0/0
 10648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10649 ;;      Params:         0       0       0       0
 10650 ;;      Locals:         0       0       0       0
 10651 ;;      Temps:          0       0       0       0
 10652 ;;      Totals:         0       0       0       0
 10653 ;;Total ram usage:        0 bytes
 10654 ;; Hardware stack levels used:    1
 10655 ;; Hardware stack levels required when called:   13
 10656 ;; This function calls:
 10657 ;;		_Alarme_On
 10658 ;;		_Buzzer_Etat
 10659 ;;		_Etat_Update
 10660 ;;		_TIMER5_Off
 10661 ;; This function is called by:
 10662 ;;		_IRQ_Execution
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           	psect	text56
 10667  001B3A                     __ptext56:
 10668                           	opt stack 0
 10669  001B3A                     _IRQ_TIMER_5:
 10670                           	opt stack 12
 10671                           
 10672                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 10673                           
 10674                           ;incstack = 0
 10675  001B3A  90A4               	bcf	4004,0,c	;volatile
 10676                           
 10677                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 10678  001B3C  0100               	movlb	0	; () banked
 10679  001B3E  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 10683  001B40  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 10684  001B42  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10685  001B44  E115               	bnz	l7418
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 10689  001B46  044D               	decf	_Mouvement_Startup,w,c
 10690  001B48  E001               	bz	l7404
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;interrupt.c: 418: nb_Pion += 1;
 10694  001B4A  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 10695  001B4C                     l7404:
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;interrupt.c: 419: }
 10699                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 10700  001B4C  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 10704  001B4E  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10705  001B50  E003               	bz	l599
 10706                           
 10707                           ; BSR set to: 0
 10708  001B52  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10709  001B54  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 10710  001B56  E202               	bc	l7410
 10711  001B58                     l599:
 10712                           
 10713                           ; BSR set to: 0
 10714  001B58  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 10715  001B5A  0012               	return	
 10716  001B5C                     l7410:
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 10720  001B5C  0E00               	movlw	0
 10721  001B5E  EC47  F013         	call	_Buzzer_Etat
 10722                           
 10723                           ;interrupt.c: 430: P4_busy = 0;
 10724  001B62  0100               	movlb	0	; () banked
 10725  001B64  6BAC               	clrf	_P4_busy& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;interrupt.c: 431: TIMER5_Off();
 10729  001B66  EC67  F013         	call	_TIMER5_Off	;wreg free
 10730                           
 10731                           ;interrupt.c: 432: Etat_Update(0);
 10732  001B6A  0E00               	movlw	0
 10733  001B6C  EF18  F012         	goto	_Etat_Update
 10734  001B70                     l7418:
 10735                           
 10736                           ; BSR set to: 0
 10737  001B70  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 10738  001B72  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10739  001B74  A4D8               	btfss	status,2,c
 10740  001B76  0012               	return	
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 10744  001B78  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 10745  001B7A  E10E               	bnz	l602
 10746                           
 10747                           ; BSR set to: 0
 10748  001B7C  B480               	btfsc	3968,2,c	;volatile
 10749  001B7E  D00C               	goto	l602
 10750                           
 10751                           ; BSR set to: 0
 10752  001B80  044D               	decf	_Mouvement_Startup,w,c
 10753  001B82  E10A               	bnz	l602
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;interrupt.c: 460: if (Option_Multitas==1){
 10757  001B84  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 10758  001B86  D004               	goto	l7430
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;interrupt.c: 461: Alarme_On(11);
 10762  001B88  0E0B               	movlw	11
 10763  001B8A  EC28  F013         	call	_Alarme_On
 10764                           
 10765                           ;interrupt.c: 462: }else{
 10766  001B8E  D008               	goto	l7434
 10767  001B90                     l7430:
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;interrupt.c: 463: Alarme_On(6);
 10771  001B90  0E06               	movlw	6
 10772  001B92  EC28  F013         	call	_Alarme_On
 10773  001B96  D004               	goto	l7434
 10774  001B98                     l602:
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;interrupt.c: 467: P4_busy = 0;
 10778  001B98  6BAC               	clrf	_P4_busy& (0+255),b
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;interrupt.c: 468: Etat_Update(6);
 10782  001B9A  0E06               	movlw	6
 10783  001B9C  EC18  F012         	call	_Etat_Update
 10784  001BA0                     l7434:
 10785                           
 10786                           ;interrupt.c: 471: }
 10787                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 10788  001BA0  0E00               	movlw	0
 10789  001BA2  EC47  F013         	call	_Buzzer_Etat
 10790                           
 10791                           ;interrupt.c: 474: TIMER5_Off();
 10792  001BA6  EF67  F013         	goto	_TIMER5_Off	;wreg free
 10793  001BAA                     __end_of_IRQ_TIMER_5:
 10794                           	opt stack 0
 10795                           tblptru	equ	0xFF8
 10796                           tblptrh	equ	0xFF7
 10797                           tblptrl	equ	0xFF6
 10798                           tablat	equ	0xFF5
 10799                           prodh	equ	0xFF4
 10800                           prodl	equ	0xFF3
 10801                           intcon	equ	0xFF2
 10802                           intcon2	equ	0xFF1
 10803                           intcon3	equ	0xFF0
 10804                           postinc0	equ	0xFEE
 10805                           wreg	equ	0xFE8
 10806                           indf1	equ	0xFE7
 10807                           postdec1	equ	0xFE5
 10808                           fsr1h	equ	0xFE2
 10809                           fsr1l	equ	0xFE1
 10810                           indf2	equ	0xFDF
 10811                           postinc2	equ	0xFDE
 10812                           postdec2	equ	0xFDD
 10813                           fsr2h	equ	0xFDA
 10814                           fsr2l	equ	0xFD9
 10815                           status	equ	0xFD8
 10816                           
 10817 ;; *************** function _IRQ_TIMER_0 *****************
 10818 ;; Defined at:
 10819 ;;		line 361 in file "interrupt.c"
 10820 ;; Parameters:    Size  Location     Type
 10821 ;;		None
 10822 ;; Auto vars:     Size  Location     Type
 10823 ;;		None
 10824 ;; Return value:  Size  Location     Type
 10825 ;;                  1    wreg      void 
 10826 ;; Registers used:
 10827 ;;		wreg, status,2, status,0, cstack
 10828 ;; Tracked objects:
 10829 ;;		On entry : 0/2
 10830 ;;		On exit  : 3F/0
 10831 ;;		Unchanged: 0/0
 10832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10833 ;;      Params:         0       0       0       0
 10834 ;;      Locals:         0       0       0       0
 10835 ;;      Temps:          0       0       0       0
 10836 ;;      Totals:         0       0       0       0
 10837 ;;Total ram usage:        0 bytes
 10838 ;; Hardware stack levels used:    1
 10839 ;; Hardware stack levels required when called:   11
 10840 ;; This function calls:
 10841 ;;		_Surveillance_Consommation_Moteur_1_Activer
 10842 ;;		_Surveillance_Consommation_Moteur_2_Activer
 10843 ;; This function is called by:
 10844 ;;		_IRQ_Execution
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           	psect	text57
 10849  001E0A                     __ptext57:
 10850                           	opt stack 0
 10851  001E0A                     _IRQ_TIMER_0:
 10852                           	opt stack 14
 10853                           
 10854                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 10855                           
 10856                           ;incstack = 0
 10857  001E0A  94F2               	bcf	intcon,2,c	;volatile
 10858                           
 10859                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 10860  001E0C  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 10861                           
 10862                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 10863  001E0E  0100               	movlb	0	; () banked
 10864  001E10  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 10865                           
 10866                           ;interrupt.c: 366: delay_s_counter += 1;
 10867  001E12  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 10868                           
 10869                           ; BSR set to: 0
 10870                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 10871  001E14  0E02               	movlw	2
 10872  001E16  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 10873  001E18  E01C               	bz	l7390
 10874  001E1A  0012               	return	
 10875  001E1C                     l7370:
 10876                           
 10877                           ; BSR set to: 0
 10878                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 10879  001E1C  ECED  F012         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10883  001E20  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10884  001E22  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10885  001E24  E203               	bc	l580
 10886  001E26                     l7374:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;interrupt.c: 381: consigne = Consigne_Max;
 10890  001E26  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 10891                           
 10892                           ;interrupt.c: 382: } else {
 10893  001E2A  0012               	return	
 10894  001E2C                     l580:
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 10898  001E2C  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10899  001E30  0012               	return	
 10900  001E32                     l7376:
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 10904  001E32  ECE4  F012         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10905                           
 10906                           ; BSR set to: 0
 10907                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10908  001E36  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10909  001E38  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10910  001E3A  E3F5               	bnc	l7374
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 10914  001E3C  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10915  001E40  0012               	return	
 10916  001E42                     l7382:
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 10920  001E42  ECE4  F012         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10924  001E46  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10925  001E48  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10926  001E4A  E3ED               	bnc	l7374
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 10930  001E4C  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10931  001E50  0012               	return	
 10932  001E52                     l7390:
 10933                           
 10934                           ; BSR set to: 0
 10935  001E52  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 10936                           
 10937                           ; Switch size 1, requested type "speed"
 10938                           ; Number of cases is 3, Range of values is 1 to 3
 10939                           ; switch strategies available:
 10940                           ; Name         Instructions Cycles
 10941                           ; simple_byte           10     6 (average)
 10942                           ;	Chosen strategy is simple_byte
 10943  001E54  0A01               	xorlw	1	; case 1
 10944  001E56  E0E2               	bz	l7370
 10945  001E58  0A03               	xorlw	3	; case 2
 10946  001E5A  E0EB               	bz	l7376
 10947  001E5C  0A01               	xorlw	1	; case 3
 10948  001E5E  E0F1               	bz	l7382
 10949                           
 10950                           ; BSR set to: 0
 10951  001E60  0012               	return		;funcret
 10952  001E62                     __end_of_IRQ_TIMER_0:
 10953                           	opt stack 0
 10954                           tblptru	equ	0xFF8
 10955                           tblptrh	equ	0xFF7
 10956                           tblptrl	equ	0xFF6
 10957                           tablat	equ	0xFF5
 10958                           prodh	equ	0xFF4
 10959                           prodl	equ	0xFF3
 10960                           intcon	equ	0xFF2
 10961                           intcon2	equ	0xFF1
 10962                           intcon3	equ	0xFF0
 10963                           postinc0	equ	0xFEE
 10964                           wreg	equ	0xFE8
 10965                           indf1	equ	0xFE7
 10966                           postdec1	equ	0xFE5
 10967                           fsr1h	equ	0xFE2
 10968                           fsr1l	equ	0xFE1
 10969                           indf2	equ	0xFDF
 10970                           postinc2	equ	0xFDE
 10971                           postdec2	equ	0xFDD
 10972                           fsr2h	equ	0xFDA
 10973                           fsr2l	equ	0xFD9
 10974                           status	equ	0xFD8
 10975                           
 10976 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 10977 ;; Defined at:
 10978 ;;		line 868 in file "interrupt.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;		None
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;		None
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  1    wreg      void 
 10985 ;; Registers used:
 10986 ;;		wreg, status,2, status,0
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 3F/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10992 ;;      Params:         0       0       0       0
 10993 ;;      Locals:         0       0       0       0
 10994 ;;      Temps:          0       0       0       0
 10995 ;;      Totals:         0       0       0       0
 10996 ;;Total ram usage:        0 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:   10
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_IRQ_TIMER_0
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text58
 11007  0025C8                     __ptext58:
 11008                           	opt stack 0
 11009  0025C8                     _Surveillance_Consommation_Moteur_2_Activer:
 11010                           	opt stack 14
 11011                           
 11012                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;incstack = 0
 11016  0025C8  0100               	movlb	0	; () banked
 11017  0025CA  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 11018  0025CC  B4D8               	btfsc	status,2,c
 11019  0025CE  0012               	return	
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 11023  0025D0  0E01               	movlw	1
 11024  0025D2  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 11028  0025D4  92F0               	bcf	intcon3,1,c	;volatile
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 11032  0025D6  88F0               	bsf	intcon3,4,c	;volatile
 11033                           
 11034                           ; BSR set to: 0
 11035  0025D8  0C01               	retlw	1	;funcret
 11036  0025DA                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 11037                           	opt stack 0
 11038                           tblptru	equ	0xFF8
 11039                           tblptrh	equ	0xFF7
 11040                           tblptrl	equ	0xFF6
 11041                           tablat	equ	0xFF5
 11042                           prodh	equ	0xFF4
 11043                           prodl	equ	0xFF3
 11044                           intcon	equ	0xFF2
 11045                           intcon2	equ	0xFF1
 11046                           intcon3	equ	0xFF0
 11047                           postinc0	equ	0xFEE
 11048                           wreg	equ	0xFE8
 11049                           indf1	equ	0xFE7
 11050                           postdec1	equ	0xFE5
 11051                           fsr1h	equ	0xFE2
 11052                           fsr1l	equ	0xFE1
 11053                           indf2	equ	0xFDF
 11054                           postinc2	equ	0xFDE
 11055                           postdec2	equ	0xFDD
 11056                           fsr2h	equ	0xFDA
 11057                           fsr2l	equ	0xFD9
 11058                           status	equ	0xFD8
 11059                           
 11060 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 11061 ;; Defined at:
 11062 ;;		line 852 in file "interrupt.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;		None
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;		None
 11067 ;; Return value:  Size  Location     Type
 11068 ;;                  1    wreg      void 
 11069 ;; Registers used:
 11070 ;;		wreg, status,2, status,0
 11071 ;; Tracked objects:
 11072 ;;		On entry : 0/0
 11073 ;;		On exit  : 3F/0
 11074 ;;		Unchanged: 0/0
 11075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11076 ;;      Params:         0       0       0       0
 11077 ;;      Locals:         0       0       0       0
 11078 ;;      Temps:          0       0       0       0
 11079 ;;      Totals:         0       0       0       0
 11080 ;;Total ram usage:        0 bytes
 11081 ;; Hardware stack levels used:    1
 11082 ;; Hardware stack levels required when called:   10
 11083 ;; This function calls:
 11084 ;;		Nothing
 11085 ;; This function is called by:
 11086 ;;		_IRQ_TIMER_0
 11087 ;; This function uses a non-reentrant model
 11088 ;;
 11089                           
 11090                           	psect	text59
 11091  0025DA                     __ptext59:
 11092                           	opt stack 0
 11093  0025DA                     _Surveillance_Consommation_Moteur_1_Activer:
 11094                           	opt stack 14
 11095                           
 11096                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;incstack = 0
 11100  0025DA  0100               	movlb	0	; () banked
 11101  0025DC  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 11102  0025DE  B4D8               	btfsc	status,2,c
 11103  0025E0  0012               	return	
 11104                           
 11105                           ; BSR set to: 0
 11106                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 11107  0025E2  0E01               	movlw	1
 11108  0025E4  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 11109                           
 11110                           ; BSR set to: 0
 11111                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 11112  0025E6  90F0               	bcf	intcon3,0,c	;volatile
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 11116  0025E8  86F0               	bsf	intcon3,3,c	;volatile
 11117                           
 11118                           ; BSR set to: 0
 11119  0025EA  0C01               	retlw	1	;funcret
 11120  0025EC                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 11121                           	opt stack 0
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           intcon2	equ	0xFF1
 11130                           intcon3	equ	0xFF0
 11131                           postinc0	equ	0xFEE
 11132                           wreg	equ	0xFE8
 11133                           indf1	equ	0xFE7
 11134                           postdec1	equ	0xFE5
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           fsr2h	equ	0xFDA
 11141                           fsr2l	equ	0xFD9
 11142                           status	equ	0xFD8
 11143                           
 11144 ;; *************** function _IRQ_TIMER2 *****************
 11145 ;; Defined at:
 11146 ;;		line 883 in file "interrupt.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;		None
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;		None
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1    wreg      void 
 11153 ;; Registers used:
 11154 ;;		None
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/2
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11160 ;;      Params:         0       0       0       0
 11161 ;;      Locals:         0       0       0       0
 11162 ;;      Temps:          0       0       0       0
 11163 ;;      Totals:         0       0       0       0
 11164 ;;Total ram usage:        0 bytes
 11165 ;; Hardware stack levels used:    1
 11166 ;; Hardware stack levels required when called:   10
 11167 ;; This function calls:
 11168 ;;		Nothing
 11169 ;; This function is called by:
 11170 ;;		_IRQ_Execution
 11171 ;; This function uses a non-reentrant model
 11172 ;;
 11173                           
 11174                           	psect	text60
 11175  002708                     __ptext60:
 11176                           	opt stack 0
 11177  002708                     _IRQ_TIMER2:
 11178                           	opt stack 15
 11179                           
 11180                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;incstack = 0
 11184  002708  929E               	bcf	3998,1,c	;volatile
 11185                           
 11186                           ;interrupt.c: 887: GODONE = 1;
 11187  00270A  82C2               	bsf	4034,1,c	;volatile
 11188  00270C  0012               	return		;funcret
 11189  00270E                     __end_of_IRQ_TIMER2:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           intcon2	equ	0xFF1
 11199                           intcon3	equ	0xFF0
 11200                           postinc0	equ	0xFEE
 11201                           wreg	equ	0xFE8
 11202                           indf1	equ	0xFE7
 11203                           postdec1	equ	0xFE5
 11204                           fsr1h	equ	0xFE2
 11205                           fsr1l	equ	0xFE1
 11206                           indf2	equ	0xFDF
 11207                           postinc2	equ	0xFDE
 11208                           postdec2	equ	0xFDD
 11209                           fsr2h	equ	0xFDA
 11210                           fsr2l	equ	0xFD9
 11211                           status	equ	0xFD8
 11212                           
 11213 ;; *************** function _IRQ_PWM *****************
 11214 ;; Defined at:
 11215 ;;		line 481 in file "interrupt.c"
 11216 ;; Parameters:    Size  Location     Type
 11217 ;;		None
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;		None
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  1    wreg      void 
 11222 ;; Registers used:
 11223 ;;		None
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/2
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11229 ;;      Params:         0       0       0       0
 11230 ;;      Locals:         0       0       0       0
 11231 ;;      Temps:          0       0       0       0
 11232 ;;      Totals:         0       0       0       0
 11233 ;;Total ram usage:        0 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:   10
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_IRQ_Execution
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text61
 11244  00272E                     __ptext61:
 11245                           	opt stack 0
 11246  00272E                     _IRQ_PWM:
 11247                           	opt stack 15
 11248                           
 11249                           ;interrupt.c: 483: PTIF = 0;
 11250                           
 11251                           ;incstack = 0
 11252  00272E  98A4               	bcf	4004,4,c	;volatile
 11253  002730  0012               	return		;funcret
 11254  002732                     __end_of_IRQ_PWM:
 11255                           	opt stack 0
 11256                           tblptru	equ	0xFF8
 11257                           tblptrh	equ	0xFF7
 11258                           tblptrl	equ	0xFF6
 11259                           tablat	equ	0xFF5
 11260                           prodh	equ	0xFF4
 11261                           prodl	equ	0xFF3
 11262                           intcon	equ	0xFF2
 11263                           intcon2	equ	0xFF1
 11264                           intcon3	equ	0xFF0
 11265                           postinc0	equ	0xFEE
 11266                           wreg	equ	0xFE8
 11267                           indf1	equ	0xFE7
 11268                           postdec1	equ	0xFE5
 11269                           fsr1h	equ	0xFE2
 11270                           fsr1l	equ	0xFE1
 11271                           indf2	equ	0xFDF
 11272                           postinc2	equ	0xFDE
 11273                           postdec2	equ	0xFDD
 11274                           fsr2h	equ	0xFDA
 11275                           fsr2l	equ	0xFD9
 11276                           status	equ	0xFD8
 11277                           
 11278 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 11279 ;; Defined at:
 11280 ;;		line 287 in file "interrupt.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;		None
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;		None
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      void 
 11287 ;; Registers used:
 11288 ;;		wreg, status,2, status,0, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/2
 11291 ;;		On exit  : 3F/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11294 ;;      Params:         0       0       0       0
 11295 ;;      Locals:         0       0       0       0
 11296 ;;      Temps:          0       0       0       0
 11297 ;;      Totals:         0       0       0       0
 11298 ;;Total ram usage:        0 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:   11
 11301 ;; This function calls:
 11302 ;;		_Buzzer_Etat
 11303 ;;		_TIMER5_Off
 11304 ;; This function is called by:
 11305 ;;		_IRQ_Execution
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text62
 11310  0024DC                     __ptext62:
 11311                           	opt stack 0
 11312  0024DC                     _IRQ_PION_Metal_Disparait:
 11313                           	opt stack 14
 11314                           
 11315                           ;interrupt.c: 289: Buzzer_Etat((unsigned char) 0);
 11316                           
 11317                           ;incstack = 0
 11318  0024DC  0E00               	movlw	0
 11319  0024DE  EC47  F013         	call	_Buzzer_Etat
 11320                           
 11321                           ;interrupt.c: 290: PIE3bits.IC2QEIE = 0;
 11322  0024E2  94A3               	bcf	4003,2,c	;volatile
 11323                           
 11324                           ;interrupt.c: 291: PIR3bits.IC2QEIF = 0;
 11325  0024E4  94A4               	bcf	4004,2,c	;volatile
 11326                           
 11327                           ;interrupt.c: 293: TIMER5_Off();
 11328  0024E6  EC67  F013         	call	_TIMER5_Off	;wreg free
 11329                           
 11330                           ;interrupt.c: 295: nb_100ms_Timer_5 = 0;
 11331  0024EA  0100               	movlb	0	; () banked
 11332  0024EC  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;interrupt.c: 299: nb_100ms_platine = nb_100ms_platine_backup;
 11336  0024EE  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;interrupt.c: 301: Mouvement_Startup = 0;
 11340  0024F2  6A4D               	clrf	_Mouvement_Startup,c
 11341                           
 11342                           ; BSR set to: 0
 11343  0024F4  0012               	return		;funcret
 11344  0024F6                     __end_of_IRQ_PION_Metal_Disparait:
 11345                           	opt stack 0
 11346                           tblptru	equ	0xFF8
 11347                           tblptrh	equ	0xFF7
 11348                           tblptrl	equ	0xFF6
 11349                           tablat	equ	0xFF5
 11350                           prodh	equ	0xFF4
 11351                           prodl	equ	0xFF3
 11352                           intcon	equ	0xFF2
 11353                           intcon2	equ	0xFF1
 11354                           intcon3	equ	0xFF0
 11355                           postinc0	equ	0xFEE
 11356                           wreg	equ	0xFE8
 11357                           indf1	equ	0xFE7
 11358                           postdec1	equ	0xFE5
 11359                           fsr1h	equ	0xFE2
 11360                           fsr1l	equ	0xFE1
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           
 11368 ;; *************** function _TIMER5_Off *****************
 11369 ;; Defined at:
 11370 ;;		line 263 in file "timer.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;		None
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  1    wreg      void 
 11377 ;; Registers used:
 11378 ;;		None
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11384 ;;      Params:         0       0       0       0
 11385 ;;      Locals:         0       0       0       0
 11386 ;;      Temps:          0       0       0       0
 11387 ;;      Totals:         0       0       0       0
 11388 ;;Total ram usage:        0 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:   10
 11391 ;; This function calls:
 11392 ;;		Nothing
 11393 ;; This function is called by:
 11394 ;;		_IRQ_PION_Metal_Disparait
 11395 ;;		_IRQ_TIMER_5
 11396 ;; This function uses a non-reentrant model
 11397 ;;
 11398                           
 11399                           	psect	text63
 11400  0026CE                     __ptext63:
 11401                           	opt stack 0
 11402  0026CE                     _TIMER5_Off:
 11403                           	opt stack 14
 11404                           
 11405                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;incstack = 0
 11409  0026CE  90B7               	bcf	4023,0,c	;volatile
 11410                           
 11411                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 11412  0026D0  90A4               	bcf	4004,0,c	;volatile
 11413                           
 11414                           ;timer.c: 268: TMR5L = 0;
 11415  0026D2  6A87               	clrf	3975,c	;volatile
 11416                           
 11417                           ;timer.c: 269: TMR5H = 0;
 11418  0026D4  6A88               	clrf	3976,c	;volatile
 11419  0026D6  0012               	return		;funcret
 11420  0026D8                     __end_of_TIMER5_Off:
 11421                           	opt stack 0
 11422                           tblptru	equ	0xFF8
 11423                           tblptrh	equ	0xFF7
 11424                           tblptrl	equ	0xFF6
 11425                           tablat	equ	0xFF5
 11426                           prodh	equ	0xFF4
 11427                           prodl	equ	0xFF3
 11428                           intcon	equ	0xFF2
 11429                           intcon2	equ	0xFF1
 11430                           intcon3	equ	0xFF0
 11431                           postinc0	equ	0xFEE
 11432                           wreg	equ	0xFE8
 11433                           indf1	equ	0xFE7
 11434                           postdec1	equ	0xFE5
 11435                           fsr1h	equ	0xFE2
 11436                           fsr1l	equ	0xFE1
 11437                           indf2	equ	0xFDF
 11438                           postinc2	equ	0xFDE
 11439                           postdec2	equ	0xFDD
 11440                           fsr2h	equ	0xFDA
 11441                           fsr2l	equ	0xFD9
 11442                           status	equ	0xFD8
 11443                           
 11444 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 11445 ;; Defined at:
 11446 ;;		line 268 in file "interrupt.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;		None
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;		None
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  1    wreg      void 
 11453 ;; Registers used:
 11454 ;;		wreg, status,2, status,0, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11460 ;;      Params:         0       0       0       0
 11461 ;;      Locals:         0       0       0       0
 11462 ;;      Temps:          0       0       0       0
 11463 ;;      Totals:         0       0       0       0
 11464 ;;Total ram usage:        0 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; Hardware stack levels required when called:   11
 11467 ;; This function calls:
 11468 ;;		_Buzzer_Etat
 11469 ;;		_TIMER5_On
 11470 ;; This function is called by:
 11471 ;;		_IRQ_Execution
 11472 ;;		_Detection_Pion_On
 11473 ;; This function uses a non-reentrant model
 11474 ;;
 11475                           
 11476                           	psect	text64
 11477  002412                     __ptext64:
 11478                           	opt stack 0
 11479  002412                     _IRQ_PION_Metal_Apparait:
 11480                           	opt stack 14
 11481                           
 11482                           ;interrupt.c: 270: Buzzer_Etat((unsigned char) 1);
 11483                           
 11484                           ;incstack = 0
 11485  002412  0E01               	movlw	1
 11486  002414  EC47  F013         	call	_Buzzer_Etat
 11487                           
 11488                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 11489  002418  92A4               	bcf	4004,1,c	;volatile
 11490                           
 11491                           ;interrupt.c: 273: PIR3bits.IC2QEIF = 0;
 11492  00241A  94A4               	bcf	4004,2,c	;volatile
 11493                           
 11494                           ;interrupt.c: 274: if (PIE3bits.IC2QEIE == 1) {
 11495  00241C  A4A3               	btfss	4003,2,c	;volatile
 11496  00241E  D005               	goto	l569
 11497                           
 11498                           ;interrupt.c: 275: Alarme = 10;
 11499  002420  0E0A               	movlw	10
 11500  002422  0100               	movlb	0	; () banked
 11501  002424  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 11502                           
 11503                           ;interrupt.c: 276: } else {
 11504  002426  EF99  F013         	goto	_TIMER5_On
 11505  00242A                     l569:
 11506                           
 11507                           ;interrupt.c: 278: PIE3bits.IC2QEIE = 1;
 11508  00242A  84A3               	bsf	4003,2,c	;volatile
 11509                           
 11510                           ;interrupt.c: 279: }
 11511                           ;interrupt.c: 281: TIMER5_On();
 11512  00242C  EF99  F013         	goto	_TIMER5_On	;wreg free
 11513  002430                     __end_of_IRQ_PION_Metal_Apparait:
 11514                           	opt stack 0
 11515                           tblptru	equ	0xFF8
 11516                           tblptrh	equ	0xFF7
 11517                           tblptrl	equ	0xFF6
 11518                           tablat	equ	0xFF5
 11519                           prodh	equ	0xFF4
 11520                           prodl	equ	0xFF3
 11521                           intcon	equ	0xFF2
 11522                           intcon2	equ	0xFF1
 11523                           intcon3	equ	0xFF0
 11524                           postinc0	equ	0xFEE
 11525                           wreg	equ	0xFE8
 11526                           indf1	equ	0xFE7
 11527                           postdec1	equ	0xFE5
 11528                           fsr1h	equ	0xFE2
 11529                           fsr1l	equ	0xFE1
 11530                           indf2	equ	0xFDF
 11531                           postinc2	equ	0xFDE
 11532                           postdec2	equ	0xFDD
 11533                           fsr2h	equ	0xFDA
 11534                           fsr2l	equ	0xFD9
 11535                           status	equ	0xFD8
 11536                           
 11537 ;; *************** function _TIMER5_On *****************
 11538 ;; Defined at:
 11539 ;;		line 253 in file "timer.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;		None
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;		None
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      void 
 11546 ;; Registers used:
 11547 ;;		None
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11553 ;;      Params:         0       0       0       0
 11554 ;;      Locals:         0       0       0       0
 11555 ;;      Temps:          0       0       0       0
 11556 ;;      Totals:         0       0       0       0
 11557 ;;Total ram usage:        0 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:   10
 11560 ;; This function calls:
 11561 ;;		Nothing
 11562 ;; This function is called by:
 11563 ;;		_IRQ_PION_Metal_Apparait
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           	psect	text65
 11568  002732                     __ptext65:
 11569                           	opt stack 0
 11570  002732                     _TIMER5_On:
 11571                           	opt stack 14
 11572                           
 11573                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 11574                           
 11575                           ;incstack = 0
 11576  002732  80B7               	bsf	4023,0,c	;volatile
 11577  002734  0012               	return		;funcret
 11578  002736                     __end_of_TIMER5_On:
 11579                           	opt stack 0
 11580                           tblptru	equ	0xFF8
 11581                           tblptrh	equ	0xFF7
 11582                           tblptrl	equ	0xFF6
 11583                           tablat	equ	0xFF5
 11584                           prodh	equ	0xFF4
 11585                           prodl	equ	0xFF3
 11586                           intcon	equ	0xFF2
 11587                           intcon2	equ	0xFF1
 11588                           intcon3	equ	0xFF0
 11589                           postinc0	equ	0xFEE
 11590                           wreg	equ	0xFE8
 11591                           indf1	equ	0xFE7
 11592                           postdec1	equ	0xFE5
 11593                           fsr1h	equ	0xFE2
 11594                           fsr1l	equ	0xFE1
 11595                           indf2	equ	0xFDF
 11596                           postinc2	equ	0xFDE
 11597                           postdec2	equ	0xFDD
 11598                           fsr2h	equ	0xFDA
 11599                           fsr2l	equ	0xFD9
 11600                           status	equ	0xFD8
 11601                           
 11602 ;; *************** function _Buzzer_Etat *****************
 11603 ;; Defined at:
 11604 ;;		line 29 in file "interrupt.c"
 11605 ;; Parameters:    Size  Location     Type
 11606 ;;  Activation      1    wreg     unsigned char 
 11607 ;; Auto vars:     Size  Location     Type
 11608 ;;  Activation      1   14[COMRAM] unsigned char 
 11609 ;; Return value:  Size  Location     Type
 11610 ;;                  1    wreg      void 
 11611 ;; Registers used:
 11612 ;;		wreg, status,2, status,0
 11613 ;; Tracked objects:
 11614 ;;		On entry : 0/2
 11615 ;;		On exit  : 0/0
 11616 ;;		Unchanged: 0/0
 11617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11618 ;;      Params:         0       0       0       0
 11619 ;;      Locals:         1       0       0       0
 11620 ;;      Temps:          0       0       0       0
 11621 ;;      Totals:         1       0       0       0
 11622 ;;Total ram usage:        1 bytes
 11623 ;; Hardware stack levels used:    1
 11624 ;; Hardware stack levels required when called:   10
 11625 ;; This function calls:
 11626 ;;		Nothing
 11627 ;; This function is called by:
 11628 ;;		_Cycle
 11629 ;;		_IRQ_PION_Metal_Apparait
 11630 ;;		_IRQ_PION_Metal_Disparait
 11631 ;;		_IRQ_TIMER_5
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           	psect	text66
 11636  00268E                     __ptext66:
 11637                           	opt stack 0
 11638  00268E                     _Buzzer_Etat:
 11639                           	opt stack 14
 11640                           
 11641                           ;incstack = 0
 11642                           ;Buzzer_Etat@Activation stored from wreg
 11643  00268E  6E0F               	movwf	Buzzer_Etat@Activation,c
 11644                           
 11645                           ;interrupt.c: 30: if (Activation == 1) {
 11646  002690  040F               	decf	Buzzer_Etat@Activation,w,c
 11647  002692  E102               	bnz	l523
 11648                           
 11649                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 11650  002694  8C89               	bsf	3977,6,c	;volatile
 11651                           
 11652                           ;interrupt.c: 33: } else {
 11653  002696  0012               	return	
 11654  002698                     l523:
 11655                           
 11656                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 11657  002698  9C89               	bcf	3977,6,c	;volatile
 11658  00269A  0012               	return		;funcret
 11659  00269C                     __end_of_Buzzer_Etat:
 11660                           	opt stack 0
 11661                           tblptru	equ	0xFF8
 11662                           tblptrh	equ	0xFF7
 11663                           tblptrl	equ	0xFF6
 11664                           tablat	equ	0xFF5
 11665                           prodh	equ	0xFF4
 11666                           prodl	equ	0xFF3
 11667                           intcon	equ	0xFF2
 11668                           intcon2	equ	0xFF1
 11669                           intcon3	equ	0xFF0
 11670                           postinc0	equ	0xFEE
 11671                           wreg	equ	0xFE8
 11672                           indf1	equ	0xFE7
 11673                           postdec1	equ	0xFE5
 11674                           fsr1h	equ	0xFE2
 11675                           fsr1l	equ	0xFE1
 11676                           indf2	equ	0xFDF
 11677                           postinc2	equ	0xFDE
 11678                           postdec2	equ	0xFDD
 11679                           fsr2h	equ	0xFDA
 11680                           fsr2l	equ	0xFD9
 11681                           status	equ	0xFD8
 11682                           
 11683 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 11684 ;; Defined at:
 11685 ;;		line 909 in file "interrupt.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;		None
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;		None
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  1    wreg      void 
 11692 ;; Registers used:
 11693 ;;		wreg, status,2, status,0
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/2
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11699 ;;      Params:         0       0       0       0
 11700 ;;      Locals:         0       0       0       0
 11701 ;;      Temps:          0       0       0       0
 11702 ;;      Totals:         0       0       0       0
 11703 ;;Total ram usage:        0 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; Hardware stack levels required when called:   10
 11706 ;; This function calls:
 11707 ;;		Nothing
 11708 ;; This function is called by:
 11709 ;;		_IRQ_Execution
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           	psect	text67
 11714  00250C                     __ptext67:
 11715                           	opt stack 0
 11716  00250C                     _IRQ_I_MOTEUR_2:
 11717                           	opt stack 15
 11718                           
 11719                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 11720                           
 11721                           ;incstack = 0
 11722  00250C  928B               	bcf	3979,1,c	;volatile
 11723                           
 11724                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 11725  00250E  D001               	goto	l7330
 11726  002510                     l691:
 11727  002510  F000               	nop	
 11728  002512                     l7330:
 11729  002512  50CC               	movf	4044,w,c	;volatile
 11730  002514  E1FD               	bnz	l691
 11731                           
 11732                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 11733  002516  828B               	bsf	3979,1,c	;volatile
 11734                           
 11735                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 11736  002518  748B               	btg	3979,2,c	;volatile
 11737                           
 11738                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 11739  00251A  92F0               	bcf	intcon3,1,c	;volatile
 11740                           
 11741                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 11742  00251C  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 11743  00251E  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 11744  002520  0012               	return		;funcret
 11745  002522                     __end_of_IRQ_I_MOTEUR_2:
 11746                           	opt stack 0
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           intcon2	equ	0xFF1
 11755                           intcon3	equ	0xFF0
 11756                           postinc0	equ	0xFEE
 11757                           wreg	equ	0xFE8
 11758                           indf1	equ	0xFE7
 11759                           postdec1	equ	0xFE5
 11760                           fsr1h	equ	0xFE2
 11761                           fsr1l	equ	0xFE1
 11762                           indf2	equ	0xFDF
 11763                           postinc2	equ	0xFDE
 11764                           postdec2	equ	0xFDD
 11765                           fsr2h	equ	0xFDA
 11766                           fsr2l	equ	0xFD9
 11767                           status	equ	0xFD8
 11768                           
 11769 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 11770 ;; Defined at:
 11771 ;;		line 895 in file "interrupt.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  1    wreg      void 
 11778 ;; Registers used:
 11779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/2
 11782 ;;		On exit  : 0/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11785 ;;      Params:         0       0       0       0
 11786 ;;      Locals:         0       0       0       0
 11787 ;;      Temps:          0       0       0       0
 11788 ;;      Totals:         0       0       0       0
 11789 ;;Total ram usage:        0 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:   13
 11792 ;; This function calls:
 11793 ;;		_Alarme_On
 11794 ;; This function is called by:
 11795 ;;		_IRQ_Execution
 11796 ;; This function uses a non-reentrant model
 11797 ;;
 11798                           
 11799                           	psect	text68
 11800  002522                     __ptext68:
 11801                           	opt stack 0
 11802  002522                     _IRQ_I_MOTEUR_1:
 11803                           	opt stack 12
 11804                           
 11805                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 11806                           
 11807                           ;incstack = 0
 11808  002522  90F0               	bcf	intcon3,0,c	;volatile
 11809                           
 11810                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 11811  002524  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 11812                           
 11813                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 11814  002526  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 11815  002528  A4D8               	btfss	status,2,c
 11816  00252A  0012               	return	
 11817                           
 11818                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 11819  00252C  848B               	bsf	3979,2,c	;volatile
 11820                           
 11821                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 11822  00252E  908B               	bcf	3979,0,c	;volatile
 11823                           
 11824                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 11825  002530  928B               	bcf	3979,1,c	;volatile
 11826                           
 11827                           ;interrupt.c: 904: Alarme_On(1);
 11828  002532  0E01               	movlw	1
 11829  002534  EF28  F013         	goto	_Alarme_On
 11830  002538                     __end_of_IRQ_I_MOTEUR_1:
 11831                           	opt stack 0
 11832                           tblptru	equ	0xFF8
 11833                           tblptrh	equ	0xFF7
 11834                           tblptrl	equ	0xFF6
 11835                           tablat	equ	0xFF5
 11836                           prodh	equ	0xFF4
 11837                           prodl	equ	0xFF3
 11838                           intcon	equ	0xFF2
 11839                           intcon2	equ	0xFF1
 11840                           intcon3	equ	0xFF0
 11841                           postinc0	equ	0xFEE
 11842                           wreg	equ	0xFE8
 11843                           indf1	equ	0xFE7
 11844                           postdec1	equ	0xFE5
 11845                           fsr1h	equ	0xFE2
 11846                           fsr1l	equ	0xFE1
 11847                           indf2	equ	0xFDF
 11848                           postinc2	equ	0xFDE
 11849                           postdec2	equ	0xFDD
 11850                           fsr2h	equ	0xFDA
 11851                           fsr2l	equ	0xFD9
 11852                           status	equ	0xFD8
 11853                           
 11854 ;; *************** function _IRQ_CAPOT *****************
 11855 ;; Defined at:
 11856 ;;		line 890 in file "interrupt.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;		None
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  1    wreg      void 
 11863 ;; Registers used:
 11864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/2
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11870 ;;      Params:         0       0       0       0
 11871 ;;      Locals:         0       0       0       0
 11872 ;;      Temps:          0       0       0       0
 11873 ;;      Totals:         0       0       0       0
 11874 ;;Total ram usage:        0 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:   13
 11877 ;; This function calls:
 11878 ;;		_Alarme_On
 11879 ;; This function is called by:
 11880 ;;		_IRQ_Execution
 11881 ;; This function uses a non-reentrant model
 11882 ;;
 11883                           
 11884                           	psect	text69
 11885  0026EA                     __ptext69:
 11886                           	opt stack 0
 11887  0026EA                     _IRQ_CAPOT:
 11888                           	opt stack 12
 11889                           
 11890                           ;interrupt.c: 891: INT0IF = 0;
 11891                           
 11892                           ;incstack = 0
 11893  0026EA  92F2               	bcf	intcon,1,c	;volatile
 11894                           
 11895                           ;interrupt.c: 892: Alarme_On(4);
 11896  0026EC  0E04               	movlw	4
 11897  0026EE  EF28  F013         	goto	_Alarme_On
 11898  0026F2                     __end_of_IRQ_CAPOT:
 11899                           	opt stack 0
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           intcon2	equ	0xFF1
 11908                           intcon3	equ	0xFF0
 11909                           postinc0	equ	0xFEE
 11910                           wreg	equ	0xFE8
 11911                           indf1	equ	0xFE7
 11912                           postdec1	equ	0xFE5
 11913                           fsr1h	equ	0xFE2
 11914                           fsr1l	equ	0xFE1
 11915                           indf2	equ	0xFDF
 11916                           postinc2	equ	0xFDE
 11917                           postdec2	equ	0xFDD
 11918                           fsr2h	equ	0xFDA
 11919                           fsr2l	equ	0xFD9
 11920                           status	equ	0xFD8
 11921                           
 11922 ;; *************** function _Alarme_On *****************
 11923 ;; Defined at:
 11924 ;;		line 18 in file "alarme.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;  alarme_new_v    1    wreg     unsigned char 
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11929 ;; Return value:  Size  Location     Type
 11930 ;;                  1    wreg      void 
 11931 ;; Registers used:
 11932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11938 ;;      Params:         0       0       0       0
 11939 ;;      Locals:         1       0       0       0
 11940 ;;      Temps:          0       0       0       0
 11941 ;;      Totals:         1       0       0       0
 11942 ;;Total ram usage:        1 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:   12
 11945 ;; This function calls:
 11946 ;;		_Coupe_Moteur
 11947 ;;		_Etat_Update
 11948 ;; This function is called by:
 11949 ;;		_IRQ_TIMER_5
 11950 ;;		_IRQ_CAPOT
 11951 ;;		_IRQ_I_MOTEUR_1
 11952 ;;		_Check_List_Moteur_1
 11953 ;;		_EUSART1_RX_T3_LOCAL
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           	psect	text70
 11958  002650                     __ptext70:
 11959                           	opt stack 0
 11960  002650                     _Alarme_On:
 11961                           	opt stack 12
 11962                           
 11963                           ;incstack = 0
 11964                           ;Alarme_On@alarme_new_value stored from wreg
 11965  002650  6E10               	movwf	Alarme_On@alarme_new_value,c
 11966                           
 11967                           ;alarme.c: 22: Etat_Update(1);
 11968  002652  0E01               	movlw	1
 11969  002654  EC18  F012         	call	_Etat_Update
 11970                           
 11971                           ;alarme.c: 23: Alarme = alarme_new_value;
 11972  002658  C010  F0A9         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 11973                           
 11974                           ;alarme.c: 24: Coupe_Moteur();
 11975  00265C  EFC6  F012         	goto	_Coupe_Moteur	;wreg free
 11976  002660                     __end_of_Alarme_On:
 11977                           	opt stack 0
 11978                           tblptru	equ	0xFF8
 11979                           tblptrh	equ	0xFF7
 11980                           tblptrl	equ	0xFF6
 11981                           tablat	equ	0xFF5
 11982                           prodh	equ	0xFF4
 11983                           prodl	equ	0xFF3
 11984                           intcon	equ	0xFF2
 11985                           intcon2	equ	0xFF1
 11986                           intcon3	equ	0xFF0
 11987                           postinc0	equ	0xFEE
 11988                           wreg	equ	0xFE8
 11989                           indf1	equ	0xFE7
 11990                           postdec1	equ	0xFE5
 11991                           fsr1h	equ	0xFE2
 11992                           fsr1l	equ	0xFE1
 11993                           indf2	equ	0xFDF
 11994                           postinc2	equ	0xFDE
 11995                           postdec2	equ	0xFDD
 11996                           fsr2h	equ	0xFDA
 11997                           fsr2l	equ	0xFD9
 11998                           status	equ	0xFD8
 11999                           
 12000 ;; *************** function _Etat_Update *****************
 12001 ;; Defined at:
 12002 ;;		line 74 in file "action.c"
 12003 ;; Parameters:    Size  Location     Type
 12004 ;;  etat_new_val    1    wreg     unsigned char 
 12005 ;; Auto vars:     Size  Location     Type
 12006 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 12007 ;; Return value:  Size  Location     Type
 12008 ;;                  1    wreg      void 
 12009 ;; Registers used:
 12010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12011 ;; Tracked objects:
 12012 ;;		On entry : 0/0
 12013 ;;		On exit  : 0/0
 12014 ;;		Unchanged: 0/0
 12015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12016 ;;      Params:         0       0       0       0
 12017 ;;      Locals:         1       0       0       0
 12018 ;;      Temps:          0       0       0       0
 12019 ;;      Totals:         1       0       0       0
 12020 ;;Total ram usage:        1 bytes
 12021 ;; Hardware stack levels used:    1
 12022 ;; Hardware stack levels required when called:   10
 12023 ;; This function calls:
 12024 ;;		Nothing
 12025 ;; This function is called by:
 12026 ;;		_Cycle
 12027 ;;		_Capteur_Capot_On
 12028 ;;		_IRQ_TIMER_5
 12029 ;;		_Check_List_Moteur_2
 12030 ;;		_Check_List_Moteur_Bequille
 12031 ;;		_Mouvement_X
 12032 ;;		_EUSART1_RX_T3_LOCAL
 12033 ;;		_Alarme_On
 12034 ;; This function uses a non-reentrant model
 12035 ;;
 12036                           
 12037                           	psect	text71
 12038  002430                     __ptext71:
 12039                           	opt stack 0
 12040  002430                     _Etat_Update:
 12041                           	opt stack 14
 12042                           
 12043                           ;incstack = 0
 12044                           ;Etat_Update@etat_new_value stored from wreg
 12045  002430  6E0F               	movwf	Etat_Update@etat_new_value,c
 12046                           
 12047                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 12048  002432  504C               	movf	_Etat_Precedent_Index,w,c
 12049  002434  0F6A               	addlw	low _Etat_Log
 12050  002436  6ED9               	movwf	fsr2l,c
 12051  002438  6ADA               	clrf	fsr2h,c
 12052  00243A  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 12053                           
 12054                           ;action.c: 76: Etat = etat_new_value;
 12055  00243E  C00F  F0AA         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 12056                           
 12057                           ;action.c: 77: Etat_Precedent_Index++;
 12058  002442  2A4C               	incf	_Etat_Precedent_Index,f,c
 12059                           
 12060                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 12061  002444  0E0A               	movlw	10
 12062  002446  184C               	xorwf	_Etat_Precedent_Index,w,c
 12063  002448  B4D8               	btfsc	status,2,c
 12064                           
 12065                           ;action.c: 79: Etat_Precedent_Index = 0;
 12066  00244A  6A4C               	clrf	_Etat_Precedent_Index,c
 12067  00244C  0012               	return		;funcret
 12068  00244E                     __end_of_Etat_Update:
 12069                           	opt stack 0
 12070                           tblptru	equ	0xFF8
 12071                           tblptrh	equ	0xFF7
 12072                           tblptrl	equ	0xFF6
 12073                           tablat	equ	0xFF5
 12074                           prodh	equ	0xFF4
 12075                           prodl	equ	0xFF3
 12076                           intcon	equ	0xFF2
 12077                           intcon2	equ	0xFF1
 12078                           intcon3	equ	0xFF0
 12079                           postinc0	equ	0xFEE
 12080                           wreg	equ	0xFE8
 12081                           indf1	equ	0xFE7
 12082                           postdec1	equ	0xFE5
 12083                           fsr1h	equ	0xFE2
 12084                           fsr1l	equ	0xFE1
 12085                           indf2	equ	0xFDF
 12086                           postinc2	equ	0xFDE
 12087                           postdec2	equ	0xFDD
 12088                           fsr2h	equ	0xFDA
 12089                           fsr2l	equ	0xFD9
 12090                           status	equ	0xFD8
 12091                           
 12092 ;; *************** function _Coupe_Moteur *****************
 12093 ;; Defined at:
 12094 ;;		line 261 in file "action.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;		None
 12097 ;; Auto vars:     Size  Location     Type
 12098 ;;		None
 12099 ;; Return value:  Size  Location     Type
 12100 ;;                  1    wreg      void 
 12101 ;; Registers used:
 12102 ;;		cstack
 12103 ;; Tracked objects:
 12104 ;;		On entry : 0/0
 12105 ;;		On exit  : 0/0
 12106 ;;		Unchanged: 0/0
 12107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12108 ;;      Params:         0       0       0       0
 12109 ;;      Locals:         0       0       0       0
 12110 ;;      Temps:          0       0       0       0
 12111 ;;      Totals:         0       0       0       0
 12112 ;;Total ram usage:        0 bytes
 12113 ;; Hardware stack levels used:    1
 12114 ;; Hardware stack levels required when called:   11
 12115 ;; This function calls:
 12116 ;;		_TIMER2_Off
 12117 ;; This function is called by:
 12118 ;;		_Mouvement_Bequille
 12119 ;;		_Mouvement_Z
 12120 ;;		_Mouvement_X
 12121 ;;		_EUSART1_RX_T3_LOCAL
 12122 ;;		_Alarme_On
 12123 ;; This function uses a non-reentrant model
 12124 ;;
 12125                           
 12126                           	psect	text72
 12127  00258C                     __ptext72:
 12128                           	opt stack 0
 12129  00258C                     _Coupe_Moteur:
 12130                           	opt stack 12
 12131                           
 12132                           ;action.c: 262: TIMER2_Off();
 12133                           
 12134                           ;incstack = 0
 12135  00258C  EC87  F013         	call	_TIMER2_Off	;wreg free
 12136                           
 12137                           ;action.c: 274: LATCbits.LATC0 = 0;
 12138  002590  908B               	bcf	3979,0,c	;volatile
 12139                           
 12140                           ;action.c: 275: LATCbits.LATC1 = 0;
 12141  002592  928B               	bcf	3979,1,c	;volatile
 12142                           
 12143                           ;action.c: 276: OVDCOND = 0b00000000;
 12144  002594  6A6B               	clrf	3947,c	;volatile
 12145                           
 12146                           ;action.c: 277: LATD4 = 0;LATD5 = 0;
 12147  002596  988C               	bcf	3980,4,c	;volatile
 12148  002598  9A8C               	bcf	3980,5,c	;volatile
 12149                           
 12150                           ;action.c: 278: LATD6 = 0;LATD7 = 0;
 12151  00259A  9C8C               	bcf	3980,6,c	;volatile
 12152  00259C  9E8C               	bcf	3980,7,c	;volatile
 12153  00259E  0012               	return		;funcret
 12154  0025A0                     __end_of_Coupe_Moteur:
 12155                           	opt stack 0
 12156                           tblptru	equ	0xFF8
 12157                           tblptrh	equ	0xFF7
 12158                           tblptrl	equ	0xFF6
 12159                           tablat	equ	0xFF5
 12160                           prodh	equ	0xFF4
 12161                           prodl	equ	0xFF3
 12162                           intcon	equ	0xFF2
 12163                           intcon2	equ	0xFF1
 12164                           intcon3	equ	0xFF0
 12165                           postinc0	equ	0xFEE
 12166                           wreg	equ	0xFE8
 12167                           indf1	equ	0xFE7
 12168                           postdec1	equ	0xFE5
 12169                           fsr1h	equ	0xFE2
 12170                           fsr1l	equ	0xFE1
 12171                           indf2	equ	0xFDF
 12172                           postinc2	equ	0xFDE
 12173                           postdec2	equ	0xFDD
 12174                           fsr2h	equ	0xFDA
 12175                           fsr2l	equ	0xFD9
 12176                           status	equ	0xFD8
 12177                           
 12178 ;; *************** function _TIMER2_Off *****************
 12179 ;; Defined at:
 12180 ;;		line 165 in file "timer.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;		None
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;		None
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  1    wreg      void 
 12187 ;; Registers used:
 12188 ;;		None
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12194 ;;      Params:         0       0       0       0
 12195 ;;      Locals:         0       0       0       0
 12196 ;;      Temps:          0       0       0       0
 12197 ;;      Totals:         0       0       0       0
 12198 ;;Total ram usage:        0 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:   10
 12201 ;; This function calls:
 12202 ;;		Nothing
 12203 ;; This function is called by:
 12204 ;;		_Coupe_Moteur
 12205 ;; This function uses a non-reentrant model
 12206 ;;
 12207                           
 12208                           	psect	text73
 12209  00270E                     __ptext73:
 12210                           	opt stack 0
 12211  00270E                     _TIMER2_Off:
 12212                           	opt stack 12
 12213                           
 12214                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 12215                           
 12216                           ;incstack = 0
 12217  00270E  929D               	bcf	3997,1,c	;volatile
 12218                           
 12219                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 12220  002710  929E               	bcf	3998,1,c	;volatile
 12221  002712  0012               	return		;funcret
 12222  002714                     __end_of_TIMER2_Off:
 12223                           	opt stack 0
 12224                           tblptru	equ	0xFF8
 12225                           tblptrh	equ	0xFF7
 12226                           tblptrl	equ	0xFF6
 12227                           tablat	equ	0xFF5
 12228                           prodh	equ	0xFF4
 12229                           prodl	equ	0xFF3
 12230                           intcon	equ	0xFF2
 12231                           intcon2	equ	0xFF1
 12232                           intcon3	equ	0xFF0
 12233                           postinc0	equ	0xFEE
 12234                           wreg	equ	0xFE8
 12235                           indf1	equ	0xFE7
 12236                           postdec1	equ	0xFE5
 12237                           fsr1h	equ	0xFE2
 12238                           fsr1l	equ	0xFE1
 12239                           indf2	equ	0xFDF
 12240                           postinc2	equ	0xFDE
 12241                           postdec2	equ	0xFDD
 12242                           fsr2h	equ	0xFDA
 12243                           fsr2l	equ	0xFD9
 12244                           status	equ	0xFD8
 12245                           
 12246 ;; *************** function _IRQ_ADC *****************
 12247 ;; Defined at:
 12248 ;;		line 486 in file "interrupt.c"
 12249 ;; Parameters:    Size  Location     Type
 12250 ;;		None
 12251 ;; Auto vars:     Size  Location     Type
 12252 ;;		None
 12253 ;; Return value:  Size  Location     Type
 12254 ;;                  1    wreg      void 
 12255 ;; Registers used:
 12256 ;;		wreg, status,2, status,0
 12257 ;; Tracked objects:
 12258 ;;		On entry : 0/2
 12259 ;;		On exit  : 3F/0
 12260 ;;		Unchanged: 0/0
 12261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12262 ;;      Params:         0       0       0       0
 12263 ;;      Locals:         0       0       0       0
 12264 ;;      Temps:          3       0       0       0
 12265 ;;      Totals:         3       0       0       0
 12266 ;;Total ram usage:        3 bytes
 12267 ;; Hardware stack levels used:    1
 12268 ;; Hardware stack levels required when called:   10
 12269 ;; This function calls:
 12270 ;;		Nothing
 12271 ;; This function is called by:
 12272 ;;		_IRQ_Execution
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           	psect	text74
 12277  000E04                     __ptext74:
 12278                           	opt stack 0
 12279  000E04                     _IRQ_ADC:
 12280                           	opt stack 15
 12281                           
 12282                           ;interrupt.c: 487: switch (moteur_indice) {
 12283                           
 12284                           ;incstack = 0
 12285  000E04  D0C7               	goto	l7494
 12286  000E06                     l614:
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 12290  000E06  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 12291                           
 12292                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 12293  000E0A  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12294                           
 12295                           ;interrupt.c: 492: ADIF = 0;
 12296  000E0C  9C9E               	bcf	3998,6,c	;volatile
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 12300  000E0E  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 12301  000E10  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12302  000E12  6F84               	movwf	_erreur& (0+255),b	;volatile
 12303  000E14  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12304  000E16  A0D8               	btfss	status,0,c
 12305  000E18  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12306                           
 12307                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 12308  000E1A  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12309  000E1C  D008               	goto	l7444
 12310  000E1E  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12311  000E20  E103               	bnz	u5550
 12312  000E22  0E0A               	movlw	10
 12313  000E24  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12314  000E26  E303               	bnc	l7444
 12315  000E28                     u5550:
 12316                           
 12317                           ; BSR set to: 0
 12318  000E28  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12319  000E2A  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12320  000E2C  D006               	goto	l616
 12321  000E2E                     l7444:
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 12325  000E2E  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12326  000E30  D004               	goto	l616
 12327                           
 12328                           ; BSR set to: 0
 12329  000E32  5184               	movf	_erreur& (0+255),w,b	;volatile
 12330  000E34  2786               	addwf	_duty& (0+255),f,b	;volatile
 12331  000E36  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12332  000E38  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 12333  000E3A                     l616:
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 12337  000E3A  507B               	movf	3963,w,c	;volatile
 12338  000E3C  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12339  000E3E  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12340  000E40  5186               	movf	_duty& (0+255),w,b	;volatile
 12341  000E42  5C0F               	subwf	??_IRQ_ADC,w,c
 12342  000E44  5010               	movf	??_IRQ_ADC+1,w,c
 12343  000E46  0A80               	xorlw	128
 12344  000E48  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12345  000E4A  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12346  000E4C  0A80               	xorlw	128
 12347  000E4E  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12348  000E50  E203               	bc	l7450
 12349                           
 12350                           ; BSR set to: 0
 12351  000E52  CF7B F086          	movff	3963,_duty	;volatile
 12352  000E56  D003               	goto	L2
 12353  000E58                     l7450:
 12354                           
 12355                           ; BSR set to: 0
 12356                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 12357  000E58  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12358  000E5A  D002               	goto	l7454
 12359                           
 12360                           ; BSR set to: 0
 12361  000E5C  6B86               	clrf	_duty& (0+255),b	;volatile
 12362  000E5E                     L2:
 12363  000E5E  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12364  000E60                     l7454:
 12365                           
 12366                           ; BSR set to: 0
 12367                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 12368  000E60  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12369  000E62  46E8               	rlncf	wreg,f,c
 12370  000E64  0BFC               	andlw	252
 12371  000E66  6E79               	movwf	3961,c	;volatile
 12372                           
 12373                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 12374  000E68  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12375  000E6C  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12376  000E70  90D8               	bcf	status,0,c
 12377  000E72  360F               	rlcf	??_IRQ_ADC,f,c
 12378  000E74  3610               	rlcf	??_IRQ_ADC+1,f,c
 12379  000E76  90D8               	bcf	status,0,c
 12380  000E78  360F               	rlcf	??_IRQ_ADC,f,c
 12381  000E7A  3610               	rlcf	??_IRQ_ADC+1,f,c
 12382  000E7C  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12383  000E80  6A10               	clrf	??_IRQ_ADC+1,c
 12384  000E82  BE0F               	btfsc	??_IRQ_ADC,7,c
 12385  000E84  6810               	setf	??_IRQ_ADC+1,c
 12386  000E86  500F               	movf	??_IRQ_ADC,w,c
 12387  000E88  6E78               	movwf	3960,c	;volatile
 12388                           
 12389                           ;interrupt.c: 508: break;
 12390  000E8A  0012               	return	
 12391  000E8C                     l622:
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 12395  000E8C  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12396                           
 12397                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 12398  000E90  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12399                           
 12400                           ;interrupt.c: 518: ADIF = 0;
 12401  000E92  9C9E               	bcf	3998,6,c	;volatile
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 12405  000E94  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12406  000E96  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12407  000E98  6F84               	movwf	_erreur& (0+255),b	;volatile
 12408  000E9A  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12409  000E9C  A0D8               	btfss	status,0,c
 12410  000E9E  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12411                           
 12412                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 12413  000EA0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12414  000EA2  D008               	goto	l7460
 12415  000EA4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12416  000EA6  E103               	bnz	u5590
 12417  000EA8  0E0A               	movlw	10
 12418  000EAA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12419  000EAC  E303               	bnc	l7460
 12420  000EAE                     u5590:
 12421                           
 12422                           ; BSR set to: 0
 12423  000EAE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12424  000EB0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12425  000EB2  D005               	goto	l7464
 12426  000EB4                     l7460:
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 12430  000EB4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12431  000EB6  D003               	goto	l7464
 12432                           
 12433                           ; BSR set to: 0
 12434  000EB8  0786               	decf	_duty& (0+255),f,b	;volatile
 12435  000EBA  A0D8               	btfss	status,0,c
 12436  000EBC  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12437  000EBE                     l7464:
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 12441  000EBE  507B               	movf	3963,w,c	;volatile
 12442  000EC0  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12443  000EC2  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12444  000EC4  5186               	movf	_duty& (0+255),w,b	;volatile
 12445  000EC6  5C0F               	subwf	??_IRQ_ADC,w,c
 12446  000EC8  5010               	movf	??_IRQ_ADC+1,w,c
 12447  000ECA  0A80               	xorlw	128
 12448  000ECC  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12449  000ECE  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12450  000ED0  0A80               	xorlw	128
 12451  000ED2  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12452  000ED4  E203               	bc	l7468
 12453                           
 12454                           ; BSR set to: 0
 12455  000ED6  CF7B F086          	movff	3963,_duty	;volatile
 12456  000EDA  D003               	goto	L3
 12457  000EDC                     l7468:
 12458                           
 12459                           ; BSR set to: 0
 12460                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 12461  000EDC  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12462  000EDE  D002               	goto	l7472
 12463                           
 12464                           ; BSR set to: 0
 12465  000EE0  6B86               	clrf	_duty& (0+255),b	;volatile
 12466  000EE2                     L3:
 12467  000EE2  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12468  000EE4                     l7472:
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 12472  000EE4  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12473  000EE6  46E8               	rlncf	wreg,f,c
 12474  000EE8  0BFC               	andlw	252
 12475  000EEA  6E77               	movwf	3959,c	;volatile
 12476                           
 12477                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 12478  000EEC  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12479  000EF0  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12480  000EF4  90D8               	bcf	status,0,c
 12481  000EF6  360F               	rlcf	??_IRQ_ADC,f,c
 12482  000EF8  3610               	rlcf	??_IRQ_ADC+1,f,c
 12483  000EFA  90D8               	bcf	status,0,c
 12484  000EFC  360F               	rlcf	??_IRQ_ADC,f,c
 12485  000EFE  3610               	rlcf	??_IRQ_ADC+1,f,c
 12486  000F00  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12487  000F04  6A10               	clrf	??_IRQ_ADC+1,c
 12488  000F06  BE0F               	btfsc	??_IRQ_ADC,7,c
 12489  000F08  6810               	setf	??_IRQ_ADC+1,c
 12490  000F0A  500F               	movf	??_IRQ_ADC,w,c
 12491  000F0C  6E76               	movwf	3958,c	;volatile
 12492                           
 12493                           ;interrupt.c: 532: break;
 12494  000F0E  0012               	return	
 12495  000F10                     l629:
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 12499  000F10  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12500                           
 12501                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 12502  000F14  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12503                           
 12504                           ;interrupt.c: 539: ADIF = 0;
 12505  000F16  9C9E               	bcf	3998,6,c	;volatile
 12506                           
 12507                           ; BSR set to: 0
 12508                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 12509  000F18  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12510  000F1A  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12511  000F1C  6F84               	movwf	_erreur& (0+255),b	;volatile
 12512  000F1E  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12513  000F20  A0D8               	btfss	status,0,c
 12514  000F22  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12515                           
 12516                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 12517  000F24  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12518  000F26  D008               	goto	l7478
 12519  000F28  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12520  000F2A  E103               	bnz	u5630
 12521  000F2C  0E0A               	movlw	10
 12522  000F2E  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12523  000F30  E303               	bnc	l7478
 12524  000F32                     u5630:
 12525                           
 12526                           ; BSR set to: 0
 12527  000F32  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12528  000F34  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12529  000F36  D005               	goto	l7482
 12530  000F38                     l7478:
 12531                           
 12532                           ; BSR set to: 0
 12533                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 12534  000F38  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12535  000F3A  D003               	goto	l7482
 12536                           
 12537                           ; BSR set to: 0
 12538  000F3C  0786               	decf	_duty& (0+255),f,b	;volatile
 12539  000F3E  A0D8               	btfss	status,0,c
 12540  000F40  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12541  000F42                     l7482:
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 12545  000F42  507B               	movf	3963,w,c	;volatile
 12546  000F44  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12547  000F46  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12548  000F48  5186               	movf	_duty& (0+255),w,b	;volatile
 12549  000F4A  5C0F               	subwf	??_IRQ_ADC,w,c
 12550  000F4C  5010               	movf	??_IRQ_ADC+1,w,c
 12551  000F4E  0A80               	xorlw	128
 12552  000F50  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12553  000F52  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12554  000F54  0A80               	xorlw	128
 12555  000F56  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12556  000F58  E203               	bc	l7486
 12557                           
 12558                           ; BSR set to: 0
 12559  000F5A  CF7B F086          	movff	3963,_duty	;volatile
 12560  000F5E  D003               	goto	L4
 12561  000F60                     l7486:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 12565  000F60  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12566  000F62  D002               	goto	l7490
 12567                           
 12568                           ; BSR set to: 0
 12569  000F64  6B86               	clrf	_duty& (0+255),b	;volatile
 12570  000F66                     L4:
 12571  000F66  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12572  000F68                     l7490:
 12573                           
 12574                           ; BSR set to: 0
 12575                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 12576  000F68  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12577  000F6A  46E8               	rlncf	wreg,f,c
 12578  000F6C  0BFC               	andlw	252
 12579  000F6E  6E77               	movwf	3959,c	;volatile
 12580                           
 12581                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 12582  000F70  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12583  000F74  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12584  000F78  90D8               	bcf	status,0,c
 12585  000F7A  360F               	rlcf	??_IRQ_ADC,f,c
 12586  000F7C  3610               	rlcf	??_IRQ_ADC+1,f,c
 12587  000F7E  90D8               	bcf	status,0,c
 12588  000F80  360F               	rlcf	??_IRQ_ADC,f,c
 12589  000F82  3610               	rlcf	??_IRQ_ADC+1,f,c
 12590  000F84  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12591  000F88  6A10               	clrf	??_IRQ_ADC+1,c
 12592  000F8A  BE0F               	btfsc	??_IRQ_ADC,7,c
 12593  000F8C  6810               	setf	??_IRQ_ADC+1,c
 12594  000F8E  500F               	movf	??_IRQ_ADC,w,c
 12595  000F90  6E76               	movwf	3958,c	;volatile
 12596                           
 12597                           ;interrupt.c: 553: break;
 12598  000F92  0012               	return	
 12599  000F94                     l7494:
 12600  000F94  0100               	movlb	0	; () banked
 12601  000F96  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 12602                           
 12603                           ; Switch size 1, requested type "speed"
 12604                           ; Number of cases is 3, Range of values is 1 to 3
 12605                           ; switch strategies available:
 12606                           ; Name         Instructions Cycles
 12607                           ; simple_byte           10     6 (average)
 12608                           ;	Chosen strategy is simple_byte
 12609  000F98  0A01               	xorlw	1	; case 1
 12610  000F9A  E101 D734          	bz	l614
 12611  000F9E  0A03               	xorlw	3	; case 2
 12612  000FA0  E101 D774          	bz	l622
 12613  000FA4  0A01               	xorlw	1	; case 3
 12614  000FA6  E0B4               	bz	l629
 12615                           
 12616                           ; BSR set to: 0
 12617  000FA8  0012               	return		;funcret
 12618  000FAA                     __end_of_IRQ_ADC:
 12619                           	opt stack 0
 12620                           tblptru	equ	0xFF8
 12621                           tblptrh	equ	0xFF7
 12622                           tblptrl	equ	0xFF6
 12623                           tablat	equ	0xFF5
 12624                           prodh	equ	0xFF4
 12625                           prodl	equ	0xFF3
 12626                           intcon	equ	0xFF2
 12627                           intcon2	equ	0xFF1
 12628                           intcon3	equ	0xFF0
 12629                           postinc0	equ	0xFEE
 12630                           wreg	equ	0xFE8
 12631                           indf1	equ	0xFE7
 12632                           postdec1	equ	0xFE5
 12633                           fsr1h	equ	0xFE2
 12634                           fsr1l	equ	0xFE1
 12635                           indf2	equ	0xFDF
 12636                           postinc2	equ	0xFDE
 12637                           postdec2	equ	0xFDD
 12638                           fsr2h	equ	0xFDA
 12639                           fsr2l	equ	0xFD9
 12640                           status	equ	0xFD8
 12641                           
 12642 ;; *************** function _Etat_Intitule *****************
 12643 ;; Defined at:
 12644 ;;		line 29 in file "action.c"
 12645 ;; Parameters:    Size  Location     Type
 12646 ;;  Etat_Number     1    wreg     unsigned char 
 12647 ;; Auto vars:     Size  Location     Type
 12648 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 12649 ;; Return value:  Size  Location     Type
 12650 ;;                  1    wreg      unsigned char 
 12651 ;; Registers used:
 12652 ;;		wreg, status,2, status,0
 12653 ;; Tracked objects:
 12654 ;;		On entry : 0/1
 12655 ;;		On exit  : 0/0
 12656 ;;		Unchanged: 0/0
 12657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12658 ;;      Params:         0       0       0       0
 12659 ;;      Locals:         1       0       0       0
 12660 ;;      Temps:          0       0       0       0
 12661 ;;      Totals:         1       0       0       0
 12662 ;;Total ram usage:        1 bytes
 12663 ;; Hardware stack levels used:    1
 12664 ;; Hardware stack levels required when called:   10
 12665 ;; This function calls:
 12666 ;;		Nothing
 12667 ;; This function is called by:
 12668 ;;		_EUSART1_RX_T3_LOCAL
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           	psect	text75
 12673  00219A                     __ptext75:
 12674                           	opt stack 0
 12675  00219A                     _Etat_Intitule:
 12676                           	opt stack 16
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;incstack = 0
 12680                           ;Etat_Intitule@Etat_Number stored from wreg
 12681  00219A  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 12682                           
 12683                           ;action.c: 31: switch (Etat_Number) {
 12684  00219C  500F               	movf	Etat_Intitule@Etat_Number,w,c
 12685                           
 12686                           ; Switch size 1, requested type "speed"
 12687                           ; Number of cases is 8, Range of values is 0 to 255
 12688                           ; switch strategies available:
 12689                           ; Name         Instructions Cycles
 12690                           ; simple_byte           25    13 (average)
 12691                           ;	Chosen strategy is simple_byte
 12692  00219E  B4D8               	btfsc	status,2,c
 12693  0021A0  0C49               	retlw	73
 12694  0021A2  0A01               	xorlw	1	; case 1
 12695  0021A4  B4D8               	btfsc	status,2,c
 12696  0021A6  0C21               	retlw	33
 12697  0021A8  0A03               	xorlw	3	; case 2
 12698  0021AA  B4D8               	btfsc	status,2,c
 12699  0021AC  0C41               	retlw	65
 12700  0021AE  0A01               	xorlw	1	; case 3
 12701  0021B0  B4D8               	btfsc	status,2,c
 12702  0021B2  0C52               	retlw	82
 12703  0021B4  0A07               	xorlw	7	; case 4
 12704  0021B6  B4D8               	btfsc	status,2,c
 12705  0021B8  0C4C               	retlw	76
 12706  0021BA  0A01               	xorlw	1	; case 5
 12707  0021BC  B4D8               	btfsc	status,2,c
 12708  0021BE  0C42               	retlw	66
 12709  0021C0  0A03               	xorlw	3	; case 6
 12710  0021C2  B4D8               	btfsc	status,2,c
 12711  0021C4  0C50               	retlw	80
 12712  0021C6  0AF9               	xorlw	249	; case 255
 12713  0021C8  B4D8               	btfsc	status,2,c
 12714  0021CA  0C48               	retlw	72
 12715  0021CC  0C20               	retlw	32
 12716  0021CE                     __end_of_Etat_Intitule:
 12717                           	opt stack 0
 12718                           tblptru	equ	0xFF8
 12719                           tblptrh	equ	0xFF7
 12720                           tblptrl	equ	0xFF6
 12721                           tablat	equ	0xFF5
 12722                           prodh	equ	0xFF4
 12723                           prodl	equ	0xFF3
 12724                           intcon	equ	0xFF2
 12725                           intcon2	equ	0xFF1
 12726                           intcon3	equ	0xFF0
 12727                           postinc0	equ	0xFEE
 12728                           wreg	equ	0xFE8
 12729                           indf1	equ	0xFE7
 12730                           postdec1	equ	0xFE5
 12731                           fsr1h	equ	0xFE2
 12732                           fsr1l	equ	0xFE1
 12733                           indf2	equ	0xFDF
 12734                           postinc2	equ	0xFDE
 12735                           postdec2	equ	0xFDD
 12736                           fsr2h	equ	0xFDA
 12737                           fsr2l	equ	0xFD9
 12738                           status	equ	0xFD8
 12739                           
 12740 ;; *************** function _Etat_Get *****************
 12741 ;; Defined at:
 12742 ;;		line 49 in file "action.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;  Etat_Indice     1    wreg     unsigned char 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  1    wreg      unsigned char 
 12749 ;; Registers used:
 12750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12756 ;;      Params:         0       0       0       0
 12757 ;;      Locals:         1       0       0       0
 12758 ;;      Temps:          2       0       0       0
 12759 ;;      Totals:         3       0       0       0
 12760 ;;Total ram usage:        3 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:   11
 12763 ;; This function calls:
 12764 ;;		___awmod
 12765 ;; This function is called by:
 12766 ;;		_Cycle
 12767 ;;		_EUSART1_RX_T3_LOCAL
 12768 ;; This function uses a non-reentrant model
 12769 ;;
 12770                           
 12771                           	psect	text76
 12772  0021CE                     __ptext76:
 12773                           	opt stack 0
 12774  0021CE                     _Etat_Get:
 12775                           	opt stack 15
 12776                           
 12777                           ;incstack = 0
 12778                           ;Etat_Get@Etat_Indice stored from wreg
 12779  0021CE  6E17               	movwf	Etat_Get@Etat_Indice,c
 12780                           
 12781                           ;action.c: 62: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 12782  0021D0  5017               	movf	Etat_Get@Etat_Indice,w,c
 12783  0021D2  C04C  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 12784  0021D6  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 12785  0021D8  5E15               	subwf	??_Etat_Get,f,c
 12786  0021DA  0E00               	movlw	0
 12787  0021DC  5A16               	subwfb	??_Etat_Get+1,f,c
 12788  0021DE  0E09               	movlw	9
 12789  0021E0  2415               	addwf	??_Etat_Get,w,c
 12790  0021E2  6E0F               	movwf	___awmod@dividend,c
 12791  0021E4  0E00               	movlw	0
 12792  0021E6  2016               	addwfc	??_Etat_Get+1,w,c
 12793  0021E8  6E10               	movwf	___awmod@dividend+1,c
 12794  0021EA  6A12               	clrf	___awmod@divisor+1,c
 12795  0021EC  0E0A               	movlw	10
 12796  0021EE  6E11               	movwf	___awmod@divisor,c
 12797  0021F0  EC0D  F00E         	call	___awmod	;wreg free
 12798  0021F4  500F               	movf	?___awmod,w,c
 12799  0021F6  0F6A               	addlw	low _Etat_Log
 12800  0021F8  6ED9               	movwf	fsr2l,c
 12801  0021FA  6ADA               	clrf	fsr2h,c
 12802  0021FC  50DF               	movf	indf2,w,c
 12803  0021FE  0012               	return		;funcret
 12804  002200                     __end_of_Etat_Get:
 12805                           	opt stack 0
 12806                           tblptru	equ	0xFF8
 12807                           tblptrh	equ	0xFF7
 12808                           tblptrl	equ	0xFF6
 12809                           tablat	equ	0xFF5
 12810                           prodh	equ	0xFF4
 12811                           prodl	equ	0xFF3
 12812                           intcon	equ	0xFF2
 12813                           intcon2	equ	0xFF1
 12814                           intcon3	equ	0xFF0
 12815                           postinc0	equ	0xFEE
 12816                           wreg	equ	0xFE8
 12817                           indf1	equ	0xFE7
 12818                           postdec1	equ	0xFE5
 12819                           fsr1h	equ	0xFE2
 12820                           fsr1l	equ	0xFE1
 12821                           indf2	equ	0xFDF
 12822                           postinc2	equ	0xFDE
 12823                           postdec2	equ	0xFDD
 12824                           fsr2h	equ	0xFDA
 12825                           fsr2l	equ	0xFD9
 12826                           status	equ	0xFD8
 12827                           
 12828 ;; *************** function ___awmod *****************
 12829 ;; Defined at:
 12830 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 12831 ;; Parameters:    Size  Location     Type
 12832 ;;  dividend        2   14[COMRAM] int 
 12833 ;;  divisor         2   16[COMRAM] int 
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  sign            1   19[COMRAM] unsigned char 
 12836 ;;  counter         1   18[COMRAM] unsigned char 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  2   14[COMRAM] int 
 12839 ;; Registers used:
 12840 ;;		wreg, status,2, status,0
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/1
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12846 ;;      Params:         4       0       0       0
 12847 ;;      Locals:         2       0       0       0
 12848 ;;      Temps:          0       0       0       0
 12849 ;;      Totals:         6       0       0       0
 12850 ;;Total ram usage:        6 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:   10
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		_Etat_Get
 12857 ;;		_EUSART1_RX_T3_LOCAL
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           	psect	text77
 12862  001C1A                     __ptext77:
 12863                           	opt stack 0
 12864  001C1A                     ___awmod:
 12865                           	opt stack 16
 12866                           
 12867                           ;incstack = 0
 12868  001C1A  6A14               	clrf	___awmod@sign,c
 12869  001C1C  AE10               	btfss	___awmod@dividend+1,7,c
 12870  001C1E  D006               	goto	l7526
 12871  001C20  6C0F               	negf	___awmod@dividend,c
 12872  001C22  1E10               	comf	___awmod@dividend+1,f,c
 12873  001C24  B0D8               	btfsc	status,0,c
 12874  001C26  2A10               	incf	___awmod@dividend+1,f,c
 12875  001C28  0E01               	movlw	1
 12876  001C2A  6E14               	movwf	___awmod@sign,c
 12877  001C2C                     l7526:
 12878  001C2C  AE12               	btfss	___awmod@divisor+1,7,c
 12879  001C2E  D004               	goto	l7530
 12880  001C30  6C11               	negf	___awmod@divisor,c
 12881  001C32  1E12               	comf	___awmod@divisor+1,f,c
 12882  001C34  B0D8               	btfsc	status,0,c
 12883  001C36  2A12               	incf	___awmod@divisor+1,f,c
 12884  001C38                     l7530:
 12885  001C38  5011               	movf	___awmod@divisor,w,c
 12886  001C3A  1012               	iorwf	___awmod@divisor+1,w,c
 12887  001C3C  E017               	bz	l7546
 12888  001C3E  0E01               	movlw	1
 12889  001C40  6E13               	movwf	___awmod@counter,c
 12890  001C42  D004               	goto	l7536
 12891  001C44                     l7534:
 12892  001C44  90D8               	bcf	status,0,c
 12893  001C46  3611               	rlcf	___awmod@divisor,f,c
 12894  001C48  3612               	rlcf	___awmod@divisor+1,f,c
 12895  001C4A  2A13               	incf	___awmod@counter,f,c
 12896  001C4C                     l7536:
 12897  001C4C  AE12               	btfss	___awmod@divisor+1,7,c
 12898  001C4E  D7FA               	goto	l7534
 12899  001C50                     l7538:
 12900  001C50  5011               	movf	___awmod@divisor,w,c
 12901  001C52  5C0F               	subwf	___awmod@dividend,w,c
 12902  001C54  5012               	movf	___awmod@divisor+1,w,c
 12903  001C56  5810               	subwfb	___awmod@dividend+1,w,c
 12904  001C58  E304               	bnc	l7542
 12905  001C5A  5011               	movf	___awmod@divisor,w,c
 12906  001C5C  5E0F               	subwf	___awmod@dividend,f,c
 12907  001C5E  5012               	movf	___awmod@divisor+1,w,c
 12908  001C60  5A10               	subwfb	___awmod@dividend+1,f,c
 12909  001C62                     l7542:
 12910  001C62  90D8               	bcf	status,0,c
 12911  001C64  3212               	rrcf	___awmod@divisor+1,f,c
 12912  001C66  3211               	rrcf	___awmod@divisor,f,c
 12913  001C68  2E13               	decfsz	___awmod@counter,f,c
 12914  001C6A  D7F2               	goto	l7538
 12915  001C6C                     l7546:
 12916  001C6C  5014               	movf	___awmod@sign,w,c
 12917  001C6E  E004               	bz	l7550
 12918  001C70  6C0F               	negf	___awmod@dividend,c
 12919  001C72  1E10               	comf	___awmod@dividend+1,f,c
 12920  001C74  B0D8               	btfsc	status,0,c
 12921  001C76  2A10               	incf	___awmod@dividend+1,f,c
 12922  001C78                     l7550:
 12923  001C78  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12924  001C7C  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12925  001C80  0012               	return		;funcret
 12926  001C82                     __end_of___awmod:
 12927                           	opt stack 0
 12928                           tblptru	equ	0xFF8
 12929                           tblptrh	equ	0xFF7
 12930                           tblptrl	equ	0xFF6
 12931                           tablat	equ	0xFF5
 12932                           prodh	equ	0xFF4
 12933                           prodl	equ	0xFF3
 12934                           intcon	equ	0xFF2
 12935                           intcon2	equ	0xFF1
 12936                           intcon3	equ	0xFF0
 12937                           postinc0	equ	0xFEE
 12938                           wreg	equ	0xFE8
 12939                           indf1	equ	0xFE7
 12940                           postdec1	equ	0xFE5
 12941                           fsr1h	equ	0xFE2
 12942                           fsr1l	equ	0xFE1
 12943                           indf2	equ	0xFDF
 12944                           postinc2	equ	0xFDE
 12945                           postdec2	equ	0xFDD
 12946                           fsr2h	equ	0xFDA
 12947                           fsr2l	equ	0xFD9
 12948                           status	equ	0xFD8
 12949                           
 12950 ;; *************** function _EUSART1_Buffer_Send *****************
 12951 ;; Defined at:
 12952 ;;		line 511 in file "eusart.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;  text            1   14[COMRAM] PTR unsigned char 
 12955 ;;		 -> UART_TX_TEXT(64), 
 12956 ;; Auto vars:     Size  Location     Type
 12957 ;;  i               2   15[COMRAM] unsigned int 
 12958 ;; Return value:  Size  Location     Type
 12959 ;;                  1    wreg      void 
 12960 ;; Registers used:
 12961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12962 ;; Tracked objects:
 12963 ;;		On entry : 0/0
 12964 ;;		On exit  : 0/0
 12965 ;;		Unchanged: 0/0
 12966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12967 ;;      Params:         1       0       0       0
 12968 ;;      Locals:         2       0       0       0
 12969 ;;      Temps:          0       0       0       0
 12970 ;;      Totals:         3       0       0       0
 12971 ;;Total ram usage:        3 bytes
 12972 ;; Hardware stack levels used:    1
 12973 ;; Hardware stack levels required when called:   10
 12974 ;; This function calls:
 12975 ;;		Nothing
 12976 ;; This function is called by:
 12977 ;;		_EUSART1_RX_T3_LOCAL
 12978 ;; This function uses a non-reentrant model
 12979 ;;
 12980                           
 12981                           	psect	text78
 12982  001760                     __ptext78:
 12983                           	opt stack 0
 12984  001760                     _EUSART1_Buffer_Send:
 12985                           	opt stack 16
 12986  001760                     l1310:
 12987  001760  A2AC               	btfss	4012,1,c	;volatile
 12988  001762  D7FE               	goto	l1310
 12989                           
 12990                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 12991  001764  6A10               	clrf	EUSART1_Buffer_Send@i,c
 12992  001766  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 12993  001768  D01A               	goto	l7670
 12994  00176A                     l7666:
 12995                           
 12996                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 12997  00176A  5010               	movf	EUSART1_Buffer_Send@i,w,c
 12998  00176C  0FAD               	addlw	low _UART_TX_TEXT
 12999  00176E  6ED9               	movwf	fsr2l,c
 13000  001770  6ADA               	clrf	fsr2h,c
 13001  001772  0E80               	movlw	low _eusart1TxBuffer
 13002  001774  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13003  001776  6EE1               	movwf	fsr1l,c
 13004  001778  0E01               	movlw	high _eusart1TxBuffer
 13005  00177A  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13006  00177C  6EE2               	movwf	fsr1h,c
 13007  00177E  CFDF FFE7          	movff	indf2,indf1
 13008                           
 13009                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 13010  001782  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13011  001784  0FAD               	addlw	low _UART_TX_TEXT
 13012  001786  6ED9               	movwf	fsr2l,c
 13013  001788  6ADA               	clrf	fsr2h,c
 13014  00178A  0E40               	movlw	low _spiTxBuffer
 13015  00178C  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13016  00178E  6EE1               	movwf	fsr1l,c
 13017  001790  0E01               	movlw	high _spiTxBuffer
 13018  001792  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13019  001794  6EE2               	movwf	fsr1h,c
 13020  001796  CFDF FFE7          	movff	indf2,indf1
 13021  00179A  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 13022  00179C  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 13023  00179E                     l7670:
 13024  00179E  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 13025  0017A0  E109               	bnz	l7674
 13026  0017A2  0E40               	movlw	64
 13027  0017A4  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 13028  0017A6  E206               	bc	l7674
 13029  0017A8  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13030  0017AA  0FAD               	addlw	low _UART_TX_TEXT
 13031  0017AC  6ED9               	movwf	fsr2l,c
 13032  0017AE  6ADA               	clrf	fsr2h,c
 13033  0017B0  50DF               	movf	indf2,w,c
 13034  0017B2  E1DB               	bnz	l7666
 13035  0017B4                     l7674:
 13036                           
 13037                           ;eusart.c: 526: }
 13038                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 13039  0017B4  0E80               	movlw	low _eusart1TxBuffer
 13040  0017B6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13041  0017B8  6ED9               	movwf	fsr2l,c
 13042  0017BA  0E01               	movlw	high _eusart1TxBuffer
 13043  0017BC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13044  0017BE  6EDA               	movwf	fsr2h,c
 13045  0017C0  0E0D               	movlw	13
 13046  0017C2  6EDF               	movwf	indf2,c
 13047                           
 13048                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 13049  0017C4  0E40               	movlw	low _spiTxBuffer
 13050  0017C6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13051  0017C8  6ED9               	movwf	fsr2l,c
 13052  0017CA  0E01               	movlw	high _spiTxBuffer
 13053  0017CC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13054  0017CE  6EDA               	movwf	fsr2h,c
 13055  0017D0  0E0D               	movlw	13
 13056  0017D2  6EDF               	movwf	indf2,c
 13057                           
 13058                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 13059  0017D4  0E81               	movlw	low (_eusart1TxBuffer+1)
 13060  0017D6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13061  0017D8  6ED9               	movwf	fsr2l,c
 13062  0017DA  0E01               	movlw	high (_eusart1TxBuffer+1)
 13063  0017DC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13064  0017DE  6EDA               	movwf	fsr2h,c
 13065  0017E0  6ADF               	clrf	indf2,c
 13066                           
 13067                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 13068  0017E2  0E41               	movlw	low (_spiTxBuffer+1)
 13069  0017E4  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13070  0017E6  6ED9               	movwf	fsr2l,c
 13071  0017E8  0E01               	movlw	high (_spiTxBuffer+1)
 13072  0017EA  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13073  0017EC  6EDA               	movwf	fsr2h,c
 13074  0017EE  6ADF               	clrf	indf2,c
 13075                           
 13076                           ;eusart.c: 537: eusart1TxIndex = 0;
 13077  0017F0  6A46               	clrf	_eusart1TxIndex,c	;volatile
 13078                           
 13079                           ;eusart.c: 538: spiTxIndex = 0;
 13080  0017F2  6A44               	clrf	_spiTxIndex,c	;volatile
 13081                           
 13082                           ;eusart.c: 540: SPI_MODE = 1;
 13083  0017F4  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 13084                           
 13085                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 13086  0017F6  0E40               	movlw	low _spiTxBuffer
 13087  0017F8  2444               	addwf	_spiTxIndex,w,c	;volatile
 13088  0017FA  6ED9               	movwf	fsr2l,c
 13089  0017FC  6ADA               	clrf	fsr2h,c
 13090  0017FE  0E01               	movlw	high _spiTxBuffer
 13091  001800  22DA               	addwfc	fsr2h,f,c
 13092  001802  50DF               	movf	indf2,w,c
 13093  001804  6EC9               	movwf	4041,c	;volatile
 13094                           
 13095                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 13096  001806  0E80               	movlw	low _eusart1TxBuffer
 13097  001808  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 13098  00180A  6ED9               	movwf	fsr2l,c
 13099  00180C  6ADA               	clrf	fsr2h,c
 13100  00180E  0E01               	movlw	high _eusart1TxBuffer
 13101  001810  22DA               	addwfc	fsr2h,f,c
 13102  001812  50DF               	movf	indf2,w,c
 13103  001814  6EAD               	movwf	4013,c	;volatile
 13104                           
 13105                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 13106  001816  889D               	bsf	3997,4,c	;volatile
 13107  001818  0012               	return		;funcret
 13108  00181A                     __end_of_EUSART1_Buffer_Send:
 13109                           	opt stack 0
 13110                           tblptru	equ	0xFF8
 13111                           tblptrh	equ	0xFF7
 13112                           tblptrl	equ	0xFF6
 13113                           tablat	equ	0xFF5
 13114                           prodh	equ	0xFF4
 13115                           prodl	equ	0xFF3
 13116                           intcon	equ	0xFF2
 13117                           intcon2	equ	0xFF1
 13118                           intcon3	equ	0xFF0
 13119                           postinc0	equ	0xFEE
 13120                           wreg	equ	0xFE8
 13121                           indf1	equ	0xFE7
 13122                           postdec1	equ	0xFE5
 13123                           fsr1h	equ	0xFE2
 13124                           fsr1l	equ	0xFE1
 13125                           indf2	equ	0xFDF
 13126                           postinc2	equ	0xFDE
 13127                           postdec2	equ	0xFDD
 13128                           fsr2h	equ	0xFDA
 13129                           fsr2l	equ	0xFD9
 13130                           status	equ	0xFD8
 13131                           
 13132 ;; *************** function _LOW_PRIORITY_IRQ *****************
 13133 ;; Defined at:
 13134 ;;		line 559 in file "interrupt.c"
 13135 ;; Parameters:    Size  Location     Type
 13136 ;;		None
 13137 ;; Auto vars:     Size  Location     Type
 13138 ;;		None
 13139 ;; Return value:  Size  Location     Type
 13140 ;;                  1    wreg      void 
 13141 ;; Registers used:
 13142 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13143 ;; Tracked objects:
 13144 ;;		On entry : 0/0
 13145 ;;		On exit  : 0/0
 13146 ;;		Unchanged: 0/0
 13147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13148 ;;      Params:         0       0       0       0
 13149 ;;      Locals:         0       0       0       0
 13150 ;;      Temps:          7       0       0       0
 13151 ;;      Totals:         7       0       0       0
 13152 ;;Total ram usage:        7 bytes
 13153 ;; Hardware stack levels used:    1
 13154 ;; Hardware stack levels required when called:    9
 13155 ;; This function calls:
 13156 ;;		_EUSART1_Receive_ISR
 13157 ;;		_EUSART1_Transmit_ISR
 13158 ;;		_IRQ_PION_CHANGEMENT_ETAT
 13159 ;;		_SPI_ISR
 13160 ;;		i1_IRQ_ADC
 13161 ;;		i1_IRQ_PWM
 13162 ;;		i1_IRQ_TIMER_0
 13163 ;;		i1_IRQ_TIMER_5
 13164 ;; This function is called by:
 13165 ;;		Interrupt level 1
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           	psect	intcodelo
 13170  000018                     __pintcodelo:
 13171                           	opt stack 0
 13172  000018                     _LOW_PRIORITY_IRQ:
 13173                           	opt stack 11
 13174                           
 13175                           ;incstack = 0
 13176  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13177  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 13178  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 13179  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 13180  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 13181  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 13182  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 13183  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 13184                           
 13185                           ;interrupt.c: 562: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 13186  000036  B2A3               	btfsc	4003,1,c	;volatile
 13187  000038  A2A4               	btfss	4004,1,c	;volatile
 13188  00003A  D003               	goto	i1l642
 13189                           
 13190                           ;interrupt.c: 564: IRQ_PION_CHANGEMENT_ETAT();
 13191  00003C  ECAF  F00F         	call	_IRQ_PION_CHANGEMENT_ETAT	;wreg free
 13192                           
 13193                           ;interrupt.c: 579: } else
 13194  000040  D036               	goto	i1l661
 13195  000042                     i1l642:
 13196                           
 13197                           ;interrupt.c: 581: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 13198  000042  B4A3               	btfsc	4003,2,c	;volatile
 13199  000044  A4A4               	btfss	4004,2,c	;volatile
 13200  000046  D002               	goto	i1l644
 13201                           
 13202                           ;interrupt.c: 582: PIR3bits.IC2QEIF = 0;
 13203  000048  94A4               	bcf	4004,2,c	;volatile
 13204                           
 13205                           ;interrupt.c: 594: } else
 13206  00004A  D031               	goto	i1l661
 13207  00004C                     i1l644:
 13208                           
 13209                           ;interrupt.c: 595: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 13210  00004C  B69D               	btfsc	3997,3,c	;volatile
 13211  00004E  A69E               	btfss	3998,3,c	;volatile
 13212  000050  D003               	goto	i1l646
 13213                           
 13214                           ;interrupt.c: 596: SPI_ISR();
 13215  000052  EC3C  F009         	call	_SPI_ISR	;wreg free
 13216                           
 13217                           ;interrupt.c: 598: } else
 13218  000056  D02B               	goto	i1l661
 13219  000058                     i1l646:
 13220                           
 13221                           ;interrupt.c: 599: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13222  000058  B89D               	btfsc	3997,4,c	;volatile
 13223  00005A  A89E               	btfss	3998,4,c	;volatile
 13224  00005C  D003               	goto	i1l648
 13225                           
 13226                           ;interrupt.c: 600: EUSART1_Transmit_ISR();
 13227  00005E  EC54  F011         	call	_EUSART1_Transmit_ISR	;wreg free
 13228                           
 13229                           ;interrupt.c: 602: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13230  000062  D025               	goto	i1l661
 13231  000064                     i1l648:
 13232  000064  BA9D               	btfsc	3997,5,c	;volatile
 13233  000066  AA9E               	btfss	3998,5,c	;volatile
 13234  000068  D00B               	goto	i1l650
 13235                           
 13236                           ;interrupt.c: 603: if (RX1_ABR==0){
 13237  00006A  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13238  00006C  D003               	goto	i1l651
 13239                           
 13240                           ;interrupt.c: 604: EUSART1_Receive_ISR();
 13241  00006E  EC2E  F00A         	call	_EUSART1_Receive_ISR	;wreg free
 13242                           
 13243                           ;interrupt.c: 605: }else{
 13244  000072  D01D               	goto	i1l661
 13245  000074                     i1l651:
 13246                           
 13247                           ;interrupt.c: 606: eusart1RxIndex = RCREG;
 13248  000074  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 13249                           
 13250                           ;interrupt.c: 607: eusart1RxIndex = 0;
 13251  000078  6A45               	clrf	_eusart1RxIndex,c	;volatile
 13252                           
 13253                           ;interrupt.c: 608: PIR1bits.RC1IF = 0;
 13254  00007A  9A9E               	bcf	3998,5,c	;volatile
 13255                           
 13256                           ;interrupt.c: 609: RX1_ABR = 0;}
 13257  00007C  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13258                           
 13259                           ;interrupt.c: 611: } else
 13260  00007E  D017               	goto	i1l661
 13261  000080                     i1l650:
 13262                           
 13263                           ;interrupt.c: 615: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 13264  000080  BAF2               	btfsc	intcon,5,c	;volatile
 13265  000082  A4F2               	btfss	intcon,2,c	;volatile
 13266  000084  D003               	goto	i1l654
 13267                           
 13268                           ;interrupt.c: 616: IRQ_TIMER_0();
 13269  000086  EC31  F00F         	call	i1_IRQ_TIMER_0	;wreg free
 13270                           
 13271                           ;interrupt.c: 622: } else
 13272  00008A  D011               	goto	i1l661
 13273  00008C                     i1l654:
 13274                           
 13275                           ;interrupt.c: 625: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 13276  00008C  B0A3               	btfsc	4003,0,c	;volatile
 13277  00008E  A0A4               	btfss	4004,0,c	;volatile
 13278  000090  D003               	goto	i1l656
 13279                           
 13280                           ;interrupt.c: 626: IRQ_TIMER_5();
 13281  000092  ECD5  F00D         	call	i1_IRQ_TIMER_5	;wreg free
 13282                           
 13283                           ;interrupt.c: 648: } else
 13284  000096  D00B               	goto	i1l661
 13285  000098                     i1l656:
 13286                           
 13287                           ;interrupt.c: 650: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 13288  000098  B8A3               	btfsc	4003,4,c	;volatile
 13289  00009A  A8A4               	btfss	4004,4,c	;volatile
 13290  00009C  D003               	goto	i1l658
 13291                           
 13292                           ;interrupt.c: 651: IRQ_PWM();
 13293  00009E  EC9B  F013         	call	i1_IRQ_PWM	;wreg free
 13294                           
 13295                           ;interrupt.c: 655: } else
 13296  0000A2  D005               	goto	i1l661
 13297  0000A4                     i1l658:
 13298                           
 13299                           ;interrupt.c: 660: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 13300  0000A4  BC9D               	btfsc	3997,6,c	;volatile
 13301  0000A6  AC9E               	btfss	3998,6,c	;volatile
 13302  0000A8  D002               	goto	i1l661
 13303                           
 13304                           ;interrupt.c: 667: IRQ_ADC();
 13305  0000AA  ECD5  F007         	call	i1_IRQ_ADC	;wreg free
 13306  0000AE                     i1l661:
 13307  0000AE  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 13308  0000B2  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 13309  0000B6  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 13310  0000BA  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 13311  0000BE  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 13312  0000C2  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 13313  0000C6  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 13314  0000CA  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13315  0000CC  0010               	retfie	
 13316  0000CE                     __end_of_LOW_PRIORITY_IRQ:
 13317                           	opt stack 0
 13318                           tblptru	equ	0xFF8
 13319                           tblptrh	equ	0xFF7
 13320                           tblptrl	equ	0xFF6
 13321                           tablat	equ	0xFF5
 13322                           prodh	equ	0xFF4
 13323                           prodl	equ	0xFF3
 13324                           intcon	equ	0xFF2
 13325                           intcon2	equ	0xFF1
 13326                           intcon3	equ	0xFF0
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           indf1	equ	0xFE7
 13330                           postdec1	equ	0xFE5
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           bsr	equ	0xFE0
 13334                           indf2	equ	0xFDF
 13335                           postinc2	equ	0xFDE
 13336                           postdec2	equ	0xFDD
 13337                           fsr2h	equ	0xFDA
 13338                           fsr2l	equ	0xFD9
 13339                           status	equ	0xFD8
 13340                           
 13341 ;; *************** function i1_IRQ_TIMER_5 *****************
 13342 ;; Defined at:
 13343 ;;		line 409 in file "interrupt.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;		None
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;		None
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  1    wreg      void 
 13350 ;; Registers used:
 13351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13352 ;; Tracked objects:
 13353 ;;		On entry : 0/0
 13354 ;;		On exit  : 0/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13357 ;;      Params:         0       0       0       0
 13358 ;;      Locals:         0       0       0       0
 13359 ;;      Temps:          0       0       0       0
 13360 ;;      Totals:         0       0       0       0
 13361 ;;Total ram usage:        0 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    8
 13364 ;; This function calls:
 13365 ;;		i1_Alarme_On
 13366 ;;		i1_Buzzer_Etat
 13367 ;;		i1_Etat_Update
 13368 ;;		i1_TIMER5_Off
 13369 ;; This function is called by:
 13370 ;;		_LOW_PRIORITY_IRQ
 13371 ;; This function uses a non-reentrant model
 13372 ;;
 13373                           
 13374                           	psect	text80
 13375  001BAA                     __ptext80:
 13376                           	opt stack 0
 13377  001BAA                     i1_IRQ_TIMER_5:
 13378                           	opt stack 11
 13379                           
 13380                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 13381                           
 13382                           ;incstack = 0
 13383  001BAA  90A4               	bcf	4004,0,c	;volatile
 13384                           
 13385                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 13386  001BAC  0100               	movlb	0	; () banked
 13387  001BAE  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 13388                           
 13389                           ; BSR set to: 0
 13390                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 13391  001BB0  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 13392  001BB2  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13393  001BB4  E115               	bnz	i1l6902
 13394                           
 13395                           ; BSR set to: 0
 13396                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 13397  001BB6  044D               	decf	_Mouvement_Startup,w,c
 13398  001BB8  E001               	bz	i1l6888
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;interrupt.c: 418: nb_Pion += 1;
 13402  001BBA  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 13403  001BBC                     i1l6888:
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;interrupt.c: 419: }
 13407                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 13408  001BBC  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 13409                           
 13410                           ; BSR set to: 0
 13411                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 13412  001BBE  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13413  001BC0  E003               	bz	i1l599
 13414                           
 13415                           ; BSR set to: 0
 13416  001BC2  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13417  001BC4  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 13418  001BC6  E202               	bc	i1l6894
 13419  001BC8                     i1l599:
 13420                           
 13421                           ; BSR set to: 0
 13422  001BC8  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 13423  001BCA  0012               	return	
 13424  001BCC                     i1l6894:
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 13428  001BCC  0E00               	movlw	0
 13429  001BCE  EC4E  F013         	call	i1_Buzzer_Etat
 13430                           
 13431                           ;interrupt.c: 430: P4_busy = 0;
 13432  001BD2  0100               	movlb	0	; () banked
 13433  001BD4  6BAC               	clrf	_P4_busy& (0+255),b
 13434                           
 13435                           ; BSR set to: 0
 13436                           ;interrupt.c: 431: TIMER5_Off();
 13437  001BD6  EC6C  F013         	call	i1_TIMER5_Off	;wreg free
 13438                           
 13439                           ;interrupt.c: 432: Etat_Update(0);
 13440  001BDA  0E00               	movlw	0
 13441  001BDC  EF27  F012         	goto	i1_Etat_Update
 13442  001BE0                     i1l6902:
 13443                           
 13444                           ; BSR set to: 0
 13445  001BE0  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 13446  001BE2  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13447  001BE4  A4D8               	btfss	status,2,c
 13448  001BE6  0012               	return	
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 13452  001BE8  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 13453  001BEA  E10E               	bnz	i1l602
 13454                           
 13455                           ; BSR set to: 0
 13456  001BEC  B480               	btfsc	3968,2,c	;volatile
 13457  001BEE  D00C               	goto	i1l602
 13458                           
 13459                           ; BSR set to: 0
 13460  001BF0  044D               	decf	_Mouvement_Startup,w,c
 13461  001BF2  E10A               	bnz	i1l602
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;interrupt.c: 460: if (Option_Multitas==1){
 13465  001BF4  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 13466  001BF6  D004               	goto	i1l6914
 13467                           
 13468                           ; BSR set to: 0
 13469                           ;interrupt.c: 461: Alarme_On(11);
 13470  001BF8  0E0B               	movlw	11
 13471  001BFA  EC30  F013         	call	i1_Alarme_On
 13472                           
 13473                           ;interrupt.c: 462: }else{
 13474  001BFE  D008               	goto	i1l6918
 13475  001C00                     i1l6914:
 13476                           
 13477                           ; BSR set to: 0
 13478                           ;interrupt.c: 463: Alarme_On(6);
 13479  001C00  0E06               	movlw	6
 13480  001C02  EC30  F013         	call	i1_Alarme_On
 13481  001C06  D004               	goto	i1l6918
 13482  001C08                     i1l602:
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;interrupt.c: 467: P4_busy = 0;
 13486  001C08  6BAC               	clrf	_P4_busy& (0+255),b
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;interrupt.c: 468: Etat_Update(6);
 13490  001C0A  0E06               	movlw	6
 13491  001C0C  EC27  F012         	call	i1_Etat_Update
 13492  001C10                     i1l6918:
 13493                           
 13494                           ;interrupt.c: 471: }
 13495                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 13496  001C10  0E00               	movlw	0
 13497  001C12  EC4E  F013         	call	i1_Buzzer_Etat
 13498                           
 13499                           ;interrupt.c: 474: TIMER5_Off();
 13500  001C16  EF6C  F013         	goto	i1_TIMER5_Off	;wreg free
 13501  001C1A                     __end_ofi1_IRQ_TIMER_5:
 13502                           	opt stack 0
 13503                           tblptru	equ	0xFF8
 13504                           tblptrh	equ	0xFF7
 13505                           tblptrl	equ	0xFF6
 13506                           tablat	equ	0xFF5
 13507                           prodh	equ	0xFF4
 13508                           prodl	equ	0xFF3
 13509                           intcon	equ	0xFF2
 13510                           intcon2	equ	0xFF1
 13511                           intcon3	equ	0xFF0
 13512                           postinc0	equ	0xFEE
 13513                           wreg	equ	0xFE8
 13514                           indf1	equ	0xFE7
 13515                           postdec1	equ	0xFE5
 13516                           fsr1h	equ	0xFE2
 13517                           fsr1l	equ	0xFE1
 13518                           bsr	equ	0xFE0
 13519                           indf2	equ	0xFDF
 13520                           postinc2	equ	0xFDE
 13521                           postdec2	equ	0xFDD
 13522                           fsr2h	equ	0xFDA
 13523                           fsr2l	equ	0xFD9
 13524                           status	equ	0xFD8
 13525                           
 13526 ;; *************** function i1_Alarme_On *****************
 13527 ;; Defined at:
 13528 ;;		line 18 in file "alarme.c"
 13529 ;; Parameters:    Size  Location     Type
 13530 ;;  alarme_new_v    1    wreg     unsigned char 
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  1    wreg      void 
 13535 ;; Registers used:
 13536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13537 ;; Tracked objects:
 13538 ;;		On entry : 3F/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13542 ;;      Params:         0       0       0       0
 13543 ;;      Locals:         1       0       0       0
 13544 ;;      Temps:          0       0       0       0
 13545 ;;      Totals:         1       0       0       0
 13546 ;;Total ram usage:        1 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; Hardware stack levels required when called:    7
 13549 ;; This function calls:
 13550 ;;		i1_Coupe_Moteur
 13551 ;;		i1_Etat_Update
 13552 ;; This function is called by:
 13553 ;;		i1_IRQ_TIMER_5
 13554 ;; This function uses a non-reentrant model
 13555 ;;
 13556                           
 13557                           	psect	text81
 13558  002660                     __ptext81:
 13559                           	opt stack 0
 13560  002660                     i1_Alarme_On:
 13561                           	opt stack 11
 13562                           
 13563                           ;incstack = 0
 13564                           ;i1Alarme_On@alarme_new_value stored from wreg
 13565  002660  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 13566                           
 13567                           ;alarme.c: 22: Etat_Update(1);
 13568  002662  0E01               	movlw	1
 13569  002664  EC27  F012         	call	i1_Etat_Update
 13570                           
 13571                           ;alarme.c: 23: Alarme = alarme_new_value;
 13572  002668  C006  F0A9         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 13573                           
 13574                           ;alarme.c: 24: Coupe_Moteur();
 13575  00266C  EFD0  F012         	goto	i1_Coupe_Moteur	;wreg free
 13576  002670                     __end_ofi1_Alarme_On:
 13577                           	opt stack 0
 13578                           tblptru	equ	0xFF8
 13579                           tblptrh	equ	0xFF7
 13580                           tblptrl	equ	0xFF6
 13581                           tablat	equ	0xFF5
 13582                           prodh	equ	0xFF4
 13583                           prodl	equ	0xFF3
 13584                           intcon	equ	0xFF2
 13585                           intcon2	equ	0xFF1
 13586                           intcon3	equ	0xFF0
 13587                           postinc0	equ	0xFEE
 13588                           wreg	equ	0xFE8
 13589                           indf1	equ	0xFE7
 13590                           postdec1	equ	0xFE5
 13591                           fsr1h	equ	0xFE2
 13592                           fsr1l	equ	0xFE1
 13593                           bsr	equ	0xFE0
 13594                           indf2	equ	0xFDF
 13595                           postinc2	equ	0xFDE
 13596                           postdec2	equ	0xFDD
 13597                           fsr2h	equ	0xFDA
 13598                           fsr2l	equ	0xFD9
 13599                           status	equ	0xFD8
 13600                           
 13601 ;; *************** function i1_Etat_Update *****************
 13602 ;; Defined at:
 13603 ;;		line 74 in file "action.c"
 13604 ;; Parameters:    Size  Location     Type
 13605 ;;  etat_new_val    1    wreg     unsigned char 
 13606 ;; Auto vars:     Size  Location     Type
 13607 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 13608 ;; Return value:  Size  Location     Type
 13609 ;;                  1    wreg      void 
 13610 ;; Registers used:
 13611 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13612 ;; Tracked objects:
 13613 ;;		On entry : 0/0
 13614 ;;		On exit  : 0/0
 13615 ;;		Unchanged: 0/0
 13616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13617 ;;      Params:         0       0       0       0
 13618 ;;      Locals:         1       0       0       0
 13619 ;;      Temps:          0       0       0       0
 13620 ;;      Totals:         1       0       0       0
 13621 ;;Total ram usage:        1 bytes
 13622 ;; Hardware stack levels used:    1
 13623 ;; Hardware stack levels required when called:    5
 13624 ;; This function calls:
 13625 ;;		Nothing
 13626 ;; This function is called by:
 13627 ;;		i1_IRQ_TIMER_5
 13628 ;;		i1_Alarme_On
 13629 ;; This function uses a non-reentrant model
 13630 ;;
 13631                           
 13632                           	psect	text82
 13633  00244E                     __ptext82:
 13634                           	opt stack 0
 13635  00244E                     i1_Etat_Update:
 13636                           	opt stack 13
 13637                           
 13638                           ;incstack = 0
 13639                           ;i1Etat_Update@etat_new_value stored from wreg
 13640  00244E  6E05               	movwf	i1Etat_Update@etat_new_value,c
 13641                           
 13642                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 13643  002450  504C               	movf	_Etat_Precedent_Index,w,c
 13644  002452  0F6A               	addlw	low _Etat_Log
 13645  002454  6ED9               	movwf	fsr2l,c
 13646  002456  6ADA               	clrf	fsr2h,c
 13647  002458  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 13648                           
 13649                           ;action.c: 76: Etat = etat_new_value;
 13650  00245C  C005  F0AA         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 13651                           
 13652                           ;action.c: 77: Etat_Precedent_Index++;
 13653  002460  2A4C               	incf	_Etat_Precedent_Index,f,c
 13654                           
 13655                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 13656  002462  0E0A               	movlw	10
 13657  002464  184C               	xorwf	_Etat_Precedent_Index,w,c
 13658  002466  B4D8               	btfsc	status,2,c
 13659                           
 13660                           ;action.c: 79: Etat_Precedent_Index = 0;
 13661  002468  6A4C               	clrf	_Etat_Precedent_Index,c
 13662  00246A  0012               	return		;funcret
 13663  00246C                     __end_ofi1_Etat_Update:
 13664                           	opt stack 0
 13665                           tblptru	equ	0xFF8
 13666                           tblptrh	equ	0xFF7
 13667                           tblptrl	equ	0xFF6
 13668                           tablat	equ	0xFF5
 13669                           prodh	equ	0xFF4
 13670                           prodl	equ	0xFF3
 13671                           intcon	equ	0xFF2
 13672                           intcon2	equ	0xFF1
 13673                           intcon3	equ	0xFF0
 13674                           postinc0	equ	0xFEE
 13675                           wreg	equ	0xFE8
 13676                           indf1	equ	0xFE7
 13677                           postdec1	equ	0xFE5
 13678                           fsr1h	equ	0xFE2
 13679                           fsr1l	equ	0xFE1
 13680                           bsr	equ	0xFE0
 13681                           indf2	equ	0xFDF
 13682                           postinc2	equ	0xFDE
 13683                           postdec2	equ	0xFDD
 13684                           fsr2h	equ	0xFDA
 13685                           fsr2l	equ	0xFD9
 13686                           status	equ	0xFD8
 13687                           
 13688 ;; *************** function i1_Coupe_Moteur *****************
 13689 ;; Defined at:
 13690 ;;		line 261 in file "action.c"
 13691 ;; Parameters:    Size  Location     Type
 13692 ;;		None
 13693 ;; Auto vars:     Size  Location     Type
 13694 ;;		None
 13695 ;; Return value:  Size  Location     Type
 13696 ;;                  1    wreg      void 
 13697 ;; Registers used:
 13698 ;;		cstack
 13699 ;; Tracked objects:
 13700 ;;		On entry : 0/0
 13701 ;;		On exit  : 0/0
 13702 ;;		Unchanged: 0/0
 13703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13704 ;;      Params:         0       0       0       0
 13705 ;;      Locals:         0       0       0       0
 13706 ;;      Temps:          0       0       0       0
 13707 ;;      Totals:         0       0       0       0
 13708 ;;Total ram usage:        0 bytes
 13709 ;; Hardware stack levels used:    1
 13710 ;; Hardware stack levels required when called:    6
 13711 ;; This function calls:
 13712 ;;		i1_TIMER2_Off
 13713 ;; This function is called by:
 13714 ;;		i1_Alarme_On
 13715 ;; This function uses a non-reentrant model
 13716 ;;
 13717                           
 13718                           	psect	text83
 13719  0025A0                     __ptext83:
 13720                           	opt stack 0
 13721  0025A0                     i1_Coupe_Moteur:
 13722                           	opt stack 11
 13723                           
 13724                           ;action.c: 262: TIMER2_Off();
 13725                           
 13726                           ;incstack = 0
 13727  0025A0  EC8A  F013         	call	i1_TIMER2_Off	;wreg free
 13728                           
 13729                           ;action.c: 274: LATCbits.LATC0 = 0;
 13730  0025A4  908B               	bcf	3979,0,c	;volatile
 13731                           
 13732                           ;action.c: 275: LATCbits.LATC1 = 0;
 13733  0025A6  928B               	bcf	3979,1,c	;volatile
 13734                           
 13735                           ;action.c: 276: OVDCOND = 0b00000000;
 13736  0025A8  6A6B               	clrf	3947,c	;volatile
 13737                           
 13738                           ;action.c: 277: LATD4 = 0;LATD5 = 0;
 13739  0025AA  988C               	bcf	3980,4,c	;volatile
 13740  0025AC  9A8C               	bcf	3980,5,c	;volatile
 13741                           
 13742                           ;action.c: 278: LATD6 = 0;LATD7 = 0;
 13743  0025AE  9C8C               	bcf	3980,6,c	;volatile
 13744  0025B0  9E8C               	bcf	3980,7,c	;volatile
 13745  0025B2  0012               	return		;funcret
 13746  0025B4                     __end_ofi1_Coupe_Moteur:
 13747                           	opt stack 0
 13748                           tblptru	equ	0xFF8
 13749                           tblptrh	equ	0xFF7
 13750                           tblptrl	equ	0xFF6
 13751                           tablat	equ	0xFF5
 13752                           prodh	equ	0xFF4
 13753                           prodl	equ	0xFF3
 13754                           intcon	equ	0xFF2
 13755                           intcon2	equ	0xFF1
 13756                           intcon3	equ	0xFF0
 13757                           postinc0	equ	0xFEE
 13758                           wreg	equ	0xFE8
 13759                           indf1	equ	0xFE7
 13760                           postdec1	equ	0xFE5
 13761                           fsr1h	equ	0xFE2
 13762                           fsr1l	equ	0xFE1
 13763                           bsr	equ	0xFE0
 13764                           indf2	equ	0xFDF
 13765                           postinc2	equ	0xFDE
 13766                           postdec2	equ	0xFDD
 13767                           fsr2h	equ	0xFDA
 13768                           fsr2l	equ	0xFD9
 13769                           status	equ	0xFD8
 13770                           
 13771 ;; *************** function i1_TIMER2_Off *****************
 13772 ;; Defined at:
 13773 ;;		line 165 in file "timer.c"
 13774 ;; Parameters:    Size  Location     Type
 13775 ;;		None
 13776 ;; Auto vars:     Size  Location     Type
 13777 ;;		None
 13778 ;; Return value:  Size  Location     Type
 13779 ;;                  1    wreg      void 
 13780 ;; Registers used:
 13781 ;;		None
 13782 ;; Tracked objects:
 13783 ;;		On entry : 0/0
 13784 ;;		On exit  : 0/0
 13785 ;;		Unchanged: 0/0
 13786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13787 ;;      Params:         0       0       0       0
 13788 ;;      Locals:         0       0       0       0
 13789 ;;      Temps:          0       0       0       0
 13790 ;;      Totals:         0       0       0       0
 13791 ;;Total ram usage:        0 bytes
 13792 ;; Hardware stack levels used:    1
 13793 ;; Hardware stack levels required when called:    5
 13794 ;; This function calls:
 13795 ;;		Nothing
 13796 ;; This function is called by:
 13797 ;;		i1_Coupe_Moteur
 13798 ;; This function uses a non-reentrant model
 13799 ;;
 13800                           
 13801                           	psect	text84
 13802  002714                     __ptext84:
 13803                           	opt stack 0
 13804  002714                     i1_TIMER2_Off:
 13805                           	opt stack 11
 13806                           
 13807                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 13808                           
 13809                           ;incstack = 0
 13810  002714  929D               	bcf	3997,1,c	;volatile
 13811                           
 13812                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 13813  002716  929E               	bcf	3998,1,c	;volatile
 13814  002718  0012               	return		;funcret
 13815  00271A                     __end_ofi1_TIMER2_Off:
 13816                           	opt stack 0
 13817                           tblptru	equ	0xFF8
 13818                           tblptrh	equ	0xFF7
 13819                           tblptrl	equ	0xFF6
 13820                           tablat	equ	0xFF5
 13821                           prodh	equ	0xFF4
 13822                           prodl	equ	0xFF3
 13823                           intcon	equ	0xFF2
 13824                           intcon2	equ	0xFF1
 13825                           intcon3	equ	0xFF0
 13826                           postinc0	equ	0xFEE
 13827                           wreg	equ	0xFE8
 13828                           indf1	equ	0xFE7
 13829                           postdec1	equ	0xFE5
 13830                           fsr1h	equ	0xFE2
 13831                           fsr1l	equ	0xFE1
 13832                           bsr	equ	0xFE0
 13833                           indf2	equ	0xFDF
 13834                           postinc2	equ	0xFDE
 13835                           postdec2	equ	0xFDD
 13836                           fsr2h	equ	0xFDA
 13837                           fsr2l	equ	0xFD9
 13838                           status	equ	0xFD8
 13839                           
 13840 ;; *************** function i1_IRQ_TIMER_0 *****************
 13841 ;; Defined at:
 13842 ;;		line 361 in file "interrupt.c"
 13843 ;; Parameters:    Size  Location     Type
 13844 ;;		None
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;		None
 13847 ;; Return value:  Size  Location     Type
 13848 ;;                  1    wreg      void 
 13849 ;; Registers used:
 13850 ;;		wreg, status,2, status,0, cstack
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 3F/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13856 ;;      Params:         0       0       0       0
 13857 ;;      Locals:         0       0       0       0
 13858 ;;      Temps:          0       0       0       0
 13859 ;;      Totals:         0       0       0       0
 13860 ;;Total ram usage:        0 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; Hardware stack levels required when called:    6
 13863 ;; This function calls:
 13864 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 13865 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 13866 ;; This function is called by:
 13867 ;;		_LOW_PRIORITY_IRQ
 13868 ;; This function uses a non-reentrant model
 13869 ;;
 13870                           
 13871                           	psect	text85
 13872  001E62                     __ptext85:
 13873                           	opt stack 0
 13874  001E62                     i1_IRQ_TIMER_0:
 13875                           	opt stack 13
 13876                           
 13877                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 13878                           
 13879                           ;incstack = 0
 13880  001E62  94F2               	bcf	intcon,2,c	;volatile
 13881                           
 13882                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 13883  001E64  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 13884                           
 13885                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 13886  001E66  0100               	movlb	0	; () banked
 13887  001E68  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 13888                           
 13889                           ;interrupt.c: 366: delay_s_counter += 1;
 13890  001E6A  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 13891                           
 13892                           ; BSR set to: 0
 13893                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 13894  001E6C  0E02               	movlw	2
 13895  001E6E  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 13896  001E70  E01C               	bz	i1l6876
 13897  001E72  0012               	return	
 13898  001E74                     i1l6856:
 13899                           
 13900                           ; BSR set to: 0
 13901                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 13902  001E74  ECFF  F012         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13903                           
 13904                           ; BSR set to: 0
 13905                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13906  001E78  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13907  001E7A  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13908  001E7C  E203               	bc	i1l580
 13909  001E7E                     i1l6860:
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;interrupt.c: 381: consigne = Consigne_Max;
 13913  001E7E  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 13914                           
 13915                           ;interrupt.c: 382: } else {
 13916  001E82  0012               	return	
 13917  001E84                     i1l580:
 13918                           
 13919                           ; BSR set to: 0
 13920                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 13921  001E84  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13922  001E88  0012               	return	
 13923  001E8A                     i1l6862:
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 13927  001E8A  ECF6  F012         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13928                           
 13929                           ; BSR set to: 0
 13930                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 13931  001E8E  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 13932  001E90  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13933  001E92  E3F5               	bnc	i1l6860
 13934                           
 13935                           ; BSR set to: 0
 13936                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 13937  001E94  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 13938  001E98  0012               	return	
 13939  001E9A                     i1l6868:
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 13943  001E9A  ECF6  F012         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13944                           
 13945                           ; BSR set to: 0
 13946                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 13947  001E9E  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 13948  001EA0  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13949  001EA2  E3ED               	bnc	i1l6860
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 13953  001EA4  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 13954  001EA8  0012               	return	
 13955  001EAA                     i1l6876:
 13956                           
 13957                           ; BSR set to: 0
 13958  001EAA  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 13959                           
 13960                           ; Switch size 1, requested type "speed"
 13961                           ; Number of cases is 3, Range of values is 1 to 3
 13962                           ; switch strategies available:
 13963                           ; Name         Instructions Cycles
 13964                           ; simple_byte           10     6 (average)
 13965                           ;	Chosen strategy is simple_byte
 13966  001EAC  0A01               	xorlw	1	; case 1
 13967  001EAE  E0E2               	bz	i1l6856
 13968  001EB0  0A03               	xorlw	3	; case 2
 13969  001EB2  E0EB               	bz	i1l6862
 13970  001EB4  0A01               	xorlw	1	; case 3
 13971  001EB6  E0F1               	bz	i1l6868
 13972                           
 13973                           ; BSR set to: 0
 13974  001EB8  0012               	return		;funcret
 13975  001EBA                     __end_ofi1_IRQ_TIMER_0:
 13976                           	opt stack 0
 13977                           tblptru	equ	0xFF8
 13978                           tblptrh	equ	0xFF7
 13979                           tblptrl	equ	0xFF6
 13980                           tablat	equ	0xFF5
 13981                           prodh	equ	0xFF4
 13982                           prodl	equ	0xFF3
 13983                           intcon	equ	0xFF2
 13984                           intcon2	equ	0xFF1
 13985                           intcon3	equ	0xFF0
 13986                           postinc0	equ	0xFEE
 13987                           wreg	equ	0xFE8
 13988                           indf1	equ	0xFE7
 13989                           postdec1	equ	0xFE5
 13990                           fsr1h	equ	0xFE2
 13991                           fsr1l	equ	0xFE1
 13992                           bsr	equ	0xFE0
 13993                           indf2	equ	0xFDF
 13994                           postinc2	equ	0xFDE
 13995                           postdec2	equ	0xFDD
 13996                           fsr2h	equ	0xFDA
 13997                           fsr2l	equ	0xFD9
 13998                           status	equ	0xFD8
 13999                           
 14000 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 14001 ;; Defined at:
 14002 ;;		line 868 in file "interrupt.c"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;		None
 14005 ;; Auto vars:     Size  Location     Type
 14006 ;;		None
 14007 ;; Return value:  Size  Location     Type
 14008 ;;                  1    wreg      void 
 14009 ;; Registers used:
 14010 ;;		wreg, status,2, status,0
 14011 ;; Tracked objects:
 14012 ;;		On entry : 0/0
 14013 ;;		On exit  : 3F/0
 14014 ;;		Unchanged: 0/0
 14015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14016 ;;      Params:         0       0       0       0
 14017 ;;      Locals:         0       0       0       0
 14018 ;;      Temps:          0       0       0       0
 14019 ;;      Totals:         0       0       0       0
 14020 ;;Total ram usage:        0 bytes
 14021 ;; Hardware stack levels used:    1
 14022 ;; Hardware stack levels required when called:    5
 14023 ;; This function calls:
 14024 ;;		Nothing
 14025 ;; This function is called by:
 14026 ;;		i1_IRQ_TIMER_0
 14027 ;; This function uses a non-reentrant model
 14028 ;;
 14029                           
 14030                           	psect	text86
 14031  0025EC                     __ptext86:
 14032                           	opt stack 0
 14033  0025EC                     i1_Surveillance_Consommation_Moteur_2_Activer:
 14034                           	opt stack 13
 14035                           
 14036                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;incstack = 0
 14040  0025EC  0100               	movlb	0	; () banked
 14041  0025EE  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 14042  0025F0  B4D8               	btfsc	status,2,c
 14043  0025F2  0012               	return	
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 14047  0025F4  0E01               	movlw	1
 14048  0025F6  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 14049                           
 14050                           ; BSR set to: 0
 14051                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 14052  0025F8  92F0               	bcf	intcon3,1,c	;volatile
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 14056  0025FA  88F0               	bsf	intcon3,4,c	;volatile
 14057                           
 14058                           ; BSR set to: 0
 14059  0025FC  0C01               	retlw	1	;funcret
 14060  0025FE                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 14061                           	opt stack 0
 14062                           tblptru	equ	0xFF8
 14063                           tblptrh	equ	0xFF7
 14064                           tblptrl	equ	0xFF6
 14065                           tablat	equ	0xFF5
 14066                           prodh	equ	0xFF4
 14067                           prodl	equ	0xFF3
 14068                           intcon	equ	0xFF2
 14069                           intcon2	equ	0xFF1
 14070                           intcon3	equ	0xFF0
 14071                           postinc0	equ	0xFEE
 14072                           wreg	equ	0xFE8
 14073                           indf1	equ	0xFE7
 14074                           postdec1	equ	0xFE5
 14075                           fsr1h	equ	0xFE2
 14076                           fsr1l	equ	0xFE1
 14077                           bsr	equ	0xFE0
 14078                           indf2	equ	0xFDF
 14079                           postinc2	equ	0xFDE
 14080                           postdec2	equ	0xFDD
 14081                           fsr2h	equ	0xFDA
 14082                           fsr2l	equ	0xFD9
 14083                           status	equ	0xFD8
 14084                           
 14085 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 14086 ;; Defined at:
 14087 ;;		line 852 in file "interrupt.c"
 14088 ;; Parameters:    Size  Location     Type
 14089 ;;		None
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;		None
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  1    wreg      void 
 14094 ;; Registers used:
 14095 ;;		wreg, status,2, status,0
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 3F/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14101 ;;      Params:         0       0       0       0
 14102 ;;      Locals:         0       0       0       0
 14103 ;;      Temps:          0       0       0       0
 14104 ;;      Totals:         0       0       0       0
 14105 ;;Total ram usage:        0 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    5
 14108 ;; This function calls:
 14109 ;;		Nothing
 14110 ;; This function is called by:
 14111 ;;		i1_IRQ_TIMER_0
 14112 ;; This function uses a non-reentrant model
 14113 ;;
 14114                           
 14115                           	psect	text87
 14116  0025FE                     __ptext87:
 14117                           	opt stack 0
 14118  0025FE                     i1_Surveillance_Consommation_Moteur_1_Activer:
 14119                           	opt stack 13
 14120                           
 14121                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;incstack = 0
 14125  0025FE  0100               	movlb	0	; () banked
 14126  002600  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 14127  002602  B4D8               	btfsc	status,2,c
 14128  002604  0012               	return	
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 14132  002606  0E01               	movlw	1
 14133  002608  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 14137  00260A  90F0               	bcf	intcon3,0,c	;volatile
 14138                           
 14139                           ; BSR set to: 0
 14140                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 14141  00260C  86F0               	bsf	intcon3,3,c	;volatile
 14142                           
 14143                           ; BSR set to: 0
 14144  00260E  0C01               	retlw	1	;funcret
 14145  002610                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 14146                           	opt stack 0
 14147                           tblptru	equ	0xFF8
 14148                           tblptrh	equ	0xFF7
 14149                           tblptrl	equ	0xFF6
 14150                           tablat	equ	0xFF5
 14151                           prodh	equ	0xFF4
 14152                           prodl	equ	0xFF3
 14153                           intcon	equ	0xFF2
 14154                           intcon2	equ	0xFF1
 14155                           intcon3	equ	0xFF0
 14156                           postinc0	equ	0xFEE
 14157                           wreg	equ	0xFE8
 14158                           indf1	equ	0xFE7
 14159                           postdec1	equ	0xFE5
 14160                           fsr1h	equ	0xFE2
 14161                           fsr1l	equ	0xFE1
 14162                           bsr	equ	0xFE0
 14163                           indf2	equ	0xFDF
 14164                           postinc2	equ	0xFDE
 14165                           postdec2	equ	0xFDD
 14166                           fsr2h	equ	0xFDA
 14167                           fsr2l	equ	0xFD9
 14168                           status	equ	0xFD8
 14169                           
 14170 ;; *************** function i1_IRQ_PWM *****************
 14171 ;; Defined at:
 14172 ;;		line 481 in file "interrupt.c"
 14173 ;; Parameters:    Size  Location     Type
 14174 ;;		None
 14175 ;; Auto vars:     Size  Location     Type
 14176 ;;		None
 14177 ;; Return value:  Size  Location     Type
 14178 ;;                  1    wreg      void 
 14179 ;; Registers used:
 14180 ;;		None
 14181 ;; Tracked objects:
 14182 ;;		On entry : 0/0
 14183 ;;		On exit  : 0/0
 14184 ;;		Unchanged: 0/0
 14185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14186 ;;      Params:         0       0       0       0
 14187 ;;      Locals:         0       0       0       0
 14188 ;;      Temps:          0       0       0       0
 14189 ;;      Totals:         0       0       0       0
 14190 ;;Total ram usage:        0 bytes
 14191 ;; Hardware stack levels used:    1
 14192 ;; Hardware stack levels required when called:    5
 14193 ;; This function calls:
 14194 ;;		Nothing
 14195 ;; This function is called by:
 14196 ;;		_LOW_PRIORITY_IRQ
 14197 ;; This function uses a non-reentrant model
 14198 ;;
 14199                           
 14200                           	psect	text88
 14201  002736                     __ptext88:
 14202                           	opt stack 0
 14203  002736                     i1_IRQ_PWM:
 14204                           	opt stack 14
 14205                           
 14206                           ;interrupt.c: 483: PTIF = 0;
 14207                           
 14208                           ; BSR set to: 0
 14209                           ;incstack = 0
 14210  002736  98A4               	bcf	4004,4,c	;volatile
 14211  002738  0012               	return		;funcret
 14212  00273A                     __end_ofi1_IRQ_PWM:
 14213                           	opt stack 0
 14214                           tblptru	equ	0xFF8
 14215                           tblptrh	equ	0xFF7
 14216                           tblptrl	equ	0xFF6
 14217                           tablat	equ	0xFF5
 14218                           prodh	equ	0xFF4
 14219                           prodl	equ	0xFF3
 14220                           intcon	equ	0xFF2
 14221                           intcon2	equ	0xFF1
 14222                           intcon3	equ	0xFF0
 14223                           postinc0	equ	0xFEE
 14224                           wreg	equ	0xFE8
 14225                           indf1	equ	0xFE7
 14226                           postdec1	equ	0xFE5
 14227                           fsr1h	equ	0xFE2
 14228                           fsr1l	equ	0xFE1
 14229                           bsr	equ	0xFE0
 14230                           indf2	equ	0xFDF
 14231                           postinc2	equ	0xFDE
 14232                           postdec2	equ	0xFDD
 14233                           fsr2h	equ	0xFDA
 14234                           fsr2l	equ	0xFD9
 14235                           status	equ	0xFD8
 14236                           
 14237 ;; *************** function i1_IRQ_ADC *****************
 14238 ;; Defined at:
 14239 ;;		line 486 in file "interrupt.c"
 14240 ;; Parameters:    Size  Location     Type
 14241 ;;		None
 14242 ;; Auto vars:     Size  Location     Type
 14243 ;;		None
 14244 ;; Return value:  Size  Location     Type
 14245 ;;                  1    wreg      void 
 14246 ;; Registers used:
 14247 ;;		wreg, status,2, status,0
 14248 ;; Tracked objects:
 14249 ;;		On entry : 0/0
 14250 ;;		On exit  : 3F/0
 14251 ;;		Unchanged: 0/0
 14252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14253 ;;      Params:         0       0       0       0
 14254 ;;      Locals:         0       0       0       0
 14255 ;;      Temps:          3       0       0       0
 14256 ;;      Totals:         3       0       0       0
 14257 ;;Total ram usage:        3 bytes
 14258 ;; Hardware stack levels used:    1
 14259 ;; Hardware stack levels required when called:    5
 14260 ;; This function calls:
 14261 ;;		Nothing
 14262 ;; This function is called by:
 14263 ;;		_LOW_PRIORITY_IRQ
 14264 ;; This function uses a non-reentrant model
 14265 ;;
 14266                           
 14267                           	psect	text89
 14268  000FAA                     __ptext89:
 14269                           	opt stack 0
 14270  000FAA                     i1_IRQ_ADC:
 14271                           	opt stack 14
 14272                           
 14273                           ;interrupt.c: 487: switch (moteur_indice) {
 14274                           
 14275                           ;incstack = 0
 14276  000FAA  D0C7               	goto	i1l6978
 14277  000FAC                     i1l614:
 14278                           
 14279                           ; BSR set to: 0
 14280                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 14281  000FAC  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 14282                           
 14283                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 14284  000FB0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14285                           
 14286                           ;interrupt.c: 492: ADIF = 0;
 14287  000FB2  9C9E               	bcf	3998,6,c	;volatile
 14288                           
 14289                           ; BSR set to: 0
 14290                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 14291  000FB4  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 14292  000FB6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14293  000FB8  6F84               	movwf	_erreur& (0+255),b	;volatile
 14294  000FBA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14295  000FBC  A0D8               	btfss	status,0,c
 14296  000FBE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14297                           
 14298                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 14299  000FC0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14300  000FC2  D008               	goto	i1l6928
 14301  000FC4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14302  000FC6  E103               	bnz	i1u493_20
 14303  000FC8  0E0A               	movlw	10
 14304  000FCA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14305  000FCC  E303               	bnc	i1l6928
 14306  000FCE                     i1u493_20:
 14307                           
 14308                           ; BSR set to: 0
 14309  000FCE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14310  000FD0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14311  000FD2  D006               	goto	i1l616
 14312  000FD4                     i1l6928:
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 14316  000FD4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14317  000FD6  D004               	goto	i1l616
 14318                           
 14319                           ; BSR set to: 0
 14320  000FD8  5184               	movf	_erreur& (0+255),w,b	;volatile
 14321  000FDA  2786               	addwf	_duty& (0+255),f,b	;volatile
 14322  000FDC  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14323  000FDE  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 14324  000FE0                     i1l616:
 14325                           
 14326                           ; BSR set to: 0
 14327                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 14328  000FE0  507B               	movf	3963,w,c	;volatile
 14329  000FE2  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14330  000FE4  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14331  000FE6  5186               	movf	_duty& (0+255),w,b	;volatile
 14332  000FE8  5C05               	subwf	??i1_IRQ_ADC,w,c
 14333  000FEA  5006               	movf	??i1_IRQ_ADC+1,w,c
 14334  000FEC  0A80               	xorlw	128
 14335  000FEE  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14336  000FF0  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14337  000FF2  0A80               	xorlw	128
 14338  000FF4  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14339  000FF6  E203               	bc	i1l6934
 14340                           
 14341                           ; BSR set to: 0
 14342  000FF8  CF7B F086          	movff	3963,_duty	;volatile
 14343  000FFC  D003               	goto	L5
 14344  000FFE                     i1l6934:
 14345                           
 14346                           ; BSR set to: 0
 14347                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 14348  000FFE  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14349  001000  D002               	goto	i1l6938
 14350                           
 14351                           ; BSR set to: 0
 14352  001002  6B86               	clrf	_duty& (0+255),b	;volatile
 14353  001004                     L5:
 14354  001004  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14355  001006                     i1l6938:
 14356                           
 14357                           ; BSR set to: 0
 14358                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 14359  001006  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14360  001008  46E8               	rlncf	wreg,f,c
 14361  00100A  0BFC               	andlw	252
 14362  00100C  6E79               	movwf	3961,c	;volatile
 14363                           
 14364                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 14365  00100E  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14366  001012  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14367  001016  90D8               	bcf	status,0,c
 14368  001018  3605               	rlcf	??i1_IRQ_ADC,f,c
 14369  00101A  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14370  00101C  90D8               	bcf	status,0,c
 14371  00101E  3605               	rlcf	??i1_IRQ_ADC,f,c
 14372  001020  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14373  001022  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14374  001026  6A06               	clrf	??i1_IRQ_ADC+1,c
 14375  001028  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14376  00102A  6806               	setf	??i1_IRQ_ADC+1,c
 14377  00102C  5005               	movf	??i1_IRQ_ADC,w,c
 14378  00102E  6E78               	movwf	3960,c	;volatile
 14379                           
 14380                           ;interrupt.c: 508: break;
 14381  001030  0012               	return	
 14382  001032                     i1l622:
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 14386  001032  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14387                           
 14388                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 14389  001036  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14390                           
 14391                           ;interrupt.c: 518: ADIF = 0;
 14392  001038  9C9E               	bcf	3998,6,c	;volatile
 14393                           
 14394                           ; BSR set to: 0
 14395                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 14396  00103A  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14397  00103C  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14398  00103E  6F84               	movwf	_erreur& (0+255),b	;volatile
 14399  001040  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14400  001042  A0D8               	btfss	status,0,c
 14401  001044  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14402                           
 14403                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 14404  001046  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14405  001048  D008               	goto	i1l6944
 14406  00104A  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14407  00104C  E103               	bnz	i1u497_20
 14408  00104E  0E0A               	movlw	10
 14409  001050  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14410  001052  E303               	bnc	i1l6944
 14411  001054                     i1u497_20:
 14412                           
 14413                           ; BSR set to: 0
 14414  001054  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14415  001056  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14416  001058  D005               	goto	i1l6948
 14417  00105A                     i1l6944:
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 14421  00105A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14422  00105C  D003               	goto	i1l6948
 14423                           
 14424                           ; BSR set to: 0
 14425  00105E  0786               	decf	_duty& (0+255),f,b	;volatile
 14426  001060  A0D8               	btfss	status,0,c
 14427  001062  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14428  001064                     i1l6948:
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 14432  001064  507B               	movf	3963,w,c	;volatile
 14433  001066  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14434  001068  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14435  00106A  5186               	movf	_duty& (0+255),w,b	;volatile
 14436  00106C  5C05               	subwf	??i1_IRQ_ADC,w,c
 14437  00106E  5006               	movf	??i1_IRQ_ADC+1,w,c
 14438  001070  0A80               	xorlw	128
 14439  001072  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14440  001074  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14441  001076  0A80               	xorlw	128
 14442  001078  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14443  00107A  E203               	bc	i1l6952
 14444                           
 14445                           ; BSR set to: 0
 14446  00107C  CF7B F086          	movff	3963,_duty	;volatile
 14447  001080  D003               	goto	L6
 14448  001082                     i1l6952:
 14449                           
 14450                           ; BSR set to: 0
 14451                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 14452  001082  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14453  001084  D002               	goto	i1l6956
 14454                           
 14455                           ; BSR set to: 0
 14456  001086  6B86               	clrf	_duty& (0+255),b	;volatile
 14457  001088                     L6:
 14458  001088  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14459  00108A                     i1l6956:
 14460                           
 14461                           ; BSR set to: 0
 14462                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 14463  00108A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14464  00108C  46E8               	rlncf	wreg,f,c
 14465  00108E  0BFC               	andlw	252
 14466  001090  6E77               	movwf	3959,c	;volatile
 14467                           
 14468                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 14469  001092  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14470  001096  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14471  00109A  90D8               	bcf	status,0,c
 14472  00109C  3605               	rlcf	??i1_IRQ_ADC,f,c
 14473  00109E  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14474  0010A0  90D8               	bcf	status,0,c
 14475  0010A2  3605               	rlcf	??i1_IRQ_ADC,f,c
 14476  0010A4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14477  0010A6  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14478  0010AA  6A06               	clrf	??i1_IRQ_ADC+1,c
 14479  0010AC  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14480  0010AE  6806               	setf	??i1_IRQ_ADC+1,c
 14481  0010B0  5005               	movf	??i1_IRQ_ADC,w,c
 14482  0010B2  6E76               	movwf	3958,c	;volatile
 14483                           
 14484                           ;interrupt.c: 532: break;
 14485  0010B4  0012               	return	
 14486  0010B6                     i1l629:
 14487                           
 14488                           ; BSR set to: 0
 14489                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 14490  0010B6  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14491                           
 14492                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 14493  0010BA  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14494                           
 14495                           ;interrupt.c: 539: ADIF = 0;
 14496  0010BC  9C9E               	bcf	3998,6,c	;volatile
 14497                           
 14498                           ; BSR set to: 0
 14499                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 14500  0010BE  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14501  0010C0  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14502  0010C2  6F84               	movwf	_erreur& (0+255),b	;volatile
 14503  0010C4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14504  0010C6  A0D8               	btfss	status,0,c
 14505  0010C8  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14506                           
 14507                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 14508  0010CA  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14509  0010CC  D008               	goto	i1l6962
 14510  0010CE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14511  0010D0  E103               	bnz	i1u501_20
 14512  0010D2  0E0A               	movlw	10
 14513  0010D4  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14514  0010D6  E303               	bnc	i1l6962
 14515  0010D8                     i1u501_20:
 14516                           
 14517                           ; BSR set to: 0
 14518  0010D8  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14519  0010DA  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14520  0010DC  D005               	goto	i1l6966
 14521  0010DE                     i1l6962:
 14522                           
 14523                           ; BSR set to: 0
 14524                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 14525  0010DE  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14526  0010E0  D003               	goto	i1l6966
 14527                           
 14528                           ; BSR set to: 0
 14529  0010E2  0786               	decf	_duty& (0+255),f,b	;volatile
 14530  0010E4  A0D8               	btfss	status,0,c
 14531  0010E6  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14532  0010E8                     i1l6966:
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 14536  0010E8  507B               	movf	3963,w,c	;volatile
 14537  0010EA  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14538  0010EC  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14539  0010EE  5186               	movf	_duty& (0+255),w,b	;volatile
 14540  0010F0  5C05               	subwf	??i1_IRQ_ADC,w,c
 14541  0010F2  5006               	movf	??i1_IRQ_ADC+1,w,c
 14542  0010F4  0A80               	xorlw	128
 14543  0010F6  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14544  0010F8  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14545  0010FA  0A80               	xorlw	128
 14546  0010FC  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14547  0010FE  E203               	bc	i1l6970
 14548                           
 14549                           ; BSR set to: 0
 14550  001100  CF7B F086          	movff	3963,_duty	;volatile
 14551  001104  D003               	goto	L7
 14552  001106                     i1l6970:
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 14556  001106  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14557  001108  D002               	goto	i1l6974
 14558                           
 14559                           ; BSR set to: 0
 14560  00110A  6B86               	clrf	_duty& (0+255),b	;volatile
 14561  00110C                     L7:
 14562  00110C  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14563  00110E                     i1l6974:
 14564                           
 14565                           ; BSR set to: 0
 14566                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 14567  00110E  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14568  001110  46E8               	rlncf	wreg,f,c
 14569  001112  0BFC               	andlw	252
 14570  001114  6E77               	movwf	3959,c	;volatile
 14571                           
 14572                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 14573  001116  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14574  00111A  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14575  00111E  90D8               	bcf	status,0,c
 14576  001120  3605               	rlcf	??i1_IRQ_ADC,f,c
 14577  001122  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14578  001124  90D8               	bcf	status,0,c
 14579  001126  3605               	rlcf	??i1_IRQ_ADC,f,c
 14580  001128  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14581  00112A  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14582  00112E  6A06               	clrf	??i1_IRQ_ADC+1,c
 14583  001130  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14584  001132  6806               	setf	??i1_IRQ_ADC+1,c
 14585  001134  5005               	movf	??i1_IRQ_ADC,w,c
 14586  001136  6E76               	movwf	3958,c	;volatile
 14587                           
 14588                           ;interrupt.c: 553: break;
 14589  001138  0012               	return	
 14590  00113A                     i1l6978:
 14591  00113A  0100               	movlb	0	; () banked
 14592  00113C  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 14593                           
 14594                           ; Switch size 1, requested type "speed"
 14595                           ; Number of cases is 3, Range of values is 1 to 3
 14596                           ; switch strategies available:
 14597                           ; Name         Instructions Cycles
 14598                           ; simple_byte           10     6 (average)
 14599                           ;	Chosen strategy is simple_byte
 14600  00113E  0A01               	xorlw	1	; case 1
 14601  001140  E101 D734          	bz	i1l614
 14602  001144  0A03               	xorlw	3	; case 2
 14603  001146  E101 D774          	bz	i1l622
 14604  00114A  0A01               	xorlw	1	; case 3
 14605  00114C  E0B4               	bz	i1l629
 14606                           
 14607                           ; BSR set to: 0
 14608  00114E  0012               	return		;funcret
 14609  001150                     __end_ofi1_IRQ_ADC:
 14610                           	opt stack 0
 14611                           tblptru	equ	0xFF8
 14612                           tblptrh	equ	0xFF7
 14613                           tblptrl	equ	0xFF6
 14614                           tablat	equ	0xFF5
 14615                           prodh	equ	0xFF4
 14616                           prodl	equ	0xFF3
 14617                           intcon	equ	0xFF2
 14618                           intcon2	equ	0xFF1
 14619                           intcon3	equ	0xFF0
 14620                           postinc0	equ	0xFEE
 14621                           wreg	equ	0xFE8
 14622                           indf1	equ	0xFE7
 14623                           postdec1	equ	0xFE5
 14624                           fsr1h	equ	0xFE2
 14625                           fsr1l	equ	0xFE1
 14626                           bsr	equ	0xFE0
 14627                           indf2	equ	0xFDF
 14628                           postinc2	equ	0xFDE
 14629                           postdec2	equ	0xFDD
 14630                           fsr2h	equ	0xFDA
 14631                           fsr2l	equ	0xFD9
 14632                           status	equ	0xFD8
 14633                           
 14634 ;; *************** function _SPI_ISR *****************
 14635 ;; Defined at:
 14636 ;;		line 169 in file "spi.c"
 14637 ;; Parameters:    Size  Location     Type
 14638 ;;		None
 14639 ;; Auto vars:     Size  Location     Type
 14640 ;;  i               1    6[COMRAM] unsigned char 
 14641 ;; Return value:  Size  Location     Type
 14642 ;;                  1    wreg      void 
 14643 ;; Registers used:
 14644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14645 ;; Tracked objects:
 14646 ;;		On entry : 0/0
 14647 ;;		On exit  : 0/0
 14648 ;;		Unchanged: 0/0
 14649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14650 ;;      Params:         0       0       0       0
 14651 ;;      Locals:         1       0       0       0
 14652 ;;      Temps:          2       0       0       0
 14653 ;;      Totals:         3       0       0       0
 14654 ;;Total ram usage:        3 bytes
 14655 ;; Hardware stack levels used:    1
 14656 ;; Hardware stack levels required when called:    5
 14657 ;; This function calls:
 14658 ;;		Nothing
 14659 ;; This function is called by:
 14660 ;;		_LOW_PRIORITY_IRQ
 14661 ;; This function uses a non-reentrant model
 14662 ;;
 14663                           
 14664                           	psect	text90
 14665  001278                     __ptext90:
 14666                           	opt stack 0
 14667  001278                     _SPI_ISR:
 14668                           	opt stack 14
 14669                           
 14670                           ;spi.c: 171: unsigned char i;
 14671                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 14672                           
 14673                           ; BSR set to: 0
 14674                           ;incstack = 0
 14675  001278  969E               	bcf	3998,3,c	;volatile
 14676                           
 14677                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 14678  00127A  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 14679                           
 14680                           ;spi.c: 180: switch(SPI_MODE){
 14681  00127E  D075               	goto	i1l6794
 14682  001280                     i1l6758:
 14683                           
 14684                           ;spi.c: 196: if (i!=0x0D){
 14685  001280  0E0D               	movlw	13
 14686  001282  1807               	xorwf	SPI_ISR@i,w,c
 14687  001284  E012               	bz	i1l1641
 14688                           
 14689                           ;spi.c: 197: spiTxIndex++;
 14690  001286  2A44               	incf	_spiTxIndex,f,c	;volatile
 14691                           
 14692                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 14693  001288  0E40               	movlw	low _spiTxBuffer
 14694  00128A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14695  00128C  6ED9               	movwf	fsr2l,c
 14696  00128E  6ADA               	clrf	fsr2h,c
 14697  001290  0E01               	movlw	high _spiTxBuffer
 14698  001292  22DA               	addwfc	fsr2h,f,c
 14699  001294  50DF               	movf	indf2,w,c
 14700  001296  E009               	bz	i1l1641
 14701                           
 14702                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 14703  001298  0E40               	movlw	low _spiTxBuffer
 14704  00129A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14705  00129C  6ED9               	movwf	fsr2l,c
 14706  00129E  6ADA               	clrf	fsr2h,c
 14707  0012A0  0E01               	movlw	high _spiTxBuffer
 14708  0012A2  22DA               	addwfc	fsr2h,f,c
 14709  0012A4  50DF               	movf	indf2,w,c
 14710  0012A6  6EC9               	movwf	4041,c	;volatile
 14711                           
 14712                           ;spi.c: 201: } else {
 14713  0012A8  0012               	return	
 14714  0012AA                     i1l1641:
 14715                           
 14716                           ;spi.c: 202: SPI_MODE = 0;
 14717  0012AA  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14718  0012AC  0012               	return	
 14719  0012AE                     i1l6766:
 14720                           
 14721                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 14722  0012AE  0E00               	movlw	low _spiRxBuffer
 14723  0012B0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14724  0012B2  6ED9               	movwf	fsr2l,c
 14725  0012B4  6ADA               	clrf	fsr2h,c
 14726  0012B6  0E02               	movlw	high _spiRxBuffer
 14727  0012B8  22DA               	addwfc	fsr2h,f,c
 14728  0012BA  C007  FFDF         	movff	SPI_ISR@i,indf2
 14729                           
 14730                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 14731  0012BE  0E00               	movlw	low _spiRxBuffer
 14732  0012C0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14733  0012C2  6ED9               	movwf	fsr2l,c
 14734  0012C4  6ADA               	clrf	fsr2h,c
 14735  0012C6  0E02               	movlw	high _spiRxBuffer
 14736  0012C8  22DA               	addwfc	fsr2h,f,c
 14737  0012CA  50DF               	movf	indf2,w,c
 14738  0012CC  0E01               	movlw	1
 14739  0012CE  A4D8               	btfss	status,2,c
 14740  0012D0  0E00               	movlw	0
 14741  0012D2  6E05               	movwf	??_SPI_ISR& (0+255),c
 14742  0012D4  0E00               	movlw	low _spiRxBuffer
 14743  0012D6  2443               	addwf	_spiRxIndex,w,c	;volatile
 14744  0012D8  6ED9               	movwf	fsr2l,c
 14745  0012DA  6ADA               	clrf	fsr2h,c
 14746  0012DC  0E02               	movlw	high _spiRxBuffer
 14747  0012DE  22DA               	addwfc	fsr2h,f,c
 14748  0012E0  0E0D               	movlw	13
 14749  0012E2  18DE               	xorwf	postinc2,w,c
 14750  0012E4  0E01               	movlw	1
 14751  0012E6  A4D8               	btfss	status,2,c
 14752  0012E8  0E00               	movlw	0
 14753  0012EA  1005               	iorwf	??_SPI_ISR,w,c
 14754  0012EC  A0E8               	btfss	wreg,0,c
 14755  0012EE  D031               	goto	i1l6790
 14756                           
 14757                           ;spi.c: 223: if (spiRxIndex != 0) {
 14758  0012F0  5043               	movf	_spiRxIndex,w,c	;volatile
 14759  0012F2  E015               	bz	i1l6778
 14760                           
 14761                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 14762  0012F4  6A07               	clrf	SPI_ISR@i,c
 14763  0012F6  D00F               	goto	i1l6776
 14764  0012F8                     i1l6772:
 14765                           
 14766                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 14767  0012F8  0E00               	movlw	low _spiRxBuffer
 14768  0012FA  2407               	addwf	SPI_ISR@i,w,c
 14769  0012FC  6ED9               	movwf	fsr2l,c
 14770  0012FE  6ADA               	clrf	fsr2h,c
 14771  001300  0E02               	movlw	high _spiRxBuffer
 14772  001302  22DA               	addwfc	fsr2h,f,c
 14773  001304  0E00               	movlw	low _SPI_RX_TEXT
 14774  001306  2407               	addwf	SPI_ISR@i,w,c
 14775  001308  6EE1               	movwf	fsr1l,c
 14776  00130A  6AE2               	clrf	fsr1h,c
 14777  00130C  0E01               	movlw	high _SPI_RX_TEXT
 14778  00130E  22E2               	addwfc	fsr1h,f,c
 14779  001310  CFDF FFE7          	movff	indf2,indf1
 14780  001314  2A07               	incf	SPI_ISR@i,f,c
 14781  001316                     i1l6776:
 14782  001316  5043               	movf	_spiRxIndex,w,c	;volatile
 14783  001318  5C07               	subwf	SPI_ISR@i,w,c
 14784  00131A  E3EE               	bnc	i1l6772
 14785                           
 14786                           ;spi.c: 226: }
 14787                           ;spi.c: 227: SPI_full = 1;
 14788  00131C  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14789  00131E                     i1l6778:
 14790                           
 14791                           ;spi.c: 228: }
 14792                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 14793  00131E  0E00               	movlw	low _SPI_RX_TEXT
 14794  001320  2443               	addwf	_spiRxIndex,w,c	;volatile
 14795  001322  6ED9               	movwf	fsr2l,c
 14796  001324  6ADA               	clrf	fsr2h,c
 14797  001326  0E01               	movlw	high _SPI_RX_TEXT
 14798  001328  22DA               	addwfc	fsr2h,f,c
 14799  00132A  0E00               	movlw	0
 14800  00132C  6ADF               	clrf	indf2,c
 14801                           
 14802                           ;spi.c: 230: spiRxIndex = 0;
 14803  00132E  6A43               	clrf	_spiRxIndex,c	;volatile
 14804                           
 14805                           ;spi.c: 231: } else {
 14806  001330  0012               	return	
 14807  001332                     i1l6782:
 14808                           
 14809                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 14810  001332  5043               	movf	_spiRxIndex,w,c	;volatile
 14811  001334  6E05               	movwf	??_SPI_ISR& (0+255),c
 14812  001336  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14813  001338  2A05               	incf	??_SPI_ISR,f,c
 14814  00133A  0E00               	movlw	0
 14815  00133C  2206               	addwfc	??_SPI_ISR+1,f,c
 14816  00133E  0E40               	movlw	64
 14817  001340  1805               	xorwf	??_SPI_ISR,w,c
 14818  001342  1006               	iorwf	??_SPI_ISR+1,w,c
 14819  001344  E104               	bnz	i1l6786
 14820                           
 14821                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 14822  001346  0101               	movlb	1	; () banked
 14823  001348  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 14824                           
 14825                           ;spi.c: 236: spiRxIndex = 0;
 14826  00134A  6A43               	clrf	_spiRxIndex,c	;volatile
 14827                           
 14828                           ;spi.c: 239: } else {
 14829  00134C  0012               	return	
 14830  00134E                     i1l6786:
 14831                           
 14832                           ;spi.c: 240: spiRxIndex++;
 14833  00134E  2A43               	incf	_spiRxIndex,f,c	;volatile
 14834  001350  0012               	return	
 14835  001352                     i1l6790:
 14836  001352  0E01               	movlw	1
 14837  001354  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14838  001356  0E00               	movlw	0
 14839  001358  6E05               	movwf	??_SPI_ISR& (0+255),c
 14840  00135A  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14841                           
 14842                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14843                           ; Switch size 1, requested type "speed"
 14844                           ; Number of cases is 1, Range of values is 0 to 0
 14845                           ; switch strategies available:
 14846                           ; Name         Instructions Cycles
 14847                           ; simple_byte            4     3 (average)
 14848                           ;	Chosen strategy is simple_byte
 14849  00135C  5006               	movf	??_SPI_ISR+1,w,c
 14850  00135E  A4D8               	btfss	status,2,c
 14851  001360  0012               	return	
 14852                           
 14853                           ; Switch size 1, requested type "speed"
 14854                           ; Number of cases is 2, Range of values is 0 to 1
 14855                           ; switch strategies available:
 14856                           ; Name         Instructions Cycles
 14857                           ; simple_byte            7     4 (average)
 14858                           ;	Chosen strategy is simple_byte
 14859  001362  5005               	movf	??_SPI_ISR,w,c
 14860  001364  E0E6               	bz	i1l6782
 14861  001366  0A01               	xorlw	1	; case 1
 14862  001368  0012               	return	
 14863  00136A                     i1l6794:
 14864  00136A  0E01               	movlw	1
 14865  00136C  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14866  00136E  0E00               	movlw	0
 14867  001370  6E05               	movwf	??_SPI_ISR& (0+255),c
 14868  001372  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14869                           
 14870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14871                           ; Switch size 1, requested type "speed"
 14872                           ; Number of cases is 1, Range of values is 0 to 0
 14873                           ; switch strategies available:
 14874                           ; Name         Instructions Cycles
 14875                           ; simple_byte            4     3 (average)
 14876                           ;	Chosen strategy is simple_byte
 14877  001374  5006               	movf	??_SPI_ISR+1,w,c
 14878  001376  A4D8               	btfss	status,2,c
 14879  001378  0012               	return	
 14880                           
 14881                           ; Switch size 1, requested type "speed"
 14882                           ; Number of cases is 2, Range of values is 0 to 1
 14883                           ; switch strategies available:
 14884                           ; Name         Instructions Cycles
 14885                           ; simple_byte            7     4 (average)
 14886                           ;	Chosen strategy is simple_byte
 14887  00137A  5005               	movf	??_SPI_ISR,w,c
 14888  00137C  E098               	bz	i1l6766
 14889  00137E  0A01               	xorlw	1	; case 1
 14890  001380  E101 D77E          	bz	i1l6758
 14891  001384  0012               	return		;funcret
 14892  001386                     __end_of_SPI_ISR:
 14893                           	opt stack 0
 14894                           tblptru	equ	0xFF8
 14895                           tblptrh	equ	0xFF7
 14896                           tblptrl	equ	0xFF6
 14897                           tablat	equ	0xFF5
 14898                           prodh	equ	0xFF4
 14899                           prodl	equ	0xFF3
 14900                           intcon	equ	0xFF2
 14901                           intcon2	equ	0xFF1
 14902                           intcon3	equ	0xFF0
 14903                           postinc0	equ	0xFEE
 14904                           wreg	equ	0xFE8
 14905                           indf1	equ	0xFE7
 14906                           postdec1	equ	0xFE5
 14907                           fsr1h	equ	0xFE2
 14908                           fsr1l	equ	0xFE1
 14909                           bsr	equ	0xFE0
 14910                           indf2	equ	0xFDF
 14911                           postinc2	equ	0xFDE
 14912                           postdec2	equ	0xFDD
 14913                           fsr2h	equ	0xFDA
 14914                           fsr2l	equ	0xFD9
 14915                           status	equ	0xFD8
 14916                           
 14917 ;; *************** function _IRQ_PION_CHANGEMENT_ETAT *****************
 14918 ;; Defined at:
 14919 ;;		line 199 in file "interrupt.c"
 14920 ;; Parameters:    Size  Location     Type
 14921 ;;		None
 14922 ;; Auto vars:     Size  Location     Type
 14923 ;;		None
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  1    wreg      void 
 14926 ;; Registers used:
 14927 ;;		wreg, status,2, status,0, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14933 ;;      Params:         0       0       0       0
 14934 ;;      Locals:         0       0       0       0
 14935 ;;      Temps:          0       0       0       0
 14936 ;;      Totals:         0       0       0       0
 14937 ;;Total ram usage:        0 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    6
 14940 ;; This function calls:
 14941 ;;		i1_Buzzer_Etat
 14942 ;;		i1_TIMER5_Off
 14943 ;;		i1_TIMER5_On
 14944 ;; This function is called by:
 14945 ;;		_LOW_PRIORITY_IRQ
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text91
 14950  001F5E                     __ptext91:
 14951                           	opt stack 0
 14952  001F5E                     _IRQ_PION_CHANGEMENT_ETAT:
 14953                           	opt stack 13
 14954                           
 14955                           ;interrupt.c: 200: PIR3bits.IC1IF = 0;
 14956                           
 14957                           ;incstack = 0
 14958  001F5E  92A4               	bcf	4004,1,c	;volatile
 14959                           
 14960                           ;interrupt.c: 203: switch (Surveillance_Capteur_Pion) {
 14961  001F60  D020               	goto	i1l6754
 14962  001F62                     i1l558:
 14963                           
 14964                           ; BSR set to: 0
 14965                           ;interrupt.c: 208: if (PORTAbits.RA2 == 0) {
 14966  001F62  B480               	btfsc	3968,2,c	;volatile
 14967  001F64  D004               	goto	i1l6724
 14968                           
 14969                           ; BSR set to: 0
 14970                           ;interrupt.c: 209: Surveillance_Capteur_Pion = 0;
 14971  001F66  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 14972                           
 14973                           ; BSR set to: 0
 14974                           ;interrupt.c: 210: TIMER5_On();
 14975  001F68  EC9D  F013         	call	i1_TIMER5_On	;wreg free
 14976  001F6C  D011               	goto	i1l6738
 14977  001F6E                     i1l6724:
 14978                           
 14979                           ; BSR set to: 0
 14980                           ;interrupt.c: 214: Surveillance_Capteur_Pion = 1;
 14981  001F6E  0E01               	movlw	1
 14982  001F70  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 14983                           
 14984                           ;interrupt.c: 215: Alarme = 9;
 14985  001F72  0E09               	movlw	9
 14986  001F74  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 14987  001F76                     i1l6726:
 14988                           
 14989                           ;interrupt.c: 217: TIMER5_Off();
 14990  001F76  EC6C  F013         	call	i1_TIMER5_Off	;wreg free
 14991                           
 14992                           ;interrupt.c: 219: nb_100ms_Timer_5 = 0;
 14993  001F7A  0100               	movlb	0	; () banked
 14994  001F7C  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;interrupt.c: 222: nb_100ms_platine = nb_100ms_platine_backup;
 14998  001F7E  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 14999                           
 15000                           ; BSR set to: 0
 15001                           ;interrupt.c: 223: Mouvement_Startup = 0;
 15002  001F82  6A4D               	clrf	_Mouvement_Startup,c
 15003  001F84  0012               	return	
 15004  001F86                     i1l562:
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;interrupt.c: 234: if (PORTAbits.RA2 == 0) {
 15008  001F86  B480               	btfsc	3968,2,c	;volatile
 15009  001F88  D006               	goto	i1l6740
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;interrupt.c: 235: Surveillance_Capteur_Pion = 0;
 15013  001F8A  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 15014                           
 15015                           ; BSR set to: 0
 15016                           ;interrupt.c: 236: Alarme = 5;
 15017  001F8C  0E05               	movlw	5
 15018  001F8E  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15019  001F90                     i1l6738:
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;interrupt.c: 238: Buzzer_Etat((unsigned char) 1);
 15023  001F90  0E01               	movlw	1
 15024  001F92  EF4E  F013         	goto	i1_Buzzer_Etat
 15025  001F96                     i1l6740:
 15026                           
 15027                           ; BSR set to: 0
 15028                           ;interrupt.c: 240: Surveillance_Capteur_Pion = 1;
 15029  001F96  0E01               	movlw	1
 15030  001F98  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;interrupt.c: 242: Buzzer_Etat((unsigned char) 0);
 15034  001F9A  0E00               	movlw	0
 15035  001F9C  EC4E  F013         	call	i1_Buzzer_Etat
 15036  001FA0  D7EA               	goto	i1l6726
 15037  001FA2                     i1l6754:
 15038  001FA2  0100               	movlb	0	; () banked
 15039  001FA4  5189               	movf	_Surveillance_Capteur_Pion& (0+255),w,b
 15040                           
 15041                           ; Switch size 1, requested type "speed"
 15042                           ; Number of cases is 2, Range of values is 0 to 1
 15043                           ; switch strategies available:
 15044                           ; Name         Instructions Cycles
 15045                           ; simple_byte            7     4 (average)
 15046                           ;	Chosen strategy is simple_byte
 15047  001FA6  E0EF               	bz	i1l562
 15048  001FA8  0A01               	xorlw	1	; case 1
 15049  001FAA  E0DB               	bz	i1l558
 15050  001FAC  0012               	return		;funcret
 15051  001FAE                     __end_of_IRQ_PION_CHANGEMENT_ETAT:
 15052                           	opt stack 0
 15053                           tblptru	equ	0xFF8
 15054                           tblptrh	equ	0xFF7
 15055                           tblptrl	equ	0xFF6
 15056                           tablat	equ	0xFF5
 15057                           prodh	equ	0xFF4
 15058                           prodl	equ	0xFF3
 15059                           intcon	equ	0xFF2
 15060                           intcon2	equ	0xFF1
 15061                           intcon3	equ	0xFF0
 15062                           postinc0	equ	0xFEE
 15063                           wreg	equ	0xFE8
 15064                           indf1	equ	0xFE7
 15065                           postdec1	equ	0xFE5
 15066                           fsr1h	equ	0xFE2
 15067                           fsr1l	equ	0xFE1
 15068                           bsr	equ	0xFE0
 15069                           indf2	equ	0xFDF
 15070                           postinc2	equ	0xFDE
 15071                           postdec2	equ	0xFDD
 15072                           fsr2h	equ	0xFDA
 15073                           fsr2l	equ	0xFD9
 15074                           status	equ	0xFD8
 15075                           
 15076 ;; *************** function i1_TIMER5_On *****************
 15077 ;; Defined at:
 15078 ;;		line 253 in file "timer.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;		None
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;		None
 15083 ;; Return value:  Size  Location     Type
 15084 ;;                  1    wreg      void 
 15085 ;; Registers used:
 15086 ;;		None
 15087 ;; Tracked objects:
 15088 ;;		On entry : 3F/0
 15089 ;;		On exit  : 3F/0
 15090 ;;		Unchanged: 3F/0
 15091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15092 ;;      Params:         0       0       0       0
 15093 ;;      Locals:         0       0       0       0
 15094 ;;      Temps:          0       0       0       0
 15095 ;;      Totals:         0       0       0       0
 15096 ;;Total ram usage:        0 bytes
 15097 ;; Hardware stack levels used:    1
 15098 ;; Hardware stack levels required when called:    5
 15099 ;; This function calls:
 15100 ;;		Nothing
 15101 ;; This function is called by:
 15102 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15103 ;; This function uses a non-reentrant model
 15104 ;;
 15105                           
 15106                           	psect	text92
 15107  00273A                     __ptext92:
 15108                           	opt stack 0
 15109  00273A                     i1_TIMER5_On:
 15110                           	opt stack 13
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 15114                           
 15115                           ;incstack = 0
 15116  00273A  80B7               	bsf	4023,0,c	;volatile
 15117                           
 15118                           ; BSR set to: 0
 15119  00273C  0012               	return		;funcret
 15120  00273E                     __end_ofi1_TIMER5_On:
 15121                           	opt stack 0
 15122                           tblptru	equ	0xFF8
 15123                           tblptrh	equ	0xFF7
 15124                           tblptrl	equ	0xFF6
 15125                           tablat	equ	0xFF5
 15126                           prodh	equ	0xFF4
 15127                           prodl	equ	0xFF3
 15128                           intcon	equ	0xFF2
 15129                           intcon2	equ	0xFF1
 15130                           intcon3	equ	0xFF0
 15131                           postinc0	equ	0xFEE
 15132                           wreg	equ	0xFE8
 15133                           indf1	equ	0xFE7
 15134                           postdec1	equ	0xFE5
 15135                           fsr1h	equ	0xFE2
 15136                           fsr1l	equ	0xFE1
 15137                           bsr	equ	0xFE0
 15138                           indf2	equ	0xFDF
 15139                           postinc2	equ	0xFDE
 15140                           postdec2	equ	0xFDD
 15141                           fsr2h	equ	0xFDA
 15142                           fsr2l	equ	0xFD9
 15143                           status	equ	0xFD8
 15144                           
 15145 ;; *************** function i1_TIMER5_Off *****************
 15146 ;; Defined at:
 15147 ;;		line 263 in file "timer.c"
 15148 ;; Parameters:    Size  Location     Type
 15149 ;;		None
 15150 ;; Auto vars:     Size  Location     Type
 15151 ;;		None
 15152 ;; Return value:  Size  Location     Type
 15153 ;;                  1    wreg      void 
 15154 ;; Registers used:
 15155 ;;		None
 15156 ;; Tracked objects:
 15157 ;;		On entry : 0/0
 15158 ;;		On exit  : 0/0
 15159 ;;		Unchanged: 0/0
 15160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15161 ;;      Params:         0       0       0       0
 15162 ;;      Locals:         0       0       0       0
 15163 ;;      Temps:          0       0       0       0
 15164 ;;      Totals:         0       0       0       0
 15165 ;;Total ram usage:        0 bytes
 15166 ;; Hardware stack levels used:    1
 15167 ;; Hardware stack levels required when called:    5
 15168 ;; This function calls:
 15169 ;;		Nothing
 15170 ;; This function is called by:
 15171 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15172 ;;		i1_IRQ_TIMER_5
 15173 ;; This function uses a non-reentrant model
 15174 ;;
 15175                           
 15176                           	psect	text93
 15177  0026D8                     __ptext93:
 15178                           	opt stack 0
 15179  0026D8                     i1_TIMER5_Off:
 15180                           	opt stack 13
 15181                           
 15182                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 15183                           
 15184                           ; BSR set to: 0
 15185                           ;incstack = 0
 15186  0026D8  90B7               	bcf	4023,0,c	;volatile
 15187                           
 15188                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 15189  0026DA  90A4               	bcf	4004,0,c	;volatile
 15190                           
 15191                           ;timer.c: 268: TMR5L = 0;
 15192  0026DC  6A87               	clrf	3975,c	;volatile
 15193                           
 15194                           ;timer.c: 269: TMR5H = 0;
 15195  0026DE  6A88               	clrf	3976,c	;volatile
 15196  0026E0  0012               	return		;funcret
 15197  0026E2                     __end_ofi1_TIMER5_Off:
 15198                           	opt stack 0
 15199                           tblptru	equ	0xFF8
 15200                           tblptrh	equ	0xFF7
 15201                           tblptrl	equ	0xFF6
 15202                           tablat	equ	0xFF5
 15203                           prodh	equ	0xFF4
 15204                           prodl	equ	0xFF3
 15205                           intcon	equ	0xFF2
 15206                           intcon2	equ	0xFF1
 15207                           intcon3	equ	0xFF0
 15208                           postinc0	equ	0xFEE
 15209                           wreg	equ	0xFE8
 15210                           indf1	equ	0xFE7
 15211                           postdec1	equ	0xFE5
 15212                           fsr1h	equ	0xFE2
 15213                           fsr1l	equ	0xFE1
 15214                           bsr	equ	0xFE0
 15215                           indf2	equ	0xFDF
 15216                           postinc2	equ	0xFDE
 15217                           postdec2	equ	0xFDD
 15218                           fsr2h	equ	0xFDA
 15219                           fsr2l	equ	0xFD9
 15220                           status	equ	0xFD8
 15221                           
 15222 ;; *************** function i1_Buzzer_Etat *****************
 15223 ;; Defined at:
 15224 ;;		line 29 in file "interrupt.c"
 15225 ;; Parameters:    Size  Location     Type
 15226 ;;  Activation      1    wreg     unsigned char 
 15227 ;; Auto vars:     Size  Location     Type
 15228 ;;  Activation      1    4[COMRAM] unsigned char 
 15229 ;; Return value:  Size  Location     Type
 15230 ;;                  1    wreg      void 
 15231 ;; Registers used:
 15232 ;;		wreg, status,2, status,0
 15233 ;; Tracked objects:
 15234 ;;		On entry : 0/0
 15235 ;;		On exit  : 0/0
 15236 ;;		Unchanged: 0/0
 15237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15238 ;;      Params:         0       0       0       0
 15239 ;;      Locals:         1       0       0       0
 15240 ;;      Temps:          0       0       0       0
 15241 ;;      Totals:         1       0       0       0
 15242 ;;Total ram usage:        1 bytes
 15243 ;; Hardware stack levels used:    1
 15244 ;; Hardware stack levels required when called:    5
 15245 ;; This function calls:
 15246 ;;		Nothing
 15247 ;; This function is called by:
 15248 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15249 ;;		i1_IRQ_TIMER_5
 15250 ;; This function uses a non-reentrant model
 15251 ;;
 15252                           
 15253                           	psect	text94
 15254  00269C                     __ptext94:
 15255                           	opt stack 0
 15256  00269C                     i1_Buzzer_Etat:
 15257                           	opt stack 13
 15258                           
 15259                           ;incstack = 0
 15260                           ;i1Buzzer_Etat@Activation stored from wreg
 15261  00269C  6E05               	movwf	i1Buzzer_Etat@Activation,c
 15262                           
 15263                           ;interrupt.c: 30: if (Activation == 1) {
 15264  00269E  0405               	decf	i1Buzzer_Etat@Activation,w,c
 15265  0026A0  E102               	bnz	i1l523
 15266                           
 15267                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 15268  0026A2  8C89               	bsf	3977,6,c	;volatile
 15269                           
 15270                           ;interrupt.c: 33: } else {
 15271  0026A4  0012               	return	
 15272  0026A6                     i1l523:
 15273                           
 15274                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 15275  0026A6  9C89               	bcf	3977,6,c	;volatile
 15276  0026A8  0012               	return		;funcret
 15277  0026AA                     __end_ofi1_Buzzer_Etat:
 15278                           	opt stack 0
 15279                           tblptru	equ	0xFF8
 15280                           tblptrh	equ	0xFF7
 15281                           tblptrl	equ	0xFF6
 15282                           tablat	equ	0xFF5
 15283                           prodh	equ	0xFF4
 15284                           prodl	equ	0xFF3
 15285                           intcon	equ	0xFF2
 15286                           intcon2	equ	0xFF1
 15287                           intcon3	equ	0xFF0
 15288                           postinc0	equ	0xFEE
 15289                           wreg	equ	0xFE8
 15290                           indf1	equ	0xFE7
 15291                           postdec1	equ	0xFE5
 15292                           fsr1h	equ	0xFE2
 15293                           fsr1l	equ	0xFE1
 15294                           bsr	equ	0xFE0
 15295                           indf2	equ	0xFDF
 15296                           postinc2	equ	0xFDE
 15297                           postdec2	equ	0xFDD
 15298                           fsr2h	equ	0xFDA
 15299                           fsr2l	equ	0xFD9
 15300                           status	equ	0xFD8
 15301                           
 15302 ;; *************** function _EUSART1_Transmit_ISR *****************
 15303 ;; Defined at:
 15304 ;;		line 552 in file "eusart.c"
 15305 ;; Parameters:    Size  Location     Type
 15306 ;;		None
 15307 ;; Auto vars:     Size  Location     Type
 15308 ;;		None
 15309 ;; Return value:  Size  Location     Type
 15310 ;;                  1    wreg      void 
 15311 ;; Registers used:
 15312 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15313 ;; Tracked objects:
 15314 ;;		On entry : 0/0
 15315 ;;		On exit  : 0/0
 15316 ;;		Unchanged: 0/0
 15317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15318 ;;      Params:         0       0       0       0
 15319 ;;      Locals:         0       0       0       0
 15320 ;;      Temps:          0       0       0       0
 15321 ;;      Totals:         0       0       0       0
 15322 ;;Total ram usage:        0 bytes
 15323 ;; Hardware stack levels used:    1
 15324 ;; Hardware stack levels required when called:    5
 15325 ;; This function calls:
 15326 ;;		Nothing
 15327 ;; This function is called by:
 15328 ;;		_LOW_PRIORITY_IRQ
 15329 ;; This function uses a non-reentrant model
 15330 ;;
 15331                           
 15332                           	psect	text95
 15333  0022A8                     __ptext95:
 15334                           	opt stack 0
 15335  0022A8                     _EUSART1_Transmit_ISR:
 15336                           	opt stack 14
 15337                           
 15338                           ;eusart.c: 554: eusart1TxIndex++;
 15339                           
 15340                           ;incstack = 0
 15341  0022A8  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 15342                           
 15343                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 15344  0022AA  0E80               	movlw	low _eusart1TxBuffer
 15345  0022AC  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15346  0022AE  6ED9               	movwf	fsr2l,c
 15347  0022B0  6ADA               	clrf	fsr2h,c
 15348  0022B2  0E01               	movlw	high _eusart1TxBuffer
 15349  0022B4  22DA               	addwfc	fsr2h,f,c
 15350  0022B6  50DF               	movf	indf2,w,c
 15351  0022B8  E009               	bz	i1l1321
 15352                           
 15353                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 15354  0022BA  0E80               	movlw	low _eusart1TxBuffer
 15355  0022BC  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15356  0022BE  6ED9               	movwf	fsr2l,c
 15357  0022C0  6ADA               	clrf	fsr2h,c
 15358  0022C2  0E01               	movlw	high _eusart1TxBuffer
 15359  0022C4  22DA               	addwfc	fsr2h,f,c
 15360  0022C6  50DF               	movf	indf2,w,c
 15361  0022C8  6EAD               	movwf	4013,c	;volatile
 15362                           
 15363                           ;eusart.c: 574: } else {
 15364  0022CA  0012               	return	
 15365  0022CC                     i1l1321:
 15366                           
 15367                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 15368  0022CC  989D               	bcf	3997,4,c	;volatile
 15369  0022CE  0012               	return		;funcret
 15370  0022D0                     __end_of_EUSART1_Transmit_ISR:
 15371                           	opt stack 0
 15372                           tblptru	equ	0xFF8
 15373                           tblptrh	equ	0xFF7
 15374                           tblptrl	equ	0xFF6
 15375                           tablat	equ	0xFF5
 15376                           prodh	equ	0xFF4
 15377                           prodl	equ	0xFF3
 15378                           intcon	equ	0xFF2
 15379                           intcon2	equ	0xFF1
 15380                           intcon3	equ	0xFF0
 15381                           postinc0	equ	0xFEE
 15382                           wreg	equ	0xFE8
 15383                           indf1	equ	0xFE7
 15384                           postdec1	equ	0xFE5
 15385                           fsr1h	equ	0xFE2
 15386                           fsr1l	equ	0xFE1
 15387                           bsr	equ	0xFE0
 15388                           indf2	equ	0xFDF
 15389                           postinc2	equ	0xFDE
 15390                           postdec2	equ	0xFDD
 15391                           fsr2h	equ	0xFDA
 15392                           fsr2l	equ	0xFD9
 15393                           status	equ	0xFD8
 15394                           
 15395 ;; *************** function _EUSART1_Receive_ISR *****************
 15396 ;; Defined at:
 15397 ;;		line 597 in file "eusart.c"
 15398 ;; Parameters:    Size  Location     Type
 15399 ;;		None
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;  i               1    6[COMRAM] unsigned char 
 15402 ;; Return value:  Size  Location     Type
 15403 ;;                  1    wreg      void 
 15404 ;; Registers used:
 15405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15411 ;;      Params:         0       0       0       0
 15412 ;;      Locals:         1       0       0       0
 15413 ;;      Temps:          2       0       0       0
 15414 ;;      Totals:         3       0       0       0
 15415 ;;Total ram usage:        3 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    6
 15418 ;; This function calls:
 15419 ;;		_EUSART1_Erreur_Get
 15420 ;; This function is called by:
 15421 ;;		_LOW_PRIORITY_IRQ
 15422 ;; This function uses a non-reentrant model
 15423 ;;
 15424                           
 15425                           	psect	text96
 15426  00145C                     __ptext96:
 15427                           	opt stack 0
 15428  00145C                     _EUSART1_Receive_ISR:
 15429                           	opt stack 13
 15430                           
 15431                           ;eusart.c: 600: unsigned char i;
 15432                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 15433                           
 15434                           ;incstack = 0
 15435  00145C  9A9E               	bcf	3998,5,c	;volatile
 15436                           
 15437                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 15438  00145E  A2AB               	btfss	4011,1,c	;volatile
 15439  001460  D004               	goto	i1l6814
 15440                           
 15441                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 15442  001462  9EAB               	bcf	4011,7,c	;volatile
 15443                           
 15444                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 15445  001464  8EAB               	bsf	4011,7,c	;volatile
 15446                           
 15447                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 15448  001466  98AB               	bcf	4011,4,c	;volatile
 15449                           
 15450                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 15451  001468  88AB               	bsf	4011,4,c	;volatile
 15452  00146A                     i1l6814:
 15453                           
 15454                           ;eusart.c: 610: }
 15455                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 15456  00146A  0E40               	movlw	low _eusart1RxBuffer
 15457  00146C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15458  00146E  6ED9               	movwf	fsr2l,c
 15459  001470  6ADA               	clrf	fsr2h,c
 15460  001472  0E02               	movlw	high _eusart1RxBuffer
 15461  001474  22DA               	addwfc	fsr2h,f,c
 15462  001476  CFAE FFDF          	movff	4014,indf2	;volatile
 15463                           
 15464                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 15465  00147A  0E40               	movlw	low _eusart1RxBuffer
 15466  00147C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15467  00147E  6ED9               	movwf	fsr2l,c
 15468  001480  6ADA               	clrf	fsr2h,c
 15469  001482  0E02               	movlw	high _eusart1RxBuffer
 15470  001484  22DA               	addwfc	fsr2h,f,c
 15471  001486  50DF               	movf	indf2,w,c
 15472  001488  0E01               	movlw	1
 15473  00148A  A4D8               	btfss	status,2,c
 15474  00148C  0E00               	movlw	0
 15475  00148E  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15476  001490  0E40               	movlw	low _eusart1RxBuffer
 15477  001492  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15478  001494  6ED9               	movwf	fsr2l,c
 15479  001496  6ADA               	clrf	fsr2h,c
 15480  001498  0E02               	movlw	high _eusart1RxBuffer
 15481  00149A  22DA               	addwfc	fsr2h,f,c
 15482  00149C  0E0D               	movlw	13
 15483  00149E  18DE               	xorwf	postinc2,w,c
 15484  0014A0  0E01               	movlw	1
 15485  0014A2  A4D8               	btfss	status,2,c
 15486  0014A4  0E00               	movlw	0
 15487  0014A6  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 15488  0014A8  A0E8               	btfss	wreg,0,c
 15489  0014AA  D032               	goto	i1l6842
 15490                           
 15491                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 15492  0014AC  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15493  0014AE  E015               	bz	i1l6826
 15494                           
 15495                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 15496  0014B0  6A07               	clrf	EUSART1_Receive_ISR@i,c
 15497  0014B2  D00F               	goto	i1l6824
 15498  0014B4                     i1l6820:
 15499                           
 15500                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 15501  0014B4  0E40               	movlw	low _eusart1RxBuffer
 15502  0014B6  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15503  0014B8  6ED9               	movwf	fsr2l,c
 15504  0014BA  6ADA               	clrf	fsr2h,c
 15505  0014BC  0E02               	movlw	high _eusart1RxBuffer
 15506  0014BE  22DA               	addwfc	fsr2h,f,c
 15507  0014C0  0EC0               	movlw	low _UART_RX_TEXT
 15508  0014C2  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15509  0014C4  6EE1               	movwf	fsr1l,c
 15510  0014C6  6AE2               	clrf	fsr1h,c
 15511  0014C8  0E01               	movlw	high _UART_RX_TEXT
 15512  0014CA  22E2               	addwfc	fsr1h,f,c
 15513  0014CC  CFDF FFE7          	movff	indf2,indf1
 15514  0014D0  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 15515  0014D2                     i1l6824:
 15516  0014D2  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15517  0014D4  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 15518  0014D6  E3EE               	bnc	i1l6820
 15519                           
 15520                           ;eusart.c: 623: }
 15521                           ;eusart.c: 624: RX1_full = 1;
 15522  0014D8  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15523  0014DA                     i1l6826:
 15524                           
 15525                           ;eusart.c: 625: }
 15526                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 15527  0014DA  0EC0               	movlw	low _UART_RX_TEXT
 15528  0014DC  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15529  0014DE  6ED9               	movwf	fsr2l,c
 15530  0014E0  6ADA               	clrf	fsr2h,c
 15531  0014E2  0E01               	movlw	high _UART_RX_TEXT
 15532  0014E4  22DA               	addwfc	fsr2h,f,c
 15533  0014E6  0E00               	movlw	0
 15534  0014E8  6ADF               	clrf	indf2,c
 15535                           
 15536                           ;eusart.c: 629: eusart1RxIndex = 0;
 15537  0014EA  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15538                           
 15539                           ;eusart.c: 631: } else {
 15540  0014EC  0012               	return	
 15541  0014EE                     i1l6830:
 15542                           
 15543                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 15544  0014EE  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15545  0014F0  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15546  0014F2  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15547  0014F4  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 15548  0014F6  0E00               	movlw	0
 15549  0014F8  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 15550  0014FA  0E40               	movlw	64
 15551  0014FC  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 15552  0014FE  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 15553  001500  E105               	bnz	i1l6836
 15554                           
 15555                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 15556  001502  0101               	movlb	1	; () banked
 15557  001504  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 15558                           
 15559                           ;eusart.c: 636: eusart1RxIndex = 0;
 15560  001506  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15561                           
 15562                           ;eusart.c: 638: EUSART1_Erreur_Get();
 15563  001508  EF79  F013         	goto	_EUSART1_Erreur_Get	;wreg free
 15564  00150C                     i1l6836:
 15565                           
 15566                           ;eusart.c: 640: eusart1RxIndex++;
 15567  00150C  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 15568  00150E  0012               	return	
 15569  001510                     i1l6842:
 15570  001510  0E01               	movlw	1
 15571  001512  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15572  001514  0E00               	movlw	0
 15573  001516  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15574  001518  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15575                           
 15576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15577                           ; Switch size 1, requested type "speed"
 15578                           ; Number of cases is 1, Range of values is 0 to 0
 15579                           ; switch strategies available:
 15580                           ; Name         Instructions Cycles
 15581                           ; simple_byte            4     3 (average)
 15582                           ;	Chosen strategy is simple_byte
 15583  00151A  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 15584  00151C  A4D8               	btfss	status,2,c
 15585  00151E  0012               	return	
 15586                           
 15587                           ; Switch size 1, requested type "speed"
 15588                           ; Number of cases is 2, Range of values is 0 to 1
 15589                           ; switch strategies available:
 15590                           ; Name         Instructions Cycles
 15591                           ; simple_byte            7     4 (average)
 15592                           ;	Chosen strategy is simple_byte
 15593  001520  5005               	movf	??_EUSART1_Receive_ISR,w,c
 15594  001522  E0E5               	bz	i1l6830
 15595  001524  0A01               	xorlw	1	; case 1
 15596  001526  E102 EF79  F013    	bz	_EUSART1_Erreur_Get
 15597  00152C  0012               	return		;funcret
 15598  00152E                     __end_of_EUSART1_Receive_ISR:
 15599                           	opt stack 0
 15600                           tblptru	equ	0xFF8
 15601                           tblptrh	equ	0xFF7
 15602                           tblptrl	equ	0xFF6
 15603                           tablat	equ	0xFF5
 15604                           prodh	equ	0xFF4
 15605                           prodl	equ	0xFF3
 15606                           intcon	equ	0xFF2
 15607                           intcon2	equ	0xFF1
 15608                           intcon3	equ	0xFF0
 15609                           postinc0	equ	0xFEE
 15610                           wreg	equ	0xFE8
 15611                           indf1	equ	0xFE7
 15612                           postdec1	equ	0xFE5
 15613                           fsr1h	equ	0xFE2
 15614                           fsr1l	equ	0xFE1
 15615                           bsr	equ	0xFE0
 15616                           indf2	equ	0xFDF
 15617                           postinc2	equ	0xFDE
 15618                           postdec2	equ	0xFDD
 15619                           fsr2h	equ	0xFDA
 15620                           fsr2l	equ	0xFD9
 15621                           status	equ	0xFD8
 15622                           
 15623 ;; *************** function _EUSART1_Erreur_Get *****************
 15624 ;; Defined at:
 15625 ;;		line 585 in file "eusart.c"
 15626 ;; Parameters:    Size  Location     Type
 15627 ;;		None
 15628 ;; Auto vars:     Size  Location     Type
 15629 ;;		None
 15630 ;; Return value:  Size  Location     Type
 15631 ;;                  1    wreg      void 
 15632 ;; Registers used:
 15633 ;;		None
 15634 ;; Tracked objects:
 15635 ;;		On entry : 0/1
 15636 ;;		On exit  : 0/0
 15637 ;;		Unchanged: 0/0
 15638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15639 ;;      Params:         0       0       0       0
 15640 ;;      Locals:         0       0       0       0
 15641 ;;      Temps:          0       0       0       0
 15642 ;;      Totals:         0       0       0       0
 15643 ;;Total ram usage:        0 bytes
 15644 ;; Hardware stack levels used:    1
 15645 ;; Hardware stack levels required when called:    5
 15646 ;; This function calls:
 15647 ;;		Nothing
 15648 ;; This function is called by:
 15649 ;;		_EUSART1_Receive_ISR
 15650 ;; This function uses a non-reentrant model
 15651 ;;
 15652                           
 15653                           	psect	text97
 15654  0026F2                     __ptext97:
 15655                           	opt stack 0
 15656  0026F2                     _EUSART1_Erreur_Get:
 15657                           	opt stack 13
 15658                           
 15659                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 15660                           
 15661                           ;incstack = 0
 15662  0026F2  848B               	bsf	3979,2,c	;volatile
 15663                           
 15664                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 15665  0026F4  948B               	bcf	3979,2,c	;volatile
 15666                           
 15667                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 15668  0026F6  848B               	bsf	3979,2,c	;volatile
 15669  0026F8  0012               	return		;funcret
 15670  0026FA                     __end_of_EUSART1_Erreur_Get:
 15671                           	opt stack 0
 15672                           tblptru	equ	0xFF8
 15673                           tblptrh	equ	0xFF7
 15674                           tblptrl	equ	0xFF6
 15675                           tablat	equ	0xFF5
 15676                           prodh	equ	0xFF4
 15677                           prodl	equ	0xFF3
 15678                           intcon	equ	0xFF2
 15679                           intcon2	equ	0xFF1
 15680                           intcon3	equ	0xFF0
 15681                           postinc0	equ	0xFEE
 15682                           wreg	equ	0xFE8
 15683                           indf1	equ	0xFE7
 15684                           postdec1	equ	0xFE5
 15685                           fsr1h	equ	0xFE2
 15686                           fsr1l	equ	0xFE1
 15687                           bsr	equ	0xFE0
 15688                           indf2	equ	0xFDF
 15689                           postinc2	equ	0xFDE
 15690                           postdec2	equ	0xFDD
 15691                           fsr2h	equ	0xFDA
 15692                           fsr2l	equ	0xFD9
 15693                           status	equ	0xFD8
 15694                           
 15695 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 15696 ;; Defined at:
 15697 ;;		line 955 in file "interrupt.c"
 15698 ;; Parameters:    Size  Location     Type
 15699 ;;		None
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;		None
 15702 ;; Return value:  Size  Location     Type
 15703 ;;                  1    wreg      void 
 15704 ;; Registers used:
 15705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15706 ;; Tracked objects:
 15707 ;;		On entry : 0/0
 15708 ;;		On exit  : 0/0
 15709 ;;		Unchanged: 0/0
 15710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15711 ;;      Params:         0       0       0       0
 15712 ;;      Locals:         0       0       0       0
 15713 ;;      Temps:          2       0       0       0
 15714 ;;      Totals:         2       0       0       0
 15715 ;;Total ram usage:        2 bytes
 15716 ;; Hardware stack levels used:    1
 15717 ;; Hardware stack levels required when called:    4
 15718 ;; This function calls:
 15719 ;;		i2_IRQ_CAPOT
 15720 ;;		i2_IRQ_I_MOTEUR_1
 15721 ;;		i2_IRQ_I_MOTEUR_2
 15722 ;;		i2_IRQ_TIMER2
 15723 ;; This function is called by:
 15724 ;;		Interrupt level 2
 15725 ;; This function uses a non-reentrant model
 15726 ;;
 15727                           
 15728                           	psect	intcode
 15729  000008                     __pintcode:
 15730                           	opt stack 0
 15731  000008                     _HIGH_PRIORITY_IRQ:
 15732                           	opt stack 11
 15733                           
 15734                           ;incstack = 0
 15735  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15736  00000A  EF21  F010         	goto	int_func
 15737                           tblptru	equ	0xFF8
 15738                           tblptrh	equ	0xFF7
 15739                           tblptrl	equ	0xFF6
 15740                           tablat	equ	0xFF5
 15741                           prodh	equ	0xFF4
 15742                           prodl	equ	0xFF3
 15743                           intcon	equ	0xFF2
 15744                           intcon2	equ	0xFF1
 15745                           intcon3	equ	0xFF0
 15746                           postinc0	equ	0xFEE
 15747                           wreg	equ	0xFE8
 15748                           indf1	equ	0xFE7
 15749                           postdec1	equ	0xFE5
 15750                           fsr1h	equ	0xFE2
 15751                           fsr1l	equ	0xFE1
 15752                           bsr	equ	0xFE0
 15753                           indf2	equ	0xFDF
 15754                           postinc2	equ	0xFDE
 15755                           postdec2	equ	0xFDD
 15756                           fsr2h	equ	0xFDA
 15757                           fsr2l	equ	0xFD9
 15758                           status	equ	0xFD8
 15759                           
 15760                           	psect	intcode_body
 15761  002042                     __pintcode_body:
 15762                           	opt stack 11
 15763  002042                     int_func:
 15764                           	opt stack 11
 15765  002042  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 15766  002046  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 15767                           
 15768                           ;interrupt.c: 958: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 15769  00204A  B29D               	btfsc	3997,1,c	;volatile
 15770  00204C  A29E               	btfss	3998,1,c	;volatile
 15771  00204E  D003               	goto	i2l698
 15772                           
 15773                           ;interrupt.c: 959: IRQ_TIMER2();
 15774  002050  EC8D  F013         	call	i2_IRQ_TIMER2	;wreg free
 15775                           
 15776                           ;interrupt.c: 965: }
 15777  002054  D011               	goto	i2l705
 15778  002056                     i2l698:
 15779                           
 15780                           ;interrupt.c: 966: else
 15781                           ;interrupt.c: 967: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 15782  002056  B8F2               	btfsc	intcon,4,c	;volatile
 15783  002058  A2F2               	btfss	intcon,1,c	;volatile
 15784  00205A  D003               	goto	i2l700
 15785                           
 15786                           ;interrupt.c: 968: {
 15787                           ;interrupt.c: 969: IRQ_CAPOT();
 15788  00205C  EC7D  F013         	call	i2_IRQ_CAPOT	;wreg free
 15789                           
 15790                           ;interrupt.c: 984: } else
 15791  002060  D00B               	goto	i2l705
 15792  002062                     i2l700:
 15793                           
 15794                           ;interrupt.c: 985: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 15795  002062  B6F0               	btfsc	intcon3,3,c	;volatile
 15796  002064  A0F0               	btfss	intcon3,0,c	;volatile
 15797  002066  D003               	goto	i2l702
 15798                           
 15799                           ;interrupt.c: 991: IRQ_I_MOTEUR_1();
 15800  002068  ECA7  F012         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 15801                           
 15802                           ;interrupt.c: 1003: } else
 15803  00206C  D005               	goto	i2l705
 15804  00206E                     i2l702:
 15805                           
 15806                           ;interrupt.c: 1004: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 15807  00206E  B8F0               	btfsc	intcon3,4,c	;volatile
 15808  002070  A2F0               	btfss	intcon3,1,c	;volatile
 15809  002072  D002               	goto	i2l705
 15810                           
 15811                           ;interrupt.c: 1010: IRQ_I_MOTEUR_2();
 15812  002074  EC9C  F012         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 15813  002078                     i2l705:
 15814  002078  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 15815  00207C  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 15816  002080  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15817  002082  0011               	retfie		f
 15818  002084                     __end_of_HIGH_PRIORITY_IRQ:
 15819                           	opt stack 0
 15820                           tblptru	equ	0xFF8
 15821                           tblptrh	equ	0xFF7
 15822                           tblptrl	equ	0xFF6
 15823                           tablat	equ	0xFF5
 15824                           prodh	equ	0xFF4
 15825                           prodl	equ	0xFF3
 15826                           intcon	equ	0xFF2
 15827                           intcon2	equ	0xFF1
 15828                           intcon3	equ	0xFF0
 15829                           postinc0	equ	0xFEE
 15830                           wreg	equ	0xFE8
 15831                           indf1	equ	0xFE7
 15832                           postdec1	equ	0xFE5
 15833                           fsr1h	equ	0xFE2
 15834                           fsr1l	equ	0xFE1
 15835                           bsr	equ	0xFE0
 15836                           indf2	equ	0xFDF
 15837                           postinc2	equ	0xFDE
 15838                           postdec2	equ	0xFDD
 15839                           fsr2h	equ	0xFDA
 15840                           fsr2l	equ	0xFD9
 15841                           status	equ	0xFD8
 15842                           
 15843 ;; *************** function i2_IRQ_TIMER2 *****************
 15844 ;; Defined at:
 15845 ;;		line 883 in file "interrupt.c"
 15846 ;; Parameters:    Size  Location     Type
 15847 ;;		None
 15848 ;; Auto vars:     Size  Location     Type
 15849 ;;		None
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  1    wreg      void 
 15852 ;; Registers used:
 15853 ;;		None
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15859 ;;      Params:         0       0       0       0
 15860 ;;      Locals:         0       0       0       0
 15861 ;;      Temps:          0       0       0       0
 15862 ;;      Totals:         0       0       0       0
 15863 ;;Total ram usage:        0 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; This function calls:
 15866 ;;		Nothing
 15867 ;; This function is called by:
 15868 ;;		_HIGH_PRIORITY_IRQ
 15869 ;; This function uses a non-reentrant model
 15870 ;;
 15871                           
 15872                           	psect	text99
 15873  00271A                     __ptext99:
 15874                           	opt stack 0
 15875  00271A                     i2_IRQ_TIMER2:
 15876                           	opt stack 14
 15877                           
 15878                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 15879                           
 15880                           ;incstack = 0
 15881  00271A  929E               	bcf	3998,1,c	;volatile
 15882                           
 15883                           ;interrupt.c: 887: GODONE = 1;
 15884  00271C  82C2               	bsf	4034,1,c	;volatile
 15885  00271E  0012               	return		;funcret
 15886  002720                     __end_ofi2_IRQ_TIMER2:
 15887                           	opt stack 0
 15888                           tblptru	equ	0xFF8
 15889                           tblptrh	equ	0xFF7
 15890                           tblptrl	equ	0xFF6
 15891                           tablat	equ	0xFF5
 15892                           prodh	equ	0xFF4
 15893                           prodl	equ	0xFF3
 15894                           intcon	equ	0xFF2
 15895                           intcon2	equ	0xFF1
 15896                           intcon3	equ	0xFF0
 15897                           postinc0	equ	0xFEE
 15898                           wreg	equ	0xFE8
 15899                           indf1	equ	0xFE7
 15900                           postdec1	equ	0xFE5
 15901                           fsr1h	equ	0xFE2
 15902                           fsr1l	equ	0xFE1
 15903                           bsr	equ	0xFE0
 15904                           indf2	equ	0xFDF
 15905                           postinc2	equ	0xFDE
 15906                           postdec2	equ	0xFDD
 15907                           fsr2h	equ	0xFDA
 15908                           fsr2l	equ	0xFD9
 15909                           status	equ	0xFD8
 15910                           
 15911 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15912 ;; Defined at:
 15913 ;;		line 909 in file "interrupt.c"
 15914 ;; Parameters:    Size  Location     Type
 15915 ;;		None
 15916 ;; Auto vars:     Size  Location     Type
 15917 ;;		None
 15918 ;; Return value:  Size  Location     Type
 15919 ;;                  1    wreg      void 
 15920 ;; Registers used:
 15921 ;;		wreg, status,2, status,0
 15922 ;; Tracked objects:
 15923 ;;		On entry : 0/0
 15924 ;;		On exit  : 0/0
 15925 ;;		Unchanged: 0/0
 15926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15927 ;;      Params:         0       0       0       0
 15928 ;;      Locals:         0       0       0       0
 15929 ;;      Temps:          0       0       0       0
 15930 ;;      Totals:         0       0       0       0
 15931 ;;Total ram usage:        0 bytes
 15932 ;; Hardware stack levels used:    1
 15933 ;; This function calls:
 15934 ;;		Nothing
 15935 ;; This function is called by:
 15936 ;;		_HIGH_PRIORITY_IRQ
 15937 ;; This function uses a non-reentrant model
 15938 ;;
 15939                           
 15940                           	psect	text100
 15941  002538                     __ptext100:
 15942                           	opt stack 0
 15943  002538                     i2_IRQ_I_MOTEUR_2:
 15944                           	opt stack 14
 15945                           
 15946                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 15947                           
 15948                           ;incstack = 0
 15949  002538  928B               	bcf	3979,1,c	;volatile
 15950                           
 15951                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 15952  00253A  D001               	goto	i2l4724
 15953  00253C                     i2l691:
 15954  00253C  F000               	nop	
 15955  00253E                     i2l4724:
 15956  00253E  50CC               	movf	4044,w,c	;volatile
 15957  002540  E1FD               	bnz	i2l691
 15958                           
 15959                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 15960  002542  828B               	bsf	3979,1,c	;volatile
 15961                           
 15962                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 15963  002544  748B               	btg	3979,2,c	;volatile
 15964                           
 15965                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 15966  002546  92F0               	bcf	intcon3,1,c	;volatile
 15967                           
 15968                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 15969  002548  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 15970  00254A  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 15971  00254C  0012               	return		;funcret
 15972  00254E                     __end_ofi2_IRQ_I_MOTEUR_2:
 15973                           	opt stack 0
 15974                           tblptru	equ	0xFF8
 15975                           tblptrh	equ	0xFF7
 15976                           tblptrl	equ	0xFF6
 15977                           tablat	equ	0xFF5
 15978                           prodh	equ	0xFF4
 15979                           prodl	equ	0xFF3
 15980                           intcon	equ	0xFF2
 15981                           intcon2	equ	0xFF1
 15982                           intcon3	equ	0xFF0
 15983                           postinc0	equ	0xFEE
 15984                           wreg	equ	0xFE8
 15985                           indf1	equ	0xFE7
 15986                           postdec1	equ	0xFE5
 15987                           fsr1h	equ	0xFE2
 15988                           fsr1l	equ	0xFE1
 15989                           bsr	equ	0xFE0
 15990                           indf2	equ	0xFDF
 15991                           postinc2	equ	0xFDE
 15992                           postdec2	equ	0xFDD
 15993                           fsr2h	equ	0xFDA
 15994                           fsr2l	equ	0xFD9
 15995                           status	equ	0xFD8
 15996                           
 15997 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 15998 ;; Defined at:
 15999 ;;		line 895 in file "interrupt.c"
 16000 ;; Parameters:    Size  Location     Type
 16001 ;;		None
 16002 ;; Auto vars:     Size  Location     Type
 16003 ;;		None
 16004 ;; Return value:  Size  Location     Type
 16005 ;;                  1    wreg      void 
 16006 ;; Registers used:
 16007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16008 ;; Tracked objects:
 16009 ;;		On entry : 0/0
 16010 ;;		On exit  : 0/0
 16011 ;;		Unchanged: 0/0
 16012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16013 ;;      Params:         0       0       0       0
 16014 ;;      Locals:         0       0       0       0
 16015 ;;      Temps:          0       0       0       0
 16016 ;;      Totals:         0       0       0       0
 16017 ;;Total ram usage:        0 bytes
 16018 ;; Hardware stack levels used:    1
 16019 ;; Hardware stack levels required when called:    3
 16020 ;; This function calls:
 16021 ;;		i2_Alarme_On
 16022 ;; This function is called by:
 16023 ;;		_HIGH_PRIORITY_IRQ
 16024 ;; This function uses a non-reentrant model
 16025 ;;
 16026                           
 16027                           	psect	text101
 16028  00254E                     __ptext101:
 16029                           	opt stack 0
 16030  00254E                     i2_IRQ_I_MOTEUR_1:
 16031                           	opt stack 11
 16032                           
 16033                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 16034                           
 16035                           ;incstack = 0
 16036  00254E  90F0               	bcf	intcon3,0,c	;volatile
 16037                           
 16038                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 16039  002550  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 16040                           
 16041                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 16042  002552  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 16043  002554  A4D8               	btfss	status,2,c
 16044  002556  0012               	return	
 16045                           
 16046                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 16047  002558  848B               	bsf	3979,2,c	;volatile
 16048                           
 16049                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 16050  00255A  908B               	bcf	3979,0,c	;volatile
 16051                           
 16052                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 16053  00255C  928B               	bcf	3979,1,c	;volatile
 16054                           
 16055                           ;interrupt.c: 904: Alarme_On(1);
 16056  00255E  0E01               	movlw	1
 16057  002560  EF38  F013         	goto	i2_Alarme_On
 16058  002564                     __end_ofi2_IRQ_I_MOTEUR_1:
 16059                           	opt stack 0
 16060                           tblptru	equ	0xFF8
 16061                           tblptrh	equ	0xFF7
 16062                           tblptrl	equ	0xFF6
 16063                           tablat	equ	0xFF5
 16064                           prodh	equ	0xFF4
 16065                           prodl	equ	0xFF3
 16066                           intcon	equ	0xFF2
 16067                           intcon2	equ	0xFF1
 16068                           intcon3	equ	0xFF0
 16069                           postinc0	equ	0xFEE
 16070                           wreg	equ	0xFE8
 16071                           indf1	equ	0xFE7
 16072                           postdec1	equ	0xFE5
 16073                           fsr1h	equ	0xFE2
 16074                           fsr1l	equ	0xFE1
 16075                           bsr	equ	0xFE0
 16076                           indf2	equ	0xFDF
 16077                           postinc2	equ	0xFDE
 16078                           postdec2	equ	0xFDD
 16079                           fsr2h	equ	0xFDA
 16080                           fsr2l	equ	0xFD9
 16081                           status	equ	0xFD8
 16082                           
 16083 ;; *************** function i2_IRQ_CAPOT *****************
 16084 ;; Defined at:
 16085 ;;		line 890 in file "interrupt.c"
 16086 ;; Parameters:    Size  Location     Type
 16087 ;;		None
 16088 ;; Auto vars:     Size  Location     Type
 16089 ;;		None
 16090 ;; Return value:  Size  Location     Type
 16091 ;;                  1    wreg      void 
 16092 ;; Registers used:
 16093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16094 ;; Tracked objects:
 16095 ;;		On entry : 0/0
 16096 ;;		On exit  : 0/0
 16097 ;;		Unchanged: 0/0
 16098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16099 ;;      Params:         0       0       0       0
 16100 ;;      Locals:         0       0       0       0
 16101 ;;      Temps:          0       0       0       0
 16102 ;;      Totals:         0       0       0       0
 16103 ;;Total ram usage:        0 bytes
 16104 ;; Hardware stack levels used:    1
 16105 ;; Hardware stack levels required when called:    3
 16106 ;; This function calls:
 16107 ;;		i2_Alarme_On
 16108 ;; This function is called by:
 16109 ;;		_HIGH_PRIORITY_IRQ
 16110 ;; This function uses a non-reentrant model
 16111 ;;
 16112                           
 16113                           	psect	text102
 16114  0026FA                     __ptext102:
 16115                           	opt stack 0
 16116  0026FA                     i2_IRQ_CAPOT:
 16117                           	opt stack 11
 16118                           
 16119                           ;interrupt.c: 891: INT0IF = 0;
 16120                           
 16121                           ;incstack = 0
 16122  0026FA  92F2               	bcf	intcon,1,c	;volatile
 16123                           
 16124                           ;interrupt.c: 892: Alarme_On(4);
 16125  0026FC  0E04               	movlw	4
 16126  0026FE  EF38  F013         	goto	i2_Alarme_On
 16127  002702                     __end_ofi2_IRQ_CAPOT:
 16128                           	opt stack 0
 16129                           tblptru	equ	0xFF8
 16130                           tblptrh	equ	0xFF7
 16131                           tblptrl	equ	0xFF6
 16132                           tablat	equ	0xFF5
 16133                           prodh	equ	0xFF4
 16134                           prodl	equ	0xFF3
 16135                           intcon	equ	0xFF2
 16136                           intcon2	equ	0xFF1
 16137                           intcon3	equ	0xFF0
 16138                           postinc0	equ	0xFEE
 16139                           wreg	equ	0xFE8
 16140                           indf1	equ	0xFE7
 16141                           postdec1	equ	0xFE5
 16142                           fsr1h	equ	0xFE2
 16143                           fsr1l	equ	0xFE1
 16144                           bsr	equ	0xFE0
 16145                           indf2	equ	0xFDF
 16146                           postinc2	equ	0xFDE
 16147                           postdec2	equ	0xFDD
 16148                           fsr2h	equ	0xFDA
 16149                           fsr2l	equ	0xFD9
 16150                           status	equ	0xFD8
 16151                           
 16152 ;; *************** function i2_Alarme_On *****************
 16153 ;; Defined at:
 16154 ;;		line 18 in file "alarme.c"
 16155 ;; Parameters:    Size  Location     Type
 16156 ;;  alarme_new_v    1    wreg     unsigned char 
 16157 ;; Auto vars:     Size  Location     Type
 16158 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 16159 ;; Return value:  Size  Location     Type
 16160 ;;                  1    wreg      void 
 16161 ;; Registers used:
 16162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16163 ;; Tracked objects:
 16164 ;;		On entry : 0/0
 16165 ;;		On exit  : 0/0
 16166 ;;		Unchanged: 0/0
 16167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16168 ;;      Params:         0       0       0       0
 16169 ;;      Locals:         1       0       0       0
 16170 ;;      Temps:          0       0       0       0
 16171 ;;      Totals:         1       0       0       0
 16172 ;;Total ram usage:        1 bytes
 16173 ;; Hardware stack levels used:    1
 16174 ;; Hardware stack levels required when called:    2
 16175 ;; This function calls:
 16176 ;;		i2_Coupe_Moteur
 16177 ;;		i2_Etat_Update
 16178 ;; This function is called by:
 16179 ;;		i2_IRQ_CAPOT
 16180 ;;		i2_IRQ_I_MOTEUR_1
 16181 ;; This function uses a non-reentrant model
 16182 ;;
 16183                           
 16184                           	psect	text103
 16185  002670                     __ptext103:
 16186                           	opt stack 0
 16187  002670                     i2_Alarme_On:
 16188                           	opt stack 11
 16189                           
 16190                           ;incstack = 0
 16191                           ;i2Alarme_On@alarme_new_value stored from wreg
 16192  002670  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 16193                           
 16194                           ;alarme.c: 22: Etat_Update(1);
 16195  002672  0E01               	movlw	1
 16196  002674  EC36  F012         	call	i2_Etat_Update
 16197                           
 16198                           ;alarme.c: 23: Alarme = alarme_new_value;
 16199  002678  C002  F0A9         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 16200                           
 16201                           ;alarme.c: 24: Coupe_Moteur();
 16202  00267C  EFDA  F012         	goto	i2_Coupe_Moteur	;wreg free
 16203  002680                     __end_ofi2_Alarme_On:
 16204                           	opt stack 0
 16205                           tblptru	equ	0xFF8
 16206                           tblptrh	equ	0xFF7
 16207                           tblptrl	equ	0xFF6
 16208                           tablat	equ	0xFF5
 16209                           prodh	equ	0xFF4
 16210                           prodl	equ	0xFF3
 16211                           intcon	equ	0xFF2
 16212                           intcon2	equ	0xFF1
 16213                           intcon3	equ	0xFF0
 16214                           postinc0	equ	0xFEE
 16215                           wreg	equ	0xFE8
 16216                           indf1	equ	0xFE7
 16217                           postdec1	equ	0xFE5
 16218                           fsr1h	equ	0xFE2
 16219                           fsr1l	equ	0xFE1
 16220                           bsr	equ	0xFE0
 16221                           indf2	equ	0xFDF
 16222                           postinc2	equ	0xFDE
 16223                           postdec2	equ	0xFDD
 16224                           fsr2h	equ	0xFDA
 16225                           fsr2l	equ	0xFD9
 16226                           status	equ	0xFD8
 16227                           
 16228 ;; *************** function i2_Etat_Update *****************
 16229 ;; Defined at:
 16230 ;;		line 74 in file "action.c"
 16231 ;; Parameters:    Size  Location     Type
 16232 ;;  etat_new_val    1    wreg     unsigned char 
 16233 ;; Auto vars:     Size  Location     Type
 16234 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 16235 ;; Return value:  Size  Location     Type
 16236 ;;                  1    wreg      void 
 16237 ;; Registers used:
 16238 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16239 ;; Tracked objects:
 16240 ;;		On entry : 0/0
 16241 ;;		On exit  : 0/0
 16242 ;;		Unchanged: 0/0
 16243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16244 ;;      Params:         0       0       0       0
 16245 ;;      Locals:         1       0       0       0
 16246 ;;      Temps:          0       0       0       0
 16247 ;;      Totals:         1       0       0       0
 16248 ;;Total ram usage:        1 bytes
 16249 ;; Hardware stack levels used:    1
 16250 ;; This function calls:
 16251 ;;		Nothing
 16252 ;; This function is called by:
 16253 ;;		i2_Alarme_On
 16254 ;; This function uses a non-reentrant model
 16255 ;;
 16256                           
 16257                           	psect	text104
 16258  00246C                     __ptext104:
 16259                           	opt stack 0
 16260  00246C                     i2_Etat_Update:
 16261                           	opt stack 12
 16262                           
 16263                           ;incstack = 0
 16264                           ;i2Etat_Update@etat_new_value stored from wreg
 16265  00246C  6E01               	movwf	i2Etat_Update@etat_new_value,c
 16266                           
 16267                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 16268  00246E  504C               	movf	_Etat_Precedent_Index,w,c
 16269  002470  0F6A               	addlw	low _Etat_Log
 16270  002472  6ED9               	movwf	fsr2l,c
 16271  002474  6ADA               	clrf	fsr2h,c
 16272  002476  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 16273                           
 16274                           ;action.c: 76: Etat = etat_new_value;
 16275  00247A  C001  F0AA         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 16276                           
 16277                           ;action.c: 77: Etat_Precedent_Index++;
 16278  00247E  2A4C               	incf	_Etat_Precedent_Index,f,c
 16279                           
 16280                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 16281  002480  0E0A               	movlw	10
 16282  002482  184C               	xorwf	_Etat_Precedent_Index,w,c
 16283  002484  B4D8               	btfsc	status,2,c
 16284                           
 16285                           ;action.c: 79: Etat_Precedent_Index = 0;
 16286  002486  6A4C               	clrf	_Etat_Precedent_Index,c
 16287  002488  0012               	return		;funcret
 16288  00248A                     __end_ofi2_Etat_Update:
 16289                           	opt stack 0
 16290                           tblptru	equ	0xFF8
 16291                           tblptrh	equ	0xFF7
 16292                           tblptrl	equ	0xFF6
 16293                           tablat	equ	0xFF5
 16294                           prodh	equ	0xFF4
 16295                           prodl	equ	0xFF3
 16296                           intcon	equ	0xFF2
 16297                           intcon2	equ	0xFF1
 16298                           intcon3	equ	0xFF0
 16299                           postinc0	equ	0xFEE
 16300                           wreg	equ	0xFE8
 16301                           indf1	equ	0xFE7
 16302                           postdec1	equ	0xFE5
 16303                           fsr1h	equ	0xFE2
 16304                           fsr1l	equ	0xFE1
 16305                           bsr	equ	0xFE0
 16306                           indf2	equ	0xFDF
 16307                           postinc2	equ	0xFDE
 16308                           postdec2	equ	0xFDD
 16309                           fsr2h	equ	0xFDA
 16310                           fsr2l	equ	0xFD9
 16311                           status	equ	0xFD8
 16312                           
 16313 ;; *************** function i2_Coupe_Moteur *****************
 16314 ;; Defined at:
 16315 ;;		line 261 in file "action.c"
 16316 ;; Parameters:    Size  Location     Type
 16317 ;;		None
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;		None
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  1    wreg      void 
 16322 ;; Registers used:
 16323 ;;		cstack
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16329 ;;      Params:         0       0       0       0
 16330 ;;      Locals:         0       0       0       0
 16331 ;;      Temps:          0       0       0       0
 16332 ;;      Totals:         0       0       0       0
 16333 ;;Total ram usage:        0 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    1
 16336 ;; This function calls:
 16337 ;;		i2_TIMER2_Off
 16338 ;; This function is called by:
 16339 ;;		i2_Alarme_On
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           	psect	text105
 16344  0025B4                     __ptext105:
 16345                           	opt stack 0
 16346  0025B4                     i2_Coupe_Moteur:
 16347                           	opt stack 11
 16348                           
 16349                           ;action.c: 262: TIMER2_Off();
 16350                           
 16351                           ;incstack = 0
 16352  0025B4  EC90  F013         	call	i2_TIMER2_Off	;wreg free
 16353                           
 16354                           ;action.c: 274: LATCbits.LATC0 = 0;
 16355  0025B8  908B               	bcf	3979,0,c	;volatile
 16356                           
 16357                           ;action.c: 275: LATCbits.LATC1 = 0;
 16358  0025BA  928B               	bcf	3979,1,c	;volatile
 16359                           
 16360                           ;action.c: 276: OVDCOND = 0b00000000;
 16361  0025BC  6A6B               	clrf	3947,c	;volatile
 16362                           
 16363                           ;action.c: 277: LATD4 = 0;LATD5 = 0;
 16364  0025BE  988C               	bcf	3980,4,c	;volatile
 16365  0025C0  9A8C               	bcf	3980,5,c	;volatile
 16366                           
 16367                           ;action.c: 278: LATD6 = 0;LATD7 = 0;
 16368  0025C2  9C8C               	bcf	3980,6,c	;volatile
 16369  0025C4  9E8C               	bcf	3980,7,c	;volatile
 16370  0025C6  0012               	return		;funcret
 16371  0025C8                     __end_ofi2_Coupe_Moteur:
 16372                           	opt stack 0
 16373                           tblptru	equ	0xFF8
 16374                           tblptrh	equ	0xFF7
 16375                           tblptrl	equ	0xFF6
 16376                           tablat	equ	0xFF5
 16377                           prodh	equ	0xFF4
 16378                           prodl	equ	0xFF3
 16379                           intcon	equ	0xFF2
 16380                           intcon2	equ	0xFF1
 16381                           intcon3	equ	0xFF0
 16382                           postinc0	equ	0xFEE
 16383                           wreg	equ	0xFE8
 16384                           indf1	equ	0xFE7
 16385                           postdec1	equ	0xFE5
 16386                           fsr1h	equ	0xFE2
 16387                           fsr1l	equ	0xFE1
 16388                           bsr	equ	0xFE0
 16389                           indf2	equ	0xFDF
 16390                           postinc2	equ	0xFDE
 16391                           postdec2	equ	0xFDD
 16392                           fsr2h	equ	0xFDA
 16393                           fsr2l	equ	0xFD9
 16394                           status	equ	0xFD8
 16395                           
 16396 ;; *************** function i2_TIMER2_Off *****************
 16397 ;; Defined at:
 16398 ;;		line 165 in file "timer.c"
 16399 ;; Parameters:    Size  Location     Type
 16400 ;;		None
 16401 ;; Auto vars:     Size  Location     Type
 16402 ;;		None
 16403 ;; Return value:  Size  Location     Type
 16404 ;;                  1    wreg      void 
 16405 ;; Registers used:
 16406 ;;		None
 16407 ;; Tracked objects:
 16408 ;;		On entry : 0/0
 16409 ;;		On exit  : 0/0
 16410 ;;		Unchanged: 0/0
 16411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16412 ;;      Params:         0       0       0       0
 16413 ;;      Locals:         0       0       0       0
 16414 ;;      Temps:          0       0       0       0
 16415 ;;      Totals:         0       0       0       0
 16416 ;;Total ram usage:        0 bytes
 16417 ;; Hardware stack levels used:    1
 16418 ;; This function calls:
 16419 ;;		Nothing
 16420 ;; This function is called by:
 16421 ;;		i2_Coupe_Moteur
 16422 ;; This function uses a non-reentrant model
 16423 ;;
 16424                           
 16425                           	psect	text106
 16426  002720                     __ptext106:
 16427                           	opt stack 0
 16428  002720                     i2_TIMER2_Off:
 16429                           	opt stack 11
 16430                           
 16431                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 16432                           
 16433                           ;incstack = 0
 16434  002720  929D               	bcf	3997,1,c	;volatile
 16435                           
 16436                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 16437  002722  929E               	bcf	3998,1,c	;volatile
 16438  002724  0012               	return		;funcret
 16439  002726                     __end_ofi2_TIMER2_Off:
 16440                           	opt stack 0
 16441                           tblptru	equ	0xFF8
 16442                           tblptrh	equ	0xFF7
 16443                           tblptrl	equ	0xFF6
 16444                           tablat	equ	0xFF5
 16445                           prodh	equ	0xFF4
 16446                           prodl	equ	0xFF3
 16447                           intcon	equ	0xFF2
 16448                           intcon2	equ	0xFF1
 16449                           intcon3	equ	0xFF0
 16450                           postinc0	equ	0xFEE
 16451                           wreg	equ	0xFE8
 16452                           indf1	equ	0xFE7
 16453                           postdec1	equ	0xFE5
 16454                           fsr1h	equ	0xFE2
 16455                           fsr1l	equ	0xFE1
 16456                           bsr	equ	0xFE0
 16457                           indf2	equ	0xFDF
 16458                           postinc2	equ	0xFDE
 16459                           postdec2	equ	0xFDD
 16460                           fsr2h	equ	0xFDA
 16461                           fsr2l	equ	0xFD9
 16462                           status	equ	0xFD8
 16463                           tblptru	equ	0xFF8
 16464                           tblptrh	equ	0xFF7
 16465                           tblptrl	equ	0xFF6
 16466                           tablat	equ	0xFF5
 16467                           prodh	equ	0xFF4
 16468                           prodl	equ	0xFF3
 16469                           intcon	equ	0xFF2
 16470                           intcon2	equ	0xFF1
 16471                           intcon3	equ	0xFF0
 16472                           postinc0	equ	0xFEE
 16473                           wreg	equ	0xFE8
 16474                           indf1	equ	0xFE7
 16475                           postdec1	equ	0xFE5
 16476                           fsr1h	equ	0xFE2
 16477                           fsr1l	equ	0xFE1
 16478                           bsr	equ	0xFE0
 16479                           indf2	equ	0xFDF
 16480                           postinc2	equ	0xFDE
 16481                           postdec2	equ	0xFDD
 16482                           fsr2h	equ	0xFDA
 16483                           fsr2l	equ	0xFD9
 16484                           status	equ	0xFD8
 16485                           
 16486                           	psect	rparam
 16487  0000                     tblptru	equ	0xFF8
 16488                           tblptrh	equ	0xFF7
 16489                           tblptrl	equ	0xFF6
 16490                           tablat	equ	0xFF5
 16491                           prodh	equ	0xFF4
 16492                           prodl	equ	0xFF3
 16493                           intcon	equ	0xFF2
 16494                           intcon2	equ	0xFF1
 16495                           intcon3	equ	0xFF0
 16496                           postinc0	equ	0xFEE
 16497                           wreg	equ	0xFE8
 16498                           indf1	equ	0xFE7
 16499                           postdec1	equ	0xFE5
 16500                           fsr1h	equ	0xFE2
 16501                           fsr1l	equ	0xFE1
 16502                           bsr	equ	0xFE0
 16503                           indf2	equ	0xFDF
 16504                           postinc2	equ	0xFDE
 16505                           postdec2	equ	0xFDD
 16506                           fsr2h	equ	0xFDA
 16507                           fsr2l	equ	0xFD9
 16508                           status	equ	0xFD8
 16509                           
 16510                           	psect	temp
 16511  000051                     btemp:
 16512                           	opt stack 0
 16513  000051                     	ds	1
 16514  0000                     int$flags	set	btemp
 16515                           tblptru	equ	0xFF8
 16516                           tblptrh	equ	0xFF7
 16517                           tblptrl	equ	0xFF6
 16518                           tablat	equ	0xFF5
 16519                           prodh	equ	0xFF4
 16520                           prodl	equ	0xFF3
 16521                           intcon	equ	0xFF2
 16522                           intcon2	equ	0xFF1
 16523                           intcon3	equ	0xFF0
 16524                           postinc0	equ	0xFEE
 16525                           wreg	equ	0xFE8
 16526                           indf1	equ	0xFE7
 16527                           postdec1	equ	0xFE5
 16528                           fsr1h	equ	0xFE2
 16529                           fsr1l	equ	0xFE1
 16530                           bsr	equ	0xFE0
 16531                           indf2	equ	0xFDF
 16532                           postinc2	equ	0xFDE
 16533                           postdec2	equ	0xFDD
 16534                           fsr2h	equ	0xFDA
 16535                           fsr2l	equ	0xFD9
 16536                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         537
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     19     160
    BANK1           256      0     256
    BANK2           256     11     139

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Disparait->_Buzzer_Etat
    _IRQ_PION_Metal_Apparait->_Buzzer_Etat
    _IRQ_I_MOTEUR_1->_Alarme_On
    _IRQ_CAPOT->_Alarme_On
    _Alarme_On->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update
    _IRQ_PION_CHANGEMENT_ETAT->i1_Buzzer_Etat

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_IRQ_CAPOT->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update

Critical Paths under _main in BANK0

    _Cycle->_Mouvement_X
    _Cycle->_delay_s
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  185781
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  185682
                                             10 BANK2      1     1      0
                        _Buzzer_Etat
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   39998
                                              7 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26320
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   64782
                                             17 BANK0      2     0      2
                                              7 BANK2      1     1      0
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      31
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   37041
                          _Alarme_On
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2864
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     461
                                             55 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3786
                                             26 COMRAM    14     8      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3579
                                             40 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2833
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40329
                                              7 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13194
                                             17 BANK0      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26651
                                             17 BANK0      1     1      0
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13129
                                             63 COMRAM     3     3      0
                                             13 BANK0      4     4      0
                                              0 BANK2      7     0      7
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     465
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0      31
                        _Buzzer_Etat
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      31
                        _Buzzer_Etat
                          _TIMER5_On
 ---------------------------------------------------------------------------------
 (7) _TIMER5_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     335
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
           _IRQ_PION_CHANGEMENT_ETAT
                            _SPI_ISR
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _IRQ_PION_CHANGEMENT_ETAT                            0     0      0      22
                      i1_Buzzer_Etat
                       i1_TIMER5_Off
                        i1_TIMER5_On
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_On                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     132
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Buzzer_Etat
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Buzzer_Etat
           _TIMER5_On
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _IRQ_PION_CHANGEMENT_ETAT
     i1_Buzzer_Etat
     i1_TIMER5_Off
     i1_TIMER5_On
   _SPI_ISR
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      B      8B       9       54.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      A0       5      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27B       3        0.0%
DATA                 0      0     27B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Mar 19 15:59:02 2019

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l241 0C54  
                                                   l252 0CEC  
                                                   l602 1B98  
                                                   l523 2698  
                                                   l275 20C6  
                                                   l622 0E8C  
                                                   l614 0E06  
                                                   l616 0E3A  
                                                   l580 1E2C  
                                                   l629 0F10  
                                                   l569 242A  
                                                   l691 2510  
                                                   l599 1B58  
                                                   l981 212A  
                                                   l968 22EE  
                                                   _GIE 007F97  
                                                   l999 19AE  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009F  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 2726  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0288  
                                          ___ftdiv@cntr 0032  
                                          ___ftdiv@sign 0037  
                                                  l1010 1904  
                                                  l1006 1A10  
                                                  l1022 1182  
                                                  l1040 126C  
                                                  l1041 1228  
                                                  l1017 1966  
                                                  l1310 1760  
                                                  l1400 0470  
                                                  l2033 16E6  
                                                  l2035 172E  
                                                  l1412 059C  
                                                  l1430 062E  
                                                  l1414 05A0  
                                                  l1415 05A6  
                                                  l1416 05E0  
                                                  l1417 05E2  
                                                  l1409 0564  
                                                  l2049 142E  
                                                  l2155 2038  
                                                  l1700 08F4  
                                                  l1460 0758  
                                                  l1444 06A6  
                                                  l2165 20B8  
                                                  l1366 017A  
                                                  l1715 09B4  
                                                  l1484 07C2  
                                                  l1733 0A8A  
                                                  l1734 0A8E  
                                                  l1486 07D8  
                                                  l1965 1ABC  
                                                  l1977 1B1A  
                                                  l8010 0682  
                                                  l8002 0670  
                                                  l8110 07E6  
                                                  l8102 07B0  
                                                  l8014 0688  
                                                  l8112 07EC  
                                                  l8104 07D0  
                                                  l8024 069A  
                                                  l7330 2512  
                                                  l7410 1B5C  
                                                  l8050 0700  
                                                  l8034 06E2  
                                                  l8202 2506  
                                                  l8210 16C6  
                                                  l9010 0D3A  
                                                  l7404 1B4C  
                                                  l8108 07DE  
                                                  l8060 0712  
                                                  l8300 1658  
                                                  l9020 0D48  
                                                  l9004 0D16  
                                                  l7430 1B90  
                                                  l8046 06FA  
                                                  l8038 06E8  
                                                  l8062 071E  
                                                  l8118 07F8  
                                                  l8310 167C  
                                                  l9030 0D82  
                                                  l8072 0766  
                                                  l8064 0724  
                                                  l8160 1AE2  
                                                  l8312 1680  
                                                  l8304 1668  
                                                  l9040 0DD2  
                                                  l9032 0D92  
                                                  _ADIF 007CF6  
                                                  l7530 1C38  
                                                  l7450 0E58  
                                                  l7370 1E1C  
                                                  l7434 1BA0  
                                                  l7418 1B70  
                                                  l8090 078C  
                                                  l8074 076C  
                                                  l8082 0774  
                                                  l8330 217A  
                                                  l8250 13C6  
                                                  l9034 0DA2  
                                                  l7460 0EB4  
                                                  l7444 0E2E  
                                                  l7508 24BA  
                                                  l8092 0798  
                                                  l8084 0780  
                                                  l8068 0764  
                                                  l8332 217E  
                                                  l8164 1AF4  
                                                  l8156 1AC4  
                                                  l8228 170A  
                                                  l8316 1694  
                                                  l8308 1670  
                                                  l9036 0DB2  
                                                  l9028 0D6C  
                                                  l9044 0DE2  
                                                  l7550 1C78  
                                                  l7542 1C62  
                                                  l7534 1C44  
                                                  l7526 1C2C  
                                                  l7454 0E60  
                                                  l7382 1E42  
                                                  l7374 1E26  
                                                  l7390 1E52  
                                                  l7710 0984  
                                                  l7702 092A  
                                                  l8094 079E  
                                                  l8086 0786  
                                                  l8078 076E  
                                                  l8326 2174  
                                                  l8342 2196  
                                                  l8182 1B2C  
                                                  l8166 1B06  
                                                  l8158 1ACE  
                                                  l8246 13A6  
                                                  l9038 0DC2  
                                                  l7536 1C4C  
                                                  l7472 0EE4  
                                                  l7464 0EBE  
                                                  l7376 1E32  
                                                  l7560 2008  
                                                  l7800 0AF6  
                                                  l8168 1B10  
                                                  l8512 1A9A  
                                                  l7538 1C50  
                                                  l7546 1C6C  
                                                  l7490 0F68  
                                                  l7482 0F42  
                                                  l7562 2010  
                                                  l7810 0B80  
                                                  l7802 0AFC  
                                                  l7730 09F0  
                                                  l7714 0988  
                                                  l8098 07A4  
                                                  l8338 218E  
                                                  l8282 1604  
                                                  l8514 1AA0  
                                                  l7468 0EDC  
                                                  l7572 202E  
                                                  l7564 2014  
                                                  l7580 2090  
                                                  l7804 0B3E  
                                                  l7812 0B8A  
                                                  l7820 0BB4  
                                                  l8364 232C  
                                                  l8284 160E  
                                                  l8356 2584  
                                                  l7670 179E  
                                                  l7486 0F60  
                                                  l7478 0F38  
                                                  l7494 0F94  
                                                  l7582 2098  
                                                  l7750 0A20  
                                                  l7726 09DC  
                                                  l7910 03B2  
                                                  l7902 036E  
                                                  l7830 00F0  
                                                  l8366 2330  
                                                  l8630 11D6  
                                                  l8622 11C2  
                                                  l7584 209C  
                                                  l7816 0B96  
                                                  l7744 0A1C  
                                                  l7736 09F4  
                                                  l7760 0A48  
                                                  l7832 0106  
                                                  l8632 11DA  
                                                  l8640 11F8  
                                                  l7674 17B4  
                                                  l7666 176A  
                                                  l7762 0A52  
                                                  l7818 0B9C  
                                                  l7922 0452  
                                                  l7906 0390  
                                                  l7930 0478  
                                                  l7834 010E  
                                                  l8802 19F0  
                                                  l8570 2310  
                                                  l8650 121C  
                                                  l7588 20AE  
                                                  l7692 08FC  
                                                  l7932 04A8  
                                                  l7916 03D4  
                                                  l7860 01F4  
                                                  l7828 00D6  
                                                  l8644 1208  
                                                  l8708 1908  
                                                  _ADON 007E10  
                                                  l7686 08E0  
                                                  l7942 0552  
                                                  l7934 04AE  
                                                  l7918 0422  
                                                  l7870 0234  
                                                  l7854 01C4  
                                                  l7846 017E  
                                                  l7838 014E  
                                                  l8638 11F0  
                                                  l8742 1958  
                                                  l8910 0BC8  
                                                  l7768 0A68  
                                                  l7696 0902  
                                                  l7944 0558  
                                                  l7872 0254  
                                                  l7864 020C  
                                                  l8808 1A02  
                                                  l8664 1248  
                                                  l8672 1264  
                                                  l8736 1946  
                                                  l8680 256A  
                                                  l7794 0AE0  
                                                  l7778 0AA8  
                                                  l7786 0AC2  
                                                  l7962 05F2  
                                                  l7954 05AC  
                                                  l7946 055E  
                                                  l7938 04C6  
                                                  l7858 01E8  
                                                  l8658 1236  
                                                  l8930 0C0A  
                                                  l8826 1536  
                                                  l7788 0AC8  
                                                  l7956 05D4  
                                                  l7892 0330  
                                                  l7884 02CC  
                                                  l7876 0274  
                                                  l7868 022C  
                                                  l8668 1256  
                                                  l8596 1186  
                                                  l8684 2570  
                                                  l8908 0BBE  
                                                  l7974 060A  
                                                  l7966 05F8  
                                                  l7894 0350  
                                                  l7886 02EC  
                                                  l7878 02A6  
                                                  l8774 19B2  
                                                  l8934 0C16  
                                                  l8926 0BF8  
                                                  l7888 030C  
                                                  l7978 0610  
                                                  l7898 035E  
                                                  l8954 0C60  
                                                  l8946 0C42  
                                                  l7988 0622  
                                                  l8972 0CAE  
                                                  l8956 0C70  
                                                  l7998 066A  
                                                  STR_1 3FB9  
                                                  l8992 0CF8  
                                                  l8984 0CDA  
                                                  l8968 0C9C  
                                                  STR_2 3EB7  
                                                  STR_3 3FEC  
                                                  l8994 0D08  
                                                  STR_4 3F9B  
                                                  STR_5 3FF9  
                                                  STR_6 3FB9  
                                                  STR_7 3F6A  
                                                  STR_8 3FBC  
                                                  STR_9 3FB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0FAA  
                                      ??i2_Coupe_Moteur 0001  
                                                  _IOFS 007E9A  
                                                  u6050 01BE  
                                                  _PEIE 007F96  
                                                  u6401 16B6  
                                                  u6421 16D6  
                                                  u6501 15FA  
                                                  u5630 0F32  
                                                  u5550 0E28  
                                                  u7207 1856  
                                                  u6520 162C  
                                                  u7217 1868  
                                                  _PR5H 000F91  
                                                  u7227 187A  
                                                  u6275 07CC  
                                                  u6451 1396  
                                                  u6276 07CE  
                                                  u7237 188C  
                                                  u6525 1624  
                                                  u5590 0EAE  
                                                  _PR5L 000F90  
                                                  u7247 189E  
                                                  u6471 13B6  
                                                  u7257 18B0  
                                                  u7177 1820  
                                                  u7267 18C2  
                                                  u7187 1832  
                                                  u7197 1844  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 2732  
                                    _Detection_Pion_Off 26E2  
                                         _nb_s_bequille 00A2  
                                       _Option_Multitas 027E  
                                                  _Etat 00AA  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 20C2  
                               IRQ_Execution@IRQ_Indice 0012  
                                          ___ftpack@arg 000F  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 1386  
                                 __end_of_IRQ_Execution 1F0E  
                                          ___ftpack@exp 0012  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 004E  
                           __end_of_EUSART1_RX_T3_LOCAL 08D8  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00CE  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                          ___ftmul@sign 0025  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A7  
                                       __end_of_Init_IT 2166  
                                          ___fttol@exp1 00F2  
                                          ___fttol@lval 00EE  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 0008  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 004A  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 2610  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 25EC  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0012  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 25FE  
            _Surveillance_Consommation_Moteur_1_Activer 25DA  
                                    __size_ofi1_IRQ_PWM 0004  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 25FE  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 25DA  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0012  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 25EC  
            _Surveillance_Consommation_Moteur_2_Activer 25C8  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0287  
                                       __end_of___lbdiv 219A  
                                                 STR_10 3F16  
                                                 STR_11 3FDB  
                                       __end_of___awmod 1C82  
                                        _Bequille_I_Max 0092  
                                       __end_of___ftdiv 1760  
                                      _LOW_PRIORITY_IRQ 0018  
                                       __end_of___ftmul 145C  
                                       __end_of___fttol 16A6  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 001E  
                                       __end_of___lwdiv 2042  
                                         _Init_Moteur_1 2620  
                                         _Init_Moteur_2 2610  
                                       __end_of___lwmod 20C2  
                                                 i1l602 1C08  
                                                 i1l523 26A6  
                                                 i1l622 1032  
                                                 i1l614 0FAC  
                                                 i1l616 0FE0  
                                                 i1l562 1F86  
                                                 i1l650 0080  
                                                 i1l642 0042  
                                                 i1l651 0074  
                                                 i1l580 1E84  
                                                 i1l644 004C  
                                                 i1l629 10B6  
                                                 i1l661 00AE  
                                                 i1l558 1F62  
                                                 i1l654 008C  
                                                 i1l646 0058  
                                                 i1l656 0098  
                                                 i1l648 0064  
                                                 i1l658 00A4  
                                                 i2l700 2062  
                                                 i2l702 206E  
                                                 i1l599 1BC8  
                                                 i2l705 2078  
                                                 i2l691 253C  
                                                 i2l698 2056  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                    __size_of_TIMER5_On 0004  
                                         _Init_Variable 152E  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 2578  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 2342  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0BBE  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 22A8  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3EAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 244E  
                                       __end_of_isdigit 24C2  
                                         ___ftpack@sign 0013  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0287  
                                                 status 000FD8  
                                     _Mouvement_Startup 004D  
                                       __end_of_sprintf 0BBE  
                          __end_of_EUSART1_Check_Buffer 2258  
                                       ___lbdiv@divisor 000F  
                                          ?i1_TIMER5_On 0001  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 008C  
                          __size_of_Check_List_Moteur_2 0026  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 26FA  
                                       __initialization 1FAE  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 0281  
                                  EUSART1_RX_T3_LOCAL@B 0282  
                                  EUSART1_RX_T3_LOCAL@C 0283  
                                  EUSART1_RX_T3_LOCAL@D 0284  
                                  EUSART1_RX_T3_LOCAL@E 0285  
                                  EUSART1_RX_T3_LOCAL@F 0286  
                                      __end_of_Etat_Get 2200  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1F5E  
                                          __end_of_main 20FA  
                                   __end_of_Init_TIMER0 23F2  
                                   __end_of_Init_TIMER2 24DC  
                                   __end_of_Init_TIMER5 2280  
                                      __end_of_Init_ADC 2412  
                            ??_IRQ_PION_CHANGEMENT_ETAT 0006  
                                      __end_of_Init_SPI 238C  
                                      __end_of_Init_PWM 24A6  
                                 __end_of_delay_n_100ms 2578  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0289  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                         ___fttol@sign1 00ED  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                          _Consigne_Max_Moteur_Bequille 0094  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 2132  
                            _Check_List_Moteur_Bequille 20FA  
                           __end_of_EUSART1_Buffer_Send 181A  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                      __end_of___ftpack 1B3A  
                                      __end_of___lbtoft 23B0  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1321 22CC  
                                                i1l1641 12AA  
                                     __end_of_IRQ_CAPOT 26F2  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6820 14B4  
                                                i1l6740 1F96  
                                                i1l6724 1F6E  
                                                i1l6830 14EE  
                                                i1l6814 146A  
                                                i1l6726 1F76  
                                                i1l6902 1BE0  
                                                i1l6824 14D2  
                                                i1l6826 14DA  
                                                i1l6842 1510  
                                                i1l6738 1F90  
                                                i1l6754 1FA2  
                                                i1l6914 1C00  
                                                i1l6836 150C  
                                                i1l6772 12F8  
                                                i1l6860 1E7E  
                                                i1l6782 1332  
                                                i1l6790 1352  
                                                i1l6766 12AE  
                                                i1l6758 1280  
                                                i1l6934 0FFE  
                                                i1l6862 1E8A  
                                                i1l6918 1C10  
                                                i1l6776 1316  
                                                i1l6952 1082  
                                                i1l6944 105A  
                                                i1l6928 0FD4  
                                                i1l6856 1E74  
                                                i1l6786 134E  
                                                i1l6778 131E  
                                                i1l6794 136A  
                                                i1l6970 1106  
                                                i1l6962 10DE  
                                                i1l6938 1006  
                                                i2l4724 253E  
                                                i1l6956 108A  
                                                i1l6948 1064  
                                                i1l6868 1E9A  
                                                i1l6876 1EAA  
                                                i1l6974 110E  
                                                i1l6966 10E8  
                                                i1l6894 1BCC  
                                                i1l6888 1BBC  
                                                i1l6978 113A  
                                     __end_ofi1_IRQ_ADC 1150  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 273A  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 001A  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 028A  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A5  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A9  
                                      __end_of_delay_1s 22A8  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 250C  
                                 _Consigne_Max_Moteur_X 0096  
                                 _Consigne_Max_Moteur_Z 0095  
                                     __end_of_TIMER2_On 2708  
                                     __end_of_TIMER5_On 2736  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 197A  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 269C  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0289  
                                                ___wmul 2342  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 26C2  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 26B6  
                                             ??___ftdiv 002F  
                                             ??___ftmul 0021  
                                             ??___fttol 003C  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0287  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1FB4  
                                                clear_1 1FC2  
                                                clear_2 1FD4  
                                                clear_3 1FE4  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 25A0  
                                 ___ftmul@f3_as_product 0026  
                                           _Etat_Update 2430  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3EA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00ED  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 268E  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000E  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 2680  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 2660  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 2084  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 1FEA  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 23D2  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 23D2  
                                           _Init_TIMER2 24C2  
                                           _Init_TIMER5 2258  
                                         ___rparam_used 000001  
                                            ___ftdiv@f1 0029  
                                            ___ftdiv@f2 002C  
                                            ___ftdiv@f3 0033  
                                         ?i2_IRQ_TIMER2 0001  
                                            ___lbtoft@c 001A  
                                            ___ftmul@f1 001B  
                                            ___ftmul@f2 001E  
                                     _Capteur_Capot_Off 272A  
                                         __end_of_Cycle 0E04  
                                            ___fttol@f1 0038  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 0280  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 2412  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 1CE8  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 246C  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 222C  
                                __size_ofi1_IRQ_TIMER_0 0058  
                                __size_ofi1_IRQ_TIMER_5 0070  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 152E  
                                   __end_of_Mouvement_X 1278  
                                   __end_of_Mouvement_Z 197A  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F7  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0093  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 268E  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00CE  
                             __end_of_Capteur_Capot_Off 272E  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_ofi1_TIMER5_On 0004  
                                  __size_of_IRQ_TIMER_0 0058  
                                  __size_of_IRQ_TIMER_5 0070  
                               __size_ofi1_Coupe_Moteur 0014  
                                  __size_ofi2_IRQ_CAPOT 0008  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0048  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                             ?___ftpack 000F  
                                             ?___lbtoft 0017  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                                 __end_ofi2_Etat_Update 248A  
                                   _Check_List_Moteur_1 1A24  
                                   _Check_List_Moteur_2 22D0  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0E04  
                                               _P4_busy 00AC  
                                               _IRQ_PWM 272E  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 270E  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 009C  
                                               _SPI_ISR 1278  
                              Mouvement_X@type_consigne 00FE  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 207C  
                                 __end_ofi1_Buzzer_Etat 26AA  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1DB0  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A3  
                                     delay_s@delay_time 00FE  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 26CE  
                                    __end_of_TIMER2_Off 2714  
                                    __end_of_TIMER5_Off 26D8  
                                      _consigne_pwm_max 008D  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 2132  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1E62  
                                         i1_IRQ_TIMER_5 1BAA  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00AB  
                                               ___lbdiv 2166  
                                               ___awmod 1C1A  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                               ___ftdiv 16A6  
                                 __size_of_Coupe_Moteur 0014  
                                       __size_of___wmul 0026  
                                               ___ftmul 1386  
                          __size_of_EUSART1_RX_T3_LOCAL 0806  
                                               ___fttol 15EA  
                                 __end_of_Etat_Intitule 21CE  
                                               ___lwdiv 1FF8  
                                               ___lwmod 2084  
                                         _type_consigne 0091  
                                               __pcinit 1FAE  
                                            ??___ftpack 0014  
                                            ??___lbtoft 001A  
                                               _delay_s 231C  
                                               __ramtop 0300  
                                               __ptext0 20C2  
                                               _nb_Pion 00A1  
                                               __ptext1 152E  
                                               __ptext2 2258  
                                               __ptext3 24C2  
                                               __ptext4 23D2  
                                               __ptext5 2368  
                                               __ptext6 1C82  
                          __end_of_Init_Moteur_Bequille 2650  
                                               __ptext7 248A  
                                               __ptext8 2132  
                                               __ptext9 23B0  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 26F2  
                                           _Mouvement_X 1150  
                                           _Mouvement_Z 18D0  
                                     __end_of_hexpowers 3EB7  
                                  _Init_Input_Capture_0 23B0  
                        _Capteur_Capot_Compteur_Temps_S 009E  
                                               _dpowers 3EA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 24F6  
                                               _isdigit 24A6  
                                   _EUSART1_IT_ACTIVATE 26AA  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1F0E  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0010  
                                          _Consigne_Max 0097  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08D8  
                                        __pintcode_body 2042  
                                  end_of_initialization 1FEA  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004C  
                                         __Lmediumconst 3EA4  
                             _Surveillance_Capteur_Pion 0089  
                                               int_func 2042  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 258C  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 26EA  
                                             i1_IRQ_ADC 0FAA  
                    _Surveillance_Consommation_Moteur_1 008B  
                    _Surveillance_Consommation_Moteur_2 008A  
                                             i1_IRQ_PWM 2736  
                               __size_ofi2_Coupe_Moteur 0014  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 24F6  
                                             _TIMER2_On 2702  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                             _TIMER5_On 2732  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 00A0  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A6  
                                  __end_ofi1_TIMER2_Off 271A  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 26E2  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 2720  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                     __size_of_IRQ_PION_CHANGEMENT_ETAT 0050  
                             ?_IRQ_PION_CHANGEMENT_ETAT 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0016  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 258C  
                                      _nb_100ms_platine 00A4  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 2726  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 00FF  
                                   __end_of_delay_100ms 18D0  
                                           ___ftdiv@exp 0036  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 00FF  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 22F6  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008E  
                                         _IRQ_Execution 1EBA  
                                             _Alarme_On 2650  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0288  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 25A0  
                                           ___ftmul@exp 0024  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                            ?_TIMER5_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 2368  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1FAE  
                                 __end_of_Stop_Moteur_1 272A  
                                             _Init_Port 1C82  
                              _IRQ_PION_Metal_Disparait 24DC  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                                       _delay_s_counter 008C  
                             __end_of_Detection_Pion_On 231C  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 2200  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 25B4  
                                  _Init_Moteur_Bequille 2640  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 0038  
                                         _delay_n_100ms 2564  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005A  
                                 __end_of_Init_Moteur_1 2630  
                                 __end_of_Init_Moteur_2 2620  
                                 __end_of_Init_Variable 15EA  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                     __size_of___ftpack 008A  
                                     __size_of___lbtoft 0024  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 009B  
                                _Image_Courant_Moteur_2 009A  
                                         __pcstackBANK0 00ED  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 2630  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 181A  
                                            ?_Init_Port 0001  
                                          _isdigit$3602 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00D2  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F6  
                                           sprintf@prec 00F3  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??i1_TIMER5_On 0005  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0003  
                                           ??_IRQ_CAPOT 0011  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 25B4  
                                             __pintcode 0008  
                                         __pmediumconst 3EA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0016  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                           ??_TIMER5_On 000F  
                                             __ptext100 2538  
                                             __ptext101 254E  
                                              ?___lbdiv 000F  
                                             __ptext102 26FA  
                                             __ptext103 2670  
                                             __ptext104 246C  
                                             __ptext105 25B4  
                                             __ptext106 2720  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 0280  
                                              ?___ftdiv 0029  
                                              ?___ftmul 001B  
                                              ?___fttol 0038  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008F  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A8  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 00FE  
                                          ?_Mouvement_Z 0287  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0246  
                                  __size_of_Etat_Update 001E  
                                             _hexpowers 3EAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 254E  
                                      i2_IRQ_I_MOTEUR_2 2538  
                                          i1_TIMER2_Off 2714  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 26D8  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 25C8  
                                              _PIE3bits 000FA3  
                                              i1u501_20 10D8  
                                __size_ofi2_Etat_Update 001E  
                                          i2_IRQ_TIMER2 271A  
                                              i1u493_20 0FCE  
                                              i1u497_20 1054  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 00FA  
                                   __end_ofi1_TIMER5_On 273E  
                                   __end_of_IRQ_TIMER_0 1E62  
                                   __end_of_IRQ_TIMER_5 1BAA  
                                   __end_ofi2_IRQ_CAPOT 2702  
                                              _SPI_MODE 0278  
                      __end_of_IRQ_PION_CHANGEMENT_ETAT 1FAE  
                                          i2_TIMER2_Off 2720  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 26EA  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 1760  
                                         i1_Etat_Update 244E  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0099  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1AB0  
                           __end_of_Check_List_Moteur_2 22F6  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 21CE  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 23F2  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 2368  
                                              _Init_PWM 248A  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009D  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1DB0  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 1D4E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 1D4E  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 1CE8  
                                   __end_ofi1_Alarme_On 2670  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 2680  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                                      __size_of___ftdiv 00BA  
                                      __size_of___ftmul 00D6  
                                      __size_of___fttol 00BC  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                                              ___ftpack 1AB0  
                                              ___lbtoft 238C  
                            ??_IRQ_PION_Metal_Disparait 0010  
                                      __size_of_delay_s 0026  
                              __end_of_SPI_Check_Buffer 222C  
                                    __end_of_u_Init_PWM 1E0A  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F1  
                                            sprintf@val 00F4  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 246C  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 2280  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 23F2  
                                              __ptext11 1F0E  
                                              __ptext20 2726  
                                              __ptext12 26AA  
                                              __ptext21 2620  
                                              __ptext13 0BBE  
                                              __ptext30 1AB0  
                                              __ptext22 1D4E  
                                              __ptext14 2564  
                                              __ptext31 2630  
                                              __ptext23 22F6  
                                              __ptext15 18D0  
                                              __ptext40 24F6  
                                              __ptext32 272A  
                                              __ptext24 2578  
                                              __ptext16 2610  
                                              __ptext41 1CE8  
                                              __ptext33 197A  
                                              __ptext25 1A24  
                                              __ptext17 22D0  
                                              __ptext50 2342  
                                              __ptext42 26E2  
                                              __ptext34 1DB0  
                                              __ptext26 238C  
                                              __ptext18 1150  
                                              __ptext51 2084  
                                              __ptext43 20FA  
                                              __ptext35 231C  
                                              __ptext27 15EA  
                                              __ptext19 26B6  
                                              __ptext60 2708  
                                              __ptext52 1FF8  
                                              __ptext44 2166  
                                              __ptext36 26C2  
                                              __ptext28 1386  
                                              __ptext61 272E  
                                              __ptext53 2280  
                                              __ptext45 2200  
                                              __ptext37 2702  
                                              __ptext29 16A6  
                                              __ptext70 2650  
                                              __ptext62 24DC  
                                              __ptext54 181A  
                                              __ptext46 222C  
                                              __ptext38 2680  
                                              __ptext71 2430  
                                              __ptext63 26CE  
                                              __ptext55 1EBA  
                                              __ptext47 00D2  
                                              __ptext39 2640  
                                              __ptext80 1BAA  
                                              __ptext72 258C  
                                              __ptext64 2412  
                                              __ptext56 1B3A  
                                              __ptext48 08D8  
                                              __ptext81 2660  
                                              __ptext73 270E  
                                              __ptext65 2732  
                                              __ptext57 1E0A  
                                              __ptext49 24A6  
                                              __ptext90 1278  
                                              __ptext82 244E  
                                              __ptext74 0E04  
                                              __ptext66 268E  
                                              __ptext58 25C8  
                                              __ptext91 1F5E  
                                              __ptext83 25A0  
                                              __ptext75 219A  
                                              __ptext67 250C  
                                              __ptext59 25DA  
                                              __ptext92 273A  
                                              __ptext84 2714  
                                              __ptext76 21CE  
                                              __ptext68 2522  
                                              __ptext93 26D8  
                                              __ptext85 1E62  
                                              __ptext77 1C1A  
                                              __ptext69 26EA  
                                              __ptext94 269C  
                                              __ptext86 25EC  
                                              __ptext78 1760  
                                              __ptext95 22A8  
                                              __ptext87 25FE  
                                              __ptext96 145C  
                                              __ptext88 2736  
                                              __ptext97 26F2  
                                              __ptext89 0FAA  
                                              __ptext99 271A  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 26B6  
                                          _UART_TX_TEXT 00AD  
                                      __size_of_sprintf 02E6  
                                              _consigne 0098  
                                         i1_Buzzer_Etat 269C  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 0038  
                                           i1_TIMER5_On 273A  
                                           _IRQ_TIMER_0 1E0A  
                                           _IRQ_TIMER_5 1B3A  
                          __size_of_Detection_Pion_Init 0014  
                                           i2_IRQ_CAPOT 26FA  
                              __end_of_Capteur_Capot_On 2640  
                                        _IRQ_I_MOTEUR_1 2522  
                                        _IRQ_I_MOTEUR_2 250C  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 0049  
                                         _Etat_Intitule 219A  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 145C  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00B6  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                              _IRQ_PION_CHANGEMENT_ETAT 1F5E  
                                  __size_of_Mouvement_X 0128  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 1A24  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 0090  
                                           i1_Alarme_On 2660  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F2  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 2430  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0287  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1EBA  
                                 __end_ofi1_IRQ_TIMER_5 1C1A  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 2670  
                          __end_of_EUSART1_Transmit_ISR 22D0  
                                __end_of_IRQ_I_MOTEUR_1 2538  
                                __end_of_IRQ_I_MOTEUR_2 2522  
                                            _IRQ_TIMER2 2708  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 004B  
                              __end_ofi2_IRQ_I_MOTEUR_1 2564  
                              __end_ofi2_IRQ_I_MOTEUR_2 254E  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 26C2  
                                            _TIMER2_Off 270E  
                                            _TIMER5_Off 26CE  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F9  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 00FE  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
