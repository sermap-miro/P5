

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Apr 30 09:34:31 2019

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=2
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=2
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=2
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	text81,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	text85,global,reloc=2,class=CODE,delta=1
   101                           	psect	text86,global,reloc=2,class=CODE,delta=1
   102                           	psect	text87,global,reloc=2,class=CODE,delta=1
   103                           	psect	text88,global,reloc=2,class=CODE,delta=1
   104                           	psect	text89,global,reloc=2,class=CODE,delta=1
   105                           	psect	text90,global,reloc=2,class=CODE,delta=1
   106                           	psect	text91,global,reloc=2,class=CODE,delta=1
   107                           	psect	text92,global,reloc=2,class=CODE,delta=1
   108                           	psect	text93,global,reloc=2,class=CODE,delta=1
   109                           	psect	text94,global,reloc=2,class=CODE,delta=1
   110                           	psect	text95,global,reloc=2,class=CODE,delta=1
   111                           	psect	text96,global,reloc=2,class=CODE,delta=1
   112                           	psect	text97,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	text105,global,reloc=2,class=CODE,delta=1
   122                           	psect	text106,global,reloc=2,class=CODE,delta=1
   123                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   124                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   125                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   126  0000                     
   127                           ; Version 1.42
   128                           ; Generated 13/04/2017 GMT
   129                           ; 
   130                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F4431 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     
   162                           	psect	mediumconst
   163  003EA4                     __pmediumconst:
   164                           	opt stack 0
   165  003EA4  00                 	db	0
   166  003EA5                     _dpowers:
   167                           	opt stack 0
   168  003EA5  0001               	dw	1
   169  003EA7  000A               	dw	10
   170  003EA9  0064               	dw	100
   171  003EAB  03E8               	dw	1000
   172  003EAD  2710               	dw	10000
   173  003EAF                     __end_of_dpowers:
   174                           	opt stack 0
   175  003EAF                     _hexpowers:
   176                           	opt stack 0
   177  003EAF  0001               	dw	1
   178  003EB1  0010               	dw	16
   179  003EB3  0100               	dw	256
   180  003EB5  1000               	dw	4096
   181  003EB7                     __end_of_hexpowers:
   182                           	opt stack 0
   183  0000                     _SSPCONbits	set	4038
   184  0000                     _SSPSTATbits	set	4039
   185  0000                     _RCREG1	set	4014
   186  0000                     _SSPBUF	set	4041
   187  0000                     _TXREG1	set	4013
   188  0000                     _TXSTA1	set	4012
   189  0000                     _RCSTA1	set	4011
   190  0000                     _BAUDCON	set	4010
   191  0000                     _RCSTA1bits	set	4011
   192  0000                     _SPBRGH	set	4016
   193  0000                     _SPBRG	set	4015
   194  0000                     _TXSTA1bits	set	4012
   195  0000                     _BAUDCONbits	set	4010
   196  0000                     _PR5L	set	3984
   197  0000                     _PR5H	set	3985
   198  0000                     _TMR5H	set	3976
   199  0000                     _TMR5L	set	3975
   200  0000                     _T5CONbits	set	4023
   201  0000                     _PR2	set	4043
   202  0000                     _T2CONbits	set	4042
   203  0000                     _T2CON	set	4042
   204  0000                     _TMR0L	set	4054
   205  0000                     _TMR0H	set	4055
   206  0000                     _T0CONbits	set	4053
   207  0000                     _LATEbits	set	3981
   208  0000                     _SEVTCMPL	set	3953
   209  0000                     _SEVTCMPH	set	3952
   210  0000                     _PWMCON0bits	set	3951
   211  0000                     _PTCON0bits	set	3967
   212  0000                     _PTCON1bits	set	3966
   213  0000                     _OVDCONS	set	3946
   214  0000                     _OVDCOND	set	3947
   215  0000                     _DTCON	set	3949
   216  0000                     _PWMCON1	set	3950
   217  0000                     _PWMCON0	set	3951
   218  0000                     _PTCON1	set	3966
   219  0000                     _PTCON0	set	3967
   220  0000                     _PTPERH	set	3962
   221  0000                     _LATE	set	3981
   222  0000                     _LATD	set	3980
   223  0000                     _LATC	set	3979
   224  0000                     _LATB	set	3978
   225  0000                     _LATA	set	3977
   226  0000                     _TRISEbits	set	3990
   227  0000                     _TRISE	set	3990
   228  0000                     _TRISDbits	set	3989
   229  0000                     _TRISD	set	3989
   230  0000                     _TRISCbits	set	3988
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISBbits	set	3987
   233  0000                     _TRISB	set	3987
   234  0000                     _TRISAbits	set	3986
   235  0000                     _TRISA	set	3986
   236  0000                     _TMR2	set	4044
   237  0000                     _LATCbits	set	3979
   238  0000                     _RCREG	set	4014
   239  0000                     _PIR1bits	set	3998
   240  0000                     _PDC1H	set	3958
   241  0000                     _PDC1L	set	3959
   242  0000                     _PDC0H	set	3960
   243  0000                     _PDC0L	set	3961
   244  0000                     _PTPERL	set	3963
   245  0000                     _PORTAbits	set	3968
   246  0000                     _PORTCbits	set	3970
   247  0000                     _CAP2CONbits	set	3938
   248  0000                     _PIR3bits	set	4004
   249  0000                     _IPR3bits	set	4005
   250  0000                     _PIE3bits	set	4003
   251  0000                     _CAP1CONbits	set	3939
   252  0000                     _RCONbits	set	4048
   253  0000                     _INTCON3bits	set	4080
   254  0000                     _INTCON2bits	set	4081
   255  0000                     _INTCONbits	set	4082
   256  0000                     _LATAbits	set	3977
   257  0000                     _ADRESH	set	4036
   258  0000                     _IPR1bits	set	3999
   259  0000                     _PIE1bits	set	3997
   260  0000                     _ADCON3bits	set	3994
   261  0000                     _ADCON1bits	set	4033
   262  0000                     _ADCON0bits	set	4034
   263  0000                     _ANSEL1	set	4025
   264  0000                     _ANSEL0	set	4024
   265  0000                     _ADCHS	set	3993
   266  0000                     _ADCON3	set	3994
   267  0000                     _ADCON2bits	set	4032
   268  0000                     _ADCON2	set	4032
   269  0000                     _ADCON1	set	4033
   270  0000                     _ADCON0	set	4034
   271  0000                     _OSCCON	set	4051
   272  0000                     _PORTBbits	set	3969
   273  0000                     _TRMT1	set	32097
   274  0000                     _LATC5	set	31837
   275  0000                     _GIE	set	32663
   276  0000                     _PEIE	set	32662
   277  0000                     _TMR2IF	set	31985
   278  0000                     _LATD7	set	31847
   279  0000                     _LATD6	set	31846
   280  0000                     _LATD5	set	31845
   281  0000                     _LATD4	set	31844
   282  0000                     _SEVTDIR	set	31603
   283  0000                     _INT0IF	set	32657
   284  0000                     _PTIF	set	32036
   285  0000                     _GODONE	set	32273
   286  0000                     _ADIF	set	31990
   287  0000                     _ADON	set	32272
   288  0000                     _IOFS	set	32410
   289  003EB7                     STR_2:
   290  003EB7  63                 	db	99	;'c'
   291  003EB8  6F                 	db	111	;'o'
   292  003EB9  6E                 	db	110	;'n'
   293  003EBA  73                 	db	115	;'s'
   294  003EBB  69                 	db	105	;'i'
   295  003EBC  67                 	db	103	;'g'
   296  003EBD  6E                 	db	110	;'n'
   297  003EBE  65                 	db	101	;'e'
   298  003EBF  3D                 	db	61	;'='
   299  003EC0  25                 	db	37
   300  003EC1  64                 	db	100	;'d'
   301  003EC2  20                 	db	32
   302  003EC3  69                 	db	105	;'i'
   303  003EC4  5F                 	db	95	;'_'
   304  003EC5  31                 	db	49	;'1'
   305  003EC6  3D                 	db	61	;'='
   306  003EC7  25                 	db	37
   307  003EC8  64                 	db	100	;'d'
   308  003EC9  20                 	db	32
   309  003ECA  69                 	db	105	;'i'
   310  003ECB  5F                 	db	95	;'_'
   311  003ECC  32                 	db	50	;'2'
   312  003ECD  3D                 	db	61	;'='
   313  003ECE  25                 	db	37
   314  003ECF  64                 	db	100	;'d'
   315  003ED0  20                 	db	32
   316  003ED1  64                 	db	100	;'d'
   317  003ED2  75                 	db	117	;'u'
   318  003ED3  74                 	db	116	;'t'
   319  003ED4  79                 	db	121	;'y'
   320  003ED5  3D                 	db	61	;'='
   321  003ED6  25                 	db	37
   322  003ED7  64                 	db	100	;'d'
   323  003ED8  20                 	db	32
   324  003ED9  65                 	db	101	;'e'
   325  003EDA  72                 	db	114	;'r'
   326  003EDB  72                 	db	114	;'r'
   327  003EDC  65                 	db	101	;'e'
   328  003EDD  75                 	db	117	;'u'
   329  003EDE  72                 	db	114	;'r'
   330  003EDF  3D                 	db	61	;'='
   331  003EE0  25                 	db	37
   332  003EE1  64                 	db	100	;'d'
   333  003EE2  20                 	db	32
   334  003EE3  50                 	db	80	;'P'
   335  003EE4  61                 	db	97	;'a'
   336  003EE5  74                 	db	116	;'t'
   337  003EE6  69                 	db	105	;'i'
   338  003EE7  6E                 	db	110	;'n'
   339  003EE8  61                 	db	97	;'a'
   340  003EE9  67                 	db	103	;'g'
   341  003EEA  65                 	db	101	;'e'
   342  003EEB  5F                 	db	95	;'_'
   343  003EEC  4E                 	db	78	;'N'
   344  003EED  62                 	db	98	;'b'
   345  003EEE  5F                 	db	95	;'_'
   346  003EEF  45                 	db	69	;'E'
   347  003EF0  73                 	db	115	;'s'
   348  003EF1  73                 	db	115	;'s'
   349  003EF2  61                 	db	97	;'a'
   350  003EF3  69                 	db	105	;'i'
   351  003EF4  3D                 	db	61	;'='
   352  003EF5  25                 	db	37
   353  003EF6  64                 	db	100	;'d'
   354  003EF7  20                 	db	32
   355  003EF8  43                 	db	67	;'C'
   356  003EF9  61                 	db	97	;'a'
   357  003EFA  70                 	db	112	;'p'
   358  003EFB  74                 	db	116	;'t'
   359  003EFC  65                 	db	101	;'e'
   360  003EFD  75                 	db	117	;'u'
   361  003EFE  72                 	db	114	;'r'
   362  003EFF  5F                 	db	95	;'_'
   363  003F00  43                 	db	67	;'C'
   364  003F01  61                 	db	97	;'a'
   365  003F02  70                 	db	112	;'p'
   366  003F03  6F                 	db	111	;'o'
   367  003F04  74                 	db	116	;'t'
   368  003F05  5F                 	db	95	;'_'
   369  003F06  4E                 	db	78	;'N'
   370  003F07  62                 	db	98	;'b'
   371  003F08  5F                 	db	95	;'_'
   372  003F09  45                 	db	69	;'E'
   373  003F0A  76                 	db	118	;'v'
   374  003F0B  65                 	db	101	;'e'
   375  003F0C  6E                 	db	110	;'n'
   376  003F0D  65                 	db	101	;'e'
   377  003F0E  6D                 	db	109	;'m'
   378  003F0F  65                 	db	101	;'e'
   379  003F10  6E                 	db	110	;'n'
   380  003F11  74                 	db	116	;'t'
   381  003F12  3D                 	db	61	;'='
   382  003F13  25                 	db	37
   383  003F14  64                 	db	100	;'d'
   384  003F15  00                 	db	0
   385  003F16                     STR_10:
   386  003F16  25                 	db	37
   387  003F17  30                 	db	48	;'0'
   388  003F18  32                 	db	50	;'2'
   389  003F19  58                 	db	88	;'X'
   390  003F1A  20                 	db	32
   391  003F1B  25                 	db	37
   392  003F1C  30                 	db	48	;'0'
   393  003F1D  32                 	db	50	;'2'
   394  003F1E  58                 	db	88	;'X'
   395  003F1F  20                 	db	32
   396  003F20  25                 	db	37
   397  003F21  30                 	db	48	;'0'
   398  003F22  32                 	db	50	;'2'
   399  003F23  58                 	db	88	;'X'
   400  003F24  20                 	db	32
   401  003F25  25                 	db	37
   402  003F26  30                 	db	48	;'0'
   403  003F27  32                 	db	50	;'2'
   404  003F28  58                 	db	88	;'X'
   405  003F29  20                 	db	32
   406  003F2A  25                 	db	37
   407  003F2B  30                 	db	48	;'0'
   408  003F2C  32                 	db	50	;'2'
   409  003F2D  58                 	db	88	;'X'
   410  003F2E  20                 	db	32
   411  003F2F  25                 	db	37
   412  003F30  30                 	db	48	;'0'
   413  003F31  32                 	db	50	;'2'
   414  003F32  58                 	db	88	;'X'
   415  003F33  20                 	db	32
   416  003F34  25                 	db	37
   417  003F35  30                 	db	48	;'0'
   418  003F36  32                 	db	50	;'2'
   419  003F37  58                 	db	88	;'X'
   420  003F38  20                 	db	32
   421  003F39  25                 	db	37
   422  003F3A  30                 	db	48	;'0'
   423  003F3B  32                 	db	50	;'2'
   424  003F3C  58                 	db	88	;'X'
   425  003F3D  20                 	db	32
   426  003F3E  25                 	db	37
   427  003F3F  30                 	db	48	;'0'
   428  003F40  32                 	db	50	;'2'
   429  003F41  58                 	db	88	;'X'
   430  003F42  20                 	db	32
   431  003F43  25                 	db	37
   432  003F44  30                 	db	48	;'0'
   433  003F45  32                 	db	50	;'2'
   434  003F46  58                 	db	88	;'X'
   435  003F47  20                 	db	32
   436  003F48  25                 	db	37
   437  003F49  30                 	db	48	;'0'
   438  003F4A  32                 	db	50	;'2'
   439  003F4B  58                 	db	88	;'X'
   440  003F4C  20                 	db	32
   441  003F4D  25                 	db	37
   442  003F4E  30                 	db	48	;'0'
   443  003F4F  31                 	db	49	;'1'
   444  003F50  58                 	db	88	;'X'
   445  003F51  20                 	db	32
   446  003F52  25                 	db	37
   447  003F53  30                 	db	48	;'0'
   448  003F54  31                 	db	49	;'1'
   449  003F55  58                 	db	88	;'X'
   450  003F56  20                 	db	32
   451  003F57  25                 	db	37
   452  003F58  30                 	db	48	;'0'
   453  003F59  31                 	db	49	;'1'
   454  003F5A  58                 	db	88	;'X'
   455  003F5B  20                 	db	32
   456  003F5C  25                 	db	37
   457  003F5D  30                 	db	48	;'0'
   458  003F5E  32                 	db	50	;'2'
   459  003F5F  58                 	db	88	;'X'
   460  003F60  25                 	db	37
   461  003F61  30                 	db	48	;'0'
   462  003F62  32                 	db	50	;'2'
   463  003F63  58                 	db	88	;'X'
   464  003F64  20                 	db	32
   465  003F65  25                 	db	37
   466  003F66  30                 	db	48	;'0'
   467  003F67  32                 	db	50	;'2'
   468  003F68  58                 	db	88	;'X'
   469  003F69  00                 	db	0
   470  003F6A                     STR_7:
   471  003F6A  63                 	db	99	;'c'
   472  003F6B  6F                 	db	111	;'o'
   473  003F6C  6E                 	db	110	;'n'
   474  003F6D  73                 	db	115	;'s'
   475  003F6E  69                 	db	105	;'i'
   476  003F6F  67                 	db	103	;'g'
   477  003F70  6E                 	db	110	;'n'
   478  003F71  65                 	db	101	;'e'
   479  003F72  3D                 	db	61	;'='
   480  003F73  25                 	db	37
   481  003F74  64                 	db	100	;'d'
   482  003F75  20                 	db	32
   483  003F76  70                 	db	112	;'p'
   484  003F77  61                 	db	97	;'a'
   485  003F78  74                 	db	116	;'t'
   486  003F79  69                 	db	105	;'i'
   487  003F7A  6E                 	db	110	;'n'
   488  003F7B  3D                 	db	61	;'='
   489  003F7C  25                 	db	37
   490  003F7D  64                 	db	100	;'d'
   491  003F7E  20                 	db	32
   492  003F7F  70                 	db	112	;'p'
   493  003F80  69                 	db	105	;'i'
   494  003F81  6F                 	db	111	;'o'
   495  003F82  6E                 	db	110	;'n'
   496  003F83  3D                 	db	61	;'='
   497  003F84  25                 	db	37
   498  003F85  64                 	db	100	;'d'
   499  003F86  20                 	db	32
   500  003F87  70                 	db	112	;'p'
   501  003F88  6C                 	db	108	;'l'
   502  003F89  61                 	db	97	;'a'
   503  003F8A  74                 	db	116	;'t'
   504  003F8B  69                 	db	105	;'i'
   505  003F8C  6E                 	db	110	;'n'
   506  003F8D  65                 	db	101	;'e'
   507  003F8E  3D                 	db	61	;'='
   508  003F8F  25                 	db	37
   509  003F90  64                 	db	100	;'d'
   510  003F91  20                 	db	32
   511  003F92  70                 	db	112	;'p'
   512  003F93  65                 	db	101	;'e'
   513  003F94  6C                 	db	108	;'l'
   514  003F95  6C                 	db	108	;'l'
   515  003F96  65                 	db	101	;'e'
   516  003F97  3D                 	db	61	;'='
   517  003F98  25                 	db	37
   518  003F99  64                 	db	100	;'d'
   519  003F9A  00                 	db	0
   520  003F9B                     STR_4:
   521  003F9B  6E                 	db	110	;'n'
   522  003F9C  62                 	db	98	;'b'
   523  003F9D  5F                 	db	95	;'_'
   524  003F9E  73                 	db	115	;'s'
   525  003F9F  3D                 	db	61	;'='
   526  003FA0  25                 	db	37
   527  003FA1  64                 	db	100	;'d'
   528  003FA2  20                 	db	32
   529  003FA3  6E                 	db	110	;'n'
   530  003FA4  62                 	db	98	;'b'
   531  003FA5  5F                 	db	95	;'_'
   532  003FA6  50                 	db	80	;'P'
   533  003FA7  69                 	db	105	;'i'
   534  003FA8  6F                 	db	111	;'o'
   535  003FA9  6E                 	db	110	;'n'
   536  003FAA  3D                 	db	61	;'='
   537  003FAB  25                 	db	37
   538  003FAC  64                 	db	100	;'d'
   539  003FAD  20                 	db	32
   540  003FAE  6E                 	db	110	;'n'
   541  003FAF  62                 	db	98	;'b'
   542  003FB0  5F                 	db	95	;'_'
   543  003FB1  54                 	db	84	;'T'
   544  003FB2  69                 	db	105	;'i'
   545  003FB3  6D                 	db	109	;'m'
   546  003FB4  65                 	db	101	;'e'
   547  003FB5  72                 	db	114	;'r'
   548  003FB6  5F                 	db	95	;'_'
   549  003FB7  35                 	db	53	;'5'
   550  003FB8  3D                 	db	61	;'='
   551  003FB9  25                 	db	37
   552  003FBA  64                 	db	100	;'d'
   553  003FBB  00                 	db	0
   554  003FBC                     STR_8:
   555  003FBC  45                 	db	69	;'E'
   556  003FBD  74                 	db	116	;'t'
   557  003FBE  61                 	db	97	;'a'
   558  003FBF  74                 	db	116	;'t'
   559  003FC0  3D                 	db	61	;'='
   560  003FC1  25                 	db	37
   561  003FC2  64                 	db	100	;'d'
   562  003FC3  20                 	db	32
   563  003FC4  6E                 	db	110	;'n'
   564  003FC5  62                 	db	98	;'b'
   565  003FC6  5F                 	db	95	;'_'
   566  003FC7  73                 	db	115	;'s'
   567  003FC8  5F                 	db	95	;'_'
   568  003FC9  66                 	db	102	;'f'
   569  003FCA  6F                 	db	111	;'o'
   570  003FCB  6E                 	db	110	;'n'
   571  003FCC  63                 	db	99	;'c'
   572  003FCD  74                 	db	116	;'t'
   573  003FCE  69                 	db	105	;'i'
   574  003FCF  6F                 	db	111	;'o'
   575  003FD0  6E                 	db	110	;'n'
   576  003FD1  6E                 	db	110	;'n'
   577  003FD2  65                 	db	101	;'e'
   578  003FD3  6D                 	db	109	;'m'
   579  003FD4  65                 	db	101	;'e'
   580  003FD5  6E                 	db	110	;'n'
   581  003FD6  74                 	db	116	;'t'
   582  003FD7  3D                 	db	61	;'='
   583  003FD8  25                 	db	37
   584  003FD9  64                 	db	100	;'d'
   585  003FDA  00                 	db	0
   586  003FDB                     STR_11:
   587  003FDB  30                 	db	48	;'0'
   588  003FDC  31                 	db	49	;'1'
   589  003FDD  32                 	db	50	;'2'
   590  003FDE  33                 	db	51	;'3'
   591  003FDF  34                 	db	52	;'4'
   592  003FE0  35                 	db	53	;'5'
   593  003FE1  36                 	db	54	;'6'
   594  003FE2  37                 	db	55	;'7'
   595  003FE3  38                 	db	56	;'8'
   596  003FE4  39                 	db	57	;'9'
   597  003FE5  41                 	db	65	;'A'
   598  003FE6  42                 	db	66	;'B'
   599  003FE7  43                 	db	67	;'C'
   600  003FE8  44                 	db	68	;'D'
   601  003FE9  45                 	db	69	;'E'
   602  003FEA  46                 	db	70	;'F'
   603  003FEB  00                 	db	0
   604  003FEC                     STR_3:
   605  003FEC  25                 	db	37
   606  003FED  30                 	db	48	;'0'
   607  003FEE  32                 	db	50	;'2'
   608  003FEF  58                 	db	88	;'X'
   609  003FF0  25                 	db	37
   610  003FF1  30                 	db	48	;'0'
   611  003FF2  32                 	db	50	;'2'
   612  003FF3  58                 	db	88	;'X'
   613  003FF4  25                 	db	37
   614  003FF5  30                 	db	48	;'0'
   615  003FF6  32                 	db	50	;'2'
   616  003FF7  58                 	db	88	;'X'
   617  003FF8  00                 	db	0
   618  003FF9                     STR_5:
   619  003FF9  25                 	db	37
   620  003FFA  30                 	db	48	;'0'
   621  003FFB  31                 	db	49	;'1'
   622  003FFC  58                 	db	88	;'X'
   623  003FFD  00                 	db	0
   624  0000                     
   625                           ; #config settings
   626  003FFE  00                 	db	0	; dummy byte at the end
   627  0000                     
   628                           	psect	cinit
   629  001FBE                     __pcinit:
   630                           	opt stack 0
   631  001FBE                     start_initialization:
   632                           	opt stack 0
   633  001FBE                     __initialization:
   634                           	opt stack 0
   635                           
   636                           ; Clear objects allocated to BANK2 (128 bytes)
   637  001FBE  EE02  F000         	lfsr	0,__pbssBANK2
   638  001FC2  0E80               	movlw	128
   639  001FC4                     clear_0:
   640  001FC4  6AEE               	clrf	postinc0,c
   641  001FC6  06E8               	decf	wreg,f,c
   642  001FC8  E1FD               	bnz	clear_0
   643                           
   644                           ; Clear objects allocated to BANK1 (256 bytes)
   645  001FCA  EE01  F000         	lfsr	0,__pbssBANK1
   646  001FCE  EE11 F000          	lfsr	1,256
   647  001FD2                     clear_1:
   648  001FD2  6AEE               	clrf	postinc0,c
   649  001FD4  50E5               	movf	postdec1,w,c
   650  001FD6  50E1               	movf	fsr1l,w,c
   651  001FD8  E1FC               	bnz	clear_1
   652  001FDA  50E2               	movf	fsr1h,w,c
   653  001FDC  E1FA               	bnz	clear_1
   654                           
   655                           ; Clear objects allocated to BANK0 (141 bytes)
   656  001FDE  EE00  F060         	lfsr	0,__pbssBANK0
   657  001FE2  0E8D               	movlw	141
   658  001FE4                     clear_2:
   659  001FE4  6AEE               	clrf	postinc0,c
   660  001FE6  06E8               	decf	wreg,f,c
   661  001FE8  E1FD               	bnz	clear_2
   662                           
   663                           ; Clear objects allocated to BITCOMRAM (2 bytes)
   664  001FEA  6A50               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
   665  001FEC  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   666                           
   667                           ; Clear objects allocated to COMRAM (12 bytes)
   668  001FEE  EE00  F043         	lfsr	0,__pbssCOMRAM
   669  001FF2  0E0C               	movlw	12
   670  001FF4                     clear_3:
   671  001FF4  6AEE               	clrf	postinc0,c
   672  001FF6  06E8               	decf	wreg,f,c
   673  001FF8  E1FD               	bnz	clear_3
   674  001FFA                     end_of_initialization:
   675                           	opt stack 0
   676  001FFA                     __end_of__initialization:
   677                           	opt stack 0
   678  001FFA  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   679  001FFC  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   680  001FFE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   681  002000  6EF8               	movwf	tblptru,c
   682  002002  0100               	movlb	0
   683  002004  EF69  F010         	goto	_main	;jump to C main() function
   684                           tblptru	equ	0xFF8
   685                           postinc0	equ	0xFEE
   686                           wreg	equ	0xFE8
   687                           postdec1	equ	0xFE5
   688                           fsr1h	equ	0xFE2
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	bitbssCOMRAM
   692  000278                     __pbitbssCOMRAM:
   693                           	opt stack 0
   694  000278                     _SPI_MODE:
   695                           	opt stack 0
   696  000278                     	ds	1
   697  000279                     _UART_TEST:
   698                           	opt stack 0
   699  000279                     	ds	1
   700  00027A                     _SPI_full:
   701                           	opt stack 0
   702  00027A                     	ds	1
   703  00027B                     _RX1_full:
   704                           	opt stack 0
   705  00027B                     	ds	1
   706  00027C                     _RX1_ABR:
   707                           	opt stack 0
   708  00027C                     	ds	1
   709  00027D                     _Option_Pailleux:
   710                           	opt stack 0
   711  00027D                     	ds	1
   712  00027E                     _Option_Multitas:
   713                           	opt stack 0
   714  00027E                     	ds	1
   715  00027F                     _Nouvelle_Valeur_ADC:
   716                           	opt stack 0
   717  00027F                     	ds	1
   718  000280                     _Detecteur_Pion:
   719                           	opt stack 0
   720  000280                     	ds	1
   721                           tblptru	equ	0xFF8
   722                           postinc0	equ	0xFEE
   723                           wreg	equ	0xFE8
   724                           postdec1	equ	0xFE5
   725                           fsr1h	equ	0xFE2
   726                           fsr1l	equ	0xFE1
   727                           
   728                           	psect	bssCOMRAM
   729  000043                     __pbssCOMRAM:
   730                           	opt stack 0
   731  000043                     _spiRxIndex:
   732                           	opt stack 0
   733  000043                     	ds	1
   734  000044                     _spiTxIndex:
   735                           	opt stack 0
   736  000044                     	ds	1
   737  000045                     _eusart1RxIndex:
   738                           	opt stack 0
   739  000045                     	ds	1
   740  000046                     _eusart1TxIndex:
   741                           	opt stack 0
   742  000046                     	ds	1
   743  000047                     _Compteur_IRQ_I_Moteur_2:
   744                           	opt stack 0
   745  000047                     	ds	1
   746  000048                     _Compteur_IRQ_I_Moteur_1:
   747                           	opt stack 0
   748  000048                     	ds	1
   749  000049                     _Consigne_en_A:
   750                           	opt stack 0
   751  000049                     	ds	1
   752  00004A                     _Capteur_Capot_Nb_Evenement_Autoriser:
   753                           	opt stack 0
   754  00004A                     	ds	1
   755  00004B                     _nb_s_fonctionnement:
   756                           	opt stack 0
   757  00004B                     	ds	1
   758  00004C                     _Etat_Precedent_Index:
   759                           	opt stack 0
   760  00004C                     	ds	1
   761  00004D                     _Mouvement_Startup:
   762                           	opt stack 0
   763  00004D                     	ds	1
   764  00004E                     _nb_100ms_platine_backup:
   765                           	opt stack 0
   766  00004E                     	ds	1
   767                           tblptru	equ	0xFF8
   768                           postinc0	equ	0xFEE
   769                           wreg	equ	0xFE8
   770                           postdec1	equ	0xFE5
   771                           fsr1h	equ	0xFE2
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	bssBANK0
   775  000060                     __pbssBANK0:
   776                           	opt stack 0
   777  000060                     _eusart1TxBuffer_Test:
   778                           	opt stack 0
   779  000060                     	ds	10
   780  00006A                     _Etat_Log:
   781                           	opt stack 0
   782  00006A                     	ds	10
   783  000074                     _DVT_Tableau_Pause:
   784                           	opt stack 0
   785  000074                     	ds	6
   786  00007A                     lecture_I_Mot2@Resul:
   787                           	opt stack 0
   788  00007A                     	ds	2
   789  00007C                     lecture_I_Mot1@Resul:
   790                           	opt stack 0
   791  00007C                     	ds	2
   792  00007E                     _erreur_accumulator_max:
   793                           	opt stack 0
   794  00007E                     	ds	2
   795  000080                     _PID_out:
   796                           	opt stack 0
   797  000080                     	ds	2
   798  000082                     _erreur_accumulator:
   799                           	opt stack 0
   800  000082                     	ds	2
   801  000084                     _erreur:
   802                           	opt stack 0
   803  000084                     	ds	2
   804  000086                     _duty:
   805                           	opt stack 0
   806  000086                     	ds	2
   807  000088                     _TIMER0_Etat:
   808                           	opt stack 0
   809  000088                     	ds	1
   810  000089                     _Surveillance_Capteur_Pion:
   811                           	opt stack 0
   812  000089                     	ds	1
   813  00008A                     _Surveillance_Consommation_Moteur_2:
   814                           	opt stack 0
   815  00008A                     	ds	1
   816  00008B                     _Surveillance_Consommation_Moteur_1:
   817                           	opt stack 0
   818  00008B                     	ds	1
   819  00008C                     _delay_s_counter:
   820                           	opt stack 0
   821  00008C                     	ds	1
   822  00008D                     _consigne_pwm_max:
   823                           	opt stack 0
   824  00008D                     	ds	1
   825  00008E                     _consigne_pwm:
   826                           	opt stack 0
   827  00008E                     	ds	1
   828  00008F                     _direction:
   829                           	opt stack 0
   830  00008F                     	ds	1
   831  000090                     _mouvement_option:
   832                           	opt stack 0
   833  000090                     	ds	1
   834  000091                     _type_consigne:
   835                           	opt stack 0
   836  000091                     	ds	1
   837  000092                     _Bequille_I_Max:
   838                           	opt stack 0
   839  000092                     	ds	1
   840  000093                     _Pelle_I_Max:
   841                           	opt stack 0
   842  000093                     	ds	1
   843  000094                     _Consigne_Max_Moteur_Bequille:
   844                           	opt stack 0
   845  000094                     	ds	1
   846  000095                     _Consigne_Max_Moteur_Z:
   847                           	opt stack 0
   848  000095                     	ds	1
   849  000096                     _Consigne_Max_Moteur_X:
   850                           	opt stack 0
   851  000096                     	ds	1
   852  000097                     _Consigne_Max:
   853                           	opt stack 0
   854  000097                     	ds	1
   855  000098                     _consigne:
   856                           	opt stack 0
   857  000098                     	ds	1
   858  000099                     _moteur_indice:
   859                           	opt stack 0
   860  000099                     	ds	1
   861  00009A                     _Image_Courant_Moteur_2:
   862                           	opt stack 0
   863  00009A                     	ds	1
   864  00009B                     _Image_Courant_Moteur_1:
   865                           	opt stack 0
   866  00009B                     	ds	1
   867  00009C                     _Patinage_Nb_Essai_Autoriser:
   868                           	opt stack 0
   869  00009C                     	ds	1
   870  00009D                     _Patinage_Nb_Essai:
   871                           	opt stack 0
   872  00009D                     	ds	1
   873  00009E                     _Capteur_Capot_Compteur_Temps_S:
   874                           	opt stack 0
   875  00009E                     	ds	1
   876  00009F                     _Capteur_Capot_Nb_Evenement:
   877                           	opt stack 0
   878  00009F                     	ds	1
   879  0000A0                     _nb_Pion_Objectif:
   880                           	opt stack 0
   881  0000A0                     	ds	1
   882  0000A1                     _nb_Pion:
   883                           	opt stack 0
   884  0000A1                     	ds	1
   885  0000A2                     _nb_s_bequille:
   886                           	opt stack 0
   887  0000A2                     	ds	1
   888  0000A3                     _nb_s_pelle:
   889                           	opt stack 0
   890  0000A3                     	ds	1
   891  0000A4                     _nb_100ms_platine:
   892                           	opt stack 0
   893  0000A4                     	ds	1
   894  0000A5                     _nb_100ms_pion:
   895                           	opt stack 0
   896  0000A5                     	ds	1
   897  0000A6                     _nb_100ms_Timer_5:
   898                           	opt stack 0
   899  0000A6                     	ds	1
   900  0000A7                     _nb_s_patinage:
   901                           	opt stack 0
   902  0000A7                     	ds	1
   903  0000A8                     _nb_s_fonctionnement_souhaiter:
   904                           	opt stack 0
   905  0000A8                     	ds	1
   906  0000A9                     _Alarme:
   907                           	opt stack 0
   908  0000A9                     	ds	1
   909  0000AA                     _Etat:
   910                           	opt stack 0
   911  0000AA                     	ds	1
   912  0000AB                     _Version:
   913                           	opt stack 0
   914  0000AB                     	ds	1
   915  0000AC                     _P4_busy:
   916                           	opt stack 0
   917  0000AC                     	ds	1
   918  0000AD                     _UART_TX_TEXT:
   919                           	opt stack 0
   920  0000AD                     	ds	64
   921                           tblptru	equ	0xFF8
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1h	equ	0xFE2
   926                           fsr1l	equ	0xFE1
   927                           
   928                           	psect	bssBANK1
   929  000100                     __pbssBANK1:
   930                           	opt stack 0
   931  000100                     _SPI_RX_TEXT:
   932                           	opt stack 0
   933  000100                     	ds	64
   934  000140                     _spiTxBuffer:
   935                           	opt stack 0
   936  000140                     	ds	64
   937  000180                     _eusart1TxBuffer:
   938                           	opt stack 0
   939  000180                     	ds	64
   940  0001C0                     _UART_RX_TEXT:
   941                           	opt stack 0
   942  0001C0                     	ds	64
   943                           tblptru	equ	0xFF8
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           postdec1	equ	0xFE5
   947                           fsr1h	equ	0xFE2
   948                           fsr1l	equ	0xFE1
   949                           
   950                           	psect	bssBANK2
   951  000200                     __pbssBANK2:
   952                           	opt stack 0
   953  000200                     _spiRxBuffer:
   954                           	opt stack 0
   955  000200                     	ds	64
   956  000240                     _eusart1RxBuffer:
   957                           	opt stack 0
   958  000240                     	ds	64
   959                           tblptru	equ	0xFF8
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postdec1	equ	0xFE5
   963                           fsr1h	equ	0xFE2
   964                           fsr1l	equ	0xFE1
   965                           
   966                           	psect	cstackBANK2
   967  000280                     __pcstackBANK2:
   968                           	opt stack 0
   969  000280                     EUSART1_RX_T3_LOCAL@Da:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x0
   973  000280                     	ds	1
   974  000281                     EUSART1_RX_T3_LOCAL@A:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x1
   978  000281                     	ds	1
   979  000282                     EUSART1_RX_T3_LOCAL@B:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x2
   983  000282                     	ds	1
   984  000283                     EUSART1_RX_T3_LOCAL@C:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x3
   988  000283                     	ds	1
   989  000284                     EUSART1_RX_T3_LOCAL@D:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x4
   993  000284                     	ds	1
   994  000285                     EUSART1_RX_T3_LOCAL@E:
   995                           	opt stack 0
   996                           
   997                           ; 1 bytes @ 0x5
   998  000285                     	ds	1
   999  000286                     EUSART1_RX_T3_LOCAL@F:
  1000                           	opt stack 0
  1001                           
  1002                           ; 1 bytes @ 0x6
  1003  000286                     	ds	1
  1004  000287                     Mouvement_Bequille@type_consigne:
  1005                           	opt stack 0
  1006  000287                     Mouvement_Z@type_consigne:
  1007                           	opt stack 0
  1008  000287                     Mouvement_X@direction:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x7
  1012  000287                     	ds	1
  1013  000288                     Mouvement_Bequille@option:
  1014                           	opt stack 0
  1015  000288                     Mouvement_Z@option:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x8
  1019  000288                     	ds	1
  1020  000289                     Mouvement_Bequille@direction:
  1021                           	opt stack 0
  1022  000289                     Mouvement_Z@direction:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x9
  1026  000289                     	ds	1
  1027  00028A                     Cycle@i:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0xA
  1031  00028A                     	ds	1
  1032                           tblptru	equ	0xFF8
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1h	equ	0xFE2
  1037                           fsr1l	equ	0xFE1
  1038                           
  1039                           	psect	cstackBANK0
  1040  0000ED                     __pcstackBANK0:
  1041                           	opt stack 0
  1042  0000ED                     ??_sprintf:
  1043  0000ED                     ___fttol@sign1:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x0
  1047  0000ED                     	ds	1
  1048  0000EE                     ___fttol@lval:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x1
  1052  0000EE                     	ds	3
  1053  0000F1                     sprintf@idx:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x4
  1057  0000F1                     	ds	1
  1058  0000F2                     sprintf@ap:
  1059                           	opt stack 0
  1060  0000F2                     ___fttol@exp1:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x5
  1064  0000F2                     	ds	1
  1065  0000F3                     sprintf@prec:
  1066                           	opt stack 0
  1067                           
  1068                           ; 1 bytes @ 0x6
  1069  0000F3                     	ds	1
  1070  0000F4                     sprintf@val:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x7
  1074  0000F4                     	ds	2
  1075  0000F6                     sprintf@flag:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x9
  1079  0000F6                     	ds	1
  1080  0000F7                     sprintf@width:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0xA
  1084  0000F7                     	ds	2
  1085  0000F9                     sprintf@c:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0xC
  1089  0000F9                     	ds	1
  1090  0000FA                     ??_EUSART1_RX_T3_LOCAL:
  1091                           
  1092                           ; 1 bytes @ 0xD
  1093  0000FA                     	ds	4
  1094  0000FE                     ??_Check_List_Moteur_Bequille:
  1095  0000FE                     Mouvement_X@type_consigne:
  1096                           	opt stack 0
  1097  0000FE                     delay_s@delay_time:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x11
  1101  0000FE                     	ds	1
  1102  0000FF                     Mouvement_X@option:
  1103                           	opt stack 0
  1104  0000FF                     delay_s@Timer_0_Etat_Prealable:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x12
  1108  0000FF                     	ds	1
  1109                           tblptru	equ	0xFF8
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           postdec1	equ	0xFE5
  1113                           fsr1h	equ	0xFE2
  1114                           fsr1l	equ	0xFE1
  1115                           
  1116                           	psect	cstackCOMRAM
  1117  000001                     __pcstackCOMRAM:
  1118                           	opt stack 0
  1119  000001                     i2Etat_Update@etat_new_value:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0x0
  1123  000001                     	ds	1
  1124  000002                     i2Alarme_On@alarme_new_value:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x1
  1128  000002                     	ds	1
  1129  000003                     ??_HIGH_PRIORITY_IRQ:
  1130  000003                     
  1131                           ; 1 bytes @ 0x2
  1132  000003                     	ds	2
  1133  000005                     ??_SPI_ISR:
  1134  000005                     ??_EUSART1_Receive_ISR:
  1135  000005                     ??i1_IRQ_ADC:
  1136  000005                     i1Buzzer_Etat@Activation:
  1137                           	opt stack 0
  1138  000005                     i1Etat_Update@etat_new_value:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0x4
  1142  000005                     	ds	1
  1143  000006                     i1Alarme_On@alarme_new_value:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x5
  1147  000006                     	ds	1
  1148  000007                     EUSART1_Receive_ISR@i:
  1149                           	opt stack 0
  1150  000007                     SPI_ISR@i:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x6
  1154  000007                     	ds	1
  1155  000008                     ??_LOW_PRIORITY_IRQ:
  1156                           
  1157                           ; 1 bytes @ 0x7
  1158  000008                     	ds	7
  1159  00000F                     ??_IRQ_ADC:
  1160  00000F                     ??_delay_100ms:
  1161  00000F                     ??_isdigit:
  1162  00000F                     ?___wmul:
  1163                           	opt stack 0
  1164  00000F                     ?___awmod:
  1165                           	opt stack 0
  1166  00000F                     ?___lwdiv:
  1167                           	opt stack 0
  1168  00000F                     ?___ftpack:
  1169                           	opt stack 0
  1170  00000F                     Init_Variable@i:
  1171                           	opt stack 0
  1172  00000F                     Buzzer_Etat@Activation:
  1173                           	opt stack 0
  1174  00000F                     Etat_Intitule@Etat_Number:
  1175                           	opt stack 0
  1176  00000F                     Etat_Update@etat_new_value:
  1177                           	opt stack 0
  1178  00000F                     EUSART1_Buffer_Send@text:
  1179                           	opt stack 0
  1180  00000F                     ___lbdiv@divisor:
  1181                           	opt stack 0
  1182  00000F                     ___wmul@multiplier:
  1183                           	opt stack 0
  1184  00000F                     ___awmod@dividend:
  1185                           	opt stack 0
  1186  00000F                     ___lwdiv@dividend:
  1187                           	opt stack 0
  1188  00000F                     ___ftpack@arg:
  1189                           	opt stack 0
  1190                           
  1191                           ; 3 bytes @ 0xE
  1192  00000F                     	ds	1
  1193  000010                     delay_n_100ms@nb_100ms:
  1194                           	opt stack 0
  1195  000010                     Alarme_On@alarme_new_value:
  1196                           	opt stack 0
  1197  000010                     _isdigit$3642:
  1198                           	opt stack 0
  1199  000010                     ___lbdiv@dividend:
  1200                           	opt stack 0
  1201  000010                     EUSART1_Buffer_Send@i:
  1202                           	opt stack 0
  1203                           
  1204                           ; 2 bytes @ 0xF
  1205  000010                     	ds	1
  1206  000011                     delay_n_100ms@i:
  1207                           	opt stack 0
  1208  000011                     isdigit@c:
  1209                           	opt stack 0
  1210  000011                     ___lbdiv@counter:
  1211                           	opt stack 0
  1212  000011                     ___wmul@multiplicand:
  1213                           	opt stack 0
  1214  000011                     ___awmod@divisor:
  1215                           	opt stack 0
  1216  000011                     ___lwdiv@divisor:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x10
  1220  000011                     	ds	1
  1221  000012                     IRQ_Execution@IRQ_Indice:
  1222                           	opt stack 0
  1223  000012                     ___ftpack@exp:
  1224                           	opt stack 0
  1225  000012                     ___lbdiv@quotient:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x11
  1229  000012                     	ds	1
  1230  000013                     ___awmod@counter:
  1231                           	opt stack 0
  1232  000013                     ___ftpack@sign:
  1233                           	opt stack 0
  1234  000013                     ___lwdiv@counter:
  1235                           	opt stack 0
  1236  000013                     ___wmul@product:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x12
  1240  000013                     	ds	1
  1241  000014                     ??___ftpack:
  1242  000014                     ___awmod@sign:
  1243                           	opt stack 0
  1244  000014                     ___lwdiv@quotient:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x13
  1248  000014                     	ds	1
  1249  000015                     ??_Etat_Get:
  1250                           
  1251                           ; 1 bytes @ 0x14
  1252  000015                     	ds	1
  1253  000016                     ?___lwmod:
  1254                           	opt stack 0
  1255  000016                     ___lwmod@dividend:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x15
  1259  000016                     	ds	1
  1260  000017                     ?___lbtoft:
  1261                           	opt stack 0
  1262  000017                     Etat_Get@Etat_Indice:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  000017                     	ds	1
  1267  000018                     ___lwmod@divisor:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x17
  1271  000018                     	ds	2
  1272  00001A                     ___lbtoft@c:
  1273                           	opt stack 0
  1274  00001A                     ___lwmod@counter:
  1275                           	opt stack 0
  1276                           
  1277                           ; 1 bytes @ 0x19
  1278  00001A                     	ds	1
  1279  00001B                     ?_sprintf:
  1280                           	opt stack 0
  1281  00001B                     ?___ftmul:
  1282                           	opt stack 0
  1283  00001B                     sprintf@sp:
  1284                           	opt stack 0
  1285  00001B                     ___ftmul@f1:
  1286                           	opt stack 0
  1287                           
  1288                           ; 3 bytes @ 0x1A
  1289  00001B                     	ds	1
  1290  00001C                     sprintf@f:
  1291                           	opt stack 0
  1292                           
  1293                           ; 2 bytes @ 0x1B
  1294  00001C                     	ds	2
  1295  00001E                     ___ftmul@f2:
  1296                           	opt stack 0
  1297                           
  1298                           ; 3 bytes @ 0x1D
  1299  00001E                     	ds	3
  1300  000021                     ??___ftmul:
  1301                           
  1302                           ; 1 bytes @ 0x20
  1303  000021                     	ds	3
  1304  000024                     ___ftmul@exp:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x23
  1308  000024                     	ds	1
  1309  000025                     ___ftmul@sign:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x24
  1313  000025                     	ds	1
  1314  000026                     ___ftmul@f3_as_product:
  1315                           	opt stack 0
  1316                           
  1317                           ; 3 bytes @ 0x25
  1318  000026                     	ds	3
  1319  000029                     ?___ftdiv:
  1320                           	opt stack 0
  1321  000029                     ___ftdiv@f1:
  1322                           	opt stack 0
  1323                           
  1324                           ; 3 bytes @ 0x28
  1325  000029                     	ds	3
  1326  00002C                     ___ftdiv@f2:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x2B
  1330  00002C                     	ds	3
  1331  00002F                     ??___ftdiv:
  1332                           
  1333                           ; 1 bytes @ 0x2E
  1334  00002F                     	ds	3
  1335  000032                     ___ftdiv@cntr:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x31
  1339  000032                     	ds	1
  1340  000033                     ___ftdiv@f3:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x32
  1344  000033                     	ds	3
  1345  000036                     ___ftdiv@exp:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x35
  1349  000036                     	ds	1
  1350  000037                     ___ftdiv@sign:
  1351                           	opt stack 0
  1352                           
  1353                           ; 1 bytes @ 0x36
  1354  000037                     	ds	1
  1355  000038                     ?___fttol:
  1356                           	opt stack 0
  1357  000038                     ___fttol@f1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0x37
  1361  000038                     	ds	4
  1362  00003C                     ??___fttol:
  1363                           
  1364                           ; 1 bytes @ 0x3B
  1365  00003C                     	ds	4
  1366  000040                     EUSART1_RX_T3_LOCAL@Ad:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0x3F
  1370  000040                     	ds	1
  1371  000041                     EUSART1_RX_T3_LOCAL@i:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x40
  1375  000041                     	ds	2
  1376  000043                     tblptru	equ	0xFF8
  1377                           postinc0	equ	0xFEE
  1378                           wreg	equ	0xFE8
  1379                           postdec1	equ	0xFE5
  1380                           fsr1h	equ	0xFE2
  1381                           fsr1l	equ	0xFE1
  1382                           
  1383                           ; 1 bytes @ 0x42
  1384 ;;
  1385 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1386 ;;
  1387 ;; *************** function _main *****************
  1388 ;; Defined at:
  1389 ;;		line 615 in file "MOTEUR.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;		None
  1392 ;; Auto vars:     Size  Location     Type
  1393 ;;		None
  1394 ;; Return value:  Size  Location     Type
  1395 ;;                  1    wreg      void 
  1396 ;; Registers used:
  1397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1398 ;; Tracked objects:
  1399 ;;		On entry : 0/0
  1400 ;;		On exit  : 0/0
  1401 ;;		Unchanged: 0/0
  1402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1403 ;;      Params:         0       0       0       0
  1404 ;;      Locals:         0       0       0       0
  1405 ;;      Temps:          0       0       0       0
  1406 ;;      Totals:         0       0       0       0
  1407 ;;Total ram usage:        0 bytes
  1408 ;; Hardware stack levels required when called:   20
  1409 ;; This function calls:
  1410 ;;		_Cycle
  1411 ;;		_EUSART1_Initialize
  1412 ;;		_Init_ADC
  1413 ;;		_Init_IT
  1414 ;;		_Init_PWM
  1415 ;;		_Init_Port
  1416 ;;		_Init_SPI
  1417 ;;		_Init_TIMER0
  1418 ;;		_Init_TIMER2
  1419 ;;		_Init_TIMER5
  1420 ;;		_Init_Variable
  1421 ;; This function is called by:
  1422 ;;		Startup code after reset
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           	psect	text0
  1427  0020D2                     __ptext0:
  1428                           	opt stack 0
  1429  0020D2                     _main:
  1430                           	opt stack 11
  1431                           
  1432                           ;MOTEUR.c: 617: OSCCON = 0b01110000;
  1433                           
  1434                           ;incstack = 0
  1435  0020D2  0E70               	movlw	112
  1436  0020D4  6ED3               	movwf	4051,c	;volatile
  1437  0020D6                     l283:
  1438  0020D6  A4D3               	btfss	4051,2,c	;volatile
  1439  0020D8  D7FE               	goto	l283
  1440                           
  1441                           ;MOTEUR.c: 628: Init_Variable();
  1442  0020DA  EC9F  F00A         	call	_Init_Variable	;wreg free
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;MOTEUR.c: 632: Init_Port();
  1446  0020DE  EC49  F00E         	call	_Init_Port	;wreg free
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;MOTEUR.c: 667: Init_IT();
  1450  0020E2  ECA1  F010         	call	_Init_IT	;wreg free
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;MOTEUR.c: 686: EUSART1_Initialize();
  1454  0020E6  EC8F  F00F         	call	_EUSART1_Initialize	;wreg free
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;MOTEUR.c: 687: Init_SPI();
  1458  0020EA  ECBC  F011         	call	_Init_SPI	;wreg free
  1459                           
  1460                           ;MOTEUR.c: 691: Init_ADC();
  1461  0020EE  EC01  F012         	call	_Init_ADC	;wreg free
  1462                           
  1463                           ;MOTEUR.c: 693: Init_TIMER0();
  1464  0020F2  ECF1  F011         	call	_Init_TIMER0	;wreg free
  1465                           
  1466                           ;MOTEUR.c: 694: Init_TIMER2();
  1467  0020F6  EC69  F012         	call	_Init_TIMER2	;wreg free
  1468                           
  1469                           ;MOTEUR.c: 695: Init_TIMER5();
  1470  0020FA  EC34  F011         	call	_Init_TIMER5	;wreg free
  1471                           
  1472                           ;MOTEUR.c: 698: Init_PWM();
  1473  0020FE  EC4D  F012         	call	_Init_PWM	;wreg free
  1474                           
  1475                           ;MOTEUR.c: 760: Cycle();
  1476  002102  ECDF  F005         	call	_Cycle	;wreg free
  1477  002106  EF67  F000         	goto	start
  1478  00210A                     __end_of_main:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           postinc0	equ	0xFEE
  1482                           wreg	equ	0xFE8
  1483                           postdec1	equ	0xFE5
  1484                           fsr1h	equ	0xFE2
  1485                           fsr1l	equ	0xFE1
  1486                           
  1487 ;; *************** function _Init_Variable *****************
  1488 ;; Defined at:
  1489 ;;		line 144 in file "MOTEUR.c"
  1490 ;; Parameters:    Size  Location     Type
  1491 ;;		None
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  i               1   14[COMRAM] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  1    wreg      void 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 3F/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1503 ;;      Params:         0       0       0       0
  1504 ;;      Locals:         1       0       0       0
  1505 ;;      Temps:          0       0       0       0
  1506 ;;      Totals:         1       0       0       0
  1507 ;;Total ram usage:        1 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:   11
  1510 ;; This function calls:
  1511 ;;		_Detection_Pion_Init
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text1
  1518  00153E                     __ptext1:
  1519                           	opt stack 0
  1520  00153E                     _Init_Variable:
  1521                           	opt stack 19
  1522                           
  1523                           ;MOTEUR.c: 185: Batterie_mV = 0;
  1524                           
  1525                           ;incstack = 0
  1526  00153E  0E0B               	movlw	11
  1527  001540  0100               	movlb	0	; () banked
  1528  001542  6FAB               	movwf	_Version& (0+255),b
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;MOTEUR.c: 188: unsigned char i;
  1532                           ;MOTEUR.c: 190: for (i = 0; i < 10; i++) {
  1533  001544  6A0F               	clrf	Init_Variable@i,c
  1534  001546                     l8850:
  1535                           
  1536                           ;MOTEUR.c: 191: Etat_Log[i] = 255;
  1537  001546  500F               	movf	Init_Variable@i,w,c
  1538  001548  0F6A               	addlw	low _Etat_Log
  1539  00154A  6ED9               	movwf	fsr2l,c
  1540  00154C  6ADA               	clrf	fsr2h,c
  1541  00154E  68DF               	setf	indf2,c
  1542  001550  2A0F               	incf	Init_Variable@i,f,c
  1543  001552  0E09               	movlw	9
  1544  001554  640F               	cpfsgt	Init_Variable@i,c
  1545  001556  D7F7               	goto	l8850
  1546                           
  1547                           ;MOTEUR.c: 194: }
  1548                           ;MOTEUR.c: 196: Etat_Precedent_Index = 0;
  1549  001558  6A4C               	clrf	_Etat_Precedent_Index,c
  1550                           
  1551                           ;MOTEUR.c: 197: Etat = 255;
  1552  00155A  0100               	movlb	0	; () banked
  1553  00155C  69AA               	setf	_Etat& (0+255),b	;volatile
  1554                           
  1555                           ;MOTEUR.c: 200: Alarme = 0;
  1556  00155E  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  1557                           
  1558                           ;MOTEUR.c: 202: nb_s_fonctionnement_souhaiter = 0;
  1559  001560  6BA8               	clrf	_nb_s_fonctionnement_souhaiter& (0+255),b
  1560                           
  1561                           ;MOTEUR.c: 203: nb_s_fonctionnement = 0;
  1562  001562  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;MOTEUR.c: 206: nb_s_patinage = 90;
  1566  001564  0E5A               	movlw	90
  1567  001566  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1568                           
  1569                           ;MOTEUR.c: 207: nb_s_patinage = 45;
  1570  001568  0E2D               	movlw	45
  1571  00156A  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1572                           
  1573                           ;MOTEUR.c: 208: nb_s_patinage = 50;
  1574  00156C  0E32               	movlw	50
  1575  00156E  6FA7               	movwf	_nb_s_patinage& (0+255),b
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;MOTEUR.c: 211: nb_100ms_Timer_5 = 0;
  1579  001570  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  1580                           
  1581                           ;MOTEUR.c: 213: nb_100ms_pion = 2;
  1582  001572  0E02               	movlw	2
  1583  001574  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  1584                           
  1585                           ;MOTEUR.c: 214: nb_100ms_platine = 30;
  1586  001576  0E1E               	movlw	30
  1587  001578  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  1588                           
  1589                           ;MOTEUR.c: 216: nb_s_pelle = 30;
  1590  00157A  6FA3               	movwf	_nb_s_pelle& (0+255),b
  1591                           
  1592                           ;MOTEUR.c: 217: nb_s_bequille = 10;
  1593  00157C  0E0A               	movlw	10
  1594  00157E  6FA2               	movwf	_nb_s_bequille& (0+255),b
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;MOTEUR.c: 219: Detecteur_Pion = 0;
  1598  001580  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;MOTEUR.c: 220: nb_Pion = 0;
  1602  001582  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;MOTEUR.c: 221: nb_Pion_Objectif = 0;
  1606  001584  6BA0               	clrf	_nb_Pion_Objectif& (0+255),b
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;MOTEUR.c: 222: Mouvement_Startup = 0;
  1610  001586  6A4D               	clrf	_Mouvement_Startup,c
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;MOTEUR.c: 224: delay_s_counter = 0;
  1614  001588  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  1615                           
  1616                           ;MOTEUR.c: 226: moteur_indice = 1;
  1617  00158A  0E01               	movlw	1
  1618  00158C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;MOTEUR.c: 227: consigne = 0;
  1622  00158E  6B98               	clrf	_consigne& (0+255),b	;volatile
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;MOTEUR.c: 228: direction = 0;
  1626  001590  6B8F               	clrf	_direction& (0+255),b	;volatile
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;MOTEUR.c: 229: mouvement_option = 0;
  1630  001592  6B90               	clrf	_mouvement_option& (0+255),b
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;MOTEUR.c: 230: Option_Multitas = 0;
  1634  001594  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;MOTEUR.c: 231: type_consigne = 0;
  1638  001596  6B91               	clrf	_type_consigne& (0+255),b
  1639                           
  1640                           ;MOTEUR.c: 232: Consigne_Max = 20 * 5;
  1641  001598  0E64               	movlw	100
  1642  00159A  6F97               	movwf	_Consigne_Max& (0+255),b	;volatile
  1643                           
  1644                           ;MOTEUR.c: 233: Consigne_Max_Moteur_X = 20 * 5;
  1645  00159C  6F96               	movwf	_Consigne_Max_Moteur_X& (0+255),b	;volatile
  1646                           
  1647                           ;MOTEUR.c: 234: Consigne_Max_Moteur_Z = 20 * 5;
  1648  00159E  6F95               	movwf	_Consigne_Max_Moteur_Z& (0+255),b	;volatile
  1649                           
  1650                           ;MOTEUR.c: 237: Moteur_I_Max = 100;
  1651  0015A0  6F94               	movwf	_Consigne_Max_Moteur_Bequille& (0+255),b	;volatile
  1652                           
  1653                           ;MOTEUR.c: 238: Pelle_I_Max = 45;
  1654  0015A2  0E2D               	movlw	45
  1655  0015A4  6F93               	movwf	_Pelle_I_Max& (0+255),b
  1656                           
  1657                           ;MOTEUR.c: 239: Bequille_I_Max = 22;
  1658  0015A6  0E16               	movlw	22
  1659  0015A8  6F92               	movwf	_Bequille_I_Max& (0+255),b
  1660                           
  1661                           ;MOTEUR.c: 242: Consigne_en_A = 4;
  1662  0015AA  0E04               	movlw	4
  1663  0015AC  6E49               	movwf	_Consigne_en_A,c
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;MOTEUR.c: 243: consigne = (char) (Consigne_en_A * 5);
  1667  0015AE  5049               	movf	_Consigne_en_A,w,c
  1668  0015B0  0D05               	mullw	5
  1669  0015B2  CFF3 F098          	movff	prodl,_consigne	;volatile
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;MOTEUR.c: 246: Patinage_Nb_Essai_Autoriser = 3;
  1673  0015B6  0E03               	movlw	3
  1674  0015B8  6F9C               	movwf	_Patinage_Nb_Essai_Autoriser& (0+255),b
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;MOTEUR.c: 247: Capteur_Capot_Nb_Evenement_Autoriser = 3;
  1678  0015BA  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;MOTEUR.c: 248: Capteur_Capot_Compteur_Temps_S = 0;
  1682  0015BC  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;MOTEUR.c: 249: Patinage_Nb_Essai = 0;
  1686  0015BE  6B9D               	clrf	_Patinage_Nb_Essai& (0+255),b
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;MOTEUR.c: 250: Capteur_Capot_Nb_Evenement = 0;
  1690  0015C0  6B9F               	clrf	_Capteur_Capot_Nb_Evenement& (0+255),b
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;MOTEUR.c: 256: consigne_moteur_3 = 50;
  1694  0015C2  6B88               	clrf	_TIMER0_Etat& (0+255),b
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;MOTEUR.c: 258: Surveillance_Consommation_Moteur_1 = 0;
  1698  0015C4  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;MOTEUR.c: 259: Surveillance_Consommation_Moteur_2 = 0;
  1702  0015C6  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;MOTEUR.c: 261: Detection_Pion_Init();
  1706  0015C8  ECC4  F012         	call	_Detection_Pion_Init	;wreg free
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;MOTEUR.c: 269: Compteur_IRQ_I_Moteur_1 = 0;
  1710  0015CC  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  1711                           
  1712                           ; BSR set to: 0
  1713                           ;MOTEUR.c: 270: Compteur_IRQ_I_Moteur_2 = 0;
  1714  0015CE  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;MOTEUR.c: 287: DVT_Compteur = 0;
  1718  0015D0  6BAC               	clrf	_P4_busy& (0+255),b
  1719                           
  1720                           ; BSR set to: 0
  1721                           ;MOTEUR.c: 289: DVT_Tableau_Pause[0] = 9;
  1722  0015D2  0E09               	movlw	9
  1723  0015D4  6F74               	movwf	_DVT_Tableau_Pause& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;MOTEUR.c: 290: DVT_Tableau_Pause[1] = 7;
  1727  0015D6  0E07               	movlw	7
  1728  0015D8  6F75               	movwf	(_DVT_Tableau_Pause+1)& (0+255),b
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;MOTEUR.c: 291: DVT_Tableau_Pause[2] = 6;
  1732  0015DA  0E06               	movlw	6
  1733  0015DC  6F76               	movwf	(_DVT_Tableau_Pause+2)& (0+255),b
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;MOTEUR.c: 292: DVT_Tableau_Pause[3] = 5;
  1737  0015DE  0E05               	movlw	5
  1738  0015E0  6F77               	movwf	(_DVT_Tableau_Pause+3)& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;MOTEUR.c: 293: DVT_Tableau_Pause[4] = 4;
  1742  0015E2  0E04               	movlw	4
  1743  0015E4  6F78               	movwf	(_DVT_Tableau_Pause+4)& (0+255),b
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;MOTEUR.c: 303: Multitas_Courant_Max = 20 * 5 ;
  1747  0015E6  0E03               	movlw	3
  1748  0015E8  6F79               	movwf	(_DVT_Tableau_Pause+5)& (0+255),b
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;MOTEUR.c: 306: UART_TEST = 0;
  1752  0015EA  924F               	bcf	_UART_TEST/(0+8),_UART_TEST& (0+7),c	;volatile
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;MOTEUR.c: 307: RX1_ABR = 0;
  1756  0015EC  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;MOTEUR.c: 308: RX1_full = 0;
  1760  0015EE  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;MOTEUR.c: 309: SPI_full = 0;
  1764  0015F0  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;MOTEUR.c: 311: spiRxIndex = 0;
  1768  0015F2  6A43               	clrf	_spiRxIndex,c	;volatile
  1769                           
  1770                           ; BSR set to: 0
  1771                           ;MOTEUR.c: 312: spiTxIndex = 0;
  1772  0015F4  6A44               	clrf	_spiTxIndex,c	;volatile
  1773                           
  1774                           ; BSR set to: 0
  1775                           ;MOTEUR.c: 313: SPI_MODE = 0;
  1776  0015F6  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
  1777                           
  1778                           ; BSR set to: 0
  1779  0015F8  0012               	return		;funcret
  1780  0015FA                     __end_of_Init_Variable:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           prodl	equ	0xFF3
  1784                           postinc0	equ	0xFEE
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           
  1793 ;; *************** function _Init_TIMER5 *****************
  1794 ;; Defined at:
  1795 ;;		line 183 in file "timer.c"
  1796 ;; Parameters:    Size  Location     Type
  1797 ;;		None
  1798 ;; Auto vars:     Size  Location     Type
  1799 ;;		None
  1800 ;; Return value:  Size  Location     Type
  1801 ;;                  1    wreg      void 
  1802 ;; Registers used:
  1803 ;;		wreg, status,2
  1804 ;; Tracked objects:
  1805 ;;		On entry : 0/0
  1806 ;;		On exit  : 0/0
  1807 ;;		Unchanged: 0/0
  1808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1809 ;;      Params:         0       0       0       0
  1810 ;;      Locals:         0       0       0       0
  1811 ;;      Temps:          0       0       0       0
  1812 ;;      Totals:         0       0       0       0
  1813 ;;Total ram usage:        0 bytes
  1814 ;; Hardware stack levels used:    1
  1815 ;; Hardware stack levels required when called:   10
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_main
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           
  1823                           	psect	text2
  1824  002268                     __ptext2:
  1825                           	opt stack 0
  1826  002268                     _Init_TIMER5:
  1827                           	opt stack 20
  1828                           
  1829                           ;timer.c: 186: T5CONbits.T5SEN = 0;
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;incstack = 0
  1833  002268  9EB7               	bcf	4023,7,c	;volatile
  1834                           
  1835                           ;timer.c: 190: T5CONbits.RESEN = 1;
  1836  00226A  8CB7               	bsf	4023,6,c	;volatile
  1837                           
  1838                           ;timer.c: 194: T5CONbits.T5MOD = 0;
  1839  00226C  9AB7               	bcf	4023,5,c	;volatile
  1840                           
  1841                           ;timer.c: 198: T5CONbits.T5PS = 0b11;
  1842  00226E  0E18               	movlw	24
  1843  002270  12B7               	iorwf	4023,f,c	;volatile
  1844                           
  1845                           ;timer.c: 207: T5CONbits.T5SYNC = 1;
  1846  002272  84B7               	bsf	4023,2,c	;volatile
  1847                           
  1848                           ;timer.c: 214: T5CONbits.TMR5CS = 0;
  1849  002274  92B7               	bcf	4023,1,c	;volatile
  1850                           
  1851                           ;timer.c: 218: TMR5L = 0;
  1852  002276  6A87               	clrf	3975,c	;volatile
  1853                           
  1854                           ;timer.c: 219: TMR5H = 0;
  1855  002278  6A88               	clrf	3976,c	;volatile
  1856                           
  1857                           ;timer.c: 221: PR5H = 0x61;
  1858  00227A  0E61               	movlw	97
  1859  00227C  6E91               	movwf	3985,c	;volatile
  1860                           
  1861                           ;timer.c: 222: PR5L = 0xA8;
  1862  00227E  0EA8               	movlw	168
  1863  002280  6E90               	movwf	3984,c	;volatile
  1864                           
  1865                           ;timer.c: 225: T5CONbits.TMR5ON = 0;
  1866  002282  90B7               	bcf	4023,0,c	;volatile
  1867                           
  1868                           ;timer.c: 228: TMR5L = 0;
  1869  002284  6A87               	clrf	3975,c	;volatile
  1870                           
  1871                           ;timer.c: 229: TMR5H = 0;
  1872  002286  6A88               	clrf	3976,c	;volatile
  1873                           
  1874                           ;timer.c: 239: IPR3bits.TMR5IP = 0;
  1875  002288  90A5               	bcf	4005,0,c	;volatile
  1876                           
  1877                           ;timer.c: 243: PIE3bits.TMR5IE = 1;
  1878  00228A  80A3               	bsf	4003,0,c	;volatile
  1879                           
  1880                           ;timer.c: 244: PIR3bits.TMR5IF = 0;
  1881  00228C  90A4               	bcf	4004,0,c	;volatile
  1882  00228E  0012               	return		;funcret
  1883  002290                     __end_of_Init_TIMER5:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           prodl	equ	0xFF3
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1h	equ	0xFE2
  1891                           fsr1l	equ	0xFE1
  1892                           indf2	equ	0xFDF
  1893                           fsr2h	equ	0xFDA
  1894                           fsr2l	equ	0xFD9
  1895                           
  1896 ;; *************** function _Init_TIMER2 *****************
  1897 ;; Defined at:
  1898 ;;		line 133 in file "timer.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          0       0       0       0
  1915 ;;      Totals:         0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:   10
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text3
  1927  0024D2                     __ptext3:
  1928                           	opt stack 0
  1929  0024D2                     _Init_TIMER2:
  1930                           	opt stack 20
  1931                           
  1932                           ;timer.c: 138: T2CON = 0b00100100;
  1933                           
  1934                           ;incstack = 0
  1935  0024D2  0E24               	movlw	36
  1936  0024D4  6ECA               	movwf	4042,c	;volatile
  1937                           
  1938                           ;timer.c: 141: T2CONbits.TOUTPS = 0b1000;
  1939  0024D6  50CA               	movf	4042,w,c	;volatile
  1940  0024D8  0B87               	andlw	-121
  1941  0024DA  0940               	iorlw	64
  1942  0024DC  6ECA               	movwf	4042,c	;volatile
  1943                           
  1944                           ;timer.c: 143: T2CONbits.T2CKPS = 0b00;
  1945  0024DE  0EFC               	movlw	-4
  1946  0024E0  16CA               	andwf	4042,f,c	;volatile
  1947                           
  1948                           ;timer.c: 149: PR2 = 200;
  1949  0024E2  0EC8               	movlw	200
  1950  0024E4  6ECB               	movwf	4043,c	;volatile
  1951                           
  1952                           ;timer.c: 152: IPR1bits.TMR2IP = 0;
  1953  0024E6  929F               	bcf	3999,1,c	;volatile
  1954                           
  1955                           ;timer.c: 153: IPR1bits.TMR2IP = 1;
  1956  0024E8  829F               	bsf	3999,1,c	;volatile
  1957  0024EA  0CC8               	retlw	200	;funcret
  1958  0024EC                     __end_of_Init_TIMER2:
  1959                           	opt stack 0
  1960                           tblptru	equ	0xFF8
  1961                           prodl	equ	0xFF3
  1962                           postinc0	equ	0xFEE
  1963                           wreg	equ	0xFE8
  1964                           postdec1	equ	0xFE5
  1965                           fsr1h	equ	0xFE2
  1966                           fsr1l	equ	0xFE1
  1967                           indf2	equ	0xFDF
  1968                           fsr2h	equ	0xFDA
  1969                           fsr2l	equ	0xFD9
  1970                           
  1971 ;; *************** function _Init_TIMER0 *****************
  1972 ;; Defined at:
  1973 ;;		line 21 in file "timer.c"
  1974 ;; Parameters:    Size  Location     Type
  1975 ;;		None
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;		None
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  1    wreg      void 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1987 ;;      Params:         0       0       0       0
  1988 ;;      Locals:         0       0       0       0
  1989 ;;      Temps:          0       0       0       0
  1990 ;;      Totals:         0       0       0       0
  1991 ;;Total ram usage:        0 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:   10
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_main
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text4
  2002  0023E2                     __ptext4:
  2003                           	opt stack 0
  2004  0023E2                     _Init_TIMER0:
  2005                           	opt stack 20
  2006                           
  2007                           ;timer.c: 25: T0CONbits.TMR0ON = 0;
  2008                           
  2009                           ;incstack = 0
  2010  0023E2  9ED5               	bcf	4053,7,c	;volatile
  2011                           
  2012                           ;timer.c: 29: T0CONbits.T016BIT = 0;
  2013  0023E4  9CD5               	bcf	4053,6,c	;volatile
  2014                           
  2015                           ;timer.c: 33: T0CONbits.T0CS = 0;
  2016  0023E6  9AD5               	bcf	4053,5,c	;volatile
  2017                           
  2018                           ;timer.c: 37: T0CONbits.T0SE = 0;
  2019  0023E8  98D5               	bcf	4053,4,c	;volatile
  2020                           
  2021                           ;timer.c: 41: T0CONbits.PSA = 0;
  2022  0023EA  96D5               	bcf	4053,3,c	;volatile
  2023                           
  2024                           ;timer.c: 45: T0CONbits.T0PS = 0b111;
  2025  0023EC  0E07               	movlw	7
  2026  0023EE  12D5               	iorwf	4053,f,c	;volatile
  2027                           
  2028                           ;timer.c: 53: T0CONbits.T0PS = 0b111;
  2029  0023F0  12D5               	iorwf	4053,f,c	;volatile
  2030                           
  2031                           ;timer.c: 54: T0CONbits.T0PS = 0b100;
  2032  0023F2  50D5               	movf	4053,w,c	;volatile
  2033  0023F4  0BF8               	andlw	-8
  2034  0023F6  0904               	iorlw	4
  2035  0023F8  6ED5               	movwf	4053,c	;volatile
  2036                           
  2037                           ;timer.c: 66: INTCON2bits.TMR0IP = 0;
  2038  0023FA  94F1               	bcf	intcon2,2,c	;volatile
  2039                           
  2040                           ;timer.c: 70: INTCONbits.TMR0IE = 0;
  2041  0023FC  9AF2               	bcf	intcon,5,c	;volatile
  2042                           
  2043                           ;timer.c: 71: INTCONbits.TMR0IF = 0;
  2044  0023FE  94F2               	bcf	intcon,2,c	;volatile
  2045  002400  0012               	return		;funcret
  2046  002402                     __end_of_Init_TIMER0:
  2047                           	opt stack 0
  2048                           tblptru	equ	0xFF8
  2049                           prodl	equ	0xFF3
  2050                           intcon	equ	0xFF2
  2051                           intcon2	equ	0xFF1
  2052                           postinc0	equ	0xFEE
  2053                           wreg	equ	0xFE8
  2054                           postdec1	equ	0xFE5
  2055                           fsr1h	equ	0xFE2
  2056                           fsr1l	equ	0xFE1
  2057                           indf2	equ	0xFDF
  2058                           fsr2h	equ	0xFDA
  2059                           fsr2l	equ	0xFD9
  2060                           
  2061 ;; *************** function _Init_SPI *****************
  2062 ;; Defined at:
  2063 ;;		line 24 in file "spi.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;		None
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;		None
  2068 ;; Return value:  Size  Location     Type
  2069 ;;                  1    wreg      void 
  2070 ;; Registers used:
  2071 ;;		wreg, status,2
  2072 ;; Tracked objects:
  2073 ;;		On entry : 3F/0
  2074 ;;		On exit  : 3F/0
  2075 ;;		Unchanged: 3F/0
  2076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2077 ;;      Params:         0       0       0       0
  2078 ;;      Locals:         0       0       0       0
  2079 ;;      Temps:          0       0       0       0
  2080 ;;      Totals:         0       0       0       0
  2081 ;;Total ram usage:        0 bytes
  2082 ;; Hardware stack levels used:    1
  2083 ;; Hardware stack levels required when called:   10
  2084 ;; This function calls:
  2085 ;;		Nothing
  2086 ;; This function is called by:
  2087 ;;		_main
  2088 ;; This function uses a non-reentrant model
  2089 ;;
  2090                           
  2091                           	psect	text5
  2092  002378                     __ptext5:
  2093                           	opt stack 0
  2094  002378                     _Init_SPI:
  2095                           	opt stack 20
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;spi.c: 28: TRISDbits.TRISD3 = 1;
  2099                           
  2100                           ;incstack = 0
  2101  002378  8695               	bsf	3989,3,c	;volatile
  2102                           
  2103                           ;spi.c: 29: TRISDbits.TRISD2 = 1;
  2104  00237A  8495               	bsf	3989,2,c	;volatile
  2105                           
  2106                           ;spi.c: 30: TRISDbits.TRISD1 = 0;
  2107  00237C  9295               	bcf	3989,1,c	;volatile
  2108                           
  2109                           ;spi.c: 81: SSPSTATbits.SMP = 0;
  2110  00237E  9EC7               	bcf	4039,7,c	;volatile
  2111                           
  2112                           ;spi.c: 82: SSPSTATbits.CKE = 0;
  2113  002380  9CC7               	bcf	4039,6,c	;volatile
  2114                           
  2115                           ;spi.c: 83: SSPSTATbits.CKE = 1;
  2116  002382  8CC7               	bsf	4039,6,c	;volatile
  2117                           
  2118                           ;spi.c: 154: SSPCONbits.WCOL = 0;
  2119  002384  9EC6               	bcf	4038,7,c	;volatile
  2120                           
  2121                           ;spi.c: 155: SSPCONbits.SSPOV = 0;
  2122  002386  9CC6               	bcf	4038,6,c	;volatile
  2123                           
  2124                           ;spi.c: 156: SSPCONbits.SSPEN = 1;
  2125  002388  8AC6               	bsf	4038,5,c	;volatile
  2126                           
  2127                           ;spi.c: 157: SSPCONbits.CKP = 1;
  2128  00238A  88C6               	bsf	4038,4,c	;volatile
  2129                           
  2130                           ;spi.c: 158: SSPCONbits.CKP = 0;
  2131  00238C  98C6               	bcf	4038,4,c	;volatile
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;spi.c: 159: SSPCONbits.SSPM = 0b0101;
  2135  00238E  50C6               	movf	4038,w,c	;volatile
  2136  002390  0BF0               	andlw	-16
  2137  002392  0905               	iorlw	5
  2138  002394  6EC6               	movwf	4038,c	;volatile
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;spi.c: 163: PIR1bits.SSPIF = 0;
  2142  002396  969E               	bcf	3998,3,c	;volatile
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;spi.c: 164: PIE1bits.SSPIE = 1;
  2146  002398  869D               	bsf	3997,3,c	;volatile
  2147                           
  2148                           ; BSR set to: 0
  2149  00239A  0012               	return		;funcret
  2150  00239C                     __end_of_Init_SPI:
  2151                           	opt stack 0
  2152                           tblptru	equ	0xFF8
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           intcon2	equ	0xFF1
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1h	equ	0xFE2
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           fsr2h	equ	0xFDA
  2163                           fsr2l	equ	0xFD9
  2164                           
  2165 ;; *************** function _Init_Port *****************
  2166 ;; Defined at:
  2167 ;;		line 14 in file "init.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  1    wreg      void 
  2174 ;; Registers used:
  2175 ;;		wreg, status,2
  2176 ;; Tracked objects:
  2177 ;;		On entry : 3F/0
  2178 ;;		On exit  : 3F/0
  2179 ;;		Unchanged: 3F/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2181 ;;      Params:         0       0       0       0
  2182 ;;      Locals:         0       0       0       0
  2183 ;;      Temps:          0       0       0       0
  2184 ;;      Totals:         0       0       0       0
  2185 ;;Total ram usage:        0 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:   10
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text6
  2196  001C92                     __ptext6:
  2197                           	opt stack 0
  2198  001C92                     _Init_Port:
  2199                           	opt stack 20
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;init.c: 24: TRISA = 0b11111111;
  2203                           
  2204                           ; BSR set to: 0
  2205                           ;incstack = 0
  2206  001C92  6892               	setf	3986,c	;volatile
  2207                           
  2208                           ;init.c: 25: TRISAbits.TRISA0 = 1;
  2209  001C94  8092               	bsf	3986,0,c	;volatile
  2210                           
  2211                           ;init.c: 26: TRISAbits.TRISA1 = 1;
  2212  001C96  8292               	bsf	3986,1,c	;volatile
  2213                           
  2214                           ;init.c: 27: TRISAbits.TRISA2 = 1;
  2215  001C98  8492               	bsf	3986,2,c	;volatile
  2216                           
  2217                           ;init.c: 28: TRISAbits.TRISA3 = 1;
  2218  001C9A  8692               	bsf	3986,3,c	;volatile
  2219                           
  2220                           ;init.c: 29: TRISAbits.TRISA4 = 1;
  2221  001C9C  8892               	bsf	3986,4,c	;volatile
  2222                           
  2223                           ;init.c: 30: TRISAbits.TRISA5 = 1;
  2224  001C9E  8A92               	bsf	3986,5,c	;volatile
  2225                           
  2226                           ;init.c: 31: TRISAbits.TRISA6 = 0;
  2227  001CA0  9C92               	bcf	3986,6,c	;volatile
  2228                           
  2229                           ;init.c: 32: TRISAbits.TRISA7 = 1;
  2230  001CA2  8E92               	bsf	3986,7,c	;volatile
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;init.c: 33: TRISB = 0b11111010;
  2234  001CA4  0EFA               	movlw	250
  2235  001CA6  6E93               	movwf	3987,c	;volatile
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;init.c: 34: TRISBbits.TRISB0 = 0;
  2239  001CA8  9093               	bcf	3987,0,c	;volatile
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;init.c: 35: TRISBbits.TRISB1 = 1;
  2243  001CAA  8293               	bsf	3987,1,c	;volatile
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;init.c: 36: TRISBbits.TRISB2 = 0;
  2247  001CAC  9493               	bcf	3987,2,c	;volatile
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;init.c: 37: TRISBbits.TRISB3 = 1;
  2251  001CAE  8693               	bsf	3987,3,c	;volatile
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;init.c: 38: TRISBbits.TRISB4 = 1;
  2255  001CB0  8893               	bsf	3987,4,c	;volatile
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;init.c: 39: TRISBbits.TRISB5 = 1;
  2259  001CB2  8A93               	bsf	3987,5,c	;volatile
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;init.c: 40: TRISBbits.TRISB6 = 1;
  2263  001CB4  8C93               	bsf	3987,6,c	;volatile
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;init.c: 41: TRISBbits.TRISB7 = 1;
  2267  001CB6  8E93               	bsf	3987,7,c	;volatile
  2268                           
  2269                           ;init.c: 42: TRISC = 0b11011100;
  2270  001CB8  0EDC               	movlw	220
  2271  001CBA  6E94               	movwf	3988,c	;volatile
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;init.c: 43: TRISCbits.TRISC0 = 0;
  2275  001CBC  9094               	bcf	3988,0,c	;volatile
  2276                           
  2277                           ; BSR set to: 0
  2278                           ;init.c: 44: TRISCbits.TRISC1 = 0;
  2279  001CBE  9294               	bcf	3988,1,c	;volatile
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;init.c: 45: TRISCbits.TRISC2 = 0;
  2283  001CC0  9494               	bcf	3988,2,c	;volatile
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;init.c: 46: TRISCbits.TRISC3 = 1;
  2287  001CC2  8694               	bsf	3988,3,c	;volatile
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;init.c: 47: TRISCbits.TRISC4 = 1;
  2291  001CC4  8894               	bsf	3988,4,c	;volatile
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;init.c: 48: TRISCbits.TRISC5 = 1;
  2295  001CC6  8A94               	bsf	3988,5,c	;volatile
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;init.c: 49: TRISCbits.TRISC6 = 0;
  2299  001CC8  9C94               	bcf	3988,6,c	;volatile
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;init.c: 50: TRISCbits.TRISC7 = 1;
  2303  001CCA  8E94               	bsf	3988,7,c	;volatile
  2304                           
  2305                           ;init.c: 51: TRISD = 0b00001111;
  2306  001CCC  0E0F               	movlw	15
  2307  001CCE  6E95               	movwf	3989,c	;volatile
  2308                           
  2309                           ;init.c: 52: TRISD = 0b00000111;
  2310  001CD0  0E07               	movlw	7
  2311  001CD2  6E95               	movwf	3989,c	;volatile
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;init.c: 53: TRISDbits.TRISD0 = 1;
  2315  001CD4  8095               	bsf	3989,0,c	;volatile
  2316                           
  2317                           ; BSR set to: 0
  2318                           ;init.c: 54: TRISDbits.TRISD1 = 1;
  2319  001CD6  8295               	bsf	3989,1,c	;volatile
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;init.c: 55: TRISDbits.TRISD2 = 1;
  2323  001CD8  8495               	bsf	3989,2,c	;volatile
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;init.c: 57: TRISDbits.TRISD3 = 0;
  2327  001CDA  9695               	bcf	3989,3,c	;volatile
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;init.c: 58: TRISDbits.TRISD4 = 0;
  2331  001CDC  9895               	bcf	3989,4,c	;volatile
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;init.c: 59: TRISDbits.TRISD5 = 0;
  2335  001CDE  9A95               	bcf	3989,5,c	;volatile
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;init.c: 60: TRISDbits.TRISD6 = 0;
  2339  001CE0  9C95               	bcf	3989,6,c	;volatile
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;init.c: 61: TRISDbits.TRISD7 = 0;
  2343  001CE2  9E95               	bcf	3989,7,c	;volatile
  2344                           
  2345                           ;init.c: 62: TRISE = 0b00000111;
  2346  001CE4  6E96               	movwf	3990,c	;volatile
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;init.c: 63: TRISEbits.TRISE0 = 1;
  2350  001CE6  8096               	bsf	3990,0,c	;volatile
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;init.c: 64: TRISEbits.TRISE1 = 1;
  2354  001CE8  8296               	bsf	3990,1,c	;volatile
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;init.c: 65: TRISEbits.TRISE2 = 0;
  2358  001CEA  9496               	bcf	3990,2,c	;volatile
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;init.c: 78: LATA = 0b00000000;
  2362  001CEC  6A89               	clrf	3977,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;init.c: 79: LATB = 0b00000000;
  2366  001CEE  6A8A               	clrf	3978,c	;volatile
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;init.c: 80: LATC = 0b00000000;
  2370  001CF0  6A8B               	clrf	3979,c	;volatile
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;init.c: 81: LATD = 0b00000000;
  2374  001CF2  6A8C               	clrf	3980,c	;volatile
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;init.c: 82: LATE = 0b00000000;
  2378  001CF4  6A8D               	clrf	3981,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381  001CF6  0012               	return		;funcret
  2382  001CF8                     __end_of_Init_Port:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           prodl	equ	0xFF3
  2386                           intcon	equ	0xFF2
  2387                           intcon2	equ	0xFF1
  2388                           postinc0	equ	0xFEE
  2389                           wreg	equ	0xFE8
  2390                           postdec1	equ	0xFE5
  2391                           fsr1h	equ	0xFE2
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           fsr2h	equ	0xFDA
  2395                           fsr2l	equ	0xFD9
  2396                           
  2397 ;; *************** function _Init_PWM *****************
  2398 ;; Defined at:
  2399 ;;		line 14 in file "pwm.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2413 ;;      Params:         0       0       0       0
  2414 ;;      Locals:         0       0       0       0
  2415 ;;      Temps:          0       0       0       0
  2416 ;;      Totals:         0       0       0       0
  2417 ;;Total ram usage:        0 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:   10
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text7
  2428  00249A                     __ptext7:
  2429                           	opt stack 0
  2430  00249A                     _Init_PWM:
  2431                           	opt stack 20
  2432                           
  2433                           ;pwm.c: 15: PTPERL = 99;
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;incstack = 0
  2437  00249A  0E63               	movlw	99
  2438  00249C  6E7B               	movwf	3963,c	;volatile
  2439                           
  2440                           ;pwm.c: 16: PTPERH = 0;
  2441  00249E  6A7A               	clrf	3962,c	;volatile
  2442                           
  2443                           ;pwm.c: 18: PTCON0 = 0b00000000;
  2444  0024A0  6A7F               	clrf	3967,c	;volatile
  2445                           
  2446                           ;pwm.c: 20: PTCON1 = 0b10000000;
  2447  0024A2  0E80               	movlw	128
  2448  0024A4  6E7E               	movwf	3966,c	;volatile
  2449                           
  2450                           ;pwm.c: 22: PWMCON0 = 0b00111111;
  2451  0024A6  0E3F               	movlw	63
  2452  0024A8  6E6F               	movwf	3951,c	;volatile
  2453                           
  2454                           ;pwm.c: 23: PWMCON1 = 0b00000000;
  2455  0024AA  6A6E               	clrf	3950,c	;volatile
  2456                           
  2457                           ;pwm.c: 25: DTCON = 0b00000000;
  2458  0024AC  6A6D               	clrf	3949,c	;volatile
  2459                           
  2460                           ;pwm.c: 26: OVDCOND = 0b00000101;
  2461  0024AE  0E05               	movlw	5
  2462  0024B0  6E6B               	movwf	3947,c	;volatile
  2463                           
  2464                           ;pwm.c: 27: OVDCONS = 0b00000000;
  2465  0024B2  6A6A               	clrf	3946,c	;volatile
  2466  0024B4  0012               	return		;funcret
  2467  0024B6                     __end_of_Init_PWM:
  2468                           	opt stack 0
  2469                           tblptru	equ	0xFF8
  2470                           prodl	equ	0xFF3
  2471                           intcon	equ	0xFF2
  2472                           intcon2	equ	0xFF1
  2473                           postinc0	equ	0xFEE
  2474                           wreg	equ	0xFE8
  2475                           postdec1	equ	0xFE5
  2476                           fsr1h	equ	0xFE2
  2477                           fsr1l	equ	0xFE1
  2478                           indf2	equ	0xFDF
  2479                           fsr2h	equ	0xFDA
  2480                           fsr2l	equ	0xFD9
  2481                           
  2482 ;; *************** function _Init_IT *****************
  2483 ;; Defined at:
  2484 ;;		line 70 in file "interrupt.c"
  2485 ;; Parameters:    Size  Location     Type
  2486 ;;		None
  2487 ;; Auto vars:     Size  Location     Type
  2488 ;;		None
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  1    wreg      void 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 3F/0
  2495 ;;		On exit  : 3F/0
  2496 ;;		Unchanged: 3F/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         0       0       0       0
  2499 ;;      Locals:         0       0       0       0
  2500 ;;      Temps:          0       0       0       0
  2501 ;;      Totals:         0       0       0       0
  2502 ;;Total ram usage:        0 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:   11
  2505 ;; This function calls:
  2506 ;;		_Init_Input_Capture_0
  2507 ;; This function is called by:
  2508 ;;		_main
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text8
  2513  002142                     __ptext8:
  2514                           	opt stack 0
  2515  002142                     _Init_IT:
  2516                           	opt stack 19
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;interrupt.c: 71: INTCONbits.GIE = 1;
  2520                           
  2521                           ;incstack = 0
  2522  002142  8EF2               	bsf	intcon,7,c	;volatile
  2523                           
  2524                           ;interrupt.c: 72: INTCONbits.PEIE = 1;
  2525  002144  8CF2               	bsf	intcon,6,c	;volatile
  2526                           
  2527                           ;interrupt.c: 73: INTCONbits.TMR0IE = 0;
  2528  002146  9AF2               	bcf	intcon,5,c	;volatile
  2529                           
  2530                           ;interrupt.c: 74: INTCONbits.INT0IE = 0;
  2531  002148  98F2               	bcf	intcon,4,c	;volatile
  2532                           
  2533                           ;interrupt.c: 75: INTCONbits.RBIE = 0;
  2534  00214A  96F2               	bcf	intcon,3,c	;volatile
  2535                           
  2536                           ;interrupt.c: 76: INTCONbits.TMR0IF = 0;
  2537  00214C  94F2               	bcf	intcon,2,c	;volatile
  2538                           
  2539                           ;interrupt.c: 77: INTCONbits.INT0IF = 0;
  2540  00214E  92F2               	bcf	intcon,1,c	;volatile
  2541                           
  2542                           ;interrupt.c: 78: INTCONbits.RBIF = 0;
  2543  002150  90F2               	bcf	intcon,0,c	;volatile
  2544                           
  2545                           ;interrupt.c: 82: INTCON2bits.RBPU = 1;
  2546  002152  8EF1               	bsf	intcon2,7,c	;volatile
  2547                           
  2548                           ;interrupt.c: 83: INTCON2bits.INTEDG0 = 1;
  2549  002154  8CF1               	bsf	intcon2,6,c	;volatile
  2550                           
  2551                           ;interrupt.c: 84: INTCON2bits.INTEDG0 = 0;
  2552  002156  9CF1               	bcf	intcon2,6,c	;volatile
  2553                           
  2554                           ;interrupt.c: 85: INTCON2bits.INTEDG1 = 1;
  2555  002158  8AF1               	bsf	intcon2,5,c	;volatile
  2556                           
  2557                           ;interrupt.c: 86: INTCON2bits.INTEDG2 = 1;
  2558  00215A  88F1               	bsf	intcon2,4,c	;volatile
  2559                           
  2560                           ;interrupt.c: 88: INTCON2bits.TMR0IP = 0;
  2561  00215C  94F1               	bcf	intcon2,2,c	;volatile
  2562                           
  2563                           ;interrupt.c: 90: INTCON2bits.RBIP = 0;
  2564  00215E  90F1               	bcf	intcon2,0,c	;volatile
  2565                           
  2566                           ;interrupt.c: 95: INTCON3bits.INT2IP = 1;
  2567  002160  8EF0               	bsf	intcon3,7,c	;volatile
  2568                           
  2569                           ;interrupt.c: 96: INTCON3bits.INT1IP = 1;
  2570  002162  8CF0               	bsf	intcon3,6,c	;volatile
  2571                           
  2572                           ;interrupt.c: 98: INTCON3bits.INT2IE = 0;
  2573  002164  98F0               	bcf	intcon3,4,c	;volatile
  2574                           
  2575                           ;interrupt.c: 99: INTCON3bits.INT1IE = 0;
  2576  002166  96F0               	bcf	intcon3,3,c	;volatile
  2577                           
  2578                           ;interrupt.c: 101: INTCON3bits.INT2IF = 0;
  2579  002168  92F0               	bcf	intcon3,1,c	;volatile
  2580                           
  2581                           ;interrupt.c: 102: INTCON3bits.INT1IF = 0;
  2582  00216A  90F0               	bcf	intcon3,0,c	;volatile
  2583                           
  2584                           ;interrupt.c: 121: RCONbits.IPEN = 1;
  2585  00216C  8ED0               	bsf	4048,7,c	;volatile
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;interrupt.c: 125: Init_Input_Capture_0();
  2589  00216E  ECE0  F011         	call	_Init_Input_Capture_0	;wreg free
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;interrupt.c: 131: IPR1bits.SSPIP = 0;
  2593  002172  969F               	bcf	3999,3,c	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596  002174  0012               	return		;funcret
  2597  002176                     __end_of_Init_IT:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           intcon2	equ	0xFF1
  2603                           intcon3	equ	0xFF0
  2604                           postinc0	equ	0xFEE
  2605                           wreg	equ	0xFE8
  2606                           postdec1	equ	0xFE5
  2607                           fsr1h	equ	0xFE2
  2608                           fsr1l	equ	0xFE1
  2609                           indf2	equ	0xFDF
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           
  2613 ;; *************** function _Init_Input_Capture_0 *****************
  2614 ;; Defined at:
  2615 ;;		line 139 in file "interrupt.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2
  2624 ;; Tracked objects:
  2625 ;;		On entry : 3F/0
  2626 ;;		On exit  : 3F/0
  2627 ;;		Unchanged: 3F/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2629 ;;      Params:         0       0       0       0
  2630 ;;      Locals:         0       0       0       0
  2631 ;;      Temps:          0       0       0       0
  2632 ;;      Totals:         0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:   10
  2636 ;; This function calls:
  2637 ;;		Nothing
  2638 ;; This function is called by:
  2639 ;;		_Init_IT
  2640 ;; This function uses a non-reentrant model
  2641 ;;
  2642                           
  2643                           	psect	text9
  2644  0023C0                     __ptext9:
  2645                           	opt stack 0
  2646  0023C0                     _Init_Input_Capture_0:
  2647                           	opt stack 19
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;interrupt.c: 143: CAP1CONbits.CAP1REN = 0;
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;incstack = 0
  2654  0023C0  9C63               	bcf	3939,6,c	;volatile
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;interrupt.c: 149: CAP1CONbits.CAP1M = 0b1000;
  2658  0023C2  5063               	movf	3939,w,c	;volatile
  2659  0023C4  0BF0               	andlw	-16
  2660  0023C6  0908               	iorlw	8
  2661  0023C8  6E63               	movwf	3939,c	;volatile
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;interrupt.c: 153: PIE3bits.IC1IE = 0;
  2665  0023CA  92A3               	bcf	4003,1,c	;volatile
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;interrupt.c: 154: IPR3bits.IC1IP = 0;
  2669  0023CC  92A5               	bcf	4005,1,c	;volatile
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;interrupt.c: 155: PIR3bits.IC1IF = 0;
  2673  0023CE  92A4               	bcf	4004,1,c	;volatile
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;interrupt.c: 161: CAP2CONbits.CAP2REN = 0;
  2677  0023D0  9C62               	bcf	3938,6,c	;volatile
  2678                           
  2679                           ;interrupt.c: 166: CAP2CONbits.CAP2M = 0b1000;
  2680  0023D2  5062               	movf	3938,w,c	;volatile
  2681  0023D4  0BF0               	andlw	-16
  2682  0023D6  0908               	iorlw	8
  2683  0023D8  6E62               	movwf	3938,c	;volatile
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;interrupt.c: 171: PIE3bits.IC2QEIE = 0;
  2687  0023DA  94A3               	bcf	4003,2,c	;volatile
  2688                           
  2689                           ; BSR set to: 0
  2690                           ;interrupt.c: 172: IPR3bits.IC2QEIP = 0;
  2691  0023DC  94A5               	bcf	4005,2,c	;volatile
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;interrupt.c: 173: PIR3bits.IC2QEIF = 0;
  2695  0023DE  94A4               	bcf	4004,2,c	;volatile
  2696                           
  2697                           ; BSR set to: 0
  2698  0023E0  0012               	return		;funcret
  2699  0023E2                     __end_of_Init_Input_Capture_0:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           prodl	equ	0xFF3
  2703                           intcon	equ	0xFF2
  2704                           intcon2	equ	0xFF1
  2705                           intcon3	equ	0xFF0
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1h	equ	0xFE2
  2710                           fsr1l	equ	0xFE1
  2711                           indf2	equ	0xFDF
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           
  2715 ;; *************** function _Init_ADC *****************
  2716 ;; Defined at:
  2717 ;;		line 14 in file "adc.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;		None
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  1    wreg      void 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2731 ;;      Params:         0       0       0       0
  2732 ;;      Locals:         0       0       0       0
  2733 ;;      Temps:          0       0       0       0
  2734 ;;      Totals:         0       0       0       0
  2735 ;;Total ram usage:        0 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:   10
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_main
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text10
  2746  002402                     __ptext10:
  2747                           	opt stack 0
  2748  002402                     _Init_ADC:
  2749                           	opt stack 20
  2750                           
  2751                           ;adc.c: 15: ADCON0 = 0b00000000;
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;incstack = 0
  2755  002402  6AC2               	clrf	4034,c	;volatile
  2756                           
  2757                           ;adc.c: 16: ADCON1 = 0b00000000;
  2758  002404  6AC1               	clrf	4033,c	;volatile
  2759                           
  2760                           ;adc.c: 17: ADCON2 = 0b10010100;
  2761  002406  0E94               	movlw	148
  2762  002408  6EC0               	movwf	4032,c	;volatile
  2763                           
  2764                           ;adc.c: 18: ADCON2bits.ADCS = 0b001;
  2765  00240A  50C0               	movf	4032,w,c	;volatile
  2766  00240C  0BF8               	andlw	-8
  2767  00240E  0901               	iorlw	1
  2768  002410  6EC0               	movwf	4032,c	;volatile
  2769                           
  2770                           ;adc.c: 19: ADCON3 = 0b11000000;
  2771  002412  0EC0               	movlw	192
  2772  002414  6E9A               	movwf	3994,c	;volatile
  2773                           
  2774                           ;adc.c: 20: ADCHS = 0b00000000;
  2775  002416  6A99               	clrf	3993,c	;volatile
  2776                           
  2777                           ;adc.c: 21: ANSEL0 = 0b00000011;
  2778  002418  0E03               	movlw	3
  2779  00241A  6EB8               	movwf	4024,c	;volatile
  2780                           
  2781                           ;adc.c: 23: ANSEL1 = 0b00000000;
  2782  00241C  6AB9               	clrf	4025,c	;volatile
  2783                           
  2784                           ;adc.c: 24: ADON = 1;
  2785  00241E  80C2               	bsf	4034,0,c	;volatile
  2786  002420  0012               	return		;funcret
  2787  002422                     __end_of_Init_ADC:
  2788                           	opt stack 0
  2789                           tblptru	equ	0xFF8
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           intcon2	equ	0xFF1
  2793                           intcon3	equ	0xFF0
  2794                           postinc0	equ	0xFEE
  2795                           wreg	equ	0xFE8
  2796                           postdec1	equ	0xFE5
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           
  2803 ;; *************** function _EUSART1_Initialize *****************
  2804 ;; Defined at:
  2805 ;;		line 299 in file "eusart.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 3F/0
  2816 ;;		On exit  : 3F/0
  2817 ;;		Unchanged: 3F/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2819 ;;      Params:         0       0       0       0
  2820 ;;      Locals:         0       0       0       0
  2821 ;;      Temps:          0       0       0       0
  2822 ;;      Totals:         0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:   11
  2826 ;; This function calls:
  2827 ;;		_EUSART1_IT_ACTIVATE
  2828 ;; This function is called by:
  2829 ;;		_main
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text11
  2834  001F1E                     __ptext11:
  2835                           	opt stack 0
  2836  001F1E                     _EUSART1_Initialize:
  2837                           	opt stack 19
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;eusart.c: 303: PIE1bits.RC1IE = 0;
  2841                           
  2842                           ;incstack = 0
  2843  001F1E  9A9D               	bcf	3997,5,c	;volatile
  2844                           
  2845                           ;eusart.c: 304: PIE1bits.TX1IE = 0;
  2846  001F20  989D               	bcf	3997,4,c	;volatile
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;eusart.c: 307: BAUDCON = 0x48;
  2850  001F22  0E48               	movlw	72
  2851  001F24  6EAA               	movwf	4010,c	;volatile
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;eusart.c: 308: BAUDCONbits.BRG16 = 1;
  2855  001F26  86AA               	bsf	4010,3,c	;volatile
  2856                           
  2857                           ;eusart.c: 313: RCSTA1 = 0x80;
  2858  001F28  0E80               	movlw	128
  2859  001F2A  6EAB               	movwf	4011,c	;volatile
  2860                           
  2861                           ;eusart.c: 316: TXSTA1 = 0x24;
  2862  001F2C  0E24               	movlw	36
  2863  001F2E  6EAC               	movwf	4012,c	;volatile
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;eusart.c: 317: TXSTA1bits.SYNC = 0;
  2867  001F30  98AC               	bcf	4012,4,c	;volatile
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;eusart.c: 318: TXSTA1bits.BRGH = 1;
  2871  001F32  84AC               	bsf	4012,2,c	;volatile
  2872                           
  2873                           ;eusart.c: 321: SPBRG = 0x22;
  2874  001F34  0E22               	movlw	34
  2875  001F36  6EAF               	movwf	4015,c	;volatile
  2876                           
  2877                           ;eusart.c: 322: SPBRG = 0x11;
  2878  001F38  0E11               	movlw	17
  2879  001F3A  6EAF               	movwf	4015,c	;volatile
  2880                           
  2881                           ;eusart.c: 323: SPBRG = 0x12;
  2882  001F3C  0E12               	movlw	18
  2883  001F3E  6EAF               	movwf	4015,c	;volatile
  2884                           
  2885                           ;eusart.c: 324: SPBRG = 0x10;
  2886  001F40  0E10               	movlw	16
  2887  001F42  6EAF               	movwf	4015,c	;volatile
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;eusart.c: 328: SPBRGH = 0x00;
  2891  001F44  6AB0               	clrf	4016,c	;volatile
  2892                           
  2893                           ;eusart.c: 330: SPBRG = 0x0B;
  2894  001F46  0E0B               	movlw	11
  2895  001F48  6EAF               	movwf	4015,c	;volatile
  2896                           
  2897                           ;eusart.c: 331: SPBRGH = 0x33;
  2898  001F4A  0E33               	movlw	51
  2899  001F4C  6EB0               	movwf	4016,c	;volatile
  2900                           
  2901                           ;eusart.c: 333: SPBRG = 205;
  2902  001F4E  0ECD               	movlw	205
  2903  001F50  6EAF               	movwf	4015,c	;volatile
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;eusart.c: 334: SPBRGH = 0x00;
  2907  001F52  6AB0               	clrf	4016,c	;volatile
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;eusart.c: 339: BAUDCONbits.BRG16 = 0;
  2911  001F54  96AA               	bcf	4010,3,c	;volatile
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;eusart.c: 340: TXSTA1bits.BRGH = 0;
  2915  001F56  94AC               	bcf	4012,2,c	;volatile
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;eusart.c: 341: TXSTA1bits.SYNC = 0;
  2919  001F58  98AC               	bcf	4012,4,c	;volatile
  2920                           
  2921                           ;eusart.c: 343: SPBRG = 12;
  2922  001F5A  0E0C               	movlw	12
  2923  001F5C  6EAF               	movwf	4015,c	;volatile
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;eusart.c: 344: SPBRGH = 0x00;
  2927  001F5E  6AB0               	clrf	4016,c	;volatile
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;eusart.c: 397: eusart1TxIndex = 0;
  2931  001F60  6A46               	clrf	_eusart1TxIndex,c	;volatile
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;eusart.c: 398: eusart1RxIndex = 0;
  2935  001F62  6A45               	clrf	_eusart1RxIndex,c	;volatile
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;eusart.c: 427: IPR1bits.TX1IP = 0;
  2939  001F64  989F               	bcf	3999,4,c	;volatile
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;eusart.c: 428: IPR1bits.RC1IP = 0;
  2943  001F66  9A9F               	bcf	3999,5,c	;volatile
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;eusart.c: 431: RX1_full = 0;
  2947  001F68  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;eusart.c: 438: EUSART1_IT_ACTIVATE();
  2951  001F6A  EF5D  F013         	goto	_EUSART1_IT_ACTIVATE	;wreg free
  2952  001F6E                     __end_of_EUSART1_Initialize:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           prodl	equ	0xFF3
  2956                           intcon	equ	0xFF2
  2957                           intcon2	equ	0xFF1
  2958                           intcon3	equ	0xFF0
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1h	equ	0xFE2
  2963                           fsr1l	equ	0xFE1
  2964                           indf2	equ	0xFDF
  2965                           fsr2h	equ	0xFDA
  2966                           fsr2l	equ	0xFD9
  2967                           
  2968 ;; *************** function _EUSART1_IT_ACTIVATE *****************
  2969 ;; Defined at:
  2970 ;;		line 232 in file "eusart.c"
  2971 ;; Parameters:    Size  Location     Type
  2972 ;;		None
  2973 ;; Auto vars:     Size  Location     Type
  2974 ;;		None
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  1    wreg      void 
  2977 ;; Registers used:
  2978 ;;		None
  2979 ;; Tracked objects:
  2980 ;;		On entry : 3F/0
  2981 ;;		On exit  : 3F/0
  2982 ;;		Unchanged: 3F/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2984 ;;      Params:         0       0       0       0
  2985 ;;      Locals:         0       0       0       0
  2986 ;;      Temps:          0       0       0       0
  2987 ;;      Totals:         0       0       0       0
  2988 ;;Total ram usage:        0 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:   10
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_EUSART1_Initialize
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text12
  2999  0026BA                     __ptext12:
  3000                           	opt stack 0
  3001  0026BA                     _EUSART1_IT_ACTIVATE:
  3002                           	opt stack 19
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;eusart.c: 235: RCSTA1bits.CREN = 1;
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;incstack = 0
  3009  0026BA  88AB               	bsf	4011,4,c	;volatile
  3010                           
  3011                           ;eusart.c: 240: PIR1bits.RC1IF = 0;
  3012  0026BC  9A9E               	bcf	3998,5,c	;volatile
  3013                           
  3014                           ;eusart.c: 241: PIE1bits.RC1IE = 1;
  3015  0026BE  8A9D               	bsf	3997,5,c	;volatile
  3016                           
  3017                           ;eusart.c: 244: PIR1bits.TX1IF = 0;
  3018  0026C0  989E               	bcf	3998,4,c	;volatile
  3019                           
  3020                           ;eusart.c: 245: PIE1bits.TX1IE = 1;
  3021  0026C2  889D               	bsf	3997,4,c	;volatile
  3022                           
  3023                           ; BSR set to: 0
  3024  0026C4  0012               	return		;funcret
  3025  0026C6                     __end_of_EUSART1_IT_ACTIVATE:
  3026                           	opt stack 0
  3027                           tblptru	equ	0xFF8
  3028                           prodl	equ	0xFF3
  3029                           intcon	equ	0xFF2
  3030                           intcon2	equ	0xFF1
  3031                           intcon3	equ	0xFF0
  3032                           postinc0	equ	0xFEE
  3033                           wreg	equ	0xFE8
  3034                           postdec1	equ	0xFE5
  3035                           fsr1h	equ	0xFE2
  3036                           fsr1l	equ	0xFE1
  3037                           indf2	equ	0xFDF
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           
  3041 ;; *************** function _Cycle *****************
  3042 ;; Defined at:
  3043 ;;		line 322 in file "MOTEUR.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  i               1   10[BANK2 ] unsigned char 
  3048 ;;  j               1    0        unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  1    wreg      void 
  3051 ;; Registers used:
  3052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3058 ;;      Params:         0       0       0       0
  3059 ;;      Locals:         0       0       0       1
  3060 ;;      Temps:          0       0       0       0
  3061 ;;      Totals:         0       0       0       1
  3062 ;;Total ram usage:        1 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:   19
  3065 ;; This function calls:
  3066 ;;		_Alarme_On
  3067 ;;		_Buzzer_Etat
  3068 ;;		_Coupe_Moteur
  3069 ;;		_EUSART1_Check_Buffer
  3070 ;;		_Etat_Get
  3071 ;;		_Etat_Update
  3072 ;;		_Mouvement_Bequille
  3073 ;;		_Mouvement_X
  3074 ;;		_Mouvement_Z
  3075 ;;		_SPI_Check_Buffer
  3076 ;;		_delay_n_100ms
  3077 ;;		_delay_s
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text13
  3084  000BBE                     __ptext13:
  3085                           	opt stack 0
  3086  000BBE                     _Cycle:
  3087                           	opt stack 11
  3088  000BBE                     
  3089                           ;MOTEUR.c: 356: EUSART1_Check_Buffer();
  3090  000BBE  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  3091                           
  3092                           ;MOTEUR.c: 358: SPI_Check_Buffer();
  3093  000BC2  EC08  F011         	call	_SPI_Check_Buffer	;wreg free
  3094                           
  3095                           ;MOTEUR.c: 361: if (PORTBbits.RB4==1){
  3096  000BC6  A881               	btfss	3969,4,c	;volatile
  3097  000BC8  D11F               	goto	l9074
  3098  000BCA  D10D               	goto	l9072
  3099  000BCC                     l8938:
  3100                           
  3101                           ;MOTEUR.c: 373: delay_s(1);
  3102  000BCC  0E01               	movlw	1
  3103  000BCE  EC96  F011         	call	_delay_s
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;MOTEUR.c: 377: if (Option_Multitas == 0) {
  3107  000BD2  BC4F               	btfsc	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  3108  000BD4  D01C               	goto	l8958
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;MOTEUR.c: 380: Mouvement_X(0, 1, 0x02 | 0x60);
  3112  000BD6  0E01               	movlw	1
  3113  000BD8  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3114  000BDA  0E62               	movlw	98
  3115  000BDC  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3116  000BDE  0E00               	movlw	0
  3117  000BE0  ECB0  F008         	call	_Mouvement_X
  3118                           
  3119                           ;MOTEUR.c: 384: Patinage_Nb_Essai -= 1;
  3120  000BE4  0100               	movlb	0	; () banked
  3121  000BE6  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3122                           
  3123                           ; BSR set to: 0
  3124                           ;MOTEUR.c: 385: if (Patinage_Nb_Essai > 0) {
  3125  000BE8  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3126  000BEA  E008               	bz	l8954
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;MOTEUR.c: 386: nb_s_fonctionnement = 0;
  3130  000BEC  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;MOTEUR.c: 391: delay_s(3);
  3134  000BEE  0E03               	movlw	3
  3135  000BF0  EC96  F011         	call	_delay_s
  3136                           
  3137                           ; BSR set to: 0
  3138                           ;MOTEUR.c: 392: Etat_Update(2);
  3139  000BF4  0E02               	movlw	2
  3140  000BF6  EC20  F012         	call	_Etat_Update
  3141                           
  3142                           ;MOTEUR.c: 393: } else {
  3143  000BFA  D7E1               	goto	l8932
  3144  000BFC                     l8954:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;MOTEUR.c: 394: Etat_Update(2);
  3148  000BFC  0E02               	movlw	2
  3149  000BFE  EC20  F012         	call	_Etat_Update
  3150                           
  3151                           ;MOTEUR.c: 396: P4_busy = 0;
  3152  000C02  0100               	movlb	0	; () banked
  3153  000C04  6BAC               	clrf	_P4_busy& (0+255),b
  3154                           
  3155                           ;MOTEUR.c: 397: Etat_Update(7);
  3156  000C06  0E07               	movlw	7
  3157  000C08  EC20  F012         	call	_Etat_Update
  3158  000C0C  D7D8               	goto	l8932
  3159  000C0E                     l8958:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;MOTEUR.c: 402: Etat_Update(0);
  3163  000C0E  0E00               	movlw	0
  3164  000C10  EC20  F012         	call	_Etat_Update
  3165                           
  3166                           ;MOTEUR.c: 404: P4_busy = 0;
  3167  000C14  0100               	movlb	0	; () banked
  3168  000C16  6BAC               	clrf	_P4_busy& (0+255),b
  3169  000C18  D7D2               	goto	l8932
  3170  000C1A                     l8962:
  3171                           
  3172                           ;MOTEUR.c: 412: delay_s(1);
  3173  000C1A  0E01               	movlw	1
  3174  000C1C  EC96  F011         	call	_delay_s
  3175                           
  3176                           ;MOTEUR.c: 415: Mouvement_X(1, 1, 0x02 | 0x60);
  3177  000C20  0E01               	movlw	1
  3178  000C22  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3179  000C24  0E62               	movlw	98
  3180  000C26  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3181  000C28  0E01               	movlw	1
  3182  000C2A  ECB0  F008         	call	_Mouvement_X
  3183                           
  3184                           ;MOTEUR.c: 416: Patinage_Nb_Essai -= 1;
  3185  000C2E  0100               	movlb	0	; () banked
  3186  000C30  079D               	decf	_Patinage_Nb_Essai& (0+255),f,b
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;MOTEUR.c: 417: if (Patinage_Nb_Essai > 0) {
  3190  000C32  519D               	movf	_Patinage_Nb_Essai& (0+255),w,b
  3191  000C34  E008               	bz	l8974
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;MOTEUR.c: 418: nb_s_fonctionnement = 0;
  3195  000C36  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;MOTEUR.c: 419: delay_s(3);
  3199  000C38  0E03               	movlw	3
  3200  000C3A  EC96  F011         	call	_delay_s
  3201                           
  3202                           ; BSR set to: 0
  3203                           ;MOTEUR.c: 420: Etat_Update(3);
  3204  000C3E  0E03               	movlw	3
  3205  000C40  EC20  F012         	call	_Etat_Update
  3206                           
  3207                           ;MOTEUR.c: 421: } else {
  3208  000C44  D7BC               	goto	l8932
  3209  000C46                     l8974:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;MOTEUR.c: 422: Etat_Update(3);
  3213  000C46  0E03               	movlw	3
  3214  000C48  EC20  F012         	call	_Etat_Update
  3215                           
  3216                           ;MOTEUR.c: 424: P4_busy = 0;
  3217  000C4C  0100               	movlb	0	; () banked
  3218  000C4E  6BAC               	clrf	_P4_busy& (0+255),b
  3219                           
  3220                           ;MOTEUR.c: 425: Etat_Update(7);
  3221  000C50  0E07               	movlw	7
  3222  000C52  EC20  F012         	call	_Etat_Update
  3223  000C56  D7B3               	goto	l8932
  3224  000C58                     l248:
  3225                           
  3226                           ;MOTEUR.c: 429: P4_busy = 0;
  3227  000C58  0100               	movlb	0	; () banked
  3228  000C5A  6BAC               	clrf	_P4_busy& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;MOTEUR.c: 430: Etat_Update(70);
  3232  000C5C  0E46               	movlw	70
  3233  000C5E  EC20  F012         	call	_Etat_Update
  3234                           
  3235                           ;MOTEUR.c: 431: break;
  3236  000C62  D7AD               	goto	l8932
  3237  000C64                     l8982:
  3238                           
  3239                           ; BSR set to: 0
  3240  000C64  0E01               	movlw	1
  3241  000C66  ECEF  F010         	call	_Etat_Get
  3242                           
  3243                           ; Switch size 1, requested type "speed"
  3244                           ; Number of cases is 2, Range of values is 2 to 3
  3245                           ; switch strategies available:
  3246                           ; Name         Instructions Cycles
  3247                           ; simple_byte            7     4 (average)
  3248                           ;	Chosen strategy is simple_byte
  3249  000C6A  0A02               	xorlw	2	; case 2
  3250  000C6C  E0AF               	bz	l8938
  3251  000C6E  0A01               	xorlw	1	; case 3
  3252  000C70  E0D4               	bz	l8962
  3253  000C72  D7F2               	goto	l248
  3254  000C74                     l8984:
  3255                           
  3256                           ;MOTEUR.c: 452: delay_s(1);
  3257  000C74  0E01               	movlw	1
  3258  000C76  EC96  F011         	call	_delay_s
  3259                           
  3260                           ;MOTEUR.c: 455: Mouvement_X(0, 1, 0x02 | 0x60);
  3261  000C7A  0E01               	movlw	1
  3262  000C7C  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3263  000C7E  0E62               	movlw	98
  3264  000C80  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3265  000C82  0E00               	movlw	0
  3266  000C84  ECB0  F008         	call	_Mouvement_X
  3267                           
  3268                           ;MOTEUR.c: 456: Capteur_Capot_Nb_Evenement -= 1;
  3269  000C88  0100               	movlb	0	; () banked
  3270  000C8A  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3271                           
  3272                           ; BSR set to: 0
  3273                           ;MOTEUR.c: 457: if (Capteur_Capot_Nb_Evenement > 0) {
  3274  000C8C  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3275  000C8E  E008               	bz	l8996
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;MOTEUR.c: 458: Capteur_Capot_Compteur_Temps_S = 0;
  3279  000C90  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;MOTEUR.c: 459: delay_s(3);
  3283  000C92  0E03               	movlw	3
  3284  000C94  EC96  F011         	call	_delay_s
  3285                           
  3286                           ; BSR set to: 0
  3287                           ;MOTEUR.c: 460: Etat_Update(2);
  3288  000C98  0E02               	movlw	2
  3289  000C9A  EC20  F012         	call	_Etat_Update
  3290                           
  3291                           ;MOTEUR.c: 461: } else {
  3292  000C9E  D78F               	goto	l8932
  3293  000CA0                     l8996:
  3294                           
  3295                           ; BSR set to: 0
  3296                           ;MOTEUR.c: 462: Etat_Update(2);
  3297  000CA0  0E02               	movlw	2
  3298  000CA2  EC20  F012         	call	_Etat_Update
  3299                           
  3300                           ;MOTEUR.c: 465: P4_busy = 0;
  3301  000CA6  0100               	movlb	0	; () banked
  3302  000CA8  6BAC               	clrf	_P4_busy& (0+255),b
  3303                           
  3304                           ;MOTEUR.c: 466: Etat_Update(7);
  3305  000CAA  0E07               	movlw	7
  3306  000CAC  EC20  F012         	call	_Etat_Update
  3307  000CB0  D786               	goto	l8932
  3308  000CB2                     l9000:
  3309                           
  3310                           ;MOTEUR.c: 471: delay_s(1);
  3311  000CB2  0E01               	movlw	1
  3312  000CB4  EC96  F011         	call	_delay_s
  3313                           
  3314                           ;MOTEUR.c: 474: Mouvement_X(1, 1, 0x02 | 0x60);
  3315  000CB8  0E01               	movlw	1
  3316  000CBA  6FFE               	movwf	Mouvement_X@type_consigne& (0+255),b
  3317  000CBC  0E62               	movlw	98
  3318  000CBE  6FFF               	movwf	Mouvement_X@option& (0+255),b
  3319  000CC0  0E01               	movlw	1
  3320  000CC2  ECB0  F008         	call	_Mouvement_X
  3321                           
  3322                           ;MOTEUR.c: 475: Capteur_Capot_Nb_Evenement -= 1;
  3323  000CC6  0100               	movlb	0	; () banked
  3324  000CC8  079F               	decf	_Capteur_Capot_Nb_Evenement& (0+255),f,b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;MOTEUR.c: 476: if (Capteur_Capot_Nb_Evenement > 0) {
  3328  000CCA  519F               	movf	_Capteur_Capot_Nb_Evenement& (0+255),w,b
  3329  000CCC  E008               	bz	l9012
  3330                           
  3331                           ; BSR set to: 0
  3332                           ;MOTEUR.c: 477: Capteur_Capot_Compteur_Temps_S = 0;
  3333  000CCE  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;MOTEUR.c: 478: delay_s(3);
  3337  000CD0  0E03               	movlw	3
  3338  000CD2  EC96  F011         	call	_delay_s
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;MOTEUR.c: 479: Etat_Update(3);
  3342  000CD6  0E03               	movlw	3
  3343  000CD8  EC20  F012         	call	_Etat_Update
  3344                           
  3345                           ;MOTEUR.c: 480: } else {
  3346  000CDC  D770               	goto	l8932
  3347  000CDE                     l9012:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;MOTEUR.c: 481: Etat_Update(3);
  3351  000CDE  0E03               	movlw	3
  3352  000CE0  EC20  F012         	call	_Etat_Update
  3353                           
  3354                           ;MOTEUR.c: 483: P4_busy = 0;
  3355  000CE4  0100               	movlb	0	; () banked
  3356  000CE6  6BAC               	clrf	_P4_busy& (0+255),b
  3357                           
  3358                           ;MOTEUR.c: 486: Etat_Update(77);
  3359  000CE8  0E4D               	movlw	77
  3360  000CEA  EC20  F012         	call	_Etat_Update
  3361  000CEE  D767               	goto	l8932
  3362  000CF0                     l259:
  3363                           
  3364                           ;MOTEUR.c: 491: P4_busy = 0;
  3365  000CF0  0100               	movlb	0	; () banked
  3366  000CF2  6BAC               	clrf	_P4_busy& (0+255),b
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;MOTEUR.c: 492: Etat_Update(70);
  3370  000CF4  0E46               	movlw	70
  3371  000CF6  EC20  F012         	call	_Etat_Update
  3372                           
  3373                           ;MOTEUR.c: 493: break;
  3374  000CFA  D761               	goto	l8932
  3375  000CFC                     l9020:
  3376                           
  3377                           ; BSR set to: 0
  3378  000CFC  0E01               	movlw	1
  3379  000CFE  ECEF  F010         	call	_Etat_Get
  3380                           
  3381                           ; Switch size 1, requested type "speed"
  3382                           ; Number of cases is 2, Range of values is 2 to 3
  3383                           ; switch strategies available:
  3384                           ; Name         Instructions Cycles
  3385                           ; simple_byte            7     4 (average)
  3386                           ;	Chosen strategy is simple_byte
  3387  000D02  0A02               	xorlw	2	; case 2
  3388  000D04  E0B7               	bz	l8984
  3389  000D06  0A01               	xorlw	1	; case 3
  3390  000D08  E0D4               	bz	l9000
  3391  000D0A  D7F2               	goto	l259
  3392  000D0C                     l9022:
  3393                           
  3394                           ; BSR set to: 0
  3395                           ;MOTEUR.c: 507: P4_busy = 1;
  3396  000D0C  0E01               	movlw	1
  3397  000D0E  6FAC               	movwf	_P4_busy& (0+255),b
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;MOTEUR.c: 508: Etat_Update(77);
  3401  000D10  0E4D               	movlw	77
  3402  000D12  EC20  F012         	call	_Etat_Update
  3403                           
  3404                           ;MOTEUR.c: 509: for (i = 0; i < 4; i++) {
  3405  000D16  0102               	movlb	2	; () banked
  3406  000D18  6B8A               	clrf	Cycle@i& (0+255),b
  3407  000D1A                     l9032:
  3408                           
  3409                           ; BSR set to: 2
  3410                           ;MOTEUR.c: 510: Buzzer_Etat((unsigned char) 1);
  3411  000D1A  0E01               	movlw	1
  3412  000D1C  EC4F  F013         	call	_Buzzer_Etat
  3413                           
  3414                           ;MOTEUR.c: 511: delay_n_100ms(4);
  3415  000D20  0E04               	movlw	4
  3416  000D22  ECBA  F012         	call	_delay_n_100ms
  3417                           
  3418                           ;MOTEUR.c: 512: Buzzer_Etat((unsigned char) 0);
  3419  000D26  0E00               	movlw	0
  3420  000D28  EC4F  F013         	call	_Buzzer_Etat
  3421                           
  3422                           ;MOTEUR.c: 513: delay_n_100ms(2);
  3423  000D2C  0E02               	movlw	2
  3424  000D2E  ECBA  F012         	call	_delay_n_100ms
  3425  000D32  0102               	movlb	2	; () banked
  3426  000D34  2B8A               	incf	Cycle@i& (0+255),f,b
  3427                           
  3428                           ; BSR set to: 2
  3429  000D36  0E03               	movlw	3
  3430  000D38  658A               	cpfsgt	Cycle@i& (0+255),b
  3431  000D3A  D7EF               	goto	l9032
  3432  000D3C  D740               	goto	l8932
  3433  000D3E                     l9038:
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;MOTEUR.c: 518: P4_busy = 1;
  3437  000D3E  0E01               	movlw	1
  3438  000D40  6FAC               	movwf	_P4_busy& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;MOTEUR.c: 519: Etat_Update(77);
  3442  000D42  0E4D               	movlw	77
  3443  000D44  EC20  F012         	call	_Etat_Update
  3444                           
  3445                           ;MOTEUR.c: 523: for (i = 0; i < 4; i++) {
  3446  000D48  0102               	movlb	2	; () banked
  3447  000D4A  6B8A               	clrf	Cycle@i& (0+255),b
  3448  000D4C                     l9048:
  3449                           
  3450                           ; BSR set to: 2
  3451                           ;MOTEUR.c: 524: Buzzer_Etat((unsigned char) 1);
  3452  000D4C  0E01               	movlw	1
  3453  000D4E  EC4F  F013         	call	_Buzzer_Etat
  3454                           
  3455                           ;MOTEUR.c: 525: delay_n_100ms(4);
  3456  000D52  0E04               	movlw	4
  3457  000D54  ECBA  F012         	call	_delay_n_100ms
  3458                           
  3459                           ;MOTEUR.c: 526: Buzzer_Etat((unsigned char) 0);
  3460  000D58  0E00               	movlw	0
  3461  000D5A  EC4F  F013         	call	_Buzzer_Etat
  3462                           
  3463                           ;MOTEUR.c: 527: delay_n_100ms(2);
  3464  000D5E  0E02               	movlw	2
  3465  000D60  ECBA  F012         	call	_delay_n_100ms
  3466  000D64  0102               	movlb	2	; () banked
  3467  000D66  2B8A               	incf	Cycle@i& (0+255),f,b
  3468                           
  3469                           ; BSR set to: 2
  3470  000D68  0E03               	movlw	3
  3471  000D6A  658A               	cpfsgt	Cycle@i& (0+255),b
  3472  000D6C  D7EF               	goto	l9048
  3473  000D6E  D727               	goto	l8932
  3474  000D70                     l9056:
  3475                           
  3476                           ; BSR set to: 0
  3477  000D70  51A9               	movf	_Alarme& (0+255),w,b	;volatile
  3478                           
  3479                           ; Switch size 1, requested type "speed"
  3480                           ; Number of cases is 4, Range of values is 1 to 4
  3481                           ; switch strategies available:
  3482                           ; Name         Instructions Cycles
  3483                           ; simple_byte           13     7 (average)
  3484                           ;	Chosen strategy is simple_byte
  3485  000D72  0A01               	xorlw	1	; case 1
  3486  000D74  E0CB               	bz	l9022
  3487  000D76  0A03               	xorlw	3	; case 2
  3488  000D78  E0E2               	bz	l9038
  3489  000D7A  0A01               	xorlw	1	; case 3
  3490  000D7C  E101 D772          	bz	l8982
  3491  000D80  0A07               	xorlw	7	; case 4
  3492  000D82  E0BC               	bz	l9020
  3493  000D84  D71C               	goto	l8932
  3494  000D86                     l9058:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;MOTEUR.c: 549: Mouvement_X(direction, type_consigne, mouvement_option);
  3498  000D86  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3499  000D8A  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3500  000D8E  518F               	movf	_direction& (0+255),w,b	;volatile
  3501  000D90  ECB0  F008         	call	_Mouvement_X
  3502                           
  3503                           ;MOTEUR.c: 550: break;
  3504  000D94  D714               	goto	l8932
  3505  000D96                     l9060:
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;MOTEUR.c: 555: Mouvement_X(direction, type_consigne, mouvement_option);
  3509  000D96  C091  F0FE         	movff	_type_consigne,Mouvement_X@type_consigne
  3510  000D9A  C090  F0FF         	movff	_mouvement_option,Mouvement_X@option
  3511  000D9E  518F               	movf	_direction& (0+255),w,b	;volatile
  3512  000DA0  ECB0  F008         	call	_Mouvement_X
  3513                           
  3514                           ;MOTEUR.c: 557: break;
  3515  000DA4  D70C               	goto	l8932
  3516  000DA6                     l9062:
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;MOTEUR.c: 561: Mouvement_Z(direction, type_consigne, mouvement_option);
  3520  000DA6  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3521  000DAA  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3522  000DAE  518F               	movf	_direction& (0+255),w,b	;volatile
  3523  000DB0  EC70  F00C         	call	_Mouvement_Z
  3524                           
  3525                           ;MOTEUR.c: 562: break;
  3526  000DB4  D704               	goto	l8932
  3527  000DB6                     l9064:
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;MOTEUR.c: 567: Mouvement_Z(direction, type_consigne, mouvement_option);
  3531  000DB6  C091  F287         	movff	_type_consigne,Mouvement_Z@type_consigne
  3532  000DBA  C090  F288         	movff	_mouvement_option,Mouvement_Z@option
  3533  000DBE  518F               	movf	_direction& (0+255),w,b	;volatile
  3534  000DC0  EC70  F00C         	call	_Mouvement_Z
  3535                           
  3536                           ;MOTEUR.c: 569: break;
  3537  000DC4  D6FC               	goto	l8932
  3538  000DC6                     l9066:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;MOTEUR.c: 574: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3542  000DC6  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3543  000DCA  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3544  000DCE  518F               	movf	_direction& (0+255),w,b	;volatile
  3545  000DD0  ECC5  F00C         	call	_Mouvement_Bequille
  3546                           
  3547                           ;MOTEUR.c: 576: break;
  3548  000DD4  D6F4               	goto	l8932
  3549  000DD6                     l9068:
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;MOTEUR.c: 582: Mouvement_Bequille(direction, type_consigne, mouvement_option);
  3553  000DD6  C091  F287         	movff	_type_consigne,Mouvement_Bequille@type_consigne
  3554  000DDA  C090  F288         	movff	_mouvement_option,Mouvement_Bequille@option
  3555  000DDE  518F               	movf	_direction& (0+255),w,b	;volatile
  3556  000DE0  ECC5  F00C         	call	_Mouvement_Bequille
  3557                           
  3558                           ;MOTEUR.c: 585: break;
  3559  000DE4  D6EC               	goto	l8932
  3560  000DE6                     l9072:
  3561  000DE6  0100               	movlb	0	; () banked
  3562  000DE8  51AA               	movf	_Etat& (0+255),w,b	;volatile
  3563                           
  3564                           ; Switch size 1, requested type "speed"
  3565                           ; Number of cases is 7, Range of values is 1 to 9
  3566                           ; switch strategies available:
  3567                           ; Name         Instructions Cycles
  3568                           ; simple_byte           22    12 (average)
  3569                           ;	Chosen strategy is simple_byte
  3570  000DEA  0A01               	xorlw	1	; case 1
  3571  000DEC  E0C1               	bz	l9056
  3572  000DEE  0A03               	xorlw	3	; case 2
  3573  000DF0  E0CA               	bz	l9058
  3574  000DF2  0A01               	xorlw	1	; case 3
  3575  000DF4  E0D0               	bz	l9060
  3576  000DF6  0A07               	xorlw	7	; case 4
  3577  000DF8  E0DE               	bz	l9064
  3578  000DFA  0A01               	xorlw	1	; case 5
  3579  000DFC  E0D4               	bz	l9062
  3580  000DFE  0A0D               	xorlw	13	; case 8
  3581  000E00  E0EA               	bz	l9068
  3582  000E02  0A01               	xorlw	1	; case 9
  3583  000E04  E0E0               	bz	l9066
  3584                           
  3585                           ; BSR set to: 0
  3586                           ;MOTEUR.c: 596: }else{
  3587  000E06  D6DB               	goto	l8932
  3588  000E08                     l9074:
  3589                           
  3590                           ;MOTEUR.c: 598: Coupe_Moteur();
  3591  000E08  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  3592                           
  3593                           ;MOTEUR.c: 599: Alarme_On(7);
  3594  000E0C  0E07               	movlw	7
  3595  000E0E  EC30  F013         	call	_Alarme_On
  3596  000E12  D6D5               	goto	l8932
  3597  000E14                     __end_of_Cycle:
  3598                           	opt stack 0
  3599                           tblptru	equ	0xFF8
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           intcon2	equ	0xFF1
  3603                           intcon3	equ	0xFF0
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postdec1	equ	0xFE5
  3607                           fsr1h	equ	0xFE2
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           
  3613 ;; *************** function _delay_n_100ms *****************
  3614 ;; Defined at:
  3615 ;;		line 61 in file "horloge.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  nb_100ms        1    wreg     unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  nb_100ms        1   15[COMRAM] unsigned char 
  3620 ;;  i               1   16[COMRAM] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;                  1    wreg      void 
  3623 ;; Registers used:
  3624 ;;		wreg, status,2, status,0, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/2
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3630 ;;      Params:         0       0       0       0
  3631 ;;      Locals:         2       0       0       0
  3632 ;;      Temps:          0       0       0       0
  3633 ;;      Totals:         2       0       0       0
  3634 ;;Total ram usage:        2 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:   11
  3637 ;; This function calls:
  3638 ;;		_delay_100ms
  3639 ;; This function is called by:
  3640 ;;		_Cycle
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text14
  3645  002574                     __ptext14:
  3646                           	opt stack 0
  3647  002574                     _delay_n_100ms:
  3648                           	opt stack 18
  3649                           
  3650                           ;incstack = 0
  3651                           ;delay_n_100ms@nb_100ms stored from wreg
  3652  002574  6E10               	movwf	delay_n_100ms@nb_100ms,c
  3653                           
  3654                           ;horloge.c: 62: unsigned char i;
  3655                           ;horloge.c: 63: for (i=0;i<nb_100ms; i++){
  3656  002576  6A11               	clrf	delay_n_100ms@i,c
  3657  002578  D003               	goto	l8708
  3658  00257A                     l8704:
  3659                           
  3660                           ;horloge.c: 64: delay_100ms();
  3661  00257A  EC15  F00C         	call	_delay_100ms	;wreg free
  3662  00257E  2A11               	incf	delay_n_100ms@i,f,c
  3663  002580                     l8708:
  3664  002580  5010               	movf	delay_n_100ms@nb_100ms,w,c
  3665  002582  5C11               	subwf	delay_n_100ms@i,w,c
  3666  002584  E3FA               	bnc	l8704
  3667  002586  0012               	return		;funcret
  3668  002588                     __end_of_delay_n_100ms:
  3669                           	opt stack 0
  3670                           tblptru	equ	0xFF8
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           intcon2	equ	0xFF1
  3674                           intcon3	equ	0xFF0
  3675                           postinc0	equ	0xFEE
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           fsr2h	equ	0xFDA
  3682                           fsr2l	equ	0xFD9
  3683                           
  3684 ;; *************** function _Mouvement_Z *****************
  3685 ;; Defined at:
  3686 ;;		line 920 in file "action.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  direction       1    wreg     unsigned char 
  3689 ;;  type_consign    1    7[BANK2 ] unsigned char 
  3690 ;;  option          1    8[BANK2 ] unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  direction       1    9[BANK2 ] unsigned char 
  3693 ;;  index           2    0        unsigned int 
  3694 ;;  Option_Temps    1    0        unsigned char 
  3695 ;;  i_max           1    0        unsigned char 
  3696 ;;  i_min           1    0        unsigned char 
  3697 ;;  i               1    0        unsigned char 
  3698 ;; Return value:  Size  Location     Type
  3699 ;;                  1    wreg      void 
  3700 ;; Registers used:
  3701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3702 ;; Tracked objects:
  3703 ;;		On entry : 3F/0
  3704 ;;		On exit  : 3F/0
  3705 ;;		Unchanged: 0/0
  3706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3707 ;;      Params:         0       0       0       2
  3708 ;;      Locals:         0       0       0       1
  3709 ;;      Temps:          0       0       0       0
  3710 ;;      Totals:         0       0       0       3
  3711 ;;Total ram usage:        3 bytes
  3712 ;; Hardware stack levels used:    1
  3713 ;; Hardware stack levels required when called:   18
  3714 ;; This function calls:
  3715 ;;		_Check_List_Moteur_2
  3716 ;;		_Coupe_Moteur
  3717 ;;		_Detection_Pion_Off
  3718 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  3719 ;;		_Init_Moteur_2
  3720 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  3721 ;;		_TIMER2_On
  3722 ;;		_delay_s
  3723 ;;		_u_Init_PWM
  3724 ;; This function is called by:
  3725 ;;		_Cycle
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text15
  3730  0018E0                     __ptext15:
  3731                           	opt stack 0
  3732  0018E0                     _Mouvement_Z:
  3733                           	opt stack 11
  3734                           
  3735                           ;incstack = 0
  3736                           ;Mouvement_Z@direction stored from wreg
  3737  0018E0  0102               	movlb	2	; () banked
  3738  0018E2  6F89               	movwf	Mouvement_Z@direction& (0+255),b
  3739                           
  3740                           ;action.c: 921: unsigned char i, i_min, i_max;
  3741                           ;action.c: 922: unsigned char Option_Temps_S;
  3742                           ;action.c: 930: Surveillance_Consommation_Moteur_2_Desactiver();
  3743  0018E4  EC48  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;action.c: 932: Detection_Pion_Off();
  3747  0018E8  EC79  F013         	call	_Detection_Pion_Off	;wreg free
  3748                           
  3749                           ;action.c: 935: nb_s_pelle = option;
  3750  0018EC  C288  F0A3         	movff	Mouvement_Z@option,_nb_s_pelle
  3751                           
  3752                           ;action.c: 938: consigne = 10;
  3753  0018F0  0E0A               	movlw	10
  3754  0018F2  0100               	movlb	0	; () banked
  3755  0018F4  6F98               	movwf	_consigne& (0+255),b	;volatile
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;action.c: 949: index = 0;
  3759  0018F6  ECE0  F00E         	call	_u_Init_PWM	;wreg free
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;action.c: 950: TMR2 = 0;
  3763  0018FA  6ACC               	clrf	4044,c	;volatile
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;action.c: 951: TMR2IF = 0;
  3767  0018FC  929E               	bcf	3998,1,c	;volatile
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;action.c: 957: LATEbits.LATE2 = 0;
  3771  0018FE  948D               	bcf	3981,2,c	;volatile
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;action.c: 962: moteur_indice = 2;
  3775  001900  0E02               	movlw	2
  3776  001902  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;action.c: 963: Init_ADC_Single_Shoot_I_Moteur_2();
  3780  001904  EC7C  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;action.c: 966: if (direction == 1) {
  3784  001908  0102               	movlb	2	; () banked
  3785  00190A  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3786  00190C  E103               	bnz	l1018
  3787                           
  3788                           ; BSR set to: 2
  3789                           ;action.c: 967: LATD7 = 0;LATD6 = 1;
  3790  00190E  9E8C               	bcf	3980,7,c	;volatile
  3791  001910  8C8C               	bsf	3980,6,c	;volatile
  3792                           
  3793                           ;action.c: 968: } else {
  3794  001912  D002               	goto	l8732
  3795  001914                     l1018:
  3796                           
  3797                           ; BSR set to: 2
  3798                           ;action.c: 969: LATD6 = 0;LATD7 = 1;
  3799  001914  9C8C               	bcf	3980,6,c	;volatile
  3800  001916  8E8C               	bsf	3980,7,c	;volatile
  3801  001918                     l8732:
  3802                           
  3803                           ; BSR set to: 2
  3804                           ;action.c: 970: }
  3805                           ;action.c: 971: PDC1L = 1 << 2;
  3806  001918  0E04               	movlw	4
  3807  00191A  6E77               	movwf	3959,c	;volatile
  3808                           
  3809                           ; BSR set to: 2
  3810                           ;action.c: 972: PDC1H = 0;
  3811  00191C  6A76               	clrf	3958,c	;volatile
  3812                           
  3813                           ;action.c: 973: OVDCOND = 0b00000100;
  3814  00191E  0E04               	movlw	4
  3815  001920  6E6B               	movwf	3947,c	;volatile
  3816                           
  3817                           ; BSR set to: 2
  3818                           ;action.c: 974: LATCbits.LATC1 = 1;
  3819  001922  828B               	bsf	3979,1,c	;volatile
  3820                           
  3821                           ;action.c: 976: erreur = 1;
  3822  001924  0100               	movlb	0	; () banked
  3823  001926  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  3824  001928  0E01               	movlw	1
  3825  00192A  6F84               	movwf	_erreur& (0+255),b	;volatile
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;action.c: 977: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  3829  00192C  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3830  00192E  46E8               	rlncf	wreg,f,c
  3831  001930  0BFC               	andlw	252
  3832  001932  6E77               	movwf	3959,c	;volatile
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;action.c: 978: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  3836  001934  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  3837  001936  46E8               	rlncf	wreg,f,c
  3838  001938  0B03               	andlw	3
  3839  00193A  6E76               	movwf	3958,c	;volatile
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;action.c: 981: erreur_accumulator = 0;
  3843  00193C  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  3844  00193E  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;action.c: 984: Nouvelle_Valeur_ADC = 0;
  3848  001940  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;action.c: 988: PIE3bits.PTIE = 0;
  3852  001942  98A3               	bcf	4003,4,c	;volatile
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;action.c: 989: PIE1bits.ADIE = 1;
  3856  001944  8C9D               	bsf	3997,6,c	;volatile
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;action.c: 990: PIE1bits.ADIE = 1;
  3860  001946  8C9D               	bsf	3997,6,c	;volatile
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;action.c: 992: PEIE = 1;
  3864  001948  8CF2               	bsf	intcon,6,c	;volatile
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;action.c: 993: GIE = 1;
  3868  00194A  8EF2               	bsf	intcon,7,c	;volatile
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;action.c: 994: TIMER2_On();
  3872  00194C  EC89  F013         	call	_TIMER2_On	;wreg free
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;action.c: 995: ADIF = 0;
  3876  001950  9C9E               	bcf	3998,6,c	;volatile
  3877                           
  3878                           ;action.c: 1012: Init_Moteur_2();
  3879  001952  EC10  F013         	call	_Init_Moteur_2	;wreg free
  3880  001956                     l8760:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;action.c: 1016: Check_List_Moteur_2();
  3884  001956  EC70  F011         	call	_Check_List_Moteur_2	;wreg free
  3885                           
  3886                           ;action.c: 1017: } while (((direction == 1) && (Etat == 5)) | ((direction == 0) && (Etat
      +                           == 4)));
  3887  00195A  0102               	movlb	2	; () banked
  3888  00195C  0589               	decf	Mouvement_Z@direction& (0+255),w,b
  3889  00195E  E104               	bnz	l8766
  3890                           
  3891                           ; BSR set to: 2
  3892  001960  0E05               	movlw	5
  3893  001962  0100               	movlb	0	; () banked
  3894  001964  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3895  001966  E0F7               	bz	l8760
  3896  001968                     l8766:
  3897  001968  0102               	movlb	2	; () banked
  3898  00196A  5189               	movf	Mouvement_Z@direction& (0+255),w,b
  3899  00196C  E104               	bnz	l1025
  3900                           
  3901                           ; BSR set to: 2
  3902  00196E  0E04               	movlw	4
  3903  001970  0100               	movlb	0	; () banked
  3904  001972  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  3905  001974  E0F0               	bz	l8760
  3906  001976                     l1025:
  3907                           
  3908                           ;action.c: 1021: PIE3bits.PTIE = 0;
  3909  001976  98A3               	bcf	4003,4,c	;volatile
  3910                           
  3911                           ;action.c: 1022: PIE1bits.ADIE = 0;
  3912  001978  9C9D               	bcf	3997,6,c	;volatile
  3913                           
  3914                           ;action.c: 1027: LATEbits.LATE2 = 0;
  3915  00197A  948D               	bcf	3981,2,c	;volatile
  3916                           
  3917                           ;action.c: 1034: Surveillance_Consommation_Moteur_2_Desactiver();
  3918  00197C  EC48  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;action.c: 1036: Coupe_Moteur();
  3922  001980  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  3923                           
  3924                           ;action.c: 1037: delay_s(1);
  3925  001984  0E01               	movlw	1
  3926  001986  EF96  F011         	goto	_delay_s
  3927  00198A                     __end_of_Mouvement_Z:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           prodl	equ	0xFF3
  3931                           intcon	equ	0xFF2
  3932                           intcon2	equ	0xFF1
  3933                           intcon3	equ	0xFF0
  3934                           postinc0	equ	0xFEE
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           fsr1h	equ	0xFE2
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           fsr2h	equ	0xFDA
  3941                           fsr2l	equ	0xFD9
  3942                           
  3943 ;; *************** function _Init_Moteur_2 *****************
  3944 ;; Defined at:
  3945 ;;		line 158 in file "action.c"
  3946 ;; Parameters:    Size  Location     Type
  3947 ;;		None
  3948 ;; Auto vars:     Size  Location     Type
  3949 ;;		None
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, cstack
  3954 ;; Tracked objects:
  3955 ;;		On entry : 3F/0
  3956 ;;		On exit  : 3F/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3959 ;;      Params:         0       0       0       0
  3960 ;;      Locals:         0       0       0       0
  3961 ;;      Temps:          0       0       0       0
  3962 ;;      Totals:         0       0       0       0
  3963 ;;Total ram usage:        0 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; Hardware stack levels required when called:   11
  3966 ;; This function calls:
  3967 ;;		_TIMER0_On
  3968 ;; This function is called by:
  3969 ;;		_Mouvement_Z
  3970 ;; This function uses a non-reentrant model
  3971 ;;
  3972                           
  3973                           	psect	text16
  3974  002620                     __ptext16:
  3975                           	opt stack 0
  3976  002620                     _Init_Moteur_2:
  3977                           	opt stack 17
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;action.c: 163: nb_s_fonctionnement = 0;
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;incstack = 0
  3984  002620  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  3985                           
  3986                           ;action.c: 164: nb_Pion = 0;
  3987  002622  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  3988                           
  3989                           ;action.c: 165: nb_100ms_Timer_5 = 0;
  3990  002624  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;action.c: 166: TIMER0_On();
  3994  002626  EC83  F012         	call	_TIMER0_On	;wreg free
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;action.c: 169: Compteur_IRQ_I_Moteur_2 = 0;
  3998  00262A  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  3999                           
  4000                           ; BSR set to: 0
  4001                           ;action.c: 170: LATCbits.LATC2=0;
  4002  00262C  948B               	bcf	3979,2,c	;volatile
  4003                           
  4004                           ; BSR set to: 0
  4005  00262E  0012               	return		;funcret
  4006  002630                     __end_of_Init_Moteur_2:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           prodl	equ	0xFF3
  4010                           intcon	equ	0xFF2
  4011                           intcon2	equ	0xFF1
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           fsr1h	equ	0xFE2
  4017                           fsr1l	equ	0xFE1
  4018                           indf2	equ	0xFDF
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           
  4022 ;; *************** function _Check_List_Moteur_2 *****************
  4023 ;; Defined at:
  4024 ;;		line 180 in file "action.c"
  4025 ;; Parameters:    Size  Location     Type
  4026 ;;		None
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  1    wreg      void 
  4031 ;; Registers used:
  4032 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 0/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4038 ;;      Params:         0       0       0       0
  4039 ;;      Locals:         0       0       0       0
  4040 ;;      Temps:          0       0       0       0
  4041 ;;      Totals:         0       0       0       0
  4042 ;;Total ram usage:        0 bytes
  4043 ;; Hardware stack levels used:    1
  4044 ;; Hardware stack levels required when called:   17
  4045 ;; This function calls:
  4046 ;;		_EUSART1_Check_Buffer
  4047 ;;		_Etat_Update
  4048 ;;		_SPI_Check_Buffer
  4049 ;; This function is called by:
  4050 ;;		_Mouvement_Z
  4051 ;; This function uses a non-reentrant model
  4052 ;;
  4053                           
  4054                           	psect	text17
  4055  0022E0                     __ptext17:
  4056                           	opt stack 0
  4057  0022E0                     _Check_List_Moteur_2:
  4058                           	opt stack 11
  4059                           
  4060                           ;action.c: 189: EUSART1_Check_Buffer();
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;incstack = 0
  4064  0022E0  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4065                           
  4066                           ;action.c: 190: SPI_Check_Buffer();
  4067  0022E4  EC08  F011         	call	_SPI_Check_Buffer	;wreg free
  4068                           
  4069                           ;action.c: 201: if ((nb_s_fonctionnement >= nb_s_pelle) | ((nb_s_fonctionnement > 2) &&(
      +                          (Image_Courant_Moteur_2 ) >= Pelle_I_Max))) {
  4070  0022E8  0100               	movlb	0	; () banked
  4071  0022EA  51A3               	movf	_nb_s_pelle& (0+255),w,b
  4072  0022EC  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4073  0022EE  E207               	bc	l976
  4074                           
  4075                           ; BSR set to: 0
  4076  0022F0  0E02               	movlw	2
  4077  0022F2  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  4078  0022F4  0C02               	retlw	2
  4079                           
  4080                           ; BSR set to: 0
  4081  0022F6  5193               	movf	_Pelle_I_Max& (0+255),w,b
  4082  0022F8  5D9A               	subwf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  4083  0022FA  A0D8               	btfss	status,0,c
  4084  0022FC  0012               	return	
  4085  0022FE                     l976:
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;action.c: 205: P4_busy = 0;
  4089  0022FE  6BAC               	clrf	_P4_busy& (0+255),b
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;action.c: 206: Etat_Update(0);
  4093  002300  0E00               	movlw	0
  4094  002302  EF20  F012         	goto	_Etat_Update
  4095  002306                     __end_of_Check_List_Moteur_2:
  4096                           	opt stack 0
  4097                           tblptru	equ	0xFF8
  4098                           prodl	equ	0xFF3
  4099                           intcon	equ	0xFF2
  4100                           intcon2	equ	0xFF1
  4101                           intcon3	equ	0xFF0
  4102                           postinc0	equ	0xFEE
  4103                           wreg	equ	0xFE8
  4104                           postdec1	equ	0xFE5
  4105                           fsr1h	equ	0xFE2
  4106                           fsr1l	equ	0xFE1
  4107                           indf2	equ	0xFDF
  4108                           fsr2h	equ	0xFDA
  4109                           fsr2l	equ	0xFD9
  4110                           status	equ	0xFD8
  4111                           
  4112 ;; *************** function _Mouvement_X *****************
  4113 ;; Defined at:
  4114 ;;		line 1055 in file "action.c"
  4115 ;; Parameters:    Size  Location     Type
  4116 ;;  direction       1    wreg     unsigned char 
  4117 ;;  type_consign    1   17[BANK0 ] unsigned char 
  4118 ;;  option          1   18[BANK0 ] unsigned char 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  direction       1    7[BANK2 ] unsigned char 
  4121 ;;  index           2    0        unsigned int 
  4122 ;;  Option_Temps    1    0        unsigned char 
  4123 ;;  i_max           1    0        unsigned char 
  4124 ;;  i_min           1    0        unsigned char 
  4125 ;;  i               1    0        unsigned char 
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 3F/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4135 ;;      Params:         0       2       0       0
  4136 ;;      Locals:         0       0       0       1
  4137 ;;      Temps:          0       0       0       0
  4138 ;;      Totals:         0       2       0       1
  4139 ;;Total ram usage:        3 bytes
  4140 ;; Hardware stack levels used:    1
  4141 ;; Hardware stack levels required when called:   18
  4142 ;; This function calls:
  4143 ;;		_Capteur_Capot_Off
  4144 ;;		_Capteur_Capot_On
  4145 ;;		_Check_List_Moteur_1
  4146 ;;		_Coupe_Moteur
  4147 ;;		_Detection_Pion_Init
  4148 ;;		_Detection_Pion_Off
  4149 ;;		_Detection_Pion_On
  4150 ;;		_EUSART1_Check_Buffer
  4151 ;;		_Etat_Update
  4152 ;;		_Init_ADC_Single_Shoot_I_Moteur_1
  4153 ;;		_Init_Moteur_1
  4154 ;;		_SPI_Check_Buffer
  4155 ;;		_Stop_Moteur_1
  4156 ;;		_Surveillance_Consommation_Moteur_1_Desactiver
  4157 ;;		_TIMER2_On
  4158 ;;		_u_Init_PWM
  4159 ;; This function is called by:
  4160 ;;		_Cycle
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text18
  4165  001160                     __ptext18:
  4166                           	opt stack 0
  4167  001160                     _Mouvement_X:
  4168                           	opt stack 11
  4169                           
  4170                           ;incstack = 0
  4171                           ;Mouvement_X@direction stored from wreg
  4172  001160  0102               	movlb	2	; () banked
  4173  001162  6F87               	movwf	Mouvement_X@direction& (0+255),b
  4174                           
  4175                           ;action.c: 1057: unsigned char i, i_min, i_max;
  4176                           ;action.c: 1058: unsigned char Option_Temps_S;
  4177                           ;action.c: 1068: consigne = 10;
  4178  001164  0E0A               	movlw	10
  4179  001166  0100               	movlb	0	; () banked
  4180  001168  6F98               	movwf	_consigne& (0+255),b	;volatile
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;action.c: 1075: Surveillance_Consommation_Moteur_1_Desactiver();
  4184  00116A  EC63  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;action.c: 1086: index = 0;
  4188  00116E  ECE0  F00E         	call	_u_Init_PWM	;wreg free
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;action.c: 1087: TMR2 = 0;
  4192  001172  6ACC               	clrf	4044,c	;volatile
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;action.c: 1088: TMR2IF = 0;
  4196  001174  929E               	bcf	3998,1,c	;volatile
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;action.c: 1093: if ((!(option & 0x02))
  4200                           ;action.c: 1096: ) {
  4201  001176  A3FF               	btfss	Mouvement_X@option& (0+255),1,b
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;action.c: 1098: Capteur_Capot_On();
  4205  001178  EC20  F013         	call	_Capteur_Capot_On	;wreg free
  4206                           
  4207                           ;action.c: 1100: }
  4208                           ;action.c: 1108: moteur_indice = 1;
  4209  00117C  0E01               	movlw	1
  4210  00117E  0100               	movlb	0	; () banked
  4211  001180  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;action.c: 1109: Init_ADC_Single_Shoot_I_Moteur_1();
  4215  001182  ECAF  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_1	;wreg free
  4216                           
  4217                           ; BSR set to: 0
  4218                           ;action.c: 1112: if (direction == 1) {
  4219  001186  0102               	movlb	2	; () banked
  4220  001188  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4221  00118A  E103               	bnz	l1030
  4222                           
  4223                           ; BSR set to: 2
  4224                           ;action.c: 1113: LATD5 = 0;LATD4 = 1;
  4225  00118C  9A8C               	bcf	3980,5,c	;volatile
  4226  00118E  888C               	bsf	3980,4,c	;volatile
  4227                           
  4228                           ;action.c: 1114: } else {
  4229  001190  D002               	goto	l8620
  4230  001192                     l1030:
  4231                           
  4232                           ; BSR set to: 2
  4233                           ;action.c: 1115: LATD4 = 0;LATD5 = 1;
  4234  001192  988C               	bcf	3980,4,c	;volatile
  4235  001194  8A8C               	bsf	3980,5,c	;volatile
  4236  001196                     l8620:
  4237                           
  4238                           ; BSR set to: 2
  4239                           ;action.c: 1116: }
  4240                           ;action.c: 1117: PDC0L = 1 << 2;
  4241  001196  0E04               	movlw	4
  4242  001198  6E79               	movwf	3961,c	;volatile
  4243                           
  4244                           ; BSR set to: 2
  4245                           ;action.c: 1118: PDC0H = 0;
  4246  00119A  6A78               	clrf	3960,c	;volatile
  4247                           
  4248                           ;action.c: 1119: OVDCOND = 0b00000001;
  4249  00119C  0E01               	movlw	1
  4250  00119E  6E6B               	movwf	3947,c	;volatile
  4251                           
  4252                           ; BSR set to: 2
  4253                           ;action.c: 1120: LATCbits.LATC0 = 1;
  4254  0011A0  808B               	bsf	3979,0,c	;volatile
  4255                           
  4256                           ;action.c: 1123: erreur = 1;
  4257  0011A2  0100               	movlb	0	; () banked
  4258  0011A4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  4259  0011A6  6F84               	movwf	_erreur& (0+255),b	;volatile
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;action.c: 1124: PDC0L = (unsigned char) (((unsigned char) erreur) << 2);
  4263  0011A8  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4264  0011AA  46E8               	rlncf	wreg,f,c
  4265  0011AC  0BFC               	andlw	252
  4266  0011AE  6E79               	movwf	3961,c	;volatile
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;action.c: 1125: PDC0H = (unsigned char) (((unsigned char) erreur) >> 6);
  4270  0011B0  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  4271  0011B2  46E8               	rlncf	wreg,f,c
  4272  0011B4  0B03               	andlw	3
  4273  0011B6  6E78               	movwf	3960,c	;volatile
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;action.c: 1128: erreur_accumulator = 0;
  4277  0011B8  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  4278  0011BA  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;action.c: 1131: Nouvelle_Valeur_ADC = 0;
  4282  0011BC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;action.c: 1141: PIE3bits.PTIE = 0;
  4286  0011BE  98A3               	bcf	4003,4,c	;volatile
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;action.c: 1142: PIE1bits.ADIE = 1;
  4290  0011C0  8C9D               	bsf	3997,6,c	;volatile
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;action.c: 1144: PEIE = 1;
  4294  0011C2  8CF2               	bsf	intcon,6,c	;volatile
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;action.c: 1145: GIE = 1;
  4298  0011C4  8EF2               	bsf	intcon,7,c	;volatile
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;action.c: 1146: TIMER2_On();
  4302  0011C6  EC89  F013         	call	_TIMER2_On	;wreg free
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;action.c: 1147: ADIF = 0;
  4306  0011CA  9C9E               	bcf	3998,6,c	;volatile
  4307                           
  4308                           ;action.c: 1151: Init_Moteur_1();
  4309  0011CC  EC18  F013         	call	_Init_Moteur_1	;wreg free
  4310                           
  4311                           ;action.c: 1154: switch (type_consigne) {
  4312  0011D0  D051               	goto	l8696
  4313  0011D2                     l8646:
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;action.c: 1156: nb_Pion_Objectif = 2;
  4317  0011D2  0E02               	movlw	2
  4318  0011D4  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;action.c: 1158: nb_s_fonctionnement_souhaiter = (unsigned char) (option >> 4);
  4322  0011D6  39FF               	swapf	Mouvement_X@option& (0+255),w,b
  4323  0011D8  0B0F               	andlw	15
  4324  0011DA  6FA8               	movwf	_nb_s_fonctionnement_souhaiter& (0+255),b
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;action.c: 1162: if (option & 0x04) {
  4328  0011DC  A5FF               	btfss	Mouvement_X@option& (0+255),2,b
  4329  0011DE  D003               	goto	l8654
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;action.c: 1164: nb_s_fonctionnement_souhaiter *= 3;
  4333  0011E0  90D8               	bcf	status,0,c
  4334  0011E2  35A8               	rlcf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4335  0011E4  27A8               	addwf	_nb_s_fonctionnement_souhaiter& (0+255),f,b
  4336  0011E6                     l8654:
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;action.c: 1166: }
  4340                           ;action.c: 1168: if (Option_Pailleux==1){
  4341  0011E6  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4342  0011E8  D00F               	goto	l8664
  4343  0011EA                     l8656:
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;action.c: 1179: EUSART1_Check_Buffer();
  4347  0011EA  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4348                           
  4349                           ;action.c: 1180: SPI_Check_Buffer();
  4350  0011EE  EC08  F011         	call	_SPI_Check_Buffer	;wreg free
  4351                           
  4352                           ;action.c: 1191: } while(
  4353                           ;action.c: 1192: ((Etat == 2) | (Etat == 3))
  4354                           ;action.c: 1193: &&
  4355                           ;action.c: 1194: (nb_s_fonctionnement < nb_s_fonctionnement_souhaiter)
  4356                           ;action.c: 1195: )
  4357  0011F2  0E02               	movlw	2
  4358  0011F4  0100               	movlb	0	; () banked
  4359  0011F6  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4360  0011F8  E003               	bz	l8662
  4361                           
  4362                           ; BSR set to: 0
  4363  0011FA  0E03               	movlw	3
  4364  0011FC  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4365  0011FE  E10C               	bnz	l8668
  4366  001200                     l8662:
  4367                           
  4368                           ; BSR set to: 0
  4369  001200  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4370  001202  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4371  001204  E209               	bc	l8668
  4372  001206  D7F1               	goto	l8656
  4373  001208                     l8664:
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;action.c: 1205: EUSART1_Check_Buffer();
  4377  001208  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  4378                           
  4379                           ;action.c: 1206: SPI_Check_Buffer();
  4380  00120C  EC08  F011         	call	_SPI_Check_Buffer	;wreg free
  4381                           
  4382                           ;action.c: 1209: } while(nb_s_fonctionnement < nb_s_fonctionnement_souhaiter);
  4383  001210  0100               	movlb	0	; () banked
  4384  001212  51A8               	movf	_nb_s_fonctionnement_souhaiter& (0+255),w,b
  4385  001214  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  4386  001216  E3F8               	bnc	l8664
  4387  001218                     l8668:
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;action.c: 1210: }
  4391                           ;action.c: 1214: Stop_Moteur_1();
  4392  001218  EC9B  F013         	call	_Stop_Moteur_1	;wreg free
  4393                           
  4394                           ;action.c: 1215: Capteur_Capot_Off();
  4395  00121C  EC9D  F013         	call	_Capteur_Capot_Off	;wreg free
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;action.c: 1218: if ((Etat == 2) | (Etat == 3)) {
  4399  001220  0E02               	movlw	2
  4400  001222  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4401  001224  E003               	bz	l8674
  4402                           
  4403                           ; BSR set to: 0
  4404  001226  0E03               	movlw	3
  4405  001228  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4406  00122A  E128               	bnz	l1048
  4407  00122C                     l8674:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;action.c: 1220: Etat_Update(0);
  4411  00122C  0E00               	movlw	0
  4412  00122E  EC20  F012         	call	_Etat_Update
  4413                           
  4414                           ;action.c: 1221: P4_busy = 0;
  4415  001232  0100               	movlb	0	; () banked
  4416  001234  6BAC               	clrf	_P4_busy& (0+255),b
  4417  001236  D022               	goto	l1048
  4418  001238                     l1049:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;action.c: 1238: nb_Pion_Objectif = option;
  4422  001238  C0FF  F0A0         	movff	Mouvement_X@option,_nb_Pion_Objectif
  4423                           
  4424                           ;action.c: 1239: nb_Pion = 0;
  4425  00123C  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;action.c: 1247: Detection_Pion_Init();
  4429  00123E  ECC4  F012         	call	_Detection_Pion_Init	;wreg free
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;action.c: 1248: Detection_Pion_On();
  4433  001242  EC83  F011         	call	_Detection_Pion_On	;wreg free
  4434  001246                     l8682:
  4435                           
  4436                           ;action.c: 1271: Check_List_Moteur_1();
  4437  001246  EC1A  F00D         	call	_Check_List_Moteur_1	;wreg free
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;action.c: 1272: } while (
  4441                           ;action.c: 1273: ((direction == 1) && (Etat == 2))
  4442                           ;action.c: 1274: |
  4443                           ;action.c: 1275: ((direction == 0) && (Etat == 3))
  4444                           ;action.c: 1277: );
  4445  00124A  0102               	movlb	2	; () banked
  4446  00124C  0587               	decf	Mouvement_X@direction& (0+255),w,b
  4447  00124E  E104               	bnz	l8688
  4448                           
  4449                           ; BSR set to: 2
  4450  001250  0E02               	movlw	2
  4451  001252  0100               	movlb	0	; () banked
  4452  001254  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4453  001256  E0F7               	bz	l8682
  4454  001258                     l8688:
  4455  001258  0102               	movlb	2	; () banked
  4456  00125A  5187               	movf	Mouvement_X@direction& (0+255),w,b
  4457  00125C  E104               	bnz	l8692
  4458                           
  4459                           ; BSR set to: 2
  4460  00125E  0E03               	movlw	3
  4461  001260  0100               	movlb	0	; () banked
  4462  001262  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  4463  001264  E0F0               	bz	l8682
  4464  001266                     l8692:
  4465                           
  4466                           ;action.c: 1280: Detection_Pion_Off();
  4467  001266  EC79  F013         	call	_Detection_Pion_Off	;wreg free
  4468                           
  4469                           ;action.c: 1288: Stop_Moteur_1();
  4470  00126A  EC9B  F013         	call	_Stop_Moteur_1	;wreg free
  4471                           
  4472                           ;action.c: 1289: Capteur_Capot_Off();
  4473  00126E  EC9D  F013         	call	_Capteur_Capot_Off	;wreg free
  4474                           
  4475                           ;action.c: 1291: break;
  4476  001272  D004               	goto	l1048
  4477  001274                     l8696:
  4478                           
  4479                           ; BSR set to: 0
  4480  001274  51FE               	movf	Mouvement_X@type_consigne& (0+255),w,b
  4481                           
  4482                           ; Switch size 1, requested type "speed"
  4483                           ; Number of cases is 2, Range of values is 0 to 1
  4484                           ; switch strategies available:
  4485                           ; Name         Instructions Cycles
  4486                           ; simple_byte            7     4 (average)
  4487                           ;	Chosen strategy is simple_byte
  4488  001276  E0E0               	bz	l1049
  4489  001278  0A01               	xorlw	1	; case 1
  4490  00127A  E0AB               	bz	l8646
  4491  00127C                     l1048:
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;action.c: 1338: PIE3bits.PTIE = 0;
  4495  00127C  98A3               	bcf	4003,4,c	;volatile
  4496                           
  4497                           ;action.c: 1339: PIE1bits.ADIE = 0;
  4498  00127E  9C9D               	bcf	3997,6,c	;volatile
  4499                           
  4500                           ; BSR set to: 0
  4501                           ;action.c: 1341: Surveillance_Consommation_Moteur_1_Desactiver();
  4502  001280  EC63  F013         	call	_Surveillance_Consommation_Moteur_1_Desactiver	;wreg free
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;action.c: 1343: Coupe_Moteur();
  4506  001284  EFCE  F012         	goto	_Coupe_Moteur	;wreg free
  4507  001288                     __end_of_Mouvement_X:
  4508                           	opt stack 0
  4509                           tblptru	equ	0xFF8
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           intcon2	equ	0xFF1
  4513                           intcon3	equ	0xFF0
  4514                           postinc0	equ	0xFEE
  4515                           wreg	equ	0xFE8
  4516                           postdec1	equ	0xFE5
  4517                           fsr1h	equ	0xFE2
  4518                           fsr1l	equ	0xFE1
  4519                           indf2	equ	0xFDF
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _Surveillance_Consommation_Moteur_1_Desactiver *****************
  4525 ;; Defined at:
  4526 ;;		line 860 in file "interrupt.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;		None
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2
  4535 ;; Tracked objects:
  4536 ;;		On entry : 3F/0
  4537 ;;		On exit  : 3F/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4540 ;;      Params:         0       0       0       0
  4541 ;;      Locals:         0       0       0       0
  4542 ;;      Temps:          0       0       0       0
  4543 ;;      Totals:         0       0       0       0
  4544 ;;Total ram usage:        0 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:   10
  4547 ;; This function calls:
  4548 ;;		Nothing
  4549 ;; This function is called by:
  4550 ;;		_Mouvement_X
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text19
  4555  0026C6                     __ptext19:
  4556                           	opt stack 0
  4557  0026C6                     _Surveillance_Consommation_Moteur_1_Desactiver:
  4558                           	opt stack 18
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;interrupt.c: 862: if (Surveillance_Consommation_Moteur_1 != 0) {
  4562                           
  4563                           ;incstack = 0
  4564  0026C6  518B               	movf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
  4565  0026C8  B4D8               	btfsc	status,2,c
  4566  0026CA  0012               	return	
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;interrupt.c: 863: Surveillance_Consommation_Moteur_1 = 0;
  4570  0026CC  6B8B               	clrf	_Surveillance_Consommation_Moteur_1& (0+255),b
  4571                           
  4572                           ;interrupt.c: 864: INTCON3bits.INT1IE = 0;
  4573  0026CE  96F0               	bcf	intcon3,3,c	;volatile
  4574                           
  4575                           ; BSR set to: 0
  4576  0026D0  0012               	return		;funcret
  4577  0026D2                     __end_of_Surveillance_Consommation_Moteur_1_Desactiver:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           prodl	equ	0xFF3
  4581                           intcon	equ	0xFF2
  4582                           intcon2	equ	0xFF1
  4583                           intcon3	equ	0xFF0
  4584                           postinc0	equ	0xFEE
  4585                           wreg	equ	0xFE8
  4586                           postdec1	equ	0xFE5
  4587                           fsr1h	equ	0xFE2
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _Stop_Moteur_1 *****************
  4595 ;; Defined at:
  4596 ;;		line 104 in file "action.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;		None
  4599 ;; Auto vars:     Size  Location     Type
  4600 ;;		None
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 3D/0
  4607 ;;		On exit  : 3F/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4610 ;;      Params:         0       0       0       0
  4611 ;;      Locals:         0       0       0       0
  4612 ;;      Temps:          0       0       0       0
  4613 ;;      Totals:         0       0       0       0
  4614 ;;Total ram usage:        0 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:   11
  4617 ;; This function calls:
  4618 ;;		_TIMER0_Off
  4619 ;; This function is called by:
  4620 ;;		_Mouvement_X
  4621 ;; This function uses a non-reentrant model
  4622 ;;
  4623                           
  4624                           	psect	text20
  4625  002736                     __ptext20:
  4626                           	opt stack 0
  4627  002736                     _Stop_Moteur_1:
  4628                           	opt stack 17
  4629                           
  4630                           ;action.c: 106: TIMER0_Off();
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;incstack = 0
  4634  002736  EF69  F013         	goto	_TIMER0_Off	;wreg free
  4635  00273A                     __end_of_Stop_Moteur_1:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           intcon2	equ	0xFF1
  4641                           intcon3	equ	0xFF0
  4642                           postinc0	equ	0xFEE
  4643                           wreg	equ	0xFE8
  4644                           postdec1	equ	0xFE5
  4645                           fsr1h	equ	0xFE2
  4646                           fsr1l	equ	0xFE1
  4647                           indf2	equ	0xFDF
  4648                           fsr2h	equ	0xFDA
  4649                           fsr2l	equ	0xFD9
  4650                           status	equ	0xFD8
  4651                           
  4652 ;; *************** function _Init_Moteur_1 *****************
  4653 ;; Defined at:
  4654 ;;		line 84 in file "action.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;		None
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;		None
  4659 ;; Return value:  Size  Location     Type
  4660 ;;                  1    wreg      void 
  4661 ;; Registers used:
  4662 ;;		wreg, status,2, cstack
  4663 ;; Tracked objects:
  4664 ;;		On entry : 3F/0
  4665 ;;		On exit  : 3F/0
  4666 ;;		Unchanged: 0/0
  4667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4668 ;;      Params:         0       0       0       0
  4669 ;;      Locals:         0       0       0       0
  4670 ;;      Temps:          0       0       0       0
  4671 ;;      Totals:         0       0       0       0
  4672 ;;Total ram usage:        0 bytes
  4673 ;; Hardware stack levels used:    1
  4674 ;; Hardware stack levels required when called:   11
  4675 ;; This function calls:
  4676 ;;		_TIMER0_On
  4677 ;; This function is called by:
  4678 ;;		_Mouvement_X
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text21
  4683  002630                     __ptext21:
  4684                           	opt stack 0
  4685  002630                     _Init_Moteur_1:
  4686                           	opt stack 17
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;action.c: 91: Capteur_Capot_Compteur_Temps_S = 0;
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;incstack = 0
  4693  002630  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  4694                           
  4695                           ;action.c: 94: nb_s_fonctionnement = 0;
  4696  002632  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  4697                           
  4698                           ;action.c: 95: nb_Pion = 0;
  4699  002634  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  4700                           
  4701                           ;action.c: 96: nb_100ms_Timer_5 = 0;
  4702  002636  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;action.c: 98: TIMER0_On();
  4706  002638  EC83  F012         	call	_TIMER0_On	;wreg free
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;action.c: 101: Compteur_IRQ_I_Moteur_1 = 0;
  4710  00263C  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  4711                           
  4712                           ; BSR set to: 0
  4713  00263E  0012               	return		;funcret
  4714  002640                     __end_of_Init_Moteur_1:
  4715                           	opt stack 0
  4716                           tblptru	equ	0xFF8
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           intcon2	equ	0xFF1
  4720                           intcon3	equ	0xFF0
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postdec1	equ	0xFE5
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_1 *****************
  4732 ;; Defined at:
  4733 ;;		line 110 in file "adc.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;		None
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, status,2
  4742 ;; Tracked objects:
  4743 ;;		On entry : 3F/0
  4744 ;;		On exit  : 3F/0
  4745 ;;		Unchanged: 3F/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4747 ;;      Params:         0       0       0       0
  4748 ;;      Locals:         0       0       0       0
  4749 ;;      Temps:          0       0       0       0
  4750 ;;      Totals:         0       0       0       0
  4751 ;;Total ram usage:        0 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:   10
  4754 ;; This function calls:
  4755 ;;		Nothing
  4756 ;; This function is called by:
  4757 ;;		_Mouvement_X
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text22
  4762  001D5E                     __ptext22:
  4763                           	opt stack 0
  4764  001D5E                     _Init_ADC_Single_Shoot_I_Moteur_1:
  4765                           	opt stack 18
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;adc.c: 113: ADCON0bits.ACONV = 0;
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;incstack = 0
  4772  001D5E  9AC2               	bcf	4034,5,c	;volatile
  4773                           
  4774                           ;adc.c: 114: ADCON0bits.ACSCH = 0;
  4775  001D60  98C2               	bcf	4034,4,c	;volatile
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;adc.c: 115: ADCON0bits.ACMOD = 0b00;
  4779  001D62  0EF3               	movlw	-13
  4780  001D64  16C2               	andwf	4034,f,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;adc.c: 117: ADCON0bits.ADON = 0;
  4784  001D66  90C2               	bcf	4034,0,c	;volatile
  4785                           
  4786                           ;adc.c: 125: ADCON1bits.VCFG = 0b00;
  4787  001D68  0E3F               	movlw	-193
  4788  001D6A  16C1               	andwf	4033,f,c	;volatile
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;adc.c: 126: ADCON1bits.FIFOEN = 0;
  4792  001D6C  98C1               	bcf	4033,4,c	;volatile
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;adc.c: 130: ADCON1 = 0b00000000;
  4796  001D6E  6AC1               	clrf	4033,c	;volatile
  4797                           
  4798                           ; BSR set to: 0
  4799                           ;adc.c: 132: ADCON2bits.ADFM = 0;
  4800  001D70  9EC0               	bcf	4032,7,c	;volatile
  4801                           
  4802                           ;adc.c: 133: ADCON2bits.ACQT = 0b0010;
  4803  001D72  50C0               	movf	4032,w,c	;volatile
  4804  001D74  0B87               	andlw	-121
  4805  001D76  0910               	iorlw	16
  4806  001D78  6EC0               	movwf	4032,c	;volatile
  4807                           
  4808                           ;adc.c: 134: ADCON2bits.ADCS = 0b100;
  4809  001D7A  50C0               	movf	4032,w,c	;volatile
  4810  001D7C  0BF8               	andlw	-8
  4811  001D7E  0904               	iorlw	4
  4812  001D80  6EC0               	movwf	4032,c	;volatile
  4813                           
  4814                           ;adc.c: 135: ADCON2bits.ADCS = 0b001;
  4815  001D82  50C0               	movf	4032,w,c	;volatile
  4816  001D84  0BF8               	andlw	-8
  4817  001D86  0901               	iorlw	1
  4818  001D88  6EC0               	movwf	4032,c	;volatile
  4819                           
  4820                           ;adc.c: 137: ADCON2 = 0b00010100;
  4821  001D8A  0E14               	movlw	20
  4822  001D8C  6EC0               	movwf	4032,c	;volatile
  4823                           
  4824                           ;adc.c: 139: ADCON2bits.ADCS = 0b001;
  4825  001D8E  50C0               	movf	4032,w,c	;volatile
  4826  001D90  0BF8               	andlw	-8
  4827  001D92  0901               	iorlw	1
  4828  001D94  6EC0               	movwf	4032,c	;volatile
  4829                           
  4830                           ;adc.c: 141: ADCON3bits.ADRS = 0b00;
  4831  001D96  0E3F               	movlw	-193
  4832  001D98  169A               	andwf	3994,f,c	;volatile
  4833                           
  4834                           ;adc.c: 145: ADCON3bits.SSRC = 0b10000;
  4835  001D9A  509A               	movf	3994,w,c	;volatile
  4836  001D9C  0BE0               	andlw	-32
  4837  001D9E  0910               	iorlw	16
  4838  001DA0  6E9A               	movwf	3994,c	;volatile
  4839                           
  4840                           ;adc.c: 149: ADCON3bits.SSRC = 0b00000;
  4841  001DA2  0EE0               	movlw	-32
  4842  001DA4  169A               	andwf	3994,f,c	;volatile
  4843                           
  4844                           ;adc.c: 153: ADCON3 = 0b00010000;
  4845  001DA6  0E10               	movlw	16
  4846  001DA8  6E9A               	movwf	3994,c	;volatile
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;adc.c: 154: ADCON3 = 0x00;
  4850  001DAA  6A9A               	clrf	3994,c	;volatile
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;adc.c: 159: ADCHS = 0b00000000;
  4854  001DAC  6A99               	clrf	3993,c	;volatile
  4855                           
  4856                           ;adc.c: 160: ANSEL0 = 0b00000011;
  4857  001DAE  0E03               	movlw	3
  4858  001DB0  6EB8               	movwf	4024,c	;volatile
  4859                           
  4860                           ; BSR set to: 0
  4861                           ;adc.c: 162: ANSEL1 = 0b00000000;
  4862  001DB2  6AB9               	clrf	4025,c	;volatile
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;adc.c: 171: PIE1bits.ADIE = 1;
  4866  001DB4  8C9D               	bsf	3997,6,c	;volatile
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;adc.c: 172: ADIF=0;
  4870  001DB6  9C9E               	bcf	3998,6,c	;volatile
  4871                           
  4872                           ; BSR set to: 0
  4873                           ;adc.c: 173: IPR1bits.ADIP = 0;
  4874  001DB8  9C9F               	bcf	3999,6,c	;volatile
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;adc.c: 178: ADON = 1;
  4878  001DBA  80C2               	bsf	4034,0,c	;volatile
  4879                           
  4880                           ; BSR set to: 0
  4881                           ;adc.c: 179: Nouvelle_Valeur_ADC = 0;
  4882  001DBC  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  4883                           
  4884                           ; BSR set to: 0
  4885  001DBE  0012               	return		;funcret
  4886  001DC0                     __end_of_Init_ADC_Single_Shoot_I_Moteur_1:
  4887                           	opt stack 0
  4888                           tblptru	equ	0xFF8
  4889                           prodl	equ	0xFF3
  4890                           intcon	equ	0xFF2
  4891                           intcon2	equ	0xFF1
  4892                           intcon3	equ	0xFF0
  4893                           postinc0	equ	0xFEE
  4894                           wreg	equ	0xFE8
  4895                           postdec1	equ	0xFE5
  4896                           fsr1h	equ	0xFE2
  4897                           fsr1l	equ	0xFE1
  4898                           indf2	equ	0xFDF
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function _Detection_Pion_On *****************
  4904 ;; Defined at:
  4905 ;;		line 29 in file "pion.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  1    wreg      void 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 3F/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4919 ;;      Params:         0       0       0       0
  4920 ;;      Locals:         0       0       0       0
  4921 ;;      Temps:          0       0       0       0
  4922 ;;      Totals:         0       0       0       0
  4923 ;;Total ram usage:        0 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:   12
  4926 ;; This function calls:
  4927 ;;		_IRQ_PION_Metal_Apparait
  4928 ;; This function is called by:
  4929 ;;		_Mouvement_X
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           	psect	text23
  4934  002306                     __ptext23:
  4935                           	opt stack 0
  4936  002306                     _Detection_Pion_On:
  4937                           	opt stack 16
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;pion.c: 60: PIR3bits.IC1IF = 0;
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;incstack = 0
  4944  002306  92A4               	bcf	4004,1,c	;volatile
  4945                           
  4946                           ;pion.c: 61: PIE3bits.IC1IE = 1;
  4947  002308  82A3               	bsf	4003,1,c	;volatile
  4948                           
  4949                           ;pion.c: 62: PIR3bits.IC1IF = 0;
  4950  00230A  92A4               	bcf	4004,1,c	;volatile
  4951                           
  4952                           ;pion.c: 64: Detecteur_Pion = 1;
  4953  00230C  8050               	bsf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  4954                           
  4955                           ;pion.c: 68: if (Option_Pailleux != 1) {
  4956  00230E  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;pion.c: 76: if (PORTAbits.RA2 == 0) {
  4960  002310  B480               	btfsc	3968,2,c	;volatile
  4961  002312  0012               	return	
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;pion.c: 90: if (nb_100ms_platine_backup>=32){
  4965  002314  0E1F               	movlw	31
  4966  002316  644E               	cpfsgt	_nb_100ms_platine_backup,c
  4967  002318  D003               	goto	l8594
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;pion.c: 91: nb_100ms_platine = 255;
  4971  00231A  69A4               	setf	_nb_100ms_platine& (0+255),b
  4972                           
  4973                           ;pion.c: 92: }else{
  4974  00231C  EF11  F012         	goto	_IRQ_PION_Metal_Apparait
  4975  002320                     l8594:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;pion.c: 93: nb_100ms_platine = (unsigned char) (8 * nb_100ms_platine_backup);
  4979  002320  504E               	movf	_nb_100ms_platine_backup,w,c
  4980  002322  0D08               	mullw	8
  4981  002324  CFF3 F0A4          	movff	prodl,_nb_100ms_platine
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;pion.c: 94: }
  4985                           ;pion.c: 98: IRQ_PION_Metal_Apparait();
  4986  002328  EF11  F012         	goto	_IRQ_PION_Metal_Apparait	;wreg free
  4987  00232C                     __end_of_Detection_Pion_On:
  4988                           	opt stack 0
  4989                           tblptru	equ	0xFF8
  4990                           prodl	equ	0xFF3
  4991                           intcon	equ	0xFF2
  4992                           intcon2	equ	0xFF1
  4993                           intcon3	equ	0xFF0
  4994                           postinc0	equ	0xFEE
  4995                           wreg	equ	0xFE8
  4996                           postdec1	equ	0xFE5
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           fsr2h	equ	0xFDA
  5001                           fsr2l	equ	0xFD9
  5002                           status	equ	0xFD8
  5003                           
  5004 ;; *************** function _Detection_Pion_Init *****************
  5005 ;; Defined at:
  5006 ;;		line 13 in file "pion.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;		None
  5009 ;; Auto vars:     Size  Location     Type
  5010 ;;		None
  5011 ;; Return value:  Size  Location     Type
  5012 ;;                  1    wreg      void 
  5013 ;; Registers used:
  5014 ;;		wreg, status,2
  5015 ;; Tracked objects:
  5016 ;;		On entry : 3F/0
  5017 ;;		On exit  : 3F/0
  5018 ;;		Unchanged: 0/0
  5019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5020 ;;      Params:         0       0       0       0
  5021 ;;      Locals:         0       0       0       0
  5022 ;;      Temps:          0       0       0       0
  5023 ;;      Totals:         0       0       0       0
  5024 ;;Total ram usage:        0 bytes
  5025 ;; Hardware stack levels used:    1
  5026 ;; Hardware stack levels required when called:   10
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_Init_Variable
  5031 ;;		_Mouvement_X
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text24
  5036  002588                     __ptext24:
  5037                           	opt stack 0
  5038  002588                     _Detection_Pion_Init:
  5039                           	opt stack 19
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;pion.c: 15: if (PORTAbits.RA2 == 0) {
  5043                           
  5044                           ;incstack = 0
  5045  002588  B480               	btfsc	3968,2,c	;volatile
  5046  00258A  D004               	goto	l8380
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;pion.c: 16: Surveillance_Capteur_Pion = 0;
  5050  00258C  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;pion.c: 17: Mouvement_Startup = 1;
  5054  00258E  0E01               	movlw	1
  5055  002590  6E4D               	movwf	_Mouvement_Startup,c
  5056                           
  5057                           ;pion.c: 18: } else {
  5058  002592  0C01               	retlw	1
  5059  002594                     l8380:
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;pion.c: 19: Surveillance_Capteur_Pion = 1;
  5063  002594  0E01               	movlw	1
  5064  002596  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;pion.c: 20: Mouvement_Startup = 0;
  5068  002598  6A4D               	clrf	_Mouvement_Startup,c
  5069                           
  5070                           ; BSR set to: 0
  5071  00259A  0012               	return		;funcret
  5072  00259C                     __end_of_Detection_Pion_Init:
  5073                           	opt stack 0
  5074                           tblptru	equ	0xFF8
  5075                           prodl	equ	0xFF3
  5076                           intcon	equ	0xFF2
  5077                           intcon2	equ	0xFF1
  5078                           intcon3	equ	0xFF0
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postdec1	equ	0xFE5
  5082                           fsr1h	equ	0xFE2
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _Check_List_Moteur_1 *****************
  5090 ;; Defined at:
  5091 ;;		line 111 in file "action.c"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;		None
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;		None
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  1    wreg      void 
  5098 ;; Registers used:
  5099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 3F/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5105 ;;      Params:         0       0       0       0
  5106 ;;      Locals:         0       0       0       0
  5107 ;;      Temps:          0       0       0       0
  5108 ;;      Totals:         0       0       0       0
  5109 ;;Total ram usage:        0 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:   17
  5112 ;; This function calls:
  5113 ;;		_Alarme_On
  5114 ;;		_EUSART1_Check_Buffer
  5115 ;;		_SPI_Check_Buffer
  5116 ;;		___ftdiv
  5117 ;;		___ftmul
  5118 ;;		___fttol
  5119 ;;		___lbtoft
  5120 ;; This function is called by:
  5121 ;;		_Mouvement_X
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124                           
  5125                           	psect	text25
  5126  001A34                     __ptext25:
  5127                           	opt stack 0
  5128  001A34                     _Check_List_Moteur_1:
  5129                           	opt stack 11
  5130                           
  5131                           ;action.c: 114: if(PORTCbits.RC4 == 0){
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;incstack = 0
  5135  001A34  A882               	btfss	3970,4,c	;volatile
  5136                           
  5137                           ;action.c: 115: Compteur_IRQ_I_Moteur_1 = 0;
  5138  001A36  6A48               	clrf	_Compteur_IRQ_I_Moteur_1,c	;volatile
  5139                           
  5140                           ;action.c: 116: }
  5141                           ;action.c: 119: EUSART1_Check_Buffer();
  5142  001A38  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  5143                           
  5144                           ;action.c: 120: SPI_Check_Buffer();
  5145  001A3C  EC08  F011         	call	_SPI_Check_Buffer	;wreg free
  5146                           
  5147                           ;action.c: 122: if (nb_s_fonctionnement > nb_s_patinage) {
  5148  001A40  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5149  001A42  0100               	movlb	0	; () banked
  5150  001A44  5DA7               	subwf	_nb_s_patinage& (0+255),w,b
  5151  001A46  E234               	bc	l8538
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;action.c: 136: if ((Mouvement_Startup == 1)&& (Option_Multitas==1)){
  5155  001A48  044D               	decf	_Mouvement_Startup,w,c
  5156  001A4A  E12F               	bnz	l8536
  5157                           
  5158                           ; BSR set to: 0
  5159  001A4C  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  5160  001A4E  D02D               	goto	l8536
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;action.c: 139: if (nb_s_fonctionnement > (unsigned char) (1.1 * 8 * nb_100ms_platine_ba
      +                          ckup / 10.0)){
  5164  001A50  6A2C               	clrf	___ftdiv@f2,c
  5165  001A52  0E20               	movlw	32
  5166  001A54  6E2D               	movwf	___ftdiv@f2+1,c
  5167  001A56  0E41               	movlw	65
  5168  001A58  6E2E               	movwf	___ftdiv@f2+2,c
  5169  001A5A  0ECD               	movlw	205
  5170  001A5C  6E1E               	movwf	___ftmul@f2,c
  5171  001A5E  0E0C               	movlw	12
  5172  001A60  6E1F               	movwf	___ftmul@f2+1,c
  5173  001A62  0E41               	movlw	65
  5174  001A64  6E20               	movwf	___ftmul@f2+2,c
  5175  001A66  504E               	movf	_nb_100ms_platine_backup,w,c
  5176  001A68  ECCE  F011         	call	___lbtoft
  5177  001A6C  C017  F01B         	movff	?___lbtoft,___ftmul@f1
  5178  001A70  C018  F01C         	movff	?___lbtoft+1,___ftmul@f1+1
  5179  001A74  C019  F01D         	movff	?___lbtoft+2,___ftmul@f1+2
  5180  001A78  ECCB  F009         	call	___ftmul	;wreg free
  5181  001A7C  C01B  F029         	movff	?___ftmul,___ftdiv@f1
  5182  001A80  C01C  F02A         	movff	?___ftmul+1,___ftdiv@f1+1
  5183  001A84  C01D  F02B         	movff	?___ftmul+2,___ftdiv@f1+2
  5184  001A88  EC5B  F00B         	call	___ftdiv	;wreg free
  5185  001A8C  C029  F038         	movff	?___ftdiv,___fttol@f1
  5186  001A90  C02A  F039         	movff	?___ftdiv+1,___fttol@f1+1
  5187  001A94  C02B  F03A         	movff	?___ftdiv+2,___fttol@f1+2
  5188  001A98  ECFD  F00A         	call	___fttol	;wreg free
  5189  001A9C  504B               	movf	_nb_s_fonctionnement,w,c	;volatile
  5190  001A9E  5C38               	subwf	?___fttol,w,c
  5191  001AA0  E207               	bc	l8538
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;action.c: 140: Alarme_On(11);
  5195  001AA2  0E0B               	movlw	11
  5196  001AA4  EC30  F013         	call	_Alarme_On
  5197  001AA8  D003               	goto	l8538
  5198  001AAA                     l8536:
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;action.c: 144: Alarme_On(3);
  5202  001AAA  0E03               	movlw	3
  5203  001AAC  EC30  F013         	call	_Alarme_On
  5204  001AB0                     l8538:
  5205                           
  5206                           ;action.c: 145: }
  5207                           ;action.c: 146: }
  5208                           ;action.c: 149: if (Capteur_Capot_Compteur_Temps_S > 180) {
  5209  001AB0  0EB4               	movlw	180
  5210  001AB2  0100               	movlb	0	; () banked
  5211  001AB4  659E               	cpfsgt	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5212  001AB6  0CB4               	retlw	180
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;action.c: 150: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  5216  001AB8  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  5217                           
  5218                           ;action.c: 151: Capteur_Capot_Compteur_Temps_S = 0;
  5219  001ABC  6B9E               	clrf	_Capteur_Capot_Compteur_Temps_S& (0+255),b	;volatile
  5220                           
  5221                           ; BSR set to: 0
  5222  001ABE  0012               	return		;funcret
  5223  001AC0                     __end_of_Check_List_Moteur_1:
  5224                           	opt stack 0
  5225                           tblptru	equ	0xFF8
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           intcon2	equ	0xFF1
  5229                           intcon3	equ	0xFF0
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           postdec1	equ	0xFE5
  5233                           fsr1h	equ	0xFE2
  5234                           fsr1l	equ	0xFE1
  5235                           indf2	equ	0xFDF
  5236                           fsr2h	equ	0xFDA
  5237                           fsr2l	equ	0xFD9
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function ___lbtoft *****************
  5241 ;; Defined at:
  5242 ;;		line 27 in file "/opt/microchip/xc8/v1.42/sources/common/lbtoft.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  c               1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  c               1   25[COMRAM] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  3   22[COMRAM] float 
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 3F/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5256 ;;      Params:         3       0       0       0
  5257 ;;      Locals:         1       0       0       0
  5258 ;;      Temps:          0       0       0       0
  5259 ;;      Totals:         4       0       0       0
  5260 ;;Total ram usage:        4 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:   11
  5263 ;; This function calls:
  5264 ;;		___ftpack
  5265 ;; This function is called by:
  5266 ;;		_Check_List_Moteur_1
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text26
  5271  00239C                     __ptext26:
  5272                           	opt stack 0
  5273  00239C                     ___lbtoft:
  5274                           	opt stack 16
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;incstack = 0
  5278                           ;___lbtoft@c stored from wreg
  5279  00239C  6E1A               	movwf	___lbtoft@c,c
  5280  00239E  501A               	movf	___lbtoft@c,w,c
  5281  0023A0  6E0F               	movwf	___ftpack@arg,c
  5282  0023A2  6A10               	clrf	___ftpack@arg+1,c
  5283  0023A4  6A11               	clrf	___ftpack@arg+2,c
  5284  0023A6  0E8E               	movlw	142
  5285  0023A8  6E12               	movwf	___ftpack@exp,c
  5286  0023AA  0E00               	movlw	0
  5287  0023AC  6E13               	movwf	___ftpack@sign,c
  5288  0023AE  EC60  F00D         	call	___ftpack	;wreg free
  5289  0023B2  C00F  F017         	movff	?___ftpack,?___lbtoft
  5290  0023B6  C010  F018         	movff	?___ftpack+1,?___lbtoft+1
  5291  0023BA  C011  F019         	movff	?___ftpack+2,?___lbtoft+2
  5292  0023BE  0012               	return		;funcret
  5293  0023C0                     __end_of___lbtoft:
  5294                           	opt stack 0
  5295                           tblptru	equ	0xFF8
  5296                           prodl	equ	0xFF3
  5297                           intcon	equ	0xFF2
  5298                           intcon2	equ	0xFF1
  5299                           intcon3	equ	0xFF0
  5300                           postinc0	equ	0xFEE
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1h	equ	0xFE2
  5304                           fsr1l	equ	0xFE1
  5305                           indf2	equ	0xFDF
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function ___fttol *****************
  5311 ;; Defined at:
  5312 ;;		line 44 in file "/opt/microchip/xc8/v1.42/sources/common/fttol.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  f1              3   55[COMRAM] float 
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;  lval            4    1[BANK0 ] unsigned long 
  5317 ;;  exp1            1    5[BANK0 ] unsigned char 
  5318 ;;  sign1           1    0[BANK0 ] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;                  4   55[COMRAM] long 
  5321 ;; Registers used:
  5322 ;;		wreg, status,2, status,0
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 3F/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5328 ;;      Params:         4       0       0       0
  5329 ;;      Locals:         0       6       0       0
  5330 ;;      Temps:          5       0       0       0
  5331 ;;      Totals:         9       6       0       0
  5332 ;;Total ram usage:       15 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:   10
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Check_List_Moteur_1
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           	psect	text27
  5343  0015FA                     __ptext27:
  5344                           	opt stack 0
  5345  0015FA                     ___fttol:
  5346                           	opt stack 17
  5347                           
  5348                           ;incstack = 0
  5349  0015FA  C03A  F03C         	movff	___fttol@f1+2,??___fttol
  5350  0015FE  6A3D               	clrf	(??___fttol+1)& (0+255),c
  5351  001600  6A3E               	clrf	(??___fttol+2)& (0+255),c
  5352  001602  3439               	rlcf	___fttol@f1+1,w,c
  5353  001604  363C               	rlcf	??___fttol& (0+255),f,c
  5354  001606  E301               	bnc	u6521
  5355  001608  803D               	bsf	(??___fttol+1)& (0+255),0,c
  5356  00160A                     u6521:
  5357  00160A  503C               	movf	??___fttol,w,c
  5358  00160C  0100               	movlb	0	; () banked
  5359  00160E  6FF2               	movwf	___fttol@exp1& (0+255),b
  5360  001610  51F2               	movf	___fttol@exp1& (0+255),w,b
  5361  001612  E105               	bnz	l8308
  5362  001614                     l8306:
  5363                           
  5364                           ; BSR set to: 0
  5365  001614  6A38               	clrf	?___fttol,c
  5366  001616  6A39               	clrf	?___fttol+1,c
  5367  001618  6A3A               	clrf	?___fttol+2,c
  5368  00161A  6A3B               	clrf	?___fttol+3,c
  5369  00161C  0012               	return	
  5370  00161E                     l8308:
  5371                           
  5372                           ; BSR set to: 0
  5373  00161E  0E17               	movlw	23
  5374  001620  6E3C               	movwf	??___fttol& (0+255),c
  5375  001622  C038  F03D         	movff	___fttol@f1,??___fttol+1
  5376  001626  C039  F03E         	movff	___fttol@f1+1,??___fttol+2
  5377  00162A  C03A  F03F         	movff	___fttol@f1+2,??___fttol+3
  5378  00162E  283C               	incf	??___fttol,w,c
  5379  001630  6E40               	movwf	(??___fttol+4)& (0+255),c
  5380  001632  D004               	goto	u6540
  5381  001634                     u6545:
  5382  001634  90D8               	bcf	status,0,c
  5383  001636  323F               	rrcf	??___fttol+3,f,c
  5384  001638  323E               	rrcf	??___fttol+2,f,c
  5385  00163A  323D               	rrcf	??___fttol+1,f,c
  5386  00163C                     u6540:
  5387  00163C  2E40               	decfsz	(??___fttol+4)& (0+255),f,c
  5388  00163E  D7FA               	goto	u6545
  5389  001640  503D               	movf	??___fttol+1,w,c
  5390  001642  0100               	movlb	0	; () banked
  5391  001644  6FED               	movwf	___fttol@sign1& (0+255),b
  5392                           
  5393                           ; BSR set to: 0
  5394  001646  8E39               	bsf	___fttol@f1+1,7,c
  5395                           
  5396                           ; BSR set to: 0
  5397  001648  6A3A               	clrf	___fttol@f1+2,c
  5398                           
  5399                           ; BSR set to: 0
  5400  00164A  5038               	movf	___fttol@f1,w,c
  5401  00164C  6FEE               	movwf	___fttol@lval& (0+255),b
  5402  00164E  5039               	movf	___fttol@f1+1,w,c
  5403  001650  6FEF               	movwf	(___fttol@lval+1)& (0+255),b
  5404  001652  503A               	movf	___fttol@f1+2,w,c
  5405  001654  6FF0               	movwf	(___fttol@lval+2)& (0+255),b
  5406  001656  6BF1               	clrf	(___fttol@lval+3)& (0+255),b
  5407                           
  5408                           ; BSR set to: 0
  5409  001658  0E8E               	movlw	142
  5410  00165A  5FF2               	subwf	___fttol@exp1& (0+255),f,b
  5411                           
  5412                           ; BSR set to: 0
  5413  00165C  AFF2               	btfss	___fttol@exp1& (0+255),7,b
  5414  00165E  D00C               	goto	l8328
  5415                           
  5416                           ; BSR set to: 0
  5417  001660  51F2               	movf	___fttol@exp1& (0+255),w,b
  5418  001662  0A80               	xorlw	128
  5419  001664  0F8F               	addlw	143
  5420  001666  E3D6               	bnc	l8306
  5421  001668                     l8324:
  5422                           
  5423                           ; BSR set to: 0
  5424  001668  90D8               	bcf	status,0,c
  5425  00166A  33F1               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5426  00166C  33F0               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5427  00166E  33EF               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5428  001670  33EE               	rrcf	___fttol@lval& (0+255),f,b
  5429                           
  5430                           ; BSR set to: 0
  5431  001672  3FF2               	incfsz	___fttol@exp1& (0+255),f,b
  5432  001674  D7F9               	goto	l8324
  5433  001676  D00C               	goto	l8336
  5434  001678                     l8328:
  5435                           
  5436                           ; BSR set to: 0
  5437  001678  0E17               	movlw	23
  5438  00167A  65F2               	cpfsgt	___fttol@exp1& (0+255),b
  5439  00167C  D007               	goto	l8334
  5440  00167E  D7CA               	goto	l8306
  5441  001680                     l8332:
  5442                           
  5443                           ; BSR set to: 0
  5444  001680  90D8               	bcf	status,0,c
  5445  001682  37EE               	rlcf	___fttol@lval& (0+255),f,b
  5446  001684  37EF               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5447  001686  37F0               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5448  001688  37F1               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5449  00168A  07F2               	decf	___fttol@exp1& (0+255),f,b
  5450  00168C                     l8334:
  5451                           
  5452                           ; BSR set to: 0
  5453  00168C  51F2               	movf	___fttol@exp1& (0+255),w,b
  5454  00168E  E1F8               	bnz	l8332
  5455  001690                     l8336:
  5456                           
  5457                           ; BSR set to: 0
  5458  001690  51ED               	movf	___fttol@sign1& (0+255),w,b
  5459  001692  E008               	bz	l8340
  5460                           
  5461                           ; BSR set to: 0
  5462  001694  1FF1               	comf	(___fttol@lval+3)& (0+255),f,b
  5463  001696  1FF0               	comf	(___fttol@lval+2)& (0+255),f,b
  5464  001698  1FEF               	comf	(___fttol@lval+1)& (0+255),f,b
  5465  00169A  6DEE               	negf	___fttol@lval& (0+255),b
  5466  00169C  0E00               	movlw	0
  5467  00169E  23EF               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5468  0016A0  23F0               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5469  0016A2  23F1               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5470  0016A4                     l8340:
  5471                           
  5472                           ; BSR set to: 0
  5473  0016A4  C0EE  F038         	movff	___fttol@lval,?___fttol
  5474  0016A8  C0EF  F039         	movff	___fttol@lval+1,?___fttol+1
  5475  0016AC  C0F0  F03A         	movff	___fttol@lval+2,?___fttol+2
  5476  0016B0  C0F1  F03B         	movff	___fttol@lval+3,?___fttol+3
  5477                           
  5478                           ; BSR set to: 0
  5479  0016B4  0012               	return		;funcret
  5480  0016B6                     __end_of___fttol:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           intcon2	equ	0xFF1
  5486                           intcon3	equ	0xFF0
  5487                           postinc0	equ	0xFEE
  5488                           wreg	equ	0xFE8
  5489                           postdec1	equ	0xFE5
  5490                           fsr1h	equ	0xFE2
  5491                           fsr1l	equ	0xFE1
  5492                           indf2	equ	0xFDF
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function ___ftmul *****************
  5498 ;; Defined at:
  5499 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/ftmul.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  f1              3   26[COMRAM] float 
  5502 ;;  f2              3   29[COMRAM] float 
  5503 ;; Auto vars:     Size  Location     Type
  5504 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  5505 ;;  sign            1   36[COMRAM] unsigned char 
  5506 ;;  exp             1   35[COMRAM] unsigned char 
  5507 ;;  cntr            1    0        unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  3   26[COMRAM] float 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5517 ;;      Params:         6       0       0       0
  5518 ;;      Locals:         5       0       0       0
  5519 ;;      Temps:          3       0       0       0
  5520 ;;      Totals:        14       0       0       0
  5521 ;;Total ram usage:       14 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:   11
  5524 ;; This function calls:
  5525 ;;		___ftpack
  5526 ;; This function is called by:
  5527 ;;		_Check_List_Moteur_1
  5528 ;; This function uses a non-reentrant model
  5529 ;;
  5530                           
  5531                           	psect	text28
  5532  001396                     __ptext28:
  5533                           	opt stack 0
  5534  001396                     ___ftmul:
  5535                           	opt stack 16
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;incstack = 0
  5539  001396  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5540  00139A  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5541  00139C  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5542  00139E  341C               	rlcf	___ftmul@f1+1,w,c
  5543  0013A0  3621               	rlcf	??___ftmul& (0+255),f,c
  5544  0013A2  E301               	bnc	u6471
  5545  0013A4  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5546  0013A6                     u6471:
  5547  0013A6  5021               	movf	??___ftmul,w,c
  5548  0013A8  6E24               	movwf	___ftmul@exp,c
  5549  0013AA  5024               	movf	___ftmul@exp,w,c
  5550  0013AC  E104               	bnz	l8270
  5551  0013AE  6A1B               	clrf	?___ftmul,c
  5552  0013B0  6A1C               	clrf	?___ftmul+1,c
  5553  0013B2  6A1D               	clrf	?___ftmul+2,c
  5554  0013B4  0012               	return	
  5555  0013B6                     l8270:
  5556  0013B6  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5557  0013BA  6A22               	clrf	(??___ftmul+1)& (0+255),c
  5558  0013BC  6A23               	clrf	(??___ftmul+2)& (0+255),c
  5559  0013BE  341F               	rlcf	___ftmul@f2+1,w,c
  5560  0013C0  3621               	rlcf	??___ftmul& (0+255),f,c
  5561  0013C2  E301               	bnc	u6491
  5562  0013C4  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  5563  0013C6                     u6491:
  5564  0013C6  5021               	movf	??___ftmul,w,c
  5565  0013C8  6E25               	movwf	___ftmul@sign,c
  5566  0013CA  5025               	movf	___ftmul@sign,w,c
  5567  0013CC  E104               	bnz	l8274
  5568  0013CE  6A1B               	clrf	?___ftmul,c
  5569  0013D0  6A1C               	clrf	?___ftmul+1,c
  5570  0013D2  6A1D               	clrf	?___ftmul+2,c
  5571  0013D4  0012               	return	
  5572  0013D6                     l8274:
  5573  0013D6  5025               	movf	___ftmul@sign,w,c
  5574  0013D8  0F7B               	addlw	123
  5575  0013DA  2624               	addwf	___ftmul@exp,f,c
  5576  0013DC  C01D  F025         	movff	___ftmul@f1+2,___ftmul@sign
  5577  0013E0  5020               	movf	___ftmul@f2+2,w,c
  5578  0013E2  1A25               	xorwf	___ftmul@sign,f,c
  5579  0013E4  0E80               	movlw	128
  5580  0013E6  1625               	andwf	___ftmul@sign,f,c
  5581  0013E8  8E1C               	bsf	___ftmul@f1+1,7,c
  5582  0013EA  8E1F               	bsf	___ftmul@f2+1,7,c
  5583  0013EC  6A20               	clrf	___ftmul@f2+2,c
  5584  0013EE  6A1D               	clrf	___ftmul@f1+2,c
  5585  0013F0  501B               	movf	___ftmul@f1,w,c
  5586  0013F2  021E               	mulwf	___ftmul@f2,c
  5587  0013F4  CFF4 FFF3          	movff	prodh,prodl
  5588  0013F8  6AF4               	clrf	prodh,c
  5589  0013FA  CFF3 F026          	movff	prodl,___ftmul@f3_as_product
  5590  0013FE  CFF4 F027          	movff	prodh,___ftmul@f3_as_product+1
  5591  001402  6A28               	clrf	___ftmul@f3_as_product+2,c
  5592  001404  501B               	movf	___ftmul@f1,w,c
  5593  001406  021F               	mulwf	___ftmul@f2+1,c
  5594  001408  50F3               	movf	prodl,w,c
  5595  00140A  2626               	addwf	___ftmul@f3_as_product,f,c
  5596  00140C  50F4               	movf	prodh,w,c
  5597  00140E  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5598  001410  0E00               	movlw	0
  5599  001412  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5600  001414  501C               	movf	___ftmul@f1+1,w,c
  5601  001416  021E               	mulwf	___ftmul@f2,c
  5602  001418  50F3               	movf	prodl,w,c
  5603  00141A  2626               	addwf	___ftmul@f3_as_product,f,c
  5604  00141C  50F4               	movf	prodh,w,c
  5605  00141E  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  5606  001420  0E00               	movlw	0
  5607  001422  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5608  001424  501C               	movf	___ftmul@f1+1,w,c
  5609  001426  021F               	mulwf	___ftmul@f2+1,c
  5610  001428  50F3               	movf	prodl,w,c
  5611  00142A  2627               	addwf	___ftmul@f3_as_product+1,f,c
  5612  00142C  50F4               	movf	prodh,w,c
  5613  00142E  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  5614  001430  AE28               	btfss	___ftmul@f3_as_product+2,7,c
  5615  001432  D005               	goto	l2057
  5616  001434  90D8               	bcf	status,0,c
  5617  001436  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5618  001438  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5619  00143A  3226               	rrcf	___ftmul@f3_as_product,f,c
  5620  00143C  2A24               	incf	___ftmul@exp,f,c
  5621  00143E                     l2057:
  5622  00143E  90D8               	bcf	status,0,c
  5623  001440  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  5624  001442  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  5625  001444  3226               	rrcf	___ftmul@f3_as_product,f,c
  5626  001446  C026  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  5627  00144A  C027  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5628  00144E  C028  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5629  001452  C024  F012         	movff	___ftmul@exp,___ftpack@exp
  5630  001456  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  5631  00145A  EC60  F00D         	call	___ftpack	;wreg free
  5632  00145E  C00F  F01B         	movff	?___ftpack,?___ftmul
  5633  001462  C010  F01C         	movff	?___ftpack+1,?___ftmul+1
  5634  001466  C011  F01D         	movff	?___ftpack+2,?___ftmul+2
  5635  00146A  0012               	return		;funcret
  5636  00146C                     __end_of___ftmul:
  5637                           	opt stack 0
  5638                           tblptru	equ	0xFF8
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon2	equ	0xFF1
  5643                           intcon3	equ	0xFF0
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           fsr1h	equ	0xFE2
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function ___ftdiv *****************
  5655 ;; Defined at:
  5656 ;;		line 54 in file "/opt/microchip/xc8/v1.42/sources/common/ftdiv.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;  f1              3   40[COMRAM] float 
  5659 ;;  f2              3   43[COMRAM] float 
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;  f3              3   50[COMRAM] float 
  5662 ;;  sign            1   54[COMRAM] unsigned char 
  5663 ;;  exp             1   53[COMRAM] unsigned char 
  5664 ;;  cntr            1   49[COMRAM] unsigned char 
  5665 ;; Return value:  Size  Location     Type
  5666 ;;                  3   40[COMRAM] float 
  5667 ;; Registers used:
  5668 ;;		wreg, status,2, status,0, cstack
  5669 ;; Tracked objects:
  5670 ;;		On entry : 0/0
  5671 ;;		On exit  : 0/0
  5672 ;;		Unchanged: 0/0
  5673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5674 ;;      Params:         6       0       0       0
  5675 ;;      Locals:         6       0       0       0
  5676 ;;      Temps:          3       0       0       0
  5677 ;;      Totals:        15       0       0       0
  5678 ;;Total ram usage:       15 bytes
  5679 ;; Hardware stack levels used:    1
  5680 ;; Hardware stack levels required when called:   11
  5681 ;; This function calls:
  5682 ;;		___ftpack
  5683 ;; This function is called by:
  5684 ;;		_Check_List_Moteur_1
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           	psect	text29
  5689  0016B6                     __ptext29:
  5690                           	opt stack 0
  5691  0016B6                     ___ftdiv:
  5692                           	opt stack 16
  5693                           
  5694                           ;incstack = 0
  5695  0016B6  C02B  F02F         	movff	___ftdiv@f1+2,??___ftdiv
  5696  0016BA  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5697  0016BC  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5698  0016BE  342A               	rlcf	___ftdiv@f1+1,w,c
  5699  0016C0  362F               	rlcf	??___ftdiv& (0+255),f,c
  5700  0016C2  E301               	bnc	u6421
  5701  0016C4  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5702  0016C6                     u6421:
  5703  0016C6  502F               	movf	??___ftdiv,w,c
  5704  0016C8  6E36               	movwf	___ftdiv@exp,c
  5705  0016CA  5036               	movf	___ftdiv@exp,w,c
  5706  0016CC  E104               	bnz	l8234
  5707  0016CE  6A29               	clrf	?___ftdiv,c
  5708  0016D0  6A2A               	clrf	?___ftdiv+1,c
  5709  0016D2  6A2B               	clrf	?___ftdiv+2,c
  5710  0016D4  0012               	return	
  5711  0016D6                     l8234:
  5712  0016D6  C02E  F02F         	movff	___ftdiv@f2+2,??___ftdiv
  5713  0016DA  6A30               	clrf	(??___ftdiv+1)& (0+255),c
  5714  0016DC  6A31               	clrf	(??___ftdiv+2)& (0+255),c
  5715  0016DE  342D               	rlcf	___ftdiv@f2+1,w,c
  5716  0016E0  362F               	rlcf	??___ftdiv& (0+255),f,c
  5717  0016E2  E301               	bnc	u6441
  5718  0016E4  8030               	bsf	(??___ftdiv+1)& (0+255),0,c
  5719  0016E6                     u6441:
  5720  0016E6  502F               	movf	??___ftdiv,w,c
  5721  0016E8  6E37               	movwf	___ftdiv@sign,c
  5722  0016EA  5037               	movf	___ftdiv@sign,w,c
  5723  0016EC  E104               	bnz	l2041
  5724  0016EE  6A29               	clrf	?___ftdiv,c
  5725  0016F0  6A2A               	clrf	?___ftdiv+1,c
  5726  0016F2  6A2B               	clrf	?___ftdiv+2,c
  5727  0016F4  0012               	return	
  5728  0016F6                     l2041:
  5729  0016F6  6A33               	clrf	___ftdiv@f3,c
  5730  0016F8  6A34               	clrf	___ftdiv@f3+1,c
  5731  0016FA  6A35               	clrf	___ftdiv@f3+2,c
  5732  0016FC  5037               	movf	___ftdiv@sign,w,c
  5733  0016FE  0F89               	addlw	137
  5734  001700  5E36               	subwf	___ftdiv@exp,f,c
  5735  001702  C02B  F037         	movff	___ftdiv@f1+2,___ftdiv@sign
  5736  001706  502E               	movf	___ftdiv@f2+2,w,c
  5737  001708  1A37               	xorwf	___ftdiv@sign,f,c
  5738  00170A  0E80               	movlw	128
  5739  00170C  1637               	andwf	___ftdiv@sign,f,c
  5740  00170E  8E2A               	bsf	___ftdiv@f1+1,7,c
  5741  001710  6A2B               	clrf	___ftdiv@f1+2,c
  5742  001712  8E2D               	bsf	___ftdiv@f2+1,7,c
  5743  001714  6A2E               	clrf	___ftdiv@f2+2,c
  5744  001716  0E18               	movlw	24
  5745  001718  6E32               	movwf	___ftdiv@cntr,c
  5746  00171A                     l8252:
  5747  00171A  90D8               	bcf	status,0,c
  5748  00171C  3633               	rlcf	___ftdiv@f3,f,c
  5749  00171E  3634               	rlcf	___ftdiv@f3+1,f,c
  5750  001720  3635               	rlcf	___ftdiv@f3+2,f,c
  5751  001722  502C               	movf	___ftdiv@f2,w,c
  5752  001724  5C29               	subwf	___ftdiv@f1,w,c
  5753  001726  502D               	movf	___ftdiv@f2+1,w,c
  5754  001728  582A               	subwfb	___ftdiv@f1+1,w,c
  5755  00172A  502E               	movf	___ftdiv@f2+2,w,c
  5756  00172C  582B               	subwfb	___ftdiv@f1+2,w,c
  5757  00172E  E307               	bnc	l2043
  5758  001730  502C               	movf	___ftdiv@f2,w,c
  5759  001732  5E29               	subwf	___ftdiv@f1,f,c
  5760  001734  502D               	movf	___ftdiv@f2+1,w,c
  5761  001736  5A2A               	subwfb	___ftdiv@f1+1,f,c
  5762  001738  502E               	movf	___ftdiv@f2+2,w,c
  5763  00173A  5A2B               	subwfb	___ftdiv@f1+2,f,c
  5764  00173C  8033               	bsf	___ftdiv@f3,0,c
  5765  00173E                     l2043:
  5766  00173E  90D8               	bcf	status,0,c
  5767  001740  3629               	rlcf	___ftdiv@f1,f,c
  5768  001742  362A               	rlcf	___ftdiv@f1+1,f,c
  5769  001744  362B               	rlcf	___ftdiv@f1+2,f,c
  5770  001746  2E32               	decfsz	___ftdiv@cntr,f,c
  5771  001748  D7E8               	goto	l8252
  5772  00174A  C033  F00F         	movff	___ftdiv@f3,___ftpack@arg
  5773  00174E  C034  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5774  001752  C035  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5775  001756  C036  F012         	movff	___ftdiv@exp,___ftpack@exp
  5776  00175A  C037  F013         	movff	___ftdiv@sign,___ftpack@sign
  5777  00175E  EC60  F00D         	call	___ftpack	;wreg free
  5778  001762  C00F  F029         	movff	?___ftpack,?___ftdiv
  5779  001766  C010  F02A         	movff	?___ftpack+1,?___ftdiv+1
  5780  00176A  C011  F02B         	movff	?___ftpack+2,?___ftdiv+2
  5781  00176E  0012               	return		;funcret
  5782  001770                     __end_of___ftdiv:
  5783                           	opt stack 0
  5784                           tblptru	equ	0xFF8
  5785                           prodh	equ	0xFF4
  5786                           prodl	equ	0xFF3
  5787                           intcon	equ	0xFF2
  5788                           intcon2	equ	0xFF1
  5789                           intcon3	equ	0xFF0
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           postdec1	equ	0xFE5
  5793                           fsr1h	equ	0xFE2
  5794                           fsr1l	equ	0xFE1
  5795                           indf2	equ	0xFDF
  5796                           fsr2h	equ	0xFDA
  5797                           fsr2l	equ	0xFD9
  5798                           status	equ	0xFD8
  5799                           
  5800 ;; *************** function ___ftpack *****************
  5801 ;; Defined at:
  5802 ;;		line 62 in file "/opt/microchip/xc8/v1.42/sources/common/float.c"
  5803 ;; Parameters:    Size  Location     Type
  5804 ;;  arg             3   14[COMRAM] unsigned um
  5805 ;;  exp             1   17[COMRAM] unsigned char 
  5806 ;;  sign            1   18[COMRAM] unsigned char 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;		None
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  3   14[COMRAM] float 
  5811 ;; Registers used:
  5812 ;;		wreg, status,2, status,0
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5818 ;;      Params:         5       0       0       0
  5819 ;;      Locals:         0       0       0       0
  5820 ;;      Temps:          3       0       0       0
  5821 ;;      Totals:         8       0       0       0
  5822 ;;Total ram usage:        8 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:   10
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		___ftdiv
  5829 ;;		___ftmul
  5830 ;;		___lbtoft
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text30
  5835  001AC0                     __ptext30:
  5836                           	opt stack 0
  5837  001AC0                     ___ftpack:
  5838                           	opt stack 16
  5839                           
  5840                           ;incstack = 0
  5841  001AC0  5012               	movf	___ftpack@exp,w,c
  5842  001AC2  E004               	bz	l1973
  5843  001AC4  500F               	movf	___ftpack@arg,w,c
  5844  001AC6  1010               	iorwf	___ftpack@arg+1,w,c
  5845  001AC8  1011               	iorwf	___ftpack@arg+2,w,c
  5846  001ACA  E109               	bnz	l8182
  5847  001ACC                     l1973:
  5848  001ACC  6A0F               	clrf	?___ftpack,c
  5849  001ACE  6A10               	clrf	?___ftpack+1,c
  5850  001AD0  6A11               	clrf	?___ftpack+2,c
  5851  001AD2  0012               	return	
  5852  001AD4                     l8180:
  5853  001AD4  2A12               	incf	___ftpack@exp,f,c
  5854  001AD6  90D8               	bcf	status,0,c
  5855  001AD8  3211               	rrcf	___ftpack@arg+2,f,c
  5856  001ADA  3210               	rrcf	___ftpack@arg+1,f,c
  5857  001ADC  320F               	rrcf	___ftpack@arg,f,c
  5858  001ADE                     l8182:
  5859  001ADE  6A14               	clrf	??___ftpack& (0+255),c
  5860  001AE0  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5861  001AE2  0EFE               	movlw	254
  5862  001AE4  1411               	andwf	___ftpack@arg+2,w,c
  5863  001AE6  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5864  001AE8  5014               	movf	??___ftpack,w,c
  5865  001AEA  1015               	iorwf	??___ftpack+1,w,c
  5866  001AEC  1016               	iorwf	??___ftpack+2,w,c
  5867  001AEE  E00A               	bz	l8188
  5868  001AF0  D7F1               	goto	l8180
  5869  001AF2                     l8184:
  5870  001AF2  2A12               	incf	___ftpack@exp,f,c
  5871  001AF4  2A0F               	incf	___ftpack@arg,f,c
  5872  001AF6  0E00               	movlw	0
  5873  001AF8  2210               	addwfc	___ftpack@arg+1,f,c
  5874  001AFA  2211               	addwfc	___ftpack@arg+2,f,c
  5875  001AFC  90D8               	bcf	status,0,c
  5876  001AFE  3211               	rrcf	___ftpack@arg+2,f,c
  5877  001B00  3210               	rrcf	___ftpack@arg+1,f,c
  5878  001B02  320F               	rrcf	___ftpack@arg,f,c
  5879  001B04                     l8188:
  5880  001B04  6A14               	clrf	??___ftpack& (0+255),c
  5881  001B06  6A15               	clrf	(??___ftpack+1)& (0+255),c
  5882  001B08  5011               	movf	___ftpack@arg+2,w,c
  5883  001B0A  6E16               	movwf	(??___ftpack+2)& (0+255),c
  5884  001B0C  5014               	movf	??___ftpack,w,c
  5885  001B0E  1015               	iorwf	??___ftpack+1,w,c
  5886  001B10  1016               	iorwf	??___ftpack+2,w,c
  5887  001B12  E006               	bz	l8192
  5888  001B14  D7EE               	goto	l8184
  5889  001B16                     l8190:
  5890  001B16  0612               	decf	___ftpack@exp,f,c
  5891  001B18  90D8               	bcf	status,0,c
  5892  001B1A  360F               	rlcf	___ftpack@arg,f,c
  5893  001B1C  3610               	rlcf	___ftpack@arg+1,f,c
  5894  001B1E  3611               	rlcf	___ftpack@arg+2,f,c
  5895  001B20                     l8192:
  5896  001B20  BE10               	btfsc	___ftpack@arg+1,7,c
  5897  001B22  D003               	goto	l1985
  5898  001B24  0E02               	movlw	2
  5899  001B26  6012               	cpfslt	___ftpack@exp,c
  5900  001B28  D7F6               	goto	l8190
  5901  001B2A                     l1985:
  5902  001B2A  A012               	btfss	___ftpack@exp,0,c
  5903  001B2C  9E10               	bcf	___ftpack@arg+1,7,c
  5904  001B2E  90D8               	bcf	status,0,c
  5905  001B30  3212               	rrcf	___ftpack@exp,f,c
  5906  001B32  5012               	movf	___ftpack@exp,w,c
  5907  001B34  1211               	iorwf	___ftpack@arg+2,f,c
  5908  001B36  5013               	movf	___ftpack@sign,w,c
  5909  001B38  E001               	bz	l8206
  5910  001B3A  8E11               	bsf	___ftpack@arg+2,7,c
  5911  001B3C                     l8206:
  5912  001B3C  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  5913  001B40  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  5914  001B44  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  5915  001B48  0012               	return		;funcret
  5916  001B4A                     __end_of___ftpack:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           prodh	equ	0xFF4
  5920                           prodl	equ	0xFF3
  5921                           intcon	equ	0xFF2
  5922                           intcon2	equ	0xFF1
  5923                           intcon3	equ	0xFF0
  5924                           postinc0	equ	0xFEE
  5925                           wreg	equ	0xFE8
  5926                           postdec1	equ	0xFE5
  5927                           fsr1h	equ	0xFE2
  5928                           fsr1l	equ	0xFE1
  5929                           indf2	equ	0xFDF
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function _Capteur_Capot_On *****************
  5935 ;; Defined at:
  5936 ;;		line 176 in file "interrupt.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;		None
  5939 ;; Auto vars:     Size  Location     Type
  5940 ;;		None
  5941 ;; Return value:  Size  Location     Type
  5942 ;;                  1    wreg      void 
  5943 ;; Registers used:
  5944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5945 ;; Tracked objects:
  5946 ;;		On entry : 3F/0
  5947 ;;		On exit  : 0/0
  5948 ;;		Unchanged: 0/0
  5949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5950 ;;      Params:         0       0       0       0
  5951 ;;      Locals:         0       0       0       0
  5952 ;;      Temps:          0       0       0       0
  5953 ;;      Totals:         0       0       0       0
  5954 ;;Total ram usage:        0 bytes
  5955 ;; Hardware stack levels used:    1
  5956 ;; Hardware stack levels required when called:   11
  5957 ;; This function calls:
  5958 ;;		_Etat_Update
  5959 ;; This function is called by:
  5960 ;;		_Mouvement_X
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text31
  5965  002640                     __ptext31:
  5966                           	opt stack 0
  5967  002640                     _Capteur_Capot_On:
  5968                           	opt stack 17
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;interrupt.c: 177: INTCONbits.INT0IE = 1;
  5972                           
  5973                           ;incstack = 0
  5974  002640  88F2               	bsf	intcon,4,c	;volatile
  5975                           
  5976                           ;interrupt.c: 178: INTCONbits.INT0IF = 0;
  5977  002642  92F2               	bcf	intcon,1,c	;volatile
  5978                           
  5979                           ;interrupt.c: 183: if (PORTCbits.RC3==0) {
  5980  002644  B682               	btfsc	3970,3,c	;volatile
  5981  002646  0012               	return	
  5982                           
  5983                           ; BSR set to: 0
  5984                           ;interrupt.c: 185: P4_busy = 0;
  5985  002648  6BAC               	clrf	_P4_busy& (0+255),b
  5986                           
  5987                           ; BSR set to: 0
  5988                           ;interrupt.c: 186: Etat_Update(77);
  5989  00264A  0E4D               	movlw	77
  5990  00264C  EF20  F012         	goto	_Etat_Update
  5991  002650                     __end_of_Capteur_Capot_On:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           intcon	equ	0xFF2
  5997                           intcon2	equ	0xFF1
  5998                           intcon3	equ	0xFF0
  5999                           postinc0	equ	0xFEE
  6000                           wreg	equ	0xFE8
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _Capteur_Capot_Off *****************
  6010 ;; Defined at:
  6011 ;;		line 194 in file "interrupt.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		None
  6020 ;; Tracked objects:
  6021 ;;		On entry : 3F/0
  6022 ;;		On exit  : 3F/0
  6023 ;;		Unchanged: 3F/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6025 ;;      Params:         0       0       0       0
  6026 ;;      Locals:         0       0       0       0
  6027 ;;      Temps:          0       0       0       0
  6028 ;;      Totals:         0       0       0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:   10
  6032 ;; This function calls:
  6033 ;;		Nothing
  6034 ;; This function is called by:
  6035 ;;		_Mouvement_X
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text32
  6040  00273A                     __ptext32:
  6041                           	opt stack 0
  6042  00273A                     _Capteur_Capot_Off:
  6043                           	opt stack 18
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;interrupt.c: 195: INTCONbits.INT0IE = 0;
  6047                           
  6048                           ;incstack = 0
  6049  00273A  98F2               	bcf	intcon,4,c	;volatile
  6050                           
  6051                           ; BSR set to: 0
  6052  00273C  0012               	return		;funcret
  6053  00273E                     __end_of_Capteur_Capot_Off:
  6054                           	opt stack 0
  6055                           tblptru	equ	0xFF8
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           intcon	equ	0xFF2
  6059                           intcon2	equ	0xFF1
  6060                           intcon3	equ	0xFF0
  6061                           postinc0	equ	0xFEE
  6062                           wreg	equ	0xFE8
  6063                           postdec1	equ	0xFE5
  6064                           fsr1h	equ	0xFE2
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function _Mouvement_Bequille *****************
  6072 ;; Defined at:
  6073 ;;		line 787 in file "action.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  direction       1    wreg     unsigned char 
  6076 ;;  type_consign    1    7[BANK2 ] unsigned char 
  6077 ;;  option          1    8[BANK2 ] unsigned char 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  direction       1    9[BANK2 ] unsigned char 
  6080 ;;  index           2    0        unsigned int 
  6081 ;;  Option_Temps    1    0        unsigned char 
  6082 ;;  i_max           1    0        unsigned char 
  6083 ;;  i_min           1    0        unsigned char 
  6084 ;;  i               1    0        unsigned char 
  6085 ;; Return value:  Size  Location     Type
  6086 ;;                  1    wreg      void 
  6087 ;; Registers used:
  6088 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6089 ;; Tracked objects:
  6090 ;;		On entry : 3F/0
  6091 ;;		On exit  : 3F/0
  6092 ;;		Unchanged: 0/0
  6093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6094 ;;      Params:         0       0       0       2
  6095 ;;      Locals:         0       0       0       1
  6096 ;;      Temps:          0       0       0       0
  6097 ;;      Totals:         0       0       0       3
  6098 ;;Total ram usage:        3 bytes
  6099 ;; Hardware stack levels used:    1
  6100 ;; Hardware stack levels required when called:   18
  6101 ;; This function calls:
  6102 ;;		_Check_List_Moteur_Bequille
  6103 ;;		_Coupe_Moteur
  6104 ;;		_Detection_Pion_Off
  6105 ;;		_Init_ADC_Single_Shoot_I_Moteur_2
  6106 ;;		_Init_Moteur_Bequille
  6107 ;;		_Surveillance_Consommation_Moteur_2_Desactiver
  6108 ;;		_TIMER2_On
  6109 ;;		_delay_s
  6110 ;;		_u_Init_PWM
  6111 ;; This function is called by:
  6112 ;;		_Cycle
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text33
  6117  00198A                     __ptext33:
  6118                           	opt stack 0
  6119  00198A                     _Mouvement_Bequille:
  6120                           	opt stack 11
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;incstack = 0
  6124                           ;Mouvement_Bequille@direction stored from wreg
  6125  00198A  0102               	movlb	2	; () banked
  6126  00198C  6F89               	movwf	Mouvement_Bequille@direction& (0+255),b
  6127                           
  6128                           ;action.c: 788: unsigned char i, i_min, i_max;
  6129                           ;action.c: 789: unsigned char Option_Temps_S;
  6130                           ;action.c: 796: Surveillance_Consommation_Moteur_2_Desactiver();
  6131  00198E  EC48  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;action.c: 798: Detection_Pion_Off();
  6135  001992  EC79  F013         	call	_Detection_Pion_Off	;wreg free
  6136                           
  6137                           ;action.c: 801: nb_s_bequille = option;
  6138  001996  C288  F0A2         	movff	Mouvement_Bequille@option,_nb_s_bequille
  6139                           
  6140                           ;action.c: 804: consigne = 10;
  6141  00199A  0E0A               	movlw	10
  6142  00199C  0100               	movlb	0	; () banked
  6143  00199E  6F98               	movwf	_consigne& (0+255),b	;volatile
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;action.c: 815: index = 0;
  6147  0019A0  ECE0  F00E         	call	_u_Init_PWM	;wreg free
  6148                           
  6149                           ; BSR set to: 0
  6150                           ;action.c: 816: TMR2 = 0;
  6151  0019A4  6ACC               	clrf	4044,c	;volatile
  6152                           
  6153                           ; BSR set to: 0
  6154                           ;action.c: 817: TMR2IF = 0;
  6155  0019A6  929E               	bcf	3998,1,c	;volatile
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;action.c: 822: LATEbits.LATE2 = 1;
  6159  0019A8  848D               	bsf	3981,2,c	;volatile
  6160                           
  6161                           ; BSR set to: 0
  6162                           ;action.c: 827: moteur_indice = 3;
  6163  0019AA  0E03               	movlw	3
  6164  0019AC  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  6165                           
  6166                           ; BSR set to: 0
  6167                           ;action.c: 828: Init_ADC_Single_Shoot_I_Moteur_2();
  6168  0019AE  EC7C  F00E         	call	_Init_ADC_Single_Shoot_I_Moteur_2	;wreg free
  6169                           
  6170                           ; BSR set to: 0
  6171                           ;action.c: 831: if (direction == 0) {
  6172  0019B2  0102               	movlb	2	; () banked
  6173  0019B4  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6174  0019B6  E103               	bnz	l1007
  6175                           
  6176                           ; BSR set to: 2
  6177                           ;action.c: 832: LATD7 = 0;LATD6 = 1;
  6178  0019B8  9E8C               	bcf	3980,7,c	;volatile
  6179  0019BA  8C8C               	bsf	3980,6,c	;volatile
  6180                           
  6181                           ;action.c: 833: } else {
  6182  0019BC  D002               	goto	l8798
  6183  0019BE                     l1007:
  6184                           
  6185                           ; BSR set to: 2
  6186                           ;action.c: 834: LATD6 = 0;LATD7 = 1;
  6187  0019BE  9C8C               	bcf	3980,6,c	;volatile
  6188  0019C0  8E8C               	bsf	3980,7,c	;volatile
  6189  0019C2                     l8798:
  6190                           
  6191                           ; BSR set to: 2
  6192                           ;action.c: 835: }
  6193                           ;action.c: 836: PDC1L = 1 << 2;
  6194  0019C2  0E04               	movlw	4
  6195  0019C4  6E77               	movwf	3959,c	;volatile
  6196                           
  6197                           ; BSR set to: 2
  6198                           ;action.c: 837: PDC1H = 0;
  6199  0019C6  6A76               	clrf	3958,c	;volatile
  6200                           
  6201                           ;action.c: 838: OVDCOND = 0b00000100;
  6202  0019C8  0E04               	movlw	4
  6203  0019CA  6E6B               	movwf	3947,c	;volatile
  6204                           
  6205                           ; BSR set to: 2
  6206                           ;action.c: 839: LATCbits.LATC1 = 1;
  6207  0019CC  828B               	bsf	3979,1,c	;volatile
  6208                           
  6209                           ;action.c: 841: erreur = 1;
  6210  0019CE  0100               	movlb	0	; () banked
  6211  0019D0  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
  6212  0019D2  0E01               	movlw	1
  6213  0019D4  6F84               	movwf	_erreur& (0+255),b	;volatile
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;action.c: 842: PDC1L = (unsigned char) (((unsigned char) erreur) << 2);
  6217  0019D6  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6218  0019D8  46E8               	rlncf	wreg,f,c
  6219  0019DA  0BFC               	andlw	252
  6220  0019DC  6E77               	movwf	3959,c	;volatile
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;action.c: 843: PDC1H = (unsigned char) (((unsigned char) erreur) >> 6);
  6224  0019DE  4584               	rlncf	_erreur& (0+255),w,b	;volatile
  6225  0019E0  46E8               	rlncf	wreg,f,c
  6226  0019E2  0B03               	andlw	3
  6227  0019E4  6E76               	movwf	3958,c	;volatile
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;action.c: 846: erreur_accumulator = 0;
  6231  0019E6  6B82               	clrf	_erreur_accumulator& (0+255),b	;volatile
  6232  0019E8  6B83               	clrf	(_erreur_accumulator+1)& (0+255),b	;volatile
  6233                           
  6234                           ; BSR set to: 0
  6235                           ;action.c: 849: Nouvelle_Valeur_ADC = 0;
  6236  0019EA  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;action.c: 853: PIE3bits.PTIE = 0;
  6240  0019EC  98A3               	bcf	4003,4,c	;volatile
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;action.c: 854: PIE1bits.ADIE = 1;
  6244  0019EE  8C9D               	bsf	3997,6,c	;volatile
  6245                           
  6246                           ; BSR set to: 0
  6247                           ;action.c: 855: PIE1bits.ADIE = 1;
  6248  0019F0  8C9D               	bsf	3997,6,c	;volatile
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;action.c: 857: PEIE = 1;
  6252  0019F2  8CF2               	bsf	intcon,6,c	;volatile
  6253                           
  6254                           ; BSR set to: 0
  6255                           ;action.c: 858: GIE = 1;
  6256  0019F4  8EF2               	bsf	intcon,7,c	;volatile
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;action.c: 859: TIMER2_On();
  6260  0019F6  EC89  F013         	call	_TIMER2_On	;wreg free
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;action.c: 860: ADIF = 0;
  6264  0019FA  9C9E               	bcf	3998,6,c	;volatile
  6265                           
  6266                           ;action.c: 877: Init_Moteur_Bequille();
  6267  0019FC  EC28  F013         	call	_Init_Moteur_Bequille	;wreg free
  6268  001A00                     l8826:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;action.c: 881: Check_List_Moteur_Bequille();
  6272  001A00  EC85  F010         	call	_Check_List_Moteur_Bequille	;wreg free
  6273                           
  6274                           ;action.c: 882: } while (((direction == 0) && (Etat == 8)) | ((direction == 1) && (Etat 
      +                          == 9)));
  6275  001A04  0102               	movlb	2	; () banked
  6276  001A06  5189               	movf	Mouvement_Bequille@direction& (0+255),w,b
  6277  001A08  E104               	bnz	l8832
  6278                           
  6279                           ; BSR set to: 2
  6280  001A0A  0E08               	movlw	8
  6281  001A0C  0100               	movlb	0	; () banked
  6282  001A0E  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6283  001A10  E0F7               	bz	l8826
  6284  001A12                     l8832:
  6285  001A12  0102               	movlb	2	; () banked
  6286  001A14  0589               	decf	Mouvement_Bequille@direction& (0+255),w,b
  6287  001A16  E104               	bnz	l1014
  6288                           
  6289                           ; BSR set to: 2
  6290  001A18  0E09               	movlw	9
  6291  001A1A  0100               	movlb	0	; () banked
  6292  001A1C  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  6293  001A1E  E0F0               	bz	l8826
  6294  001A20                     l1014:
  6295                           
  6296                           ;action.c: 886: PIE3bits.PTIE = 0;
  6297  001A20  98A3               	bcf	4003,4,c	;volatile
  6298                           
  6299                           ;action.c: 887: PIE1bits.ADIE = 0;
  6300  001A22  9C9D               	bcf	3997,6,c	;volatile
  6301                           
  6302                           ;action.c: 893: LATEbits.LATE2 = 0;
  6303  001A24  948D               	bcf	3981,2,c	;volatile
  6304                           
  6305                           ;action.c: 898: Surveillance_Consommation_Moteur_2_Desactiver();
  6306  001A26  EC48  F013         	call	_Surveillance_Consommation_Moteur_2_Desactiver	;wreg free
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;action.c: 900: Coupe_Moteur();
  6310  001A2A  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  6311                           
  6312                           ;action.c: 901: delay_s(1);
  6313  001A2E  0E01               	movlw	1
  6314  001A30  EF96  F011         	goto	_delay_s
  6315  001A34                     __end_of_Mouvement_Bequille:
  6316                           	opt stack 0
  6317                           tblptru	equ	0xFF8
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           intcon2	equ	0xFF1
  6322                           intcon3	equ	0xFF0
  6323                           postinc0	equ	0xFEE
  6324                           wreg	equ	0xFE8
  6325                           postdec1	equ	0xFE5
  6326                           fsr1h	equ	0xFE2
  6327                           fsr1l	equ	0xFE1
  6328                           indf2	equ	0xFDF
  6329                           fsr2h	equ	0xFDA
  6330                           fsr2l	equ	0xFD9
  6331                           status	equ	0xFD8
  6332                           
  6333 ;; *************** function _u_Init_PWM *****************
  6334 ;; Defined at:
  6335 ;;		line 56 in file "pwm.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 3F/0
  6346 ;;		On exit  : 3F/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6349 ;;      Params:         0       0       0       0
  6350 ;;      Locals:         0       0       0       0
  6351 ;;      Temps:          0       0       0       0
  6352 ;;      Totals:         0       0       0       0
  6353 ;;Total ram usage:        0 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:   10
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_Mouvement_Bequille
  6360 ;;		_Mouvement_Z
  6361 ;;		_Mouvement_X
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text34
  6366  001DC0                     __ptext34:
  6367                           	opt stack 0
  6368  001DC0                     _u_Init_PWM:
  6369                           	opt stack 18
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;pwm.c: 58: PTCON1bits.PTEN = 0;
  6373                           
  6374                           ; BSR set to: 0
  6375                           ;incstack = 0
  6376  001DC0  9E7E               	bcf	3966,7,c	;volatile
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;pwm.c: 64: PDC0L = 1 << 2;
  6380  001DC2  0E04               	movlw	4
  6381  001DC4  6E79               	movwf	3961,c	;volatile
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;pwm.c: 65: PDC0H = 0;
  6385  001DC6  6A78               	clrf	3960,c	;volatile
  6386                           
  6387                           ;pwm.c: 74: PTPERL = (0xff) >> 3;
  6388  001DC8  0E1F               	movlw	31
  6389  001DCA  6E7B               	movwf	3963,c	;volatile
  6390                           
  6391                           ;pwm.c: 75: PTPERL = (0xff) >> 2;
  6392  001DCC  0E3F               	movlw	63
  6393  001DCE  6E7B               	movwf	3963,c	;volatile
  6394                           
  6395                           ; BSR set to: 0
  6396                           ;pwm.c: 78: consigne_pwm_max = (char) (PTPERL + 1);
  6397  001DD0  287B               	incf	3963,w,c	;volatile
  6398  001DD2  6F8D               	movwf	_consigne_pwm_max& (0+255),b	;volatile
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;pwm.c: 81: erreur_accumulator_max = (char) ((consigne_pwm_max << 11) - 1);
  6402  001DD4  6B7F               	clrf	(_erreur_accumulator_max+1)& (0+255),b	;volatile
  6403  001DD6  697E               	setf	_erreur_accumulator_max& (0+255),b	;volatile
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;pwm.c: 87: PTPERH = 0;
  6407  001DD8  6A7A               	clrf	3962,c	;volatile
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;pwm.c: 94: PTCON0 = 0b00000011;
  6411  001DDA  0E03               	movlw	3
  6412  001DDC  6E7F               	movwf	3967,c	;volatile
  6413                           
  6414                           ; BSR set to: 0
  6415                           ;pwm.c: 98: PTCON0bits.PTOPS = 0b0000;
  6416  001DDE  0E0F               	movlw	-241
  6417  001DE0  167F               	andwf	3967,f,c	;volatile
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;pwm.c: 100: PTCON0bits.PTCKPS = 0b00;
  6421  001DE2  0EF3               	movlw	-13
  6422  001DE4  167F               	andwf	3967,f,c	;volatile
  6423                           
  6424                           ; BSR set to: 0
  6425                           ;pwm.c: 106: PTCON0bits.PTMOD = 0b10;
  6426  001DE6  507F               	movf	3967,w,c	;volatile
  6427  001DE8  0BFC               	andlw	-4
  6428  001DEA  0902               	iorlw	2
  6429  001DEC  6E7F               	movwf	3967,c	;volatile
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;pwm.c: 116: PTCON1 = 0b10000000;
  6433  001DEE  0E80               	movlw	128
  6434  001DF0  6E7E               	movwf	3966,c	;volatile
  6435                           
  6436                           ; BSR set to: 0
  6437                           ;pwm.c: 119: PWMCON0bits.PWMEN = 0b001;
  6438  001DF2  506F               	movf	3951,w,c	;volatile
  6439  001DF4  0B8F               	andlw	-113
  6440  001DF6  0910               	iorlw	16
  6441  001DF8  6E6F               	movwf	3951,c	;volatile
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;pwm.c: 129: PWMCON0bits.PMOD = 0b1111;
  6445  001DFA  0E0F               	movlw	15
  6446  001DFC  126F               	iorwf	3951,f,c	;volatile
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;pwm.c: 144: PWMCON0 = 0b00111111;
  6450  001DFE  0E3F               	movlw	63
  6451  001E00  6E6F               	movwf	3951,c	;volatile
  6452                           
  6453                           ; BSR set to: 0
  6454                           ;pwm.c: 152: PWMCON1 = 0b00000000;
  6455  001E02  6A6E               	clrf	3950,c	;volatile
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;pwm.c: 153: PWMCON1 = 0b00000001;
  6459  001E04  0E01               	movlw	1
  6460  001E06  6E6E               	movwf	3950,c	;volatile
  6461                           
  6462                           ; BSR set to: 0
  6463                           ;pwm.c: 155: DTCON = 0b00000000;
  6464  001E08  6A6D               	clrf	3949,c	;volatile
  6465                           
  6466                           ; BSR set to: 0
  6467                           ;pwm.c: 156: OVDCOND = 0b00000101;
  6468  001E0A  0E05               	movlw	5
  6469  001E0C  6E6B               	movwf	3947,c	;volatile
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;pwm.c: 158: OVDCONS = 0b00000000;
  6473  001E0E  6A6A               	clrf	3946,c	;volatile
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;pwm.c: 164: SEVTDIR = 0;
  6477  001E10  966E               	bcf	3950,3,c	;volatile
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;pwm.c: 166: SEVTCMPH = 0;
  6481  001E12  6A70               	clrf	3952,c	;volatile
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;pwm.c: 167: SEVTCMPL = 10;
  6485  001E14  0E0A               	movlw	10
  6486  001E16  6E71               	movwf	3953,c	;volatile
  6487                           
  6488                           ; BSR set to: 0
  6489  001E18  0C0A               	retlw	10	;funcret
  6490  001E1A                     __end_of_u_Init_PWM:
  6491                           	opt stack 0
  6492                           tblptru	equ	0xFF8
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           intcon2	equ	0xFF1
  6497                           intcon3	equ	0xFF0
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           postdec1	equ	0xFE5
  6501                           fsr1h	equ	0xFE2
  6502                           fsr1l	equ	0xFE1
  6503                           indf2	equ	0xFDF
  6504                           fsr2h	equ	0xFDA
  6505                           fsr2l	equ	0xFD9
  6506                           status	equ	0xFD8
  6507                           
  6508 ;; *************** function _delay_s *****************
  6509 ;; Defined at:
  6510 ;;		line 91 in file "horloge.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;  delay_time      1    wreg     unsigned char 
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  delay_time      1   17[BANK0 ] unsigned char 
  6515 ;;  Timer_0_Etat    1   18[BANK0 ] unsigned char 
  6516 ;; Return value:  Size  Location     Type
  6517 ;;                  1    wreg      void 
  6518 ;; Registers used:
  6519 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6520 ;; Tracked objects:
  6521 ;;		On entry : 0/0
  6522 ;;		On exit  : 3F/0
  6523 ;;		Unchanged: 0/0
  6524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6525 ;;      Params:         0       0       0       0
  6526 ;;      Locals:         0       2       0       0
  6527 ;;      Temps:          0       0       0       0
  6528 ;;      Totals:         0       2       0       0
  6529 ;;Total ram usage:        2 bytes
  6530 ;; Hardware stack levels used:    1
  6531 ;; Hardware stack levels required when called:   17
  6532 ;; This function calls:
  6533 ;;		_EUSART1_Check_Buffer
  6534 ;;		_TIMER0_Off
  6535 ;;		_TIMER0_On
  6536 ;; This function is called by:
  6537 ;;		_Cycle
  6538 ;;		_Mouvement_Bequille
  6539 ;;		_Mouvement_Z
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text35
  6544  00232C                     __ptext35:
  6545                           	opt stack 0
  6546  00232C                     _delay_s:
  6547                           	opt stack 12
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;incstack = 0
  6551                           ;delay_s@delay_time stored from wreg
  6552  00232C  0100               	movlb	0	; () banked
  6553  00232E  6FFE               	movwf	delay_s@delay_time& (0+255),b
  6554                           
  6555                           ;horloge.c: 92: unsigned char Timer_0_Etat_Prealable;
  6556                           ;horloge.c: 93: Timer_0_Etat_Prealable = TIMER0_Etat;
  6557  002330  C088  F0FF         	movff	_TIMER0_Etat,delay_s@Timer_0_Etat_Prealable
  6558                           
  6559                           ;horloge.c: 95: delay_s_counter = 0;
  6560  002334  6B8C               	clrf	_delay_s_counter& (0+255),b	;volatile
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;horloge.c: 98: TIMER0_On();
  6564  002336  EC83  F012         	call	_TIMER0_On	;wreg free
  6565                           
  6566                           ;horloge.c: 100: while(delay_s_counter<delay_time){
  6567  00233A  D002               	goto	l8390
  6568  00233C                     l8388:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;horloge.c: 101: EUSART1_Check_Buffer();
  6572  00233C  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  6573  002340                     l8390:
  6574  002340  0100               	movlb	0	; () banked
  6575  002342  51FE               	movf	delay_s@delay_time& (0+255),w,b
  6576  002344  5D8C               	subwf	_delay_s_counter& (0+255),w,b	;volatile
  6577  002346  E3FA               	bnc	l8388
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;horloge.c: 104: }
  6581                           ;horloge.c: 106: if (Timer_0_Etat_Prealable == 0) {TIMER0_Off();}
  6582  002348  51FF               	movf	delay_s@Timer_0_Etat_Prealable& (0+255),w,b
  6583  00234A  B4D8               	btfsc	status,2,c
  6584                           
  6585                           ; BSR set to: 0
  6586  00234C  EC69  F013         	call	_TIMER0_Off	;wreg free
  6587                           
  6588                           ; BSR set to: 0
  6589  002350  0012               	return		;funcret
  6590  002352                     __end_of_delay_s:
  6591                           	opt stack 0
  6592                           tblptru	equ	0xFF8
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           intcon	equ	0xFF2
  6596                           intcon2	equ	0xFF1
  6597                           intcon3	equ	0xFF0
  6598                           postinc0	equ	0xFEE
  6599                           wreg	equ	0xFE8
  6600                           postdec1	equ	0xFE5
  6601                           fsr1h	equ	0xFE2
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           fsr2h	equ	0xFDA
  6605                           fsr2l	equ	0xFD9
  6606                           status	equ	0xFD8
  6607                           
  6608 ;; *************** function _TIMER0_Off *****************
  6609 ;; Defined at:
  6610 ;;		line 111 in file "timer.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;		None
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;		None
  6615 ;; Return value:  Size  Location     Type
  6616 ;;                  1    wreg      void 
  6617 ;; Registers used:
  6618 ;;		None
  6619 ;; Tracked objects:
  6620 ;;		On entry : 3D/0
  6621 ;;		On exit  : 3F/0
  6622 ;;		Unchanged: 0/0
  6623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6624 ;;      Params:         0       0       0       0
  6625 ;;      Locals:         0       0       0       0
  6626 ;;      Temps:          0       0       0       0
  6627 ;;      Totals:         0       0       0       0
  6628 ;;Total ram usage:        0 bytes
  6629 ;; Hardware stack levels used:    1
  6630 ;; Hardware stack levels required when called:   10
  6631 ;; This function calls:
  6632 ;;		Nothing
  6633 ;; This function is called by:
  6634 ;;		_Stop_Moteur_1
  6635 ;;		_delay_s
  6636 ;; This function uses a non-reentrant model
  6637 ;;
  6638                           
  6639                           	psect	text36
  6640  0026D2                     __ptext36:
  6641                           	opt stack 0
  6642  0026D2                     _TIMER0_Off:
  6643                           	opt stack 18
  6644                           
  6645                           ;timer.c: 113: T0CONbits.TMR0ON = 0;
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;incstack = 0
  6649  0026D2  9ED5               	bcf	4053,7,c	;volatile
  6650                           
  6651                           ;timer.c: 114: INTCONbits.TMR0IE = 0;
  6652  0026D4  9AF2               	bcf	intcon,5,c	;volatile
  6653                           
  6654                           ;timer.c: 115: INTCONbits.TMR0IF = 0;
  6655  0026D6  94F2               	bcf	intcon,2,c	;volatile
  6656                           
  6657                           ;timer.c: 117: TIMER0_Etat = 0;
  6658  0026D8  0100               	movlb	0	; () banked
  6659  0026DA  6B88               	clrf	_TIMER0_Etat& (0+255),b
  6660                           
  6661                           ; BSR set to: 0
  6662  0026DC  0012               	return		;funcret
  6663  0026DE                     __end_of_TIMER0_Off:
  6664                           	opt stack 0
  6665                           tblptru	equ	0xFF8
  6666                           prodh	equ	0xFF4
  6667                           prodl	equ	0xFF3
  6668                           intcon	equ	0xFF2
  6669                           intcon2	equ	0xFF1
  6670                           intcon3	equ	0xFF0
  6671                           postinc0	equ	0xFEE
  6672                           wreg	equ	0xFE8
  6673                           postdec1	equ	0xFE5
  6674                           fsr1h	equ	0xFE2
  6675                           fsr1l	equ	0xFE1
  6676                           indf2	equ	0xFDF
  6677                           fsr2h	equ	0xFDA
  6678                           fsr2l	equ	0xFD9
  6679                           status	equ	0xFD8
  6680                           
  6681 ;; *************** function _TIMER2_On *****************
  6682 ;; Defined at:
  6683 ;;		line 158 in file "timer.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;		None
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		None
  6692 ;; Tracked objects:
  6693 ;;		On entry : 3F/0
  6694 ;;		On exit  : 3F/0
  6695 ;;		Unchanged: 3F/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6697 ;;      Params:         0       0       0       0
  6698 ;;      Locals:         0       0       0       0
  6699 ;;      Temps:          0       0       0       0
  6700 ;;      Totals:         0       0       0       0
  6701 ;;Total ram usage:        0 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:   10
  6704 ;; This function calls:
  6705 ;;		Nothing
  6706 ;; This function is called by:
  6707 ;;		_Mouvement_Bequille
  6708 ;;		_Mouvement_Z
  6709 ;;		_Mouvement_X
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           	psect	text37
  6714  002712                     __ptext37:
  6715                           	opt stack 0
  6716  002712                     _TIMER2_On:
  6717                           	opt stack 18
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;timer.c: 160: PIE1bits.TMR2IE = 1;
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;incstack = 0
  6724  002712  829D               	bsf	3997,1,c	;volatile
  6725                           
  6726                           ;timer.c: 161: PIR1bits.TMR2IF = 0;
  6727  002714  929E               	bcf	3998,1,c	;volatile
  6728                           
  6729                           ; BSR set to: 0
  6730  002716  0012               	return		;funcret
  6731  002718                     __end_of_TIMER2_On:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           prodh	equ	0xFF4
  6735                           prodl	equ	0xFF3
  6736                           intcon	equ	0xFF2
  6737                           intcon2	equ	0xFF1
  6738                           intcon3	equ	0xFF0
  6739                           postinc0	equ	0xFEE
  6740                           wreg	equ	0xFE8
  6741                           postdec1	equ	0xFE5
  6742                           fsr1h	equ	0xFE2
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _Surveillance_Consommation_Moteur_2_Desactiver *****************
  6750 ;; Defined at:
  6751 ;;		line 876 in file "interrupt.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg, status,2
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/2
  6762 ;;		On exit  : 3F/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6765 ;;      Params:         0       0       0       0
  6766 ;;      Locals:         0       0       0       0
  6767 ;;      Temps:          0       0       0       0
  6768 ;;      Totals:         0       0       0       0
  6769 ;;Total ram usage:        0 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:   10
  6772 ;; This function calls:
  6773 ;;		Nothing
  6774 ;; This function is called by:
  6775 ;;		_Mouvement_Bequille
  6776 ;;		_Mouvement_Z
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           	psect	text38
  6781  002690                     __ptext38:
  6782                           	opt stack 0
  6783  002690                     _Surveillance_Consommation_Moteur_2_Desactiver:
  6784                           	opt stack 18
  6785                           
  6786                           ;interrupt.c: 877: if (Surveillance_Consommation_Moteur_2 != 0) {
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;incstack = 0
  6790  002690  0100               	movlb	0	; () banked
  6791  002692  518A               	movf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
  6792  002694  B4D8               	btfsc	status,2,c
  6793  002696  0012               	return	
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;interrupt.c: 878: Surveillance_Consommation_Moteur_2 = 0;
  6797  002698  6B8A               	clrf	_Surveillance_Consommation_Moteur_2& (0+255),b
  6798                           
  6799                           ;interrupt.c: 879: INTCON3bits.INT2IE = 0;
  6800  00269A  98F0               	bcf	intcon3,4,c	;volatile
  6801                           
  6802                           ; BSR set to: 0
  6803  00269C  0012               	return		;funcret
  6804  00269E                     __end_of_Surveillance_Consommation_Moteur_2_Desactiver:
  6805                           	opt stack 0
  6806                           tblptru	equ	0xFF8
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           intcon2	equ	0xFF1
  6811                           intcon3	equ	0xFF0
  6812                           postinc0	equ	0xFEE
  6813                           wreg	equ	0xFE8
  6814                           postdec1	equ	0xFE5
  6815                           fsr1h	equ	0xFE2
  6816                           fsr1l	equ	0xFE1
  6817                           indf2	equ	0xFDF
  6818                           fsr2h	equ	0xFDA
  6819                           fsr2l	equ	0xFD9
  6820                           status	equ	0xFD8
  6821                           
  6822 ;; *************** function _Init_Moteur_Bequille *****************
  6823 ;; Defined at:
  6824 ;;		line 213 in file "action.c"
  6825 ;; Parameters:    Size  Location     Type
  6826 ;;		None
  6827 ;; Auto vars:     Size  Location     Type
  6828 ;;		None
  6829 ;; Return value:  Size  Location     Type
  6830 ;;                  1    wreg      void 
  6831 ;; Registers used:
  6832 ;;		wreg, status,2, cstack
  6833 ;; Tracked objects:
  6834 ;;		On entry : 3F/0
  6835 ;;		On exit  : 3F/0
  6836 ;;		Unchanged: 0/0
  6837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6838 ;;      Params:         0       0       0       0
  6839 ;;      Locals:         0       0       0       0
  6840 ;;      Temps:          0       0       0       0
  6841 ;;      Totals:         0       0       0       0
  6842 ;;Total ram usage:        0 bytes
  6843 ;; Hardware stack levels used:    1
  6844 ;; Hardware stack levels required when called:   11
  6845 ;; This function calls:
  6846 ;;		_TIMER0_On
  6847 ;; This function is called by:
  6848 ;;		_Mouvement_Bequille
  6849 ;; This function uses a non-reentrant model
  6850 ;;
  6851                           
  6852                           	psect	text39
  6853  002650                     __ptext39:
  6854                           	opt stack 0
  6855  002650                     _Init_Moteur_Bequille:
  6856                           	opt stack 17
  6857                           
  6858                           ; BSR set to: 0
  6859                           ;action.c: 218: nb_s_fonctionnement = 0;
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;incstack = 0
  6863  002650  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
  6864                           
  6865                           ;action.c: 219: nb_Pion = 0;
  6866  002652  6BA1               	clrf	_nb_Pion& (0+255),b	;volatile
  6867                           
  6868                           ;action.c: 220: nb_100ms_Timer_5 = 0;
  6869  002654  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;action.c: 221: TIMER0_On();
  6873  002656  EC83  F012         	call	_TIMER0_On	;wreg free
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;action.c: 223: INTCON3bits.INT2IE = 1;
  6877  00265A  88F0               	bsf	intcon3,4,c	;volatile
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;action.c: 224: Compteur_IRQ_I_Moteur_2 = 0;
  6881  00265C  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  6882                           
  6883                           ; BSR set to: 0
  6884  00265E  0012               	return		;funcret
  6885  002660                     __end_of_Init_Moteur_Bequille:
  6886                           	opt stack 0
  6887                           tblptru	equ	0xFF8
  6888                           prodh	equ	0xFF4
  6889                           prodl	equ	0xFF3
  6890                           intcon	equ	0xFF2
  6891                           intcon2	equ	0xFF1
  6892                           intcon3	equ	0xFF0
  6893                           postinc0	equ	0xFEE
  6894                           wreg	equ	0xFE8
  6895                           postdec1	equ	0xFE5
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           fsr2h	equ	0xFDA
  6900                           fsr2l	equ	0xFD9
  6901                           status	equ	0xFD8
  6902                           
  6903 ;; *************** function _TIMER0_On *****************
  6904 ;; Defined at:
  6905 ;;		line 87 in file "timer.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;		None
  6908 ;; Auto vars:     Size  Location     Type
  6909 ;;		None
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  1    wreg      void 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2
  6914 ;; Tracked objects:
  6915 ;;		On entry : 3F/0
  6916 ;;		On exit  : 3F/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6919 ;;      Params:         0       0       0       0
  6920 ;;      Locals:         0       0       0       0
  6921 ;;      Temps:          0       0       0       0
  6922 ;;      Totals:         0       0       0       0
  6923 ;;Total ram usage:        0 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:   10
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_Init_Moteur_1
  6930 ;;		_Init_Moteur_2
  6931 ;;		_Init_Moteur_Bequille
  6932 ;;		_delay_s
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           	psect	text40
  6937  002506                     __ptext40:
  6938                           	opt stack 0
  6939  002506                     _TIMER0_On:
  6940                           	opt stack 18
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;timer.c: 88: TMR0H=0;
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;incstack = 0
  6947  002506  6AD7               	clrf	4055,c	;volatile
  6948                           
  6949                           ;timer.c: 89: TMR0L=0;
  6950  002508  6AD6               	clrf	4054,c	;volatile
  6951                           
  6952                           ;timer.c: 91: if(T0CONbits.TMR0ON == 0){
  6953  00250A  BED5               	btfsc	4053,7,c	;volatile
  6954  00250C  D004               	goto	l8226
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;timer.c: 92: INTCONbits.TMR0IE = 1;
  6958  00250E  8AF2               	bsf	intcon,5,c	;volatile
  6959                           
  6960                           ;timer.c: 93: INTCONbits.TMR0IF = 0;
  6961  002510  94F2               	bcf	intcon,2,c	;volatile
  6962                           
  6963                           ;timer.c: 94: LATC5=1;
  6964  002512  8A8B               	bsf	3979,5,c	;volatile
  6965                           
  6966                           ;timer.c: 95: T0CONbits.TMR0ON = 1;
  6967  002514  8ED5               	bsf	4053,7,c	;volatile
  6968  002516                     l8226:
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;timer.c: 97: }
  6972                           ;timer.c: 98: TIMER0_Etat = 1;
  6973  002516  0E01               	movlw	1
  6974  002518  6F88               	movwf	_TIMER0_Etat& (0+255),b
  6975                           
  6976                           ; BSR set to: 0
  6977  00251A  0C01               	retlw	1	;funcret
  6978  00251C                     __end_of_TIMER0_On:
  6979                           	opt stack 0
  6980                           tblptru	equ	0xFF8
  6981                           prodh	equ	0xFF4
  6982                           prodl	equ	0xFF3
  6983                           intcon	equ	0xFF2
  6984                           intcon2	equ	0xFF1
  6985                           intcon3	equ	0xFF0
  6986                           postinc0	equ	0xFEE
  6987                           wreg	equ	0xFE8
  6988                           postdec1	equ	0xFE5
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function _Init_ADC_Single_Shoot_I_Moteur_2 *****************
  6997 ;; Defined at:
  6998 ;;		line 192 in file "adc.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;		None
  7001 ;; Auto vars:     Size  Location     Type
  7002 ;;		None
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  1    wreg      void 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2
  7007 ;; Tracked objects:
  7008 ;;		On entry : 3F/0
  7009 ;;		On exit  : 3F/0
  7010 ;;		Unchanged: 3F/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7012 ;;      Params:         0       0       0       0
  7013 ;;      Locals:         0       0       0       0
  7014 ;;      Temps:          0       0       0       0
  7015 ;;      Totals:         0       0       0       0
  7016 ;;Total ram usage:        0 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:   10
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_Mouvement_Bequille
  7023 ;;		_Mouvement_Z
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text41
  7028  001CF8                     __ptext41:
  7029                           	opt stack 0
  7030  001CF8                     _Init_ADC_Single_Shoot_I_Moteur_2:
  7031                           	opt stack 18
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;adc.c: 195: ADCON0bits.ACONV = 0;
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;incstack = 0
  7038  001CF8  9AC2               	bcf	4034,5,c	;volatile
  7039                           
  7040                           ;adc.c: 196: ADCON0bits.ACSCH = 0;
  7041  001CFA  98C2               	bcf	4034,4,c	;volatile
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;adc.c: 197: ADCON0bits.ACMOD = 0b01;
  7045  001CFC  50C2               	movf	4034,w,c	;volatile
  7046  001CFE  0BF3               	andlw	-13
  7047  001D00  0904               	iorlw	4
  7048  001D02  6EC2               	movwf	4034,c	;volatile
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;adc.c: 199: ADCON0bits.ADON = 0;
  7052  001D04  90C2               	bcf	4034,0,c	;volatile
  7053                           
  7054                           ;adc.c: 207: ADCON1bits.VCFG = 0b00;
  7055  001D06  0E3F               	movlw	-193
  7056  001D08  16C1               	andwf	4033,f,c	;volatile
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;adc.c: 208: ADCON1bits.FIFOEN = 0;
  7060  001D0A  98C1               	bcf	4033,4,c	;volatile
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;adc.c: 212: ADCON1 = 0b00000000;
  7064  001D0C  6AC1               	clrf	4033,c	;volatile
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;adc.c: 214: ADCON2bits.ADFM = 0;
  7068  001D0E  9EC0               	bcf	4032,7,c	;volatile
  7069                           
  7070                           ;adc.c: 215: ADCON2bits.ACQT = 0b0010;
  7071  001D10  50C0               	movf	4032,w,c	;volatile
  7072  001D12  0B87               	andlw	-121
  7073  001D14  0910               	iorlw	16
  7074  001D16  6EC0               	movwf	4032,c	;volatile
  7075                           
  7076                           ;adc.c: 216: ADCON2bits.ADCS = 0b100;
  7077  001D18  50C0               	movf	4032,w,c	;volatile
  7078  001D1A  0BF8               	andlw	-8
  7079  001D1C  0904               	iorlw	4
  7080  001D1E  6EC0               	movwf	4032,c	;volatile
  7081                           
  7082                           ;adc.c: 217: ADCON2bits.ADCS = 0b001;
  7083  001D20  50C0               	movf	4032,w,c	;volatile
  7084  001D22  0BF8               	andlw	-8
  7085  001D24  0901               	iorlw	1
  7086  001D26  6EC0               	movwf	4032,c	;volatile
  7087                           
  7088                           ;adc.c: 219: ADCON2 = 0b00010100;
  7089  001D28  0E14               	movlw	20
  7090  001D2A  6EC0               	movwf	4032,c	;volatile
  7091                           
  7092                           ;adc.c: 221: ADCON2bits.ADCS = 0b001;
  7093  001D2C  50C0               	movf	4032,w,c	;volatile
  7094  001D2E  0BF8               	andlw	-8
  7095  001D30  0901               	iorlw	1
  7096  001D32  6EC0               	movwf	4032,c	;volatile
  7097                           
  7098                           ;adc.c: 223: ADCON3bits.ADRS = 0b00;
  7099  001D34  0E3F               	movlw	-193
  7100  001D36  169A               	andwf	3994,f,c	;volatile
  7101                           
  7102                           ;adc.c: 227: ADCON3bits.SSRC = 0b10000;
  7103  001D38  509A               	movf	3994,w,c	;volatile
  7104  001D3A  0BE0               	andlw	-32
  7105  001D3C  0910               	iorlw	16
  7106  001D3E  6E9A               	movwf	3994,c	;volatile
  7107                           
  7108                           ;adc.c: 231: ADCON3bits.SSRC = 0b00000;
  7109  001D40  0EE0               	movlw	-32
  7110  001D42  169A               	andwf	3994,f,c	;volatile
  7111                           
  7112                           ;adc.c: 235: ADCON3 = 0b00010000;
  7113  001D44  0E10               	movlw	16
  7114  001D46  6E9A               	movwf	3994,c	;volatile
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;adc.c: 236: ADCON3 = 0x00;
  7118  001D48  6A9A               	clrf	3994,c	;volatile
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;adc.c: 241: ADCHS = 0b00000000;
  7122  001D4A  6A99               	clrf	3993,c	;volatile
  7123                           
  7124                           ;adc.c: 242: ANSEL0 = 0b00000011;
  7125  001D4C  0E03               	movlw	3
  7126  001D4E  6EB8               	movwf	4024,c	;volatile
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;adc.c: 244: ANSEL1 = 0b00000000;
  7130  001D50  6AB9               	clrf	4025,c	;volatile
  7131                           
  7132                           ; BSR set to: 0
  7133                           ;adc.c: 253: PIE1bits.ADIE = 1;
  7134  001D52  8C9D               	bsf	3997,6,c	;volatile
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;adc.c: 254: ADIF=0;
  7138  001D54  9C9E               	bcf	3998,6,c	;volatile
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;adc.c: 255: IPR1bits.ADIP = 0;
  7142  001D56  9C9F               	bcf	3999,6,c	;volatile
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;adc.c: 260: ADON = 1;
  7146  001D58  80C2               	bsf	4034,0,c	;volatile
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;adc.c: 261: Nouvelle_Valeur_ADC = 0;
  7150  001D5A  9E4F               	bcf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
  7151                           
  7152                           ; BSR set to: 0
  7153  001D5C  0012               	return		;funcret
  7154  001D5E                     __end_of_Init_ADC_Single_Shoot_I_Moteur_2:
  7155                           	opt stack 0
  7156                           tblptru	equ	0xFF8
  7157                           prodh	equ	0xFF4
  7158                           prodl	equ	0xFF3
  7159                           intcon	equ	0xFF2
  7160                           intcon2	equ	0xFF1
  7161                           intcon3	equ	0xFF0
  7162                           postinc0	equ	0xFEE
  7163                           wreg	equ	0xFE8
  7164                           postdec1	equ	0xFE5
  7165                           fsr1h	equ	0xFE2
  7166                           fsr1l	equ	0xFE1
  7167                           indf2	equ	0xFDF
  7168                           fsr2h	equ	0xFDA
  7169                           fsr2l	equ	0xFD9
  7170                           status	equ	0xFD8
  7171                           
  7172 ;; *************** function _Detection_Pion_Off *****************
  7173 ;; Defined at:
  7174 ;;		line 126 in file "pion.c"
  7175 ;; Parameters:    Size  Location     Type
  7176 ;;		None
  7177 ;; Auto vars:     Size  Location     Type
  7178 ;;		None
  7179 ;; Return value:  Size  Location     Type
  7180 ;;                  1    wreg      void 
  7181 ;; Registers used:
  7182 ;;		None
  7183 ;; Tracked objects:
  7184 ;;		On entry : 3D/0
  7185 ;;		On exit  : 3D/0
  7186 ;;		Unchanged: 3D/0
  7187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7188 ;;      Params:         0       0       0       0
  7189 ;;      Locals:         0       0       0       0
  7190 ;;      Temps:          0       0       0       0
  7191 ;;      Totals:         0       0       0       0
  7192 ;;Total ram usage:        0 bytes
  7193 ;; Hardware stack levels used:    1
  7194 ;; Hardware stack levels required when called:   10
  7195 ;; This function calls:
  7196 ;;		Nothing
  7197 ;; This function is called by:
  7198 ;;		_Mouvement_Bequille
  7199 ;;		_Mouvement_Z
  7200 ;;		_Mouvement_X
  7201 ;; This function uses a non-reentrant model
  7202 ;;
  7203                           
  7204                           	psect	text42
  7205  0026F2                     __ptext42:
  7206                           	opt stack 0
  7207  0026F2                     _Detection_Pion_Off:
  7208                           	opt stack 18
  7209                           
  7210                           ;pion.c: 141: Detecteur_Pion = 0;
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;incstack = 0
  7214  0026F2  9050               	bcf	_Detecteur_Pion/(0+8),_Detecteur_Pion& (0+7),c	;volatile
  7215                           
  7216                           ;pion.c: 143: PIE3bits.IC1IE = 0;
  7217  0026F4  92A3               	bcf	4003,1,c	;volatile
  7218                           
  7219                           ;pion.c: 144: PIR3bits.IC1IF = 0;
  7220  0026F6  92A4               	bcf	4004,1,c	;volatile
  7221  0026F8  0012               	return		;funcret
  7222  0026FA                     __end_of_Detection_Pion_Off:
  7223                           	opt stack 0
  7224                           tblptru	equ	0xFF8
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           intcon2	equ	0xFF1
  7229                           intcon3	equ	0xFF0
  7230                           postinc0	equ	0xFEE
  7231                           wreg	equ	0xFE8
  7232                           postdec1	equ	0xFE5
  7233                           fsr1h	equ	0xFE2
  7234                           fsr1l	equ	0xFE1
  7235                           indf2	equ	0xFDF
  7236                           fsr2h	equ	0xFDA
  7237                           fsr2l	equ	0xFD9
  7238                           status	equ	0xFD8
  7239                           
  7240 ;; *************** function _Check_List_Moteur_Bequille *****************
  7241 ;; Defined at:
  7242 ;;		line 235 in file "action.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;		None
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;		None
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7256 ;;      Params:         0       0       0       0
  7257 ;;      Locals:         0       0       0       0
  7258 ;;      Temps:          0       1       0       0
  7259 ;;      Totals:         0       1       0       0
  7260 ;;Total ram usage:        1 bytes
  7261 ;; Hardware stack levels used:    1
  7262 ;; Hardware stack levels required when called:   17
  7263 ;; This function calls:
  7264 ;;		_EUSART1_Check_Buffer
  7265 ;;		_Etat_Update
  7266 ;;		_SPI_Check_Buffer
  7267 ;;		___lbdiv
  7268 ;; This function is called by:
  7269 ;;		_Mouvement_Bequille
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           	psect	text43
  7274  00210A                     __ptext43:
  7275                           	opt stack 0
  7276  00210A                     _Check_List_Moteur_Bequille:
  7277                           	opt stack 11
  7278                           
  7279                           ;action.c: 239: if(PORTCbits.RC5 == 0){
  7280                           
  7281                           ;incstack = 0
  7282  00210A  AA82               	btfss	3970,5,c	;volatile
  7283                           
  7284                           ;action.c: 240: Compteur_IRQ_I_Moteur_2 = 0;
  7285  00210C  6A47               	clrf	_Compteur_IRQ_I_Moteur_2,c	;volatile
  7286                           
  7287                           ;action.c: 241: }
  7288                           ;action.c: 245: EUSART1_Check_Buffer();
  7289  00210E  EC1E  F011         	call	_EUSART1_Check_Buffer	;wreg free
  7290                           
  7291                           ;action.c: 246: SPI_Check_Buffer();
  7292  002112  EC08  F011         	call	_SPI_Check_Buffer	;wreg free
  7293                           
  7294                           ;action.c: 250: if ((nb_s_fonctionnement >= nb_s_bequille) | ((nb_s_fonctionnement > 2) 
      +                          &&(Image_Courant_Moteur_2 /5 >= Bequille_I_Max))) {
  7295  002116  0100               	movlb	0	; () banked
  7296  002118  51A2               	movf	_nb_s_bequille& (0+255),w,b
  7297  00211A  5C4B               	subwf	_nb_s_fonctionnement,w,c	;volatile
  7298  00211C  E20E               	bc	l989
  7299                           
  7300                           ; BSR set to: 0
  7301  00211E  0E02               	movlw	2
  7302  002120  644B               	cpfsgt	_nb_s_fonctionnement,c	;volatile
  7303  002122  0C02               	retlw	2
  7304                           
  7305                           ; BSR set to: 0
  7306  002124  0E05               	movlw	5
  7307  002126  6E0F               	movwf	___lbdiv@divisor,c
  7308  002128  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
  7309  00212A  ECBB  F010         	call	___lbdiv
  7310  00212E  0100               	movlb	0	; () banked
  7311  002130  6FFE               	movwf	??_Check_List_Moteur_Bequille& (0+255),b
  7312  002132  5192               	movf	_Bequille_I_Max& (0+255),w,b
  7313  002134  5DFE               	subwf	??_Check_List_Moteur_Bequille& (0+255),w,b
  7314  002136  A0D8               	btfss	status,0,c
  7315  002138  0012               	return	
  7316  00213A                     l989:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;action.c: 253: P4_busy = 0;
  7320  00213A  6BAC               	clrf	_P4_busy& (0+255),b
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;action.c: 254: Etat_Update(0);
  7324  00213C  0E00               	movlw	0
  7325  00213E  EF20  F012         	goto	_Etat_Update
  7326  002142                     __end_of_Check_List_Moteur_Bequille:
  7327                           	opt stack 0
  7328                           tblptru	equ	0xFF8
  7329                           prodh	equ	0xFF4
  7330                           prodl	equ	0xFF3
  7331                           intcon	equ	0xFF2
  7332                           intcon2	equ	0xFF1
  7333                           intcon3	equ	0xFF0
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           postdec1	equ	0xFE5
  7337                           fsr1h	equ	0xFE2
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           fsr2h	equ	0xFDA
  7341                           fsr2l	equ	0xFD9
  7342                           status	equ	0xFD8
  7343                           
  7344 ;; *************** function ___lbdiv *****************
  7345 ;; Defined at:
  7346 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/lbdiv.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;  dividend        1    wreg     unsigned char 
  7349 ;;  divisor         1   14[COMRAM] unsigned char 
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  dividend        1   15[COMRAM] unsigned char 
  7352 ;;  quotient        1   17[COMRAM] unsigned char 
  7353 ;;  counter         1   16[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 3F/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7363 ;;      Params:         1       0       0       0
  7364 ;;      Locals:         3       0       0       0
  7365 ;;      Temps:          0       0       0       0
  7366 ;;      Totals:         4       0       0       0
  7367 ;;Total ram usage:        4 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:   10
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_Check_List_Moteur_Bequille
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text44
  7378  002176                     __ptext44:
  7379                           	opt stack 0
  7380  002176                     ___lbdiv:
  7381                           	opt stack 17
  7382                           
  7383                           ;incstack = 0
  7384                           ;___lbdiv@dividend stored from wreg
  7385  002176  6E10               	movwf	___lbdiv@dividend,c
  7386  002178  6A12               	clrf	___lbdiv@quotient,c
  7387  00217A  500F               	movf	___lbdiv@divisor,w,c
  7388  00217C  E014               	bz	l8366
  7389  00217E  0E01               	movlw	1
  7390  002180  6E11               	movwf	___lbdiv@counter,c
  7391  002182  D003               	goto	l8354
  7392  002184                     l8350:
  7393  002184  90D8               	bcf	status,0,c
  7394  002186  360F               	rlcf	___lbdiv@divisor,f,c
  7395  002188  2A11               	incf	___lbdiv@counter,f,c
  7396  00218A                     l8354:
  7397  00218A  AE0F               	btfss	___lbdiv@divisor,7,c
  7398  00218C  D7FB               	goto	l8350
  7399  00218E                     l8356:
  7400  00218E  90D8               	bcf	status,0,c
  7401  002190  3612               	rlcf	___lbdiv@quotient,f,c
  7402  002192  500F               	movf	___lbdiv@divisor,w,c
  7403  002194  5C10               	subwf	___lbdiv@dividend,w,c
  7404  002196  E303               	bnc	l8362
  7405  002198  500F               	movf	___lbdiv@divisor,w,c
  7406  00219A  5E10               	subwf	___lbdiv@dividend,f,c
  7407  00219C  8012               	bsf	___lbdiv@quotient,0,c
  7408  00219E                     l8362:
  7409  00219E  90D8               	bcf	status,0,c
  7410  0021A0  320F               	rrcf	___lbdiv@divisor,f,c
  7411  0021A2  2E11               	decfsz	___lbdiv@counter,f,c
  7412  0021A4  D7F4               	goto	l8356
  7413  0021A6                     l8366:
  7414  0021A6  5012               	movf	___lbdiv@quotient,w,c
  7415  0021A8  0012               	return		;funcret
  7416  0021AA                     __end_of___lbdiv:
  7417                           	opt stack 0
  7418                           tblptru	equ	0xFF8
  7419                           prodh	equ	0xFF4
  7420                           prodl	equ	0xFF3
  7421                           intcon	equ	0xFF2
  7422                           intcon2	equ	0xFF1
  7423                           intcon3	equ	0xFF0
  7424                           postinc0	equ	0xFEE
  7425                           wreg	equ	0xFE8
  7426                           postdec1	equ	0xFE5
  7427                           fsr1h	equ	0xFE2
  7428                           fsr1l	equ	0xFE1
  7429                           indf2	equ	0xFDF
  7430                           fsr2h	equ	0xFDA
  7431                           fsr2l	equ	0xFD9
  7432                           status	equ	0xFD8
  7433                           
  7434 ;; *************** function _SPI_Check_Buffer *****************
  7435 ;; Defined at:
  7436 ;;		line 348 in file "spi.c"
  7437 ;; Parameters:    Size  Location     Type
  7438 ;;		None
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;		None
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      void 
  7443 ;; Registers used:
  7444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7450 ;;      Params:         0       0       0       0
  7451 ;;      Locals:         0       0       0       0
  7452 ;;      Temps:          0       0       0       0
  7453 ;;      Totals:         0       0       0       0
  7454 ;;Total ram usage:        0 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:   16
  7457 ;; This function calls:
  7458 ;;		_EUSART1_RX_T3_LOCAL
  7459 ;; This function is called by:
  7460 ;;		_Cycle
  7461 ;;		_Check_List_Moteur_1
  7462 ;;		_Check_List_Moteur_2
  7463 ;;		_Check_List_Moteur_Bequille
  7464 ;;		_Mouvement_X
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           	psect	text45
  7469  002210                     __ptext45:
  7470                           	opt stack 0
  7471  002210                     _SPI_Check_Buffer:
  7472                           	opt stack 13
  7473                           
  7474                           ;spi.c: 396: if (SPI_full == 1) {
  7475                           
  7476                           ;incstack = 0
  7477  002210  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7478  002212  0012               	return	
  7479                           
  7480                           ;spi.c: 399: EUSART1_RX_T3_LOCAL(SPI_RX_TEXT[0],
  7481                           ;spi.c: 400: SPI_RX_TEXT[1],
  7482                           ;spi.c: 401: SPI_RX_TEXT[2],
  7483                           ;spi.c: 402: SPI_RX_TEXT[3],
  7484                           ;spi.c: 403: SPI_RX_TEXT[4],
  7485                           ;spi.c: 404: SPI_RX_TEXT[5],
  7486                           ;spi.c: 405: SPI_RX_TEXT[6],
  7487                           ;spi.c: 406: SPI_RX_TEXT[7]);
  7488  002214  C101  F280         	movff	_SPI_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7489  002218  C102  F281         	movff	_SPI_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7490  00221C  C103  F282         	movff	_SPI_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7491  002220  C104  F283         	movff	_SPI_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7492  002224  C105  F284         	movff	_SPI_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7493  002228  C106  F285         	movff	_SPI_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7494  00222C  C107  F286         	movff	_SPI_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7495  002230  0101               	movlb	1	; () banked
  7496  002232  5100               	movf	_SPI_RX_TEXT& (0+255),w,b	;volatile
  7497  002234  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7498                           
  7499                           ;spi.c: 408: SPI_full = 0;
  7500  002238  944F               	bcf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
  7501  00223A  0012               	return		;funcret
  7502  00223C                     __end_of_SPI_Check_Buffer:
  7503                           	opt stack 0
  7504                           tblptru	equ	0xFF8
  7505                           prodh	equ	0xFF4
  7506                           prodl	equ	0xFF3
  7507                           intcon	equ	0xFF2
  7508                           intcon2	equ	0xFF1
  7509                           intcon3	equ	0xFF0
  7510                           postinc0	equ	0xFEE
  7511                           wreg	equ	0xFE8
  7512                           postdec1	equ	0xFE5
  7513                           fsr1h	equ	0xFE2
  7514                           fsr1l	equ	0xFE1
  7515                           indf2	equ	0xFDF
  7516                           fsr2h	equ	0xFDA
  7517                           fsr2l	equ	0xFD9
  7518                           status	equ	0xFD8
  7519                           
  7520 ;; *************** function _EUSART1_Check_Buffer *****************
  7521 ;; Defined at:
  7522 ;;		line 268 in file "eusart.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7536 ;;      Params:         0       0       0       0
  7537 ;;      Locals:         0       0       0       0
  7538 ;;      Temps:          0       0       0       0
  7539 ;;      Totals:         0       0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; Hardware stack levels required when called:   16
  7543 ;; This function calls:
  7544 ;;		_EUSART1_RX_T3_LOCAL
  7545 ;; This function is called by:
  7546 ;;		_Cycle
  7547 ;;		_Check_List_Moteur_1
  7548 ;;		_Check_List_Moteur_2
  7549 ;;		_Check_List_Moteur_Bequille
  7550 ;;		_Mouvement_X
  7551 ;;		_delay_s
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text46
  7556  00223C                     __ptext46:
  7557                           	opt stack 0
  7558  00223C                     _EUSART1_Check_Buffer:
  7559                           	opt stack 12
  7560                           
  7561                           ;eusart.c: 270: if (RX1_full == 1) {
  7562                           
  7563                           ;incstack = 0
  7564  00223C  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7565  00223E  0012               	return	
  7566                           
  7567                           ;eusart.c: 273: EUSART1_RX_T3_LOCAL(UART_RX_TEXT[0],
  7568                           ;eusart.c: 274: UART_RX_TEXT[1],
  7569                           ;eusart.c: 275: UART_RX_TEXT[2],
  7570                           ;eusart.c: 276: UART_RX_TEXT[3],
  7571                           ;eusart.c: 277: UART_RX_TEXT[4],
  7572                           ;eusart.c: 278: UART_RX_TEXT[5],
  7573                           ;eusart.c: 279: UART_RX_TEXT[6],
  7574                           ;eusart.c: 280: UART_RX_TEXT[7]);
  7575  002240  C1C1  F280         	movff	_UART_RX_TEXT+1,EUSART1_RX_T3_LOCAL@Da	;volatile
  7576  002244  C1C2  F281         	movff	_UART_RX_TEXT+2,EUSART1_RX_T3_LOCAL@A	;volatile
  7577  002248  C1C3  F282         	movff	_UART_RX_TEXT+3,EUSART1_RX_T3_LOCAL@B	;volatile
  7578  00224C  C1C4  F283         	movff	_UART_RX_TEXT+4,EUSART1_RX_T3_LOCAL@C	;volatile
  7579  002250  C1C5  F284         	movff	_UART_RX_TEXT+5,EUSART1_RX_T3_LOCAL@D	;volatile
  7580  002254  C1C6  F285         	movff	_UART_RX_TEXT+6,EUSART1_RX_T3_LOCAL@E	;volatile
  7581  002258  C1C7  F286         	movff	_UART_RX_TEXT+7,EUSART1_RX_T3_LOCAL@F	;volatile
  7582  00225C  0101               	movlb	1	; () banked
  7583  00225E  51C0               	movf	_UART_RX_TEXT& (0+255),w,b	;volatile
  7584  002260  EC69  F000         	call	_EUSART1_RX_T3_LOCAL
  7585                           
  7586                           ;eusart.c: 282: RX1_full = 0;
  7587  002264  964F               	bcf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
  7588  002266  0012               	return		;funcret
  7589  002268                     __end_of_EUSART1_Check_Buffer:
  7590                           	opt stack 0
  7591                           tblptru	equ	0xFF8
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           intcon	equ	0xFF2
  7595                           intcon2	equ	0xFF1
  7596                           intcon3	equ	0xFF0
  7597                           postinc0	equ	0xFEE
  7598                           wreg	equ	0xFE8
  7599                           postdec1	equ	0xFE5
  7600                           fsr1h	equ	0xFE2
  7601                           fsr1l	equ	0xFE1
  7602                           indf2	equ	0xFDF
  7603                           fsr2h	equ	0xFDA
  7604                           fsr2l	equ	0xFD9
  7605                           status	equ	0xFD8
  7606                           
  7607 ;; *************** function _EUSART1_RX_T3_LOCAL *****************
  7608 ;; Defined at:
  7609 ;;		line 822 in file "eusart.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  Ad              1    wreg     unsigned char 
  7612 ;;  Da              1    0[BANK2 ] unsigned char 
  7613 ;;  A               1    1[BANK2 ] unsigned char 
  7614 ;;  B               1    2[BANK2 ] unsigned char 
  7615 ;;  C               1    3[BANK2 ] unsigned char 
  7616 ;;  D               1    4[BANK2 ] unsigned char 
  7617 ;;  E               1    5[BANK2 ] unsigned char 
  7618 ;;  F               1    6[BANK2 ] unsigned char 
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;  Ad              1   63[COMRAM] unsigned char 
  7621 ;;  i               2   64[COMRAM] int 
  7622 ;;  Reponse         1    0        unsigned char 
  7623 ;; Return value:  Size  Location     Type
  7624 ;;                  1    wreg      void 
  7625 ;; Registers used:
  7626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7627 ;; Tracked objects:
  7628 ;;		On entry : 3F/1
  7629 ;;		On exit  : 0/0
  7630 ;;		Unchanged: 0/0
  7631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7632 ;;      Params:         0       0       0       7
  7633 ;;      Locals:         3       0       0       0
  7634 ;;      Temps:          0       4       0       0
  7635 ;;      Totals:         3       4       0       7
  7636 ;;Total ram usage:       14 bytes
  7637 ;; Hardware stack levels used:    1
  7638 ;; Hardware stack levels required when called:   15
  7639 ;; This function calls:
  7640 ;;		_Alarme_On
  7641 ;;		_Coupe_Moteur
  7642 ;;		_EUSART1_Buffer_Send
  7643 ;;		_Etat_Get
  7644 ;;		_Etat_Intitule
  7645 ;;		_Etat_Update
  7646 ;;		_IRQ_Execution
  7647 ;;		___awmod
  7648 ;;		_delay_1s
  7649 ;;		_sprintf
  7650 ;; This function is called by:
  7651 ;;		_EUSART1_Check_Buffer
  7652 ;;		_SPI_Check_Buffer
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text47
  7657  0000D2                     __ptext47:
  7658                           	opt stack 0
  7659  0000D2                     _EUSART1_RX_T3_LOCAL:
  7660                           	opt stack 12
  7661                           
  7662                           ;incstack = 0
  7663                           ;EUSART1_RX_T3_LOCAL@Ad stored from wreg
  7664  0000D2  6E40               	movwf	EUSART1_RX_T3_LOCAL@Ad,c
  7665                           
  7666                           ;eusart.c: 823: int i;
  7667                           ;eusart.c: 824: unsigned char Reponse;
  7668                           ;eusart.c: 830: switch (Ad) {
  7669  0000D4  D391               	goto	l8142
  7670  0000D6                     l7852:
  7671                           
  7672                           ;eusart.c: 843: LATCbits.LATC2 = (unsigned char) (Da - 0x30);
  7673  0000D6  C280  F0FA         	movff	EUSART1_RX_T3_LOCAL@Da,??_EUSART1_RX_T3_LOCAL
  7674  0000DA  0ED0               	movlw	208
  7675  0000DC  0100               	movlb	0	; () banked
  7676  0000DE  27FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7677  0000E0  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7678  0000E2  47FA               	rlncf	??_EUSART1_RX_T3_LOCAL& (0+255),f,b
  7679  0000E4  508B               	movf	3979,w,c	;volatile
  7680  0000E6  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7681  0000E8  0BFB               	andlw	-5
  7682  0000EA  19FA               	xorwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7683  0000EC  6E8B               	movwf	3979,c	;volatile
  7684                           
  7685                           ;eusart.c: 847: break;
  7686  0000EE  0012               	return	
  7687  0000F0                     l7854:
  7688                           
  7689                           ;eusart.c: 849: sprintf(UART_TX_TEXT, "%d", Image_Courant_Moteur_1);
  7690  0000F0  0EAD               	movlw	low _UART_TX_TEXT
  7691  0000F2  6E1B               	movwf	sprintf@sp,c
  7692  0000F4  0EB9               	movlw	low (STR_4+30)
  7693  0000F6  6E1C               	movwf	sprintf@f,c
  7694  0000F8  0E3F               	movlw	high (STR_4+30)
  7695  0000FA  6E1D               	movwf	sprintf@f+1,c
  7696  0000FC  C09B  F01E         	movff	_Image_Courant_Moteur_1,?_sprintf+3	;volatile
  7697  000100  6A1F               	clrf	?_sprintf+4,c
  7698  000102  EC6C  F004         	call	_sprintf	;wreg free
  7699  000106                     l7856:
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;eusart.c: 850: EUSART1_Buffer_Send(UART_TX_TEXT);
  7703  000106  0EAD               	movlw	low _UART_TX_TEXT
  7704  000108  6E0F               	movwf	EUSART1_Buffer_Send@text,c
  7705  00010A  EFB8  F00B         	goto	_EUSART1_Buffer_Send	;wreg free
  7706  00010E                     l7858:
  7707                           
  7708                           ;eusart.c: 854: sprintf(UART_TX_TEXT, "consigne=%d i_1=%d i_2=%d duty=%d erreur=%d Patin
      +                          age_Nb_Essai=%d Capteur_Capot_Nb_Evenement=%d", consigne, Image_Courant_Moteur_1, Image_
      +                          Courant_Moteur_2, duty, erreur, Patinage_Nb_Essai, Capteur_Capot_Nb_Evenement);
  7709  00010E  0EAD               	movlw	low _UART_TX_TEXT
  7710  000110  6E1B               	movwf	sprintf@sp,c
  7711  000112  0EB7               	movlw	low STR_2
  7712  000114  6E1C               	movwf	sprintf@f,c
  7713  000116  0E3E               	movlw	high STR_2
  7714  000118  6E1D               	movwf	sprintf@f+1,c
  7715  00011A  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  7716  00011E  6A1F               	clrf	?_sprintf+4,c
  7717  000120  C09B  F020         	movff	_Image_Courant_Moteur_1,?_sprintf+5	;volatile
  7718  000124  6A21               	clrf	?_sprintf+6,c
  7719  000126  C09A  F022         	movff	_Image_Courant_Moteur_2,?_sprintf+7	;volatile
  7720  00012A  6A23               	clrf	?_sprintf+8,c
  7721  00012C  C086  F024         	movff	_duty,?_sprintf+9	;volatile
  7722  000130  C087  F025         	movff	_duty+1,?_sprintf+10	;volatile
  7723  000134  C084  F026         	movff	_erreur,?_sprintf+11	;volatile
  7724  000138  C085  F027         	movff	_erreur+1,?_sprintf+12	;volatile
  7725  00013C  C09D  F028         	movff	_Patinage_Nb_Essai,?_sprintf+13
  7726  000140  6A29               	clrf	?_sprintf+14,c
  7727  000142  C09F  F02A         	movff	_Capteur_Capot_Nb_Evenement,?_sprintf+15
  7728  000146  6A2B               	clrf	?_sprintf+16,c
  7729  000148  EC6C  F004         	call	_sprintf	;wreg free
  7730  00014C  D7DC               	goto	l7856
  7731  00014E                     l7862:
  7732                           
  7733                           ;eusart.c: 865: sprintf(UART_TX_TEXT, "%02X%02X%02X", Etat_Get(0), Etat_Get(1), Alarme);
  7734  00014E  0EAD               	movlw	low _UART_TX_TEXT
  7735  000150  6E1B               	movwf	sprintf@sp,c
  7736  000152  0EEC               	movlw	low STR_3
  7737  000154  6E1C               	movwf	sprintf@f,c
  7738  000156  0E3F               	movlw	high STR_3
  7739  000158  6E1D               	movwf	sprintf@f+1,c
  7740  00015A  0E00               	movlw	0
  7741  00015C  ECEF  F010         	call	_Etat_Get
  7742  000160  6E1E               	movwf	?_sprintf+3,c
  7743  000162  6A1F               	clrf	?_sprintf+4,c
  7744  000164  0E01               	movlw	1
  7745  000166  ECEF  F010         	call	_Etat_Get
  7746  00016A  6E20               	movwf	?_sprintf+5,c
  7747  00016C  6A21               	clrf	?_sprintf+6,c
  7748  00016E  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  7749  000172  6A23               	clrf	?_sprintf+8,c
  7750  000174  EC6C  F004         	call	_sprintf	;wreg free
  7751  000178  D7C6               	goto	l7856
  7752  00017A                     l1374:
  7753                           
  7754                           ;eusart.c: 877: for (i = 0; i < 10; i++) {
  7755  00017A  6A41               	clrf	EUSART1_RX_T3_LOCAL@i,c
  7756  00017C  6A42               	clrf	EUSART1_RX_T3_LOCAL@i+1,c
  7757  00017E                     l7870:
  7758                           
  7759                           ;eusart.c: 881: UART_TX_TEXT[(unsigned char) (10 - 1 - i)] = Etat_Intitule(Etat_Log[(uns
      +                          igned char) ((Etat_Precedent_Index + i) % 10)]);
  7760  00017E  5041               	movf	EUSART1_RX_T3_LOCAL@i,w,c
  7761  000180  08B6               	sublw	low (_UART_TX_TEXT+9)
  7762  000182  6ED9               	movwf	fsr2l,c
  7763  000184  6ADA               	clrf	fsr2h,c
  7764  000186  504C               	movf	_Etat_Precedent_Index,w,c
  7765  000188  2441               	addwf	EUSART1_RX_T3_LOCAL@i,w,c
  7766  00018A  6E0F               	movwf	___awmod@dividend,c
  7767  00018C  0E00               	movlw	0
  7768  00018E  2042               	addwfc	EUSART1_RX_T3_LOCAL@i+1,w,c
  7769  000190  6E10               	movwf	___awmod@dividend+1,c
  7770  000192  6A12               	clrf	___awmod@divisor+1,c
  7771  000194  0E0A               	movlw	10
  7772  000196  6E11               	movwf	___awmod@divisor,c
  7773  000198  EC15  F00E         	call	___awmod	;wreg free
  7774  00019C  500F               	movf	?___awmod,w,c
  7775  00019E  0F6A               	addlw	low _Etat_Log
  7776  0001A0  6EE1               	movwf	fsr1l,c
  7777  0001A2  6AE2               	clrf	fsr1h,c
  7778  0001A4  50E7               	movf	indf1,w,c
  7779  0001A6  ECD5  F010         	call	_Etat_Intitule
  7780  0001AA  6EDF               	movwf	indf2,c
  7781  0001AC  4A41               	infsnz	EUSART1_RX_T3_LOCAL@i,f,c
  7782  0001AE  2A42               	incf	EUSART1_RX_T3_LOCAL@i+1,f,c
  7783  0001B0  BE42               	btfsc	EUSART1_RX_T3_LOCAL@i+1,7,c
  7784  0001B2  D7E5               	goto	l7870
  7785  0001B4  5042               	movf	EUSART1_RX_T3_LOCAL@i+1,w,c
  7786  0001B6  E103               	bnz	u6070
  7787  0001B8  0E0A               	movlw	10
  7788  0001BA  5C41               	subwf	EUSART1_RX_T3_LOCAL@i,w,c
  7789  0001BC  E3E0               	bnc	l7870
  7790  0001BE                     u6070:
  7791                           
  7792                           ;eusart.c: 882: }
  7793                           ;eusart.c: 884: UART_TX_TEXT[10] = 0x00;
  7794  0001BE  0100               	movlb	0	; () banked
  7795  0001C0  6BB7               	clrf	(_UART_TX_TEXT+10)& (0+255),b
  7796  0001C2  D7A1               	goto	l7856
  7797  0001C4                     l7878:
  7798                           
  7799                           ;eusart.c: 890: sprintf(UART_TX_TEXT, "nb_s=%d nb_Pion=%d nb_Timer_5=%d", nb_s_fonctionn
      +                          ement, nb_Pion, nb_100ms_Timer_5);
  7800  0001C4  0EAD               	movlw	low _UART_TX_TEXT
  7801  0001C6  6E1B               	movwf	sprintf@sp,c
  7802  0001C8  0E9B               	movlw	low STR_4
  7803  0001CA  6E1C               	movwf	sprintf@f,c
  7804  0001CC  0E3F               	movlw	high STR_4
  7805  0001CE  6E1D               	movwf	sprintf@f+1,c
  7806  0001D0  C04B  F01E         	movff	_nb_s_fonctionnement,?_sprintf+3	;volatile
  7807  0001D4  6A1F               	clrf	?_sprintf+4,c
  7808  0001D6  C0A1  F020         	movff	_nb_Pion,?_sprintf+5	;volatile
  7809  0001DA  6A21               	clrf	?_sprintf+6,c
  7810  0001DC  C0A6  F022         	movff	_nb_100ms_Timer_5,?_sprintf+7	;volatile
  7811  0001E0  6A23               	clrf	?_sprintf+8,c
  7812  0001E2  EC6C  F004         	call	_sprintf	;wreg free
  7813  0001E6  D78F               	goto	l7856
  7814  0001E8                     l7882:
  7815                           
  7816                           ;eusart.c: 898: consigne = (char) (5 * Da);
  7817  0001E8  0102               	movlb	2	; () banked
  7818  0001EA  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7819  0001EC  0D05               	mullw	5
  7820  0001EE  CFF3 F098          	movff	prodl,_consigne	;volatile
  7821                           
  7822                           ;eusart.c: 900: break;
  7823  0001F2  0012               	return	
  7824  0001F4                     l7884:
  7825                           
  7826                           ;eusart.c: 906: sprintf(UART_TX_TEXT, "%01X", P4_busy);
  7827  0001F4  0EAD               	movlw	low _UART_TX_TEXT
  7828  0001F6  6E1B               	movwf	sprintf@sp,c
  7829  0001F8  0EF9               	movlw	low STR_5
  7830  0001FA  6E1C               	movwf	sprintf@f,c
  7831  0001FC  0E3F               	movlw	high STR_5
  7832  0001FE  6E1D               	movwf	sprintf@f+1,c
  7833  000200  C0AC  F01E         	movff	_P4_busy,?_sprintf+3
  7834  000204  6A1F               	clrf	?_sprintf+4,c
  7835  000206  EC6C  F004         	call	_sprintf	;wreg free
  7836  00020A  D77D               	goto	l7856
  7837  00020C                     l7888:
  7838                           
  7839                           ;eusart.c: 911: sprintf(UART_TX_TEXT, "%d", Etat_Get((unsigned char) (Da - 0x30)));
  7840  00020C  0EAD               	movlw	low _UART_TX_TEXT
  7841  00020E  6E1B               	movwf	sprintf@sp,c
  7842  000210  0EB9               	movlw	low (STR_4+30)
  7843  000212  6E1C               	movwf	sprintf@f,c
  7844  000214  0E3F               	movlw	high (STR_4+30)
  7845  000216  6E1D               	movwf	sprintf@f+1,c
  7846  000218  0102               	movlb	2	; () banked
  7847  00021A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7848  00021C  0FD0               	addlw	208
  7849  00021E  ECEF  F010         	call	_Etat_Get
  7850  000222  6E1E               	movwf	?_sprintf+3,c
  7851  000224  6A1F               	clrf	?_sprintf+4,c
  7852  000226  EC6C  F004         	call	_sprintf	;wreg free
  7853  00022A  D76D               	goto	l7856
  7854  00022C                     l7892:
  7855                           
  7856                           ;eusart.c: 920: Etat_Update(Da);
  7857  00022C  0102               	movlb	2	; () banked
  7858  00022E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7859  000230  EF20  F012         	goto	_Etat_Update
  7860  000234                     l7894:
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;eusart.c: 941: Pelle_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x3
      +                          0)*1);
  7864  000234  0102               	movlb	2	; () banked
  7865  000236  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7866  000238  0D0A               	mullw	10
  7867  00023A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7868  00023E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7869  000240  0D64               	mullw	100
  7870  000242  50F3               	movf	prodl,w,c
  7871  000244  0100               	movlb	0	; () banked
  7872  000246  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7873  000248  0102               	movlb	2	; () banked
  7874  00024A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7875  00024C  0F30               	addlw	48
  7876  00024E  0100               	movlb	0	; () banked
  7877  000250  6F93               	movwf	_Pelle_I_Max& (0+255),b
  7878                           
  7879                           ;eusart.c: 943: break;
  7880  000252  0012               	return	
  7881  000254                     l7896:
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;eusart.c: 945: Bequille_I_Max = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  7885  000254  0102               	movlb	2	; () banked
  7886  000256  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7887  000258  0D0A               	mullw	10
  7888  00025A  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7889  00025E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7890  000260  0D64               	mullw	100
  7891  000262  50F3               	movf	prodl,w,c
  7892  000264  0100               	movlb	0	; () banked
  7893  000266  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7894  000268  0102               	movlb	2	; () banked
  7895  00026A  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7896  00026C  0F30               	addlw	48
  7897  00026E  0100               	movlb	0	; () banked
  7898  000270  6F92               	movwf	_Bequille_I_Max& (0+255),b
  7899                           
  7900                           ;eusart.c: 946: break;
  7901  000272  0012               	return	
  7902  000274                     l7900:
  7903  000274  0ED0               	movlw	208
  7904  000276  0100               	movlb	0	; () banked
  7905  000278  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  7906  00027A  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  7907  00027C  0102               	movlb	2	; () banked
  7908  00027E  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  7909  000280  0100               	movlb	0	; () banked
  7910  000282  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  7911  000284  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  7912  000286  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7913  000288  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  7914  00028A  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  7915  00028C  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  7916                           
  7917                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7918                           ; Switch size 1, requested type "speed"
  7919                           ; Number of cases is 1, Range of values is 0 to 0
  7920                           ; switch strategies available:
  7921                           ; Name         Instructions Cycles
  7922                           ; simple_byte            4     3 (average)
  7923                           ;	Chosen strategy is simple_byte
  7924  00028E  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  7925  000290  A4D8               	btfss	status,2,c
  7926  000292  0012               	return	
  7927                           
  7928                           ; BSR set to: 0
  7929                           ; Switch size 1, requested type "speed"
  7930                           ; Number of cases is 3, Range of values is 1 to 3
  7931                           ; switch strategies available:
  7932                           ; Name         Instructions Cycles
  7933                           ; simple_byte           10     6 (average)
  7934                           ;	Chosen strategy is simple_byte
  7935  000294  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  7936  000296  0A01               	xorlw	1	; case 1
  7937  000298  B4D8               	btfsc	status,2,c
  7938  00029A  0012               	return	
  7939  00029C  0A03               	xorlw	3	; case 2
  7940  00029E  E0CA               	bz	l7894
  7941  0002A0  0A01               	xorlw	1	; case 3
  7942  0002A2  E0D8               	bz	l7896
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;eusart.c: 949: break;
  7946  0002A4  0012               	return	
  7947  0002A6                     l7902:
  7948                           
  7949                           ; BSR set to: 0
  7950                           ;eusart.c: 959: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7951  0002A6  0102               	movlb	2	; () banked
  7952  0002A8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7953  0002AA  0D0A               	mullw	10
  7954  0002AC  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7955  0002B0  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7956  0002B2  0D64               	mullw	100
  7957  0002B4  50F3               	movf	prodl,w,c
  7958  0002B6  0100               	movlb	0	; () banked
  7959  0002B8  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7960  0002BA  0102               	movlb	2	; () banked
  7961  0002BC  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7962  0002BE  0F30               	addlw	48
  7963  0002C0  6E49               	movwf	_Consigne_en_A,c
  7964                           
  7965                           ; BSR set to: 2
  7966                           ;eusart.c: 963: consigne = (char) Consigne_en_A;
  7967  0002C2  C049  F098         	movff	_Consigne_en_A,_consigne	;volatile
  7968                           
  7969                           ; BSR set to: 2
  7970                           ;eusart.c: 964: Consigne_Max = (char) consigne;
  7971  0002C6  C098  F097         	movff	_consigne,_Consigne_Max	;volatile
  7972                           
  7973                           ;eusart.c: 968: break;
  7974  0002CA  D0D6               	goto	l7954
  7975  0002CC                     l7908:
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;eusart.c: 970: nb_s_patinage = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  7979  0002CC  0102               	movlb	2	; () banked
  7980  0002CE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  7981  0002D0  0D0A               	mullw	10
  7982  0002D2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  7983  0002D6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  7984  0002D8  0D64               	mullw	100
  7985  0002DA  50F3               	movf	prodl,w,c
  7986  0002DC  0100               	movlb	0	; () banked
  7987  0002DE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  7988  0002E0  0102               	movlb	2	; () banked
  7989  0002E2  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  7990  0002E4  0F30               	addlw	48
  7991  0002E6  0100               	movlb	0	; () banked
  7992  0002E8  6FA7               	movwf	_nb_s_patinage& (0+255),b
  7993                           
  7994                           ;eusart.c: 971: break;
  7995  0002EA  D0C6               	goto	l7954
  7996  0002EC                     l7910:
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;eusart.c: 973: nb_100ms_pion = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8000  0002EC  0102               	movlb	2	; () banked
  8001  0002EE  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8002  0002F0  0D0A               	mullw	10
  8003  0002F2  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8004  0002F6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8005  0002F8  0D64               	mullw	100
  8006  0002FA  50F3               	movf	prodl,w,c
  8007  0002FC  0100               	movlb	0	; () banked
  8008  0002FE  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8009  000300  0102               	movlb	2	; () banked
  8010  000302  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8011  000304  0F30               	addlw	48
  8012  000306  0100               	movlb	0	; () banked
  8013  000308  6FA5               	movwf	_nb_100ms_pion& (0+255),b
  8014                           
  8015                           ;eusart.c: 974: break;
  8016  00030A  D0B6               	goto	l7954
  8017  00030C                     l7912:
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;eusart.c: 976: nb_100ms_platine = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C 
      +                          - 0x30)*1);
  8021  00030C  0102               	movlb	2	; () banked
  8022  00030E  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8023  000310  0D0A               	mullw	10
  8024  000312  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8025  000316  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8026  000318  0D64               	mullw	100
  8027  00031A  50F3               	movf	prodl,w,c
  8028  00031C  0100               	movlb	0	; () banked
  8029  00031E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8030  000320  0102               	movlb	2	; () banked
  8031  000322  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8032  000324  0F30               	addlw	48
  8033  000326  0100               	movlb	0	; () banked
  8034  000328  6FA4               	movwf	_nb_100ms_platine& (0+255),b
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;eusart.c: 977: nb_100ms_platine_backup = nb_100ms_platine;
  8038  00032A  C0A4  F04E         	movff	_nb_100ms_platine,_nb_100ms_platine_backup
  8039                           
  8040                           ;eusart.c: 983: break;
  8041  00032E  D0A4               	goto	l7954
  8042  000330                     l7916:
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;eusart.c: 985: nb_s_pelle = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0x30
      +                          )*1);
  8046  000330  0102               	movlb	2	; () banked
  8047  000332  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8048  000334  0D0A               	mullw	10
  8049  000336  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8050  00033A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8051  00033C  0D64               	mullw	100
  8052  00033E  50F3               	movf	prodl,w,c
  8053  000340  0100               	movlb	0	; () banked
  8054  000342  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8055  000344  0102               	movlb	2	; () banked
  8056  000346  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8057  000348  0F30               	addlw	48
  8058  00034A  0100               	movlb	0	; () banked
  8059  00034C  6FA3               	movwf	_nb_s_pelle& (0+255),b
  8060                           
  8061                           ;eusart.c: 986: break;
  8062  00034E  D094               	goto	l7954
  8063  000350                     l7918:
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;eusart.c: 988: Capteur_Capot_Nb_Evenement_Autoriser = (unsigned char) (A - 0x30);
  8067  000350  0102               	movlb	2	; () banked
  8068  000352  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8069  000354  0FD0               	addlw	208
  8070  000356  6E4A               	movwf	_Capteur_Capot_Nb_Evenement_Autoriser,c
  8071                           
  8072                           ; BSR set to: 2
  8073                           ;eusart.c: 989: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8074  000358  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8075                           
  8076                           ;eusart.c: 990: break;
  8077  00035C  D08D               	goto	l7954
  8078  00035E                     l7922:
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;eusart.c: 992: Patinage_Nb_Essai = (unsigned char) (A - 0x30);
  8082  00035E  0102               	movlb	2	; () banked
  8083  000360  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8084  000362  0FD0               	addlw	208
  8085  000364  0100               	movlb	0	; () banked
  8086  000366  6F9D               	movwf	_Patinage_Nb_Essai& (0+255),b
  8087                           
  8088                           ; BSR set to: 0
  8089                           ;eusart.c: 993: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8090  000368  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8091                           
  8092                           ;eusart.c: 994: break;
  8093  00036C  D085               	goto	l7954
  8094  00036E                     l7926:
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;eusart.c: 996: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 0
      +                          x30)*1);
  8098  00036E  0102               	movlb	2	; () banked
  8099  000370  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8100  000372  0D0A               	mullw	10
  8101  000374  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8102  000378  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8103  00037A  0D64               	mullw	100
  8104  00037C  50F3               	movf	prodl,w,c
  8105  00037E  0100               	movlb	0	; () banked
  8106  000380  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8107  000382  0102               	movlb	2	; () banked
  8108  000384  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8109  000386  0F30               	addlw	48
  8110  000388  6E49               	movwf	_Consigne_en_A,c
  8111                           
  8112                           ; BSR set to: 2
  8113                           ;eusart.c: 999: Consigne_Max_Moteur_X = (char) (Consigne_en_A);
  8114  00038A  C049  F096         	movff	_Consigne_en_A,_Consigne_Max_Moteur_X	;volatile
  8115                           
  8116                           ;eusart.c: 1000: break;
  8117  00038E  D074               	goto	l7954
  8118  000390                     l7930:
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;eusart.c: 1002: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8122  000390  0102               	movlb	2	; () banked
  8123  000392  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8124  000394  0D0A               	mullw	10
  8125  000396  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8126  00039A  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8127  00039C  0D64               	mullw	100
  8128  00039E  50F3               	movf	prodl,w,c
  8129  0003A0  0100               	movlb	0	; () banked
  8130  0003A2  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8131  0003A4  0102               	movlb	2	; () banked
  8132  0003A6  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8133  0003A8  0F30               	addlw	48
  8134  0003AA  6E49               	movwf	_Consigne_en_A,c
  8135                           
  8136                           ; BSR set to: 2
  8137                           ;eusart.c: 1005: Consigne_Max_Moteur_Z = (char) (Consigne_en_A);
  8138  0003AC  C049  F095         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Z	;volatile
  8139                           
  8140                           ;eusart.c: 1006: break;
  8141  0003B0  D063               	goto	l7954
  8142  0003B2                     l7934:
  8143                           
  8144                           ; BSR set to: 0
  8145                           ;eusart.c: 1008: Consigne_en_A = (unsigned char) ((A - 0x30)*100 + (B - 0x30)*10 + (C - 
      +                          0x30)*1);
  8146  0003B2  0102               	movlb	2	; () banked
  8147  0003B4  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8148  0003B6  0D0A               	mullw	10
  8149  0003B8  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8150  0003BC  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8151  0003BE  0D64               	mullw	100
  8152  0003C0  50F3               	movf	prodl,w,c
  8153  0003C2  0100               	movlb	0	; () banked
  8154  0003C4  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8155  0003C6  0102               	movlb	2	; () banked
  8156  0003C8  2583               	addwf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8157  0003CA  0F30               	addlw	48
  8158  0003CC  6E49               	movwf	_Consigne_en_A,c
  8159                           
  8160                           ; BSR set to: 2
  8161                           ;eusart.c: 1011: Consigne_Max_Moteur_Bequille = (char) (Consigne_en_A);
  8162  0003CE  C049  F094         	movff	_Consigne_en_A,_Consigne_Max_Moteur_Bequille	;volatile
  8163                           
  8164                           ;eusart.c: 1012: break;
  8165  0003D2  D052               	goto	l7954
  8166  0003D4                     l7940:
  8167  0003D4  0ED0               	movlw	208
  8168  0003D6  0100               	movlb	0	; () banked
  8169  0003D8  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8170  0003DA  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8171  0003DC  0102               	movlb	2	; () banked
  8172  0003DE  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8173  0003E0  0100               	movlb	0	; () banked
  8174  0003E2  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8175  0003E4  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8176  0003E6  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8177  0003E8  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8178  0003EA  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8179  0003EC  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8180                           
  8181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8182                           ; Switch size 1, requested type "speed"
  8183                           ; Number of cases is 1, Range of values is 0 to 0
  8184                           ; switch strategies available:
  8185                           ; Name         Instructions Cycles
  8186                           ; simple_byte            4     3 (average)
  8187                           ;	Chosen strategy is simple_byte
  8188  0003EE  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8189  0003F0  E143               	bnz	l7954
  8190                           
  8191                           ; BSR set to: 0
  8192                           ; Switch size 1, requested type "speed"
  8193                           ; Number of cases is 10, Range of values is 0 to 9
  8194                           ; switch strategies available:
  8195                           ; Name         Instructions Cycles
  8196                           ; simple_byte           31    16 (average)
  8197                           ;	Chosen strategy is simple_byte
  8198  0003F2  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8199  0003F4  E101 D757          	bz	l7902
  8200  0003F8  0A01               	xorlw	1	; case 1
  8201  0003FA  E101 D767          	bz	l7908
  8202  0003FE  0A03               	xorlw	3	; case 2
  8203  000400  E101 D774          	bz	l7910
  8204  000404  0A01               	xorlw	1	; case 3
  8205  000406  E082               	bz	l7912
  8206  000408  0A07               	xorlw	7	; case 4
  8207  00040A  E092               	bz	l7916
  8208  00040C  0A01               	xorlw	1	; case 5
  8209  00040E  E0A0               	bz	l7918
  8210  000410  0A03               	xorlw	3	; case 6
  8211  000412  E0A5               	bz	l7922
  8212  000414  0A01               	xorlw	1	; case 7
  8213  000416  E0AB               	bz	l7926
  8214  000418  0A0F               	xorlw	15	; case 8
  8215  00041A  E0BA               	bz	l7930
  8216  00041C  0A01               	xorlw	1	; case 9
  8217  00041E  E0C9               	bz	l7934
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;eusart.c: 1031: switch (Da - 0x30) {
  8221                           
  8222                           ;eusart.c: 1024: case 'V':
  8223  000420  D02B               	goto	l7954
  8224  000422                     l7942:
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;eusart.c: 1033: sprintf(UART_TX_TEXT, "consigne=%d patin=%d pion=%d platine=%d pelle=%d
      +                          ", consigne, nb_s_patinage, nb_100ms_pion, nb_100ms_platine, nb_s_pelle);
  8228  000422  0EAD               	movlw	low _UART_TX_TEXT
  8229  000424  6E1B               	movwf	sprintf@sp,c
  8230  000426  0E6A               	movlw	low STR_7
  8231  000428  6E1C               	movwf	sprintf@f,c
  8232  00042A  0E3F               	movlw	high STR_7
  8233  00042C  6E1D               	movwf	sprintf@f+1,c
  8234  00042E  C098  F01E         	movff	_consigne,?_sprintf+3	;volatile
  8235  000432  6A1F               	clrf	?_sprintf+4,c
  8236  000434  C0A7  F020         	movff	_nb_s_patinage,?_sprintf+5
  8237  000438  6A21               	clrf	?_sprintf+6,c
  8238  00043A  C0A5  F022         	movff	_nb_100ms_pion,?_sprintf+7
  8239  00043E  6A23               	clrf	?_sprintf+8,c
  8240  000440  C0A4  F024         	movff	_nb_100ms_platine,?_sprintf+9
  8241  000444  6A25               	clrf	?_sprintf+10,c
  8242  000446  C0A3  F026         	movff	_nb_s_pelle,?_sprintf+11
  8243  00044A  6A27               	clrf	?_sprintf+12,c
  8244  00044C  EC6C  F004         	call	_sprintf	;wreg free
  8245  000450  D65A               	goto	l7856
  8246  000452                     l7946:
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;eusart.c: 1039: sprintf(UART_TX_TEXT, "Etat=%d nb_s_fonctionnement=%d", Etat, nb_s_fonc
      +                          tionnement);
  8250  000452  0EAD               	movlw	low _UART_TX_TEXT
  8251  000454  6E1B               	movwf	sprintf@sp,c
  8252  000456  0EBC               	movlw	low STR_8
  8253  000458  6E1C               	movwf	sprintf@f,c
  8254  00045A  0E3F               	movlw	high STR_8
  8255  00045C  6E1D               	movwf	sprintf@f+1,c
  8256  00045E  C0AA  F01E         	movff	_Etat,?_sprintf+3	;volatile
  8257  000462  6A1F               	clrf	?_sprintf+4,c
  8258  000464  C04B  F020         	movff	_nb_s_fonctionnement,?_sprintf+5	;volatile
  8259  000468  6A21               	clrf	?_sprintf+6,c
  8260  00046A  EC6C  F004         	call	_sprintf	;wreg free
  8261  00046E  D64B               	goto	l7856
  8262  000470                     l1408:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;eusart.c: 1046: UART_TX_TEXT[0] = A;
  8266  000470  C281  F0AD         	movff	EUSART1_RX_T3_LOCAL@A,_UART_TX_TEXT
  8267                           
  8268                           ;eusart.c: 1047: UART_TX_TEXT[1] = 0x00;
  8269  000474  6BAE               	clrf	(_UART_TX_TEXT+1)& (0+255),b
  8270  000476  D647               	goto	l7856
  8271  000478                     l7954:
  8272  000478  0ED0               	movlw	208
  8273  00047A  0100               	movlb	0	; () banked
  8274  00047C  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8275  00047E  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8276  000480  0102               	movlb	2	; () banked
  8277  000482  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8278  000484  0100               	movlb	0	; () banked
  8279  000486  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8280  000488  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8281  00048A  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8282  00048C  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8283  00048E  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8284  000490  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8285                           
  8286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8287                           ; Switch size 1, requested type "speed"
  8288                           ; Number of cases is 1, Range of values is 0 to 0
  8289                           ; switch strategies available:
  8290                           ; Name         Instructions Cycles
  8291                           ; simple_byte            4     3 (average)
  8292                           ;	Chosen strategy is simple_byte
  8293  000492  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8294  000494  A4D8               	btfss	status,2,c
  8295  000496  0012               	return	
  8296                           
  8297                           ; BSR set to: 0
  8298                           ; Switch size 1, requested type "speed"
  8299                           ; Number of cases is 3, Range of values is 0 to 9
  8300                           ; switch strategies available:
  8301                           ; Name         Instructions Cycles
  8302                           ; simple_byte           10     6 (average)
  8303                           ;	Chosen strategy is simple_byte
  8304  000498  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8305  00049A  E0C3               	bz	l7942
  8306  00049C  0A01               	xorlw	1	; case 1
  8307  00049E  E0D9               	bz	l7946
  8308  0004A0  0A08               	xorlw	8	; case 9
  8309  0004A2  A4D8               	btfss	status,2,c
  8310  0004A4  0012               	return	
  8311  0004A6  D7E4               	goto	l1408
  8312  0004A8                     l7956:
  8313                           
  8314                           ;eusart.c: 1062: Alarme_On(8);
  8315  0004A8  0E08               	movlw	8
  8316  0004AA  EF30  F013         	goto	_Alarme_On
  8317  0004AE                     l7958:
  8318                           
  8319                           ;eusart.c: 1067: sprintf(UART_TX_TEXT, "%d", Version);
  8320  0004AE  0EAD               	movlw	low _UART_TX_TEXT
  8321  0004B0  6E1B               	movwf	sprintf@sp,c
  8322  0004B2  0EB9               	movlw	low (STR_4+30)
  8323  0004B4  6E1C               	movwf	sprintf@f,c
  8324  0004B6  0E3F               	movlw	high (STR_4+30)
  8325  0004B8  6E1D               	movwf	sprintf@f+1,c
  8326  0004BA  C0AB  F01E         	movff	_Version,?_sprintf+3
  8327  0004BE  6A1F               	clrf	?_sprintf+4,c
  8328  0004C0  EC6C  F004         	call	_sprintf	;wreg free
  8329  0004C4  D620               	goto	l7856
  8330  0004C6                     l7962:
  8331                           
  8332                           ;eusart.c: 1107: sprintf(UART_TX_TEXT, "%02X %02X %02X %02X %02X %02X %02X %02X %02X %02
      +                          X %02X %01X %01X %01X %02X%02X %02X", Etat_Get(0), Etat_Get(1), Alarme, nb_Pion, Image_C
      +                          ourant_Moteur_1, Image_Courant_Moteur_2, consigne, nb_s_patinage, nb_100ms_pion, nb_100m
      +                          s_p
  8333  0004C6  0EAD               	movlw	low _UART_TX_TEXT
  8334  0004C8  6E1B               	movwf	sprintf@sp,c
  8335  0004CA  0E16               	movlw	low STR_10
  8336  0004CC  6E1C               	movwf	sprintf@f,c
  8337  0004CE  0E3F               	movlw	high STR_10
  8338  0004D0  6E1D               	movwf	sprintf@f+1,c
  8339  0004D2  0E00               	movlw	0
  8340  0004D4  ECEF  F010         	call	_Etat_Get
  8341  0004D8  6E1E               	movwf	?_sprintf+3,c
  8342  0004DA  6A1F               	clrf	?_sprintf+4,c
  8343  0004DC  0E01               	movlw	1
  8344  0004DE  ECEF  F010         	call	_Etat_Get
  8345  0004E2  6E20               	movwf	?_sprintf+5,c
  8346  0004E4  6A21               	clrf	?_sprintf+6,c
  8347  0004E6  C0A9  F022         	movff	_Alarme,?_sprintf+7	;volatile
  8348  0004EA  6A23               	clrf	?_sprintf+8,c
  8349  0004EC  C0A1  F024         	movff	_nb_Pion,?_sprintf+9	;volatile
  8350  0004F0  6A25               	clrf	?_sprintf+10,c
  8351  0004F2  C09B  F026         	movff	_Image_Courant_Moteur_1,?_sprintf+11	;volatile
  8352  0004F6  6A27               	clrf	?_sprintf+12,c
  8353  0004F8  C09A  F028         	movff	_Image_Courant_Moteur_2,?_sprintf+13	;volatile
  8354  0004FC  6A29               	clrf	?_sprintf+14,c
  8355  0004FE  C098  F02A         	movff	_consigne,?_sprintf+15	;volatile
  8356  000502  6A2B               	clrf	?_sprintf+16,c
  8357  000504  C0A7  F02C         	movff	_nb_s_patinage,?_sprintf+17
  8358  000508  6A2D               	clrf	?_sprintf+18,c
  8359  00050A  C0A5  F02E         	movff	_nb_100ms_pion,?_sprintf+19
  8360  00050E  6A2F               	clrf	?_sprintf+20,c
  8361  000510  C0A4  F030         	movff	_nb_100ms_platine,?_sprintf+21
  8362  000514  6A31               	clrf	?_sprintf+22,c
  8363  000516  C0A3  F032         	movff	_nb_s_pelle,?_sprintf+23
  8364  00051A  6A33               	clrf	?_sprintf+24,c
  8365  00051C  0E01               	movlw	1
  8366  00051E  A480               	btfss	3968,2,c	;volatile
  8367  000520  0E00               	movlw	0
  8368  000522  6E34               	movwf	?_sprintf+25,c
  8369  000524  6A35               	clrf	?_sprintf+26,c
  8370  000526  0E01               	movlw	1
  8371  000528  A682               	btfss	3970,3,c	;volatile
  8372  00052A  0E00               	movlw	0
  8373  00052C  6E36               	movwf	?_sprintf+27,c
  8374  00052E  6A37               	clrf	?_sprintf+28,c
  8375  000530  0E01               	movlw	1
  8376  000532  A48D               	btfss	3981,2,c	;volatile
  8377  000534  0E00               	movlw	0
  8378  000536  6E38               	movwf	?_sprintf+29,c
  8379  000538  6A39               	clrf	?_sprintf+30,c
  8380  00053A  CFB0 F03A          	movff	4016,?_sprintf+31	;volatile
  8381  00053E  6A3B               	clrf	?_sprintf+32,c
  8382  000540  CFAF F03C          	movff	4015,?_sprintf+33	;volatile
  8383  000544  6A3D               	clrf	?_sprintf+34,c
  8384  000546  C0AB  F03E         	movff	_Version,?_sprintf+35
  8385  00054A  6A3F               	clrf	?_sprintf+36,c
  8386  00054C  EC6C  F004         	call	_sprintf	;wreg free
  8387  000550  D5DA               	goto	l7856
  8388  000552                     l7966:
  8389                           
  8390                           ;eusart.c: 1148: Alarme_On(7);
  8391  000552  0E07               	movlw	7
  8392  000554  EF30  F013         	goto	_Alarme_On
  8393  000558                     l7968:
  8394                           
  8395                           ;eusart.c: 1155: Etat_Update(0);
  8396  000558  0E00               	movlw	0
  8397  00055A  EC20  F012         	call	_Etat_Update
  8398  00055E                     l7970:
  8399                           
  8400                           ;eusart.c: 1157: P4_busy = 0;
  8401  00055E  0100               	movlb	0	; () banked
  8402  000560  6BAC               	clrf	_P4_busy& (0+255),b
  8403                           
  8404                           ;eusart.c: 1161: break;
  8405  000562  0012               	return	
  8406  000564                     l1417:
  8407                           
  8408                           ;eusart.c: 1173: if (PORTCbits.RC3 == 1) {
  8409  000564  A682               	btfss	3970,3,c	;volatile
  8410  000566  D0DB               	goto	l8086
  8411                           
  8412                           ;eusart.c: 1175: direction = (unsigned char) (Da - 0x30);
  8413  000568  0102               	movlb	2	; () banked
  8414  00056A  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8415  00056C  0FD0               	addlw	208
  8416  00056E  0100               	movlb	0	; () banked
  8417  000570  6F8F               	movwf	_direction& (0+255),b	;volatile
  8418                           
  8419                           ;eusart.c: 1176: type_consigne = (unsigned char) (A - 0x30);
  8420  000572  0102               	movlb	2	; () banked
  8421  000574  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8422  000576  0FD0               	addlw	208
  8423  000578  0100               	movlb	0	; () banked
  8424  00057A  6F91               	movwf	_type_consigne& (0+255),b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;eusart.c: 1177: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8428  00057C  0102               	movlb	2	; () banked
  8429  00057E  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8430  000580  0D0A               	mullw	10
  8431  000582  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8432  000586  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8433  000588  0D64               	mullw	100
  8434  00058A  50F3               	movf	prodl,w,c
  8435  00058C  0100               	movlb	0	; () banked
  8436  00058E  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8437  000590  0102               	movlb	2	; () banked
  8438  000592  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8439  000594  0F30               	addlw	48
  8440  000596  0100               	movlb	0	; () banked
  8441  000598  6F90               	movwf	_mouvement_option& (0+255),b
  8442                           
  8443                           ;eusart.c: 1180: switch (E - 0x30) {
  8444  00059A  D008               	goto	l7978
  8445  00059C                     l1420:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;eusart.c: 1182: Option_Multitas = 1;
  8449  00059C  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8450  00059E  D004               	goto	L1
  8451  0005A0                     l1422:
  8452                           
  8453                           ; BSR set to: 0
  8454                           ;eusart.c: 1186: Option_Multitas = 0;
  8455  0005A0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8456                           
  8457                           ;eusart.c: 1187: Option_Pailleux = 1;
  8458  0005A2  8A4F               	bsf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8459                           
  8460                           ;eusart.c: 1188: break;
  8461  0005A4  D017               	goto	l7980
  8462  0005A6                     l1423:
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;eusart.c: 1192: Option_Multitas = 0;
  8466  0005A6  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8467  0005A8                     L1:
  8468                           
  8469                           ;eusart.c: 1193: Option_Pailleux = 0;
  8470  0005A8  9A4F               	bcf	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
  8471                           
  8472                           ;eusart.c: 1194: }
  8473  0005AA  D014               	goto	l7980
  8474  0005AC                     l7978:
  8475                           
  8476                           ; BSR set to: 0
  8477  0005AC  0ED0               	movlw	208
  8478  0005AE  6FFA               	movwf	??_EUSART1_RX_T3_LOCAL& (0+255),b
  8479  0005B0  69FB               	setf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),b
  8480  0005B2  0102               	movlb	2	; () banked
  8481  0005B4  5185               	movf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8482  0005B6  0100               	movlb	0	; () banked
  8483  0005B8  6FFC               	movwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),b
  8484  0005BA  6BFD               	clrf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),b
  8485  0005BC  51FA               	movf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8486  0005BE  27FC               	addwf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),f,b
  8487  0005C0  51FB               	movf	(??_EUSART1_RX_T3_LOCAL+1)& (0+255),w,b
  8488  0005C2  23FD               	addwfc	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),f,b
  8489                           
  8490                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8491                           ; Switch size 1, requested type "speed"
  8492                           ; Number of cases is 1, Range of values is 0 to 0
  8493                           ; switch strategies available:
  8494                           ; Name         Instructions Cycles
  8495                           ; simple_byte            4     3 (average)
  8496                           ;	Chosen strategy is simple_byte
  8497  0005C4  51FD               	movf	(??_EUSART1_RX_T3_LOCAL+3)& (0+255),w,b
  8498  0005C6  E1EF               	bnz	l1423
  8499                           
  8500                           ; BSR set to: 0
  8501                           ; Switch size 1, requested type "speed"
  8502                           ; Number of cases is 2, Range of values is 1 to 2
  8503                           ; switch strategies available:
  8504                           ; Name         Instructions Cycles
  8505                           ; simple_byte            7     4 (average)
  8506                           ;	Chosen strategy is simple_byte
  8507  0005C8  51FC               	movf	(??_EUSART1_RX_T3_LOCAL+2)& (0+255),w,b
  8508  0005CA  0A01               	xorlw	1	; case 1
  8509  0005CC  E0E7               	bz	l1420
  8510  0005CE  0A03               	xorlw	3	; case 2
  8511  0005D0  E0E7               	bz	l1422
  8512  0005D2  D7E9               	goto	l1423
  8513  0005D4                     l7980:
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;eusart.c: 1198: if (E == (0x30 + 1)) {
  8517  0005D4  0E31               	movlw	49
  8518  0005D6  0102               	movlb	2	; () banked
  8519  0005D8  1985               	xorwf	EUSART1_RX_T3_LOCAL@E& (0+255),w,b
  8520  0005DA  E102               	bnz	l1424
  8521                           
  8522                           ; BSR set to: 2
  8523                           ;eusart.c: 1200: Option_Multitas = 1;
  8524  0005DC  8C4F               	bsf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8525                           
  8526                           ;eusart.c: 1202: } else {
  8527  0005DE  D001               	goto	l1425
  8528  0005E0                     l1424:
  8529                           
  8530                           ; BSR set to: 2
  8531                           ;eusart.c: 1203: Option_Multitas = 0;
  8532  0005E0  9C4F               	bcf	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
  8533  0005E2                     l1425:
  8534                           
  8535                           ; BSR set to: 2
  8536                           ;eusart.c: 1204: }
  8537                           ;eusart.c: 1211: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8538  0005E2  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8539                           
  8540                           ;eusart.c: 1212: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8541  0005E6  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8542                           
  8543                           ; BSR set to: 2
  8544                           ;eusart.c: 1214: P4_busy = 1;
  8545  0005EA  0E01               	movlw	1
  8546  0005EC  0100               	movlb	0	; () banked
  8547  0005EE  6FAC               	movwf	_P4_busy& (0+255),b
  8548                           
  8549                           ;eusart.c: 1215: switch (direction) {
  8550  0005F0  D018               	goto	l8012
  8551  0005F2                     l7986:
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;eusart.c: 1218: if (Etat == 0) {
  8555  0005F2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8556  0005F4  E101               	bnz	l7990
  8557  0005F6  D0B7               	goto	l8096
  8558  0005F8                     l7990:
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;eusart.c: 1223: if (Etat != 2) {
  8562  0005F8  0E02               	movlw	2
  8563  0005FA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8564  0005FC  B4D8               	btfsc	status,2,c
  8565  0005FE  0012               	return	
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;eusart.c: 1224: Coupe_Moteur();
  8569  000600  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  8570                           
  8571                           ;eusart.c: 1225: delay_1s();
  8572  000604  EC48  F011         	call	_delay_1s	;wreg free
  8573  000608  D0AE               	goto	l8096
  8574  00060A                     l7998:
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;eusart.c: 1233: if (Etat == 0) {
  8578  00060A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8579  00060C  E101               	bnz	l8002
  8580  00060E  D0AF               	goto	l8102
  8581  000610                     l8002:
  8582                           
  8583                           ; BSR set to: 0
  8584                           ;eusart.c: 1236: if (Etat != 3) {
  8585  000610  0E03               	movlw	3
  8586  000612  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8587  000614  B4D8               	btfsc	status,2,c
  8588  000616  0012               	return	
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;eusart.c: 1237: Coupe_Moteur();
  8592  000618  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  8593                           
  8594                           ;eusart.c: 1238: delay_1s();
  8595  00061C  EC48  F011         	call	_delay_1s	;wreg free
  8596  000620  D0A6               	goto	l8102
  8597  000622                     l8012:
  8598                           
  8599                           ; BSR set to: 0
  8600  000622  518F               	movf	_direction& (0+255),w,b	;volatile
  8601                           
  8602                           ; Switch size 1, requested type "speed"
  8603                           ; Number of cases is 2, Range of values is 0 to 1
  8604                           ; switch strategies available:
  8605                           ; Name         Instructions Cycles
  8606                           ; simple_byte            7     4 (average)
  8607                           ;	Chosen strategy is simple_byte
  8608  000624  E0F2               	bz	l7998
  8609  000626  0A01               	xorlw	1	; case 1
  8610  000628  A4D8               	btfss	status,2,c
  8611  00062A  0012               	return	
  8612  00062C  D7E2               	goto	l7986
  8613  00062E                     l1438:
  8614                           
  8615                           ;eusart.c: 1260: if (PORTCbits.RC3 == 1) {
  8616  00062E  A682               	btfss	3970,3,c	;volatile
  8617  000630  D076               	goto	l8086
  8618                           
  8619                           ;eusart.c: 1262: direction = (unsigned char) (Da - 0x30);
  8620  000632  0102               	movlb	2	; () banked
  8621  000634  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8622  000636  0FD0               	addlw	208
  8623  000638  0100               	movlb	0	; () banked
  8624  00063A  6F8F               	movwf	_direction& (0+255),b	;volatile
  8625                           
  8626                           ;eusart.c: 1263: type_consigne = (unsigned char) (A - 0x30);
  8627  00063C  0102               	movlb	2	; () banked
  8628  00063E  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8629  000640  0FD0               	addlw	208
  8630  000642  0100               	movlb	0	; () banked
  8631  000644  6F91               	movwf	_type_consigne& (0+255),b
  8632                           
  8633                           ; BSR set to: 0
  8634                           ;eusart.c: 1264: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8635  000646  0102               	movlb	2	; () banked
  8636  000648  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8637  00064A  0D0A               	mullw	10
  8638  00064C  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8639  000650  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8640  000652  0D64               	mullw	100
  8641  000654  50F3               	movf	prodl,w,c
  8642  000656  0100               	movlb	0	; () banked
  8643  000658  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8644  00065A  0102               	movlb	2	; () banked
  8645  00065C  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8646  00065E  0F30               	addlw	48
  8647  000660  0100               	movlb	0	; () banked
  8648  000662  6F90               	movwf	_mouvement_option& (0+255),b
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;eusart.c: 1269: P4_busy = 1;
  8652  000664  0E01               	movlw	1
  8653  000666  6FAC               	movwf	_P4_busy& (0+255),b
  8654                           
  8655                           ;eusart.c: 1270: switch (direction) {
  8656  000668  D018               	goto	l8048
  8657  00066A                     l8022:
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;eusart.c: 1274: if (Etat == 0) {
  8661  00066A  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8662  00066C  E101               	bnz	l8026
  8663  00066E  D088               	goto	l8108
  8664  000670                     l8026:
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;eusart.c: 1277: if (Etat != 5) {
  8668  000670  0E05               	movlw	5
  8669  000672  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8670  000674  B4D8               	btfsc	status,2,c
  8671  000676  0012               	return	
  8672                           
  8673                           ; BSR set to: 0
  8674                           ;eusart.c: 1278: Coupe_Moteur();
  8675  000678  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  8676                           
  8677                           ;eusart.c: 1279: delay_1s();
  8678  00067C  EC48  F011         	call	_delay_1s	;wreg free
  8679  000680  D07F               	goto	l8108
  8680  000682                     l8034:
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;eusart.c: 1299: if (Etat == 0) {
  8684  000682  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8685  000684  E101               	bnz	l8038
  8686  000686  D07F               	goto	l8110
  8687  000688                     l8038:
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;eusart.c: 1302: if (Etat != 4) {
  8691  000688  0E04               	movlw	4
  8692  00068A  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8693  00068C  B4D8               	btfsc	status,2,c
  8694  00068E  0012               	return	
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;eusart.c: 1303: Coupe_Moteur();
  8698  000690  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  8699                           
  8700                           ;eusart.c: 1304: delay_1s();
  8701  000694  EC48  F011         	call	_delay_1s	;wreg free
  8702  000698  D076               	goto	l8110
  8703  00069A                     l8048:
  8704                           
  8705                           ; BSR set to: 0
  8706  00069A  518F               	movf	_direction& (0+255),w,b	;volatile
  8707                           
  8708                           ; Switch size 1, requested type "speed"
  8709                           ; Number of cases is 2, Range of values is 0 to 1
  8710                           ; switch strategies available:
  8711                           ; Name         Instructions Cycles
  8712                           ; simple_byte            7     4 (average)
  8713                           ;	Chosen strategy is simple_byte
  8714  00069C  E0F2               	bz	l8034
  8715  00069E  0A01               	xorlw	1	; case 1
  8716  0006A0  A4D8               	btfss	status,2,c
  8717  0006A2  0012               	return	
  8718  0006A4  D7E2               	goto	l8022
  8719  0006A6                     l1452:
  8720                           
  8721                           ;eusart.c: 1331: if (PORTCbits.RC3 == 1) {
  8722  0006A6  A682               	btfss	3970,3,c	;volatile
  8723  0006A8  D03A               	goto	l8086
  8724                           
  8725                           ;eusart.c: 1333: direction = (unsigned char) (Da - 0x30);
  8726  0006AA  0102               	movlb	2	; () banked
  8727  0006AC  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8728  0006AE  0FD0               	addlw	208
  8729  0006B0  0100               	movlb	0	; () banked
  8730  0006B2  6F8F               	movwf	_direction& (0+255),b	;volatile
  8731                           
  8732                           ;eusart.c: 1334: type_consigne = (unsigned char) (A - 0x30);
  8733  0006B4  0102               	movlb	2	; () banked
  8734  0006B6  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8735  0006B8  0FD0               	addlw	208
  8736  0006BA  0100               	movlb	0	; () banked
  8737  0006BC  6F91               	movwf	_type_consigne& (0+255),b
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;eusart.c: 1335: mouvement_option = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8741  0006BE  0102               	movlb	2	; () banked
  8742  0006C0  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8743  0006C2  0D0A               	mullw	10
  8744  0006C4  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8745  0006C8  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8746  0006CA  0D64               	mullw	100
  8747  0006CC  50F3               	movf	prodl,w,c
  8748  0006CE  0100               	movlb	0	; () banked
  8749  0006D0  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8750  0006D2  0102               	movlb	2	; () banked
  8751  0006D4  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8752  0006D6  0F30               	addlw	48
  8753  0006D8  0100               	movlb	0	; () banked
  8754  0006DA  6F90               	movwf	_mouvement_option& (0+255),b
  8755                           
  8756                           ; BSR set to: 0
  8757                           ;eusart.c: 1341: P4_busy = 1;
  8758  0006DC  0E01               	movlw	1
  8759  0006DE  6FAC               	movwf	_P4_busy& (0+255),b
  8760                           
  8761                           ;eusart.c: 1342: switch (direction) {
  8762  0006E0  D018               	goto	l8084
  8763  0006E2                     l8058:
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;eusart.c: 1348: if (Etat == 0) {
  8767  0006E2  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8768  0006E4  E101               	bnz	l8062
  8769  0006E6  D058               	goto	l8116
  8770  0006E8                     l8062:
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;eusart.c: 1351: if (Etat != 9) {
  8774  0006E8  0E09               	movlw	9
  8775  0006EA  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8776  0006EC  B4D8               	btfsc	status,2,c
  8777  0006EE  0012               	return	
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;eusart.c: 1352: Coupe_Moteur();
  8781  0006F0  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  8782                           
  8783                           ;eusart.c: 1353: delay_1s();
  8784  0006F4  EC48  F011         	call	_delay_1s	;wreg free
  8785  0006F8  D04F               	goto	l8116
  8786  0006FA                     l8070:
  8787                           
  8788                           ; BSR set to: 0
  8789                           ;eusart.c: 1371: if (Etat == 0) {
  8790  0006FA  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8791  0006FC  E101               	bnz	l8074
  8792  0006FE  D04F               	goto	l8118
  8793  000700                     l8074:
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;eusart.c: 1374: if (Etat != 8) {
  8797  000700  0E08               	movlw	8
  8798  000702  19AA               	xorwf	_Etat& (0+255),w,b	;volatile
  8799  000704  B4D8               	btfsc	status,2,c
  8800  000706  0012               	return	
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;eusart.c: 1375: Coupe_Moteur();
  8804  000708  ECCE  F012         	call	_Coupe_Moteur	;wreg free
  8805                           
  8806                           ;eusart.c: 1376: delay_1s();
  8807  00070C  EC48  F011         	call	_delay_1s	;wreg free
  8808  000710  D046               	goto	l8118
  8809  000712                     l8084:
  8810                           
  8811                           ; BSR set to: 0
  8812  000712  518F               	movf	_direction& (0+255),w,b	;volatile
  8813                           
  8814                           ; Switch size 1, requested type "speed"
  8815                           ; Number of cases is 2, Range of values is 0 to 1
  8816                           ; switch strategies available:
  8817                           ; Name         Instructions Cycles
  8818                           ; simple_byte            7     4 (average)
  8819                           ;	Chosen strategy is simple_byte
  8820  000714  E0F2               	bz	l8070
  8821  000716  0A01               	xorlw	1	; case 1
  8822  000718  A4D8               	btfss	status,2,c
  8823  00071A  0012               	return	
  8824  00071C  D7E2               	goto	l8058
  8825  00071E                     l8086:
  8826                           
  8827                           ;eusart.c: 1392: Alarme_On(4);
  8828  00071E  0E04               	movlw	4
  8829  000720  EF30  F013         	goto	_Alarme_On
  8830  000724                     l8088:
  8831                           
  8832                           ;eusart.c: 1405: moteur_indice = (unsigned char) (Da - 0x30);
  8833  000724  0102               	movlb	2	; () banked
  8834  000726  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  8835  000728  0FD0               	addlw	208
  8836  00072A  0100               	movlb	0	; () banked
  8837  00072C  6F99               	movwf	_moteur_indice& (0+255),b	;volatile
  8838                           
  8839                           ;eusart.c: 1406: direction = (unsigned char) (A - 0x30);
  8840  00072E  0102               	movlb	2	; () banked
  8841  000730  5181               	movf	EUSART1_RX_T3_LOCAL@A& (0+255),w,b
  8842  000732  0FD0               	addlw	208
  8843  000734  0100               	movlb	0	; () banked
  8844  000736  6F8F               	movwf	_direction& (0+255),b	;volatile
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;eusart.c: 1408: nb_Pion_Objectif = (unsigned char) ((B - 0x30)*100 + (C - 0x30)*10 + (D
      +                           - 0x30)*1);
  8848  000738  0102               	movlb	2	; () banked
  8849  00073A  5183               	movf	EUSART1_RX_T3_LOCAL@C& (0+255),w,b
  8850  00073C  0D0A               	mullw	10
  8851  00073E  CFF3 F0FA          	movff	prodl,??_EUSART1_RX_T3_LOCAL
  8852  000742  5182               	movf	EUSART1_RX_T3_LOCAL@B& (0+255),w,b
  8853  000744  0D64               	mullw	100
  8854  000746  50F3               	movf	prodl,w,c
  8855  000748  0100               	movlb	0	; () banked
  8856  00074A  25FA               	addwf	??_EUSART1_RX_T3_LOCAL& (0+255),w,b
  8857  00074C  0102               	movlb	2	; () banked
  8858  00074E  2584               	addwf	EUSART1_RX_T3_LOCAL@D& (0+255),w,b
  8859  000750  0F30               	addlw	48
  8860  000752  0100               	movlb	0	; () banked
  8861  000754  6FA0               	movwf	_nb_Pion_Objectif& (0+255),b
  8862                           
  8863                           ;eusart.c: 1410: switch (moteur_indice) {
  8864  000756  D02C               	goto	l8126
  8865  000758                     l1468:
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;eusart.c: 1412: Alarme = 0;
  8869  000758  6BA9               	clrf	_Alarme& (0+255),b	;volatile
  8870                           
  8871                           ;eusart.c: 1413: Capteur_Capot_Nb_Evenement = Capteur_Capot_Nb_Evenement_Autoriser;
  8872  00075A  C04A  F09F         	movff	_Capteur_Capot_Nb_Evenement_Autoriser,_Capteur_Capot_Nb_Evenement
  8873                           
  8874                           ;eusart.c: 1414: Patinage_Nb_Essai = Patinage_Nb_Essai_Autoriser;
  8875  00075E  C09C  F09D         	movff	_Patinage_Nb_Essai_Autoriser,_Patinage_Nb_Essai
  8876                           
  8877                           ;eusart.c: 1416: switch (direction) {
  8878  000762  D008               	goto	l8106
  8879  000764                     l8092:
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;eusart.c: 1419: if (Etat == 0) {
  8883  000764  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8884  000766                     l8096:
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;eusart.c: 1425: Etat_Update(2);
  8888  000766  0E02               	movlw	2
  8889  000768  EF20  F012         	goto	_Etat_Update
  8890  00076C                     l8098:
  8891                           
  8892                           ; BSR set to: 0
  8893                           ;eusart.c: 1430: if (Etat == 0) {
  8894  00076C  51AA               	movf	_Etat& (0+255),w,b	;volatile
  8895  00076E                     l8102:
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;eusart.c: 1434: Etat_Update(3);
  8899  00076E  0E03               	movlw	3
  8900  000770  EF20  F012         	goto	_Etat_Update
  8901  000774                     l8106:
  8902                           
  8903                           ; BSR set to: 0
  8904  000774  518F               	movf	_direction& (0+255),w,b	;volatile
  8905                           
  8906                           ; Switch size 1, requested type "speed"
  8907                           ; Number of cases is 2, Range of values is 0 to 1
  8908                           ; switch strategies available:
  8909                           ; Name         Instructions Cycles
  8910                           ; simple_byte            7     4 (average)
  8911                           ;	Chosen strategy is simple_byte
  8912  000776  E0FA               	bz	l8098
  8913  000778  0A01               	xorlw	1	; case 1
  8914  00077A  A4D8               	btfss	status,2,c
  8915  00077C  0012               	return	
  8916  00077E  D7F2               	goto	l8092
  8917  000780                     l8108:
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;eusart.c: 1451: Etat_Update(5);
  8921  000780  0E05               	movlw	5
  8922  000782  EF20  F012         	goto	_Etat_Update
  8923  000786                     l8110:
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;eusart.c: 1456: Etat_Update(4);
  8927  000786  0E04               	movlw	4
  8928  000788  EF20  F012         	goto	_Etat_Update
  8929  00078C                     l8114:
  8930                           
  8931                           ; BSR set to: 0
  8932  00078C  518F               	movf	_direction& (0+255),w,b	;volatile
  8933                           
  8934                           ; Switch size 1, requested type "speed"
  8935                           ; Number of cases is 2, Range of values is 0 to 1
  8936                           ; switch strategies available:
  8937                           ; Name         Instructions Cycles
  8938                           ; simple_byte            7     4 (average)
  8939                           ;	Chosen strategy is simple_byte
  8940  00078E  E0FB               	bz	l8110
  8941  000790  0A01               	xorlw	1	; case 1
  8942  000792  A4D8               	btfss	status,2,c
  8943  000794  0012               	return	
  8944  000796  D7F4               	goto	l8108
  8945  000798                     l8116:
  8946                           
  8947                           ; BSR set to: 0
  8948                           ;eusart.c: 1473: Etat_Update(9);
  8949  000798  0E09               	movlw	9
  8950  00079A  EF20  F012         	goto	_Etat_Update
  8951  00079E                     l8118:
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;eusart.c: 1478: Etat_Update(8);
  8955  00079E  0E08               	movlw	8
  8956  0007A0  EF20  F012         	goto	_Etat_Update
  8957  0007A4                     l8122:
  8958                           
  8959                           ; BSR set to: 0
  8960  0007A4  518F               	movf	_direction& (0+255),w,b	;volatile
  8961                           
  8962                           ; Switch size 1, requested type "speed"
  8963                           ; Number of cases is 2, Range of values is 0 to 1
  8964                           ; switch strategies available:
  8965                           ; Name         Instructions Cycles
  8966                           ; simple_byte            7     4 (average)
  8967                           ;	Chosen strategy is simple_byte
  8968  0007A6  E0FB               	bz	l8118
  8969  0007A8  0A01               	xorlw	1	; case 1
  8970  0007AA  A4D8               	btfss	status,2,c
  8971  0007AC  0012               	return	
  8972  0007AE  D7F4               	goto	l8116
  8973  0007B0                     l8126:
  8974                           
  8975                           ; BSR set to: 0
  8976  0007B0  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
  8977                           
  8978                           ; Switch size 1, requested type "speed"
  8979                           ; Number of cases is 3, Range of values is 1 to 3
  8980                           ; switch strategies available:
  8981                           ; Name         Instructions Cycles
  8982                           ; simple_byte           10     6 (average)
  8983                           ;	Chosen strategy is simple_byte
  8984  0007B2  0A01               	xorlw	1	; case 1
  8985  0007B4  E0D1               	bz	l1468
  8986  0007B6  0A03               	xorlw	3	; case 2
  8987  0007B8  E0E9               	bz	l8114
  8988  0007BA  0A01               	xorlw	1	; case 3
  8989  0007BC  A4D8               	btfss	status,2,c
  8990  0007BE  0012               	return	
  8991  0007C0  D7F1               	goto	l8122
  8992  0007C2                     l1492:
  8993                           
  8994                           ;eusart.c: 1505: LATEbits.LATE2 = Da;
  8995  0007C2  0102               	movlb	2	; () banked
  8996  0007C4  B180               	btfsc	EUSART1_RX_T3_LOCAL@Da& (0+255),0,b
  8997  0007C6  D002               	bra	u6295
  8998  0007C8  948D               	bcf	3981,2,c	;volatile
  8999  0007CA  D001               	bra	u6296
  9000  0007CC                     u6295:
  9001  0007CC  848D               	bsf	3981,2,c	;volatile
  9002  0007CE                     u6296:
  9003                           
  9004                           ;eusart.c: 1507: break;
  9005  0007CE  0012               	return	
  9006  0007D0                     l8128:
  9007                           
  9008                           ;eusart.c: 1510: Etat_Update(0);
  9009  0007D0  0E00               	movlw	0
  9010  0007D2  EC20  F012         	call	_Etat_Update
  9011  0007D6  D6C3               	goto	l7970
  9012  0007D8                     l1494:
  9013                           
  9014                           ;eusart.c: 1520: nb_s_fonctionnement = Da;
  9015  0007D8  C280  F04B         	movff	EUSART1_RX_T3_LOCAL@Da,_nb_s_fonctionnement	;volatile
  9016                           
  9017                           ;eusart.c: 1522: break;
  9018  0007DC  0012               	return	
  9019  0007DE                     l8132:
  9020                           
  9021                           ;eusart.c: 1528: IRQ_Execution(Da);
  9022  0007DE  0102               	movlb	2	; () banked
  9023  0007E0  5180               	movf	EUSART1_RX_T3_LOCAL@Da& (0+255),w,b
  9024  0007E2  EF65  F00F         	goto	_IRQ_Execution
  9025  0007E6                     l8134:
  9026                           
  9027                           ;eusart.c: 1536: Etat_Update(0);
  9028  0007E6  0E00               	movlw	0
  9029  0007E8  EF20  F012         	goto	_Etat_Update
  9030  0007EC                     l8136:
  9031                           
  9032                           ;eusart.c: 1644: if (eusart1RxBuffer[0] != 0x0d) {
  9033  0007EC  0E0D               	movlw	13
  9034  0007EE  0102               	movlb	2	; () banked
  9035  0007F0  1940               	xorwf	_eusart1RxBuffer& (0+255),w,b	;volatile
  9036  0007F2  A4D8               	btfss	status,2,c
  9037                           
  9038                           ; BSR set to: 2
  9039                           ;eusart.c: 1645: LATCbits.LATC2 = 1;
  9040  0007F4  848B               	bsf	3979,2,c	;volatile
  9041  0007F6  0012               	return	
  9042  0007F8                     l8142:
  9043  0007F8  5040               	movf	EUSART1_RX_T3_LOCAL@Ad,w,c
  9044                           
  9045                           ; Switch size 1, requested type "speed"
  9046                           ; Number of cases is 38, Range of values is 48 to 118
  9047                           ; switch strategies available:
  9048                           ; Name         Instructions Cycles
  9049                           ; simple_byte          115    58 (average)
  9050                           ;	Chosen strategy is simple_byte
  9051  0007FA  0A30               	xorlw	48	; case 48
  9052  0007FC  E0F4               	bz	l8134
  9053  0007FE  0A01               	xorlw	1	; case 49
  9054  000800  B4D8               	btfsc	status,2,c
  9055  000802  0012               	return	
  9056  000804  0A03               	xorlw	3	; case 50
  9057  000806  B4D8               	btfsc	status,2,c
  9058  000808  0012               	return	
  9059  00080A  0A01               	xorlw	1	; case 51
  9060  00080C  B4D8               	btfsc	status,2,c
  9061  00080E  0012               	return	
  9062  000810  0A07               	xorlw	7	; case 52
  9063  000812  B4D8               	btfsc	status,2,c
  9064  000814  0012               	return	
  9065  000816  0A01               	xorlw	1	; case 53
  9066  000818  B4D8               	btfsc	status,2,c
  9067  00081A  0012               	return	
  9068  00081C  0A03               	xorlw	3	; case 54
  9069  00081E  B4D8               	btfsc	status,2,c
  9070  000820  0012               	return	
  9071  000822  0A01               	xorlw	1	; case 55
  9072  000824  B4D8               	btfsc	status,2,c
  9073  000826  0012               	return	
  9074  000828  0A76               	xorlw	118	; case 65
  9075  00082A  E102 EFCE  F012    	bz	_Coupe_Moteur
  9076  000830  0A03               	xorlw	3	; case 66
  9077  000832  E101 D738          	bz	l1452
  9078  000836  0A06               	xorlw	6	; case 68
  9079  000838  B4D8               	btfsc	status,2,c
  9080  00083A  0012               	return	
  9081  00083C  0A01               	xorlw	1	; case 69
  9082  00083E  E101 D4E5          	bz	l7888
  9083  000842  0A03               	xorlw	3	; case 70
  9084  000844  B4D8               	btfsc	status,2,c
  9085  000846  0012               	return	
  9086  000848  0A0E               	xorlw	14	; case 72
  9087  00084A  E101 D685          	bz	l7968
  9088  00084E  0A01               	xorlw	1	; case 73
  9089  000850  E0C6               	bz	l8132
  9090  000852  0A05               	xorlw	5	; case 76
  9091  000854  E101 D43F          	bz	l7852
  9092  000858  0A01               	xorlw	1	; case 77
  9093  00085A  E101 D763          	bz	l8088
  9094  00085E  0A1D               	xorlw	29	; case 80
  9095  000860  E101 D5B8          	bz	l7940
  9096  000864  0A02               	xorlw	2	; case 82
  9097  000866  E0AD               	bz	l1492
  9098  000868  0A01               	xorlw	1	; case 83
  9099  00086A  E101 D62C          	bz	l7962
  9100  00086E  0A07               	xorlw	7	; case 84
  9101  000870  E101 D61A          	bz	l7956
  9102  000874  0A01               	xorlw	1	; case 85
  9103  000876  B4D8               	btfsc	status,2,c
  9104  000878  0012               	return	
  9105  00087A  0A03               	xorlw	3	; case 86
  9106  00087C  E101 D5FC          	bz	l7954
  9107  000880  0A01               	xorlw	1	; case 87
  9108  000882  E101 D666          	bz	l7966
  9109  000886  0A0F               	xorlw	15	; case 88
  9110  000888  E101 D66C          	bz	l1417
  9111  00088C  0A02               	xorlw	2	; case 90
  9112  00088E  E101 D6CE          	bz	l1438
  9113  000892  0A38               	xorlw	56	; case 98
  9114  000894  E101 D4AE          	bz	l7884
  9115  000898  0A01               	xorlw	1	; case 99
  9116  00089A  E101 D4A5          	bz	l7882
  9117  00089E  0A06               	xorlw	6	; case 101
  9118  0008A0  E101 D4C4          	bz	l7892
  9119  0008A4  0A03               	xorlw	3	; case 102
  9120  0008A6  E098               	bz	l1494
  9121  0008A8  0A0F               	xorlw	15	; case 105
  9122  0008AA  E101 D421          	bz	l7854
  9123  0008AE  0A05               	xorlw	5	; case 108
  9124  0008B0  E101 D463          	bz	l1374
  9125  0008B4  0A01               	xorlw	1	; case 109
  9126  0008B6  E101 D4DD          	bz	l7900
  9127  0008BA  0A1D               	xorlw	29	; case 112
  9128  0008BC  E101 D427          	bz	l7858
  9129  0008C0  0A01               	xorlw	1	; case 113
  9130  0008C2  E101 D47F          	bz	l7878
  9131  0008C6  0A03               	xorlw	3	; case 114
  9132  0008C8  E083               	bz	l8128
  9133  0008CA  0A01               	xorlw	1	; case 115
  9134  0008CC  E101 D43F          	bz	l7862
  9135  0008D0  0A05               	xorlw	5	; case 118
  9136  0008D2  E101 D5EC          	bz	l7958
  9137  0008D6  D78A               	goto	l8136
  9138  0008D8                     __end_of_EUSART1_RX_T3_LOCAL:
  9139                           	opt stack 0
  9140                           tblptru	equ	0xFF8
  9141                           prodh	equ	0xFF4
  9142                           prodl	equ	0xFF3
  9143                           intcon	equ	0xFF2
  9144                           intcon2	equ	0xFF1
  9145                           intcon3	equ	0xFF0
  9146                           postinc0	equ	0xFEE
  9147                           wreg	equ	0xFE8
  9148                           indf1	equ	0xFE7
  9149                           postdec1	equ	0xFE5
  9150                           fsr1h	equ	0xFE2
  9151                           fsr1l	equ	0xFE1
  9152                           indf2	equ	0xFDF
  9153                           fsr2h	equ	0xFDA
  9154                           fsr2l	equ	0xFD9
  9155                           status	equ	0xFD8
  9156                           
  9157 ;; *************** function _sprintf *****************
  9158 ;; Defined at:
  9159 ;;		line 492 in file "/opt/microchip/xc8/v1.42/sources/common/doprnt.c"
  9160 ;; Parameters:    Size  Location     Type
  9161 ;;  sp              1   26[COMRAM] PTR unsigned char 
  9162 ;;		 -> UART_TX_TEXT(64), 
  9163 ;;  f               2   27[COMRAM] PTR const unsigned char 
  9164 ;;		 -> STR_10(84), STR_9(3), STR_8(31), STR_7(49), 
  9165 ;;		 -> STR_6(3), STR_5(5), STR_4(33), STR_3(13), 
  9166 ;;		 -> STR_2(95), STR_1(3), 
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;  idx             1    4[BANK0 ] unsigned char 
  9169 ;;  tmpval          4    0        struct .
  9170 ;;  cp              3    0        PTR const unsigned char 
  9171 ;;  width           2   10[BANK0 ] int 
  9172 ;;  val             2    7[BANK0 ] unsigned int 
  9173 ;;  len             2    0        unsigned int 
  9174 ;;  c               1   12[BANK0 ] char 
  9175 ;;  flag            1    9[BANK0 ] unsigned char 
  9176 ;;  prec            1    6[BANK0 ] char 
  9177 ;;  ap              1    5[BANK0 ] PTR void [1]
  9178 ;;		 -> ?_sprintf(2), 
  9179 ;; Return value:  Size  Location     Type
  9180 ;;                  2   26[COMRAM] int 
  9181 ;; Registers used:
  9182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9183 ;; Tracked objects:
  9184 ;;		On entry : 0/1
  9185 ;;		On exit  : 3F/0
  9186 ;;		Unchanged: 0/0
  9187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9188 ;;      Params:        37       0       0       0
  9189 ;;      Locals:         0       9       0       0
  9190 ;;      Temps:          0       4       0       0
  9191 ;;      Totals:        37      13       0       0
  9192 ;;Total ram usage:       50 bytes
  9193 ;; Hardware stack levels used:    1
  9194 ;; Hardware stack levels required when called:   11
  9195 ;; This function calls:
  9196 ;;		___lwdiv
  9197 ;;		___lwmod
  9198 ;;		___wmul
  9199 ;;		_isdigit
  9200 ;; This function is called by:
  9201 ;;		_EUSART1_RX_T3_LOCAL
  9202 ;; This function uses a non-reentrant model
  9203 ;;
  9204                           
  9205                           	psect	text48
  9206  0008D8                     __ptext48:
  9207                           	opt stack 0
  9208  0008D8                     _sprintf:
  9209                           	opt stack 15
  9210                           
  9211                           ;doprnt.c: 494: va_list ap;
  9212                           ;doprnt.c: 499: signed char c;
  9213                           ;doprnt.c: 501: int width;
  9214                           ;doprnt.c: 506: signed char prec;
  9215                           ;doprnt.c: 508: unsigned char flag;
  9216                           ;doprnt.c: 523: union {
  9217                           ;doprnt.c: 524: unsigned long vd;
  9218                           ;doprnt.c: 525: double integ;
  9219                           ;doprnt.c: 526: } tmpval;
  9220                           ;doprnt.c: 528: unsigned int val;
  9221                           ;doprnt.c: 529: unsigned len;
  9222                           ;doprnt.c: 530: const char * cp;
  9223                           ;doprnt.c: 533: *ap = __va_start();
  9224                           
  9225                           ;incstack = 0
  9226  0008D8  0E1E               	movlw	low (?_sprintf+3)
  9227  0008DA  0100               	movlb	0	; () banked
  9228  0008DC  6FF2               	movwf	sprintf@ap& (0+255),b
  9229                           
  9230                           ;doprnt.c: 536: while(c = *f++) {
  9231  0008DE  D15E               	goto	l7842
  9232  0008E0                     l7710:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;doprnt.c: 538: if(c != '%')
  9236  0008E0  0E25               	movlw	37
  9237  0008E2  19F9               	xorwf	sprintf@c& (0+255),w,b
  9238  0008E4  E007               	bz	l1708
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;doprnt.c: 540: {
  9242                           ;doprnt.c: 541: ((*sp++ = (c)));
  9243  0008E6  501B               	movf	sprintf@sp,w,c
  9244  0008E8  6ED9               	movwf	fsr2l,c
  9245  0008EA  6ADA               	clrf	fsr2h,c
  9246  0008EC  C0F9  FFDF         	movff	sprintf@c,indf2
  9247                           
  9248                           ; BSR set to: 0
  9249  0008F0  2A1B               	incf	sprintf@sp,f,c
  9250                           
  9251                           ;doprnt.c: 542: continue;
  9252  0008F2  D154               	goto	l7842
  9253  0008F4                     l1708:
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;doprnt.c: 543: }
  9257                           ;doprnt.c: 546: width = 0;
  9258  0008F4  6BF7               	clrf	sprintf@width& (0+255),b
  9259  0008F6  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9260                           
  9261                           ;doprnt.c: 548: flag = 0;
  9262  0008F8  6BF6               	clrf	sprintf@flag& (0+255),b
  9263  0008FA  D003               	goto	l7720
  9264  0008FC                     l7716:
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;doprnt.c: 580: flag |= 0x04;
  9268  0008FC  85F6               	bsf	sprintf@flag& (0+255),2,b
  9269                           
  9270                           ;doprnt.c: 581: f++;
  9271  0008FE  4A1C               	infsnz	sprintf@f,f,c
  9272  000900  2A1D               	incf	sprintf@f+1,f,c
  9273  000902                     l7720:
  9274                           
  9275                           ; BSR set to: 0
  9276  000902  C01C  FFF6         	movff	sprintf@f,tblptrl
  9277  000906  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9278  00090A                     	if	0	;tblptru may be non-zero
  9279  00090A                     	endif
  9280  00090A                     	if	0	;tblptru may be non-zero
  9281  00090A                     	endif
  9282  00090A  0008               	tblrd		*
  9283  00090C  50F5               	movf	tablat,w,c
  9284                           
  9285                           ; Switch size 1, requested type "speed"
  9286                           ; Number of cases is 1, Range of values is 48 to 48
  9287                           ; switch strategies available:
  9288                           ; Name         Instructions Cycles
  9289                           ; simple_byte            4     3 (average)
  9290                           ;	Chosen strategy is simple_byte
  9291  00090E  0A30               	xorlw	48	; case 48
  9292  000910  E0F5               	bz	l7716
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9296  000912  C01C  FFF6         	movff	sprintf@f,tblptrl
  9297  000916  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9298  00091A                     	if	0	;tblptru may be non-zero
  9299  00091A                     	endif
  9300  00091A                     	if	0	;tblptru may be non-zero
  9301  00091A                     	endif
  9302  00091A  0008               	tblrd		*
  9303  00091C  50F5               	movf	tablat,w,c
  9304  00091E  EC5B  F012         	call	_isdigit
  9305  000922  E332               	bnc	l7738
  9306                           
  9307                           ;doprnt.c: 598: width = 0;
  9308  000924  0100               	movlb	0	; () banked
  9309  000926  6BF7               	clrf	sprintf@width& (0+255),b
  9310  000928  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9311  00092A                     l7726:
  9312                           
  9313                           ;doprnt.c: 600: width *= 10;
  9314  00092A  C0F7  F00F         	movff	sprintf@width,___wmul@multiplier
  9315  00092E  C0F8  F010         	movff	sprintf@width+1,___wmul@multiplier+1
  9316  000932  6A12               	clrf	___wmul@multiplicand+1,c
  9317  000934  0E0A               	movlw	10
  9318  000936  6E11               	movwf	___wmul@multiplicand,c
  9319  000938  ECA9  F011         	call	___wmul	;wreg free
  9320  00093C  C00F  F0F7         	movff	?___wmul,sprintf@width
  9321  000940  C010  F0F8         	movff	?___wmul+1,sprintf@width+1
  9322                           
  9323                           ;doprnt.c: 601: width += *f++ - '0';
  9324  000944  0ED0               	movlw	208
  9325  000946  0100               	movlb	0	; () banked
  9326  000948  6FED               	movwf	??_sprintf& (0+255),b
  9327  00094A  69EE               	setf	(??_sprintf+1)& (0+255),b
  9328  00094C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9329  000950  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9330  000954                     	if	0	;tblptru may be non-zero
  9331  000954                     	endif
  9332  000954                     	if	0	;tblptru may be non-zero
  9333  000954                     	endif
  9334  000954  0008               	tblrd		*
  9335  000956  50F5               	movf	tablat,w,c
  9336  000958  6FEF               	movwf	(??_sprintf+2)& (0+255),b
  9337  00095A  6BF0               	clrf	(??_sprintf+3)& (0+255),b
  9338  00095C  51ED               	movf	??_sprintf& (0+255),w,b
  9339  00095E  27EF               	addwf	(??_sprintf+2)& (0+255),f,b
  9340  000960  51EE               	movf	(??_sprintf+1)& (0+255),w,b
  9341  000962  23F0               	addwfc	(??_sprintf+3)& (0+255),f,b
  9342  000964  51EF               	movf	(??_sprintf+2)& (0+255),w,b
  9343  000966  27F7               	addwf	sprintf@width& (0+255),f,b
  9344  000968  51F0               	movf	(??_sprintf+3)& (0+255),w,b
  9345  00096A  23F8               	addwfc	(sprintf@width+1)& (0+255),f,b
  9346                           
  9347                           ; BSR set to: 0
  9348  00096C  4A1C               	infsnz	sprintf@f,f,c
  9349  00096E  2A1D               	incf	sprintf@f+1,f,c
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9353  000970  C01C  FFF6         	movff	sprintf@f,tblptrl
  9354  000974  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9355  000978                     	if	0	;tblptru may be non-zero
  9356  000978                     	endif
  9357  000978                     	if	0	;tblptru may be non-zero
  9358  000978                     	endif
  9359  000978  0008               	tblrd		*
  9360  00097A  50F5               	movf	tablat,w,c
  9361  00097C  EC5B  F012         	call	_isdigit
  9362  000980  E303               	bnc	l7738
  9363  000982  D7D3               	goto	l7726
  9364  000984                     l7734:
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;doprnt.c: 718: case 'x':
  9368                           ;doprnt.c: 721: flag |= 0x80;
  9369  000984  8FF6               	bsf	sprintf@flag& (0+255),7,b
  9370                           
  9371                           ;doprnt.c: 723: break;
  9372  000986  D016               	goto	l1723
  9373  000988                     l7738:
  9374  000988  C01C  FFF6         	movff	sprintf@f,tblptrl
  9375  00098C  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9376  000990  4A1C               	infsnz	sprintf@f,f,c
  9377  000992  2A1D               	incf	sprintf@f+1,f,c
  9378  000994                     	if	0	;tblptru may be non-zero
  9379  000994                     	endif
  9380  000994                     	if	0	;tblptru may be non-zero
  9381  000994                     	endif
  9382  000994  0008               	tblrd		*
  9383  000996  CFF5 F0F9          	movff	tablat,sprintf@c
  9384  00099A  0100               	movlb	0	; () banked
  9385  00099C  51F9               	movf	sprintf@c& (0+255),w,b
  9386                           
  9387                           ; Switch size 1, requested type "speed"
  9388                           ; Number of cases is 5, Range of values is 0 to 120
  9389                           ; switch strategies available:
  9390                           ; Name         Instructions Cycles
  9391                           ; simple_byte           16     9 (average)
  9392                           ;	Chosen strategy is simple_byte
  9393  00099E  E101 D109          	bz	l7844
  9394  0009A2  0A58               	xorlw	88	; case 88
  9395  0009A4  E0EF               	bz	l7734
  9396  0009A6  0A3C               	xorlw	60	; case 100
  9397  0009A8  E005               	bz	l1723
  9398  0009AA  0A0D               	xorlw	13	; case 105
  9399  0009AC  E003               	bz	l1723
  9400  0009AE  0A11               	xorlw	17	; case 120
  9401  0009B0  E0E9               	bz	l7734
  9402  0009B2  D0F4               	goto	l7842
  9403  0009B4                     l1723:
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9407  0009B4  BFF6               	btfsc	sprintf@flag& (0+255),7,b
  9408  0009B6  D012               	goto	l7750
  9409                           
  9410                           ; BSR set to: 0
  9411                           ;doprnt.c: 1253: {
  9412                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9413  0009B8  51F2               	movf	sprintf@ap& (0+255),w,b
  9414  0009BA  6ED9               	movwf	fsr2l,c
  9415  0009BC  6ADA               	clrf	fsr2h,c
  9416  0009BE  CFDE F0F4          	movff	postinc2,sprintf@val
  9417  0009C2  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9418                           
  9419                           ; BSR set to: 0
  9420  0009C6  0E02               	movlw	2
  9421  0009C8  27F2               	addwf	sprintf@ap& (0+255),f,b
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;doprnt.c: 1261: if((int)val < 0) {
  9425  0009CA  AFF5               	btfss	(sprintf@val+1)& (0+255),7,b
  9426  0009CC  D03D               	goto	l7784
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;doprnt.c: 1262: flag |= 0x03;
  9430  0009CE  0E03               	movlw	3
  9431  0009D0  13F6               	iorwf	sprintf@flag& (0+255),f,b
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;doprnt.c: 1263: val = -val;
  9435  0009D2  6DF4               	negf	sprintf@val& (0+255),b
  9436  0009D4  1FF5               	comf	(sprintf@val+1)& (0+255),f,b
  9437  0009D6  B0D8               	btfsc	status,0,c
  9438  0009D8  2BF5               	incf	(sprintf@val+1)& (0+255),f,b
  9439  0009DA  D036               	goto	l7784
  9440  0009DC                     l7750:
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;doprnt.c: 1268: else
  9444                           ;doprnt.c: 1273: {
  9445                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9446  0009DC  51F2               	movf	sprintf@ap& (0+255),w,b
  9447  0009DE  6ED9               	movwf	fsr2l,c
  9448  0009E0  6ADA               	clrf	fsr2h,c
  9449  0009E2  CFDE F0F4          	movff	postinc2,sprintf@val
  9450  0009E6  CFDD F0F5          	movff	postdec2,sprintf@val+1
  9451                           
  9452                           ; BSR set to: 0
  9453  0009EA  0E02               	movlw	2
  9454  0009EC  27F2               	addwf	sprintf@ap& (0+255),f,b
  9455  0009EE  D02C               	goto	l7784
  9456  0009F0                     l7754:
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9460  0009F0  0E01               	movlw	1
  9461  0009F2  6FF9               	movwf	sprintf@c& (0+255),b
  9462  0009F4                     l7760:
  9463                           
  9464                           ; BSR set to: 0
  9465                           ;doprnt.c: 1306: if(val < dpowers[c])
  9466  0009F4  51F9               	movf	sprintf@c& (0+255),w,b
  9467  0009F6  0D02               	mullw	2
  9468  0009F8  0EA5               	movlw	low _dpowers
  9469  0009FA  24F3               	addwf	prodl,w,c
  9470  0009FC  6EF6               	movwf	tblptrl,c
  9471  0009FE  0E3E               	movlw	high _dpowers
  9472  000A00  20F4               	addwfc	prodh,w,c
  9473  000A02  6EF7               	movwf	tblptrh,c
  9474  000A04                     	if	0	;There are less than 3 active tblptr bytes
  9475  000A04                     	endif
  9476  000A04  0009               	tblrd		*+
  9477  000A06  50F5               	movf	tablat,w,c
  9478  000A08  5DF4               	subwf	sprintf@val& (0+255),w,b
  9479  000A0A  0009               	tblrd		*+
  9480  000A0C  50F5               	movf	tablat,w,c
  9481  000A0E  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9482  000A10  E320               	bnc	l7786
  9483                           
  9484                           ; BSR set to: 0
  9485  000A12  2BF9               	incf	sprintf@c& (0+255),f,b
  9486                           
  9487                           ; BSR set to: 0
  9488  000A14  0E05               	movlw	5
  9489  000A16  19F9               	xorwf	sprintf@c& (0+255),w,b
  9490  000A18  E01C               	bz	l7786
  9491  000A1A  D7EC               	goto	l7760
  9492  000A1C                     l7768:
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9496  000A1C  0E01               	movlw	1
  9497  000A1E  6FF9               	movwf	sprintf@c& (0+255),b
  9498  000A20                     l7774:
  9499                           
  9500                           ; BSR set to: 0
  9501                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9502  000A20  51F9               	movf	sprintf@c& (0+255),w,b
  9503  000A22  0D02               	mullw	2
  9504  000A24  0EAF               	movlw	low _hexpowers
  9505  000A26  24F3               	addwf	prodl,w,c
  9506  000A28  6EF6               	movwf	tblptrl,c
  9507  000A2A  0E3E               	movlw	high _hexpowers
  9508  000A2C  20F4               	addwfc	prodh,w,c
  9509  000A2E  6EF7               	movwf	tblptrh,c
  9510  000A30                     	if	0	;There are less than 3 active tblptr bytes
  9511  000A30                     	endif
  9512  000A30  0009               	tblrd		*+
  9513  000A32  50F5               	movf	tablat,w,c
  9514  000A34  5DF4               	subwf	sprintf@val& (0+255),w,b
  9515  000A36  0009               	tblrd		*+
  9516  000A38  50F5               	movf	tablat,w,c
  9517  000A3A  59F5               	subwfb	(sprintf@val+1)& (0+255),w,b
  9518  000A3C  E30A               	bnc	l7786
  9519                           
  9520                           ; BSR set to: 0
  9521  000A3E  2BF9               	incf	sprintf@c& (0+255),f,b
  9522                           
  9523                           ; BSR set to: 0
  9524  000A40  0E04               	movlw	4
  9525  000A42  19F9               	xorwf	sprintf@c& (0+255),w,b
  9526  000A44  E006               	bz	l7786
  9527  000A46  D7EC               	goto	l7774
  9528  000A48                     l7784:
  9529                           
  9530                           ; BSR set to: 0
  9531  000A48  51F6               	movf	sprintf@flag& (0+255),w,b
  9532  000A4A  0B80               	andlw	128
  9533                           
  9534                           ; Switch size 1, requested type "speed"
  9535                           ; Number of cases is 2, Range of values is 0 to 128
  9536                           ; switch strategies available:
  9537                           ; Name         Instructions Cycles
  9538                           ; simple_byte            7     4 (average)
  9539                           ;	Chosen strategy is simple_byte
  9540  000A4C  E0D1               	bz	l7754
  9541  000A4E  0A80               	xorlw	128	; case 128
  9542  000A50  E0E5               	bz	l7768
  9543  000A52                     l7786:
  9544                           
  9545                           ; BSR set to: 0
  9546                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9547  000A52  51F7               	movf	sprintf@width& (0+255),w,b
  9548  000A54  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9549  000A56  E008               	bz	l7792
  9550                           
  9551                           ; BSR set to: 0
  9552  000A58  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9553  000A5C  0E03               	movlw	3
  9554  000A5E  17ED               	andwf	??_sprintf& (0+255),f,b
  9555  000A60  E003               	bz	l7792
  9556                           
  9557                           ; BSR set to: 0
  9558                           ;doprnt.c: 1346: width--;
  9559  000A62  07F7               	decf	sprintf@width& (0+255),f,b
  9560  000A64  A0D8               	btfss	status,0,c
  9561  000A66  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9562  000A68                     l7792:
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;doprnt.c: 1381: if(width > c)
  9566  000A68  0E80               	movlw	128
  9567  000A6A  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9568  000A6C  0E7F               	movlw	127
  9569  000A6E  6FED               	movwf	??_sprintf& (0+255),b
  9570  000A70  51F7               	movf	sprintf@width& (0+255),w,b
  9571  000A72  5DF9               	subwf	sprintf@c& (0+255),w,b
  9572  000A74  51F8               	movf	(sprintf@width+1)& (0+255),w,b
  9573  000A76  0A80               	xorlw	128
  9574  000A78  59ED               	subwfb	??_sprintf& (0+255),w,b
  9575  000A7A  E207               	bc	l1741
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;doprnt.c: 1382: width -= c;
  9579  000A7C  51F9               	movf	sprintf@c& (0+255),w,b
  9580  000A7E  5FF7               	subwf	sprintf@width& (0+255),f,b
  9581  000A80  0E00               	movlw	0
  9582  000A82  BFF9               	btfsc	sprintf@c& (0+255),7,b
  9583  000A84  0EFF               	movlw	255
  9584  000A86  5BF8               	subwfb	(sprintf@width+1)& (0+255),f,b
  9585  000A88  D002               	goto	l1742
  9586  000A8A                     l1741:
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;doprnt.c: 1383: else
  9590                           ;doprnt.c: 1384: width = 0;
  9591  000A8A  6BF7               	clrf	sprintf@width& (0+255),b
  9592  000A8C  6BF8               	clrf	(sprintf@width+1)& (0+255),b
  9593  000A8E                     l1742:
  9594                           
  9595                           ; BSR set to: 0
  9596                           ;doprnt.c: 1387: if(flag & 0x04) {
  9597  000A8E  A5F6               	btfss	sprintf@flag& (0+255),2,b
  9598  000A90  D018               	goto	l7810
  9599                           
  9600                           ; BSR set to: 0
  9601                           ;doprnt.c: 1392: if(flag & 0x03)
  9602  000A92  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9603  000A96  0E03               	movlw	3
  9604  000A98  17ED               	andwf	??_sprintf& (0+255),f,b
  9605  000A9A  E006               	bz	l7802
  9606                           
  9607                           ; BSR set to: 0
  9608                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  9609  000A9C  501B               	movf	sprintf@sp,w,c
  9610  000A9E  6ED9               	movwf	fsr2l,c
  9611  000AA0  6ADA               	clrf	fsr2h,c
  9612  000AA2  0E2D               	movlw	45
  9613  000AA4  6EDF               	movwf	indf2,c
  9614                           
  9615                           ; BSR set to: 0
  9616  000AA6  2A1B               	incf	sprintf@sp,f,c
  9617  000AA8                     l7802:
  9618                           
  9619                           ; BSR set to: 0
  9620                           ;doprnt.c: 1415: if(width)
  9621  000AA8  51F7               	movf	sprintf@width& (0+255),w,b
  9622  000AAA  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9623  000AAC  E024               	bz	l7824
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  9627  000AAE  501B               	movf	sprintf@sp,w,c
  9628  000AB0  6ED9               	movwf	fsr2l,c
  9629  000AB2  6ADA               	clrf	fsr2h,c
  9630  000AB4  0E30               	movlw	48
  9631  000AB6  6EDF               	movwf	indf2,c
  9632                           
  9633                           ; BSR set to: 0
  9634  000AB8  2A1B               	incf	sprintf@sp,f,c
  9635                           
  9636                           ; BSR set to: 0
  9637                           ;doprnt.c: 1418: while(--width);
  9638  000ABA  07F7               	decf	sprintf@width& (0+255),f,b
  9639  000ABC  A0D8               	btfss	status,0,c
  9640  000ABE  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9641  000AC0  D7F3               	goto	l7802
  9642  000AC2                     l7810:
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;doprnt.c: 1422: {
  9646                           ;doprnt.c: 1424: if(width
  9647                           ;doprnt.c: 1428: )
  9648  000AC2  51F7               	movf	sprintf@width& (0+255),w,b
  9649  000AC4  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9650  000AC6  E00C               	bz	l7818
  9651  000AC8                     l7812:
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9655  000AC8  501B               	movf	sprintf@sp,w,c
  9656  000ACA  6ED9               	movwf	fsr2l,c
  9657  000ACC  6ADA               	clrf	fsr2h,c
  9658  000ACE  0E20               	movlw	32
  9659  000AD0  6EDF               	movwf	indf2,c
  9660                           
  9661                           ; BSR set to: 0
  9662  000AD2  2A1B               	incf	sprintf@sp,f,c
  9663                           
  9664                           ; BSR set to: 0
  9665                           ;doprnt.c: 1431: while(--width);
  9666  000AD4  07F7               	decf	sprintf@width& (0+255),f,b
  9667  000AD6  A0D8               	btfss	status,0,c
  9668  000AD8  07F8               	decf	(sprintf@width+1)& (0+255),f,b
  9669  000ADA  51F7               	movf	sprintf@width& (0+255),w,b
  9670  000ADC  11F8               	iorwf	(sprintf@width+1)& (0+255),w,b
  9671  000ADE  E1F4               	bnz	l7812
  9672  000AE0                     l7818:
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;doprnt.c: 1438: if(flag & 0x03)
  9676  000AE0  C0F6  F0ED         	movff	sprintf@flag,??_sprintf
  9677  000AE4  0E03               	movlw	3
  9678  000AE6  17ED               	andwf	??_sprintf& (0+255),f,b
  9679  000AE8  E006               	bz	l7824
  9680                           
  9681                           ; BSR set to: 0
  9682                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  9683  000AEA  501B               	movf	sprintf@sp,w,c
  9684  000AEC  6ED9               	movwf	fsr2l,c
  9685  000AEE  6ADA               	clrf	fsr2h,c
  9686  000AF0  0E2D               	movlw	45
  9687  000AF2  6EDF               	movwf	indf2,c
  9688                           
  9689                           ; BSR set to: 0
  9690  000AF4  2A1B               	incf	sprintf@sp,f,c
  9691  000AF6                     l7824:
  9692                           
  9693                           ; BSR set to: 0
  9694                           ;doprnt.c: 1469: }
  9695                           ;doprnt.c: 1472: prec = c;
  9696  000AF6  C0F9  F0F3         	movff	sprintf@c,sprintf@prec
  9697                           
  9698                           ;doprnt.c: 1474: while(prec--) {
  9699  000AFA  D04D               	goto	l7840
  9700  000AFC                     l7826:
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9704  000AFC  51F3               	movf	sprintf@prec& (0+255),w,b
  9705  000AFE  0D02               	mullw	2
  9706  000B00  0EA5               	movlw	low _dpowers
  9707  000B02  24F3               	addwf	prodl,w,c
  9708  000B04  6EF6               	movwf	tblptrl,c
  9709  000B06  0E3E               	movlw	high _dpowers
  9710  000B08  20F4               	addwfc	prodh,w,c
  9711  000B0A  6EF7               	movwf	tblptrh,c
  9712  000B0C                     	if	0	;There are less than 3 active tblptr bytes
  9713  000B0C                     	endif
  9714  000B0C  0009               	tblrd		*+
  9715  000B0E  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9716  000B12  000A               	tblrd		*-
  9717  000B14  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9718  000B18  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9719  000B1C  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9720  000B20  EC04  F010         	call	___lwdiv	;wreg free
  9721  000B24  C00F  F016         	movff	?___lwdiv,___lwmod@dividend
  9722  000B28  C010  F017         	movff	?___lwdiv+1,___lwmod@dividend+1
  9723  000B2C  6A19               	clrf	___lwmod@divisor+1,c
  9724  000B2E  0E0A               	movlw	10
  9725  000B30  6E18               	movwf	___lwmod@divisor,c
  9726  000B32  EC4A  F010         	call	___lwmod	;wreg free
  9727  000B36  5016               	movf	?___lwmod,w,c
  9728  000B38  0F30               	addlw	48
  9729  000B3A  6FF9               	movwf	sprintf@c& (0+255),b
  9730                           
  9731                           ;doprnt.c: 1491: break;
  9732  000B3C  D026               	goto	l7836
  9733  000B3E                     l7828:
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;doprnt.c: 1499: {
  9737                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9738  000B3E  C0F4  F00F         	movff	sprintf@val,___lwdiv@dividend
  9739  000B42  C0F5  F010         	movff	sprintf@val+1,___lwdiv@dividend+1
  9740  000B46  51F3               	movf	sprintf@prec& (0+255),w,b
  9741  000B48  0D02               	mullw	2
  9742  000B4A  0EAF               	movlw	low _hexpowers
  9743  000B4C  24F3               	addwf	prodl,w,c
  9744  000B4E  6EF6               	movwf	tblptrl,c
  9745  000B50  0E3E               	movlw	high _hexpowers
  9746  000B52  20F4               	addwfc	prodh,w,c
  9747  000B54  6EF7               	movwf	tblptrh,c
  9748  000B56                     	if	0	;There are less than 3 active tblptr bytes
  9749  000B56                     	endif
  9750  000B56  0009               	tblrd		*+
  9751  000B58  CFF5 F011          	movff	tablat,___lwdiv@divisor
  9752  000B5C  000A               	tblrd		*-
  9753  000B5E  CFF5 F012          	movff	tablat,___lwdiv@divisor+1
  9754  000B62  EC04  F010         	call	___lwdiv	;wreg free
  9755  000B66  500F               	movf	?___lwdiv,w,c
  9756  000B68  0B0F               	andlw	15
  9757  000B6A  6FF1               	movwf	sprintf@idx& (0+255),b
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;doprnt.c: 1504: c = "0123456789ABCDEF"[idx];
  9761  000B6C  0EDB               	movlw	low STR_11
  9762  000B6E  25F1               	addwf	sprintf@idx& (0+255),w,b
  9763  000B70  6EF6               	movwf	tblptrl,c
  9764  000B72  6AF7               	clrf	tblptrh,c
  9765  000B74  0E3F               	movlw	high STR_11
  9766  000B76  22F7               	addwfc	tblptrh,f,c
  9767  000B78                     	if	0	;There are less than 3 active tblptr bytes
  9768  000B78                     	endif
  9769  000B78  0008               	tblrd		*
  9770  000B7A  CFF5 F0F9          	movff	tablat,sprintf@c
  9771                           
  9772                           ;doprnt.c: 1508: }
  9773                           ;doprnt.c: 1510: break;
  9774  000B7E  D005               	goto	l7836
  9775  000B80                     l7834:
  9776                           
  9777                           ; BSR set to: 0
  9778  000B80  51F6               	movf	sprintf@flag& (0+255),w,b
  9779  000B82  0B80               	andlw	128
  9780                           
  9781                           ; Switch size 1, requested type "speed"
  9782                           ; Number of cases is 2, Range of values is 0 to 128
  9783                           ; switch strategies available:
  9784                           ; Name         Instructions Cycles
  9785                           ; simple_byte            7     4 (average)
  9786                           ;	Chosen strategy is simple_byte
  9787  000B84  E0BB               	bz	l7826
  9788  000B86  0A80               	xorlw	128	; case 128
  9789  000B88  E0DA               	bz	l7828
  9790  000B8A                     l7836:
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9794  000B8A  501B               	movf	sprintf@sp,w,c
  9795  000B8C  6ED9               	movwf	fsr2l,c
  9796  000B8E  6ADA               	clrf	fsr2h,c
  9797  000B90  C0F9  FFDF         	movff	sprintf@c,indf2
  9798                           
  9799                           ; BSR set to: 0
  9800  000B94  2A1B               	incf	sprintf@sp,f,c
  9801  000B96                     l7840:
  9802                           
  9803                           ; BSR set to: 0
  9804  000B96  07F3               	decf	sprintf@prec& (0+255),f,b
  9805  000B98  29F3               	incf	sprintf@prec& (0+255),w,b
  9806  000B9A  E1F2               	bnz	l7834
  9807  000B9C                     l7842:
  9808                           
  9809                           ; BSR set to: 0
  9810  000B9C  C01C  FFF6         	movff	sprintf@f,tblptrl
  9811  000BA0  C01D  FFF7         	movff	sprintf@f+1,tblptrh
  9812  000BA4  4A1C               	infsnz	sprintf@f,f,c
  9813  000BA6  2A1D               	incf	sprintf@f+1,f,c
  9814  000BA8                     	if	0	;tblptru may be non-zero
  9815  000BA8                     	endif
  9816  000BA8                     	if	0	;tblptru may be non-zero
  9817  000BA8                     	endif
  9818  000BA8  0008               	tblrd		*
  9819  000BAA  CFF5 F0F9          	movff	tablat,sprintf@c
  9820  000BAE  51F9               	movf	sprintf@c& (0+255),w,b
  9821  000BB0  E001 D696          	bnz	l7710
  9822  000BB4                     l7844:
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;doprnt.c: 1538: *sp = 0;
  9826  000BB4  501B               	movf	sprintf@sp,w,c
  9827  000BB6  6ED9               	movwf	fsr2l,c
  9828  000BB8  6ADA               	clrf	fsr2h,c
  9829  000BBA  6ADF               	clrf	indf2,c
  9830                           
  9831                           ; BSR set to: 0
  9832  000BBC  0C00               	retlw	0	;funcret
  9833  000BBE                     __end_of_sprintf:
  9834                           	opt stack 0
  9835                           tblptru	equ	0xFF8
  9836                           tblptrh	equ	0xFF7
  9837                           tblptrl	equ	0xFF6
  9838                           tablat	equ	0xFF5
  9839                           prodh	equ	0xFF4
  9840                           prodl	equ	0xFF3
  9841                           intcon	equ	0xFF2
  9842                           intcon2	equ	0xFF1
  9843                           intcon3	equ	0xFF0
  9844                           postinc0	equ	0xFEE
  9845                           wreg	equ	0xFE8
  9846                           indf1	equ	0xFE7
  9847                           postdec1	equ	0xFE5
  9848                           fsr1h	equ	0xFE2
  9849                           fsr1l	equ	0xFE1
  9850                           indf2	equ	0xFDF
  9851                           postinc2	equ	0xFDE
  9852                           postdec2	equ	0xFDD
  9853                           fsr2h	equ	0xFDA
  9854                           fsr2l	equ	0xFD9
  9855                           status	equ	0xFD8
  9856                           
  9857 ;; *************** function _isdigit *****************
  9858 ;; Defined at:
  9859 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/isdigit.c"
  9860 ;; Parameters:    Size  Location     Type
  9861 ;;  c               1    wreg     unsigned char 
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  c               1   16[COMRAM] unsigned char 
  9864 ;; Return value:  Size  Location     Type
  9865 ;;		None               void
  9866 ;; Registers used:
  9867 ;;		wreg, status,2, status,0
  9868 ;; Tracked objects:
  9869 ;;		On entry : 3F/0
  9870 ;;		On exit  : 0/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9873 ;;      Params:         0       0       0       0
  9874 ;;      Locals:         2       0       0       0
  9875 ;;      Temps:          1       0       0       0
  9876 ;;      Totals:         3       0       0       0
  9877 ;;Total ram usage:        3 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:   10
  9880 ;; This function calls:
  9881 ;;		Nothing
  9882 ;; This function is called by:
  9883 ;;		_sprintf
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           	psect	text49
  9888  0024B6                     __ptext49:
  9889                           	opt stack 0
  9890  0024B6                     _isdigit:
  9891                           	opt stack 15
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;incstack = 0
  9895                           ;isdigit@c stored from wreg
  9896  0024B6  6E11               	movwf	isdigit@c,c
  9897  0024B8  6A10               	clrf	_isdigit$3642,c
  9898  0024BA  0E3A               	movlw	58
  9899  0024BC  6011               	cpfslt	isdigit@c,c
  9900  0024BE  D005               	goto	l7532
  9901  0024C0  0E2F               	movlw	47
  9902  0024C2  6411               	cpfsgt	isdigit@c,c
  9903  0024C4  D002               	goto	l7532
  9904  0024C6  0E01               	movlw	1
  9905  0024C8  6E10               	movwf	_isdigit$3642,c
  9906  0024CA                     l7532:
  9907  0024CA  C010  F00F         	movff	_isdigit$3642,??_isdigit
  9908  0024CE  300F               	rrcf	??_isdigit,w,c
  9909  0024D0  0012               	return		;funcret
  9910  0024D2                     __end_of_isdigit:
  9911                           	opt stack 0
  9912                           tblptru	equ	0xFF8
  9913                           tblptrh	equ	0xFF7
  9914                           tblptrl	equ	0xFF6
  9915                           tablat	equ	0xFF5
  9916                           prodh	equ	0xFF4
  9917                           prodl	equ	0xFF3
  9918                           intcon	equ	0xFF2
  9919                           intcon2	equ	0xFF1
  9920                           intcon3	equ	0xFF0
  9921                           postinc0	equ	0xFEE
  9922                           wreg	equ	0xFE8
  9923                           indf1	equ	0xFE7
  9924                           postdec1	equ	0xFE5
  9925                           fsr1h	equ	0xFE2
  9926                           fsr1l	equ	0xFE1
  9927                           indf2	equ	0xFDF
  9928                           postinc2	equ	0xFDE
  9929                           postdec2	equ	0xFDD
  9930                           fsr2h	equ	0xFDA
  9931                           fsr2l	equ	0xFD9
  9932                           status	equ	0xFD8
  9933                           
  9934 ;; *************** function ___wmul *****************
  9935 ;; Defined at:
  9936 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul16.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  multiplier      2   14[COMRAM] unsigned int 
  9939 ;;  multiplicand    2   16[COMRAM] unsigned int 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  product         2   18[COMRAM] unsigned int 
  9942 ;; Return value:  Size  Location     Type
  9943 ;;                  2   14[COMRAM] unsigned int 
  9944 ;; Registers used:
  9945 ;;		wreg, status,2, status,0, prodl, prodh
  9946 ;; Tracked objects:
  9947 ;;		On entry : 0/0
  9948 ;;		On exit  : 0/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9951 ;;      Params:         4       0       0       0
  9952 ;;      Locals:         2       0       0       0
  9953 ;;      Temps:          0       0       0       0
  9954 ;;      Totals:         6       0       0       0
  9955 ;;Total ram usage:        6 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:   10
  9958 ;; This function calls:
  9959 ;;		Nothing
  9960 ;; This function is called by:
  9961 ;;		_sprintf
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           	psect	text50
  9966  002352                     __ptext50:
  9967                           	opt stack 0
  9968  002352                     ___wmul:
  9969                           	opt stack 15
  9970                           
  9971                           ;incstack = 0
  9972  002352  500F               	movf	___wmul@multiplier,w,c
  9973  002354  0211               	mulwf	___wmul@multiplicand,c
  9974  002356  CFF3 F013          	movff	prodl,___wmul@product
  9975  00235A  CFF4 F014          	movff	prodh,___wmul@product+1
  9976  00235E  500F               	movf	___wmul@multiplier,w,c
  9977  002360  0212               	mulwf	___wmul@multiplicand+1,c
  9978  002362  50F3               	movf	prodl,w,c
  9979  002364  2614               	addwf	___wmul@product+1,f,c
  9980  002366  5010               	movf	___wmul@multiplier+1,w,c
  9981  002368  0211               	mulwf	___wmul@multiplicand,c
  9982  00236A  50F3               	movf	prodl,w,c
  9983  00236C  2614               	addwf	___wmul@product+1,f,c
  9984  00236E  C013  F00F         	movff	___wmul@product,?___wmul
  9985  002372  C014  F010         	movff	___wmul@product+1,?___wmul+1
  9986  002376  0012               	return		;funcret
  9987  002378                     __end_of___wmul:
  9988                           	opt stack 0
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           intcon2	equ	0xFF1
  9997                           intcon3	equ	0xFF0
  9998                           postinc0	equ	0xFEE
  9999                           wreg	equ	0xFE8
 10000                           indf1	equ	0xFE7
 10001                           postdec1	equ	0xFE5
 10002                           fsr1h	equ	0xFE2
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function ___lwmod *****************
 10012 ;; Defined at:
 10013 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwmod.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;  dividend        2   21[COMRAM] unsigned int 
 10016 ;;  divisor         2   23[COMRAM] unsigned int 
 10017 ;; Auto vars:     Size  Location     Type
 10018 ;;  counter         1   25[COMRAM] unsigned char 
 10019 ;; Return value:  Size  Location     Type
 10020 ;;                  2   21[COMRAM] unsigned int 
 10021 ;; Registers used:
 10022 ;;		wreg, status,2, status,0
 10023 ;; Tracked objects:
 10024 ;;		On entry : 3F/0
 10025 ;;		On exit  : 3F/0
 10026 ;;		Unchanged: 3F/0
 10027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10028 ;;      Params:         4       0       0       0
 10029 ;;      Locals:         1       0       0       0
 10030 ;;      Temps:          0       0       0       0
 10031 ;;      Totals:         5       0       0       0
 10032 ;;Total ram usage:        5 bytes
 10033 ;; Hardware stack levels used:    1
 10034 ;; Hardware stack levels required when called:   10
 10035 ;; This function calls:
 10036 ;;		Nothing
 10037 ;; This function is called by:
 10038 ;;		_sprintf
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           	psect	text51
 10043  002094                     __ptext51:
 10044                           	opt stack 0
 10045  002094                     ___lwmod:
 10046                           	opt stack 15
 10047                           
 10048                           ; BSR set to: 0
 10049                           
 10050                           ;incstack = 0
 10051  002094  5018               	movf	___lwmod@divisor,w,c
 10052  002096  1019               	iorwf	___lwmod@divisor+1,w,c
 10053  002098  E017               	bz	l2173
 10054                           
 10055                           ; BSR set to: 0
 10056  00209A  0E01               	movlw	1
 10057  00209C  6E1A               	movwf	___lwmod@counter,c
 10058  00209E  D004               	goto	l7606
 10059  0020A0                     l7604:
 10060                           
 10061                           ; BSR set to: 0
 10062  0020A0  90D8               	bcf	status,0,c
 10063  0020A2  3618               	rlcf	___lwmod@divisor,f,c
 10064  0020A4  3619               	rlcf	___lwmod@divisor+1,f,c
 10065  0020A6  2A1A               	incf	___lwmod@counter,f,c
 10066  0020A8                     l7606:
 10067                           
 10068                           ; BSR set to: 0
 10069  0020A8  AE19               	btfss	___lwmod@divisor+1,7,c
 10070  0020AA  D7FA               	goto	l7604
 10071  0020AC                     l7608:
 10072                           
 10073                           ; BSR set to: 0
 10074  0020AC  5018               	movf	___lwmod@divisor,w,c
 10075  0020AE  5C16               	subwf	___lwmod@dividend,w,c
 10076  0020B0  5019               	movf	___lwmod@divisor+1,w,c
 10077  0020B2  5817               	subwfb	___lwmod@dividend+1,w,c
 10078  0020B4  E304               	bnc	l7612
 10079                           
 10080                           ; BSR set to: 0
 10081  0020B6  5018               	movf	___lwmod@divisor,w,c
 10082  0020B8  5E16               	subwf	___lwmod@dividend,f,c
 10083  0020BA  5019               	movf	___lwmod@divisor+1,w,c
 10084  0020BC  5A17               	subwfb	___lwmod@dividend+1,f,c
 10085  0020BE                     l7612:
 10086                           
 10087                           ; BSR set to: 0
 10088  0020BE  90D8               	bcf	status,0,c
 10089  0020C0  3219               	rrcf	___lwmod@divisor+1,f,c
 10090  0020C2  3218               	rrcf	___lwmod@divisor,f,c
 10091                           
 10092                           ; BSR set to: 0
 10093  0020C4  2E1A               	decfsz	___lwmod@counter,f,c
 10094  0020C6  D7F2               	goto	l7608
 10095  0020C8                     l2173:
 10096                           
 10097                           ; BSR set to: 0
 10098  0020C8  C016  F016         	movff	___lwmod@dividend,?___lwmod
 10099  0020CC  C017  F017         	movff	___lwmod@dividend+1,?___lwmod+1
 10100                           
 10101                           ; BSR set to: 0
 10102  0020D0  0012               	return		;funcret
 10103  0020D2                     __end_of___lwmod:
 10104                           	opt stack 0
 10105                           tblptru	equ	0xFF8
 10106                           tblptrh	equ	0xFF7
 10107                           tblptrl	equ	0xFF6
 10108                           tablat	equ	0xFF5
 10109                           prodh	equ	0xFF4
 10110                           prodl	equ	0xFF3
 10111                           intcon	equ	0xFF2
 10112                           intcon2	equ	0xFF1
 10113                           intcon3	equ	0xFF0
 10114                           postinc0	equ	0xFEE
 10115                           wreg	equ	0xFE8
 10116                           indf1	equ	0xFE7
 10117                           postdec1	equ	0xFE5
 10118                           fsr1h	equ	0xFE2
 10119                           fsr1l	equ	0xFE1
 10120                           indf2	equ	0xFDF
 10121                           postinc2	equ	0xFDE
 10122                           postdec2	equ	0xFDD
 10123                           fsr2h	equ	0xFDA
 10124                           fsr2l	equ	0xFD9
 10125                           status	equ	0xFD8
 10126                           
 10127 ;; *************** function ___lwdiv *****************
 10128 ;; Defined at:
 10129 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/lwdiv.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  dividend        2   14[COMRAM] unsigned int 
 10132 ;;  divisor         2   16[COMRAM] unsigned int 
 10133 ;; Auto vars:     Size  Location     Type
 10134 ;;  quotient        2   19[COMRAM] unsigned int 
 10135 ;;  counter         1   18[COMRAM] unsigned char 
 10136 ;; Return value:  Size  Location     Type
 10137 ;;                  2   14[COMRAM] unsigned int 
 10138 ;; Registers used:
 10139 ;;		wreg, status,2, status,0
 10140 ;; Tracked objects:
 10141 ;;		On entry : 3F/0
 10142 ;;		On exit  : 3F/0
 10143 ;;		Unchanged: 3F/0
 10144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10145 ;;      Params:         4       0       0       0
 10146 ;;      Locals:         3       0       0       0
 10147 ;;      Temps:          0       0       0       0
 10148 ;;      Totals:         7       0       0       0
 10149 ;;Total ram usage:        7 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:   10
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_sprintf
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text52
 10160  002008                     __ptext52:
 10161                           	opt stack 0
 10162  002008                     ___lwdiv:
 10163                           	opt stack 15
 10164                           
 10165                           ; BSR set to: 0
 10166                           
 10167                           ; BSR set to: 0
 10168                           ;incstack = 0
 10169  002008  6A14               	clrf	___lwdiv@quotient,c
 10170  00200A  6A15               	clrf	___lwdiv@quotient+1,c
 10171                           
 10172                           ; BSR set to: 0
 10173  00200C  5011               	movf	___lwdiv@divisor,w,c
 10174  00200E  1012               	iorwf	___lwdiv@divisor+1,w,c
 10175  002010  E01B               	bz	l2163
 10176                           
 10177                           ; BSR set to: 0
 10178  002012  0E01               	movlw	1
 10179  002014  6E13               	movwf	___lwdiv@counter,c
 10180  002016  D004               	goto	l7586
 10181  002018                     l7584:
 10182                           
 10183                           ; BSR set to: 0
 10184  002018  90D8               	bcf	status,0,c
 10185  00201A  3611               	rlcf	___lwdiv@divisor,f,c
 10186  00201C  3612               	rlcf	___lwdiv@divisor+1,f,c
 10187  00201E  2A13               	incf	___lwdiv@counter,f,c
 10188  002020                     l7586:
 10189                           
 10190                           ; BSR set to: 0
 10191  002020  AE12               	btfss	___lwdiv@divisor+1,7,c
 10192  002022  D7FA               	goto	l7584
 10193  002024                     l7588:
 10194                           
 10195                           ; BSR set to: 0
 10196  002024  90D8               	bcf	status,0,c
 10197  002026  3614               	rlcf	___lwdiv@quotient,f,c
 10198  002028  3615               	rlcf	___lwdiv@quotient+1,f,c
 10199                           
 10200                           ; BSR set to: 0
 10201  00202A  5011               	movf	___lwdiv@divisor,w,c
 10202  00202C  5C0F               	subwf	___lwdiv@dividend,w,c
 10203  00202E  5012               	movf	___lwdiv@divisor+1,w,c
 10204  002030  5810               	subwfb	___lwdiv@dividend+1,w,c
 10205  002032  E305               	bnc	l7596
 10206                           
 10207                           ; BSR set to: 0
 10208  002034  5011               	movf	___lwdiv@divisor,w,c
 10209  002036  5E0F               	subwf	___lwdiv@dividend,f,c
 10210  002038  5012               	movf	___lwdiv@divisor+1,w,c
 10211  00203A  5A10               	subwfb	___lwdiv@dividend+1,f,c
 10212                           
 10213                           ; BSR set to: 0
 10214  00203C  8014               	bsf	___lwdiv@quotient,0,c
 10215  00203E                     l7596:
 10216                           
 10217                           ; BSR set to: 0
 10218  00203E  90D8               	bcf	status,0,c
 10219  002040  3212               	rrcf	___lwdiv@divisor+1,f,c
 10220  002042  3211               	rrcf	___lwdiv@divisor,f,c
 10221                           
 10222                           ; BSR set to: 0
 10223  002044  2E13               	decfsz	___lwdiv@counter,f,c
 10224  002046  D7EE               	goto	l7588
 10225  002048                     l2163:
 10226                           
 10227                           ; BSR set to: 0
 10228  002048  C014  F00F         	movff	___lwdiv@quotient,?___lwdiv
 10229  00204C  C015  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10230                           
 10231                           ; BSR set to: 0
 10232  002050  0012               	return		;funcret
 10233  002052                     __end_of___lwdiv:
 10234                           	opt stack 0
 10235                           tblptru	equ	0xFF8
 10236                           tblptrh	equ	0xFF7
 10237                           tblptrl	equ	0xFF6
 10238                           tablat	equ	0xFF5
 10239                           prodh	equ	0xFF4
 10240                           prodl	equ	0xFF3
 10241                           intcon	equ	0xFF2
 10242                           intcon2	equ	0xFF1
 10243                           intcon3	equ	0xFF0
 10244                           postinc0	equ	0xFEE
 10245                           wreg	equ	0xFE8
 10246                           indf1	equ	0xFE7
 10247                           postdec1	equ	0xFE5
 10248                           fsr1h	equ	0xFE2
 10249                           fsr1l	equ	0xFE1
 10250                           indf2	equ	0xFDF
 10251                           postinc2	equ	0xFDE
 10252                           postdec2	equ	0xFDD
 10253                           fsr2h	equ	0xFDA
 10254                           fsr2l	equ	0xFD9
 10255                           status	equ	0xFD8
 10256                           
 10257 ;; *************** function _delay_1s *****************
 10258 ;; Defined at:
 10259 ;;		line 76 in file "horloge.c"
 10260 ;; Parameters:    Size  Location     Type
 10261 ;;		None
 10262 ;; Auto vars:     Size  Location     Type
 10263 ;;		None
 10264 ;; Return value:  Size  Location     Type
 10265 ;;                  1    wreg      void 
 10266 ;; Registers used:
 10267 ;;		wreg, cstack
 10268 ;; Tracked objects:
 10269 ;;		On entry : 0/0
 10270 ;;		On exit  : 0/0
 10271 ;;		Unchanged: 0/0
 10272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10273 ;;      Params:         0       0       0       0
 10274 ;;      Locals:         0       0       0       0
 10275 ;;      Temps:          0       0       0       0
 10276 ;;      Totals:         0       0       0       0
 10277 ;;Total ram usage:        0 bytes
 10278 ;; Hardware stack levels used:    1
 10279 ;; Hardware stack levels required when called:   11
 10280 ;; This function calls:
 10281 ;;		_delay_100ms
 10282 ;; This function is called by:
 10283 ;;		_EUSART1_RX_T3_LOCAL
 10284 ;; This function uses a non-reentrant model
 10285 ;;
 10286                           
 10287                           	psect	text53
 10288  002290                     __ptext53:
 10289                           	opt stack 0
 10290  002290                     _delay_1s:
 10291                           	opt stack 15
 10292                           
 10293                           ;horloge.c: 77: delay_100ms();
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;incstack = 0
 10297  002290  EC15  F00C         	call	_delay_100ms	;wreg free
 10298                           
 10299                           ;horloge.c: 78: delay_100ms();
 10300  002294  EC15  F00C         	call	_delay_100ms	;wreg free
 10301                           
 10302                           ;horloge.c: 79: delay_100ms();
 10303  002298  EC15  F00C         	call	_delay_100ms	;wreg free
 10304                           
 10305                           ;horloge.c: 80: delay_100ms();
 10306  00229C  EC15  F00C         	call	_delay_100ms	;wreg free
 10307                           
 10308                           ;horloge.c: 81: delay_100ms();
 10309  0022A0  EC15  F00C         	call	_delay_100ms	;wreg free
 10310                           
 10311                           ;horloge.c: 82: delay_100ms();
 10312  0022A4  EC15  F00C         	call	_delay_100ms	;wreg free
 10313                           
 10314                           ;horloge.c: 83: delay_100ms();
 10315  0022A8  EC15  F00C         	call	_delay_100ms	;wreg free
 10316                           
 10317                           ;horloge.c: 84: delay_100ms();
 10318  0022AC  EC15  F00C         	call	_delay_100ms	;wreg free
 10319                           
 10320                           ;horloge.c: 85: delay_100ms();
 10321  0022B0  EC15  F00C         	call	_delay_100ms	;wreg free
 10322                           
 10323                           ;horloge.c: 86: delay_100ms();
 10324  0022B4  EF15  F00C         	goto	_delay_100ms	;wreg free
 10325  0022B8                     __end_of_delay_1s:
 10326                           	opt stack 0
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           intcon	equ	0xFF2
 10334                           intcon2	equ	0xFF1
 10335                           intcon3	equ	0xFF0
 10336                           postinc0	equ	0xFEE
 10337                           wreg	equ	0xFE8
 10338                           indf1	equ	0xFE7
 10339                           postdec1	equ	0xFE5
 10340                           fsr1h	equ	0xFE2
 10341                           fsr1l	equ	0xFE1
 10342                           indf2	equ	0xFDF
 10343                           postinc2	equ	0xFDE
 10344                           postdec2	equ	0xFDD
 10345                           fsr2h	equ	0xFDA
 10346                           fsr2l	equ	0xFD9
 10347                           status	equ	0xFD8
 10348                           
 10349 ;; *************** function _delay_100ms *****************
 10350 ;; Defined at:
 10351 ;;		line 46 in file "horloge.c"
 10352 ;; Parameters:    Size  Location     Type
 10353 ;;		None
 10354 ;; Auto vars:     Size  Location     Type
 10355 ;;		None
 10356 ;; Return value:  Size  Location     Type
 10357 ;;                  1    wreg      void 
 10358 ;; Registers used:
 10359 ;;		wreg
 10360 ;; Tracked objects:
 10361 ;;		On entry : 0/2
 10362 ;;		On exit  : 0/0
 10363 ;;		Unchanged: 0/0
 10364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10365 ;;      Params:         0       0       0       0
 10366 ;;      Locals:         0       0       0       0
 10367 ;;      Temps:          1       0       0       0
 10368 ;;      Totals:         1       0       0       0
 10369 ;;Total ram usage:        1 bytes
 10370 ;; Hardware stack levels used:    1
 10371 ;; Hardware stack levels required when called:   10
 10372 ;; This function calls:
 10373 ;;		Nothing
 10374 ;; This function is called by:
 10375 ;;		_delay_n_100ms
 10376 ;;		_delay_1s
 10377 ;; This function uses a non-reentrant model
 10378 ;;
 10379                           
 10380                           	psect	text54
 10381  00182A                     __ptext54:
 10382                           	opt stack 0
 10383  00182A                     _delay_100ms:
 10384                           	opt stack 15
 10385                           
 10386                           ;horloge.c: 47: _delay((unsigned long)((10)*(8000000/4000.0)));
 10387                           
 10388                           ;incstack = 0
 10389  00182A  0E1A               	movlw	26
 10390  00182C  6E0F               	movwf	??_delay_100ms& (0+255),c
 10391  00182E  0EF8               	movlw	248
 10392  001830                     u7207:
 10393  001830  2EE8               	decfsz	wreg,f,c
 10394  001832  D7FE               	bra	u7207
 10395  001834  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10396  001836  D7FC               	bra	u7207
 10397  001838  F000 F000          	nop2	
 10398                           
 10399                           ;horloge.c: 48: _delay((unsigned long)((10)*(8000000/4000.0)));
 10400  00183C  0E1A               	movlw	26
 10401  00183E  6E0F               	movwf	??_delay_100ms& (0+255),c
 10402  001840  0EF8               	movlw	248
 10403  001842                     u7217:
 10404  001842  2EE8               	decfsz	wreg,f,c
 10405  001844  D7FE               	bra	u7217
 10406  001846  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10407  001848  D7FC               	bra	u7217
 10408  00184A  F000 F000          	nop2	
 10409                           
 10410                           ;horloge.c: 49: _delay((unsigned long)((10)*(8000000/4000.0)));
 10411  00184E  0E1A               	movlw	26
 10412  001850  6E0F               	movwf	??_delay_100ms& (0+255),c
 10413  001852  0EF8               	movlw	248
 10414  001854                     u7227:
 10415  001854  2EE8               	decfsz	wreg,f,c
 10416  001856  D7FE               	bra	u7227
 10417  001858  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10418  00185A  D7FC               	bra	u7227
 10419  00185C  F000 F000          	nop2	
 10420                           
 10421                           ;horloge.c: 50: _delay((unsigned long)((10)*(8000000/4000.0)));
 10422  001860  0E1A               	movlw	26
 10423  001862  6E0F               	movwf	??_delay_100ms& (0+255),c
 10424  001864  0EF8               	movlw	248
 10425  001866                     u7237:
 10426  001866  2EE8               	decfsz	wreg,f,c
 10427  001868  D7FE               	bra	u7237
 10428  00186A  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10429  00186C  D7FC               	bra	u7237
 10430  00186E  F000 F000          	nop2	
 10431                           
 10432                           ;horloge.c: 51: _delay((unsigned long)((10)*(8000000/4000.0)));
 10433  001872  0E1A               	movlw	26
 10434  001874  6E0F               	movwf	??_delay_100ms& (0+255),c
 10435  001876  0EF8               	movlw	248
 10436  001878                     u7247:
 10437  001878  2EE8               	decfsz	wreg,f,c
 10438  00187A  D7FE               	bra	u7247
 10439  00187C  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10440  00187E  D7FC               	bra	u7247
 10441  001880  F000 F000          	nop2	
 10442                           
 10443                           ;horloge.c: 52: _delay((unsigned long)((10)*(8000000/4000.0)));
 10444  001884  0E1A               	movlw	26
 10445  001886  6E0F               	movwf	??_delay_100ms& (0+255),c
 10446  001888  0EF8               	movlw	248
 10447  00188A                     u7257:
 10448  00188A  2EE8               	decfsz	wreg,f,c
 10449  00188C  D7FE               	bra	u7257
 10450  00188E  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10451  001890  D7FC               	bra	u7257
 10452  001892  F000 F000          	nop2	
 10453                           
 10454                           ;horloge.c: 53: _delay((unsigned long)((10)*(8000000/4000.0)));
 10455  001896  0E1A               	movlw	26
 10456  001898  6E0F               	movwf	??_delay_100ms& (0+255),c
 10457  00189A  0EF8               	movlw	248
 10458  00189C                     u7267:
 10459  00189C  2EE8               	decfsz	wreg,f,c
 10460  00189E  D7FE               	bra	u7267
 10461  0018A0  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10462  0018A2  D7FC               	bra	u7267
 10463  0018A4  F000 F000          	nop2	
 10464                           
 10465                           ;horloge.c: 54: _delay((unsigned long)((10)*(8000000/4000.0)));
 10466  0018A8  0E1A               	movlw	26
 10467  0018AA  6E0F               	movwf	??_delay_100ms& (0+255),c
 10468  0018AC  0EF8               	movlw	248
 10469  0018AE                     u7277:
 10470  0018AE  2EE8               	decfsz	wreg,f,c
 10471  0018B0  D7FE               	bra	u7277
 10472  0018B2  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10473  0018B4  D7FC               	bra	u7277
 10474  0018B6  F000 F000          	nop2	
 10475                           
 10476                           ;horloge.c: 55: _delay((unsigned long)((10)*(8000000/4000.0)));
 10477  0018BA  0E1A               	movlw	26
 10478  0018BC  6E0F               	movwf	??_delay_100ms& (0+255),c
 10479  0018BE  0EF8               	movlw	248
 10480  0018C0                     u7287:
 10481  0018C0  2EE8               	decfsz	wreg,f,c
 10482  0018C2  D7FE               	bra	u7287
 10483  0018C4  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10484  0018C6  D7FC               	bra	u7287
 10485  0018C8  F000 F000          	nop2	
 10486                           
 10487                           ;horloge.c: 56: _delay((unsigned long)((10)*(8000000/4000.0)));
 10488  0018CC  0E1A               	movlw	26
 10489  0018CE  6E0F               	movwf	??_delay_100ms& (0+255),c
 10490  0018D0  0EF8               	movlw	248
 10491  0018D2                     u7297:
 10492  0018D2  2EE8               	decfsz	wreg,f,c
 10493  0018D4  D7FE               	bra	u7297
 10494  0018D6  2E0F               	decfsz	??_delay_100ms& (0+255),f,c
 10495  0018D8  D7FC               	bra	u7297
 10496  0018DA  F000 F000          	nop2	
 10497  0018DE  0012               	return		;funcret
 10498  0018E0                     __end_of_delay_100ms:
 10499                           	opt stack 0
 10500                           tblptru	equ	0xFF8
 10501                           tblptrh	equ	0xFF7
 10502                           tblptrl	equ	0xFF6
 10503                           tablat	equ	0xFF5
 10504                           prodh	equ	0xFF4
 10505                           prodl	equ	0xFF3
 10506                           intcon	equ	0xFF2
 10507                           intcon2	equ	0xFF1
 10508                           intcon3	equ	0xFF0
 10509                           postinc0	equ	0xFEE
 10510                           wreg	equ	0xFE8
 10511                           indf1	equ	0xFE7
 10512                           postdec1	equ	0xFE5
 10513                           fsr1h	equ	0xFE2
 10514                           fsr1l	equ	0xFE1
 10515                           indf2	equ	0xFDF
 10516                           postinc2	equ	0xFDE
 10517                           postdec2	equ	0xFDD
 10518                           fsr2h	equ	0xFDA
 10519                           fsr2l	equ	0xFD9
 10520                           status	equ	0xFD8
 10521                           
 10522 ;; *************** function _IRQ_Execution *****************
 10523 ;; Defined at:
 10524 ;;		line 40 in file "interrupt.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;  IRQ_Indice      1    wreg     unsigned char 
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;  IRQ_Indice      1   17[COMRAM] unsigned char 
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  1    wreg      void 
 10531 ;; Registers used:
 10532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10533 ;; Tracked objects:
 10534 ;;		On entry : 3F/2
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10538 ;;      Params:         0       0       0       0
 10539 ;;      Locals:         1       0       0       0
 10540 ;;      Temps:          0       0       0       0
 10541 ;;      Totals:         1       0       0       0
 10542 ;;Total ram usage:        1 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:   14
 10545 ;; This function calls:
 10546 ;;		_IRQ_ADC
 10547 ;;		_IRQ_CAPOT
 10548 ;;		_IRQ_I_MOTEUR_1
 10549 ;;		_IRQ_I_MOTEUR_2
 10550 ;;		_IRQ_PION_Metal_Apparait
 10551 ;;		_IRQ_PION_Metal_Disparait
 10552 ;;		_IRQ_PWM
 10553 ;;		_IRQ_TIMER2
 10554 ;;		_IRQ_TIMER_0
 10555 ;;		_IRQ_TIMER_5
 10556 ;; This function is called by:
 10557 ;;		_EUSART1_RX_T3_LOCAL
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           	psect	text55
 10562  001ECA                     __ptext55:
 10563                           	opt stack 0
 10564  001ECA                     _IRQ_Execution:
 10565                           	opt stack 12
 10566                           
 10567                           ;incstack = 0
 10568                           ;IRQ_Execution@IRQ_Indice stored from wreg
 10569  001ECA  6E12               	movwf	IRQ_Execution@IRQ_Indice,c
 10570                           
 10571                           ;interrupt.c: 62: break;
 10572                           
 10573                           ;interrupt.c: 60: break;
 10574                           
 10575                           ;interrupt.c: 58: break;
 10576                           
 10577                           ;interrupt.c: 56: break;
 10578                           
 10579                           ;interrupt.c: 54: break;
 10580                           
 10581                           ;interrupt.c: 52: break;
 10582                           
 10583                           ;interrupt.c: 50: break;
 10584                           
 10585                           ;interrupt.c: 48: break;
 10586                           
 10587                           ;interrupt.c: 46: break;
 10588                           
 10589                           ;interrupt.c: 44: break;
 10590                           
 10591                           ;interrupt.c: 41: switch (IRQ_Indice) {
 10592  001ECC  5012               	movf	IRQ_Execution@IRQ_Indice,w,c
 10593                           
 10594                           ; Switch size 1, requested type "speed"
 10595                           ; Number of cases is 10, Range of values is 0 to 9
 10596                           ; switch strategies available:
 10597                           ; Name         Instructions Cycles
 10598                           ; simple_byte           31    16 (average)
 10599                           ;	Chosen strategy is simple_byte
 10600  001ECE  E102 EF7D  F013    	bz	_IRQ_CAPOT
 10601  001ED4  0A01               	xorlw	1	; case 1
 10602  001ED6  E102 EF99  F012    	bz	_IRQ_I_MOTEUR_1
 10603  001EDC  0A03               	xorlw	3	; case 2
 10604  001EDE  E102 EF8E  F012    	bz	_IRQ_I_MOTEUR_2
 10605  001EE4  0A01               	xorlw	1	; case 3
 10606  001EE6  E102 EF11  F012    	bz	_IRQ_PION_Metal_Apparait
 10607  001EEC  0A07               	xorlw	7	; case 4
 10608  001EEE  E102 EF76  F012    	bz	_IRQ_PION_Metal_Disparait
 10609  001EF4  0A01               	xorlw	1	; case 5
 10610  001EF6  E102 EF0D  F00F    	bz	_IRQ_TIMER_0
 10611  001EFC  0A03               	xorlw	3	; case 6
 10612  001EFE  E102 EF8C  F013    	bz	_IRQ_TIMER2
 10613  001F04  0A01               	xorlw	1	; case 7
 10614  001F06  E102 EFA5  F00D    	bz	_IRQ_TIMER_5
 10615  001F0C  0A0F               	xorlw	15	; case 8
 10616  001F0E  E102 EF0A  F007    	bz	_IRQ_ADC
 10617  001F14  0A01               	xorlw	1	; case 9
 10618  001F16  E102 EF9F  F013    	bz	_IRQ_PWM
 10619  001F1C  0012               	return		;funcret
 10620  001F1E                     __end_of_IRQ_Execution:
 10621                           	opt stack 0
 10622                           tblptru	equ	0xFF8
 10623                           tblptrh	equ	0xFF7
 10624                           tblptrl	equ	0xFF6
 10625                           tablat	equ	0xFF5
 10626                           prodh	equ	0xFF4
 10627                           prodl	equ	0xFF3
 10628                           intcon	equ	0xFF2
 10629                           intcon2	equ	0xFF1
 10630                           intcon3	equ	0xFF0
 10631                           postinc0	equ	0xFEE
 10632                           wreg	equ	0xFE8
 10633                           indf1	equ	0xFE7
 10634                           postdec1	equ	0xFE5
 10635                           fsr1h	equ	0xFE2
 10636                           fsr1l	equ	0xFE1
 10637                           indf2	equ	0xFDF
 10638                           postinc2	equ	0xFDE
 10639                           postdec2	equ	0xFDD
 10640                           fsr2h	equ	0xFDA
 10641                           fsr2l	equ	0xFD9
 10642                           status	equ	0xFD8
 10643                           
 10644 ;; *************** function _IRQ_TIMER_5 *****************
 10645 ;; Defined at:
 10646 ;;		line 409 in file "interrupt.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;		None
 10649 ;; Auto vars:     Size  Location     Type
 10650 ;;		None
 10651 ;; Return value:  Size  Location     Type
 10652 ;;                  1    wreg      void 
 10653 ;; Registers used:
 10654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10655 ;; Tracked objects:
 10656 ;;		On entry : 0/2
 10657 ;;		On exit  : 0/0
 10658 ;;		Unchanged: 0/0
 10659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10660 ;;      Params:         0       0       0       0
 10661 ;;      Locals:         0       0       0       0
 10662 ;;      Temps:          0       0       0       0
 10663 ;;      Totals:         0       0       0       0
 10664 ;;Total ram usage:        0 bytes
 10665 ;; Hardware stack levels used:    1
 10666 ;; Hardware stack levels required when called:   13
 10667 ;; This function calls:
 10668 ;;		_Alarme_On
 10669 ;;		_Buzzer_Etat
 10670 ;;		_Etat_Update
 10671 ;;		_TIMER5_Off
 10672 ;; This function is called by:
 10673 ;;		_IRQ_Execution
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           	psect	text56
 10678  001B4A                     __ptext56:
 10679                           	opt stack 0
 10680  001B4A                     _IRQ_TIMER_5:
 10681                           	opt stack 12
 10682                           
 10683                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 10684                           
 10685                           ;incstack = 0
 10686  001B4A  90A4               	bcf	4004,0,c	;volatile
 10687                           
 10688                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 10689  001B4C  0100               	movlb	0	; () banked
 10690  001B4E  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 10694  001B50  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 10695  001B52  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10696  001B54  E115               	bnz	l7442
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 10700  001B56  044D               	decf	_Mouvement_Startup,w,c
 10701  001B58  E001               	bz	l7428
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;interrupt.c: 418: nb_Pion += 1;
 10705  001B5A  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 10706  001B5C                     l7428:
 10707                           
 10708                           ; BSR set to: 0
 10709                           ;interrupt.c: 419: }
 10710                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 10711  001B5C  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 10712                           
 10713                           ; BSR set to: 0
 10714                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 10715  001B5E  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10716  001B60  E003               	bz	l607
 10717                           
 10718                           ; BSR set to: 0
 10719  001B62  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 10720  001B64  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 10721  001B66  E202               	bc	l7434
 10722  001B68                     l607:
 10723                           
 10724                           ; BSR set to: 0
 10725  001B68  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 10726  001B6A  0012               	return	
 10727  001B6C                     l7434:
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 10731  001B6C  0E00               	movlw	0
 10732  001B6E  EC4F  F013         	call	_Buzzer_Etat
 10733                           
 10734                           ;interrupt.c: 430: P4_busy = 0;
 10735  001B72  0100               	movlb	0	; () banked
 10736  001B74  6BAC               	clrf	_P4_busy& (0+255),b
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;interrupt.c: 431: TIMER5_Off();
 10740  001B76  EC6F  F013         	call	_TIMER5_Off	;wreg free
 10741                           
 10742                           ;interrupt.c: 432: Etat_Update(0);
 10743  001B7A  0E00               	movlw	0
 10744  001B7C  EF20  F012         	goto	_Etat_Update
 10745  001B80                     l7442:
 10746                           
 10747                           ; BSR set to: 0
 10748  001B80  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 10749  001B82  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 10750  001B84  A4D8               	btfss	status,2,c
 10751  001B86  0012               	return	
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 10755  001B88  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 10756  001B8A  E10E               	bnz	l610
 10757                           
 10758                           ; BSR set to: 0
 10759  001B8C  B480               	btfsc	3968,2,c	;volatile
 10760  001B8E  D00C               	goto	l610
 10761                           
 10762                           ; BSR set to: 0
 10763  001B90  044D               	decf	_Mouvement_Startup,w,c
 10764  001B92  E10A               	bnz	l610
 10765                           
 10766                           ; BSR set to: 0
 10767                           ;interrupt.c: 460: if (Option_Multitas==1){
 10768  001B94  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 10769  001B96  D004               	goto	l7454
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;interrupt.c: 461: Alarme_On(11);
 10773  001B98  0E0B               	movlw	11
 10774  001B9A  EC30  F013         	call	_Alarme_On
 10775                           
 10776                           ;interrupt.c: 462: }else{
 10777  001B9E  D008               	goto	l7458
 10778  001BA0                     l7454:
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;interrupt.c: 463: Alarme_On(6);
 10782  001BA0  0E06               	movlw	6
 10783  001BA2  EC30  F013         	call	_Alarme_On
 10784  001BA6  D004               	goto	l7458
 10785  001BA8                     l610:
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;interrupt.c: 467: P4_busy = 0;
 10789  001BA8  6BAC               	clrf	_P4_busy& (0+255),b
 10790                           
 10791                           ; BSR set to: 0
 10792                           ;interrupt.c: 468: Etat_Update(6);
 10793  001BAA  0E06               	movlw	6
 10794  001BAC  EC20  F012         	call	_Etat_Update
 10795  001BB0                     l7458:
 10796                           
 10797                           ;interrupt.c: 471: }
 10798                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 10799  001BB0  0E00               	movlw	0
 10800  001BB2  EC4F  F013         	call	_Buzzer_Etat
 10801                           
 10802                           ;interrupt.c: 474: TIMER5_Off();
 10803  001BB6  EF6F  F013         	goto	_TIMER5_Off	;wreg free
 10804  001BBA                     __end_of_IRQ_TIMER_5:
 10805                           	opt stack 0
 10806                           tblptru	equ	0xFF8
 10807                           tblptrh	equ	0xFF7
 10808                           tblptrl	equ	0xFF6
 10809                           tablat	equ	0xFF5
 10810                           prodh	equ	0xFF4
 10811                           prodl	equ	0xFF3
 10812                           intcon	equ	0xFF2
 10813                           intcon2	equ	0xFF1
 10814                           intcon3	equ	0xFF0
 10815                           postinc0	equ	0xFEE
 10816                           wreg	equ	0xFE8
 10817                           indf1	equ	0xFE7
 10818                           postdec1	equ	0xFE5
 10819                           fsr1h	equ	0xFE2
 10820                           fsr1l	equ	0xFE1
 10821                           indf2	equ	0xFDF
 10822                           postinc2	equ	0xFDE
 10823                           postdec2	equ	0xFDD
 10824                           fsr2h	equ	0xFDA
 10825                           fsr2l	equ	0xFD9
 10826                           status	equ	0xFD8
 10827                           
 10828 ;; *************** function _IRQ_TIMER_0 *****************
 10829 ;; Defined at:
 10830 ;;		line 361 in file "interrupt.c"
 10831 ;; Parameters:    Size  Location     Type
 10832 ;;		None
 10833 ;; Auto vars:     Size  Location     Type
 10834 ;;		None
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		wreg, status,2, status,0, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/2
 10841 ;;		On exit  : 3F/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 10844 ;;      Params:         0       0       0       0
 10845 ;;      Locals:         0       0       0       0
 10846 ;;      Temps:          0       0       0       0
 10847 ;;      Totals:         0       0       0       0
 10848 ;;Total ram usage:        0 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:   11
 10851 ;; This function calls:
 10852 ;;		_Surveillance_Consommation_Moteur_1_Activer
 10853 ;;		_Surveillance_Consommation_Moteur_2_Activer
 10854 ;; This function is called by:
 10855 ;;		_IRQ_Execution
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           	psect	text57
 10860  001E1A                     __ptext57:
 10861                           	opt stack 0
 10862  001E1A                     _IRQ_TIMER_0:
 10863                           	opt stack 14
 10864                           
 10865                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 10866                           
 10867                           ;incstack = 0
 10868  001E1A  94F2               	bcf	intcon,2,c	;volatile
 10869                           
 10870                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 10871  001E1C  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 10872                           
 10873                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 10874  001E1E  0100               	movlb	0	; () banked
 10875  001E20  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 10876                           
 10877                           ;interrupt.c: 366: delay_s_counter += 1;
 10878  001E22  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 10882  001E24  0E02               	movlw	2
 10883  001E26  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 10884  001E28  E01C               	bz	l7414
 10885  001E2A  0012               	return	
 10886  001E2C                     l7394:
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 10890  001E2C  ECF5  F012         	call	_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 10894  001E30  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 10895  001E32  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10896  001E34  E203               	bc	l588
 10897  001E36                     l7398:
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;interrupt.c: 381: consigne = Consigne_Max;
 10901  001E36  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 10902                           
 10903                           ;interrupt.c: 382: } else {
 10904  001E3A  0012               	return	
 10905  001E3C                     l588:
 10906                           
 10907                           ; BSR set to: 0
 10908                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 10909  001E3C  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 10910  001E40  0012               	return	
 10911  001E42                     l7400:
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 10915  001E42  ECEC  F012         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 10919  001E46  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 10920  001E48  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10921  001E4A  E3F5               	bnc	l7398
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 10925  001E4C  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 10926  001E50  0012               	return	
 10927  001E52                     l7406:
 10928                           
 10929                           ; BSR set to: 0
 10930                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 10931  001E52  ECEC  F012         	call	_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 10935  001E56  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 10936  001E58  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 10937  001E5A  E3ED               	bnc	l7398
 10938                           
 10939                           ; BSR set to: 0
 10940                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 10941  001E5C  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 10942  001E60  0012               	return	
 10943  001E62                     l7414:
 10944                           
 10945                           ; BSR set to: 0
 10946  001E62  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 10947                           
 10948                           ; Switch size 1, requested type "speed"
 10949                           ; Number of cases is 3, Range of values is 1 to 3
 10950                           ; switch strategies available:
 10951                           ; Name         Instructions Cycles
 10952                           ; simple_byte           10     6 (average)
 10953                           ;	Chosen strategy is simple_byte
 10954  001E64  0A01               	xorlw	1	; case 1
 10955  001E66  E0E2               	bz	l7394
 10956  001E68  0A03               	xorlw	3	; case 2
 10957  001E6A  E0EB               	bz	l7400
 10958  001E6C  0A01               	xorlw	1	; case 3
 10959  001E6E  E0F1               	bz	l7406
 10960                           
 10961                           ; BSR set to: 0
 10962  001E70  0012               	return		;funcret
 10963  001E72                     __end_of_IRQ_TIMER_0:
 10964                           	opt stack 0
 10965                           tblptru	equ	0xFF8
 10966                           tblptrh	equ	0xFF7
 10967                           tblptrl	equ	0xFF6
 10968                           tablat	equ	0xFF5
 10969                           prodh	equ	0xFF4
 10970                           prodl	equ	0xFF3
 10971                           intcon	equ	0xFF2
 10972                           intcon2	equ	0xFF1
 10973                           intcon3	equ	0xFF0
 10974                           postinc0	equ	0xFEE
 10975                           wreg	equ	0xFE8
 10976                           indf1	equ	0xFE7
 10977                           postdec1	equ	0xFE5
 10978                           fsr1h	equ	0xFE2
 10979                           fsr1l	equ	0xFE1
 10980                           indf2	equ	0xFDF
 10981                           postinc2	equ	0xFDE
 10982                           postdec2	equ	0xFDD
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8
 10986                           
 10987 ;; *************** function _Surveillance_Consommation_Moteur_2_Activer *****************
 10988 ;; Defined at:
 10989 ;;		line 868 in file "interrupt.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;		None
 10992 ;; Auto vars:     Size  Location     Type
 10993 ;;		None
 10994 ;; Return value:  Size  Location     Type
 10995 ;;                  1    wreg      void 
 10996 ;; Registers used:
 10997 ;;		wreg, status,2, status,0
 10998 ;; Tracked objects:
 10999 ;;		On entry : 0/0
 11000 ;;		On exit  : 3F/0
 11001 ;;		Unchanged: 0/0
 11002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11003 ;;      Params:         0       0       0       0
 11004 ;;      Locals:         0       0       0       0
 11005 ;;      Temps:          0       0       0       0
 11006 ;;      Totals:         0       0       0       0
 11007 ;;Total ram usage:        0 bytes
 11008 ;; Hardware stack levels used:    1
 11009 ;; Hardware stack levels required when called:   10
 11010 ;; This function calls:
 11011 ;;		Nothing
 11012 ;; This function is called by:
 11013 ;;		_IRQ_TIMER_0
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           	psect	text58
 11018  0025D8                     __ptext58:
 11019                           	opt stack 0
 11020  0025D8                     _Surveillance_Consommation_Moteur_2_Activer:
 11021                           	opt stack 14
 11022                           
 11023                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 11024                           
 11025                           ; BSR set to: 0
 11026                           ;incstack = 0
 11027  0025D8  0100               	movlb	0	; () banked
 11028  0025DA  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 11029  0025DC  B4D8               	btfsc	status,2,c
 11030  0025DE  0012               	return	
 11031                           
 11032                           ; BSR set to: 0
 11033                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 11034  0025E0  0E01               	movlw	1
 11035  0025E2  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 11039  0025E4  92F0               	bcf	intcon3,1,c	;volatile
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 11043  0025E6  88F0               	bsf	intcon3,4,c	;volatile
 11044                           
 11045                           ; BSR set to: 0
 11046  0025E8  0C01               	retlw	1	;funcret
 11047  0025EA                     __end_of_Surveillance_Consommation_Moteur_2_Activer:
 11048                           	opt stack 0
 11049                           tblptru	equ	0xFF8
 11050                           tblptrh	equ	0xFF7
 11051                           tblptrl	equ	0xFF6
 11052                           tablat	equ	0xFF5
 11053                           prodh	equ	0xFF4
 11054                           prodl	equ	0xFF3
 11055                           intcon	equ	0xFF2
 11056                           intcon2	equ	0xFF1
 11057                           intcon3	equ	0xFF0
 11058                           postinc0	equ	0xFEE
 11059                           wreg	equ	0xFE8
 11060                           indf1	equ	0xFE7
 11061                           postdec1	equ	0xFE5
 11062                           fsr1h	equ	0xFE2
 11063                           fsr1l	equ	0xFE1
 11064                           indf2	equ	0xFDF
 11065                           postinc2	equ	0xFDE
 11066                           postdec2	equ	0xFDD
 11067                           fsr2h	equ	0xFDA
 11068                           fsr2l	equ	0xFD9
 11069                           status	equ	0xFD8
 11070                           
 11071 ;; *************** function _Surveillance_Consommation_Moteur_1_Activer *****************
 11072 ;; Defined at:
 11073 ;;		line 852 in file "interrupt.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;		None
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  1    wreg      void 
 11080 ;; Registers used:
 11081 ;;		wreg, status,2, status,0
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 3F/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11087 ;;      Params:         0       0       0       0
 11088 ;;      Locals:         0       0       0       0
 11089 ;;      Temps:          0       0       0       0
 11090 ;;      Totals:         0       0       0       0
 11091 ;;Total ram usage:        0 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:   10
 11094 ;; This function calls:
 11095 ;;		Nothing
 11096 ;; This function is called by:
 11097 ;;		_IRQ_TIMER_0
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           	psect	text59
 11102  0025EA                     __ptext59:
 11103                           	opt stack 0
 11104  0025EA                     _Surveillance_Consommation_Moteur_1_Activer:
 11105                           	opt stack 14
 11106                           
 11107                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 11108                           
 11109                           ; BSR set to: 0
 11110                           ;incstack = 0
 11111  0025EA  0100               	movlb	0	; () banked
 11112  0025EC  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 11113  0025EE  B4D8               	btfsc	status,2,c
 11114  0025F0  0012               	return	
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 11118  0025F2  0E01               	movlw	1
 11119  0025F4  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 11120                           
 11121                           ; BSR set to: 0
 11122                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 11123  0025F6  90F0               	bcf	intcon3,0,c	;volatile
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 11127  0025F8  86F0               	bsf	intcon3,3,c	;volatile
 11128                           
 11129                           ; BSR set to: 0
 11130  0025FA  0C01               	retlw	1	;funcret
 11131  0025FC                     __end_of_Surveillance_Consommation_Moteur_1_Activer:
 11132                           	opt stack 0
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           intcon2	equ	0xFF1
 11141                           intcon3	equ	0xFF0
 11142                           postinc0	equ	0xFEE
 11143                           wreg	equ	0xFE8
 11144                           indf1	equ	0xFE7
 11145                           postdec1	equ	0xFE5
 11146                           fsr1h	equ	0xFE2
 11147                           fsr1l	equ	0xFE1
 11148                           indf2	equ	0xFDF
 11149                           postinc2	equ	0xFDE
 11150                           postdec2	equ	0xFDD
 11151                           fsr2h	equ	0xFDA
 11152                           fsr2l	equ	0xFD9
 11153                           status	equ	0xFD8
 11154                           
 11155 ;; *************** function _IRQ_TIMER2 *****************
 11156 ;; Defined at:
 11157 ;;		line 883 in file "interrupt.c"
 11158 ;; Parameters:    Size  Location     Type
 11159 ;;		None
 11160 ;; Auto vars:     Size  Location     Type
 11161 ;;		None
 11162 ;; Return value:  Size  Location     Type
 11163 ;;                  1    wreg      void 
 11164 ;; Registers used:
 11165 ;;		None
 11166 ;; Tracked objects:
 11167 ;;		On entry : 0/2
 11168 ;;		On exit  : 0/0
 11169 ;;		Unchanged: 0/0
 11170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11171 ;;      Params:         0       0       0       0
 11172 ;;      Locals:         0       0       0       0
 11173 ;;      Temps:          0       0       0       0
 11174 ;;      Totals:         0       0       0       0
 11175 ;;Total ram usage:        0 bytes
 11176 ;; Hardware stack levels used:    1
 11177 ;; Hardware stack levels required when called:   10
 11178 ;; This function calls:
 11179 ;;		Nothing
 11180 ;; This function is called by:
 11181 ;;		_IRQ_Execution
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           	psect	text60
 11186  002718                     __ptext60:
 11187                           	opt stack 0
 11188  002718                     _IRQ_TIMER2:
 11189                           	opt stack 15
 11190                           
 11191                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;incstack = 0
 11195  002718  929E               	bcf	3998,1,c	;volatile
 11196                           
 11197                           ;interrupt.c: 887: GODONE = 1;
 11198  00271A  82C2               	bsf	4034,1,c	;volatile
 11199  00271C  0012               	return		;funcret
 11200  00271E                     __end_of_IRQ_TIMER2:
 11201                           	opt stack 0
 11202                           tblptru	equ	0xFF8
 11203                           tblptrh	equ	0xFF7
 11204                           tblptrl	equ	0xFF6
 11205                           tablat	equ	0xFF5
 11206                           prodh	equ	0xFF4
 11207                           prodl	equ	0xFF3
 11208                           intcon	equ	0xFF2
 11209                           intcon2	equ	0xFF1
 11210                           intcon3	equ	0xFF0
 11211                           postinc0	equ	0xFEE
 11212                           wreg	equ	0xFE8
 11213                           indf1	equ	0xFE7
 11214                           postdec1	equ	0xFE5
 11215                           fsr1h	equ	0xFE2
 11216                           fsr1l	equ	0xFE1
 11217                           indf2	equ	0xFDF
 11218                           postinc2	equ	0xFDE
 11219                           postdec2	equ	0xFDD
 11220                           fsr2h	equ	0xFDA
 11221                           fsr2l	equ	0xFD9
 11222                           status	equ	0xFD8
 11223                           
 11224 ;; *************** function _IRQ_PWM *****************
 11225 ;; Defined at:
 11226 ;;		line 481 in file "interrupt.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;		None
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;		None
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		None
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/2
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11240 ;;      Params:         0       0       0       0
 11241 ;;      Locals:         0       0       0       0
 11242 ;;      Temps:          0       0       0       0
 11243 ;;      Totals:         0       0       0       0
 11244 ;;Total ram usage:        0 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; Hardware stack levels required when called:   10
 11247 ;; This function calls:
 11248 ;;		Nothing
 11249 ;; This function is called by:
 11250 ;;		_IRQ_Execution
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           	psect	text61
 11255  00273E                     __ptext61:
 11256                           	opt stack 0
 11257  00273E                     _IRQ_PWM:
 11258                           	opt stack 15
 11259                           
 11260                           ;interrupt.c: 483: PTIF = 0;
 11261                           
 11262                           ;incstack = 0
 11263  00273E  98A4               	bcf	4004,4,c	;volatile
 11264  002740  0012               	return		;funcret
 11265  002742                     __end_of_IRQ_PWM:
 11266                           	opt stack 0
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           intcon2	equ	0xFF1
 11275                           intcon3	equ	0xFF0
 11276                           postinc0	equ	0xFEE
 11277                           wreg	equ	0xFE8
 11278                           indf1	equ	0xFE7
 11279                           postdec1	equ	0xFE5
 11280                           fsr1h	equ	0xFE2
 11281                           fsr1l	equ	0xFE1
 11282                           indf2	equ	0xFDF
 11283                           postinc2	equ	0xFDE
 11284                           postdec2	equ	0xFDD
 11285                           fsr2h	equ	0xFDA
 11286                           fsr2l	equ	0xFD9
 11287                           status	equ	0xFD8
 11288                           
 11289 ;; *************** function _IRQ_PION_Metal_Disparait *****************
 11290 ;; Defined at:
 11291 ;;		line 287 in file "interrupt.c"
 11292 ;; Parameters:    Size  Location     Type
 11293 ;;		None
 11294 ;; Auto vars:     Size  Location     Type
 11295 ;;		None
 11296 ;; Return value:  Size  Location     Type
 11297 ;;                  1    wreg      void 
 11298 ;; Registers used:
 11299 ;;		wreg, status,2, status,0, cstack
 11300 ;; Tracked objects:
 11301 ;;		On entry : 0/2
 11302 ;;		On exit  : 3F/0
 11303 ;;		Unchanged: 0/0
 11304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11305 ;;      Params:         0       0       0       0
 11306 ;;      Locals:         0       0       0       0
 11307 ;;      Temps:          0       0       0       0
 11308 ;;      Totals:         0       0       0       0
 11309 ;;Total ram usage:        0 bytes
 11310 ;; Hardware stack levels used:    1
 11311 ;; Hardware stack levels required when called:   11
 11312 ;; This function calls:
 11313 ;;		_Buzzer_Etat
 11314 ;;		_TIMER5_Off
 11315 ;; This function is called by:
 11316 ;;		_IRQ_Execution
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text62
 11321  0024EC                     __ptext62:
 11322                           	opt stack 0
 11323  0024EC                     _IRQ_PION_Metal_Disparait:
 11324                           	opt stack 14
 11325                           
 11326                           ;interrupt.c: 289: Buzzer_Etat((unsigned char) 0);
 11327                           
 11328                           ;incstack = 0
 11329  0024EC  0E00               	movlw	0
 11330  0024EE  EC4F  F013         	call	_Buzzer_Etat
 11331                           
 11332                           ;interrupt.c: 290: PIE3bits.IC2QEIE = 0;
 11333  0024F2  94A3               	bcf	4003,2,c	;volatile
 11334                           
 11335                           ;interrupt.c: 291: PIR3bits.IC2QEIF = 0;
 11336  0024F4  94A4               	bcf	4004,2,c	;volatile
 11337                           
 11338                           ;interrupt.c: 293: TIMER5_Off();
 11339  0024F6  EC6F  F013         	call	_TIMER5_Off	;wreg free
 11340                           
 11341                           ;interrupt.c: 295: nb_100ms_Timer_5 = 0;
 11342  0024FA  0100               	movlb	0	; () banked
 11343  0024FC  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;interrupt.c: 299: nb_100ms_platine = nb_100ms_platine_backup;
 11347  0024FE  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 11348                           
 11349                           ; BSR set to: 0
 11350                           ;interrupt.c: 301: Mouvement_Startup = 0;
 11351  002502  6A4D               	clrf	_Mouvement_Startup,c
 11352                           
 11353                           ; BSR set to: 0
 11354  002504  0012               	return		;funcret
 11355  002506                     __end_of_IRQ_PION_Metal_Disparait:
 11356                           	opt stack 0
 11357                           tblptru	equ	0xFF8
 11358                           tblptrh	equ	0xFF7
 11359                           tblptrl	equ	0xFF6
 11360                           tablat	equ	0xFF5
 11361                           prodh	equ	0xFF4
 11362                           prodl	equ	0xFF3
 11363                           intcon	equ	0xFF2
 11364                           intcon2	equ	0xFF1
 11365                           intcon3	equ	0xFF0
 11366                           postinc0	equ	0xFEE
 11367                           wreg	equ	0xFE8
 11368                           indf1	equ	0xFE7
 11369                           postdec1	equ	0xFE5
 11370                           fsr1h	equ	0xFE2
 11371                           fsr1l	equ	0xFE1
 11372                           indf2	equ	0xFDF
 11373                           postinc2	equ	0xFDE
 11374                           postdec2	equ	0xFDD
 11375                           fsr2h	equ	0xFDA
 11376                           fsr2l	equ	0xFD9
 11377                           status	equ	0xFD8
 11378                           
 11379 ;; *************** function _TIMER5_Off *****************
 11380 ;; Defined at:
 11381 ;;		line 263 in file "timer.c"
 11382 ;; Parameters:    Size  Location     Type
 11383 ;;		None
 11384 ;; Auto vars:     Size  Location     Type
 11385 ;;		None
 11386 ;; Return value:  Size  Location     Type
 11387 ;;                  1    wreg      void 
 11388 ;; Registers used:
 11389 ;;		None
 11390 ;; Tracked objects:
 11391 ;;		On entry : 0/0
 11392 ;;		On exit  : 0/0
 11393 ;;		Unchanged: 0/0
 11394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11395 ;;      Params:         0       0       0       0
 11396 ;;      Locals:         0       0       0       0
 11397 ;;      Temps:          0       0       0       0
 11398 ;;      Totals:         0       0       0       0
 11399 ;;Total ram usage:        0 bytes
 11400 ;; Hardware stack levels used:    1
 11401 ;; Hardware stack levels required when called:   10
 11402 ;; This function calls:
 11403 ;;		Nothing
 11404 ;; This function is called by:
 11405 ;;		_IRQ_PION_Metal_Disparait
 11406 ;;		_IRQ_TIMER_5
 11407 ;; This function uses a non-reentrant model
 11408 ;;
 11409                           
 11410                           	psect	text63
 11411  0026DE                     __ptext63:
 11412                           	opt stack 0
 11413  0026DE                     _TIMER5_Off:
 11414                           	opt stack 14
 11415                           
 11416                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;incstack = 0
 11420  0026DE  90B7               	bcf	4023,0,c	;volatile
 11421                           
 11422                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 11423  0026E0  90A4               	bcf	4004,0,c	;volatile
 11424                           
 11425                           ;timer.c: 268: TMR5L = 0;
 11426  0026E2  6A87               	clrf	3975,c	;volatile
 11427                           
 11428                           ;timer.c: 269: TMR5H = 0;
 11429  0026E4  6A88               	clrf	3976,c	;volatile
 11430  0026E6  0012               	return		;funcret
 11431  0026E8                     __end_of_TIMER5_Off:
 11432                           	opt stack 0
 11433                           tblptru	equ	0xFF8
 11434                           tblptrh	equ	0xFF7
 11435                           tblptrl	equ	0xFF6
 11436                           tablat	equ	0xFF5
 11437                           prodh	equ	0xFF4
 11438                           prodl	equ	0xFF3
 11439                           intcon	equ	0xFF2
 11440                           intcon2	equ	0xFF1
 11441                           intcon3	equ	0xFF0
 11442                           postinc0	equ	0xFEE
 11443                           wreg	equ	0xFE8
 11444                           indf1	equ	0xFE7
 11445                           postdec1	equ	0xFE5
 11446                           fsr1h	equ	0xFE2
 11447                           fsr1l	equ	0xFE1
 11448                           indf2	equ	0xFDF
 11449                           postinc2	equ	0xFDE
 11450                           postdec2	equ	0xFDD
 11451                           fsr2h	equ	0xFDA
 11452                           fsr2l	equ	0xFD9
 11453                           status	equ	0xFD8
 11454                           
 11455 ;; *************** function _IRQ_PION_Metal_Apparait *****************
 11456 ;; Defined at:
 11457 ;;		line 268 in file "interrupt.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;		None
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;		None
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  1    wreg      void 
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11471 ;;      Params:         0       0       0       0
 11472 ;;      Locals:         0       0       0       0
 11473 ;;      Temps:          0       0       0       0
 11474 ;;      Totals:         0       0       0       0
 11475 ;;Total ram usage:        0 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:   11
 11478 ;; This function calls:
 11479 ;;		_Buzzer_Etat
 11480 ;;		_TIMER5_On
 11481 ;; This function is called by:
 11482 ;;		_IRQ_Execution
 11483 ;;		_Detection_Pion_On
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           	psect	text64
 11488  002422                     __ptext64:
 11489                           	opt stack 0
 11490  002422                     _IRQ_PION_Metal_Apparait:
 11491                           	opt stack 14
 11492                           
 11493                           ;interrupt.c: 270: Buzzer_Etat((unsigned char) 1);
 11494                           
 11495                           ;incstack = 0
 11496  002422  0E01               	movlw	1
 11497  002424  EC4F  F013         	call	_Buzzer_Etat
 11498                           
 11499                           ;interrupt.c: 271: PIR3bits.IC1IF = 0;
 11500  002428  92A4               	bcf	4004,1,c	;volatile
 11501                           
 11502                           ;interrupt.c: 273: PIR3bits.IC2QEIF = 0;
 11503  00242A  94A4               	bcf	4004,2,c	;volatile
 11504                           
 11505                           ;interrupt.c: 274: if (PIE3bits.IC2QEIE == 1) {
 11506  00242C  A4A3               	btfss	4003,2,c	;volatile
 11507  00242E  D005               	goto	l577
 11508                           
 11509                           ;interrupt.c: 275: Alarme = 10;
 11510  002430  0E0A               	movlw	10
 11511  002432  0100               	movlb	0	; () banked
 11512  002434  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 11513                           
 11514                           ;interrupt.c: 276: } else {
 11515  002436  EFA1  F013         	goto	_TIMER5_On
 11516  00243A                     l577:
 11517                           
 11518                           ;interrupt.c: 278: PIE3bits.IC2QEIE = 1;
 11519  00243A  84A3               	bsf	4003,2,c	;volatile
 11520                           
 11521                           ;interrupt.c: 279: }
 11522                           ;interrupt.c: 281: TIMER5_On();
 11523  00243C  EFA1  F013         	goto	_TIMER5_On	;wreg free
 11524  002440                     __end_of_IRQ_PION_Metal_Apparait:
 11525                           	opt stack 0
 11526                           tblptru	equ	0xFF8
 11527                           tblptrh	equ	0xFF7
 11528                           tblptrl	equ	0xFF6
 11529                           tablat	equ	0xFF5
 11530                           prodh	equ	0xFF4
 11531                           prodl	equ	0xFF3
 11532                           intcon	equ	0xFF2
 11533                           intcon2	equ	0xFF1
 11534                           intcon3	equ	0xFF0
 11535                           postinc0	equ	0xFEE
 11536                           wreg	equ	0xFE8
 11537                           indf1	equ	0xFE7
 11538                           postdec1	equ	0xFE5
 11539                           fsr1h	equ	0xFE2
 11540                           fsr1l	equ	0xFE1
 11541                           indf2	equ	0xFDF
 11542                           postinc2	equ	0xFDE
 11543                           postdec2	equ	0xFDD
 11544                           fsr2h	equ	0xFDA
 11545                           fsr2l	equ	0xFD9
 11546                           status	equ	0xFD8
 11547                           
 11548 ;; *************** function _TIMER5_On *****************
 11549 ;; Defined at:
 11550 ;;		line 253 in file "timer.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;		None
 11553 ;; Auto vars:     Size  Location     Type
 11554 ;;		None
 11555 ;; Return value:  Size  Location     Type
 11556 ;;                  1    wreg      void 
 11557 ;; Registers used:
 11558 ;;		None
 11559 ;; Tracked objects:
 11560 ;;		On entry : 0/0
 11561 ;;		On exit  : 0/0
 11562 ;;		Unchanged: 0/0
 11563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11564 ;;      Params:         0       0       0       0
 11565 ;;      Locals:         0       0       0       0
 11566 ;;      Temps:          0       0       0       0
 11567 ;;      Totals:         0       0       0       0
 11568 ;;Total ram usage:        0 bytes
 11569 ;; Hardware stack levels used:    1
 11570 ;; Hardware stack levels required when called:   10
 11571 ;; This function calls:
 11572 ;;		Nothing
 11573 ;; This function is called by:
 11574 ;;		_IRQ_PION_Metal_Apparait
 11575 ;; This function uses a non-reentrant model
 11576 ;;
 11577                           
 11578                           	psect	text65
 11579  002742                     __ptext65:
 11580                           	opt stack 0
 11581  002742                     _TIMER5_On:
 11582                           	opt stack 14
 11583                           
 11584                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 11585                           
 11586                           ;incstack = 0
 11587  002742  80B7               	bsf	4023,0,c	;volatile
 11588  002744  0012               	return		;funcret
 11589  002746                     __end_of_TIMER5_On:
 11590                           	opt stack 0
 11591                           tblptru	equ	0xFF8
 11592                           tblptrh	equ	0xFF7
 11593                           tblptrl	equ	0xFF6
 11594                           tablat	equ	0xFF5
 11595                           prodh	equ	0xFF4
 11596                           prodl	equ	0xFF3
 11597                           intcon	equ	0xFF2
 11598                           intcon2	equ	0xFF1
 11599                           intcon3	equ	0xFF0
 11600                           postinc0	equ	0xFEE
 11601                           wreg	equ	0xFE8
 11602                           indf1	equ	0xFE7
 11603                           postdec1	equ	0xFE5
 11604                           fsr1h	equ	0xFE2
 11605                           fsr1l	equ	0xFE1
 11606                           indf2	equ	0xFDF
 11607                           postinc2	equ	0xFDE
 11608                           postdec2	equ	0xFDD
 11609                           fsr2h	equ	0xFDA
 11610                           fsr2l	equ	0xFD9
 11611                           status	equ	0xFD8
 11612                           
 11613 ;; *************** function _Buzzer_Etat *****************
 11614 ;; Defined at:
 11615 ;;		line 29 in file "interrupt.c"
 11616 ;; Parameters:    Size  Location     Type
 11617 ;;  Activation      1    wreg     unsigned char 
 11618 ;; Auto vars:     Size  Location     Type
 11619 ;;  Activation      1   14[COMRAM] unsigned char 
 11620 ;; Return value:  Size  Location     Type
 11621 ;;                  1    wreg      void 
 11622 ;; Registers used:
 11623 ;;		wreg, status,2, status,0
 11624 ;; Tracked objects:
 11625 ;;		On entry : 0/2
 11626 ;;		On exit  : 0/0
 11627 ;;		Unchanged: 0/0
 11628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11629 ;;      Params:         0       0       0       0
 11630 ;;      Locals:         1       0       0       0
 11631 ;;      Temps:          0       0       0       0
 11632 ;;      Totals:         1       0       0       0
 11633 ;;Total ram usage:        1 bytes
 11634 ;; Hardware stack levels used:    1
 11635 ;; Hardware stack levels required when called:   10
 11636 ;; This function calls:
 11637 ;;		Nothing
 11638 ;; This function is called by:
 11639 ;;		_Cycle
 11640 ;;		_IRQ_PION_Metal_Apparait
 11641 ;;		_IRQ_PION_Metal_Disparait
 11642 ;;		_IRQ_TIMER_5
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           	psect	text66
 11647  00269E                     __ptext66:
 11648                           	opt stack 0
 11649  00269E                     _Buzzer_Etat:
 11650                           	opt stack 14
 11651                           
 11652                           ;incstack = 0
 11653                           ;Buzzer_Etat@Activation stored from wreg
 11654  00269E  6E0F               	movwf	Buzzer_Etat@Activation,c
 11655                           
 11656                           ;interrupt.c: 30: if (Activation == 1) {
 11657  0026A0  040F               	decf	Buzzer_Etat@Activation,w,c
 11658  0026A2  E102               	bnz	l531
 11659                           
 11660                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 11661  0026A4  8C89               	bsf	3977,6,c	;volatile
 11662                           
 11663                           ;interrupt.c: 33: } else {
 11664  0026A6  0012               	return	
 11665  0026A8                     l531:
 11666                           
 11667                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 11668  0026A8  9C89               	bcf	3977,6,c	;volatile
 11669  0026AA  0012               	return		;funcret
 11670  0026AC                     __end_of_Buzzer_Etat:
 11671                           	opt stack 0
 11672                           tblptru	equ	0xFF8
 11673                           tblptrh	equ	0xFF7
 11674                           tblptrl	equ	0xFF6
 11675                           tablat	equ	0xFF5
 11676                           prodh	equ	0xFF4
 11677                           prodl	equ	0xFF3
 11678                           intcon	equ	0xFF2
 11679                           intcon2	equ	0xFF1
 11680                           intcon3	equ	0xFF0
 11681                           postinc0	equ	0xFEE
 11682                           wreg	equ	0xFE8
 11683                           indf1	equ	0xFE7
 11684                           postdec1	equ	0xFE5
 11685                           fsr1h	equ	0xFE2
 11686                           fsr1l	equ	0xFE1
 11687                           indf2	equ	0xFDF
 11688                           postinc2	equ	0xFDE
 11689                           postdec2	equ	0xFDD
 11690                           fsr2h	equ	0xFDA
 11691                           fsr2l	equ	0xFD9
 11692                           status	equ	0xFD8
 11693                           
 11694 ;; *************** function _IRQ_I_MOTEUR_2 *****************
 11695 ;; Defined at:
 11696 ;;		line 909 in file "interrupt.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;		None
 11699 ;; Auto vars:     Size  Location     Type
 11700 ;;		None
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      void 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/2
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11710 ;;      Params:         0       0       0       0
 11711 ;;      Locals:         0       0       0       0
 11712 ;;      Temps:          0       0       0       0
 11713 ;;      Totals:         0       0       0       0
 11714 ;;Total ram usage:        0 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:   10
 11717 ;; This function calls:
 11718 ;;		Nothing
 11719 ;; This function is called by:
 11720 ;;		_IRQ_Execution
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           	psect	text67
 11725  00251C                     __ptext67:
 11726                           	opt stack 0
 11727  00251C                     _IRQ_I_MOTEUR_2:
 11728                           	opt stack 15
 11729                           
 11730                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 11731                           
 11732                           ;incstack = 0
 11733  00251C  928B               	bcf	3979,1,c	;volatile
 11734                           
 11735                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 11736  00251E  D001               	goto	l7354
 11737  002520                     l699:
 11738  002520  F000               	nop	
 11739  002522                     l7354:
 11740  002522  50CC               	movf	4044,w,c	;volatile
 11741  002524  E1FD               	bnz	l699
 11742                           
 11743                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 11744  002526  828B               	bsf	3979,1,c	;volatile
 11745                           
 11746                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 11747  002528  748B               	btg	3979,2,c	;volatile
 11748                           
 11749                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 11750  00252A  92F0               	bcf	intcon3,1,c	;volatile
 11751                           
 11752                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 11753  00252C  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 11754  00252E  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 11755  002530  0012               	return		;funcret
 11756  002532                     __end_of_IRQ_I_MOTEUR_2:
 11757                           	opt stack 0
 11758                           tblptru	equ	0xFF8
 11759                           tblptrh	equ	0xFF7
 11760                           tblptrl	equ	0xFF6
 11761                           tablat	equ	0xFF5
 11762                           prodh	equ	0xFF4
 11763                           prodl	equ	0xFF3
 11764                           intcon	equ	0xFF2
 11765                           intcon2	equ	0xFF1
 11766                           intcon3	equ	0xFF0
 11767                           postinc0	equ	0xFEE
 11768                           wreg	equ	0xFE8
 11769                           indf1	equ	0xFE7
 11770                           postdec1	equ	0xFE5
 11771                           fsr1h	equ	0xFE2
 11772                           fsr1l	equ	0xFE1
 11773                           indf2	equ	0xFDF
 11774                           postinc2	equ	0xFDE
 11775                           postdec2	equ	0xFDD
 11776                           fsr2h	equ	0xFDA
 11777                           fsr2l	equ	0xFD9
 11778                           status	equ	0xFD8
 11779                           
 11780 ;; *************** function _IRQ_I_MOTEUR_1 *****************
 11781 ;; Defined at:
 11782 ;;		line 895 in file "interrupt.c"
 11783 ;; Parameters:    Size  Location     Type
 11784 ;;		None
 11785 ;; Auto vars:     Size  Location     Type
 11786 ;;		None
 11787 ;; Return value:  Size  Location     Type
 11788 ;;                  1    wreg      void 
 11789 ;; Registers used:
 11790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11791 ;; Tracked objects:
 11792 ;;		On entry : 0/2
 11793 ;;		On exit  : 0/0
 11794 ;;		Unchanged: 0/0
 11795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11796 ;;      Params:         0       0       0       0
 11797 ;;      Locals:         0       0       0       0
 11798 ;;      Temps:          0       0       0       0
 11799 ;;      Totals:         0       0       0       0
 11800 ;;Total ram usage:        0 bytes
 11801 ;; Hardware stack levels used:    1
 11802 ;; Hardware stack levels required when called:   13
 11803 ;; This function calls:
 11804 ;;		_Alarme_On
 11805 ;; This function is called by:
 11806 ;;		_IRQ_Execution
 11807 ;; This function uses a non-reentrant model
 11808 ;;
 11809                           
 11810                           	psect	text68
 11811  002532                     __ptext68:
 11812                           	opt stack 0
 11813  002532                     _IRQ_I_MOTEUR_1:
 11814                           	opt stack 12
 11815                           
 11816                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 11817                           
 11818                           ;incstack = 0
 11819  002532  90F0               	bcf	intcon3,0,c	;volatile
 11820                           
 11821                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 11822  002534  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 11823                           
 11824                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 11825  002536  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 11826  002538  A4D8               	btfss	status,2,c
 11827  00253A  0012               	return	
 11828                           
 11829                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 11830  00253C  848B               	bsf	3979,2,c	;volatile
 11831                           
 11832                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 11833  00253E  908B               	bcf	3979,0,c	;volatile
 11834                           
 11835                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 11836  002540  928B               	bcf	3979,1,c	;volatile
 11837                           
 11838                           ;interrupt.c: 904: Alarme_On(1);
 11839  002542  0E01               	movlw	1
 11840  002544  EF30  F013         	goto	_Alarme_On
 11841  002548                     __end_of_IRQ_I_MOTEUR_1:
 11842                           	opt stack 0
 11843                           tblptru	equ	0xFF8
 11844                           tblptrh	equ	0xFF7
 11845                           tblptrl	equ	0xFF6
 11846                           tablat	equ	0xFF5
 11847                           prodh	equ	0xFF4
 11848                           prodl	equ	0xFF3
 11849                           intcon	equ	0xFF2
 11850                           intcon2	equ	0xFF1
 11851                           intcon3	equ	0xFF0
 11852                           postinc0	equ	0xFEE
 11853                           wreg	equ	0xFE8
 11854                           indf1	equ	0xFE7
 11855                           postdec1	equ	0xFE5
 11856                           fsr1h	equ	0xFE2
 11857                           fsr1l	equ	0xFE1
 11858                           indf2	equ	0xFDF
 11859                           postinc2	equ	0xFDE
 11860                           postdec2	equ	0xFDD
 11861                           fsr2h	equ	0xFDA
 11862                           fsr2l	equ	0xFD9
 11863                           status	equ	0xFD8
 11864                           
 11865 ;; *************** function _IRQ_CAPOT *****************
 11866 ;; Defined at:
 11867 ;;		line 890 in file "interrupt.c"
 11868 ;; Parameters:    Size  Location     Type
 11869 ;;		None
 11870 ;; Auto vars:     Size  Location     Type
 11871 ;;		None
 11872 ;; Return value:  Size  Location     Type
 11873 ;;                  1    wreg      void 
 11874 ;; Registers used:
 11875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11876 ;; Tracked objects:
 11877 ;;		On entry : 0/2
 11878 ;;		On exit  : 0/0
 11879 ;;		Unchanged: 0/0
 11880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11881 ;;      Params:         0       0       0       0
 11882 ;;      Locals:         0       0       0       0
 11883 ;;      Temps:          0       0       0       0
 11884 ;;      Totals:         0       0       0       0
 11885 ;;Total ram usage:        0 bytes
 11886 ;; Hardware stack levels used:    1
 11887 ;; Hardware stack levels required when called:   13
 11888 ;; This function calls:
 11889 ;;		_Alarme_On
 11890 ;; This function is called by:
 11891 ;;		_IRQ_Execution
 11892 ;; This function uses a non-reentrant model
 11893 ;;
 11894                           
 11895                           	psect	text69
 11896  0026FA                     __ptext69:
 11897                           	opt stack 0
 11898  0026FA                     _IRQ_CAPOT:
 11899                           	opt stack 12
 11900                           
 11901                           ;interrupt.c: 891: INT0IF = 0;
 11902                           
 11903                           ;incstack = 0
 11904  0026FA  92F2               	bcf	intcon,1,c	;volatile
 11905                           
 11906                           ;interrupt.c: 892: Alarme_On(4);
 11907  0026FC  0E04               	movlw	4
 11908  0026FE  EF30  F013         	goto	_Alarme_On
 11909  002702                     __end_of_IRQ_CAPOT:
 11910                           	opt stack 0
 11911                           tblptru	equ	0xFF8
 11912                           tblptrh	equ	0xFF7
 11913                           tblptrl	equ	0xFF6
 11914                           tablat	equ	0xFF5
 11915                           prodh	equ	0xFF4
 11916                           prodl	equ	0xFF3
 11917                           intcon	equ	0xFF2
 11918                           intcon2	equ	0xFF1
 11919                           intcon3	equ	0xFF0
 11920                           postinc0	equ	0xFEE
 11921                           wreg	equ	0xFE8
 11922                           indf1	equ	0xFE7
 11923                           postdec1	equ	0xFE5
 11924                           fsr1h	equ	0xFE2
 11925                           fsr1l	equ	0xFE1
 11926                           indf2	equ	0xFDF
 11927                           postinc2	equ	0xFDE
 11928                           postdec2	equ	0xFDD
 11929                           fsr2h	equ	0xFDA
 11930                           fsr2l	equ	0xFD9
 11931                           status	equ	0xFD8
 11932                           
 11933 ;; *************** function _Alarme_On *****************
 11934 ;; Defined at:
 11935 ;;		line 18 in file "alarme.c"
 11936 ;; Parameters:    Size  Location     Type
 11937 ;;  alarme_new_v    1    wreg     unsigned char 
 11938 ;; Auto vars:     Size  Location     Type
 11939 ;;  alarme_new_v    1   15[COMRAM] unsigned char 
 11940 ;; Return value:  Size  Location     Type
 11941 ;;                  1    wreg      void 
 11942 ;; Registers used:
 11943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11944 ;; Tracked objects:
 11945 ;;		On entry : 0/0
 11946 ;;		On exit  : 0/0
 11947 ;;		Unchanged: 0/0
 11948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 11949 ;;      Params:         0       0       0       0
 11950 ;;      Locals:         1       0       0       0
 11951 ;;      Temps:          0       0       0       0
 11952 ;;      Totals:         1       0       0       0
 11953 ;;Total ram usage:        1 bytes
 11954 ;; Hardware stack levels used:    1
 11955 ;; Hardware stack levels required when called:   12
 11956 ;; This function calls:
 11957 ;;		_Coupe_Moteur
 11958 ;;		_Etat_Update
 11959 ;; This function is called by:
 11960 ;;		_Cycle
 11961 ;;		_IRQ_TIMER_5
 11962 ;;		_IRQ_CAPOT
 11963 ;;		_IRQ_I_MOTEUR_1
 11964 ;;		_Check_List_Moteur_1
 11965 ;;		_EUSART1_RX_T3_LOCAL
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           	psect	text70
 11970  002660                     __ptext70:
 11971                           	opt stack 0
 11972  002660                     _Alarme_On:
 11973                           	opt stack 12
 11974                           
 11975                           ;incstack = 0
 11976                           ;Alarme_On@alarme_new_value stored from wreg
 11977  002660  6E10               	movwf	Alarme_On@alarme_new_value,c
 11978                           
 11979                           ;alarme.c: 22: Etat_Update(1);
 11980  002662  0E01               	movlw	1
 11981  002664  EC20  F012         	call	_Etat_Update
 11982                           
 11983                           ;alarme.c: 23: Alarme = alarme_new_value;
 11984  002668  C010  F0A9         	movff	Alarme_On@alarme_new_value,_Alarme	;volatile
 11985                           
 11986                           ;alarme.c: 24: Coupe_Moteur();
 11987  00266C  EFCE  F012         	goto	_Coupe_Moteur	;wreg free
 11988  002670                     __end_of_Alarme_On:
 11989                           	opt stack 0
 11990                           tblptru	equ	0xFF8
 11991                           tblptrh	equ	0xFF7
 11992                           tblptrl	equ	0xFF6
 11993                           tablat	equ	0xFF5
 11994                           prodh	equ	0xFF4
 11995                           prodl	equ	0xFF3
 11996                           intcon	equ	0xFF2
 11997                           intcon2	equ	0xFF1
 11998                           intcon3	equ	0xFF0
 11999                           postinc0	equ	0xFEE
 12000                           wreg	equ	0xFE8
 12001                           indf1	equ	0xFE7
 12002                           postdec1	equ	0xFE5
 12003                           fsr1h	equ	0xFE2
 12004                           fsr1l	equ	0xFE1
 12005                           indf2	equ	0xFDF
 12006                           postinc2	equ	0xFDE
 12007                           postdec2	equ	0xFDD
 12008                           fsr2h	equ	0xFDA
 12009                           fsr2l	equ	0xFD9
 12010                           status	equ	0xFD8
 12011                           
 12012 ;; *************** function _Etat_Update *****************
 12013 ;; Defined at:
 12014 ;;		line 74 in file "action.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;  etat_new_val    1    wreg     unsigned char 
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  etat_new_val    1   14[COMRAM] unsigned char 
 12019 ;; Return value:  Size  Location     Type
 12020 ;;                  1    wreg      void 
 12021 ;; Registers used:
 12022 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12023 ;; Tracked objects:
 12024 ;;		On entry : 0/0
 12025 ;;		On exit  : 0/0
 12026 ;;		Unchanged: 0/0
 12027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12028 ;;      Params:         0       0       0       0
 12029 ;;      Locals:         1       0       0       0
 12030 ;;      Temps:          0       0       0       0
 12031 ;;      Totals:         1       0       0       0
 12032 ;;Total ram usage:        1 bytes
 12033 ;; Hardware stack levels used:    1
 12034 ;; Hardware stack levels required when called:   10
 12035 ;; This function calls:
 12036 ;;		Nothing
 12037 ;; This function is called by:
 12038 ;;		_Cycle
 12039 ;;		_Capteur_Capot_On
 12040 ;;		_IRQ_TIMER_5
 12041 ;;		_Check_List_Moteur_2
 12042 ;;		_Check_List_Moteur_Bequille
 12043 ;;		_Mouvement_X
 12044 ;;		_EUSART1_RX_T3_LOCAL
 12045 ;;		_Alarme_On
 12046 ;; This function uses a non-reentrant model
 12047 ;;
 12048                           
 12049                           	psect	text71
 12050  002440                     __ptext71:
 12051                           	opt stack 0
 12052  002440                     _Etat_Update:
 12053                           	opt stack 14
 12054                           
 12055                           ;incstack = 0
 12056                           ;Etat_Update@etat_new_value stored from wreg
 12057  002440  6E0F               	movwf	Etat_Update@etat_new_value,c
 12058                           
 12059                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 12060  002442  504C               	movf	_Etat_Precedent_Index,w,c
 12061  002444  0F6A               	addlw	low _Etat_Log
 12062  002446  6ED9               	movwf	fsr2l,c
 12063  002448  6ADA               	clrf	fsr2h,c
 12064  00244A  C00F  FFDF         	movff	Etat_Update@etat_new_value,indf2
 12065                           
 12066                           ;action.c: 76: Etat = etat_new_value;
 12067  00244E  C00F  F0AA         	movff	Etat_Update@etat_new_value,_Etat	;volatile
 12068                           
 12069                           ;action.c: 77: Etat_Precedent_Index++;
 12070  002452  2A4C               	incf	_Etat_Precedent_Index,f,c
 12071                           
 12072                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 12073  002454  0E0A               	movlw	10
 12074  002456  184C               	xorwf	_Etat_Precedent_Index,w,c
 12075  002458  B4D8               	btfsc	status,2,c
 12076                           
 12077                           ;action.c: 79: Etat_Precedent_Index = 0;
 12078  00245A  6A4C               	clrf	_Etat_Precedent_Index,c
 12079  00245C  0012               	return		;funcret
 12080  00245E                     __end_of_Etat_Update:
 12081                           	opt stack 0
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           intcon2	equ	0xFF1
 12090                           intcon3	equ	0xFF0
 12091                           postinc0	equ	0xFEE
 12092                           wreg	equ	0xFE8
 12093                           indf1	equ	0xFE7
 12094                           postdec1	equ	0xFE5
 12095                           fsr1h	equ	0xFE2
 12096                           fsr1l	equ	0xFE1
 12097                           indf2	equ	0xFDF
 12098                           postinc2	equ	0xFDE
 12099                           postdec2	equ	0xFDD
 12100                           fsr2h	equ	0xFDA
 12101                           fsr2l	equ	0xFD9
 12102                           status	equ	0xFD8
 12103                           
 12104 ;; *************** function _Coupe_Moteur *****************
 12105 ;; Defined at:
 12106 ;;		line 261 in file "action.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;		None
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;		None
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  1    wreg      void 
 12113 ;; Registers used:
 12114 ;;		cstack
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12120 ;;      Params:         0       0       0       0
 12121 ;;      Locals:         0       0       0       0
 12122 ;;      Temps:          0       0       0       0
 12123 ;;      Totals:         0       0       0       0
 12124 ;;Total ram usage:        0 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:   11
 12127 ;; This function calls:
 12128 ;;		_TIMER2_Off
 12129 ;; This function is called by:
 12130 ;;		_Cycle
 12131 ;;		_Mouvement_Bequille
 12132 ;;		_Mouvement_Z
 12133 ;;		_Mouvement_X
 12134 ;;		_EUSART1_RX_T3_LOCAL
 12135 ;;		_Alarme_On
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           	psect	text72
 12140  00259C                     __ptext72:
 12141                           	opt stack 0
 12142  00259C                     _Coupe_Moteur:
 12143                           	opt stack 12
 12144                           
 12145                           ;action.c: 262: TIMER2_Off();
 12146                           
 12147                           ;incstack = 0
 12148  00259C  EC8F  F013         	call	_TIMER2_Off	;wreg free
 12149                           
 12150                           ;action.c: 274: LATCbits.LATC0 = 0;
 12151  0025A0  908B               	bcf	3979,0,c	;volatile
 12152                           
 12153                           ;action.c: 275: LATCbits.LATC1 = 0;
 12154  0025A2  928B               	bcf	3979,1,c	;volatile
 12155                           
 12156                           ;action.c: 276: OVDCOND = 0b00000000;
 12157  0025A4  6A6B               	clrf	3947,c	;volatile
 12158                           
 12159                           ;action.c: 277: LATD4 = 0;LATD5 = 0;
 12160  0025A6  988C               	bcf	3980,4,c	;volatile
 12161  0025A8  9A8C               	bcf	3980,5,c	;volatile
 12162                           
 12163                           ;action.c: 278: LATD6 = 0;LATD7 = 0;
 12164  0025AA  9C8C               	bcf	3980,6,c	;volatile
 12165  0025AC  9E8C               	bcf	3980,7,c	;volatile
 12166  0025AE  0012               	return		;funcret
 12167  0025B0                     __end_of_Coupe_Moteur:
 12168                           	opt stack 0
 12169                           tblptru	equ	0xFF8
 12170                           tblptrh	equ	0xFF7
 12171                           tblptrl	equ	0xFF6
 12172                           tablat	equ	0xFF5
 12173                           prodh	equ	0xFF4
 12174                           prodl	equ	0xFF3
 12175                           intcon	equ	0xFF2
 12176                           intcon2	equ	0xFF1
 12177                           intcon3	equ	0xFF0
 12178                           postinc0	equ	0xFEE
 12179                           wreg	equ	0xFE8
 12180                           indf1	equ	0xFE7
 12181                           postdec1	equ	0xFE5
 12182                           fsr1h	equ	0xFE2
 12183                           fsr1l	equ	0xFE1
 12184                           indf2	equ	0xFDF
 12185                           postinc2	equ	0xFDE
 12186                           postdec2	equ	0xFDD
 12187                           fsr2h	equ	0xFDA
 12188                           fsr2l	equ	0xFD9
 12189                           status	equ	0xFD8
 12190                           
 12191 ;; *************** function _TIMER2_Off *****************
 12192 ;; Defined at:
 12193 ;;		line 165 in file "timer.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;		None
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      void 
 12200 ;; Registers used:
 12201 ;;		None
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12207 ;;      Params:         0       0       0       0
 12208 ;;      Locals:         0       0       0       0
 12209 ;;      Temps:          0       0       0       0
 12210 ;;      Totals:         0       0       0       0
 12211 ;;Total ram usage:        0 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:   10
 12214 ;; This function calls:
 12215 ;;		Nothing
 12216 ;; This function is called by:
 12217 ;;		_Coupe_Moteur
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           	psect	text73
 12222  00271E                     __ptext73:
 12223                           	opt stack 0
 12224  00271E                     _TIMER2_Off:
 12225                           	opt stack 12
 12226                           
 12227                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 12228                           
 12229                           ;incstack = 0
 12230  00271E  929D               	bcf	3997,1,c	;volatile
 12231                           
 12232                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 12233  002720  929E               	bcf	3998,1,c	;volatile
 12234  002722  0012               	return		;funcret
 12235  002724                     __end_of_TIMER2_Off:
 12236                           	opt stack 0
 12237                           tblptru	equ	0xFF8
 12238                           tblptrh	equ	0xFF7
 12239                           tblptrl	equ	0xFF6
 12240                           tablat	equ	0xFF5
 12241                           prodh	equ	0xFF4
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           intcon2	equ	0xFF1
 12245                           intcon3	equ	0xFF0
 12246                           postinc0	equ	0xFEE
 12247                           wreg	equ	0xFE8
 12248                           indf1	equ	0xFE7
 12249                           postdec1	equ	0xFE5
 12250                           fsr1h	equ	0xFE2
 12251                           fsr1l	equ	0xFE1
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function _IRQ_ADC *****************
 12260 ;; Defined at:
 12261 ;;		line 486 in file "interrupt.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;		None
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;		None
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      void 
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/2
 12272 ;;		On exit  : 3F/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12275 ;;      Params:         0       0       0       0
 12276 ;;      Locals:         0       0       0       0
 12277 ;;      Temps:          3       0       0       0
 12278 ;;      Totals:         3       0       0       0
 12279 ;;Total ram usage:        3 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:   10
 12282 ;; This function calls:
 12283 ;;		Nothing
 12284 ;; This function is called by:
 12285 ;;		_IRQ_Execution
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           	psect	text74
 12290  000E14                     __ptext74:
 12291                           	opt stack 0
 12292  000E14                     _IRQ_ADC:
 12293                           	opt stack 15
 12294                           
 12295                           ;interrupt.c: 487: switch (moteur_indice) {
 12296                           
 12297                           ;incstack = 0
 12298  000E14  D0C7               	goto	l7518
 12299  000E16                     l622:
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 12303  000E16  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 12304                           
 12305                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 12306  000E1A  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12307                           
 12308                           ;interrupt.c: 492: ADIF = 0;
 12309  000E1C  9C9E               	bcf	3998,6,c	;volatile
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 12313  000E1E  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 12314  000E20  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12315  000E22  6F84               	movwf	_erreur& (0+255),b	;volatile
 12316  000E24  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12317  000E26  A0D8               	btfss	status,0,c
 12318  000E28  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12319                           
 12320                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 12321  000E2A  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12322  000E2C  D008               	goto	l7468
 12323  000E2E  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12324  000E30  E103               	bnz	u5570
 12325  000E32  0E0A               	movlw	10
 12326  000E34  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12327  000E36  E303               	bnc	l7468
 12328  000E38                     u5570:
 12329                           
 12330                           ; BSR set to: 0
 12331  000E38  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12332  000E3A  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12333  000E3C  D006               	goto	l624
 12334  000E3E                     l7468:
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 12338  000E3E  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12339  000E40  D004               	goto	l624
 12340                           
 12341                           ; BSR set to: 0
 12342  000E42  5184               	movf	_erreur& (0+255),w,b	;volatile
 12343  000E44  2786               	addwf	_duty& (0+255),f,b	;volatile
 12344  000E46  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12345  000E48  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 12346  000E4A                     l624:
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 12350  000E4A  507B               	movf	3963,w,c	;volatile
 12351  000E4C  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12352  000E4E  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12353  000E50  5186               	movf	_duty& (0+255),w,b	;volatile
 12354  000E52  5C0F               	subwf	??_IRQ_ADC,w,c
 12355  000E54  5010               	movf	??_IRQ_ADC+1,w,c
 12356  000E56  0A80               	xorlw	128
 12357  000E58  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12358  000E5A  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12359  000E5C  0A80               	xorlw	128
 12360  000E5E  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12361  000E60  E203               	bc	l7474
 12362                           
 12363                           ; BSR set to: 0
 12364  000E62  CF7B F086          	movff	3963,_duty	;volatile
 12365  000E66  D003               	goto	L2
 12366  000E68                     l7474:
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 12370  000E68  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12371  000E6A  D002               	goto	l7478
 12372                           
 12373                           ; BSR set to: 0
 12374  000E6C  6B86               	clrf	_duty& (0+255),b	;volatile
 12375  000E6E                     L2:
 12376  000E6E  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12377  000E70                     l7478:
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 12381  000E70  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12382  000E72  46E8               	rlncf	wreg,f,c
 12383  000E74  0BFC               	andlw	252
 12384  000E76  6E79               	movwf	3961,c	;volatile
 12385                           
 12386                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 12387  000E78  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12388  000E7C  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12389  000E80  90D8               	bcf	status,0,c
 12390  000E82  360F               	rlcf	??_IRQ_ADC,f,c
 12391  000E84  3610               	rlcf	??_IRQ_ADC+1,f,c
 12392  000E86  90D8               	bcf	status,0,c
 12393  000E88  360F               	rlcf	??_IRQ_ADC,f,c
 12394  000E8A  3610               	rlcf	??_IRQ_ADC+1,f,c
 12395  000E8C  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12396  000E90  6A10               	clrf	??_IRQ_ADC+1,c
 12397  000E92  BE0F               	btfsc	??_IRQ_ADC,7,c
 12398  000E94  6810               	setf	??_IRQ_ADC+1,c
 12399  000E96  500F               	movf	??_IRQ_ADC,w,c
 12400  000E98  6E78               	movwf	3960,c	;volatile
 12401                           
 12402                           ;interrupt.c: 508: break;
 12403  000E9A  0012               	return	
 12404  000E9C                     l630:
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 12408  000E9C  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12409                           
 12410                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 12411  000EA0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12412                           
 12413                           ;interrupt.c: 518: ADIF = 0;
 12414  000EA2  9C9E               	bcf	3998,6,c	;volatile
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 12418  000EA4  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12419  000EA6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12420  000EA8  6F84               	movwf	_erreur& (0+255),b	;volatile
 12421  000EAA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12422  000EAC  A0D8               	btfss	status,0,c
 12423  000EAE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12424                           
 12425                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 12426  000EB0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12427  000EB2  D008               	goto	l7484
 12428  000EB4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12429  000EB6  E103               	bnz	u5610
 12430  000EB8  0E0A               	movlw	10
 12431  000EBA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12432  000EBC  E303               	bnc	l7484
 12433  000EBE                     u5610:
 12434                           
 12435                           ; BSR set to: 0
 12436  000EBE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12437  000EC0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12438  000EC2  D005               	goto	l7488
 12439  000EC4                     l7484:
 12440                           
 12441                           ; BSR set to: 0
 12442                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 12443  000EC4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12444  000EC6  D003               	goto	l7488
 12445                           
 12446                           ; BSR set to: 0
 12447  000EC8  0786               	decf	_duty& (0+255),f,b	;volatile
 12448  000ECA  A0D8               	btfss	status,0,c
 12449  000ECC  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12450  000ECE                     l7488:
 12451                           
 12452                           ; BSR set to: 0
 12453                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 12454  000ECE  507B               	movf	3963,w,c	;volatile
 12455  000ED0  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12456  000ED2  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12457  000ED4  5186               	movf	_duty& (0+255),w,b	;volatile
 12458  000ED6  5C0F               	subwf	??_IRQ_ADC,w,c
 12459  000ED8  5010               	movf	??_IRQ_ADC+1,w,c
 12460  000EDA  0A80               	xorlw	128
 12461  000EDC  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12462  000EDE  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12463  000EE0  0A80               	xorlw	128
 12464  000EE2  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12465  000EE4  E203               	bc	l7492
 12466                           
 12467                           ; BSR set to: 0
 12468  000EE6  CF7B F086          	movff	3963,_duty	;volatile
 12469  000EEA  D003               	goto	L3
 12470  000EEC                     l7492:
 12471                           
 12472                           ; BSR set to: 0
 12473                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 12474  000EEC  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12475  000EEE  D002               	goto	l7496
 12476                           
 12477                           ; BSR set to: 0
 12478  000EF0  6B86               	clrf	_duty& (0+255),b	;volatile
 12479  000EF2                     L3:
 12480  000EF2  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12481  000EF4                     l7496:
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 12485  000EF4  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12486  000EF6  46E8               	rlncf	wreg,f,c
 12487  000EF8  0BFC               	andlw	252
 12488  000EFA  6E77               	movwf	3959,c	;volatile
 12489                           
 12490                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 12491  000EFC  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12492  000F00  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12493  000F04  90D8               	bcf	status,0,c
 12494  000F06  360F               	rlcf	??_IRQ_ADC,f,c
 12495  000F08  3610               	rlcf	??_IRQ_ADC+1,f,c
 12496  000F0A  90D8               	bcf	status,0,c
 12497  000F0C  360F               	rlcf	??_IRQ_ADC,f,c
 12498  000F0E  3610               	rlcf	??_IRQ_ADC+1,f,c
 12499  000F10  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12500  000F14  6A10               	clrf	??_IRQ_ADC+1,c
 12501  000F16  BE0F               	btfsc	??_IRQ_ADC,7,c
 12502  000F18  6810               	setf	??_IRQ_ADC+1,c
 12503  000F1A  500F               	movf	??_IRQ_ADC,w,c
 12504  000F1C  6E76               	movwf	3958,c	;volatile
 12505                           
 12506                           ;interrupt.c: 532: break;
 12507  000F1E  0012               	return	
 12508  000F20                     l637:
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 12512  000F20  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 12513                           
 12514                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 12515  000F24  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 12516                           
 12517                           ;interrupt.c: 539: ADIF = 0;
 12518  000F26  9C9E               	bcf	3998,6,c	;volatile
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 12522  000F28  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 12523  000F2A  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 12524  000F2C  6F84               	movwf	_erreur& (0+255),b	;volatile
 12525  000F2E  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 12526  000F30  A0D8               	btfss	status,0,c
 12527  000F32  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 12528                           
 12529                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 12530  000F34  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 12531  000F36  D008               	goto	l7502
 12532  000F38  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 12533  000F3A  E103               	bnz	u5650
 12534  000F3C  0E0A               	movlw	10
 12535  000F3E  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 12536  000F40  E303               	bnc	l7502
 12537  000F42                     u5650:
 12538                           
 12539                           ; BSR set to: 0
 12540  000F42  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 12541  000F44  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 12542  000F46  D005               	goto	l7506
 12543  000F48                     l7502:
 12544                           
 12545                           ; BSR set to: 0
 12546                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 12547  000F48  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 12548  000F4A  D003               	goto	l7506
 12549                           
 12550                           ; BSR set to: 0
 12551  000F4C  0786               	decf	_duty& (0+255),f,b	;volatile
 12552  000F4E  A0D8               	btfss	status,0,c
 12553  000F50  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 12554  000F52                     l7506:
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 12558  000F52  507B               	movf	3963,w,c	;volatile
 12559  000F54  6E0F               	movwf	??_IRQ_ADC& (0+255),c
 12560  000F56  6A10               	clrf	(??_IRQ_ADC+1)& (0+255),c
 12561  000F58  5186               	movf	_duty& (0+255),w,b	;volatile
 12562  000F5A  5C0F               	subwf	??_IRQ_ADC,w,c
 12563  000F5C  5010               	movf	??_IRQ_ADC+1,w,c
 12564  000F5E  0A80               	xorlw	128
 12565  000F60  6E11               	movwf	(??_IRQ_ADC+2)& (0+255),c
 12566  000F62  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 12567  000F64  0A80               	xorlw	128
 12568  000F66  5811               	subwfb	(??_IRQ_ADC+2)& (0+255),w,c
 12569  000F68  E203               	bc	l7510
 12570                           
 12571                           ; BSR set to: 0
 12572  000F6A  CF7B F086          	movff	3963,_duty	;volatile
 12573  000F6E  D003               	goto	L4
 12574  000F70                     l7510:
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 12578  000F70  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 12579  000F72  D002               	goto	l7514
 12580                           
 12581                           ; BSR set to: 0
 12582  000F74  6B86               	clrf	_duty& (0+255),b	;volatile
 12583  000F76                     L4:
 12584  000F76  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 12585  000F78                     l7514:
 12586                           
 12587                           ; BSR set to: 0
 12588                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 12589  000F78  4586               	rlncf	_duty& (0+255),w,b	;volatile
 12590  000F7A  46E8               	rlncf	wreg,f,c
 12591  000F7C  0BFC               	andlw	252
 12592  000F7E  6E77               	movwf	3959,c	;volatile
 12593                           
 12594                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 12595  000F80  C086  F00F         	movff	_duty,??_IRQ_ADC	;volatile
 12596  000F84  C087  F010         	movff	_duty+1,??_IRQ_ADC+1	;volatile
 12597  000F88  90D8               	bcf	status,0,c
 12598  000F8A  360F               	rlcf	??_IRQ_ADC,f,c
 12599  000F8C  3610               	rlcf	??_IRQ_ADC+1,f,c
 12600  000F8E  90D8               	bcf	status,0,c
 12601  000F90  360F               	rlcf	??_IRQ_ADC,f,c
 12602  000F92  3610               	rlcf	??_IRQ_ADC+1,f,c
 12603  000F94  C010  F00F         	movff	??_IRQ_ADC+1,??_IRQ_ADC
 12604  000F98  6A10               	clrf	??_IRQ_ADC+1,c
 12605  000F9A  BE0F               	btfsc	??_IRQ_ADC,7,c
 12606  000F9C  6810               	setf	??_IRQ_ADC+1,c
 12607  000F9E  500F               	movf	??_IRQ_ADC,w,c
 12608  000FA0  6E76               	movwf	3958,c	;volatile
 12609                           
 12610                           ;interrupt.c: 553: break;
 12611  000FA2  0012               	return	
 12612  000FA4                     l7518:
 12613  000FA4  0100               	movlb	0	; () banked
 12614  000FA6  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 12615                           
 12616                           ; Switch size 1, requested type "speed"
 12617                           ; Number of cases is 3, Range of values is 1 to 3
 12618                           ; switch strategies available:
 12619                           ; Name         Instructions Cycles
 12620                           ; simple_byte           10     6 (average)
 12621                           ;	Chosen strategy is simple_byte
 12622  000FA8  0A01               	xorlw	1	; case 1
 12623  000FAA  E101 D734          	bz	l622
 12624  000FAE  0A03               	xorlw	3	; case 2
 12625  000FB0  E101 D774          	bz	l630
 12626  000FB4  0A01               	xorlw	1	; case 3
 12627  000FB6  E0B4               	bz	l637
 12628                           
 12629                           ; BSR set to: 0
 12630  000FB8  0012               	return		;funcret
 12631  000FBA                     __end_of_IRQ_ADC:
 12632                           	opt stack 0
 12633                           tblptru	equ	0xFF8
 12634                           tblptrh	equ	0xFF7
 12635                           tblptrl	equ	0xFF6
 12636                           tablat	equ	0xFF5
 12637                           prodh	equ	0xFF4
 12638                           prodl	equ	0xFF3
 12639                           intcon	equ	0xFF2
 12640                           intcon2	equ	0xFF1
 12641                           intcon3	equ	0xFF0
 12642                           postinc0	equ	0xFEE
 12643                           wreg	equ	0xFE8
 12644                           indf1	equ	0xFE7
 12645                           postdec1	equ	0xFE5
 12646                           fsr1h	equ	0xFE2
 12647                           fsr1l	equ	0xFE1
 12648                           indf2	equ	0xFDF
 12649                           postinc2	equ	0xFDE
 12650                           postdec2	equ	0xFDD
 12651                           fsr2h	equ	0xFDA
 12652                           fsr2l	equ	0xFD9
 12653                           status	equ	0xFD8
 12654                           
 12655 ;; *************** function _Etat_Intitule *****************
 12656 ;; Defined at:
 12657 ;;		line 29 in file "action.c"
 12658 ;; Parameters:    Size  Location     Type
 12659 ;;  Etat_Number     1    wreg     unsigned char 
 12660 ;; Auto vars:     Size  Location     Type
 12661 ;;  Etat_Number     1   14[COMRAM] unsigned char 
 12662 ;; Return value:  Size  Location     Type
 12663 ;;                  1    wreg      unsigned char 
 12664 ;; Registers used:
 12665 ;;		wreg, status,2, status,0
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/1
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12671 ;;      Params:         0       0       0       0
 12672 ;;      Locals:         1       0       0       0
 12673 ;;      Temps:          0       0       0       0
 12674 ;;      Totals:         1       0       0       0
 12675 ;;Total ram usage:        1 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:   10
 12678 ;; This function calls:
 12679 ;;		Nothing
 12680 ;; This function is called by:
 12681 ;;		_EUSART1_RX_T3_LOCAL
 12682 ;; This function uses a non-reentrant model
 12683 ;;
 12684                           
 12685                           	psect	text75
 12686  0021AA                     __ptext75:
 12687                           	opt stack 0
 12688  0021AA                     _Etat_Intitule:
 12689                           	opt stack 16
 12690                           
 12691                           ; BSR set to: 0
 12692                           ;incstack = 0
 12693                           ;Etat_Intitule@Etat_Number stored from wreg
 12694  0021AA  6E0F               	movwf	Etat_Intitule@Etat_Number,c
 12695                           
 12696                           ;action.c: 31: switch (Etat_Number) {
 12697  0021AC  500F               	movf	Etat_Intitule@Etat_Number,w,c
 12698                           
 12699                           ; Switch size 1, requested type "speed"
 12700                           ; Number of cases is 8, Range of values is 0 to 255
 12701                           ; switch strategies available:
 12702                           ; Name         Instructions Cycles
 12703                           ; simple_byte           25    13 (average)
 12704                           ;	Chosen strategy is simple_byte
 12705  0021AE  B4D8               	btfsc	status,2,c
 12706  0021B0  0C49               	retlw	73
 12707  0021B2  0A01               	xorlw	1	; case 1
 12708  0021B4  B4D8               	btfsc	status,2,c
 12709  0021B6  0C21               	retlw	33
 12710  0021B8  0A03               	xorlw	3	; case 2
 12711  0021BA  B4D8               	btfsc	status,2,c
 12712  0021BC  0C41               	retlw	65
 12713  0021BE  0A01               	xorlw	1	; case 3
 12714  0021C0  B4D8               	btfsc	status,2,c
 12715  0021C2  0C52               	retlw	82
 12716  0021C4  0A07               	xorlw	7	; case 4
 12717  0021C6  B4D8               	btfsc	status,2,c
 12718  0021C8  0C4C               	retlw	76
 12719  0021CA  0A01               	xorlw	1	; case 5
 12720  0021CC  B4D8               	btfsc	status,2,c
 12721  0021CE  0C42               	retlw	66
 12722  0021D0  0A03               	xorlw	3	; case 6
 12723  0021D2  B4D8               	btfsc	status,2,c
 12724  0021D4  0C50               	retlw	80
 12725  0021D6  0AF9               	xorlw	249	; case 255
 12726  0021D8  B4D8               	btfsc	status,2,c
 12727  0021DA  0C48               	retlw	72
 12728  0021DC  0C20               	retlw	32
 12729  0021DE                     __end_of_Etat_Intitule:
 12730                           	opt stack 0
 12731                           tblptru	equ	0xFF8
 12732                           tblptrh	equ	0xFF7
 12733                           tblptrl	equ	0xFF6
 12734                           tablat	equ	0xFF5
 12735                           prodh	equ	0xFF4
 12736                           prodl	equ	0xFF3
 12737                           intcon	equ	0xFF2
 12738                           intcon2	equ	0xFF1
 12739                           intcon3	equ	0xFF0
 12740                           postinc0	equ	0xFEE
 12741                           wreg	equ	0xFE8
 12742                           indf1	equ	0xFE7
 12743                           postdec1	equ	0xFE5
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           fsr2h	equ	0xFDA
 12750                           fsr2l	equ	0xFD9
 12751                           status	equ	0xFD8
 12752                           
 12753 ;; *************** function _Etat_Get *****************
 12754 ;; Defined at:
 12755 ;;		line 49 in file "action.c"
 12756 ;; Parameters:    Size  Location     Type
 12757 ;;  Etat_Indice     1    wreg     unsigned char 
 12758 ;; Auto vars:     Size  Location     Type
 12759 ;;  Etat_Indice     1   22[COMRAM] unsigned char 
 12760 ;; Return value:  Size  Location     Type
 12761 ;;                  1    wreg      unsigned char 
 12762 ;; Registers used:
 12763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12764 ;; Tracked objects:
 12765 ;;		On entry : 0/0
 12766 ;;		On exit  : 0/0
 12767 ;;		Unchanged: 0/0
 12768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12769 ;;      Params:         0       0       0       0
 12770 ;;      Locals:         1       0       0       0
 12771 ;;      Temps:          2       0       0       0
 12772 ;;      Totals:         3       0       0       0
 12773 ;;Total ram usage:        3 bytes
 12774 ;; Hardware stack levels used:    1
 12775 ;; Hardware stack levels required when called:   11
 12776 ;; This function calls:
 12777 ;;		___awmod
 12778 ;; This function is called by:
 12779 ;;		_Cycle
 12780 ;;		_EUSART1_RX_T3_LOCAL
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783                           
 12784                           	psect	text76
 12785  0021DE                     __ptext76:
 12786                           	opt stack 0
 12787  0021DE                     _Etat_Get:
 12788                           	opt stack 15
 12789                           
 12790                           ;incstack = 0
 12791                           ;Etat_Get@Etat_Indice stored from wreg
 12792  0021DE  6E17               	movwf	Etat_Get@Etat_Indice,c
 12793                           
 12794                           ;action.c: 62: return Etat_Log[(unsigned char) ((10 - 1 - Etat_Indice + Etat_Precedent_I
      +                          ndex) % 10)];
 12795  0021E0  5017               	movf	Etat_Get@Etat_Indice,w,c
 12796  0021E2  C04C  F015         	movff	_Etat_Precedent_Index,??_Etat_Get
 12797  0021E6  6A16               	clrf	(??_Etat_Get+1)& (0+255),c
 12798  0021E8  5E15               	subwf	??_Etat_Get,f,c
 12799  0021EA  0E00               	movlw	0
 12800  0021EC  5A16               	subwfb	??_Etat_Get+1,f,c
 12801  0021EE  0E09               	movlw	9
 12802  0021F0  2415               	addwf	??_Etat_Get,w,c
 12803  0021F2  6E0F               	movwf	___awmod@dividend,c
 12804  0021F4  0E00               	movlw	0
 12805  0021F6  2016               	addwfc	??_Etat_Get+1,w,c
 12806  0021F8  6E10               	movwf	___awmod@dividend+1,c
 12807  0021FA  6A12               	clrf	___awmod@divisor+1,c
 12808  0021FC  0E0A               	movlw	10
 12809  0021FE  6E11               	movwf	___awmod@divisor,c
 12810  002200  EC15  F00E         	call	___awmod	;wreg free
 12811  002204  500F               	movf	?___awmod,w,c
 12812  002206  0F6A               	addlw	low _Etat_Log
 12813  002208  6ED9               	movwf	fsr2l,c
 12814  00220A  6ADA               	clrf	fsr2h,c
 12815  00220C  50DF               	movf	indf2,w,c
 12816  00220E  0012               	return		;funcret
 12817  002210                     __end_of_Etat_Get:
 12818                           	opt stack 0
 12819                           tblptru	equ	0xFF8
 12820                           tblptrh	equ	0xFF7
 12821                           tblptrl	equ	0xFF6
 12822                           tablat	equ	0xFF5
 12823                           prodh	equ	0xFF4
 12824                           prodl	equ	0xFF3
 12825                           intcon	equ	0xFF2
 12826                           intcon2	equ	0xFF1
 12827                           intcon3	equ	0xFF0
 12828                           postinc0	equ	0xFEE
 12829                           wreg	equ	0xFE8
 12830                           indf1	equ	0xFE7
 12831                           postdec1	equ	0xFE5
 12832                           fsr1h	equ	0xFE2
 12833                           fsr1l	equ	0xFE1
 12834                           indf2	equ	0xFDF
 12835                           postinc2	equ	0xFDE
 12836                           postdec2	equ	0xFDD
 12837                           fsr2h	equ	0xFDA
 12838                           fsr2l	equ	0xFD9
 12839                           status	equ	0xFD8
 12840                           
 12841 ;; *************** function ___awmod *****************
 12842 ;; Defined at:
 12843 ;;		line 8 in file "/opt/microchip/xc8/v1.42/sources/common/awmod.c"
 12844 ;; Parameters:    Size  Location     Type
 12845 ;;  dividend        2   14[COMRAM] int 
 12846 ;;  divisor         2   16[COMRAM] int 
 12847 ;; Auto vars:     Size  Location     Type
 12848 ;;  sign            1   19[COMRAM] unsigned char 
 12849 ;;  counter         1   18[COMRAM] unsigned char 
 12850 ;; Return value:  Size  Location     Type
 12851 ;;                  2   14[COMRAM] int 
 12852 ;; Registers used:
 12853 ;;		wreg, status,2, status,0
 12854 ;; Tracked objects:
 12855 ;;		On entry : 0/1
 12856 ;;		On exit  : 0/0
 12857 ;;		Unchanged: 0/0
 12858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12859 ;;      Params:         4       0       0       0
 12860 ;;      Locals:         2       0       0       0
 12861 ;;      Temps:          0       0       0       0
 12862 ;;      Totals:         6       0       0       0
 12863 ;;Total ram usage:        6 bytes
 12864 ;; Hardware stack levels used:    1
 12865 ;; Hardware stack levels required when called:   10
 12866 ;; This function calls:
 12867 ;;		Nothing
 12868 ;; This function is called by:
 12869 ;;		_Etat_Get
 12870 ;;		_EUSART1_RX_T3_LOCAL
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text77
 12875  001C2A                     __ptext77:
 12876                           	opt stack 0
 12877  001C2A                     ___awmod:
 12878                           	opt stack 16
 12879                           
 12880                           ;incstack = 0
 12881  001C2A  6A14               	clrf	___awmod@sign,c
 12882  001C2C  AE10               	btfss	___awmod@dividend+1,7,c
 12883  001C2E  D006               	goto	l7550
 12884  001C30  6C0F               	negf	___awmod@dividend,c
 12885  001C32  1E10               	comf	___awmod@dividend+1,f,c
 12886  001C34  B0D8               	btfsc	status,0,c
 12887  001C36  2A10               	incf	___awmod@dividend+1,f,c
 12888  001C38  0E01               	movlw	1
 12889  001C3A  6E14               	movwf	___awmod@sign,c
 12890  001C3C                     l7550:
 12891  001C3C  AE12               	btfss	___awmod@divisor+1,7,c
 12892  001C3E  D004               	goto	l7554
 12893  001C40  6C11               	negf	___awmod@divisor,c
 12894  001C42  1E12               	comf	___awmod@divisor+1,f,c
 12895  001C44  B0D8               	btfsc	status,0,c
 12896  001C46  2A12               	incf	___awmod@divisor+1,f,c
 12897  001C48                     l7554:
 12898  001C48  5011               	movf	___awmod@divisor,w,c
 12899  001C4A  1012               	iorwf	___awmod@divisor+1,w,c
 12900  001C4C  E017               	bz	l7570
 12901  001C4E  0E01               	movlw	1
 12902  001C50  6E13               	movwf	___awmod@counter,c
 12903  001C52  D004               	goto	l7560
 12904  001C54                     l7558:
 12905  001C54  90D8               	bcf	status,0,c
 12906  001C56  3611               	rlcf	___awmod@divisor,f,c
 12907  001C58  3612               	rlcf	___awmod@divisor+1,f,c
 12908  001C5A  2A13               	incf	___awmod@counter,f,c
 12909  001C5C                     l7560:
 12910  001C5C  AE12               	btfss	___awmod@divisor+1,7,c
 12911  001C5E  D7FA               	goto	l7558
 12912  001C60                     l7562:
 12913  001C60  5011               	movf	___awmod@divisor,w,c
 12914  001C62  5C0F               	subwf	___awmod@dividend,w,c
 12915  001C64  5012               	movf	___awmod@divisor+1,w,c
 12916  001C66  5810               	subwfb	___awmod@dividend+1,w,c
 12917  001C68  E304               	bnc	l7566
 12918  001C6A  5011               	movf	___awmod@divisor,w,c
 12919  001C6C  5E0F               	subwf	___awmod@dividend,f,c
 12920  001C6E  5012               	movf	___awmod@divisor+1,w,c
 12921  001C70  5A10               	subwfb	___awmod@dividend+1,f,c
 12922  001C72                     l7566:
 12923  001C72  90D8               	bcf	status,0,c
 12924  001C74  3212               	rrcf	___awmod@divisor+1,f,c
 12925  001C76  3211               	rrcf	___awmod@divisor,f,c
 12926  001C78  2E13               	decfsz	___awmod@counter,f,c
 12927  001C7A  D7F2               	goto	l7562
 12928  001C7C                     l7570:
 12929  001C7C  5014               	movf	___awmod@sign,w,c
 12930  001C7E  E004               	bz	l7574
 12931  001C80  6C0F               	negf	___awmod@dividend,c
 12932  001C82  1E10               	comf	___awmod@dividend+1,f,c
 12933  001C84  B0D8               	btfsc	status,0,c
 12934  001C86  2A10               	incf	___awmod@dividend+1,f,c
 12935  001C88                     l7574:
 12936  001C88  C00F  F00F         	movff	___awmod@dividend,?___awmod
 12937  001C8C  C010  F010         	movff	___awmod@dividend+1,?___awmod+1
 12938  001C90  0012               	return		;funcret
 12939  001C92                     __end_of___awmod:
 12940                           	opt stack 0
 12941                           tblptru	equ	0xFF8
 12942                           tblptrh	equ	0xFF7
 12943                           tblptrl	equ	0xFF6
 12944                           tablat	equ	0xFF5
 12945                           prodh	equ	0xFF4
 12946                           prodl	equ	0xFF3
 12947                           intcon	equ	0xFF2
 12948                           intcon2	equ	0xFF1
 12949                           intcon3	equ	0xFF0
 12950                           postinc0	equ	0xFEE
 12951                           wreg	equ	0xFE8
 12952                           indf1	equ	0xFE7
 12953                           postdec1	equ	0xFE5
 12954                           fsr1h	equ	0xFE2
 12955                           fsr1l	equ	0xFE1
 12956                           indf2	equ	0xFDF
 12957                           postinc2	equ	0xFDE
 12958                           postdec2	equ	0xFDD
 12959                           fsr2h	equ	0xFDA
 12960                           fsr2l	equ	0xFD9
 12961                           status	equ	0xFD8
 12962                           
 12963 ;; *************** function _EUSART1_Buffer_Send *****************
 12964 ;; Defined at:
 12965 ;;		line 511 in file "eusart.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;  text            1   14[COMRAM] PTR unsigned char 
 12968 ;;		 -> UART_TX_TEXT(64), 
 12969 ;; Auto vars:     Size  Location     Type
 12970 ;;  i               2   15[COMRAM] unsigned int 
 12971 ;; Return value:  Size  Location     Type
 12972 ;;                  1    wreg      void 
 12973 ;; Registers used:
 12974 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 12975 ;; Tracked objects:
 12976 ;;		On entry : 0/0
 12977 ;;		On exit  : 0/0
 12978 ;;		Unchanged: 0/0
 12979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 12980 ;;      Params:         1       0       0       0
 12981 ;;      Locals:         2       0       0       0
 12982 ;;      Temps:          0       0       0       0
 12983 ;;      Totals:         3       0       0       0
 12984 ;;Total ram usage:        3 bytes
 12985 ;; Hardware stack levels used:    1
 12986 ;; Hardware stack levels required when called:   10
 12987 ;; This function calls:
 12988 ;;		Nothing
 12989 ;; This function is called by:
 12990 ;;		_EUSART1_RX_T3_LOCAL
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           	psect	text78
 12995  001770                     __ptext78:
 12996                           	opt stack 0
 12997  001770                     _EUSART1_Buffer_Send:
 12998                           	opt stack 16
 12999  001770                     l1318:
 13000  001770  A2AC               	btfss	4012,1,c	;volatile
 13001  001772  D7FE               	goto	l1318
 13002                           
 13003                           ;eusart.c: 518: for (i = 0; (i < 64) && (UART_TX_TEXT[i] != '\0'); i++) {
 13004  001774  6A10               	clrf	EUSART1_Buffer_Send@i,c
 13005  001776  6A11               	clrf	EUSART1_Buffer_Send@i+1,c
 13006  001778  D01A               	goto	l7694
 13007  00177A                     l7690:
 13008                           
 13009                           ;eusart.c: 521: eusart1TxBuffer[i] = UART_TX_TEXT[i];
 13010  00177A  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13011  00177C  0FAD               	addlw	low _UART_TX_TEXT
 13012  00177E  6ED9               	movwf	fsr2l,c
 13013  001780  6ADA               	clrf	fsr2h,c
 13014  001782  0E80               	movlw	low _eusart1TxBuffer
 13015  001784  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13016  001786  6EE1               	movwf	fsr1l,c
 13017  001788  0E01               	movlw	high _eusart1TxBuffer
 13018  00178A  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13019  00178C  6EE2               	movwf	fsr1h,c
 13020  00178E  CFDF FFE7          	movff	indf2,indf1
 13021                           
 13022                           ;eusart.c: 522: spiTxBuffer[i] = UART_TX_TEXT[i];
 13023  001792  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13024  001794  0FAD               	addlw	low _UART_TX_TEXT
 13025  001796  6ED9               	movwf	fsr2l,c
 13026  001798  6ADA               	clrf	fsr2h,c
 13027  00179A  0E40               	movlw	low _spiTxBuffer
 13028  00179C  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13029  00179E  6EE1               	movwf	fsr1l,c
 13030  0017A0  0E01               	movlw	high _spiTxBuffer
 13031  0017A2  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13032  0017A4  6EE2               	movwf	fsr1h,c
 13033  0017A6  CFDF FFE7          	movff	indf2,indf1
 13034  0017AA  4A10               	infsnz	EUSART1_Buffer_Send@i,f,c
 13035  0017AC  2A11               	incf	EUSART1_Buffer_Send@i+1,f,c
 13036  0017AE                     l7694:
 13037  0017AE  5011               	movf	EUSART1_Buffer_Send@i+1,w,c
 13038  0017B0  E109               	bnz	l7698
 13039  0017B2  0E40               	movlw	64
 13040  0017B4  5C10               	subwf	EUSART1_Buffer_Send@i,w,c
 13041  0017B6  E206               	bc	l7698
 13042  0017B8  5010               	movf	EUSART1_Buffer_Send@i,w,c
 13043  0017BA  0FAD               	addlw	low _UART_TX_TEXT
 13044  0017BC  6ED9               	movwf	fsr2l,c
 13045  0017BE  6ADA               	clrf	fsr2h,c
 13046  0017C0  50DF               	movf	indf2,w,c
 13047  0017C2  E1DB               	bnz	l7690
 13048  0017C4                     l7698:
 13049                           
 13050                           ;eusart.c: 526: }
 13051                           ;eusart.c: 530: eusart1TxBuffer[i] = 0x0D;
 13052  0017C4  0E80               	movlw	low _eusart1TxBuffer
 13053  0017C6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13054  0017C8  6ED9               	movwf	fsr2l,c
 13055  0017CA  0E01               	movlw	high _eusart1TxBuffer
 13056  0017CC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13057  0017CE  6EDA               	movwf	fsr2h,c
 13058  0017D0  0E0D               	movlw	13
 13059  0017D2  6EDF               	movwf	indf2,c
 13060                           
 13061                           ;eusart.c: 531: spiTxBuffer[i] = 0x0D;
 13062  0017D4  0E40               	movlw	low _spiTxBuffer
 13063  0017D6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13064  0017D8  6ED9               	movwf	fsr2l,c
 13065  0017DA  0E01               	movlw	high _spiTxBuffer
 13066  0017DC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13067  0017DE  6EDA               	movwf	fsr2h,c
 13068  0017E0  0E0D               	movlw	13
 13069  0017E2  6EDF               	movwf	indf2,c
 13070                           
 13071                           ;eusart.c: 534: eusart1TxBuffer[i + 1] = 0x00;
 13072  0017E4  0E81               	movlw	low (_eusart1TxBuffer+1)
 13073  0017E6  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13074  0017E8  6ED9               	movwf	fsr2l,c
 13075  0017EA  0E01               	movlw	high (_eusart1TxBuffer+1)
 13076  0017EC  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13077  0017EE  6EDA               	movwf	fsr2h,c
 13078  0017F0  6ADF               	clrf	indf2,c
 13079                           
 13080                           ;eusart.c: 535: spiTxBuffer[i + 1] = 0x00;
 13081  0017F2  0E41               	movlw	low (_spiTxBuffer+1)
 13082  0017F4  2410               	addwf	EUSART1_Buffer_Send@i,w,c
 13083  0017F6  6ED9               	movwf	fsr2l,c
 13084  0017F8  0E01               	movlw	high (_spiTxBuffer+1)
 13085  0017FA  2011               	addwfc	EUSART1_Buffer_Send@i+1,w,c
 13086  0017FC  6EDA               	movwf	fsr2h,c
 13087  0017FE  6ADF               	clrf	indf2,c
 13088                           
 13089                           ;eusart.c: 537: eusart1TxIndex = 0;
 13090  001800  6A46               	clrf	_eusart1TxIndex,c	;volatile
 13091                           
 13092                           ;eusart.c: 538: spiTxIndex = 0;
 13093  001802  6A44               	clrf	_spiTxIndex,c	;volatile
 13094                           
 13095                           ;eusart.c: 540: SPI_MODE = 1;
 13096  001804  804F               	bsf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 13097                           
 13098                           ;eusart.c: 542: SSPBUF = spiTxBuffer[spiTxIndex];
 13099  001806  0E40               	movlw	low _spiTxBuffer
 13100  001808  2444               	addwf	_spiTxIndex,w,c	;volatile
 13101  00180A  6ED9               	movwf	fsr2l,c
 13102  00180C  6ADA               	clrf	fsr2h,c
 13103  00180E  0E01               	movlw	high _spiTxBuffer
 13104  001810  22DA               	addwfc	fsr2h,f,c
 13105  001812  50DF               	movf	indf2,w,c
 13106  001814  6EC9               	movwf	4041,c	;volatile
 13107                           
 13108                           ;eusart.c: 543: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 13109  001816  0E80               	movlw	low _eusart1TxBuffer
 13110  001818  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 13111  00181A  6ED9               	movwf	fsr2l,c
 13112  00181C  6ADA               	clrf	fsr2h,c
 13113  00181E  0E01               	movlw	high _eusart1TxBuffer
 13114  001820  22DA               	addwfc	fsr2h,f,c
 13115  001822  50DF               	movf	indf2,w,c
 13116  001824  6EAD               	movwf	4013,c	;volatile
 13117                           
 13118                           ;eusart.c: 544: PIE1bits.TX1IE = 1;
 13119  001826  889D               	bsf	3997,4,c	;volatile
 13120  001828  0012               	return		;funcret
 13121  00182A                     __end_of_EUSART1_Buffer_Send:
 13122                           	opt stack 0
 13123                           tblptru	equ	0xFF8
 13124                           tblptrh	equ	0xFF7
 13125                           tblptrl	equ	0xFF6
 13126                           tablat	equ	0xFF5
 13127                           prodh	equ	0xFF4
 13128                           prodl	equ	0xFF3
 13129                           intcon	equ	0xFF2
 13130                           intcon2	equ	0xFF1
 13131                           intcon3	equ	0xFF0
 13132                           postinc0	equ	0xFEE
 13133                           wreg	equ	0xFE8
 13134                           indf1	equ	0xFE7
 13135                           postdec1	equ	0xFE5
 13136                           fsr1h	equ	0xFE2
 13137                           fsr1l	equ	0xFE1
 13138                           indf2	equ	0xFDF
 13139                           postinc2	equ	0xFDE
 13140                           postdec2	equ	0xFDD
 13141                           fsr2h	equ	0xFDA
 13142                           fsr2l	equ	0xFD9
 13143                           status	equ	0xFD8
 13144                           
 13145 ;; *************** function _LOW_PRIORITY_IRQ *****************
 13146 ;; Defined at:
 13147 ;;		line 559 in file "interrupt.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;		None
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;		None
 13152 ;; Return value:  Size  Location     Type
 13153 ;;                  1    wreg      void 
 13154 ;; Registers used:
 13155 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13161 ;;      Params:         0       0       0       0
 13162 ;;      Locals:         0       0       0       0
 13163 ;;      Temps:          7       0       0       0
 13164 ;;      Totals:         7       0       0       0
 13165 ;;Total ram usage:        7 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    9
 13168 ;; This function calls:
 13169 ;;		_EUSART1_Receive_ISR
 13170 ;;		_EUSART1_Transmit_ISR
 13171 ;;		_IRQ_PION_CHANGEMENT_ETAT
 13172 ;;		_SPI_ISR
 13173 ;;		i1_IRQ_ADC
 13174 ;;		i1_IRQ_PWM
 13175 ;;		i1_IRQ_TIMER_0
 13176 ;;		i1_IRQ_TIMER_5
 13177 ;; This function is called by:
 13178 ;;		Interrupt level 1
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           	psect	intcodelo
 13183  000018                     __pintcodelo:
 13184                           	opt stack 0
 13185  000018                     _LOW_PRIORITY_IRQ:
 13186                           	opt stack 11
 13187                           
 13188                           ;incstack = 0
 13189  000018  8051               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 13190  00001A  CFD8 F008          	movff	status,??_LOW_PRIORITY_IRQ
 13191  00001E  CFE8 F009          	movff	wreg,??_LOW_PRIORITY_IRQ+1
 13192  000022  CFE0 F00A          	movff	bsr,??_LOW_PRIORITY_IRQ+2
 13193  000026  CFE1 F00B          	movff	fsr1l,??_LOW_PRIORITY_IRQ+3
 13194  00002A  CFE2 F00C          	movff	fsr1h,??_LOW_PRIORITY_IRQ+4
 13195  00002E  CFD9 F00D          	movff	fsr2l,??_LOW_PRIORITY_IRQ+5
 13196  000032  CFDA F00E          	movff	fsr2h,??_LOW_PRIORITY_IRQ+6
 13197                           
 13198                           ;interrupt.c: 562: if ((PIE3bits.IC1IE == 1)&&(PIR3bits.IC1IF == 1)) {
 13199  000036  B2A3               	btfsc	4003,1,c	;volatile
 13200  000038  A2A4               	btfss	4004,1,c	;volatile
 13201  00003A  D003               	goto	i1l650
 13202                           
 13203                           ;interrupt.c: 564: IRQ_PION_CHANGEMENT_ETAT();
 13204  00003C  ECB7  F00F         	call	_IRQ_PION_CHANGEMENT_ETAT	;wreg free
 13205                           
 13206                           ;interrupt.c: 579: } else
 13207  000040  D036               	goto	i1l669
 13208  000042                     i1l650:
 13209                           
 13210                           ;interrupt.c: 581: if ((PIE3bits.IC2QEIE == 1)&&(PIR3bits.IC2QEIF == 1)) {
 13211  000042  B4A3               	btfsc	4003,2,c	;volatile
 13212  000044  A4A4               	btfss	4004,2,c	;volatile
 13213  000046  D002               	goto	i1l652
 13214                           
 13215                           ;interrupt.c: 582: PIR3bits.IC2QEIF = 0;
 13216  000048  94A4               	bcf	4004,2,c	;volatile
 13217                           
 13218                           ;interrupt.c: 594: } else
 13219  00004A  D031               	goto	i1l669
 13220  00004C                     i1l652:
 13221                           
 13222                           ;interrupt.c: 595: if (PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1) {
 13223  00004C  B69D               	btfsc	3997,3,c	;volatile
 13224  00004E  A69E               	btfss	3998,3,c	;volatile
 13225  000050  D003               	goto	i1l654
 13226                           
 13227                           ;interrupt.c: 596: SPI_ISR();
 13228  000052  EC44  F009         	call	_SPI_ISR	;wreg free
 13229                           
 13230                           ;interrupt.c: 598: } else
 13231  000056  D02B               	goto	i1l669
 13232  000058                     i1l654:
 13233                           
 13234                           ;interrupt.c: 599: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 13235  000058  B89D               	btfsc	3997,4,c	;volatile
 13236  00005A  A89E               	btfss	3998,4,c	;volatile
 13237  00005C  D003               	goto	i1l656
 13238                           
 13239                           ;interrupt.c: 600: EUSART1_Transmit_ISR();
 13240  00005E  EC5C  F011         	call	_EUSART1_Transmit_ISR	;wreg free
 13241                           
 13242                           ;interrupt.c: 602: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 13243  000062  D025               	goto	i1l669
 13244  000064                     i1l656:
 13245  000064  BA9D               	btfsc	3997,5,c	;volatile
 13246  000066  AA9E               	btfss	3998,5,c	;volatile
 13247  000068  D00B               	goto	i1l658
 13248                           
 13249                           ;interrupt.c: 603: if (RX1_ABR==0){
 13250  00006A  B84F               	btfsc	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13251  00006C  D003               	goto	i1l659
 13252                           
 13253                           ;interrupt.c: 604: EUSART1_Receive_ISR();
 13254  00006E  EC36  F00A         	call	_EUSART1_Receive_ISR	;wreg free
 13255                           
 13256                           ;interrupt.c: 605: }else{
 13257  000072  D01D               	goto	i1l669
 13258  000074                     i1l659:
 13259                           
 13260                           ;interrupt.c: 606: eusart1RxIndex = RCREG;
 13261  000074  CFAE F045          	movff	4014,_eusart1RxIndex	;volatile
 13262                           
 13263                           ;interrupt.c: 607: eusart1RxIndex = 0;
 13264  000078  6A45               	clrf	_eusart1RxIndex,c	;volatile
 13265                           
 13266                           ;interrupt.c: 608: PIR1bits.RC1IF = 0;
 13267  00007A  9A9E               	bcf	3998,5,c	;volatile
 13268                           
 13269                           ;interrupt.c: 609: RX1_ABR = 0;}
 13270  00007C  984F               	bcf	_RX1_ABR/(0+8),_RX1_ABR& (0+7),c	;volatile
 13271                           
 13272                           ;interrupt.c: 611: } else
 13273  00007E  D017               	goto	i1l669
 13274  000080                     i1l658:
 13275                           
 13276                           ;interrupt.c: 615: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
 13277  000080  BAF2               	btfsc	intcon,5,c	;volatile
 13278  000082  A4F2               	btfss	intcon,2,c	;volatile
 13279  000084  D003               	goto	i1l662
 13280                           
 13281                           ;interrupt.c: 616: IRQ_TIMER_0();
 13282  000086  EC39  F00F         	call	i1_IRQ_TIMER_0	;wreg free
 13283                           
 13284                           ;interrupt.c: 622: } else
 13285  00008A  D011               	goto	i1l669
 13286  00008C                     i1l662:
 13287                           
 13288                           ;interrupt.c: 625: if (PIE3bits.TMR5IE == 1 && PIR3bits.TMR5IF == 1) {
 13289  00008C  B0A3               	btfsc	4003,0,c	;volatile
 13290  00008E  A0A4               	btfss	4004,0,c	;volatile
 13291  000090  D003               	goto	i1l664
 13292                           
 13293                           ;interrupt.c: 626: IRQ_TIMER_5();
 13294  000092  ECDD  F00D         	call	i1_IRQ_TIMER_5	;wreg free
 13295                           
 13296                           ;interrupt.c: 648: } else
 13297  000096  D00B               	goto	i1l669
 13298  000098                     i1l664:
 13299                           
 13300                           ;interrupt.c: 650: if ((PIE3bits.PTIE == 1) && (PIR3bits.PTIF == 1)) {
 13301  000098  B8A3               	btfsc	4003,4,c	;volatile
 13302  00009A  A8A4               	btfss	4004,4,c	;volatile
 13303  00009C  D003               	goto	i1l666
 13304                           
 13305                           ;interrupt.c: 651: IRQ_PWM();
 13306  00009E  ECA3  F013         	call	i1_IRQ_PWM	;wreg free
 13307                           
 13308                           ;interrupt.c: 655: } else
 13309  0000A2  D005               	goto	i1l669
 13310  0000A4                     i1l666:
 13311                           
 13312                           ;interrupt.c: 660: if ((PIE1bits.ADIE == 1) && (PIR1bits.ADIF == 1)) {
 13313  0000A4  BC9D               	btfsc	3997,6,c	;volatile
 13314  0000A6  AC9E               	btfss	3998,6,c	;volatile
 13315  0000A8  D002               	goto	i1l669
 13316                           
 13317                           ;interrupt.c: 667: IRQ_ADC();
 13318  0000AA  ECDD  F007         	call	i1_IRQ_ADC	;wreg free
 13319  0000AE                     i1l669:
 13320  0000AE  C00E  FFDA         	movff	??_LOW_PRIORITY_IRQ+6,fsr2h
 13321  0000B2  C00D  FFD9         	movff	??_LOW_PRIORITY_IRQ+5,fsr2l
 13322  0000B6  C00C  FFE2         	movff	??_LOW_PRIORITY_IRQ+4,fsr1h
 13323  0000BA  C00B  FFE1         	movff	??_LOW_PRIORITY_IRQ+3,fsr1l
 13324  0000BE  C00A  FFE0         	movff	??_LOW_PRIORITY_IRQ+2,bsr
 13325  0000C2  C009  FFE8         	movff	??_LOW_PRIORITY_IRQ+1,wreg
 13326  0000C6  C008  FFD8         	movff	??_LOW_PRIORITY_IRQ,status
 13327  0000CA  9051               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 13328  0000CC  0010               	retfie	
 13329  0000CE                     __end_of_LOW_PRIORITY_IRQ:
 13330                           	opt stack 0
 13331                           tblptru	equ	0xFF8
 13332                           tblptrh	equ	0xFF7
 13333                           tblptrl	equ	0xFF6
 13334                           tablat	equ	0xFF5
 13335                           prodh	equ	0xFF4
 13336                           prodl	equ	0xFF3
 13337                           intcon	equ	0xFF2
 13338                           intcon2	equ	0xFF1
 13339                           intcon3	equ	0xFF0
 13340                           postinc0	equ	0xFEE
 13341                           wreg	equ	0xFE8
 13342                           indf1	equ	0xFE7
 13343                           postdec1	equ	0xFE5
 13344                           fsr1h	equ	0xFE2
 13345                           fsr1l	equ	0xFE1
 13346                           bsr	equ	0xFE0
 13347                           indf2	equ	0xFDF
 13348                           postinc2	equ	0xFDE
 13349                           postdec2	equ	0xFDD
 13350                           fsr2h	equ	0xFDA
 13351                           fsr2l	equ	0xFD9
 13352                           status	equ	0xFD8
 13353                           
 13354 ;; *************** function i1_IRQ_TIMER_5 *****************
 13355 ;; Defined at:
 13356 ;;		line 409 in file "interrupt.c"
 13357 ;; Parameters:    Size  Location     Type
 13358 ;;		None
 13359 ;; Auto vars:     Size  Location     Type
 13360 ;;		None
 13361 ;; Return value:  Size  Location     Type
 13362 ;;                  1    wreg      void 
 13363 ;; Registers used:
 13364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13365 ;; Tracked objects:
 13366 ;;		On entry : 0/0
 13367 ;;		On exit  : 0/0
 13368 ;;		Unchanged: 0/0
 13369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13370 ;;      Params:         0       0       0       0
 13371 ;;      Locals:         0       0       0       0
 13372 ;;      Temps:          0       0       0       0
 13373 ;;      Totals:         0       0       0       0
 13374 ;;Total ram usage:        0 bytes
 13375 ;; Hardware stack levels used:    1
 13376 ;; Hardware stack levels required when called:    8
 13377 ;; This function calls:
 13378 ;;		i1_Alarme_On
 13379 ;;		i1_Buzzer_Etat
 13380 ;;		i1_Etat_Update
 13381 ;;		i1_TIMER5_Off
 13382 ;; This function is called by:
 13383 ;;		_LOW_PRIORITY_IRQ
 13384 ;; This function uses a non-reentrant model
 13385 ;;
 13386                           
 13387                           	psect	text80
 13388  001BBA                     __ptext80:
 13389                           	opt stack 0
 13390  001BBA                     i1_IRQ_TIMER_5:
 13391                           	opt stack 11
 13392                           
 13393                           ;interrupt.c: 410: PIR3bits.TMR5IF = 0;
 13394                           
 13395                           ;incstack = 0
 13396  001BBA  90A4               	bcf	4004,0,c	;volatile
 13397                           
 13398                           ;interrupt.c: 413: nb_100ms_Timer_5 += 1;
 13399  001BBC  0100               	movlb	0	; () banked
 13400  001BBE  2BA6               	incf	_nb_100ms_Timer_5& (0+255),f,b	;volatile
 13401                           
 13402                           ; BSR set to: 0
 13403                           ;interrupt.c: 416: if (nb_100ms_Timer_5 == nb_100ms_pion) {
 13404  001BC0  51A5               	movf	_nb_100ms_pion& (0+255),w,b
 13405  001BC2  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13406  001BC4  E115               	bnz	i1l6926
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;interrupt.c: 417: if (Mouvement_Startup != 1) {
 13410  001BC6  044D               	decf	_Mouvement_Startup,w,c
 13411  001BC8  E001               	bz	i1l6912
 13412                           
 13413                           ; BSR set to: 0
 13414                           ;interrupt.c: 418: nb_Pion += 1;
 13415  001BCA  2BA1               	incf	_nb_Pion& (0+255),f,b	;volatile
 13416  001BCC                     i1l6912:
 13417                           
 13418                           ; BSR set to: 0
 13419                           ;interrupt.c: 419: }
 13420                           ;interrupt.c: 422: nb_s_fonctionnement = 0;
 13421  001BCC  6A4B               	clrf	_nb_s_fonctionnement,c	;volatile
 13422                           
 13423                           ; BSR set to: 0
 13424                           ;interrupt.c: 426: if ((Option_Pailleux == 1) | ((nb_Pion_Objectif != 0) && (nb_Pion_Obj
      +                          ectif <= nb_Pion))) {
 13425  001BCE  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13426  001BD0  E003               	bz	i1l607
 13427                           
 13428                           ; BSR set to: 0
 13429  001BD2  51A0               	movf	_nb_Pion_Objectif& (0+255),w,b
 13430  001BD4  5DA1               	subwf	_nb_Pion& (0+255),w,b	;volatile
 13431  001BD6  E202               	bc	i1l6918
 13432  001BD8                     i1l607:
 13433                           
 13434                           ; BSR set to: 0
 13435  001BD8  AA4F               	btfss	_Option_Pailleux/(0+8),_Option_Pailleux& (0+7),c
 13436  001BDA  0012               	return	
 13437  001BDC                     i1l6918:
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;interrupt.c: 429: Buzzer_Etat((unsigned char) 0);
 13441  001BDC  0E00               	movlw	0
 13442  001BDE  EC56  F013         	call	i1_Buzzer_Etat
 13443                           
 13444                           ;interrupt.c: 430: P4_busy = 0;
 13445  001BE2  0100               	movlb	0	; () banked
 13446  001BE4  6BAC               	clrf	_P4_busy& (0+255),b
 13447                           
 13448                           ; BSR set to: 0
 13449                           ;interrupt.c: 431: TIMER5_Off();
 13450  001BE6  EC74  F013         	call	i1_TIMER5_Off	;wreg free
 13451                           
 13452                           ;interrupt.c: 432: Etat_Update(0);
 13453  001BEA  0E00               	movlw	0
 13454  001BEC  EF2F  F012         	goto	i1_Etat_Update
 13455  001BF0                     i1l6926:
 13456                           
 13457                           ; BSR set to: 0
 13458  001BF0  51A4               	movf	_nb_100ms_platine& (0+255),w,b
 13459  001BF2  19A6               	xorwf	_nb_100ms_Timer_5& (0+255),w,b	;volatile
 13460  001BF4  A4D8               	btfss	status,2,c
 13461  001BF6  0012               	return	
 13462                           
 13463                           ; BSR set to: 0
 13464                           ;interrupt.c: 459: if ((moteur_indice == 1) &&(PORTAbits.RA2 == 0) && (Mouvement_Startup
      +                           == 1)) {
 13465  001BF8  0599               	decf	_moteur_indice& (0+255),w,b	;volatile
 13466  001BFA  E10E               	bnz	i1l610
 13467                           
 13468                           ; BSR set to: 0
 13469  001BFC  B480               	btfsc	3968,2,c	;volatile
 13470  001BFE  D00C               	goto	i1l610
 13471                           
 13472                           ; BSR set to: 0
 13473  001C00  044D               	decf	_Mouvement_Startup,w,c
 13474  001C02  E10A               	bnz	i1l610
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;interrupt.c: 460: if (Option_Multitas==1){
 13478  001C04  AC4F               	btfss	_Option_Multitas/(0+8),_Option_Multitas& (0+7),c
 13479  001C06  D004               	goto	i1l6938
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;interrupt.c: 461: Alarme_On(11);
 13483  001C08  0E0B               	movlw	11
 13484  001C0A  EC38  F013         	call	i1_Alarme_On
 13485                           
 13486                           ;interrupt.c: 462: }else{
 13487  001C0E  D008               	goto	i1l6942
 13488  001C10                     i1l6938:
 13489                           
 13490                           ; BSR set to: 0
 13491                           ;interrupt.c: 463: Alarme_On(6);
 13492  001C10  0E06               	movlw	6
 13493  001C12  EC38  F013         	call	i1_Alarme_On
 13494  001C16  D004               	goto	i1l6942
 13495  001C18                     i1l610:
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;interrupt.c: 467: P4_busy = 0;
 13499  001C18  6BAC               	clrf	_P4_busy& (0+255),b
 13500                           
 13501                           ; BSR set to: 0
 13502                           ;interrupt.c: 468: Etat_Update(6);
 13503  001C1A  0E06               	movlw	6
 13504  001C1C  EC2F  F012         	call	i1_Etat_Update
 13505  001C20                     i1l6942:
 13506                           
 13507                           ;interrupt.c: 471: }
 13508                           ;interrupt.c: 473: Buzzer_Etat((unsigned char) 0);
 13509  001C20  0E00               	movlw	0
 13510  001C22  EC56  F013         	call	i1_Buzzer_Etat
 13511                           
 13512                           ;interrupt.c: 474: TIMER5_Off();
 13513  001C26  EF74  F013         	goto	i1_TIMER5_Off	;wreg free
 13514  001C2A                     __end_ofi1_IRQ_TIMER_5:
 13515                           	opt stack 0
 13516                           tblptru	equ	0xFF8
 13517                           tblptrh	equ	0xFF7
 13518                           tblptrl	equ	0xFF6
 13519                           tablat	equ	0xFF5
 13520                           prodh	equ	0xFF4
 13521                           prodl	equ	0xFF3
 13522                           intcon	equ	0xFF2
 13523                           intcon2	equ	0xFF1
 13524                           intcon3	equ	0xFF0
 13525                           postinc0	equ	0xFEE
 13526                           wreg	equ	0xFE8
 13527                           indf1	equ	0xFE7
 13528                           postdec1	equ	0xFE5
 13529                           fsr1h	equ	0xFE2
 13530                           fsr1l	equ	0xFE1
 13531                           bsr	equ	0xFE0
 13532                           indf2	equ	0xFDF
 13533                           postinc2	equ	0xFDE
 13534                           postdec2	equ	0xFDD
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function i1_Alarme_On *****************
 13540 ;; Defined at:
 13541 ;;		line 18 in file "alarme.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  alarme_new_v    1    wreg     unsigned char 
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;  alarme_new_v    1    5[COMRAM] unsigned char 
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      void 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13550 ;; Tracked objects:
 13551 ;;		On entry : 3F/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13555 ;;      Params:         0       0       0       0
 13556 ;;      Locals:         1       0       0       0
 13557 ;;      Temps:          0       0       0       0
 13558 ;;      Totals:         1       0       0       0
 13559 ;;Total ram usage:        1 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; Hardware stack levels required when called:    7
 13562 ;; This function calls:
 13563 ;;		i1_Coupe_Moteur
 13564 ;;		i1_Etat_Update
 13565 ;; This function is called by:
 13566 ;;		i1_IRQ_TIMER_5
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           	psect	text81
 13571  002670                     __ptext81:
 13572                           	opt stack 0
 13573  002670                     i1_Alarme_On:
 13574                           	opt stack 11
 13575                           
 13576                           ;incstack = 0
 13577                           ;i1Alarme_On@alarme_new_value stored from wreg
 13578  002670  6E06               	movwf	i1Alarme_On@alarme_new_value,c
 13579                           
 13580                           ;alarme.c: 22: Etat_Update(1);
 13581  002672  0E01               	movlw	1
 13582  002674  EC2F  F012         	call	i1_Etat_Update
 13583                           
 13584                           ;alarme.c: 23: Alarme = alarme_new_value;
 13585  002678  C006  F0A9         	movff	i1Alarme_On@alarme_new_value,_Alarme	;volatile
 13586                           
 13587                           ;alarme.c: 24: Coupe_Moteur();
 13588  00267C  EFD8  F012         	goto	i1_Coupe_Moteur	;wreg free
 13589  002680                     __end_ofi1_Alarme_On:
 13590                           	opt stack 0
 13591                           tblptru	equ	0xFF8
 13592                           tblptrh	equ	0xFF7
 13593                           tblptrl	equ	0xFF6
 13594                           tablat	equ	0xFF5
 13595                           prodh	equ	0xFF4
 13596                           prodl	equ	0xFF3
 13597                           intcon	equ	0xFF2
 13598                           intcon2	equ	0xFF1
 13599                           intcon3	equ	0xFF0
 13600                           postinc0	equ	0xFEE
 13601                           wreg	equ	0xFE8
 13602                           indf1	equ	0xFE7
 13603                           postdec1	equ	0xFE5
 13604                           fsr1h	equ	0xFE2
 13605                           fsr1l	equ	0xFE1
 13606                           bsr	equ	0xFE0
 13607                           indf2	equ	0xFDF
 13608                           postinc2	equ	0xFDE
 13609                           postdec2	equ	0xFDD
 13610                           fsr2h	equ	0xFDA
 13611                           fsr2l	equ	0xFD9
 13612                           status	equ	0xFD8
 13613                           
 13614 ;; *************** function i1_Etat_Update *****************
 13615 ;; Defined at:
 13616 ;;		line 74 in file "action.c"
 13617 ;; Parameters:    Size  Location     Type
 13618 ;;  etat_new_val    1    wreg     unsigned char 
 13619 ;; Auto vars:     Size  Location     Type
 13620 ;;  etat_new_val    1    4[COMRAM] unsigned char 
 13621 ;; Return value:  Size  Location     Type
 13622 ;;                  1    wreg      void 
 13623 ;; Registers used:
 13624 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13625 ;; Tracked objects:
 13626 ;;		On entry : 0/0
 13627 ;;		On exit  : 0/0
 13628 ;;		Unchanged: 0/0
 13629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13630 ;;      Params:         0       0       0       0
 13631 ;;      Locals:         1       0       0       0
 13632 ;;      Temps:          0       0       0       0
 13633 ;;      Totals:         1       0       0       0
 13634 ;;Total ram usage:        1 bytes
 13635 ;; Hardware stack levels used:    1
 13636 ;; Hardware stack levels required when called:    5
 13637 ;; This function calls:
 13638 ;;		Nothing
 13639 ;; This function is called by:
 13640 ;;		i1_IRQ_TIMER_5
 13641 ;;		i1_Alarme_On
 13642 ;; This function uses a non-reentrant model
 13643 ;;
 13644                           
 13645                           	psect	text82
 13646  00245E                     __ptext82:
 13647                           	opt stack 0
 13648  00245E                     i1_Etat_Update:
 13649                           	opt stack 13
 13650                           
 13651                           ;incstack = 0
 13652                           ;i1Etat_Update@etat_new_value stored from wreg
 13653  00245E  6E05               	movwf	i1Etat_Update@etat_new_value,c
 13654                           
 13655                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 13656  002460  504C               	movf	_Etat_Precedent_Index,w,c
 13657  002462  0F6A               	addlw	low _Etat_Log
 13658  002464  6ED9               	movwf	fsr2l,c
 13659  002466  6ADA               	clrf	fsr2h,c
 13660  002468  C005  FFDF         	movff	i1Etat_Update@etat_new_value,indf2
 13661                           
 13662                           ;action.c: 76: Etat = etat_new_value;
 13663  00246C  C005  F0AA         	movff	i1Etat_Update@etat_new_value,_Etat	;volatile
 13664                           
 13665                           ;action.c: 77: Etat_Precedent_Index++;
 13666  002470  2A4C               	incf	_Etat_Precedent_Index,f,c
 13667                           
 13668                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 13669  002472  0E0A               	movlw	10
 13670  002474  184C               	xorwf	_Etat_Precedent_Index,w,c
 13671  002476  B4D8               	btfsc	status,2,c
 13672                           
 13673                           ;action.c: 79: Etat_Precedent_Index = 0;
 13674  002478  6A4C               	clrf	_Etat_Precedent_Index,c
 13675  00247A  0012               	return		;funcret
 13676  00247C                     __end_ofi1_Etat_Update:
 13677                           	opt stack 0
 13678                           tblptru	equ	0xFF8
 13679                           tblptrh	equ	0xFF7
 13680                           tblptrl	equ	0xFF6
 13681                           tablat	equ	0xFF5
 13682                           prodh	equ	0xFF4
 13683                           prodl	equ	0xFF3
 13684                           intcon	equ	0xFF2
 13685                           intcon2	equ	0xFF1
 13686                           intcon3	equ	0xFF0
 13687                           postinc0	equ	0xFEE
 13688                           wreg	equ	0xFE8
 13689                           indf1	equ	0xFE7
 13690                           postdec1	equ	0xFE5
 13691                           fsr1h	equ	0xFE2
 13692                           fsr1l	equ	0xFE1
 13693                           bsr	equ	0xFE0
 13694                           indf2	equ	0xFDF
 13695                           postinc2	equ	0xFDE
 13696                           postdec2	equ	0xFDD
 13697                           fsr2h	equ	0xFDA
 13698                           fsr2l	equ	0xFD9
 13699                           status	equ	0xFD8
 13700                           
 13701 ;; *************** function i1_Coupe_Moteur *****************
 13702 ;; Defined at:
 13703 ;;		line 261 in file "action.c"
 13704 ;; Parameters:    Size  Location     Type
 13705 ;;		None
 13706 ;; Auto vars:     Size  Location     Type
 13707 ;;		None
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  1    wreg      void 
 13710 ;; Registers used:
 13711 ;;		cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 0/0
 13714 ;;		On exit  : 0/0
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13717 ;;      Params:         0       0       0       0
 13718 ;;      Locals:         0       0       0       0
 13719 ;;      Temps:          0       0       0       0
 13720 ;;      Totals:         0       0       0       0
 13721 ;;Total ram usage:        0 bytes
 13722 ;; Hardware stack levels used:    1
 13723 ;; Hardware stack levels required when called:    6
 13724 ;; This function calls:
 13725 ;;		i1_TIMER2_Off
 13726 ;; This function is called by:
 13727 ;;		i1_Alarme_On
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text83
 13732  0025B0                     __ptext83:
 13733                           	opt stack 0
 13734  0025B0                     i1_Coupe_Moteur:
 13735                           	opt stack 11
 13736                           
 13737                           ;action.c: 262: TIMER2_Off();
 13738                           
 13739                           ;incstack = 0
 13740  0025B0  EC92  F013         	call	i1_TIMER2_Off	;wreg free
 13741                           
 13742                           ;action.c: 274: LATCbits.LATC0 = 0;
 13743  0025B4  908B               	bcf	3979,0,c	;volatile
 13744                           
 13745                           ;action.c: 275: LATCbits.LATC1 = 0;
 13746  0025B6  928B               	bcf	3979,1,c	;volatile
 13747                           
 13748                           ;action.c: 276: OVDCOND = 0b00000000;
 13749  0025B8  6A6B               	clrf	3947,c	;volatile
 13750                           
 13751                           ;action.c: 277: LATD4 = 0;LATD5 = 0;
 13752  0025BA  988C               	bcf	3980,4,c	;volatile
 13753  0025BC  9A8C               	bcf	3980,5,c	;volatile
 13754                           
 13755                           ;action.c: 278: LATD6 = 0;LATD7 = 0;
 13756  0025BE  9C8C               	bcf	3980,6,c	;volatile
 13757  0025C0  9E8C               	bcf	3980,7,c	;volatile
 13758  0025C2  0012               	return		;funcret
 13759  0025C4                     __end_ofi1_Coupe_Moteur:
 13760                           	opt stack 0
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           intcon2	equ	0xFF1
 13769                           intcon3	equ	0xFF0
 13770                           postinc0	equ	0xFEE
 13771                           wreg	equ	0xFE8
 13772                           indf1	equ	0xFE7
 13773                           postdec1	equ	0xFE5
 13774                           fsr1h	equ	0xFE2
 13775                           fsr1l	equ	0xFE1
 13776                           bsr	equ	0xFE0
 13777                           indf2	equ	0xFDF
 13778                           postinc2	equ	0xFDE
 13779                           postdec2	equ	0xFDD
 13780                           fsr2h	equ	0xFDA
 13781                           fsr2l	equ	0xFD9
 13782                           status	equ	0xFD8
 13783                           
 13784 ;; *************** function i1_TIMER2_Off *****************
 13785 ;; Defined at:
 13786 ;;		line 165 in file "timer.c"
 13787 ;; Parameters:    Size  Location     Type
 13788 ;;		None
 13789 ;; Auto vars:     Size  Location     Type
 13790 ;;		None
 13791 ;; Return value:  Size  Location     Type
 13792 ;;                  1    wreg      void 
 13793 ;; Registers used:
 13794 ;;		None
 13795 ;; Tracked objects:
 13796 ;;		On entry : 0/0
 13797 ;;		On exit  : 0/0
 13798 ;;		Unchanged: 0/0
 13799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13800 ;;      Params:         0       0       0       0
 13801 ;;      Locals:         0       0       0       0
 13802 ;;      Temps:          0       0       0       0
 13803 ;;      Totals:         0       0       0       0
 13804 ;;Total ram usage:        0 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    5
 13807 ;; This function calls:
 13808 ;;		Nothing
 13809 ;; This function is called by:
 13810 ;;		i1_Coupe_Moteur
 13811 ;; This function uses a non-reentrant model
 13812 ;;
 13813                           
 13814                           	psect	text84
 13815  002724                     __ptext84:
 13816                           	opt stack 0
 13817  002724                     i1_TIMER2_Off:
 13818                           	opt stack 11
 13819                           
 13820                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 13821                           
 13822                           ;incstack = 0
 13823  002724  929D               	bcf	3997,1,c	;volatile
 13824                           
 13825                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 13826  002726  929E               	bcf	3998,1,c	;volatile
 13827  002728  0012               	return		;funcret
 13828  00272A                     __end_ofi1_TIMER2_Off:
 13829                           	opt stack 0
 13830                           tblptru	equ	0xFF8
 13831                           tblptrh	equ	0xFF7
 13832                           tblptrl	equ	0xFF6
 13833                           tablat	equ	0xFF5
 13834                           prodh	equ	0xFF4
 13835                           prodl	equ	0xFF3
 13836                           intcon	equ	0xFF2
 13837                           intcon2	equ	0xFF1
 13838                           intcon3	equ	0xFF0
 13839                           postinc0	equ	0xFEE
 13840                           wreg	equ	0xFE8
 13841                           indf1	equ	0xFE7
 13842                           postdec1	equ	0xFE5
 13843                           fsr1h	equ	0xFE2
 13844                           fsr1l	equ	0xFE1
 13845                           bsr	equ	0xFE0
 13846                           indf2	equ	0xFDF
 13847                           postinc2	equ	0xFDE
 13848                           postdec2	equ	0xFDD
 13849                           fsr2h	equ	0xFDA
 13850                           fsr2l	equ	0xFD9
 13851                           status	equ	0xFD8
 13852                           
 13853 ;; *************** function i1_IRQ_TIMER_0 *****************
 13854 ;; Defined at:
 13855 ;;		line 361 in file "interrupt.c"
 13856 ;; Parameters:    Size  Location     Type
 13857 ;;		None
 13858 ;; Auto vars:     Size  Location     Type
 13859 ;;		None
 13860 ;; Return value:  Size  Location     Type
 13861 ;;                  1    wreg      void 
 13862 ;; Registers used:
 13863 ;;		wreg, status,2, status,0, cstack
 13864 ;; Tracked objects:
 13865 ;;		On entry : 0/0
 13866 ;;		On exit  : 3F/0
 13867 ;;		Unchanged: 0/0
 13868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 13869 ;;      Params:         0       0       0       0
 13870 ;;      Locals:         0       0       0       0
 13871 ;;      Temps:          0       0       0       0
 13872 ;;      Totals:         0       0       0       0
 13873 ;;Total ram usage:        0 bytes
 13874 ;; Hardware stack levels used:    1
 13875 ;; Hardware stack levels required when called:    6
 13876 ;; This function calls:
 13877 ;;		i1_Surveillance_Consommation_Moteur_1_Activer
 13878 ;;		i1_Surveillance_Consommation_Moteur_2_Activer
 13879 ;; This function is called by:
 13880 ;;		_LOW_PRIORITY_IRQ
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           	psect	text85
 13885  001E72                     __ptext85:
 13886                           	opt stack 0
 13887  001E72                     i1_IRQ_TIMER_0:
 13888                           	opt stack 13
 13889                           
 13890                           ;interrupt.c: 362: INTCONbits.TMR0IF = 0;
 13891                           
 13892                           ;incstack = 0
 13893  001E72  94F2               	bcf	intcon,2,c	;volatile
 13894                           
 13895                           ;interrupt.c: 364: nb_s_fonctionnement += 1;
 13896  001E74  2A4B               	incf	_nb_s_fonctionnement,f,c	;volatile
 13897                           
 13898                           ;interrupt.c: 365: Capteur_Capot_Compteur_Temps_S += 1;
 13899  001E76  0100               	movlb	0	; () banked
 13900  001E78  2B9E               	incf	_Capteur_Capot_Compteur_Temps_S& (0+255),f,b	;volatile
 13901                           
 13902                           ;interrupt.c: 366: delay_s_counter += 1;
 13903  001E7A  2B8C               	incf	_delay_s_counter& (0+255),f,b	;volatile
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;interrupt.c: 371: if (nb_s_fonctionnement == 2) {
 13907  001E7C  0E02               	movlw	2
 13908  001E7E  184B               	xorwf	_nb_s_fonctionnement,w,c	;volatile
 13909  001E80  E01C               	bz	i1l6900
 13910  001E82  0012               	return	
 13911  001E84                     i1l6880:
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;interrupt.c: 379: Surveillance_Consommation_Moteur_1_Activer();
 13915  001E84  EC07  F013         	call	i1_Surveillance_Consommation_Moteur_1_Activer	;wreg free
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;interrupt.c: 380: if (Consigne_Max_Moteur_X > Consigne_Max) {
 13919  001E88  5196               	movf	_Consigne_Max_Moteur_X& (0+255),w,b	;volatile
 13920  001E8A  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13921  001E8C  E203               	bc	i1l588
 13922  001E8E                     i1l6884:
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;interrupt.c: 381: consigne = Consigne_Max;
 13926  001E8E  C097  F098         	movff	_Consigne_Max,_consigne	;volatile
 13927                           
 13928                           ;interrupt.c: 382: } else {
 13929  001E92  0012               	return	
 13930  001E94                     i1l588:
 13931                           
 13932                           ; BSR set to: 0
 13933                           ;interrupt.c: 383: consigne = Consigne_Max_Moteur_X;
 13934  001E94  C096  F098         	movff	_Consigne_Max_Moteur_X,_consigne	;volatile
 13935  001E98  0012               	return	
 13936  001E9A                     i1l6886:
 13937                           
 13938                           ; BSR set to: 0
 13939                           ;interrupt.c: 387: Surveillance_Consommation_Moteur_2_Activer();
 13940  001E9A  ECFE  F012         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13941                           
 13942                           ; BSR set to: 0
 13943                           ;interrupt.c: 389: if (Consigne_Max_Moteur_Z > Consigne_Max) {
 13944  001E9E  5195               	movf	_Consigne_Max_Moteur_Z& (0+255),w,b	;volatile
 13945  001EA0  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13946  001EA2  E3F5               	bnc	i1l6884
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;interrupt.c: 392: consigne = Consigne_Max_Moteur_Z;
 13950  001EA4  C095  F098         	movff	_Consigne_Max_Moteur_Z,_consigne	;volatile
 13951  001EA8  0012               	return	
 13952  001EAA                     i1l6892:
 13953                           
 13954                           ; BSR set to: 0
 13955                           ;interrupt.c: 396: Surveillance_Consommation_Moteur_2_Activer();
 13956  001EAA  ECFE  F012         	call	i1_Surveillance_Consommation_Moteur_2_Activer	;wreg free
 13957                           
 13958                           ; BSR set to: 0
 13959                           ;interrupt.c: 397: if (Consigne_Max_Moteur_Bequille > Consigne_Max) {
 13960  001EAE  5194               	movf	_Consigne_Max_Moteur_Bequille& (0+255),w,b	;volatile
 13961  001EB0  5D97               	subwf	_Consigne_Max& (0+255),w,b	;volatile
 13962  001EB2  E3ED               	bnc	i1l6884
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;interrupt.c: 400: consigne = Consigne_Max_Moteur_Bequille;
 13966  001EB4  C094  F098         	movff	_Consigne_Max_Moteur_Bequille,_consigne	;volatile
 13967  001EB8  0012               	return	
 13968  001EBA                     i1l6900:
 13969                           
 13970                           ; BSR set to: 0
 13971  001EBA  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 13972                           
 13973                           ; Switch size 1, requested type "speed"
 13974                           ; Number of cases is 3, Range of values is 1 to 3
 13975                           ; switch strategies available:
 13976                           ; Name         Instructions Cycles
 13977                           ; simple_byte           10     6 (average)
 13978                           ;	Chosen strategy is simple_byte
 13979  001EBC  0A01               	xorlw	1	; case 1
 13980  001EBE  E0E2               	bz	i1l6880
 13981  001EC0  0A03               	xorlw	3	; case 2
 13982  001EC2  E0EB               	bz	i1l6886
 13983  001EC4  0A01               	xorlw	1	; case 3
 13984  001EC6  E0F1               	bz	i1l6892
 13985                           
 13986                           ; BSR set to: 0
 13987  001EC8  0012               	return		;funcret
 13988  001ECA                     __end_ofi1_IRQ_TIMER_0:
 13989                           	opt stack 0
 13990                           tblptru	equ	0xFF8
 13991                           tblptrh	equ	0xFF7
 13992                           tblptrl	equ	0xFF6
 13993                           tablat	equ	0xFF5
 13994                           prodh	equ	0xFF4
 13995                           prodl	equ	0xFF3
 13996                           intcon	equ	0xFF2
 13997                           intcon2	equ	0xFF1
 13998                           intcon3	equ	0xFF0
 13999                           postinc0	equ	0xFEE
 14000                           wreg	equ	0xFE8
 14001                           indf1	equ	0xFE7
 14002                           postdec1	equ	0xFE5
 14003                           fsr1h	equ	0xFE2
 14004                           fsr1l	equ	0xFE1
 14005                           bsr	equ	0xFE0
 14006                           indf2	equ	0xFDF
 14007                           postinc2	equ	0xFDE
 14008                           postdec2	equ	0xFDD
 14009                           fsr2h	equ	0xFDA
 14010                           fsr2l	equ	0xFD9
 14011                           status	equ	0xFD8
 14012                           
 14013 ;; *************** function i1_Surveillance_Consommation_Moteur_2_Activer *****************
 14014 ;; Defined at:
 14015 ;;		line 868 in file "interrupt.c"
 14016 ;; Parameters:    Size  Location     Type
 14017 ;;		None
 14018 ;; Auto vars:     Size  Location     Type
 14019 ;;		None
 14020 ;; Return value:  Size  Location     Type
 14021 ;;                  1    wreg      void 
 14022 ;; Registers used:
 14023 ;;		wreg, status,2, status,0
 14024 ;; Tracked objects:
 14025 ;;		On entry : 0/0
 14026 ;;		On exit  : 3F/0
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14029 ;;      Params:         0       0       0       0
 14030 ;;      Locals:         0       0       0       0
 14031 ;;      Temps:          0       0       0       0
 14032 ;;      Totals:         0       0       0       0
 14033 ;;Total ram usage:        0 bytes
 14034 ;; Hardware stack levels used:    1
 14035 ;; Hardware stack levels required when called:    5
 14036 ;; This function calls:
 14037 ;;		Nothing
 14038 ;; This function is called by:
 14039 ;;		i1_IRQ_TIMER_0
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text86
 14044  0025FC                     __ptext86:
 14045                           	opt stack 0
 14046  0025FC                     i1_Surveillance_Consommation_Moteur_2_Activer:
 14047                           	opt stack 13
 14048                           
 14049                           ;interrupt.c: 869: if (Surveillance_Consommation_Moteur_2 != 1) {
 14050                           
 14051                           ; BSR set to: 0
 14052                           ;incstack = 0
 14053  0025FC  0100               	movlb	0	; () banked
 14054  0025FE  058A               	decf	_Surveillance_Consommation_Moteur_2& (0+255),w,b
 14055  002600  B4D8               	btfsc	status,2,c
 14056  002602  0012               	return	
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;interrupt.c: 870: Surveillance_Consommation_Moteur_2 = 1;
 14060  002604  0E01               	movlw	1
 14061  002606  6F8A               	movwf	_Surveillance_Consommation_Moteur_2& (0+255),b
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;interrupt.c: 871: INTCON3bits.INT2IF = 0;
 14065  002608  92F0               	bcf	intcon3,1,c	;volatile
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;interrupt.c: 872: INTCON3bits.INT2IE = 1;
 14069  00260A  88F0               	bsf	intcon3,4,c	;volatile
 14070                           
 14071                           ; BSR set to: 0
 14072  00260C  0C01               	retlw	1	;funcret
 14073  00260E                     __end_ofi1_Surveillance_Consommation_Moteur_2_Activer:
 14074                           	opt stack 0
 14075                           tblptru	equ	0xFF8
 14076                           tblptrh	equ	0xFF7
 14077                           tblptrl	equ	0xFF6
 14078                           tablat	equ	0xFF5
 14079                           prodh	equ	0xFF4
 14080                           prodl	equ	0xFF3
 14081                           intcon	equ	0xFF2
 14082                           intcon2	equ	0xFF1
 14083                           intcon3	equ	0xFF0
 14084                           postinc0	equ	0xFEE
 14085                           wreg	equ	0xFE8
 14086                           indf1	equ	0xFE7
 14087                           postdec1	equ	0xFE5
 14088                           fsr1h	equ	0xFE2
 14089                           fsr1l	equ	0xFE1
 14090                           bsr	equ	0xFE0
 14091                           indf2	equ	0xFDF
 14092                           postinc2	equ	0xFDE
 14093                           postdec2	equ	0xFDD
 14094                           fsr2h	equ	0xFDA
 14095                           fsr2l	equ	0xFD9
 14096                           status	equ	0xFD8
 14097                           
 14098 ;; *************** function i1_Surveillance_Consommation_Moteur_1_Activer *****************
 14099 ;; Defined at:
 14100 ;;		line 852 in file "interrupt.c"
 14101 ;; Parameters:    Size  Location     Type
 14102 ;;		None
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;		None
 14105 ;; Return value:  Size  Location     Type
 14106 ;;                  1    wreg      void 
 14107 ;; Registers used:
 14108 ;;		wreg, status,2, status,0
 14109 ;; Tracked objects:
 14110 ;;		On entry : 0/0
 14111 ;;		On exit  : 3F/0
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14114 ;;      Params:         0       0       0       0
 14115 ;;      Locals:         0       0       0       0
 14116 ;;      Temps:          0       0       0       0
 14117 ;;      Totals:         0       0       0       0
 14118 ;;Total ram usage:        0 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    5
 14121 ;; This function calls:
 14122 ;;		Nothing
 14123 ;; This function is called by:
 14124 ;;		i1_IRQ_TIMER_0
 14125 ;; This function uses a non-reentrant model
 14126 ;;
 14127                           
 14128                           	psect	text87
 14129  00260E                     __ptext87:
 14130                           	opt stack 0
 14131  00260E                     i1_Surveillance_Consommation_Moteur_1_Activer:
 14132                           	opt stack 13
 14133                           
 14134                           ;interrupt.c: 853: if (Surveillance_Consommation_Moteur_1 != 1) {
 14135                           
 14136                           ; BSR set to: 0
 14137                           ;incstack = 0
 14138  00260E  0100               	movlb	0	; () banked
 14139  002610  058B               	decf	_Surveillance_Consommation_Moteur_1& (0+255),w,b
 14140  002612  B4D8               	btfsc	status,2,c
 14141  002614  0012               	return	
 14142                           
 14143                           ; BSR set to: 0
 14144                           ;interrupt.c: 854: Surveillance_Consommation_Moteur_1 = 1;
 14145  002616  0E01               	movlw	1
 14146  002618  6F8B               	movwf	_Surveillance_Consommation_Moteur_1& (0+255),b
 14147                           
 14148                           ; BSR set to: 0
 14149                           ;interrupt.c: 855: INTCON3bits.INT1IF = 0;
 14150  00261A  90F0               	bcf	intcon3,0,c	;volatile
 14151                           
 14152                           ; BSR set to: 0
 14153                           ;interrupt.c: 856: INTCON3bits.INT1IE = 1;
 14154  00261C  86F0               	bsf	intcon3,3,c	;volatile
 14155                           
 14156                           ; BSR set to: 0
 14157  00261E  0C01               	retlw	1	;funcret
 14158  002620                     __end_ofi1_Surveillance_Consommation_Moteur_1_Activer:
 14159                           	opt stack 0
 14160                           tblptru	equ	0xFF8
 14161                           tblptrh	equ	0xFF7
 14162                           tblptrl	equ	0xFF6
 14163                           tablat	equ	0xFF5
 14164                           prodh	equ	0xFF4
 14165                           prodl	equ	0xFF3
 14166                           intcon	equ	0xFF2
 14167                           intcon2	equ	0xFF1
 14168                           intcon3	equ	0xFF0
 14169                           postinc0	equ	0xFEE
 14170                           wreg	equ	0xFE8
 14171                           indf1	equ	0xFE7
 14172                           postdec1	equ	0xFE5
 14173                           fsr1h	equ	0xFE2
 14174                           fsr1l	equ	0xFE1
 14175                           bsr	equ	0xFE0
 14176                           indf2	equ	0xFDF
 14177                           postinc2	equ	0xFDE
 14178                           postdec2	equ	0xFDD
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function i1_IRQ_PWM *****************
 14184 ;; Defined at:
 14185 ;;		line 481 in file "interrupt.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;		None
 14188 ;; Auto vars:     Size  Location     Type
 14189 ;;		None
 14190 ;; Return value:  Size  Location     Type
 14191 ;;                  1    wreg      void 
 14192 ;; Registers used:
 14193 ;;		None
 14194 ;; Tracked objects:
 14195 ;;		On entry : 0/0
 14196 ;;		On exit  : 0/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14199 ;;      Params:         0       0       0       0
 14200 ;;      Locals:         0       0       0       0
 14201 ;;      Temps:          0       0       0       0
 14202 ;;      Totals:         0       0       0       0
 14203 ;;Total ram usage:        0 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:    5
 14206 ;; This function calls:
 14207 ;;		Nothing
 14208 ;; This function is called by:
 14209 ;;		_LOW_PRIORITY_IRQ
 14210 ;; This function uses a non-reentrant model
 14211 ;;
 14212                           
 14213                           	psect	text88
 14214  002746                     __ptext88:
 14215                           	opt stack 0
 14216  002746                     i1_IRQ_PWM:
 14217                           	opt stack 14
 14218                           
 14219                           ;interrupt.c: 483: PTIF = 0;
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;incstack = 0
 14223  002746  98A4               	bcf	4004,4,c	;volatile
 14224  002748  0012               	return		;funcret
 14225  00274A                     __end_ofi1_IRQ_PWM:
 14226                           	opt stack 0
 14227                           tblptru	equ	0xFF8
 14228                           tblptrh	equ	0xFF7
 14229                           tblptrl	equ	0xFF6
 14230                           tablat	equ	0xFF5
 14231                           prodh	equ	0xFF4
 14232                           prodl	equ	0xFF3
 14233                           intcon	equ	0xFF2
 14234                           intcon2	equ	0xFF1
 14235                           intcon3	equ	0xFF0
 14236                           postinc0	equ	0xFEE
 14237                           wreg	equ	0xFE8
 14238                           indf1	equ	0xFE7
 14239                           postdec1	equ	0xFE5
 14240                           fsr1h	equ	0xFE2
 14241                           fsr1l	equ	0xFE1
 14242                           bsr	equ	0xFE0
 14243                           indf2	equ	0xFDF
 14244                           postinc2	equ	0xFDE
 14245                           postdec2	equ	0xFDD
 14246                           fsr2h	equ	0xFDA
 14247                           fsr2l	equ	0xFD9
 14248                           status	equ	0xFD8
 14249                           
 14250 ;; *************** function i1_IRQ_ADC *****************
 14251 ;; Defined at:
 14252 ;;		line 486 in file "interrupt.c"
 14253 ;; Parameters:    Size  Location     Type
 14254 ;;		None
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;		None
 14257 ;; Return value:  Size  Location     Type
 14258 ;;                  1    wreg      void 
 14259 ;; Registers used:
 14260 ;;		wreg, status,2, status,0
 14261 ;; Tracked objects:
 14262 ;;		On entry : 0/0
 14263 ;;		On exit  : 3F/0
 14264 ;;		Unchanged: 0/0
 14265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14266 ;;      Params:         0       0       0       0
 14267 ;;      Locals:         0       0       0       0
 14268 ;;      Temps:          3       0       0       0
 14269 ;;      Totals:         3       0       0       0
 14270 ;;Total ram usage:        3 bytes
 14271 ;; Hardware stack levels used:    1
 14272 ;; Hardware stack levels required when called:    5
 14273 ;; This function calls:
 14274 ;;		Nothing
 14275 ;; This function is called by:
 14276 ;;		_LOW_PRIORITY_IRQ
 14277 ;; This function uses a non-reentrant model
 14278 ;;
 14279                           
 14280                           	psect	text89
 14281  000FBA                     __ptext89:
 14282                           	opt stack 0
 14283  000FBA                     i1_IRQ_ADC:
 14284                           	opt stack 14
 14285                           
 14286                           ;interrupt.c: 487: switch (moteur_indice) {
 14287                           
 14288                           ;incstack = 0
 14289  000FBA  D0C7               	goto	i1l7002
 14290  000FBC                     i1l622:
 14291                           
 14292                           ; BSR set to: 0
 14293                           ;interrupt.c: 489: Image_Courant_Moteur_1 = ADRESH;
 14294  000FBC  CFC4 F09B          	movff	4036,_Image_Courant_Moteur_1	;volatile
 14295                           
 14296                           ;interrupt.c: 490: Nouvelle_Valeur_ADC = 1;
 14297  000FC0  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14298                           
 14299                           ;interrupt.c: 492: ADIF = 0;
 14300  000FC2  9C9E               	bcf	3998,6,c	;volatile
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;interrupt.c: 495: erreur = consigne - Image_Courant_Moteur_1;
 14304  000FC4  519B               	movf	_Image_Courant_Moteur_1& (0+255),w,b	;volatile
 14305  000FC6  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14306  000FC8  6F84               	movwf	_erreur& (0+255),b	;volatile
 14307  000FCA  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14308  000FCC  A0D8               	btfss	status,0,c
 14309  000FCE  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14310                           
 14311                           ;interrupt.c: 496: if (erreur >= 10) duty++;
 14312  000FD0  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14313  000FD2  D008               	goto	i1l6952
 14314  000FD4  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14315  000FD6  E103               	bnz	i1u495_20
 14316  000FD8  0E0A               	movlw	10
 14317  000FDA  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14318  000FDC  E303               	bnc	i1l6952
 14319  000FDE                     i1u495_20:
 14320                           
 14321                           ; BSR set to: 0
 14322  000FDE  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14323  000FE0  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14324  000FE2  D006               	goto	i1l624
 14325  000FE4                     i1l6952:
 14326                           
 14327                           ; BSR set to: 0
 14328                           ;interrupt.c: 498: else if (erreur < 0) duty += erreur;
 14329  000FE4  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14330  000FE6  D004               	goto	i1l624
 14331                           
 14332                           ; BSR set to: 0
 14333  000FE8  5184               	movf	_erreur& (0+255),w,b	;volatile
 14334  000FEA  2786               	addwf	_duty& (0+255),f,b	;volatile
 14335  000FEC  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14336  000FEE  2387               	addwfc	(_duty+1)& (0+255),f,b	;volatile
 14337  000FF0                     i1l624:
 14338                           
 14339                           ; BSR set to: 0
 14340                           ;interrupt.c: 503: if (duty > PTPERL) duty = PTPERL;
 14341  000FF0  507B               	movf	3963,w,c	;volatile
 14342  000FF2  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14343  000FF4  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14344  000FF6  5186               	movf	_duty& (0+255),w,b	;volatile
 14345  000FF8  5C05               	subwf	??i1_IRQ_ADC,w,c
 14346  000FFA  5006               	movf	??i1_IRQ_ADC+1,w,c
 14347  000FFC  0A80               	xorlw	128
 14348  000FFE  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14349  001000  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14350  001002  0A80               	xorlw	128
 14351  001004  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14352  001006  E203               	bc	i1l6958
 14353                           
 14354                           ; BSR set to: 0
 14355  001008  CF7B F086          	movff	3963,_duty	;volatile
 14356  00100C  D003               	goto	L5
 14357  00100E                     i1l6958:
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;interrupt.c: 504: else if (duty < 0) duty = 0;
 14361  00100E  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14362  001010  D002               	goto	i1l6962
 14363                           
 14364                           ; BSR set to: 0
 14365  001012  6B86               	clrf	_duty& (0+255),b	;volatile
 14366  001014                     L5:
 14367  001014  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14368  001016                     i1l6962:
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;interrupt.c: 505: PDC0L = (char) (duty << 2);
 14372  001016  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14373  001018  46E8               	rlncf	wreg,f,c
 14374  00101A  0BFC               	andlw	252
 14375  00101C  6E79               	movwf	3961,c	;volatile
 14376                           
 14377                           ;interrupt.c: 506: PDC0H = (char) ((duty << 2) >> 8);
 14378  00101E  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14379  001022  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14380  001026  90D8               	bcf	status,0,c
 14381  001028  3605               	rlcf	??i1_IRQ_ADC,f,c
 14382  00102A  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14383  00102C  90D8               	bcf	status,0,c
 14384  00102E  3605               	rlcf	??i1_IRQ_ADC,f,c
 14385  001030  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14386  001032  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14387  001036  6A06               	clrf	??i1_IRQ_ADC+1,c
 14388  001038  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14389  00103A  6806               	setf	??i1_IRQ_ADC+1,c
 14390  00103C  5005               	movf	??i1_IRQ_ADC,w,c
 14391  00103E  6E78               	movwf	3960,c	;volatile
 14392                           
 14393                           ;interrupt.c: 508: break;
 14394  001040  0012               	return	
 14395  001042                     i1l630:
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;interrupt.c: 515: Image_Courant_Moteur_2 = ADRESH;
 14399  001042  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14400                           
 14401                           ;interrupt.c: 516: Nouvelle_Valeur_ADC = 1;
 14402  001046  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14403                           
 14404                           ;interrupt.c: 518: ADIF = 0;
 14405  001048  9C9E               	bcf	3998,6,c	;volatile
 14406                           
 14407                           ; BSR set to: 0
 14408                           ;interrupt.c: 521: erreur = consigne - Image_Courant_Moteur_2;
 14409  00104A  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14410  00104C  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14411  00104E  6F84               	movwf	_erreur& (0+255),b	;volatile
 14412  001050  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14413  001052  A0D8               	btfss	status,0,c
 14414  001054  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14415                           
 14416                           ;interrupt.c: 522: if (erreur >= 10) duty++;
 14417  001056  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14418  001058  D008               	goto	i1l6968
 14419  00105A  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14420  00105C  E103               	bnz	i1u499_20
 14421  00105E  0E0A               	movlw	10
 14422  001060  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14423  001062  E303               	bnc	i1l6968
 14424  001064                     i1u499_20:
 14425                           
 14426                           ; BSR set to: 0
 14427  001064  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14428  001066  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14429  001068  D005               	goto	i1l6972
 14430  00106A                     i1l6968:
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;interrupt.c: 523: else if (erreur < 0) duty--;
 14434  00106A  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14435  00106C  D003               	goto	i1l6972
 14436                           
 14437                           ; BSR set to: 0
 14438  00106E  0786               	decf	_duty& (0+255),f,b	;volatile
 14439  001070  A0D8               	btfss	status,0,c
 14440  001072  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14441  001074                     i1l6972:
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;interrupt.c: 527: if (duty > PTPERL) duty = PTPERL;
 14445  001074  507B               	movf	3963,w,c	;volatile
 14446  001076  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14447  001078  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14448  00107A  5186               	movf	_duty& (0+255),w,b	;volatile
 14449  00107C  5C05               	subwf	??i1_IRQ_ADC,w,c
 14450  00107E  5006               	movf	??i1_IRQ_ADC+1,w,c
 14451  001080  0A80               	xorlw	128
 14452  001082  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14453  001084  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14454  001086  0A80               	xorlw	128
 14455  001088  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14456  00108A  E203               	bc	i1l6976
 14457                           
 14458                           ; BSR set to: 0
 14459  00108C  CF7B F086          	movff	3963,_duty	;volatile
 14460  001090  D003               	goto	L6
 14461  001092                     i1l6976:
 14462                           
 14463                           ; BSR set to: 0
 14464                           ;interrupt.c: 528: else if (duty < 0) duty = 0;
 14465  001092  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14466  001094  D002               	goto	i1l6980
 14467                           
 14468                           ; BSR set to: 0
 14469  001096  6B86               	clrf	_duty& (0+255),b	;volatile
 14470  001098                     L6:
 14471  001098  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14472  00109A                     i1l6980:
 14473                           
 14474                           ; BSR set to: 0
 14475                           ;interrupt.c: 529: PDC1L = (char) (duty << 2);
 14476  00109A  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14477  00109C  46E8               	rlncf	wreg,f,c
 14478  00109E  0BFC               	andlw	252
 14479  0010A0  6E77               	movwf	3959,c	;volatile
 14480                           
 14481                           ;interrupt.c: 530: PDC1H = (char) ((duty << 2) >> 8);
 14482  0010A2  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14483  0010A6  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14484  0010AA  90D8               	bcf	status,0,c
 14485  0010AC  3605               	rlcf	??i1_IRQ_ADC,f,c
 14486  0010AE  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14487  0010B0  90D8               	bcf	status,0,c
 14488  0010B2  3605               	rlcf	??i1_IRQ_ADC,f,c
 14489  0010B4  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14490  0010B6  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14491  0010BA  6A06               	clrf	??i1_IRQ_ADC+1,c
 14492  0010BC  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14493  0010BE  6806               	setf	??i1_IRQ_ADC+1,c
 14494  0010C0  5005               	movf	??i1_IRQ_ADC,w,c
 14495  0010C2  6E76               	movwf	3958,c	;volatile
 14496                           
 14497                           ;interrupt.c: 532: break;
 14498  0010C4  0012               	return	
 14499  0010C6                     i1l637:
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;interrupt.c: 536: Image_Courant_Moteur_2 = ADRESH;
 14503  0010C6  CFC4 F09A          	movff	4036,_Image_Courant_Moteur_2	;volatile
 14504                           
 14505                           ;interrupt.c: 537: Nouvelle_Valeur_ADC = 1;
 14506  0010CA  8E4F               	bsf	_Nouvelle_Valeur_ADC/(0+8),_Nouvelle_Valeur_ADC& (0+7),c	;volatile
 14507                           
 14508                           ;interrupt.c: 539: ADIF = 0;
 14509  0010CC  9C9E               	bcf	3998,6,c	;volatile
 14510                           
 14511                           ; BSR set to: 0
 14512                           ;interrupt.c: 542: erreur = consigne - Image_Courant_Moteur_2;
 14513  0010CE  519A               	movf	_Image_Courant_Moteur_2& (0+255),w,b	;volatile
 14514  0010D0  5D98               	subwf	_consigne& (0+255),w,b	;volatile
 14515  0010D2  6F84               	movwf	_erreur& (0+255),b	;volatile
 14516  0010D4  6B85               	clrf	(_erreur+1)& (0+255),b	;volatile
 14517  0010D6  A0D8               	btfss	status,0,c
 14518  0010D8  0785               	decf	(_erreur+1)& (0+255),f,b	;volatile
 14519                           
 14520                           ;interrupt.c: 543: if (erreur >= 10) duty++;
 14521  0010DA  BF85               	btfsc	(_erreur+1)& (0+255),7,b	;volatile
 14522  0010DC  D008               	goto	i1l6986
 14523  0010DE  5185               	movf	(_erreur+1)& (0+255),w,b	;volatile
 14524  0010E0  E103               	bnz	i1u503_20
 14525  0010E2  0E0A               	movlw	10
 14526  0010E4  5D84               	subwf	_erreur& (0+255),w,b	;volatile
 14527  0010E6  E303               	bnc	i1l6986
 14528  0010E8                     i1u503_20:
 14529                           
 14530                           ; BSR set to: 0
 14531  0010E8  4B86               	infsnz	_duty& (0+255),f,b	;volatile
 14532  0010EA  2B87               	incf	(_duty+1)& (0+255),f,b	;volatile
 14533  0010EC  D005               	goto	i1l6990
 14534  0010EE                     i1l6986:
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;interrupt.c: 544: else if (erreur < 0) duty--;
 14538  0010EE  AF85               	btfss	(_erreur+1)& (0+255),7,b	;volatile
 14539  0010F0  D003               	goto	i1l6990
 14540                           
 14541                           ; BSR set to: 0
 14542  0010F2  0786               	decf	_duty& (0+255),f,b	;volatile
 14543  0010F4  A0D8               	btfss	status,0,c
 14544  0010F6  0787               	decf	(_duty+1)& (0+255),f,b	;volatile
 14545  0010F8                     i1l6990:
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;interrupt.c: 548: if (duty > PTPERL) duty = PTPERL;
 14549  0010F8  507B               	movf	3963,w,c	;volatile
 14550  0010FA  6E05               	movwf	??i1_IRQ_ADC& (0+255),c
 14551  0010FC  6A06               	clrf	(??i1_IRQ_ADC+1)& (0+255),c
 14552  0010FE  5186               	movf	_duty& (0+255),w,b	;volatile
 14553  001100  5C05               	subwf	??i1_IRQ_ADC,w,c
 14554  001102  5006               	movf	??i1_IRQ_ADC+1,w,c
 14555  001104  0A80               	xorlw	128
 14556  001106  6E07               	movwf	(??i1_IRQ_ADC+2)& (0+255),c
 14557  001108  5187               	movf	(_duty+1)& (0+255),w,b	;volatile
 14558  00110A  0A80               	xorlw	128
 14559  00110C  5807               	subwfb	(??i1_IRQ_ADC+2)& (0+255),w,c
 14560  00110E  E203               	bc	i1l6994
 14561                           
 14562                           ; BSR set to: 0
 14563  001110  CF7B F086          	movff	3963,_duty	;volatile
 14564  001114  D003               	goto	L7
 14565  001116                     i1l6994:
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;interrupt.c: 549: else if (duty < 0) duty = 0;
 14569  001116  AF87               	btfss	(_duty+1)& (0+255),7,b	;volatile
 14570  001118  D002               	goto	i1l6998
 14571                           
 14572                           ; BSR set to: 0
 14573  00111A  6B86               	clrf	_duty& (0+255),b	;volatile
 14574  00111C                     L7:
 14575  00111C  6B87               	clrf	(_duty+1)& (0+255),b	;volatile
 14576  00111E                     i1l6998:
 14577                           
 14578                           ; BSR set to: 0
 14579                           ;interrupt.c: 550: PDC1L = (char) (duty << 2);
 14580  00111E  4586               	rlncf	_duty& (0+255),w,b	;volatile
 14581  001120  46E8               	rlncf	wreg,f,c
 14582  001122  0BFC               	andlw	252
 14583  001124  6E77               	movwf	3959,c	;volatile
 14584                           
 14585                           ;interrupt.c: 551: PDC1H = (char) ((duty << 2) >> 8);
 14586  001126  C086  F005         	movff	_duty,??i1_IRQ_ADC	;volatile
 14587  00112A  C087  F006         	movff	_duty+1,??i1_IRQ_ADC+1	;volatile
 14588  00112E  90D8               	bcf	status,0,c
 14589  001130  3605               	rlcf	??i1_IRQ_ADC,f,c
 14590  001132  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14591  001134  90D8               	bcf	status,0,c
 14592  001136  3605               	rlcf	??i1_IRQ_ADC,f,c
 14593  001138  3606               	rlcf	??i1_IRQ_ADC+1,f,c
 14594  00113A  C006  F005         	movff	??i1_IRQ_ADC+1,??i1_IRQ_ADC
 14595  00113E  6A06               	clrf	??i1_IRQ_ADC+1,c
 14596  001140  BE05               	btfsc	??i1_IRQ_ADC,7,c
 14597  001142  6806               	setf	??i1_IRQ_ADC+1,c
 14598  001144  5005               	movf	??i1_IRQ_ADC,w,c
 14599  001146  6E76               	movwf	3958,c	;volatile
 14600                           
 14601                           ;interrupt.c: 553: break;
 14602  001148  0012               	return	
 14603  00114A                     i1l7002:
 14604  00114A  0100               	movlb	0	; () banked
 14605  00114C  5199               	movf	_moteur_indice& (0+255),w,b	;volatile
 14606                           
 14607                           ; Switch size 1, requested type "speed"
 14608                           ; Number of cases is 3, Range of values is 1 to 3
 14609                           ; switch strategies available:
 14610                           ; Name         Instructions Cycles
 14611                           ; simple_byte           10     6 (average)
 14612                           ;	Chosen strategy is simple_byte
 14613  00114E  0A01               	xorlw	1	; case 1
 14614  001150  E101 D734          	bz	i1l622
 14615  001154  0A03               	xorlw	3	; case 2
 14616  001156  E101 D774          	bz	i1l630
 14617  00115A  0A01               	xorlw	1	; case 3
 14618  00115C  E0B4               	bz	i1l637
 14619                           
 14620                           ; BSR set to: 0
 14621  00115E  0012               	return		;funcret
 14622  001160                     __end_ofi1_IRQ_ADC:
 14623                           	opt stack 0
 14624                           tblptru	equ	0xFF8
 14625                           tblptrh	equ	0xFF7
 14626                           tblptrl	equ	0xFF6
 14627                           tablat	equ	0xFF5
 14628                           prodh	equ	0xFF4
 14629                           prodl	equ	0xFF3
 14630                           intcon	equ	0xFF2
 14631                           intcon2	equ	0xFF1
 14632                           intcon3	equ	0xFF0
 14633                           postinc0	equ	0xFEE
 14634                           wreg	equ	0xFE8
 14635                           indf1	equ	0xFE7
 14636                           postdec1	equ	0xFE5
 14637                           fsr1h	equ	0xFE2
 14638                           fsr1l	equ	0xFE1
 14639                           bsr	equ	0xFE0
 14640                           indf2	equ	0xFDF
 14641                           postinc2	equ	0xFDE
 14642                           postdec2	equ	0xFDD
 14643                           fsr2h	equ	0xFDA
 14644                           fsr2l	equ	0xFD9
 14645                           status	equ	0xFD8
 14646                           
 14647 ;; *************** function _SPI_ISR *****************
 14648 ;; Defined at:
 14649 ;;		line 169 in file "spi.c"
 14650 ;; Parameters:    Size  Location     Type
 14651 ;;		None
 14652 ;; Auto vars:     Size  Location     Type
 14653 ;;  i               1    6[COMRAM] unsigned char 
 14654 ;; Return value:  Size  Location     Type
 14655 ;;                  1    wreg      void 
 14656 ;; Registers used:
 14657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14658 ;; Tracked objects:
 14659 ;;		On entry : 0/0
 14660 ;;		On exit  : 0/0
 14661 ;;		Unchanged: 0/0
 14662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14663 ;;      Params:         0       0       0       0
 14664 ;;      Locals:         1       0       0       0
 14665 ;;      Temps:          2       0       0       0
 14666 ;;      Totals:         3       0       0       0
 14667 ;;Total ram usage:        3 bytes
 14668 ;; Hardware stack levels used:    1
 14669 ;; Hardware stack levels required when called:    5
 14670 ;; This function calls:
 14671 ;;		Nothing
 14672 ;; This function is called by:
 14673 ;;		_LOW_PRIORITY_IRQ
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           	psect	text90
 14678  001288                     __ptext90:
 14679                           	opt stack 0
 14680  001288                     _SPI_ISR:
 14681                           	opt stack 14
 14682                           
 14683                           ;spi.c: 171: unsigned char i;
 14684                           ;spi.c: 175: PIR1bits.SSPIF = 0;
 14685                           
 14686                           ; BSR set to: 0
 14687                           ;incstack = 0
 14688  001288  969E               	bcf	3998,3,c	;volatile
 14689                           
 14690                           ;spi.c: 178: i = (unsigned char) SSPBUF;
 14691  00128A  CFC9 F007          	movff	4041,SPI_ISR@i	;volatile
 14692                           
 14693                           ;spi.c: 180: switch(SPI_MODE){
 14694  00128E  D075               	goto	i1l6818
 14695  001290                     i1l6782:
 14696                           
 14697                           ;spi.c: 196: if (i!=0x0D){
 14698  001290  0E0D               	movlw	13
 14699  001292  1807               	xorwf	SPI_ISR@i,w,c
 14700  001294  E012               	bz	i1l1649
 14701                           
 14702                           ;spi.c: 197: spiTxIndex++;
 14703  001296  2A44               	incf	_spiTxIndex,f,c	;volatile
 14704                           
 14705                           ;spi.c: 199: if (spiTxBuffer[spiTxIndex] != '\0') {
 14706  001298  0E40               	movlw	low _spiTxBuffer
 14707  00129A  2444               	addwf	_spiTxIndex,w,c	;volatile
 14708  00129C  6ED9               	movwf	fsr2l,c
 14709  00129E  6ADA               	clrf	fsr2h,c
 14710  0012A0  0E01               	movlw	high _spiTxBuffer
 14711  0012A2  22DA               	addwfc	fsr2h,f,c
 14712  0012A4  50DF               	movf	indf2,w,c
 14713  0012A6  E009               	bz	i1l1649
 14714                           
 14715                           ;spi.c: 200: SSPBUF = spiTxBuffer[spiTxIndex];
 14716  0012A8  0E40               	movlw	low _spiTxBuffer
 14717  0012AA  2444               	addwf	_spiTxIndex,w,c	;volatile
 14718  0012AC  6ED9               	movwf	fsr2l,c
 14719  0012AE  6ADA               	clrf	fsr2h,c
 14720  0012B0  0E01               	movlw	high _spiTxBuffer
 14721  0012B2  22DA               	addwfc	fsr2h,f,c
 14722  0012B4  50DF               	movf	indf2,w,c
 14723  0012B6  6EC9               	movwf	4041,c	;volatile
 14724                           
 14725                           ;spi.c: 201: } else {
 14726  0012B8  0012               	return	
 14727  0012BA                     i1l1649:
 14728                           
 14729                           ;spi.c: 202: SPI_MODE = 0;
 14730  0012BA  904F               	bcf	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14731  0012BC  0012               	return	
 14732  0012BE                     i1l6790:
 14733                           
 14734                           ;spi.c: 220: spiRxBuffer[spiRxIndex] = i;
 14735  0012BE  0E00               	movlw	low _spiRxBuffer
 14736  0012C0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14737  0012C2  6ED9               	movwf	fsr2l,c
 14738  0012C4  6ADA               	clrf	fsr2h,c
 14739  0012C6  0E02               	movlw	high _spiRxBuffer
 14740  0012C8  22DA               	addwfc	fsr2h,f,c
 14741  0012CA  C007  FFDF         	movff	SPI_ISR@i,indf2
 14742                           
 14743                           ;spi.c: 222: if ((spiRxBuffer[spiRxIndex] == 0x0d) | (spiRxBuffer[spiRxIndex] == 0x00)) 
      +                          {
 14744  0012CE  0E00               	movlw	low _spiRxBuffer
 14745  0012D0  2443               	addwf	_spiRxIndex,w,c	;volatile
 14746  0012D2  6ED9               	movwf	fsr2l,c
 14747  0012D4  6ADA               	clrf	fsr2h,c
 14748  0012D6  0E02               	movlw	high _spiRxBuffer
 14749  0012D8  22DA               	addwfc	fsr2h,f,c
 14750  0012DA  50DF               	movf	indf2,w,c
 14751  0012DC  0E01               	movlw	1
 14752  0012DE  A4D8               	btfss	status,2,c
 14753  0012E0  0E00               	movlw	0
 14754  0012E2  6E05               	movwf	??_SPI_ISR& (0+255),c
 14755  0012E4  0E00               	movlw	low _spiRxBuffer
 14756  0012E6  2443               	addwf	_spiRxIndex,w,c	;volatile
 14757  0012E8  6ED9               	movwf	fsr2l,c
 14758  0012EA  6ADA               	clrf	fsr2h,c
 14759  0012EC  0E02               	movlw	high _spiRxBuffer
 14760  0012EE  22DA               	addwfc	fsr2h,f,c
 14761  0012F0  0E0D               	movlw	13
 14762  0012F2  18DE               	xorwf	postinc2,w,c
 14763  0012F4  0E01               	movlw	1
 14764  0012F6  A4D8               	btfss	status,2,c
 14765  0012F8  0E00               	movlw	0
 14766  0012FA  1005               	iorwf	??_SPI_ISR,w,c
 14767  0012FC  A0E8               	btfss	wreg,0,c
 14768  0012FE  D031               	goto	i1l6814
 14769                           
 14770                           ;spi.c: 223: if (spiRxIndex != 0) {
 14771  001300  5043               	movf	_spiRxIndex,w,c	;volatile
 14772  001302  E015               	bz	i1l6802
 14773                           
 14774                           ;spi.c: 224: for (i = 0; i < spiRxIndex; i++) {
 14775  001304  6A07               	clrf	SPI_ISR@i,c
 14776  001306  D00F               	goto	i1l6800
 14777  001308                     i1l6796:
 14778                           
 14779                           ;spi.c: 225: SPI_RX_TEXT[i] = spiRxBuffer[i];
 14780  001308  0E00               	movlw	low _spiRxBuffer
 14781  00130A  2407               	addwf	SPI_ISR@i,w,c
 14782  00130C  6ED9               	movwf	fsr2l,c
 14783  00130E  6ADA               	clrf	fsr2h,c
 14784  001310  0E02               	movlw	high _spiRxBuffer
 14785  001312  22DA               	addwfc	fsr2h,f,c
 14786  001314  0E00               	movlw	low _SPI_RX_TEXT
 14787  001316  2407               	addwf	SPI_ISR@i,w,c
 14788  001318  6EE1               	movwf	fsr1l,c
 14789  00131A  6AE2               	clrf	fsr1h,c
 14790  00131C  0E01               	movlw	high _SPI_RX_TEXT
 14791  00131E  22E2               	addwfc	fsr1h,f,c
 14792  001320  CFDF FFE7          	movff	indf2,indf1
 14793  001324  2A07               	incf	SPI_ISR@i,f,c
 14794  001326                     i1l6800:
 14795  001326  5043               	movf	_spiRxIndex,w,c	;volatile
 14796  001328  5C07               	subwf	SPI_ISR@i,w,c
 14797  00132A  E3EE               	bnc	i1l6796
 14798                           
 14799                           ;spi.c: 226: }
 14800                           ;spi.c: 227: SPI_full = 1;
 14801  00132C  844F               	bsf	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14802  00132E                     i1l6802:
 14803                           
 14804                           ;spi.c: 228: }
 14805                           ;spi.c: 229: SPI_RX_TEXT[spiRxIndex] = '\0';
 14806  00132E  0E00               	movlw	low _SPI_RX_TEXT
 14807  001330  2443               	addwf	_spiRxIndex,w,c	;volatile
 14808  001332  6ED9               	movwf	fsr2l,c
 14809  001334  6ADA               	clrf	fsr2h,c
 14810  001336  0E01               	movlw	high _SPI_RX_TEXT
 14811  001338  22DA               	addwfc	fsr2h,f,c
 14812  00133A  0E00               	movlw	0
 14813  00133C  6ADF               	clrf	indf2,c
 14814                           
 14815                           ;spi.c: 230: spiRxIndex = 0;
 14816  00133E  6A43               	clrf	_spiRxIndex,c	;volatile
 14817                           
 14818                           ;spi.c: 231: } else {
 14819  001340  0012               	return	
 14820  001342                     i1l6806:
 14821                           
 14822                           ;spi.c: 234: if (spiRxIndex + 1 == 64) {
 14823  001342  5043               	movf	_spiRxIndex,w,c	;volatile
 14824  001344  6E05               	movwf	??_SPI_ISR& (0+255),c
 14825  001346  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14826  001348  2A05               	incf	??_SPI_ISR,f,c
 14827  00134A  0E00               	movlw	0
 14828  00134C  2206               	addwfc	??_SPI_ISR+1,f,c
 14829  00134E  0E40               	movlw	64
 14830  001350  1805               	xorwf	??_SPI_ISR,w,c
 14831  001352  1006               	iorwf	??_SPI_ISR+1,w,c
 14832  001354  E104               	bnz	i1l6810
 14833                           
 14834                           ;spi.c: 235: SPI_RX_TEXT[0] = '\0';
 14835  001356  0101               	movlb	1	; () banked
 14836  001358  6B00               	clrf	_SPI_RX_TEXT& (0+255),b	;volatile
 14837                           
 14838                           ;spi.c: 236: spiRxIndex = 0;
 14839  00135A  6A43               	clrf	_spiRxIndex,c	;volatile
 14840                           
 14841                           ;spi.c: 239: } else {
 14842  00135C  0012               	return	
 14843  00135E                     i1l6810:
 14844                           
 14845                           ;spi.c: 240: spiRxIndex++;
 14846  00135E  2A43               	incf	_spiRxIndex,f,c	;volatile
 14847  001360  0012               	return	
 14848  001362                     i1l6814:
 14849  001362  0E01               	movlw	1
 14850  001364  A44F               	btfss	_SPI_full/(0+8),_SPI_full& (0+7),c	;volatile
 14851  001366  0E00               	movlw	0
 14852  001368  6E05               	movwf	??_SPI_ISR& (0+255),c
 14853  00136A  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14854                           
 14855                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14856                           ; Switch size 1, requested type "speed"
 14857                           ; Number of cases is 1, Range of values is 0 to 0
 14858                           ; switch strategies available:
 14859                           ; Name         Instructions Cycles
 14860                           ; simple_byte            4     3 (average)
 14861                           ;	Chosen strategy is simple_byte
 14862  00136C  5006               	movf	??_SPI_ISR+1,w,c
 14863  00136E  A4D8               	btfss	status,2,c
 14864  001370  0012               	return	
 14865                           
 14866                           ; Switch size 1, requested type "speed"
 14867                           ; Number of cases is 2, Range of values is 0 to 1
 14868                           ; switch strategies available:
 14869                           ; Name         Instructions Cycles
 14870                           ; simple_byte            7     4 (average)
 14871                           ;	Chosen strategy is simple_byte
 14872  001372  5005               	movf	??_SPI_ISR,w,c
 14873  001374  E0E6               	bz	i1l6806
 14874  001376  0A01               	xorlw	1	; case 1
 14875  001378  0012               	return	
 14876  00137A                     i1l6818:
 14877  00137A  0E01               	movlw	1
 14878  00137C  A04F               	btfss	_SPI_MODE/(0+8),_SPI_MODE& (0+7),c	;volatile
 14879  00137E  0E00               	movlw	0
 14880  001380  6E05               	movwf	??_SPI_ISR& (0+255),c
 14881  001382  6A06               	clrf	(??_SPI_ISR+1)& (0+255),c
 14882                           
 14883                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14884                           ; Switch size 1, requested type "speed"
 14885                           ; Number of cases is 1, Range of values is 0 to 0
 14886                           ; switch strategies available:
 14887                           ; Name         Instructions Cycles
 14888                           ; simple_byte            4     3 (average)
 14889                           ;	Chosen strategy is simple_byte
 14890  001384  5006               	movf	??_SPI_ISR+1,w,c
 14891  001386  A4D8               	btfss	status,2,c
 14892  001388  0012               	return	
 14893                           
 14894                           ; Switch size 1, requested type "speed"
 14895                           ; Number of cases is 2, Range of values is 0 to 1
 14896                           ; switch strategies available:
 14897                           ; Name         Instructions Cycles
 14898                           ; simple_byte            7     4 (average)
 14899                           ;	Chosen strategy is simple_byte
 14900  00138A  5005               	movf	??_SPI_ISR,w,c
 14901  00138C  E098               	bz	i1l6790
 14902  00138E  0A01               	xorlw	1	; case 1
 14903  001390  E101 D77E          	bz	i1l6782
 14904  001394  0012               	return		;funcret
 14905  001396                     __end_of_SPI_ISR:
 14906                           	opt stack 0
 14907                           tblptru	equ	0xFF8
 14908                           tblptrh	equ	0xFF7
 14909                           tblptrl	equ	0xFF6
 14910                           tablat	equ	0xFF5
 14911                           prodh	equ	0xFF4
 14912                           prodl	equ	0xFF3
 14913                           intcon	equ	0xFF2
 14914                           intcon2	equ	0xFF1
 14915                           intcon3	equ	0xFF0
 14916                           postinc0	equ	0xFEE
 14917                           wreg	equ	0xFE8
 14918                           indf1	equ	0xFE7
 14919                           postdec1	equ	0xFE5
 14920                           fsr1h	equ	0xFE2
 14921                           fsr1l	equ	0xFE1
 14922                           bsr	equ	0xFE0
 14923                           indf2	equ	0xFDF
 14924                           postinc2	equ	0xFDE
 14925                           postdec2	equ	0xFDD
 14926                           fsr2h	equ	0xFDA
 14927                           fsr2l	equ	0xFD9
 14928                           status	equ	0xFD8
 14929                           
 14930 ;; *************** function _IRQ_PION_CHANGEMENT_ETAT *****************
 14931 ;; Defined at:
 14932 ;;		line 199 in file "interrupt.c"
 14933 ;; Parameters:    Size  Location     Type
 14934 ;;		None
 14935 ;; Auto vars:     Size  Location     Type
 14936 ;;		None
 14937 ;; Return value:  Size  Location     Type
 14938 ;;                  1    wreg      void 
 14939 ;; Registers used:
 14940 ;;		wreg, status,2, status,0, cstack
 14941 ;; Tracked objects:
 14942 ;;		On entry : 0/0
 14943 ;;		On exit  : 0/0
 14944 ;;		Unchanged: 0/0
 14945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 14946 ;;      Params:         0       0       0       0
 14947 ;;      Locals:         0       0       0       0
 14948 ;;      Temps:          0       0       0       0
 14949 ;;      Totals:         0       0       0       0
 14950 ;;Total ram usage:        0 bytes
 14951 ;; Hardware stack levels used:    1
 14952 ;; Hardware stack levels required when called:    6
 14953 ;; This function calls:
 14954 ;;		i1_Buzzer_Etat
 14955 ;;		i1_TIMER5_Off
 14956 ;;		i1_TIMER5_On
 14957 ;; This function is called by:
 14958 ;;		_LOW_PRIORITY_IRQ
 14959 ;; This function uses a non-reentrant model
 14960 ;;
 14961                           
 14962                           	psect	text91
 14963  001F6E                     __ptext91:
 14964                           	opt stack 0
 14965  001F6E                     _IRQ_PION_CHANGEMENT_ETAT:
 14966                           	opt stack 13
 14967                           
 14968                           ;interrupt.c: 200: PIR3bits.IC1IF = 0;
 14969                           
 14970                           ;incstack = 0
 14971  001F6E  92A4               	bcf	4004,1,c	;volatile
 14972                           
 14973                           ;interrupt.c: 203: switch (Surveillance_Capteur_Pion) {
 14974  001F70  D020               	goto	i1l6778
 14975  001F72                     i1l566:
 14976                           
 14977                           ; BSR set to: 0
 14978                           ;interrupt.c: 208: if (PORTAbits.RA2 == 0) {
 14979  001F72  B480               	btfsc	3968,2,c	;volatile
 14980  001F74  D004               	goto	i1l6748
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;interrupt.c: 209: Surveillance_Capteur_Pion = 0;
 14984  001F76  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 14985                           
 14986                           ; BSR set to: 0
 14987                           ;interrupt.c: 210: TIMER5_On();
 14988  001F78  ECA5  F013         	call	i1_TIMER5_On	;wreg free
 14989  001F7C  D011               	goto	i1l6762
 14990  001F7E                     i1l6748:
 14991                           
 14992                           ; BSR set to: 0
 14993                           ;interrupt.c: 214: Surveillance_Capteur_Pion = 1;
 14994  001F7E  0E01               	movlw	1
 14995  001F80  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 14996                           
 14997                           ;interrupt.c: 215: Alarme = 9;
 14998  001F82  0E09               	movlw	9
 14999  001F84  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15000  001F86                     i1l6750:
 15001                           
 15002                           ;interrupt.c: 217: TIMER5_Off();
 15003  001F86  EC74  F013         	call	i1_TIMER5_Off	;wreg free
 15004                           
 15005                           ;interrupt.c: 219: nb_100ms_Timer_5 = 0;
 15006  001F8A  0100               	movlb	0	; () banked
 15007  001F8C  6BA6               	clrf	_nb_100ms_Timer_5& (0+255),b	;volatile
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;interrupt.c: 222: nb_100ms_platine = nb_100ms_platine_backup;
 15011  001F8E  C04E  F0A4         	movff	_nb_100ms_platine_backup,_nb_100ms_platine
 15012                           
 15013                           ; BSR set to: 0
 15014                           ;interrupt.c: 223: Mouvement_Startup = 0;
 15015  001F92  6A4D               	clrf	_Mouvement_Startup,c
 15016  001F94  0012               	return	
 15017  001F96                     i1l570:
 15018                           
 15019                           ; BSR set to: 0
 15020                           ;interrupt.c: 234: if (PORTAbits.RA2 == 0) {
 15021  001F96  B480               	btfsc	3968,2,c	;volatile
 15022  001F98  D006               	goto	i1l6764
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;interrupt.c: 235: Surveillance_Capteur_Pion = 0;
 15026  001F9A  6B89               	clrf	_Surveillance_Capteur_Pion& (0+255),b
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;interrupt.c: 236: Alarme = 5;
 15030  001F9C  0E05               	movlw	5
 15031  001F9E  6FA9               	movwf	_Alarme& (0+255),b	;volatile
 15032  001FA0                     i1l6762:
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;interrupt.c: 238: Buzzer_Etat((unsigned char) 1);
 15036  001FA0  0E01               	movlw	1
 15037  001FA2  EF56  F013         	goto	i1_Buzzer_Etat
 15038  001FA6                     i1l6764:
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;interrupt.c: 240: Surveillance_Capteur_Pion = 1;
 15042  001FA6  0E01               	movlw	1
 15043  001FA8  6F89               	movwf	_Surveillance_Capteur_Pion& (0+255),b
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;interrupt.c: 242: Buzzer_Etat((unsigned char) 0);
 15047  001FAA  0E00               	movlw	0
 15048  001FAC  EC56  F013         	call	i1_Buzzer_Etat
 15049  001FB0  D7EA               	goto	i1l6750
 15050  001FB2                     i1l6778:
 15051  001FB2  0100               	movlb	0	; () banked
 15052  001FB4  5189               	movf	_Surveillance_Capteur_Pion& (0+255),w,b
 15053                           
 15054                           ; Switch size 1, requested type "speed"
 15055                           ; Number of cases is 2, Range of values is 0 to 1
 15056                           ; switch strategies available:
 15057                           ; Name         Instructions Cycles
 15058                           ; simple_byte            7     4 (average)
 15059                           ;	Chosen strategy is simple_byte
 15060  001FB6  E0EF               	bz	i1l570
 15061  001FB8  0A01               	xorlw	1	; case 1
 15062  001FBA  E0DB               	bz	i1l566
 15063  001FBC  0012               	return		;funcret
 15064  001FBE                     __end_of_IRQ_PION_CHANGEMENT_ETAT:
 15065                           	opt stack 0
 15066                           tblptru	equ	0xFF8
 15067                           tblptrh	equ	0xFF7
 15068                           tblptrl	equ	0xFF6
 15069                           tablat	equ	0xFF5
 15070                           prodh	equ	0xFF4
 15071                           prodl	equ	0xFF3
 15072                           intcon	equ	0xFF2
 15073                           intcon2	equ	0xFF1
 15074                           intcon3	equ	0xFF0
 15075                           postinc0	equ	0xFEE
 15076                           wreg	equ	0xFE8
 15077                           indf1	equ	0xFE7
 15078                           postdec1	equ	0xFE5
 15079                           fsr1h	equ	0xFE2
 15080                           fsr1l	equ	0xFE1
 15081                           bsr	equ	0xFE0
 15082                           indf2	equ	0xFDF
 15083                           postinc2	equ	0xFDE
 15084                           postdec2	equ	0xFDD
 15085                           fsr2h	equ	0xFDA
 15086                           fsr2l	equ	0xFD9
 15087                           status	equ	0xFD8
 15088                           
 15089 ;; *************** function i1_TIMER5_On *****************
 15090 ;; Defined at:
 15091 ;;		line 253 in file "timer.c"
 15092 ;; Parameters:    Size  Location     Type
 15093 ;;		None
 15094 ;; Auto vars:     Size  Location     Type
 15095 ;;		None
 15096 ;; Return value:  Size  Location     Type
 15097 ;;                  1    wreg      void 
 15098 ;; Registers used:
 15099 ;;		None
 15100 ;; Tracked objects:
 15101 ;;		On entry : 3F/0
 15102 ;;		On exit  : 3F/0
 15103 ;;		Unchanged: 3F/0
 15104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15105 ;;      Params:         0       0       0       0
 15106 ;;      Locals:         0       0       0       0
 15107 ;;      Temps:          0       0       0       0
 15108 ;;      Totals:         0       0       0       0
 15109 ;;Total ram usage:        0 bytes
 15110 ;; Hardware stack levels used:    1
 15111 ;; Hardware stack levels required when called:    5
 15112 ;; This function calls:
 15113 ;;		Nothing
 15114 ;; This function is called by:
 15115 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15116 ;; This function uses a non-reentrant model
 15117 ;;
 15118                           
 15119                           	psect	text92
 15120  00274A                     __ptext92:
 15121                           	opt stack 0
 15122  00274A                     i1_TIMER5_On:
 15123                           	opt stack 13
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;timer.c: 257: T5CONbits.TMR5ON = 1;
 15127                           
 15128                           ;incstack = 0
 15129  00274A  80B7               	bsf	4023,0,c	;volatile
 15130                           
 15131                           ; BSR set to: 0
 15132  00274C  0012               	return		;funcret
 15133  00274E                     __end_ofi1_TIMER5_On:
 15134                           	opt stack 0
 15135                           tblptru	equ	0xFF8
 15136                           tblptrh	equ	0xFF7
 15137                           tblptrl	equ	0xFF6
 15138                           tablat	equ	0xFF5
 15139                           prodh	equ	0xFF4
 15140                           prodl	equ	0xFF3
 15141                           intcon	equ	0xFF2
 15142                           intcon2	equ	0xFF1
 15143                           intcon3	equ	0xFF0
 15144                           postinc0	equ	0xFEE
 15145                           wreg	equ	0xFE8
 15146                           indf1	equ	0xFE7
 15147                           postdec1	equ	0xFE5
 15148                           fsr1h	equ	0xFE2
 15149                           fsr1l	equ	0xFE1
 15150                           bsr	equ	0xFE0
 15151                           indf2	equ	0xFDF
 15152                           postinc2	equ	0xFDE
 15153                           postdec2	equ	0xFDD
 15154                           fsr2h	equ	0xFDA
 15155                           fsr2l	equ	0xFD9
 15156                           status	equ	0xFD8
 15157                           
 15158 ;; *************** function i1_TIMER5_Off *****************
 15159 ;; Defined at:
 15160 ;;		line 263 in file "timer.c"
 15161 ;; Parameters:    Size  Location     Type
 15162 ;;		None
 15163 ;; Auto vars:     Size  Location     Type
 15164 ;;		None
 15165 ;; Return value:  Size  Location     Type
 15166 ;;                  1    wreg      void 
 15167 ;; Registers used:
 15168 ;;		None
 15169 ;; Tracked objects:
 15170 ;;		On entry : 0/0
 15171 ;;		On exit  : 0/0
 15172 ;;		Unchanged: 0/0
 15173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15174 ;;      Params:         0       0       0       0
 15175 ;;      Locals:         0       0       0       0
 15176 ;;      Temps:          0       0       0       0
 15177 ;;      Totals:         0       0       0       0
 15178 ;;Total ram usage:        0 bytes
 15179 ;; Hardware stack levels used:    1
 15180 ;; Hardware stack levels required when called:    5
 15181 ;; This function calls:
 15182 ;;		Nothing
 15183 ;; This function is called by:
 15184 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15185 ;;		i1_IRQ_TIMER_5
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           	psect	text93
 15190  0026E8                     __ptext93:
 15191                           	opt stack 0
 15192  0026E8                     i1_TIMER5_Off:
 15193                           	opt stack 13
 15194                           
 15195                           ;timer.c: 266: T5CONbits.TMR5ON = 0;
 15196                           
 15197                           ; BSR set to: 0
 15198                           ;incstack = 0
 15199  0026E8  90B7               	bcf	4023,0,c	;volatile
 15200                           
 15201                           ;timer.c: 267: PIR3bits.TMR5IF = 0;
 15202  0026EA  90A4               	bcf	4004,0,c	;volatile
 15203                           
 15204                           ;timer.c: 268: TMR5L = 0;
 15205  0026EC  6A87               	clrf	3975,c	;volatile
 15206                           
 15207                           ;timer.c: 269: TMR5H = 0;
 15208  0026EE  6A88               	clrf	3976,c	;volatile
 15209  0026F0  0012               	return		;funcret
 15210  0026F2                     __end_ofi1_TIMER5_Off:
 15211                           	opt stack 0
 15212                           tblptru	equ	0xFF8
 15213                           tblptrh	equ	0xFF7
 15214                           tblptrl	equ	0xFF6
 15215                           tablat	equ	0xFF5
 15216                           prodh	equ	0xFF4
 15217                           prodl	equ	0xFF3
 15218                           intcon	equ	0xFF2
 15219                           intcon2	equ	0xFF1
 15220                           intcon3	equ	0xFF0
 15221                           postinc0	equ	0xFEE
 15222                           wreg	equ	0xFE8
 15223                           indf1	equ	0xFE7
 15224                           postdec1	equ	0xFE5
 15225                           fsr1h	equ	0xFE2
 15226                           fsr1l	equ	0xFE1
 15227                           bsr	equ	0xFE0
 15228                           indf2	equ	0xFDF
 15229                           postinc2	equ	0xFDE
 15230                           postdec2	equ	0xFDD
 15231                           fsr2h	equ	0xFDA
 15232                           fsr2l	equ	0xFD9
 15233                           status	equ	0xFD8
 15234                           
 15235 ;; *************** function i1_Buzzer_Etat *****************
 15236 ;; Defined at:
 15237 ;;		line 29 in file "interrupt.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  Activation      1    wreg     unsigned char 
 15240 ;; Auto vars:     Size  Location     Type
 15241 ;;  Activation      1    4[COMRAM] unsigned char 
 15242 ;; Return value:  Size  Location     Type
 15243 ;;                  1    wreg      void 
 15244 ;; Registers used:
 15245 ;;		wreg, status,2, status,0
 15246 ;; Tracked objects:
 15247 ;;		On entry : 0/0
 15248 ;;		On exit  : 0/0
 15249 ;;		Unchanged: 0/0
 15250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15251 ;;      Params:         0       0       0       0
 15252 ;;      Locals:         1       0       0       0
 15253 ;;      Temps:          0       0       0       0
 15254 ;;      Totals:         1       0       0       0
 15255 ;;Total ram usage:        1 bytes
 15256 ;; Hardware stack levels used:    1
 15257 ;; Hardware stack levels required when called:    5
 15258 ;; This function calls:
 15259 ;;		Nothing
 15260 ;; This function is called by:
 15261 ;;		_IRQ_PION_CHANGEMENT_ETAT
 15262 ;;		i1_IRQ_TIMER_5
 15263 ;; This function uses a non-reentrant model
 15264 ;;
 15265                           
 15266                           	psect	text94
 15267  0026AC                     __ptext94:
 15268                           	opt stack 0
 15269  0026AC                     i1_Buzzer_Etat:
 15270                           	opt stack 13
 15271                           
 15272                           ;incstack = 0
 15273                           ;i1Buzzer_Etat@Activation stored from wreg
 15274  0026AC  6E05               	movwf	i1Buzzer_Etat@Activation,c
 15275                           
 15276                           ;interrupt.c: 30: if (Activation == 1) {
 15277  0026AE  0405               	decf	i1Buzzer_Etat@Activation,w,c
 15278  0026B0  E102               	bnz	i1l531
 15279                           
 15280                           ;interrupt.c: 31: LATAbits.LATA6 = 1;
 15281  0026B2  8C89               	bsf	3977,6,c	;volatile
 15282                           
 15283                           ;interrupt.c: 33: } else {
 15284  0026B4  0012               	return	
 15285  0026B6                     i1l531:
 15286                           
 15287                           ;interrupt.c: 34: LATAbits.LATA6 = 0;
 15288  0026B6  9C89               	bcf	3977,6,c	;volatile
 15289  0026B8  0012               	return		;funcret
 15290  0026BA                     __end_ofi1_Buzzer_Etat:
 15291                           	opt stack 0
 15292                           tblptru	equ	0xFF8
 15293                           tblptrh	equ	0xFF7
 15294                           tblptrl	equ	0xFF6
 15295                           tablat	equ	0xFF5
 15296                           prodh	equ	0xFF4
 15297                           prodl	equ	0xFF3
 15298                           intcon	equ	0xFF2
 15299                           intcon2	equ	0xFF1
 15300                           intcon3	equ	0xFF0
 15301                           postinc0	equ	0xFEE
 15302                           wreg	equ	0xFE8
 15303                           indf1	equ	0xFE7
 15304                           postdec1	equ	0xFE5
 15305                           fsr1h	equ	0xFE2
 15306                           fsr1l	equ	0xFE1
 15307                           bsr	equ	0xFE0
 15308                           indf2	equ	0xFDF
 15309                           postinc2	equ	0xFDE
 15310                           postdec2	equ	0xFDD
 15311                           fsr2h	equ	0xFDA
 15312                           fsr2l	equ	0xFD9
 15313                           status	equ	0xFD8
 15314                           
 15315 ;; *************** function _EUSART1_Transmit_ISR *****************
 15316 ;; Defined at:
 15317 ;;		line 552 in file "eusart.c"
 15318 ;; Parameters:    Size  Location     Type
 15319 ;;		None
 15320 ;; Auto vars:     Size  Location     Type
 15321 ;;		None
 15322 ;; Return value:  Size  Location     Type
 15323 ;;                  1    wreg      void 
 15324 ;; Registers used:
 15325 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15326 ;; Tracked objects:
 15327 ;;		On entry : 0/0
 15328 ;;		On exit  : 0/0
 15329 ;;		Unchanged: 0/0
 15330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15331 ;;      Params:         0       0       0       0
 15332 ;;      Locals:         0       0       0       0
 15333 ;;      Temps:          0       0       0       0
 15334 ;;      Totals:         0       0       0       0
 15335 ;;Total ram usage:        0 bytes
 15336 ;; Hardware stack levels used:    1
 15337 ;; Hardware stack levels required when called:    5
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		_LOW_PRIORITY_IRQ
 15342 ;; This function uses a non-reentrant model
 15343 ;;
 15344                           
 15345                           	psect	text95
 15346  0022B8                     __ptext95:
 15347                           	opt stack 0
 15348  0022B8                     _EUSART1_Transmit_ISR:
 15349                           	opt stack 14
 15350                           
 15351                           ;eusart.c: 554: eusart1TxIndex++;
 15352                           
 15353                           ;incstack = 0
 15354  0022B8  2A46               	incf	_eusart1TxIndex,f,c	;volatile
 15355                           
 15356                           ;eusart.c: 570: if (eusart1TxBuffer[eusart1TxIndex] != '\0') {
 15357  0022BA  0E80               	movlw	low _eusart1TxBuffer
 15358  0022BC  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15359  0022BE  6ED9               	movwf	fsr2l,c
 15360  0022C0  6ADA               	clrf	fsr2h,c
 15361  0022C2  0E01               	movlw	high _eusart1TxBuffer
 15362  0022C4  22DA               	addwfc	fsr2h,f,c
 15363  0022C6  50DF               	movf	indf2,w,c
 15364  0022C8  E009               	bz	i1l1329
 15365                           
 15366                           ;eusart.c: 573: TXREG1 = eusart1TxBuffer[eusart1TxIndex];
 15367  0022CA  0E80               	movlw	low _eusart1TxBuffer
 15368  0022CC  2446               	addwf	_eusart1TxIndex,w,c	;volatile
 15369  0022CE  6ED9               	movwf	fsr2l,c
 15370  0022D0  6ADA               	clrf	fsr2h,c
 15371  0022D2  0E01               	movlw	high _eusart1TxBuffer
 15372  0022D4  22DA               	addwfc	fsr2h,f,c
 15373  0022D6  50DF               	movf	indf2,w,c
 15374  0022D8  6EAD               	movwf	4013,c	;volatile
 15375                           
 15376                           ;eusart.c: 574: } else {
 15377  0022DA  0012               	return	
 15378  0022DC                     i1l1329:
 15379                           
 15380                           ;eusart.c: 575: PIE1bits.TX1IE = 0;
 15381  0022DC  989D               	bcf	3997,4,c	;volatile
 15382  0022DE  0012               	return		;funcret
 15383  0022E0                     __end_of_EUSART1_Transmit_ISR:
 15384                           	opt stack 0
 15385                           tblptru	equ	0xFF8
 15386                           tblptrh	equ	0xFF7
 15387                           tblptrl	equ	0xFF6
 15388                           tablat	equ	0xFF5
 15389                           prodh	equ	0xFF4
 15390                           prodl	equ	0xFF3
 15391                           intcon	equ	0xFF2
 15392                           intcon2	equ	0xFF1
 15393                           intcon3	equ	0xFF0
 15394                           postinc0	equ	0xFEE
 15395                           wreg	equ	0xFE8
 15396                           indf1	equ	0xFE7
 15397                           postdec1	equ	0xFE5
 15398                           fsr1h	equ	0xFE2
 15399                           fsr1l	equ	0xFE1
 15400                           bsr	equ	0xFE0
 15401                           indf2	equ	0xFDF
 15402                           postinc2	equ	0xFDE
 15403                           postdec2	equ	0xFDD
 15404                           fsr2h	equ	0xFDA
 15405                           fsr2l	equ	0xFD9
 15406                           status	equ	0xFD8
 15407                           
 15408 ;; *************** function _EUSART1_Receive_ISR *****************
 15409 ;; Defined at:
 15410 ;;		line 597 in file "eusart.c"
 15411 ;; Parameters:    Size  Location     Type
 15412 ;;		None
 15413 ;; Auto vars:     Size  Location     Type
 15414 ;;  i               1    6[COMRAM] unsigned char 
 15415 ;; Return value:  Size  Location     Type
 15416 ;;                  1    wreg      void 
 15417 ;; Registers used:
 15418 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15419 ;; Tracked objects:
 15420 ;;		On entry : 0/0
 15421 ;;		On exit  : 0/0
 15422 ;;		Unchanged: 0/0
 15423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15424 ;;      Params:         0       0       0       0
 15425 ;;      Locals:         1       0       0       0
 15426 ;;      Temps:          2       0       0       0
 15427 ;;      Totals:         3       0       0       0
 15428 ;;Total ram usage:        3 bytes
 15429 ;; Hardware stack levels used:    1
 15430 ;; Hardware stack levels required when called:    6
 15431 ;; This function calls:
 15432 ;;		_EUSART1_Erreur_Get
 15433 ;; This function is called by:
 15434 ;;		_LOW_PRIORITY_IRQ
 15435 ;; This function uses a non-reentrant model
 15436 ;;
 15437                           
 15438                           	psect	text96
 15439  00146C                     __ptext96:
 15440                           	opt stack 0
 15441  00146C                     _EUSART1_Receive_ISR:
 15442                           	opt stack 13
 15443                           
 15444                           ;eusart.c: 600: unsigned char i;
 15445                           ;eusart.c: 602: PIR1bits.RC1IF = 0;
 15446                           
 15447                           ;incstack = 0
 15448  00146C  9A9E               	bcf	3998,5,c	;volatile
 15449                           
 15450                           ;eusart.c: 604: if (1 == RCSTA1bits.OERR) {
 15451  00146E  A2AB               	btfss	4011,1,c	;volatile
 15452  001470  D004               	goto	i1l6838
 15453                           
 15454                           ;eusart.c: 606: RCSTA1bits.SPEN = 0;
 15455  001472  9EAB               	bcf	4011,7,c	;volatile
 15456                           
 15457                           ;eusart.c: 607: RCSTA1bits.SPEN = 1;
 15458  001474  8EAB               	bsf	4011,7,c	;volatile
 15459                           
 15460                           ;eusart.c: 608: RCSTA1bits.CREN = 0;
 15461  001476  98AB               	bcf	4011,4,c	;volatile
 15462                           
 15463                           ;eusart.c: 609: RCSTA1bits.CREN = 1;
 15464  001478  88AB               	bsf	4011,4,c	;volatile
 15465  00147A                     i1l6838:
 15466                           
 15467                           ;eusart.c: 610: }
 15468                           ;eusart.c: 614: eusart1RxBuffer[eusart1RxIndex] = RCREG1;
 15469  00147A  0E40               	movlw	low _eusart1RxBuffer
 15470  00147C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15471  00147E  6ED9               	movwf	fsr2l,c
 15472  001480  6ADA               	clrf	fsr2h,c
 15473  001482  0E02               	movlw	high _eusart1RxBuffer
 15474  001484  22DA               	addwfc	fsr2h,f,c
 15475  001486  CFAE FFDF          	movff	4014,indf2	;volatile
 15476                           
 15477                           ;eusart.c: 618: if ((eusart1RxBuffer[eusart1RxIndex] == 0x0d) | (eusart1RxBuffer[eusart1
      +                          RxIndex] == 0x00)) {
 15478  00148A  0E40               	movlw	low _eusart1RxBuffer
 15479  00148C  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15480  00148E  6ED9               	movwf	fsr2l,c
 15481  001490  6ADA               	clrf	fsr2h,c
 15482  001492  0E02               	movlw	high _eusart1RxBuffer
 15483  001494  22DA               	addwfc	fsr2h,f,c
 15484  001496  50DF               	movf	indf2,w,c
 15485  001498  0E01               	movlw	1
 15486  00149A  A4D8               	btfss	status,2,c
 15487  00149C  0E00               	movlw	0
 15488  00149E  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15489  0014A0  0E40               	movlw	low _eusart1RxBuffer
 15490  0014A2  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15491  0014A4  6ED9               	movwf	fsr2l,c
 15492  0014A6  6ADA               	clrf	fsr2h,c
 15493  0014A8  0E02               	movlw	high _eusart1RxBuffer
 15494  0014AA  22DA               	addwfc	fsr2h,f,c
 15495  0014AC  0E0D               	movlw	13
 15496  0014AE  18DE               	xorwf	postinc2,w,c
 15497  0014B0  0E01               	movlw	1
 15498  0014B2  A4D8               	btfss	status,2,c
 15499  0014B4  0E00               	movlw	0
 15500  0014B6  1005               	iorwf	??_EUSART1_Receive_ISR,w,c
 15501  0014B8  A0E8               	btfss	wreg,0,c
 15502  0014BA  D032               	goto	i1l6866
 15503                           
 15504                           ;eusart.c: 620: if (eusart1RxIndex != 0) {
 15505  0014BC  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15506  0014BE  E015               	bz	i1l6850
 15507                           
 15508                           ;eusart.c: 621: for (i = 0; i < eusart1RxIndex; i++) {
 15509  0014C0  6A07               	clrf	EUSART1_Receive_ISR@i,c
 15510  0014C2  D00F               	goto	i1l6848
 15511  0014C4                     i1l6844:
 15512                           
 15513                           ;eusart.c: 622: UART_RX_TEXT[i] = eusart1RxBuffer[i];
 15514  0014C4  0E40               	movlw	low _eusart1RxBuffer
 15515  0014C6  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15516  0014C8  6ED9               	movwf	fsr2l,c
 15517  0014CA  6ADA               	clrf	fsr2h,c
 15518  0014CC  0E02               	movlw	high _eusart1RxBuffer
 15519  0014CE  22DA               	addwfc	fsr2h,f,c
 15520  0014D0  0EC0               	movlw	low _UART_RX_TEXT
 15521  0014D2  2407               	addwf	EUSART1_Receive_ISR@i,w,c
 15522  0014D4  6EE1               	movwf	fsr1l,c
 15523  0014D6  6AE2               	clrf	fsr1h,c
 15524  0014D8  0E01               	movlw	high _UART_RX_TEXT
 15525  0014DA  22E2               	addwfc	fsr1h,f,c
 15526  0014DC  CFDF FFE7          	movff	indf2,indf1
 15527  0014E0  2A07               	incf	EUSART1_Receive_ISR@i,f,c
 15528  0014E2                     i1l6848:
 15529  0014E2  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15530  0014E4  5C07               	subwf	EUSART1_Receive_ISR@i,w,c
 15531  0014E6  E3EE               	bnc	i1l6844
 15532                           
 15533                           ;eusart.c: 623: }
 15534                           ;eusart.c: 624: RX1_full = 1;
 15535  0014E8  864F               	bsf	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15536  0014EA                     i1l6850:
 15537                           
 15538                           ;eusart.c: 625: }
 15539                           ;eusart.c: 628: UART_RX_TEXT[eusart1RxIndex] = '\0';
 15540  0014EA  0EC0               	movlw	low _UART_RX_TEXT
 15541  0014EC  2445               	addwf	_eusart1RxIndex,w,c	;volatile
 15542  0014EE  6ED9               	movwf	fsr2l,c
 15543  0014F0  6ADA               	clrf	fsr2h,c
 15544  0014F2  0E01               	movlw	high _UART_RX_TEXT
 15545  0014F4  22DA               	addwfc	fsr2h,f,c
 15546  0014F6  0E00               	movlw	0
 15547  0014F8  6ADF               	clrf	indf2,c
 15548                           
 15549                           ;eusart.c: 629: eusart1RxIndex = 0;
 15550  0014FA  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15551                           
 15552                           ;eusart.c: 631: } else {
 15553  0014FC  0012               	return	
 15554  0014FE                     i1l6854:
 15555                           
 15556                           ;eusart.c: 634: if (eusart1RxIndex + 1 == 64) {
 15557  0014FE  5045               	movf	_eusart1RxIndex,w,c	;volatile
 15558  001500  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15559  001502  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15560  001504  2A05               	incf	??_EUSART1_Receive_ISR,f,c
 15561  001506  0E00               	movlw	0
 15562  001508  2206               	addwfc	??_EUSART1_Receive_ISR+1,f,c
 15563  00150A  0E40               	movlw	64
 15564  00150C  1805               	xorwf	??_EUSART1_Receive_ISR,w,c
 15565  00150E  1006               	iorwf	??_EUSART1_Receive_ISR+1,w,c
 15566  001510  E105               	bnz	i1l6860
 15567                           
 15568                           ;eusart.c: 635: UART_RX_TEXT[0] = '\0';
 15569  001512  0101               	movlb	1	; () banked
 15570  001514  6BC0               	clrf	_UART_RX_TEXT& (0+255),b	;volatile
 15571                           
 15572                           ;eusart.c: 636: eusart1RxIndex = 0;
 15573  001516  6A45               	clrf	_eusart1RxIndex,c	;volatile
 15574                           
 15575                           ;eusart.c: 638: EUSART1_Erreur_Get();
 15576  001518  EF81  F013         	goto	_EUSART1_Erreur_Get	;wreg free
 15577  00151C                     i1l6860:
 15578                           
 15579                           ;eusart.c: 640: eusart1RxIndex++;
 15580  00151C  2A45               	incf	_eusart1RxIndex,f,c	;volatile
 15581  00151E  0012               	return	
 15582  001520                     i1l6866:
 15583  001520  0E01               	movlw	1
 15584  001522  A64F               	btfss	_RX1_full/(0+8),_RX1_full& (0+7),c	;volatile
 15585  001524  0E00               	movlw	0
 15586  001526  6E05               	movwf	??_EUSART1_Receive_ISR& (0+255),c
 15587  001528  6A06               	clrf	(??_EUSART1_Receive_ISR+1)& (0+255),c
 15588                           
 15589                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15590                           ; Switch size 1, requested type "speed"
 15591                           ; Number of cases is 1, Range of values is 0 to 0
 15592                           ; switch strategies available:
 15593                           ; Name         Instructions Cycles
 15594                           ; simple_byte            4     3 (average)
 15595                           ;	Chosen strategy is simple_byte
 15596  00152A  5006               	movf	??_EUSART1_Receive_ISR+1,w,c
 15597  00152C  A4D8               	btfss	status,2,c
 15598  00152E  0012               	return	
 15599                           
 15600                           ; Switch size 1, requested type "speed"
 15601                           ; Number of cases is 2, Range of values is 0 to 1
 15602                           ; switch strategies available:
 15603                           ; Name         Instructions Cycles
 15604                           ; simple_byte            7     4 (average)
 15605                           ;	Chosen strategy is simple_byte
 15606  001530  5005               	movf	??_EUSART1_Receive_ISR,w,c
 15607  001532  E0E5               	bz	i1l6854
 15608  001534  0A01               	xorlw	1	; case 1
 15609  001536  E102 EF81  F013    	bz	_EUSART1_Erreur_Get
 15610  00153C  0012               	return		;funcret
 15611  00153E                     __end_of_EUSART1_Receive_ISR:
 15612                           	opt stack 0
 15613                           tblptru	equ	0xFF8
 15614                           tblptrh	equ	0xFF7
 15615                           tblptrl	equ	0xFF6
 15616                           tablat	equ	0xFF5
 15617                           prodh	equ	0xFF4
 15618                           prodl	equ	0xFF3
 15619                           intcon	equ	0xFF2
 15620                           intcon2	equ	0xFF1
 15621                           intcon3	equ	0xFF0
 15622                           postinc0	equ	0xFEE
 15623                           wreg	equ	0xFE8
 15624                           indf1	equ	0xFE7
 15625                           postdec1	equ	0xFE5
 15626                           fsr1h	equ	0xFE2
 15627                           fsr1l	equ	0xFE1
 15628                           bsr	equ	0xFE0
 15629                           indf2	equ	0xFDF
 15630                           postinc2	equ	0xFDE
 15631                           postdec2	equ	0xFDD
 15632                           fsr2h	equ	0xFDA
 15633                           fsr2l	equ	0xFD9
 15634                           status	equ	0xFD8
 15635                           
 15636 ;; *************** function _EUSART1_Erreur_Get *****************
 15637 ;; Defined at:
 15638 ;;		line 585 in file "eusart.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;		None
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;		None
 15643 ;; Return value:  Size  Location     Type
 15644 ;;                  1    wreg      void 
 15645 ;; Registers used:
 15646 ;;		None
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/1
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15652 ;;      Params:         0       0       0       0
 15653 ;;      Locals:         0       0       0       0
 15654 ;;      Temps:          0       0       0       0
 15655 ;;      Totals:         0       0       0       0
 15656 ;;Total ram usage:        0 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    5
 15659 ;; This function calls:
 15660 ;;		Nothing
 15661 ;; This function is called by:
 15662 ;;		_EUSART1_Receive_ISR
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           	psect	text97
 15667  002702                     __ptext97:
 15668                           	opt stack 0
 15669  002702                     _EUSART1_Erreur_Get:
 15670                           	opt stack 13
 15671                           
 15672                           ;eusart.c: 587: LATCbits.LATC2 = 1;
 15673                           
 15674                           ;incstack = 0
 15675  002702  848B               	bsf	3979,2,c	;volatile
 15676                           
 15677                           ;eusart.c: 588: LATCbits.LATC2 = 0;
 15678  002704  948B               	bcf	3979,2,c	;volatile
 15679                           
 15680                           ;eusart.c: 589: LATCbits.LATC2 = 1;
 15681  002706  848B               	bsf	3979,2,c	;volatile
 15682  002708  0012               	return		;funcret
 15683  00270A                     __end_of_EUSART1_Erreur_Get:
 15684                           	opt stack 0
 15685                           tblptru	equ	0xFF8
 15686                           tblptrh	equ	0xFF7
 15687                           tblptrl	equ	0xFF6
 15688                           tablat	equ	0xFF5
 15689                           prodh	equ	0xFF4
 15690                           prodl	equ	0xFF3
 15691                           intcon	equ	0xFF2
 15692                           intcon2	equ	0xFF1
 15693                           intcon3	equ	0xFF0
 15694                           postinc0	equ	0xFEE
 15695                           wreg	equ	0xFE8
 15696                           indf1	equ	0xFE7
 15697                           postdec1	equ	0xFE5
 15698                           fsr1h	equ	0xFE2
 15699                           fsr1l	equ	0xFE1
 15700                           bsr	equ	0xFE0
 15701                           indf2	equ	0xFDF
 15702                           postinc2	equ	0xFDE
 15703                           postdec2	equ	0xFDD
 15704                           fsr2h	equ	0xFDA
 15705                           fsr2l	equ	0xFD9
 15706                           status	equ	0xFD8
 15707                           
 15708 ;; *************** function _HIGH_PRIORITY_IRQ *****************
 15709 ;; Defined at:
 15710 ;;		line 955 in file "interrupt.c"
 15711 ;; Parameters:    Size  Location     Type
 15712 ;;		None
 15713 ;; Auto vars:     Size  Location     Type
 15714 ;;		None
 15715 ;; Return value:  Size  Location     Type
 15716 ;;                  1    wreg      void 
 15717 ;; Registers used:
 15718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15719 ;; Tracked objects:
 15720 ;;		On entry : 0/0
 15721 ;;		On exit  : 0/0
 15722 ;;		Unchanged: 0/0
 15723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15724 ;;      Params:         0       0       0       0
 15725 ;;      Locals:         0       0       0       0
 15726 ;;      Temps:          2       0       0       0
 15727 ;;      Totals:         2       0       0       0
 15728 ;;Total ram usage:        2 bytes
 15729 ;; Hardware stack levels used:    1
 15730 ;; Hardware stack levels required when called:    4
 15731 ;; This function calls:
 15732 ;;		i2_IRQ_CAPOT
 15733 ;;		i2_IRQ_I_MOTEUR_1
 15734 ;;		i2_IRQ_I_MOTEUR_2
 15735 ;;		i2_IRQ_TIMER2
 15736 ;; This function is called by:
 15737 ;;		Interrupt level 2
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           	psect	intcode
 15742  000008                     __pintcode:
 15743                           	opt stack 0
 15744  000008                     _HIGH_PRIORITY_IRQ:
 15745                           	opt stack 11
 15746                           
 15747                           ;incstack = 0
 15748  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 15749  00000A  EF29  F010         	goto	int_func
 15750                           tblptru	equ	0xFF8
 15751                           tblptrh	equ	0xFF7
 15752                           tblptrl	equ	0xFF6
 15753                           tablat	equ	0xFF5
 15754                           prodh	equ	0xFF4
 15755                           prodl	equ	0xFF3
 15756                           intcon	equ	0xFF2
 15757                           intcon2	equ	0xFF1
 15758                           intcon3	equ	0xFF0
 15759                           postinc0	equ	0xFEE
 15760                           wreg	equ	0xFE8
 15761                           indf1	equ	0xFE7
 15762                           postdec1	equ	0xFE5
 15763                           fsr1h	equ	0xFE2
 15764                           fsr1l	equ	0xFE1
 15765                           bsr	equ	0xFE0
 15766                           indf2	equ	0xFDF
 15767                           postinc2	equ	0xFDE
 15768                           postdec2	equ	0xFDD
 15769                           fsr2h	equ	0xFDA
 15770                           fsr2l	equ	0xFD9
 15771                           status	equ	0xFD8
 15772                           
 15773                           	psect	intcode_body
 15774  002052                     __pintcode_body:
 15775                           	opt stack 11
 15776  002052                     int_func:
 15777                           	opt stack 11
 15778  002052  CFD9 F003          	movff	fsr2l,??_HIGH_PRIORITY_IRQ
 15779  002056  CFDA F004          	movff	fsr2h,??_HIGH_PRIORITY_IRQ+1
 15780                           
 15781                           ;interrupt.c: 958: if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 15782  00205A  B29D               	btfsc	3997,1,c	;volatile
 15783  00205C  A29E               	btfss	3998,1,c	;volatile
 15784  00205E  D003               	goto	i2l706
 15785                           
 15786                           ;interrupt.c: 959: IRQ_TIMER2();
 15787  002060  EC95  F013         	call	i2_IRQ_TIMER2	;wreg free
 15788                           
 15789                           ;interrupt.c: 965: }
 15790  002064  D011               	goto	i2l713
 15791  002066                     i2l706:
 15792                           
 15793                           ;interrupt.c: 966: else
 15794                           ;interrupt.c: 967: if ((INTCONbits.INT0IE == 1) && (INTCONbits.INT0IF == 1))
 15795  002066  B8F2               	btfsc	intcon,4,c	;volatile
 15796  002068  A2F2               	btfss	intcon,1,c	;volatile
 15797  00206A  D003               	goto	i2l708
 15798                           
 15799                           ;interrupt.c: 968: {
 15800                           ;interrupt.c: 969: IRQ_CAPOT();
 15801  00206C  EC85  F013         	call	i2_IRQ_CAPOT	;wreg free
 15802                           
 15803                           ;interrupt.c: 984: } else
 15804  002070  D00B               	goto	i2l713
 15805  002072                     i2l708:
 15806                           
 15807                           ;interrupt.c: 985: if ((INTCON3bits.INT1IE == 1)&&(INTCON3bits.INT1IF == 1)) {
 15808  002072  B6F0               	btfsc	intcon3,3,c	;volatile
 15809  002074  A0F0               	btfss	intcon3,0,c	;volatile
 15810  002076  D003               	goto	i2l710
 15811                           
 15812                           ;interrupt.c: 991: IRQ_I_MOTEUR_1();
 15813  002078  ECAF  F012         	call	i2_IRQ_I_MOTEUR_1	;wreg free
 15814                           
 15815                           ;interrupt.c: 1003: } else
 15816  00207C  D005               	goto	i2l713
 15817  00207E                     i2l710:
 15818                           
 15819                           ;interrupt.c: 1004: if ((INTCON3bits.INT2IE == 1)&&(INTCON3bits.INT2IF == 1)) {
 15820  00207E  B8F0               	btfsc	intcon3,4,c	;volatile
 15821  002080  A2F0               	btfss	intcon3,1,c	;volatile
 15822  002082  D002               	goto	i2l713
 15823                           
 15824                           ;interrupt.c: 1010: IRQ_I_MOTEUR_2();
 15825  002084  ECA4  F012         	call	i2_IRQ_I_MOTEUR_2	;wreg free
 15826  002088                     i2l713:
 15827  002088  C004  FFDA         	movff	??_HIGH_PRIORITY_IRQ+1,fsr2h
 15828  00208C  C003  FFD9         	movff	??_HIGH_PRIORITY_IRQ,fsr2l
 15829  002090  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15830  002092  0011               	retfie		f
 15831  002094                     __end_of_HIGH_PRIORITY_IRQ:
 15832                           	opt stack 0
 15833                           tblptru	equ	0xFF8
 15834                           tblptrh	equ	0xFF7
 15835                           tblptrl	equ	0xFF6
 15836                           tablat	equ	0xFF5
 15837                           prodh	equ	0xFF4
 15838                           prodl	equ	0xFF3
 15839                           intcon	equ	0xFF2
 15840                           intcon2	equ	0xFF1
 15841                           intcon3	equ	0xFF0
 15842                           postinc0	equ	0xFEE
 15843                           wreg	equ	0xFE8
 15844                           indf1	equ	0xFE7
 15845                           postdec1	equ	0xFE5
 15846                           fsr1h	equ	0xFE2
 15847                           fsr1l	equ	0xFE1
 15848                           bsr	equ	0xFE0
 15849                           indf2	equ	0xFDF
 15850                           postinc2	equ	0xFDE
 15851                           postdec2	equ	0xFDD
 15852                           fsr2h	equ	0xFDA
 15853                           fsr2l	equ	0xFD9
 15854                           status	equ	0xFD8
 15855                           
 15856 ;; *************** function i2_IRQ_TIMER2 *****************
 15857 ;; Defined at:
 15858 ;;		line 883 in file "interrupt.c"
 15859 ;; Parameters:    Size  Location     Type
 15860 ;;		None
 15861 ;; Auto vars:     Size  Location     Type
 15862 ;;		None
 15863 ;; Return value:  Size  Location     Type
 15864 ;;                  1    wreg      void 
 15865 ;; Registers used:
 15866 ;;		None
 15867 ;; Tracked objects:
 15868 ;;		On entry : 0/0
 15869 ;;		On exit  : 0/0
 15870 ;;		Unchanged: 0/0
 15871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15872 ;;      Params:         0       0       0       0
 15873 ;;      Locals:         0       0       0       0
 15874 ;;      Temps:          0       0       0       0
 15875 ;;      Totals:         0       0       0       0
 15876 ;;Total ram usage:        0 bytes
 15877 ;; Hardware stack levels used:    1
 15878 ;; This function calls:
 15879 ;;		Nothing
 15880 ;; This function is called by:
 15881 ;;		_HIGH_PRIORITY_IRQ
 15882 ;; This function uses a non-reentrant model
 15883 ;;
 15884                           
 15885                           	psect	text99
 15886  00272A                     __ptext99:
 15887                           	opt stack 0
 15888  00272A                     i2_IRQ_TIMER2:
 15889                           	opt stack 14
 15890                           
 15891                           ;interrupt.c: 884: PIR1bits.TMR2IF = 0;
 15892                           
 15893                           ;incstack = 0
 15894  00272A  929E               	bcf	3998,1,c	;volatile
 15895                           
 15896                           ;interrupt.c: 887: GODONE = 1;
 15897  00272C  82C2               	bsf	4034,1,c	;volatile
 15898  00272E  0012               	return		;funcret
 15899  002730                     __end_ofi2_IRQ_TIMER2:
 15900                           	opt stack 0
 15901                           tblptru	equ	0xFF8
 15902                           tblptrh	equ	0xFF7
 15903                           tblptrl	equ	0xFF6
 15904                           tablat	equ	0xFF5
 15905                           prodh	equ	0xFF4
 15906                           prodl	equ	0xFF3
 15907                           intcon	equ	0xFF2
 15908                           intcon2	equ	0xFF1
 15909                           intcon3	equ	0xFF0
 15910                           postinc0	equ	0xFEE
 15911                           wreg	equ	0xFE8
 15912                           indf1	equ	0xFE7
 15913                           postdec1	equ	0xFE5
 15914                           fsr1h	equ	0xFE2
 15915                           fsr1l	equ	0xFE1
 15916                           bsr	equ	0xFE0
 15917                           indf2	equ	0xFDF
 15918                           postinc2	equ	0xFDE
 15919                           postdec2	equ	0xFDD
 15920                           fsr2h	equ	0xFDA
 15921                           fsr2l	equ	0xFD9
 15922                           status	equ	0xFD8
 15923                           
 15924 ;; *************** function i2_IRQ_I_MOTEUR_2 *****************
 15925 ;; Defined at:
 15926 ;;		line 909 in file "interrupt.c"
 15927 ;; Parameters:    Size  Location     Type
 15928 ;;		None
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;		None
 15931 ;; Return value:  Size  Location     Type
 15932 ;;                  1    wreg      void 
 15933 ;; Registers used:
 15934 ;;		wreg, status,2, status,0
 15935 ;; Tracked objects:
 15936 ;;		On entry : 0/0
 15937 ;;		On exit  : 0/0
 15938 ;;		Unchanged: 0/0
 15939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 15940 ;;      Params:         0       0       0       0
 15941 ;;      Locals:         0       0       0       0
 15942 ;;      Temps:          0       0       0       0
 15943 ;;      Totals:         0       0       0       0
 15944 ;;Total ram usage:        0 bytes
 15945 ;; Hardware stack levels used:    1
 15946 ;; This function calls:
 15947 ;;		Nothing
 15948 ;; This function is called by:
 15949 ;;		_HIGH_PRIORITY_IRQ
 15950 ;; This function uses a non-reentrant model
 15951 ;;
 15952                           
 15953                           	psect	text100
 15954  002548                     __ptext100:
 15955                           	opt stack 0
 15956  002548                     i2_IRQ_I_MOTEUR_2:
 15957                           	opt stack 14
 15958                           
 15959                           ;interrupt.c: 914: LATCbits.LATC1 = 0;
 15960                           
 15961                           ;incstack = 0
 15962  002548  928B               	bcf	3979,1,c	;volatile
 15963                           
 15964                           ;interrupt.c: 916: while(TMR2 > 0) __nop();
 15965  00254A  D001               	goto	i2l4740
 15966  00254C                     i2l699:
 15967  00254C  F000               	nop	
 15968  00254E                     i2l4740:
 15969  00254E  50CC               	movf	4044,w,c	;volatile
 15970  002550  E1FD               	bnz	i2l699
 15971                           
 15972                           ;interrupt.c: 918: LATCbits.LATC1 = 1;
 15973  002552  828B               	bsf	3979,1,c	;volatile
 15974                           
 15975                           ;interrupt.c: 932: LATCbits.LATC2^=1;
 15976  002554  748B               	btg	3979,2,c	;volatile
 15977                           
 15978                           ;interrupt.c: 933: INTCON3bits.INT2IF = 0;
 15979  002556  92F0               	bcf	intcon3,1,c	;volatile
 15980                           
 15981                           ;interrupt.c: 937: Compteur_IRQ_I_Moteur_2 = (unsigned char) (Compteur_IRQ_I_Moteur_2 +1
      +                          );
 15982  002558  2847               	incf	_Compteur_IRQ_I_Moteur_2,w,c	;volatile
 15983  00255A  6E47               	movwf	_Compteur_IRQ_I_Moteur_2,c	;volatile
 15984  00255C  0012               	return		;funcret
 15985  00255E                     __end_ofi2_IRQ_I_MOTEUR_2:
 15986                           	opt stack 0
 15987                           tblptru	equ	0xFF8
 15988                           tblptrh	equ	0xFF7
 15989                           tblptrl	equ	0xFF6
 15990                           tablat	equ	0xFF5
 15991                           prodh	equ	0xFF4
 15992                           prodl	equ	0xFF3
 15993                           intcon	equ	0xFF2
 15994                           intcon2	equ	0xFF1
 15995                           intcon3	equ	0xFF0
 15996                           postinc0	equ	0xFEE
 15997                           wreg	equ	0xFE8
 15998                           indf1	equ	0xFE7
 15999                           postdec1	equ	0xFE5
 16000                           fsr1h	equ	0xFE2
 16001                           fsr1l	equ	0xFE1
 16002                           bsr	equ	0xFE0
 16003                           indf2	equ	0xFDF
 16004                           postinc2	equ	0xFDE
 16005                           postdec2	equ	0xFDD
 16006                           fsr2h	equ	0xFDA
 16007                           fsr2l	equ	0xFD9
 16008                           status	equ	0xFD8
 16009                           
 16010 ;; *************** function i2_IRQ_I_MOTEUR_1 *****************
 16011 ;; Defined at:
 16012 ;;		line 895 in file "interrupt.c"
 16013 ;; Parameters:    Size  Location     Type
 16014 ;;		None
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;		None
 16017 ;; Return value:  Size  Location     Type
 16018 ;;                  1    wreg      void 
 16019 ;; Registers used:
 16020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16021 ;; Tracked objects:
 16022 ;;		On entry : 0/0
 16023 ;;		On exit  : 0/0
 16024 ;;		Unchanged: 0/0
 16025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16026 ;;      Params:         0       0       0       0
 16027 ;;      Locals:         0       0       0       0
 16028 ;;      Temps:          0       0       0       0
 16029 ;;      Totals:         0       0       0       0
 16030 ;;Total ram usage:        0 bytes
 16031 ;; Hardware stack levels used:    1
 16032 ;; Hardware stack levels required when called:    3
 16033 ;; This function calls:
 16034 ;;		i2_Alarme_On
 16035 ;; This function is called by:
 16036 ;;		_HIGH_PRIORITY_IRQ
 16037 ;; This function uses a non-reentrant model
 16038 ;;
 16039                           
 16040                           	psect	text101
 16041  00255E                     __ptext101:
 16042                           	opt stack 0
 16043  00255E                     i2_IRQ_I_MOTEUR_1:
 16044                           	opt stack 11
 16045                           
 16046                           ;interrupt.c: 896: INTCON3bits.INT1IF = 0;
 16047                           
 16048                           ;incstack = 0
 16049  00255E  90F0               	bcf	intcon3,0,c	;volatile
 16050                           
 16051                           ;interrupt.c: 897: Compteur_IRQ_I_Moteur_1 += 1;
 16052  002560  2A48               	incf	_Compteur_IRQ_I_Moteur_1,f,c	;volatile
 16053                           
 16054                           ;interrupt.c: 898: if (Compteur_IRQ_I_Moteur_1 == 0) {
 16055  002562  5048               	movf	_Compteur_IRQ_I_Moteur_1,w,c	;volatile
 16056  002564  A4D8               	btfss	status,2,c
 16057  002566  0012               	return	
 16058                           
 16059                           ;interrupt.c: 899: LATCbits.LATC2 = 1;
 16060  002568  848B               	bsf	3979,2,c	;volatile
 16061                           
 16062                           ;interrupt.c: 901: LATCbits.LATC0 = 0;
 16063  00256A  908B               	bcf	3979,0,c	;volatile
 16064                           
 16065                           ;interrupt.c: 902: LATCbits.LATC1 = 0;
 16066  00256C  928B               	bcf	3979,1,c	;volatile
 16067                           
 16068                           ;interrupt.c: 904: Alarme_On(1);
 16069  00256E  0E01               	movlw	1
 16070  002570  EF40  F013         	goto	i2_Alarme_On
 16071  002574                     __end_ofi2_IRQ_I_MOTEUR_1:
 16072                           	opt stack 0
 16073                           tblptru	equ	0xFF8
 16074                           tblptrh	equ	0xFF7
 16075                           tblptrl	equ	0xFF6
 16076                           tablat	equ	0xFF5
 16077                           prodh	equ	0xFF4
 16078                           prodl	equ	0xFF3
 16079                           intcon	equ	0xFF2
 16080                           intcon2	equ	0xFF1
 16081                           intcon3	equ	0xFF0
 16082                           postinc0	equ	0xFEE
 16083                           wreg	equ	0xFE8
 16084                           indf1	equ	0xFE7
 16085                           postdec1	equ	0xFE5
 16086                           fsr1h	equ	0xFE2
 16087                           fsr1l	equ	0xFE1
 16088                           bsr	equ	0xFE0
 16089                           indf2	equ	0xFDF
 16090                           postinc2	equ	0xFDE
 16091                           postdec2	equ	0xFDD
 16092                           fsr2h	equ	0xFDA
 16093                           fsr2l	equ	0xFD9
 16094                           status	equ	0xFD8
 16095                           
 16096 ;; *************** function i2_IRQ_CAPOT *****************
 16097 ;; Defined at:
 16098 ;;		line 890 in file "interrupt.c"
 16099 ;; Parameters:    Size  Location     Type
 16100 ;;		None
 16101 ;; Auto vars:     Size  Location     Type
 16102 ;;		None
 16103 ;; Return value:  Size  Location     Type
 16104 ;;                  1    wreg      void 
 16105 ;; Registers used:
 16106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16107 ;; Tracked objects:
 16108 ;;		On entry : 0/0
 16109 ;;		On exit  : 0/0
 16110 ;;		Unchanged: 0/0
 16111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16112 ;;      Params:         0       0       0       0
 16113 ;;      Locals:         0       0       0       0
 16114 ;;      Temps:          0       0       0       0
 16115 ;;      Totals:         0       0       0       0
 16116 ;;Total ram usage:        0 bytes
 16117 ;; Hardware stack levels used:    1
 16118 ;; Hardware stack levels required when called:    3
 16119 ;; This function calls:
 16120 ;;		i2_Alarme_On
 16121 ;; This function is called by:
 16122 ;;		_HIGH_PRIORITY_IRQ
 16123 ;; This function uses a non-reentrant model
 16124 ;;
 16125                           
 16126                           	psect	text102
 16127  00270A                     __ptext102:
 16128                           	opt stack 0
 16129  00270A                     i2_IRQ_CAPOT:
 16130                           	opt stack 11
 16131                           
 16132                           ;interrupt.c: 891: INT0IF = 0;
 16133                           
 16134                           ;incstack = 0
 16135  00270A  92F2               	bcf	intcon,1,c	;volatile
 16136                           
 16137                           ;interrupt.c: 892: Alarme_On(4);
 16138  00270C  0E04               	movlw	4
 16139  00270E  EF40  F013         	goto	i2_Alarme_On
 16140  002712                     __end_ofi2_IRQ_CAPOT:
 16141                           	opt stack 0
 16142                           tblptru	equ	0xFF8
 16143                           tblptrh	equ	0xFF7
 16144                           tblptrl	equ	0xFF6
 16145                           tablat	equ	0xFF5
 16146                           prodh	equ	0xFF4
 16147                           prodl	equ	0xFF3
 16148                           intcon	equ	0xFF2
 16149                           intcon2	equ	0xFF1
 16150                           intcon3	equ	0xFF0
 16151                           postinc0	equ	0xFEE
 16152                           wreg	equ	0xFE8
 16153                           indf1	equ	0xFE7
 16154                           postdec1	equ	0xFE5
 16155                           fsr1h	equ	0xFE2
 16156                           fsr1l	equ	0xFE1
 16157                           bsr	equ	0xFE0
 16158                           indf2	equ	0xFDF
 16159                           postinc2	equ	0xFDE
 16160                           postdec2	equ	0xFDD
 16161                           fsr2h	equ	0xFDA
 16162                           fsr2l	equ	0xFD9
 16163                           status	equ	0xFD8
 16164                           
 16165 ;; *************** function i2_Alarme_On *****************
 16166 ;; Defined at:
 16167 ;;		line 18 in file "alarme.c"
 16168 ;; Parameters:    Size  Location     Type
 16169 ;;  alarme_new_v    1    wreg     unsigned char 
 16170 ;; Auto vars:     Size  Location     Type
 16171 ;;  alarme_new_v    1    1[COMRAM] unsigned char 
 16172 ;; Return value:  Size  Location     Type
 16173 ;;                  1    wreg      void 
 16174 ;; Registers used:
 16175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16176 ;; Tracked objects:
 16177 ;;		On entry : 0/0
 16178 ;;		On exit  : 0/0
 16179 ;;		Unchanged: 0/0
 16180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16181 ;;      Params:         0       0       0       0
 16182 ;;      Locals:         1       0       0       0
 16183 ;;      Temps:          0       0       0       0
 16184 ;;      Totals:         1       0       0       0
 16185 ;;Total ram usage:        1 bytes
 16186 ;; Hardware stack levels used:    1
 16187 ;; Hardware stack levels required when called:    2
 16188 ;; This function calls:
 16189 ;;		i2_Coupe_Moteur
 16190 ;;		i2_Etat_Update
 16191 ;; This function is called by:
 16192 ;;		i2_IRQ_CAPOT
 16193 ;;		i2_IRQ_I_MOTEUR_1
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           	psect	text103
 16198  002680                     __ptext103:
 16199                           	opt stack 0
 16200  002680                     i2_Alarme_On:
 16201                           	opt stack 11
 16202                           
 16203                           ;incstack = 0
 16204                           ;i2Alarme_On@alarme_new_value stored from wreg
 16205  002680  6E02               	movwf	i2Alarme_On@alarme_new_value,c
 16206                           
 16207                           ;alarme.c: 22: Etat_Update(1);
 16208  002682  0E01               	movlw	1
 16209  002684  EC3E  F012         	call	i2_Etat_Update
 16210                           
 16211                           ;alarme.c: 23: Alarme = alarme_new_value;
 16212  002688  C002  F0A9         	movff	i2Alarme_On@alarme_new_value,_Alarme	;volatile
 16213                           
 16214                           ;alarme.c: 24: Coupe_Moteur();
 16215  00268C  EFE2  F012         	goto	i2_Coupe_Moteur	;wreg free
 16216  002690                     __end_ofi2_Alarme_On:
 16217                           	opt stack 0
 16218                           tblptru	equ	0xFF8
 16219                           tblptrh	equ	0xFF7
 16220                           tblptrl	equ	0xFF6
 16221                           tablat	equ	0xFF5
 16222                           prodh	equ	0xFF4
 16223                           prodl	equ	0xFF3
 16224                           intcon	equ	0xFF2
 16225                           intcon2	equ	0xFF1
 16226                           intcon3	equ	0xFF0
 16227                           postinc0	equ	0xFEE
 16228                           wreg	equ	0xFE8
 16229                           indf1	equ	0xFE7
 16230                           postdec1	equ	0xFE5
 16231                           fsr1h	equ	0xFE2
 16232                           fsr1l	equ	0xFE1
 16233                           bsr	equ	0xFE0
 16234                           indf2	equ	0xFDF
 16235                           postinc2	equ	0xFDE
 16236                           postdec2	equ	0xFDD
 16237                           fsr2h	equ	0xFDA
 16238                           fsr2l	equ	0xFD9
 16239                           status	equ	0xFD8
 16240                           
 16241 ;; *************** function i2_Etat_Update *****************
 16242 ;; Defined at:
 16243 ;;		line 74 in file "action.c"
 16244 ;; Parameters:    Size  Location     Type
 16245 ;;  etat_new_val    1    wreg     unsigned char 
 16246 ;; Auto vars:     Size  Location     Type
 16247 ;;  etat_new_val    1    0[COMRAM] unsigned char 
 16248 ;; Return value:  Size  Location     Type
 16249 ;;                  1    wreg      void 
 16250 ;; Registers used:
 16251 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16252 ;; Tracked objects:
 16253 ;;		On entry : 0/0
 16254 ;;		On exit  : 0/0
 16255 ;;		Unchanged: 0/0
 16256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16257 ;;      Params:         0       0       0       0
 16258 ;;      Locals:         1       0       0       0
 16259 ;;      Temps:          0       0       0       0
 16260 ;;      Totals:         1       0       0       0
 16261 ;;Total ram usage:        1 bytes
 16262 ;; Hardware stack levels used:    1
 16263 ;; This function calls:
 16264 ;;		Nothing
 16265 ;; This function is called by:
 16266 ;;		i2_Alarme_On
 16267 ;; This function uses a non-reentrant model
 16268 ;;
 16269                           
 16270                           	psect	text104
 16271  00247C                     __ptext104:
 16272                           	opt stack 0
 16273  00247C                     i2_Etat_Update:
 16274                           	opt stack 12
 16275                           
 16276                           ;incstack = 0
 16277                           ;i2Etat_Update@etat_new_value stored from wreg
 16278  00247C  6E01               	movwf	i2Etat_Update@etat_new_value,c
 16279                           
 16280                           ;action.c: 75: Etat_Log[Etat_Precedent_Index] = etat_new_value;
 16281  00247E  504C               	movf	_Etat_Precedent_Index,w,c
 16282  002480  0F6A               	addlw	low _Etat_Log
 16283  002482  6ED9               	movwf	fsr2l,c
 16284  002484  6ADA               	clrf	fsr2h,c
 16285  002486  C001  FFDF         	movff	i2Etat_Update@etat_new_value,indf2
 16286                           
 16287                           ;action.c: 76: Etat = etat_new_value;
 16288  00248A  C001  F0AA         	movff	i2Etat_Update@etat_new_value,_Etat	;volatile
 16289                           
 16290                           ;action.c: 77: Etat_Precedent_Index++;
 16291  00248E  2A4C               	incf	_Etat_Precedent_Index,f,c
 16292                           
 16293                           ;action.c: 78: if (Etat_Precedent_Index == 10) {
 16294  002490  0E0A               	movlw	10
 16295  002492  184C               	xorwf	_Etat_Precedent_Index,w,c
 16296  002494  B4D8               	btfsc	status,2,c
 16297                           
 16298                           ;action.c: 79: Etat_Precedent_Index = 0;
 16299  002496  6A4C               	clrf	_Etat_Precedent_Index,c
 16300  002498  0012               	return		;funcret
 16301  00249A                     __end_ofi2_Etat_Update:
 16302                           	opt stack 0
 16303                           tblptru	equ	0xFF8
 16304                           tblptrh	equ	0xFF7
 16305                           tblptrl	equ	0xFF6
 16306                           tablat	equ	0xFF5
 16307                           prodh	equ	0xFF4
 16308                           prodl	equ	0xFF3
 16309                           intcon	equ	0xFF2
 16310                           intcon2	equ	0xFF1
 16311                           intcon3	equ	0xFF0
 16312                           postinc0	equ	0xFEE
 16313                           wreg	equ	0xFE8
 16314                           indf1	equ	0xFE7
 16315                           postdec1	equ	0xFE5
 16316                           fsr1h	equ	0xFE2
 16317                           fsr1l	equ	0xFE1
 16318                           bsr	equ	0xFE0
 16319                           indf2	equ	0xFDF
 16320                           postinc2	equ	0xFDE
 16321                           postdec2	equ	0xFDD
 16322                           fsr2h	equ	0xFDA
 16323                           fsr2l	equ	0xFD9
 16324                           status	equ	0xFD8
 16325                           
 16326 ;; *************** function i2_Coupe_Moteur *****************
 16327 ;; Defined at:
 16328 ;;		line 261 in file "action.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;		None
 16331 ;; Auto vars:     Size  Location     Type
 16332 ;;		None
 16333 ;; Return value:  Size  Location     Type
 16334 ;;                  1    wreg      void 
 16335 ;; Registers used:
 16336 ;;		cstack
 16337 ;; Tracked objects:
 16338 ;;		On entry : 0/0
 16339 ;;		On exit  : 0/0
 16340 ;;		Unchanged: 0/0
 16341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16342 ;;      Params:         0       0       0       0
 16343 ;;      Locals:         0       0       0       0
 16344 ;;      Temps:          0       0       0       0
 16345 ;;      Totals:         0       0       0       0
 16346 ;;Total ram usage:        0 bytes
 16347 ;; Hardware stack levels used:    1
 16348 ;; Hardware stack levels required when called:    1
 16349 ;; This function calls:
 16350 ;;		i2_TIMER2_Off
 16351 ;; This function is called by:
 16352 ;;		i2_Alarme_On
 16353 ;; This function uses a non-reentrant model
 16354 ;;
 16355                           
 16356                           	psect	text105
 16357  0025C4                     __ptext105:
 16358                           	opt stack 0
 16359  0025C4                     i2_Coupe_Moteur:
 16360                           	opt stack 11
 16361                           
 16362                           ;action.c: 262: TIMER2_Off();
 16363                           
 16364                           ;incstack = 0
 16365  0025C4  EC98  F013         	call	i2_TIMER2_Off	;wreg free
 16366                           
 16367                           ;action.c: 274: LATCbits.LATC0 = 0;
 16368  0025C8  908B               	bcf	3979,0,c	;volatile
 16369                           
 16370                           ;action.c: 275: LATCbits.LATC1 = 0;
 16371  0025CA  928B               	bcf	3979,1,c	;volatile
 16372                           
 16373                           ;action.c: 276: OVDCOND = 0b00000000;
 16374  0025CC  6A6B               	clrf	3947,c	;volatile
 16375                           
 16376                           ;action.c: 277: LATD4 = 0;LATD5 = 0;
 16377  0025CE  988C               	bcf	3980,4,c	;volatile
 16378  0025D0  9A8C               	bcf	3980,5,c	;volatile
 16379                           
 16380                           ;action.c: 278: LATD6 = 0;LATD7 = 0;
 16381  0025D2  9C8C               	bcf	3980,6,c	;volatile
 16382  0025D4  9E8C               	bcf	3980,7,c	;volatile
 16383  0025D6  0012               	return		;funcret
 16384  0025D8                     __end_ofi2_Coupe_Moteur:
 16385                           	opt stack 0
 16386                           tblptru	equ	0xFF8
 16387                           tblptrh	equ	0xFF7
 16388                           tblptrl	equ	0xFF6
 16389                           tablat	equ	0xFF5
 16390                           prodh	equ	0xFF4
 16391                           prodl	equ	0xFF3
 16392                           intcon	equ	0xFF2
 16393                           intcon2	equ	0xFF1
 16394                           intcon3	equ	0xFF0
 16395                           postinc0	equ	0xFEE
 16396                           wreg	equ	0xFE8
 16397                           indf1	equ	0xFE7
 16398                           postdec1	equ	0xFE5
 16399                           fsr1h	equ	0xFE2
 16400                           fsr1l	equ	0xFE1
 16401                           bsr	equ	0xFE0
 16402                           indf2	equ	0xFDF
 16403                           postinc2	equ	0xFDE
 16404                           postdec2	equ	0xFDD
 16405                           fsr2h	equ	0xFDA
 16406                           fsr2l	equ	0xFD9
 16407                           status	equ	0xFD8
 16408                           
 16409 ;; *************** function i2_TIMER2_Off *****************
 16410 ;; Defined at:
 16411 ;;		line 165 in file "timer.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;		None
 16414 ;; Auto vars:     Size  Location     Type
 16415 ;;		None
 16416 ;; Return value:  Size  Location     Type
 16417 ;;                  1    wreg      void 
 16418 ;; Registers used:
 16419 ;;		None
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
 16425 ;;      Params:         0       0       0       0
 16426 ;;      Locals:         0       0       0       0
 16427 ;;      Temps:          0       0       0       0
 16428 ;;      Totals:         0       0       0       0
 16429 ;;Total ram usage:        0 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; This function calls:
 16432 ;;		Nothing
 16433 ;; This function is called by:
 16434 ;;		i2_Coupe_Moteur
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text106
 16439  002730                     __ptext106:
 16440                           	opt stack 0
 16441  002730                     i2_TIMER2_Off:
 16442                           	opt stack 11
 16443                           
 16444                           ;timer.c: 167: PIE1bits.TMR2IE = 0;
 16445                           
 16446                           ;incstack = 0
 16447  002730  929D               	bcf	3997,1,c	;volatile
 16448                           
 16449                           ;timer.c: 168: PIR1bits.TMR2IF = 0;
 16450  002732  929E               	bcf	3998,1,c	;volatile
 16451  002734  0012               	return		;funcret
 16452  002736                     __end_ofi2_TIMER2_Off:
 16453                           	opt stack 0
 16454                           tblptru	equ	0xFF8
 16455                           tblptrh	equ	0xFF7
 16456                           tblptrl	equ	0xFF6
 16457                           tablat	equ	0xFF5
 16458                           prodh	equ	0xFF4
 16459                           prodl	equ	0xFF3
 16460                           intcon	equ	0xFF2
 16461                           intcon2	equ	0xFF1
 16462                           intcon3	equ	0xFF0
 16463                           postinc0	equ	0xFEE
 16464                           wreg	equ	0xFE8
 16465                           indf1	equ	0xFE7
 16466                           postdec1	equ	0xFE5
 16467                           fsr1h	equ	0xFE2
 16468                           fsr1l	equ	0xFE1
 16469                           bsr	equ	0xFE0
 16470                           indf2	equ	0xFDF
 16471                           postinc2	equ	0xFDE
 16472                           postdec2	equ	0xFDD
 16473                           fsr2h	equ	0xFDA
 16474                           fsr2l	equ	0xFD9
 16475                           status	equ	0xFD8
 16476                           tblptru	equ	0xFF8
 16477                           tblptrh	equ	0xFF7
 16478                           tblptrl	equ	0xFF6
 16479                           tablat	equ	0xFF5
 16480                           prodh	equ	0xFF4
 16481                           prodl	equ	0xFF3
 16482                           intcon	equ	0xFF2
 16483                           intcon2	equ	0xFF1
 16484                           intcon3	equ	0xFF0
 16485                           postinc0	equ	0xFEE
 16486                           wreg	equ	0xFE8
 16487                           indf1	equ	0xFE7
 16488                           postdec1	equ	0xFE5
 16489                           fsr1h	equ	0xFE2
 16490                           fsr1l	equ	0xFE1
 16491                           bsr	equ	0xFE0
 16492                           indf2	equ	0xFDF
 16493                           postinc2	equ	0xFDE
 16494                           postdec2	equ	0xFDD
 16495                           fsr2h	equ	0xFDA
 16496                           fsr2l	equ	0xFD9
 16497                           status	equ	0xFD8
 16498                           
 16499                           	psect	rparam
 16500  0000                     tblptru	equ	0xFF8
 16501                           tblptrh	equ	0xFF7
 16502                           tblptrl	equ	0xFF6
 16503                           tablat	equ	0xFF5
 16504                           prodh	equ	0xFF4
 16505                           prodl	equ	0xFF3
 16506                           intcon	equ	0xFF2
 16507                           intcon2	equ	0xFF1
 16508                           intcon3	equ	0xFF0
 16509                           postinc0	equ	0xFEE
 16510                           wreg	equ	0xFE8
 16511                           indf1	equ	0xFE7
 16512                           postdec1	equ	0xFE5
 16513                           fsr1h	equ	0xFE2
 16514                           fsr1l	equ	0xFE1
 16515                           bsr	equ	0xFE0
 16516                           indf2	equ	0xFDF
 16517                           postinc2	equ	0xFDE
 16518                           postdec2	equ	0xFDD
 16519                           fsr2h	equ	0xFDA
 16520                           fsr2l	equ	0xFD9
 16521                           status	equ	0xFD8
 16522                           
 16523                           	psect	temp
 16524  000051                     btemp:
 16525                           	opt stack 0
 16526  000051                     	ds	1
 16527  0000                     int$flags	set	btemp
 16528                           tblptru	equ	0xFF8
 16529                           tblptrh	equ	0xFF7
 16530                           tblptrl	equ	0xFF6
 16531                           tablat	equ	0xFF5
 16532                           prodh	equ	0xFF4
 16533                           prodl	equ	0xFF3
 16534                           intcon	equ	0xFF2
 16535                           intcon2	equ	0xFF1
 16536                           intcon3	equ	0xFF0
 16537                           postinc0	equ	0xFEE
 16538                           wreg	equ	0xFE8
 16539                           indf1	equ	0xFE7
 16540                           postdec1	equ	0xFE5
 16541                           fsr1h	equ	0xFE2
 16542                           fsr1l	equ	0xFE1
 16543                           bsr	equ	0xFE0
 16544                           indf2	equ	0xFDF
 16545                           postinc2	equ	0xFDE
 16546                           postdec2	equ	0xFDD
 16547                           fsr2h	equ	0xFDA
 16548                           fsr2l	equ	0xFD9
 16549                           status	equ	0xFD8


Data Sizes:
    Strings     327
    Constant    18
    Data        0
    BSS         537
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     66      80
    BANK0           160     19     160
    BANK1           256      0     256
    BANK2           256     11     139

Pointer List with Targets:

    EUSART1_Buffer_Send@text	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 95
		 -> STR_10(CODE[84]), STR_9(CODE[3]), STR_8(CODE[31]), STR_7(CODE[49]), 
		 -> STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[33]), STR_3(CODE[13]), 
		 -> STR_2(CODE[95]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 64
		 -> UART_TX_TEXT(BANK0[64]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _delay_n_100ms->_delay_100ms
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lbtoft
    ___ftdiv->___ftmul
    _Capteur_Capot_On->_Etat_Update
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _delay_1s->_delay_100ms
    _IRQ_Execution->_IRQ_ADC
    _IRQ_TIMER_5->_Alarme_On
    _IRQ_PION_Metal_Disparait->_Buzzer_Etat
    _IRQ_PION_Metal_Apparait->_Buzzer_Etat
    _IRQ_I_MOTEUR_1->_Alarme_On
    _IRQ_CAPOT->_Alarme_On
    _Alarme_On->_Etat_Update
    _Etat_Get->___awmod

Critical Paths under _LOW_PRIORITY_IRQ in COMRAM

    _LOW_PRIORITY_IRQ->_EUSART1_Receive_ISR
    _LOW_PRIORITY_IRQ->_SPI_ISR
    _LOW_PRIORITY_IRQ->i1_IRQ_ADC
    i1_IRQ_TIMER_5->i1_Alarme_On
    i1_Alarme_On->i1_Etat_Update
    _IRQ_PION_CHANGEMENT_ETAT->i1_Buzzer_Etat

Critical Paths under _HIGH_PRIORITY_IRQ in COMRAM

    i2_IRQ_I_MOTEUR_1->i2_Alarme_On
    i2_IRQ_CAPOT->i2_Alarme_On
    i2_Alarme_On->i2_Etat_Update

Critical Paths under _main in BANK0

    _Cycle->_Mouvement_X
    _Cycle->_delay_s
    _Mouvement_Z->_delay_s
    _Mouvement_Bequille->_delay_s
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_RX_T3_LOCAL->_sprintf

Critical Paths under _LOW_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LOW_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Cycle
    _Cycle->_Mouvement_Bequille
    _Cycle->_Mouvement_Z
    _SPI_Check_Buffer->_EUSART1_RX_T3_LOCAL
    _EUSART1_Check_Buffer->_EUSART1_RX_T3_LOCAL

Critical Paths under _LOW_PRIORITY_IRQ in BANK2

    None.

Critical Paths under _HIGH_PRIORITY_IRQ in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  185874
                              _Cycle
                 _EUSART1_Initialize
                           _Init_ADC
                            _Init_IT
                           _Init_PWM
                          _Init_Port
                           _Init_SPI
                        _Init_TIMER0
                        _Init_TIMER2
                        _Init_TIMER5
                      _Init_Variable
 ---------------------------------------------------------------------------------
 (1) _Init_Variable                                        1     1      0      99
                                             14 COMRAM     1     1      0
                _Detection_Pion_Init
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER5                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_SPI                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Port                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_PWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_IT                                              0     0      0       0
               _Init_Input_Capture_0
 ---------------------------------------------------------------------------------
 (2) _Init_Input_Capture_0                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0       0
                _EUSART1_IT_ACTIVATE
 ---------------------------------------------------------------------------------
 (2) _EUSART1_IT_ACTIVATE                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Cycle                                                2     2      0  185775
                                             10 BANK2      1     1      0
                          _Alarme_On
                        _Buzzer_Etat
                       _Coupe_Moteur
               _EUSART1_Check_Buffer
                           _Etat_Get
                        _Etat_Update
                 _Mouvement_Bequille
                        _Mouvement_X
                        _Mouvement_Z
                   _SPI_Check_Buffer
                      _delay_n_100ms
                            _delay_s
 ---------------------------------------------------------------------------------
 (2) _delay_n_100ms                                        2     2      0      68
                                             15 COMRAM     2     2      0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Z                                          9     7      2   39998
                                              7 BANK2      3     1      2
                _Check_List_Moteur_2
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
                      _Init_Moteur_2
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_2                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_2                                  0     0      0   26320
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
 ---------------------------------------------------------------------------------
 (2) _Mouvement_X                                          9     7      2   64782
                                             17 BANK0      2     0      2
                                              7 BANK2      1     1      0
                  _Capteur_Capot_Off
                   _Capteur_Capot_On
                _Check_List_Moteur_1
                       _Coupe_Moteur
                _Detection_Pion_Init
                 _Detection_Pion_Off
                  _Detection_Pion_On
               _EUSART1_Check_Buffer
                        _Etat_Update
   _Init_ADC_Single_Shoot_I_Moteur_1
                      _Init_Moteur_1
                   _SPI_Check_Buffer
                      _Stop_Moteur_1
_Surveillance_Consommation_Moteur_1_
                          _TIMER2_On
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_1_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Stop_Moteur_1                                        0     0      0       0
                         _TIMER0_Off
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_1                                        0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_1                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_On                                    0     0      0      31
            _IRQ_PION_Metal_Apparait
 ---------------------------------------------------------------------------------
 (2) _Detection_Pion_Init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_1                                  0     0      0   37041
                          _Alarme_On
               _EUSART1_Check_Buffer
                   _SPI_Check_Buffer
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2864
                                             22 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     461
                                             55 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3786
                                             26 COMRAM    14     8      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3579
                                             40 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2833
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_On                                     0     0      0      62
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (3) _Capteur_Capot_Off                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Mouvement_Bequille                                   9     7      2   40329
                                              7 BANK2      3     1      2
         _Check_List_Moteur_Bequille
                       _Coupe_Moteur
                 _Detection_Pion_Off
   _Init_ADC_Single_Shoot_I_Moteur_2
               _Init_Moteur_Bequille
_Surveillance_Consommation_Moteur_2_
                          _TIMER2_On
                            _delay_s
                         _u_Init_PWM
 ---------------------------------------------------------------------------------
 (3) _u_Init_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_s                                              2     2      0   13194
                                             17 BANK0      2     2      0
               _EUSART1_Check_Buffer
                         _TIMER0_Off
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TIMER2_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Surveillance_Consommation_Moteur_2_Desactiver        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_Moteur_Bequille                                 0     0      0       0
                          _TIMER0_On
 ---------------------------------------------------------------------------------
 (3) _TIMER0_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Init_ADC_Single_Shoot_I_Moteur_2                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Detection_Pion_Off                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Check_List_Moteur_Bequille                           1     1      0   26651
                                             17 BANK0      1     1      0
               _EUSART1_Check_Buffer
                        _Etat_Update
                   _SPI_Check_Buffer
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     331
                                             14 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (2) _SPI_Check_Buffer                                     0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Check_Buffer                                 0     0      0   13129
                _EUSART1_RX_T3_LOCAL
 ---------------------------------------------------------------------------------
 (4) _EUSART1_RX_T3_LOCAL                                 15     8      7   13129
                                             63 COMRAM     3     3      0
                                             13 BANK0      4     4      0
                                              0 BANK2      7     0      7
                          _Alarme_On
                       _Coupe_Moteur
                _EUSART1_Buffer_Send
                           _Etat_Get
                      _Etat_Intitule
                        _Etat_Update
                      _IRQ_Execution
                            ___awmod
                           _delay_1s
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             59    22     37    5010
                                             26 COMRAM    37     0     37
                                              0 BANK0     13    13      0
                           _Etat_Get (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     412
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     412
                                             21 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     601
                                             14 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) _delay_1s                                             0     0      0       0
                        _delay_100ms
 ---------------------------------------------------------------------------------
 (6) _delay_100ms                                          1     1      0       0
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRQ_Execution                                        1     1      0     465
                                             17 COMRAM     1     1      0
                            _IRQ_ADC
                          _IRQ_CAPOT
                     _IRQ_I_MOTEUR_1
                     _IRQ_I_MOTEUR_2
            _IRQ_PION_Metal_Apparait
           _IRQ_PION_Metal_Disparait
                            _IRQ_PWM
                         _IRQ_TIMER2
                        _IRQ_TIMER_0
                        _IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_5                                          0     0      0     186
                          _Alarme_On
                        _Buzzer_Etat
                        _Etat_Update
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER_0                                          0     0      0       0
_Surveillance_Consommation_Moteur_1_
_Surveillance_Consommation_Moteur_2_
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_2_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Surveillance_Consommation_Moteur_1_Activer           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_TIMER2                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PWM                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Disparait                             0     0      0      31
                        _Buzzer_Etat
                         _TIMER5_Off
 ---------------------------------------------------------------------------------
 (7) _TIMER5_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_PION_Metal_Apparait                              0     0      0      31
                        _Buzzer_Etat
                          _TIMER5_On
 ---------------------------------------------------------------------------------
 (7) _TIMER5_On                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _Buzzer_Etat                                          1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_2                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_I_MOTEUR_1                                       0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (6) _IRQ_CAPOT                                            0     0      0      93
                          _Alarme_On
 ---------------------------------------------------------------------------------
 (7) _Alarme_On                                            1     1      0      93
                                             15 COMRAM     1     1      0
                       _Coupe_Moteur
                        _Etat_Update
 ---------------------------------------------------------------------------------
 (7) _Etat_Update                                          1     1      0      62
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _Coupe_Moteur                                         0     0      0       0
                         _TIMER2_Off
 ---------------------------------------------------------------------------------
 (9) _TIMER2_Off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _IRQ_ADC                                              3     3      0       0
                                             14 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Intitule                                        1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Etat_Get                                             3     3      0     824
                                             20 COMRAM     3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     793
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Buffer_Send                                  3     2      1    1396
                                             14 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _LOW_PRIORITY_IRQ                                    7     7      0     335
                                              7 COMRAM     7     7      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
           _IRQ_PION_CHANGEMENT_ETAT
                            _SPI_ISR
                          i1_IRQ_ADC
                          i1_IRQ_PWM
                      i1_IRQ_TIMER_0
                      i1_IRQ_TIMER_5
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_5                                       0     0      0     132
                        i1_Alarme_On
                      i1_Buzzer_Etat
                      i1_Etat_Update
                       i1_TIMER5_Off
 ---------------------------------------------------------------------------------
 (13) i1_Alarme_On                                         1     1      0      66
                                              5 COMRAM     1     1      0
                     i1_Coupe_Moteur
                      i1_Etat_Update
 ---------------------------------------------------------------------------------
 (13) i1_Etat_Update                                       1     1      0      44
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (14) i1_Coupe_Moteur                                      0     0      0       0
                       i1_TIMER2_Off
 ---------------------------------------------------------------------------------
 (15) i1_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_TIMER_0                                       0     0      0       0
i1_Surveillance_Consommation_Moteur_
i1_Surveillance_Consommation_Moteur_
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_2_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Surveillance_Consommation_Moteur_1_Activer        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_PWM                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i1_IRQ_ADC                                           3     3      0       0
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _SPI_ISR                                             3     3      0     113
                                              4 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (12) _IRQ_PION_CHANGEMENT_ETAT                            0     0      0      22
                      i1_Buzzer_Etat
                       i1_TIMER5_Off
                        i1_TIMER5_On
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_On                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_TIMER5_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_Buzzer_Etat                                       1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 3     3      0      68
                                              4 COMRAM     3     3      0
                 _EUSART1_Erreur_Get
 ---------------------------------------------------------------------------------
 (13) _EUSART1_Erreur_Get                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _HIGH_PRIORITY_IRQ                                   2     2      0     132
                                              2 COMRAM     2     2      0
                        i2_IRQ_CAPOT
                   i2_IRQ_I_MOTEUR_1
                   i2_IRQ_I_MOTEUR_2
                       i2_IRQ_TIMER2
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_TIMER2                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_2                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_I_MOTEUR_1                                    0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (17) i2_IRQ_CAPOT                                         0     0      0      66
                        i2_Alarme_On
 ---------------------------------------------------------------------------------
 (18) i2_Alarme_On                                         1     1      0      66
                                              1 COMRAM     1     1      0
                     i2_Coupe_Moteur
                      i2_Etat_Update
 ---------------------------------------------------------------------------------
 (19) i2_Etat_Update                                       1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (19) i2_Coupe_Moteur                                      0     0      0       0
                       i2_TIMER2_Off
 ---------------------------------------------------------------------------------
 (20) i2_TIMER2_Off                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Cycle
     _Alarme_On
       _Coupe_Moteur
         _TIMER2_Off
       _Etat_Update
     _Buzzer_Etat
     _Coupe_Moteur
       _TIMER2_Off
     _EUSART1_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _Etat_Get
       ___awmod
     _Etat_Update
     _Mouvement_Bequille
       _Check_List_Moteur_Bequille
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___lbdiv
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_Bequille
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _Mouvement_X
       _Capteur_Capot_Off
       _Capteur_Capot_On
         _Etat_Update
       _Check_List_Moteur_1
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
               ___lbtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Init
       _Detection_Pion_Off
       _Detection_Pion_On
         _IRQ_PION_Metal_Apparait
           _Buzzer_Etat
           _TIMER5_On
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Etat_Update
       _Init_ADC_Single_Shoot_I_Moteur_1
       _Init_Moteur_1
         _TIMER0_On
       _SPI_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _Stop_Moteur_1
         _TIMER0_Off
       _Surveillance_Consommation_Moteur_1_Desactiver
       _TIMER2_On
       _u_Init_PWM
     _Mouvement_Z
       _Check_List_Moteur_2
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _Etat_Update
         _SPI_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
       _Coupe_Moteur
         _TIMER2_Off
       _Detection_Pion_Off
       _Init_ADC_Single_Shoot_I_Moteur_2
       _Init_Moteur_2
         _TIMER0_On
       _Surveillance_Consommation_Moteur_2_Desactiver
       _TIMER2_On
       _delay_s
         _EUSART1_Check_Buffer
           _EUSART1_RX_T3_LOCAL
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Coupe_Moteur
               _TIMER2_Off
             _EUSART1_Buffer_Send
             _Etat_Get
               ___awmod
             _Etat_Intitule
             _Etat_Update
             _IRQ_Execution
               _IRQ_ADC
               _IRQ_CAPOT
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_1
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
               _IRQ_I_MOTEUR_2
               _IRQ_PION_Metal_Apparait
                 _Buzzer_Etat
                 _TIMER5_On
               _IRQ_PION_Metal_Disparait
                 _Buzzer_Etat
                 _TIMER5_Off
               _IRQ_PWM
               _IRQ_TIMER2
               _IRQ_TIMER_0
                 _Surveillance_Consommation_Moteur_1_Activer
                 _Surveillance_Consommation_Moteur_2_Activer
               _IRQ_TIMER_5
                 _Alarme_On
                   _Coupe_Moteur
                     _TIMER2_Off
                   _Etat_Update
                 _Buzzer_Etat
                 _Etat_Update
                 _TIMER5_Off
             ___awmod
             _delay_1s
               _delay_100ms
             _sprintf
               _Etat_Get (ARG)
                 ___awmod
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _isdigit (ARG)
         _TIMER0_Off
         _TIMER0_On
       _u_Init_PWM
     _SPI_Check_Buffer
       _EUSART1_RX_T3_LOCAL
         _Alarme_On
           _Coupe_Moteur
             _TIMER2_Off
           _Etat_Update
         _Coupe_Moteur
           _TIMER2_Off
         _EUSART1_Buffer_Send
         _Etat_Get
           ___awmod
         _Etat_Intitule
         _Etat_Update
         _IRQ_Execution
           _IRQ_ADC
           _IRQ_CAPOT
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_1
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
           _IRQ_I_MOTEUR_2
           _IRQ_PION_Metal_Apparait
             _Buzzer_Etat
             _TIMER5_On
           _IRQ_PION_Metal_Disparait
             _Buzzer_Etat
             _TIMER5_Off
           _IRQ_PWM
           _IRQ_TIMER2
           _IRQ_TIMER_0
             _Surveillance_Consommation_Moteur_1_Activer
             _Surveillance_Consommation_Moteur_2_Activer
           _IRQ_TIMER_5
             _Alarme_On
               _Coupe_Moteur
                 _TIMER2_Off
               _Etat_Update
             _Buzzer_Etat
             _Etat_Update
             _TIMER5_Off
         ___awmod
         _delay_1s
           _delay_100ms
         _sprintf
           _Etat_Get (ARG)
             ___awmod
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _isdigit (ARG)
     _delay_n_100ms
       _delay_100ms
     _delay_s
       _EUSART1_Check_Buffer
         _EUSART1_RX_T3_LOCAL
           _Alarme_On
             _Coupe_Moteur
               _TIMER2_Off
             _Etat_Update
           _Coupe_Moteur
             _TIMER2_Off
           _EUSART1_Buffer_Send
           _Etat_Get
             ___awmod
           _Etat_Intitule
           _Etat_Update
           _IRQ_Execution
             _IRQ_ADC
             _IRQ_CAPOT
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_1
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
             _IRQ_I_MOTEUR_2
             _IRQ_PION_Metal_Apparait
               _Buzzer_Etat
               _TIMER5_On
             _IRQ_PION_Metal_Disparait
               _Buzzer_Etat
               _TIMER5_Off
             _IRQ_PWM
             _IRQ_TIMER2
             _IRQ_TIMER_0
               _Surveillance_Consommation_Moteur_1_Activer
               _Surveillance_Consommation_Moteur_2_Activer
             _IRQ_TIMER_5
               _Alarme_On
                 _Coupe_Moteur
                   _TIMER2_Off
                 _Etat_Update
               _Buzzer_Etat
               _Etat_Update
               _TIMER5_Off
           ___awmod
           _delay_1s
             _delay_100ms
           _sprintf
             _Etat_Get (ARG)
               ___awmod
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _isdigit (ARG)
       _TIMER0_Off
       _TIMER0_On
   _EUSART1_Initialize
     _EUSART1_IT_ACTIVATE
   _Init_ADC
   _Init_IT
     _Init_Input_Capture_0
   _Init_PWM
   _Init_Port
   _Init_SPI
   _Init_TIMER0
   _Init_TIMER2
   _Init_TIMER5
   _Init_Variable
     _Detection_Pion_Init

 _LOW_PRIORITY_IRQ (ROOT)
   _EUSART1_Receive_ISR
     _EUSART1_Erreur_Get
   _EUSART1_Transmit_ISR
   _IRQ_PION_CHANGEMENT_ETAT
     i1_Buzzer_Etat
     i1_TIMER5_Off
     i1_TIMER5_On
   _SPI_ISR
   i1_IRQ_ADC
   i1_IRQ_PWM
   i1_IRQ_TIMER_0
     i1_Surveillance_Consommation_Moteur_1_Activer
     i1_Surveillance_Consommation_Moteur_2_Activer
   i1_IRQ_TIMER_5
     i1_Alarme_On
       i1_Coupe_Moteur
         i1_TIMER2_Off
       i1_Etat_Update
     i1_Buzzer_Etat
     i1_Etat_Update
     i1_TIMER5_Off

 _HIGH_PRIORITY_IRQ (ROOT)
   i2_IRQ_CAPOT
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_1
     i2_Alarme_On
       i2_Coupe_Moteur
         i2_TIMER2_Off
       i2_Etat_Update
   i2_IRQ_I_MOTEUR_2
   i2_IRQ_TIMER2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      B      8B       9       54.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      A0       5      100.0%
BITCOMRAM           5E      0       2       0        2.1%
COMRAM              5E     42      50       1       85.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     27B       3        0.0%
DATA                 0      0     27B      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Apr 30 09:34:31 2019

                                           _SSPSTATbits 000FC7  
                                                    bsr 000FE0  
                                   ___wmul@multiplicand 0011  
                                       ??i2_Etat_Update 0001  
                                          __CFG_CP0$OFF 000000  
                                          __CFG_CP1$OFF 000000  
                                          __CFG_CP2$OFF 000000  
                                          __CFG_CP3$OFF 000000  
                                         ??_Etat_Update 000F  
                                                   l248 0C58  
                                                   l610 1BA8  
                                                   l531 26A8  
                                                   l259 0CF0  
                                                   l283 20D6  
                                                   l630 0E9C  
                                                   l622 0E16  
                                                   l607 1B68  
                                                   l624 0E4A  
                                                   l637 0F20  
                                                   l577 243A  
                                                   l588 1E3C  
                                                   l699 2520  
                                                   l976 22FE  
                                                   _GIE 007F97  
                                                   l989 213A  
                                          __CFG_CPB$OFF 000000  
                                                   _PR2 000FCB  
                                          __CFG_CPD$OFF 000000  
                            _Capteur_Capot_Nb_Evenement 009F  
                                          __CFG_BORV$27 000000  
                                          ___awmod@sign 0014  
                                       _Option_Pailleux 027D  
                                                   wreg 000FE8  
                                            _TXSTA1bits 000FAC  
                                          __CFG_IESO$ON 000000  
                                         _Stop_Moteur_1 2736  
                                          __CFG_LVP$OFF 000000  
                                       ??i1_Buzzer_Etat 0005  
                              Mouvement_Bequille@option 0288  
                                          ___ftdiv@cntr 0032  
                                          ___ftdiv@sign 0037  
                                                  l1014 1A20  
                                                  l1030 1192  
                                                  l1007 19BE  
                                                  l1025 1976  
                                                  l1018 1914  
                                                  l1048 127C  
                                                  l2041 16F6  
                                                  l1049 1238  
                                                  l2043 173E  
                                                  l1420 059C  
                                                  l1318 1770  
                                                  l1422 05A0  
                                                  l1423 05A6  
                                                  l1424 05E0  
                                                  l1408 0470  
                                                  l1425 05E2  
                                                  l1417 0564  
                                                  l2057 143E  
                                                  l2163 2048  
                                                  l1452 06A6  
                                                  l2173 20C8  
                                                  l1438 062E  
                                                  l1374 017A  
                                                  l1723 09B4  
                                                  l1708 08F4  
                                                  l1492 07C2  
                                                  l1468 0758  
                                                  l1741 0A8A  
                                                  l1742 0A8E  
                                                  l1494 07D8  
                                                  l1973 1ACC  
                                                  l1985 1B2A  
                                                  l8002 0610  
                                                  l8012 0622  
                                                  l8110 0786  
                                                  l8102 076E  
                                                  l8022 066A  
                                                  l7400 1E42  
                                                  l9000 0CB2  
                                                  l8122 07A4  
                                                  l8114 078C  
                                                  l8106 0774  
                                                  l8034 0682  
                                                  l8026 0670  
                                                  l8132 07DE  
                                                  l8116 0798  
                                                  l8108 0780  
                                                  l9020 0CFC  
                                                  l9012 0CDE  
                                                  l7510 0F70  
                                                  l7502 0F48  
                                                  l7406 1E52  
                                                  l7414 1E62  
                                                  l8134 07E6  
                                                  l8118 079E  
                                                  l8126 07B0  
                                                  l8070 06FA  
                                                  l8062 06E8  
                                                  l8038 0688  
                                                  l8142 07F8  
                                                  l8206 1B3C  
                                                  l9022 0D0C  
                                                  l8136 07EC  
                                                  l8128 07D0  
                                                  l8048 069A  
                                                  l9032 0D1A  
                                                  _ADIF 007CF6  
                                                  l7514 0F78  
                                                  l7506 0F52  
                                                  l7354 2522  
                                                  l7434 1B6C  
                                                  l7442 1B80  
                                                  l8074 0700  
                                                  l8058 06E2  
                                                  l8226 2516  
                                                  l8234 16D6  
                                                  l8306 1614  
                                                  l7428 1B5C  
                                                  l7612 20BE  
                                                  l7604 20A0  
                                                  l7532 24CA  
                                                  l8092 0764  
                                                  l8084 0712  
                                                  l8180 1AD4  
                                                  l8252 171A  
                                                  l8340 16A4  
                                                  l8332 1680  
                                                  l8324 1668  
                                                  l8308 161E  
                                                  l9060 0D96  
                                                  l7550 1C3C  
                                                  l7518 0FA4  
                                                  l7454 1BA0  
                                                  l7606 20A8  
                                                  l7710 08E0  
                                                  l8086 071E  
                                                  l8350 2184  
                                                  l8190 1B16  
                                                  l8182 1ADE  
                                                  l8270 13B6  
                                                  l8334 168C  
                                                  l9062 0DA6  
                                                  l9038 0D3E  
                                                  l7560 1C5C  
                                                  l7608 20AC  
                                                  l7720 0902  
                                                  l8096 0766  
                                                  l8088 0724  
                                                  l8192 1B20  
                                                  l8184 1AF2  
                                                  l8336 1690  
                                                  l8328 1678  
                                                  l9064 0DB6  
                                                  l9056 0D70  
                                                  l9048 0D4C  
                                                  l9072 0DE6  
                                                  l7562 1C60  
                                                  l7570 1C7C  
                                                  l7554 1C48  
                                                  l7474 0E68  
                                                  l7394 1E2C  
                                                  l7458 1BB0  
                                                  l7802 0AA8  
                                                  l7810 0AC2  
                                                  l8098 076C  
                                                  l8362 219E  
                                                  l8354 218A  
                                                  l8274 13D6  
                                                  l9066 0DC6  
                                                  l9058 0D86  
                                                  l9074 0E08  
                                                  l7492 0EEC  
                                                  l7484 0EC4  
                                                  l7468 0E3E  
                                                  l7812 0AC8  
                                                  l7716 08FC  
                                                  l7900 0274  
                                                  l8356 218E  
                                                  l8188 1B04  
                                                  l8380 2594  
                                                  l8620 1196  
                                                  l9068 0DD6  
                                                  l7574 1C88  
                                                  l7566 1C72  
                                                  l7558 1C54  
                                                  l7478 0E70  
                                                  l7398 1E36  
                                                  l7750 09DC  
                                                  l7734 0984  
                                                  l7726 092A  
                                                  l7910 02EC  
                                                  l7902 02A6  
                                                  l8366 21A6  
                                                  l8390 2340  
                                                  l7496 0EF4  
                                                  l7488 0ECE  
                                                  l7584 2018  
                                                  l7840 0B96  
                                                  l7824 0AF6  
                                                  l7760 09F4  
                                                  l7912 030C  
                                                  l8536 1AAA  
                                                  l8704 257A  
                                                  l7690 177A  
                                                  l7586 2020  
                                                  l7834 0B80  
                                                  l7826 0AFC  
                                                  l7818 0AE0  
                                                  l7754 09F0  
                                                  l7738 0988  
                                                  l7842 0B9C  
                                                  l7930 0390  
                                                  l7922 035E  
                                                  l8538 1AB0  
                                                  l7596 203E  
                                                  l7588 2024  
                                                  l7828 0B3E  
                                                  l7836 0B8A  
                                                  l7844 0BB4  
                                                  l7940 03D4  
                                                  l7916 0330  
                                                  l7908 02CC  
                                                  l7852 00D6  
                                                  l8388 233C  
                                                  l8732 1918  
                                                  l8708 2580  
                                                  _ADON 007E10  
                                                  l7694 17AE  
                                                  l7774 0A20  
                                                  l7942 0422  
                                                  l7934 03B2  
                                                  l7926 036E  
                                                  l7918 0350  
                                                  l7870 017E  
                                                  l7862 014E  
                                                  l7854 00F0  
                                                  l8662 1200  
                                                  l8654 11E6  
                                                  l8646 11D2  
                                                  l7792 0A68  
                                                  l7768 0A1C  
                                                  l7784 0A48  
                                                  l7856 0106  
                                                  l8832 1A12  
                                                  l8656 11EA  
                                                  l8664 1208  
                                                  l8760 1956  
                                                  l7698 17C4  
                                                  l7786 0A52  
                                                  l7970 055E  
                                                  l7962 04C6  
                                                  l7946 0452  
                                                  l7954 0478  
                                                  l7882 01E8  
                                                  l7858 010E  
                                                  l8826 1A00  
                                                  l8594 2320  
                                                  l8682 1246  
                                                  l8674 122C  
                                                  l8850 1546  
                                                  l7980 05D4  
                                                  l7956 04A8  
                                                  l7892 022C  
                                                  l7884 01F4  
                                                  l8692 1266  
                                                  l8668 1218  
                                                  l8932 0BBE  
                                                  l7990 05F8  
                                                  l7966 0552  
                                                  l7958 04AE  
                                                  l7894 0234  
                                                  l7878 01C4  
                                                  l8766 1968  
                                                  l7968 0558  
                                                  l7896 0254  
                                                  l7888 020C  
                                                  l8688 1258  
                                                  l8696 1274  
                                                  l7986 05F2  
                                                  l7978 05AC  
                                                  l8962 0C1A  
                                                  l8954 0BFC  
                                                  l8938 0BCC  
                                                  l7998 060A  
                                                  l8798 19C2  
                                                  l8982 0C64  
                                                  l8974 0C46  
                                                  l8958 0C0E  
                                                  STR_1 3FB9  
                                                  l8984 0C74  
                                                  STR_2 3EB7  
                                                  STR_3 3FEC  
                                                  STR_4 3F9B  
                                                  STR_5 3FF9  
                                                  l8996 0CA0  
                                                  STR_6 3FB9  
                                                  STR_7 3F6A  
                                                  STR_8 3FBC  
                                                  STR_9 3FB9  
                                                  _LATA 000F89  
                                                  _LATB 000F8A  
                                                  _LATC 000F8B  
                                                  _LATD 000F8C  
                                                  _LATE 000F8D  
                                       __end_of_IRQ_ADC 0FBA  
                                      ??i2_Coupe_Moteur 0001  
                                                  _IOFS 007E9A  
                                                  _PEIE 007F96  
                                                  u6070 01BE  
                                                  u5610 0EBE  
                                                  u6421 16C6  
                                                  u7207 1830  
                                                  u7217 1842  
                                                  u6441 16E6  
                                                  u6521 160A  
                                                  u5650 0F42  
                                                  u5570 0E38  
                                                  _PR5H 000F91  
                                                  u7227 1854  
                                                  u6540 163C  
                                                  u7237 1866  
                                                  _PR5L 000F90  
                                                  u7247 1878  
                                                  u6295 07CC  
                                                  u6471 13A6  
                                                  u6296 07CE  
                                                  u7257 188A  
                                                  u6545 1634  
                                                  u7267 189C  
                                                  u6491 13C6  
                                                  u7277 18AE  
                                                  u7287 18C0  
                                                  u7297 18D2  
                                                  _PTIF 007D24  
                                                  _TMR2 000FCC  
                                       __end_of_IRQ_PWM 2742  
                                    _Detection_Pion_Off 26F2  
                                         _nb_s_bequille 00A2  
                                       _Option_Multitas 027E  
                                                  _Etat 00AA  
                                         __CFG_FCMEN$ON 000000  
                                        ??_Coupe_Moteur 000F  
                                                  _main 20D2  
                               IRQ_Execution@IRQ_Indice 0012  
                                          ___ftpack@arg 000F  
                                                  _duty 0086  
                                       __end_of_SPI_ISR 1396  
                                 __end_of_IRQ_Execution 1F1E  
                                          ___ftpack@exp 0012  
                                         ??_Init_TIMER0 000F  
                                         ??_Init_TIMER2 000F  
                                         ??_Init_TIMER5 000F  
                                                  fsr1h 000FE2  
                                                  fsr2h 000FDA  
                                                  indf1 000FE7  
                                                  indf2 000FDF  
                                                  fsr1l 000FE1  
                                                  fsr2l 000FD9  
                                                  btemp 0051  
                               _nb_100ms_platine_backup 004E  
                           __end_of_EUSART1_RX_T3_LOCAL 08D8  
                                                  prodh 000FF4  
                                                  prodl 000FF3  
                                                  start 00CE  
                                           ?_IRQ_TIMER2 0001  
                                   ?_Detection_Pion_Off 0001  
                                         __CFG_MCLRE$ON 000000  
                                          ___param_bank 000000  
                                          ___ftmul@sign 0025  
                                       ??_Etat_Intitule 000F  
                                         _nb_s_patinage 00A7  
                                       __end_of_Init_IT 2176  
                                          ___fttol@exp1 00F2  
                                          ___fttol@lval 00EE  
                                           ?_TIMER0_Off 0001  
                                           ?_TIMER2_Off 0001  
                                    __size_of_IRQ_CAPOT 0008  
                                           ?_TIMER5_Off 0001  
                  _Capteur_Capot_Nb_Evenement_Autoriser 004A  
                                    __size_ofi1_IRQ_ADC 01A6  
  __end_ofi1_Surveillance_Consommation_Moteur_1_Activer 2620  
 __size_ofi1_Surveillance_Consommation_Moteur_1_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_1_Activer 25FC  
   __size_of_Surveillance_Consommation_Moteur_1_Activer 0012  
          ??_Surveillance_Consommation_Moteur_1_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_1_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_1_Activer 0001  
           ?_Surveillance_Consommation_Moteur_1_Activer 0001  
          i1_Surveillance_Consommation_Moteur_1_Activer 260E  
            _Surveillance_Consommation_Moteur_1_Activer 25EA  
                                    __size_ofi1_IRQ_PWM 0004  
  __end_ofi1_Surveillance_Consommation_Moteur_2_Activer 260E  
 __size_ofi1_Surveillance_Consommation_Moteur_2_Activer 0012  
    __end_of_Surveillance_Consommation_Moteur_2_Activer 25EA  
   __size_of_Surveillance_Consommation_Moteur_2_Activer 0012  
          ??_Surveillance_Consommation_Moteur_2_Activer 000F  
        ??i1_Surveillance_Consommation_Moteur_2_Activer 0005  
         ?i1_Surveillance_Consommation_Moteur_2_Activer 0001  
           ?_Surveillance_Consommation_Moteur_2_Activer 0001  
          i1_Surveillance_Consommation_Moteur_2_Activer 25FC  
            _Surveillance_Consommation_Moteur_2_Activer 25D8  
                                                 ?_main 0001  
                                                 _ADCHS 000F99  
                       Mouvement_Bequille@type_consigne 0287  
                                       __end_of___lbdiv 21AA  
                                                 STR_10 3F16  
                                                 STR_11 3FDB  
                                       __end_of___awmod 1C92  
                                        _Bequille_I_Max 0092  
                                       __end_of___ftdiv 1770  
                                      _LOW_PRIORITY_IRQ 0018  
                                       __end_of___ftmul 146C  
                                       __end_of___fttol 16B6  
                                                 _T2CON 000FCA  
                                                 _LATC5 007C5D  
                                                 _LATD4 007C64  
                                                 _PDC0H 000F78  
                                                 _LATD5 007C65  
                                                 _LATD6 007C66  
                                                 _PDC1H 000F76  
                                                 _LATD7 007C67  
                                                 _PDC0L 000F79  
                                                 _DTCON 000F6D  
                                                 _PDC1L 000F77  
                      __size_of_IRQ_PION_Metal_Apparait 001E  
                                       __end_of___lwdiv 2052  
                                         _Init_Moteur_1 2630  
                                         _Init_Moteur_2 2620  
                                       __end_of___lwmod 20D2  
                                                 i1l610 1C18  
                                                 i1l531 26B6  
                                                 i1l630 1042  
                                                 i1l622 0FBC  
                                                 i1l607 1BD8  
                                                 i1l624 0FF0  
                                                 i1l570 1F96  
                                                 i1l650 0042  
                                                 i1l652 004C  
                                                 i1l637 10C6  
                                                 i1l566 1F72  
                                                 i1l662 008C  
                                                 i1l654 0058  
                                                 i1l664 0098  
                                                 i1l656 0064  
                                                 i1l666 00A4  
                                                 i1l658 0080  
                                                 i1l659 0074  
                                                 i1l588 1E94  
                                                 i1l669 00AE  
                                                 i2l710 207E  
                                                 i2l713 2088  
                                                 i2l706 2066  
                                                 i2l708 2072  
                                                 i2l699 254C  
                                    __size_of_TIMER0_On 0016  
                                     ?_SPI_Check_Buffer 0001  
                                                 _RCREG 000FAE  
                                    __size_of_TIMER2_On 0006  
                                    __size_of_TIMER5_On 0004  
                                         _Init_Variable 153E  
                                                 _TMR0H 000FD7  
                                                 _TMR0L 000FD6  
                                                 _TMR5H 000F88  
                                                 _SPBRG 000FAF  
                                                 _TMR5L 000F87  
                                                 _TRISA 000F92  
                                                 _TRISB 000F93  
                                                 _TRMT1 007D61  
                                                 _TRISC 000F94  
                                                 _TRISD 000F95  
                                                 _TRISE 000F96  
                                   _Detection_Pion_Init 2588  
                                  ??_Detection_Pion_Off 000F  
                                       __end_of_delay_s 2352  
                                         __CFG_WRT0$OFF 000000  
                                         __CFG_WRT1$OFF 000000  
                                         __CFG_WRT2$OFF 000000  
                                                 _Cycle 0BBE  
                                         __CFG_WRT3$OFF 000000  
                                  _EUSART1_Transmit_ISR 22B8  
                                        __CFG_EBTR0$OFF 000000  
                                        __CFG_EBTR1$OFF 000000  
                                    ??_SPI_Check_Buffer 0043  
                                        __CFG_EBTR2$OFF 000000  
                                        __CFG_EBTR3$OFF 000000  
                                        ?_Stop_Moteur_1 0001  
                                         __CFG_WRTB$OFF 000000  
                                         __CFG_WRTC$OFF 000000  
                                         __CFG_WRTD$OFF 000000  
                                        __CFG_EBTRB$OFF 000000  
                                       __end_of_dpowers 3EAF  
                                  EUSART1_Receive_ISR@i 0007  
                                   __end_of_Etat_Update 245E  
                                       __end_of_isdigit 24D2  
                                         ___ftpack@sign 0013  
                                     _DVT_Tableau_Pause 0074  
                                  __size_of_delay_100ms 00B6  
                                         ??_Buzzer_Etat 000F  
                                        __pbitbssCOMRAM 0278  
                                        __CFG_BOREN$OFF 000000  
                                                 tablat 000FF5  
                                  Mouvement_X@direction 0287  
                                                 status 000FD8  
                                     _Mouvement_Startup 004D  
                                       __end_of_sprintf 0BBE  
                          __end_of_EUSART1_Check_Buffer 2268  
                                       ___lbdiv@divisor 000F  
                                          ?i1_TIMER5_On 0001  
                         __size_of_Init_Moteur_Bequille 0010  
                                          ?_IRQ_TIMER_0 0001  
                                          ?_IRQ_TIMER_5 0001  
                                       ___lbdiv@counter 0011  
                          __size_of_Check_List_Moteur_1 008C  
                          __size_of_Check_List_Moteur_2 0026  
                                  ?_Detection_Pion_Init 0001  
                                          ?i2_IRQ_CAPOT 0001  
                            __end_of_EUSART1_Erreur_Get 270A  
                                       __initialization 1FBE  
                                        __CFG_HPOL$HIGH 000000  
                                     ?_Capteur_Capot_On 0001  
                                  EUSART1_RX_T3_LOCAL@A 0281  
                                  EUSART1_RX_T3_LOCAL@B 0282  
                                  EUSART1_RX_T3_LOCAL@C 0283  
                                  EUSART1_RX_T3_LOCAL@D 0284  
                                  EUSART1_RX_T3_LOCAL@E 0285  
                                  EUSART1_RX_T3_LOCAL@F 0286  
                                      __end_of_Etat_Get 2210  
                                  EUSART1_RX_T3_LOCAL@i 0041  
                            __end_of_EUSART1_Initialize 1F6E  
                                          __end_of_main 210A  
                                   __end_of_Init_TIMER0 2402  
                                   __end_of_Init_TIMER2 24EC  
                                   __end_of_Init_TIMER5 2290  
                                      __end_of_Init_ADC 2422  
                            ??_IRQ_PION_CHANGEMENT_ETAT 0006  
                                      __end_of_Init_SPI 239C  
                                      __end_of_Init_PWM 24B6  
                                 __end_of_delay_n_100ms 2588  
                                    __size_of_Alarme_On 0010  
                                    ??_Capteur_Capot_On 0010  
                                        __CFG_OSC$IRCIO 000000  
                                  Mouvement_Z@direction 0289  
                                        __CFG_LPOL$HIGH 000000  
                                                ??_main 0043  
                                        ?_Init_Moteur_1 0001  
                                        ?_Init_Moteur_2 0001  
                                         ___fttol@sign1 00ED  
                                        ?_Init_Variable 0001  
                                         __activetblptr 000002  
                          _Consigne_Max_Moteur_Bequille 0094  
                                 ?_EUSART1_Transmit_ISR 0001  
                                                ?_Cycle 0001  
                                             ??_IRQ_ADC 000F  
                                   __size_of_IRQ_TIMER2 0006  
                                             ??_IRQ_PWM 000F  
                    __end_of_Check_List_Moteur_Bequille 2142  
                            _Check_List_Moteur_Bequille 210A  
                           __end_of_EUSART1_Buffer_Send 182A  
                                                _ADCON0 000FC2  
                                                _ADCON1 000FC1  
                                                _ADCON2 000FC0  
                                                _ADCON3 000F9A  
                                             ??_SPI_ISR 0005  
                                                _ADRESH 000FC4  
                                          ?i1_Alarme_On 0001  
                                                _ANSEL0 000FB8  
                                                _ANSEL1 000FB9  
                                      __end_of___ftpack 1B4A  
                                      __end_of___lbtoft 23C0  
                                                _GODONE 007E11  
                                                _INT0IF 007F91  
                                                i1l1329 22DC  
                                                i1l1649 12BA  
                                                i1l7002 114A  
                                     __end_of_IRQ_CAPOT 2702  
                                        __CFG_WDTEN$OFF 000000  
                                                i1l6800 1326  
                                                i1l6810 135E  
                                                i1l6802 132E  
                                                i1l6900 1EBA  
                                                i1l6750 1F86  
                                                i1l6806 1342  
                                                i1l6814 1362  
                                                i1l6912 1BCC  
                                                i1l6850 14EA  
                                                i1l6762 1FA0  
                                                i1l6818 137A  
                                                i1l6860 151C  
                                                i1l6844 14C4  
                                                i1l6764 1FA6  
                                                i1l6748 1F7E  
                                                i1l6854 14FE  
                                                i1l6838 147A  
                                                i1l6790 12BE  
                                                i1l6782 1290  
                                                i1l6942 1C20  
                                                i1l6918 1BDC  
                                                i1l6926 1BF0  
                                                i1l6848 14E2  
                                                i1l6952 0FE4  
                                                i1l6880 1E84  
                                                i1l6866 1520  
                                                i1l6778 1FB2  
                                                i1l6962 1016  
                                                i1l6938 1C10  
                                                i2l4740 254E  
                                                i1l6796 1308  
                                                i1l6980 109A  
                                                i1l6972 1074  
                                                i1l6892 1EAA  
                                                i1l6884 1E8E  
                                                i1l6990 10F8  
                                                i1l6958 100E  
                                                i1l6886 1E9A  
                                                i1l6976 1092  
                                                i1l6968 106A  
                                                i1l6994 1116  
                                                i1l6986 10EE  
                                                i1l6998 111E  
                                     __end_ofi1_IRQ_ADC 1160  
                                                _RCREG1 000FAE  
                                   __size_of_TIMER0_Off 000C  
                                   __size_of_TIMER2_Off 0006  
                                                _RCSTA1 000FAB  
                                                _OSCCON 000FD3  
                                     __end_ofi1_IRQ_PWM 274A  
                                   __size_of_TIMER5_Off 000A  
                                                _PTCON0 000F7F  
                                                _PTCON1 000F7E  
                                        __CFG_WINEN$OFF 000000  
                                                _TMR2IF 007CF1  
                                                _SPBRGH 000FB0  
                     __size_of_IRQ_PION_Metal_Disparait 001A  
                                                _PTPERH 000F7A  
                                                _PTPERL 000F7B  
                             ?_IRQ_PION_Metal_Disparait 0001  
                                                _SSPBUF 000FC9  
                                    __size_of_Init_Port 0066  
                                     _HIGH_PRIORITY_IRQ 0008  
                                                Cycle@i 028A  
                                                _TXREG1 000FAD  
                                         _nb_100ms_pion 00A5  
                                                _TXSTA1 000FAC  
                                 ??_Detection_Pion_Init 000F  
                                        _Detecteur_Pion 0280  
                                                _Alarme 00A9  
                                      __end_of_delay_1s 22B8  
                                             ??_Init_IT 000F  
                                          ?i2_Alarme_On 0001  
                                     __end_of_TIMER0_On 251C  
                                 _Consigne_Max_Moteur_X 0096  
                                 _Consigne_Max_Moteur_Z 0095  
                                     __end_of_TIMER2_On 2718  
                                     __end_of_TIMER5_On 2746  
                          __size_of_EUSART1_IT_ACTIVATE 000C  
                                    _Mouvement_Bequille 198A  
                                    ?_HIGH_PRIORITY_IRQ 0001  
                                   __end_of_Buzzer_Etat 26AC  
                                        __CFG_PWRTEN$ON 000000  
                                        __CFG_SSPMX$RD1 000000  
                           Mouvement_Bequille@direction 0289  
                                                ___wmul 2352  
                                             ??___lbdiv 0010  
                                        __CFG_STVREN$ON 000000  
                                             ??___awmod 0013  
 __end_of_Surveillance_Consommation_Moteur_1_Desactiver 26D2  
__size_of_Surveillance_Consommation_Moteur_1_Desactiver 000C  
       ??_Surveillance_Consommation_Moteur_1_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_1_Desactiver 0001  
         _Surveillance_Consommation_Moteur_1_Desactiver 26C6  
                                             ??___ftdiv 002F  
                                             ??___ftmul 0021  
                                             ??___fttol 003C  
                                             ??___lwdiv 0013  
                                             ??___lwmod 001A  
                                   ?_Mouvement_Bequille 0287  
                                     ?i2_IRQ_I_MOTEUR_1 0001  
                                     ?i2_IRQ_I_MOTEUR_2 0001  
                                   ??_HIGH_PRIORITY_IRQ 0003  
                                                _erreur 0084  
                                                clear_0 1FC4  
                                                clear_1 1FD2  
                                                clear_2 1FE4  
                                                clear_3 1FF4  
                                       ___awmod@divisor 0011  
                                             ??_delay_s 0043  
                                       ___awmod@counter 0013  
                                    ??i2_IRQ_I_MOTEUR_1 0003  
                                    ??i2_IRQ_I_MOTEUR_2 0001  
                                         ??_Mouvement_X 0043  
                                         ??_Mouvement_Z 0043  
                                  __end_of_Coupe_Moteur 25B0  
                                 ___ftmul@f3_as_product 0026  
                                           _Etat_Update 2440  
                                             ??_isdigit 000F  
                                       ??_Stop_Moteur_1 000F  
                                          __mediumconst 3EA4  
                                                tblptrh 000FF7  
                                                tblptrl 000FF6  
                                                tblptru 000FF8  
                                             ??_sprintf 00ED  
 __end_of_Surveillance_Consommation_Moteur_2_Desactiver 269E  
__size_of_Surveillance_Consommation_Moteur_2_Desactiver 000E  
       ??_Surveillance_Consommation_Moteur_2_Desactiver 000F  
        ?_Surveillance_Consommation_Moteur_2_Desactiver 0001  
         _Surveillance_Consommation_Moteur_2_Desactiver 2690  
                                       _eusart1RxBuffer 0240  
                                      ___lbdiv@dividend 0010  
                                  ??_Mouvement_Bequille 0043  
                                         ?i1_TIMER2_Off 0001  
                                     __end_of_Alarme_On 2670  
                                         ?i1_TIMER5_Off 0001  
                             __end_of_HIGH_PRIORITY_IRQ 2094  
                                       _eusart1TxBuffer 0180  
                           i2Alarme_On@alarme_new_value 0002  
                                      ??_IRQ_I_MOTEUR_1 0011  
                                      ??_IRQ_I_MOTEUR_2 000F  
                                            __accesstop 0060  
                               __end_of__initialization 1FFA  
                               i1Buzzer_Etat@Activation 0005  
                          __end_of_Init_Input_Capture_0 23E2  
                                       __CFG_FLTAMX$RC1 000000  
                                           _Init_TIMER0 23E2  
                                           _Init_TIMER2 24D2  
                                           _Init_TIMER5 2268  
                                         ___rparam_used 000001  
                                            ___ftdiv@f1 0029  
                                            ___ftdiv@f2 002C  
                                            ___ftdiv@f3 0033  
                                         ?i2_IRQ_TIMER2 0001  
                                            ___lbtoft@c 001A  
                                            ___ftmul@f1 001B  
                                            ___ftmul@f2 001E  
                                     _Capteur_Capot_Off 273A  
                                         __end_of_Cycle 0E14  
                                            ___fttol@f1 0038  
                                        __pcstackCOMRAM 0001  
                                    ?_Capteur_Capot_Off 0001  
                                 EUSART1_RX_T3_LOCAL@Ad 0040  
                                 EUSART1_RX_T3_LOCAL@Da 0280  
                                         ?i2_TIMER2_Off 0001  
                                       ??_Init_Moteur_1 000F  
                                       ??_Init_Moteur_2 000F  
                                       ??_Init_Variable 000F  
                                      ___lbdiv@quotient 0012  
                               _IRQ_PION_Metal_Apparait 2422  
                                 delay_n_100ms@nb_100ms 0010  
                                    _erreur_accumulator 0082  
                                     __end_of_Init_Port 1CF8  
                                   ??_Capteur_Capot_Off 000F  
                                 __end_ofi1_Etat_Update 247C  
                                ??_EUSART1_Transmit_ISR 0005  
                                  _EUSART1_Check_Buffer 223C  
                                __size_ofi1_IRQ_TIMER_0 0058  
                                __size_ofi1_IRQ_TIMER_5 0070  
                                               ??_Cycle 0043  
                           __end_of_EUSART1_Receive_ISR 153E  
                                   __end_of_Mouvement_X 1288  
                                   __end_of_Mouvement_Z 198A  
                                        ??i1_TIMER2_Off 0005  
                                        ??i1_TIMER5_Off 0005  
                                          sprintf@width 00F7  
                                             ?_Etat_Get 0001  
                                           _Pelle_I_Max 0093  
                                            __pbssBANK0 0060  
                                            __pbssBANK1 0100  
                                            __pbssBANK2 0200  
                                           _Buzzer_Etat 269E  
                                             ?_Init_ADC 0001  
                                             ?_Init_SPI 0001  
                                             ?_Init_PWM 0001  
                              __end_of_LOW_PRIORITY_IRQ 00CE  
                             __end_of_Capteur_Capot_Off 273E  
                                        ??i2_IRQ_TIMER2 0001  
                                          ??_IRQ_TIMER2 000F  
                                  __size_ofi1_TIMER5_On 0004  
                                  __size_of_IRQ_TIMER_0 0058  
                                  __size_of_IRQ_TIMER_5 0070  
                               __size_ofi1_Coupe_Moteur 0014  
                                  __size_ofi2_IRQ_CAPOT 0008  
                                               ?___wmul 000F  
                                        ??i2_TIMER2_Off 0001  
                                       __CFG_WDPS$32768 000000  
                                          ??_TIMER0_Off 000F  
                                          ??_TIMER2_Off 000F  
                                          ??_TIMER5_Off 000F  
                               _Compteur_IRQ_I_Moteur_1 0048  
                               _Compteur_IRQ_I_Moteur_2 0047  
                                               _BAUDCON 000FAA  
                                             ?___ftpack 000F  
                                             ?___lbtoft 0017  
                                       __CFG_PWM4MX$RB5 000000  
                                 ?_EUSART1_Check_Buffer 0001  
                                 __end_ofi2_Etat_Update 249A  
                                   _Check_List_Moteur_1 1A34  
                                   _Check_List_Moteur_2 22E0  
                                             ?_delay_1s 0001  
                                               _IRQ_ADC 0E14  
                                               _P4_busy 00AC  
                                               _IRQ_PWM 273E  
                                               _OVDCOND 000F6B  
                                               _OVDCONS 000F6A  
                                               _SEVTDIR 007B73  
                                               _RX1_ABR 027C  
                                               _PID_out 0080  
                                    __end_of_IRQ_TIMER2 271E  
                                               _PWMCON0 000F6F  
                                               _PWMCON1 000F6E  
                           _Patinage_Nb_Essai_Autoriser 009C  
                                               _SPI_ISR 1288  
                              Mouvement_X@type_consigne 00FE  
                                            ??_Etat_Get 0015  
                            __size_of_HIGH_PRIORITY_IRQ 208C  
                                 __end_ofi1_Buzzer_Etat 26BA  
                                            ??_Init_ADC 000F  
                                            _u_Init_PWM 1DC0  
                                       __CFG_PWMPIN$OFF 000000  
                                            ??_Init_SPI 000F  
                                            ??_Init_PWM 000F  
                                            _nb_s_pelle 00A3  
                                     delay_s@delay_time 00FE  
                                  __size_ofi1_Alarme_On 0010  
                                    __end_of_TIMER0_Off 26DE  
                                    __end_of_TIMER2_Off 2724  
                                    __end_of_TIMER5_Off 26E8  
                                      _consigne_pwm_max 008D  
                             __size_of_SPI_Check_Buffer 002C  
                                  ?_Check_List_Moteur_1 0001  
                                  ?_Check_List_Moteur_2 0001  
                                               _Init_IT 2142  
                                 Buzzer_Etat@Activation 000F  
                                         i1_IRQ_TIMER_0 1E72  
                                         i1_IRQ_TIMER_5 1BBA  
                                               __Hparam 0000  
                                               __Lparam 0000  
                                  __size_ofi2_Alarme_On 0010  
                                               _Version 00AB  
                                               ___lbdiv 2176  
                                               ___awmod 1C2A  
                             ??_IRQ_PION_Metal_Apparait 0010  
                                               ___ftdiv 16B6  
                                 __size_of_Coupe_Moteur 0014  
                                       __size_of___wmul 0026  
                                               ___ftmul 1396  
                          __size_of_EUSART1_RX_T3_LOCAL 0806  
                                               ___fttol 15FA  
                                 __end_of_Etat_Intitule 21DE  
                                               ___lwdiv 2008  
                                               ___lwmod 2094  
                                         _type_consigne 0091  
                                               __pcinit 1FBE  
                                            ??___ftpack 0014  
                                            ??___lbtoft 001A  
                                               _delay_s 232C  
                                               __ramtop 0300  
                                               __ptext0 20D2  
                                               _nb_Pion 00A1  
                                               __ptext1 153E  
                                               __ptext2 2268  
                                               __ptext3 24D2  
                                               __ptext4 23E2  
                                               __ptext5 2378  
                                               __ptext6 1C92  
                          __end_of_Init_Moteur_Bequille 2660  
                                               __ptext7 249A  
                                               __ptext8 2142  
                                               __ptext9 23C0  
                                             _T0CONbits 000FD5  
                                    _EUSART1_Erreur_Get 2702  
                                           _Mouvement_X 1160  
                                           _Mouvement_Z 18E0  
                                     __end_of_hexpowers 3EB7  
                                  _Init_Input_Capture_0 23C0  
                        _Capteur_Capot_Compteur_Temps_S 009E  
                                               _dpowers 3EA5  
                                             _T2CONbits 000FCA  
                                __size_of_IRQ_Execution 0054  
                      __end_of_IRQ_PION_Metal_Disparait 2506  
                                               _isdigit 24B6  
                                   _EUSART1_IT_ACTIVATE 26BA  
                                      ___awmod@dividend 000F  
                           __size_of_Detection_Pion_Off 0008  
                                            ??_delay_1s 0010  
                                    _EUSART1_Initialize 1F1E  
                                         ??_delay_100ms 000F  
                                             _T5CONbits 000FB7  
                             __size_of_Capteur_Capot_On 0010  
                                          _Consigne_Max 0097  
                           ?_Check_List_Moteur_Bequille 0001  
                                   ?_EUSART1_Erreur_Get 0001  
                                               _sprintf 08D8  
                                        __pintcode_body 2052  
                                  end_of_initialization 1FFA  
                                   ?_EUSART1_Initialize 0001  
                                  _Etat_Precedent_Index 004C  
                                         __Lmediumconst 3EA4  
                             _Surveillance_Capteur_Pion 0089  
                                               int_func 2052  
                                 ??_Check_List_Moteur_1 0043  
                                 ??_Check_List_Moteur_2 0043  
                                   _Nouvelle_Valeur_ADC 027F  
                            __size_of_Capteur_Capot_Off 0004  
                                          _Coupe_Moteur 259C  
                                        ?i1_IRQ_TIMER_0 0001  
                                        ?i1_IRQ_TIMER_5 0001  
                                  ?_EUSART1_IT_ACTIVATE 0001  
                                             _IRQ_CAPOT 26FA  
                                             i1_IRQ_ADC 0FBA  
                    _Surveillance_Consommation_Moteur_1 008B  
                    _Surveillance_Consommation_Moteur_2 008A  
                                             i1_IRQ_PWM 2746  
                               __size_ofi2_Coupe_Moteur 0014  
                                  ??_EUSART1_Erreur_Get 0005  
                                               postdec1 000FE5  
                                               postdec2 000FDD  
                                             _TIMER0_On 2506  
                                             _TIMER2_On 2712  
                                               postinc0 000FEE  
                                               postinc2 000FDE  
                                             _TIMER5_On 2742  
                                            _spiRxIndex 0043  
                                      _nb_Pion_Objectif 00A0  
                                            _spiTxIndex 0044  
                                      _nb_100ms_Timer_5 00A6  
                                  __end_ofi1_TIMER2_Off 272A  
                                  ??_EUSART1_Initialize 000F  
                                  __end_ofi1_TIMER5_Off 26F2  
                                             _UART_TEST 0279  
                                ??_EUSART1_Check_Buffer 0043  
                                             _PORTAbits 000F80  
                                             _PORTBbits 000F81  
                                             _PORTCbits 000F82  
                                 ?_Init_Input_Capture_0 0001  
                                          ?_Etat_Update 0001  
                                  __end_ofi2_IRQ_TIMER2 2730  
                                             _TRISAbits 000F92  
                                             _TRISBbits 000F93  
                                             _TRISCbits 000F94  
                                             _TRISDbits 000F95  
                                             _TRISEbits 000F96  
                                           _CAP1CONbits 000F63  
                                           _CAP2CONbits 000F62  
                     __size_of_IRQ_PION_CHANGEMENT_ETAT 0050  
                             ?_IRQ_PION_CHANGEMENT_ETAT 0001  
                             __size_ofi2_IRQ_I_MOTEUR_1 0016  
                             __size_ofi2_IRQ_I_MOTEUR_2 0016  
                           __end_of_Detection_Pion_Init 259C  
                                      _nb_100ms_platine 00A4  
                             Etat_Update@etat_new_value 000F  
                                  __end_ofi2_TIMER2_Off 2736  
                                           ?_u_Init_PWM 0001  
                                __size_of_delay_n_100ms 0014  
                         delay_s@Timer_0_Etat_Prealable 00FF  
                                   __end_of_delay_100ms 18E0  
                                           ___ftdiv@exp 0036  
                                          ?_Init_TIMER0 0001  
                                     Mouvement_X@option 00FF  
                                          ?_Init_TIMER2 0001  
                                          ?_Init_TIMER5 0001  
                                 ??_EUSART1_IT_ACTIVATE 000F  
                                     _Detection_Pion_On 2306  
                          __size_of_EUSART1_Buffer_Send 00BA  
                                          _consigne_pwm 008E  
                                         _IRQ_Execution 1ECA  
                                             _Alarme_On 2660  
                                      __CFG_T1OSCMX$OFF 000000  
                                            ?_IRQ_CAPOT 0001  
                                     Mouvement_Z@option 0288  
                                            ?i1_IRQ_ADC 0001  
                                            ?i1_IRQ_PWM 0001  
                                    ?_Detection_Pion_On 0001  
                                        i1_Coupe_Moteur 25B0  
                                           ___ftmul@exp 0024  
                                            ?_TIMER0_On 0001  
                                            ?_TIMER2_On 0001  
                                            ?_TIMER5_On 0001  
                                      __CFG_EXCLKMX$RC3 000000  
                                        __end_of___wmul 2378  
                                   ??_Detection_Pion_On 0010  
                                           _BAUDCONbits 000FAA  
                                   start_initialization 1FBE  
                                 __end_of_Stop_Moteur_1 273A  
                                             _Init_Port 1C92  
                              _IRQ_PION_Metal_Disparait 24EC  
                           __size_of_Mouvement_Bequille 00AA  
                                          ?_Buzzer_Etat 0001  
                                       _delay_s_counter 008C  
                             __end_of_Detection_Pion_On 232C  
                                       ??i1_IRQ_TIMER_0 0005  
                                       ??i1_IRQ_TIMER_5 0007  
                                     __size_of_Etat_Get 0032  
                                      _SPI_Check_Buffer 2210  
                                        ?_IRQ_Execution 0001  
                                __end_ofi1_Coupe_Moteur 25C4  
                                  _Init_Moteur_Bequille 2650  
                                     __size_of_Init_ADC 0020  
                                            ?_Alarme_On 0001  
                                     __size_of_Init_SPI 0024  
                                     __size_of_Init_PWM 001C  
                                     ?_LOW_PRIORITY_IRQ 0001  
                                  EUSART1_Buffer_Send@i 0010  
                                    ??_LOW_PRIORITY_IRQ 0008  
                                              ??___wmul 0013  
                           i1Etat_Update@etat_new_value 0005  
                                _erreur_accumulator_max 007E  
                   __size_of_Check_List_Moteur_Bequille 0038  
                                         _delay_n_100ms 2574  
                                ??_Init_Input_Capture_0 000F  
                                   __size_of_u_Init_PWM 005A  
                                 __end_of_Init_Moteur_1 2640  
                                 __end_of_Init_Moteur_2 2630  
                                 __end_of_Init_Variable 15FA  
                                        _eusart1RxIndex 0045  
                                        _eusart1TxIndex 0046  
                                     __size_of___ftpack 008A  
                                     __size_of___lbtoft 0024  
                                           __pbssCOMRAM 0043  
                                              ?_IRQ_ADC 0001  
                         __size_of_EUSART1_Transmit_ISR 0028  
                                _Image_Courant_Moteur_1 009B  
                                _Image_Courant_Moteur_2 009A  
                                         __pcstackBANK0 00ED  
                                         __pcstackBANK2 0280  
                                      _Capteur_Capot_On 2640  
                                              ?_IRQ_PWM 0001  
                                           _delay_100ms 182A  
                                            ?_Init_Port 0001  
                                          _isdigit$3642 0010  
                                     __size_of_delay_1s 0028  
                                              ?_SPI_ISR 0001  
                                   _EUSART1_RX_T3_LOCAL 00D2  
                          __size_of_EUSART1_Receive_ISR 00D2  
                                           sprintf@flag 00F6  
                                           sprintf@prec 00F3  
                                 ?_Init_Moteur_Bequille 0001  
                                         ??i1_TIMER5_On 0005  
                                         ??_IRQ_TIMER_0 000F  
                                         ??_IRQ_TIMER_5 0011  
                                       ?i1_Coupe_Moteur 0001  
                                              ?_Init_IT 0001  
                                         ??i2_IRQ_CAPOT 0003  
                                           ??_IRQ_CAPOT 0011  
                                           ??i1_IRQ_ADC 0005  
                                           ??i1_IRQ_PWM 0005  
                                __size_ofi1_Etat_Update 001E  
                                 __size_ofi1_TIMER2_Off 0006  
                                      ___lwdiv@dividend 000F  
                                 __size_ofi1_TIMER5_Off 000A  
                                        i2_Coupe_Moteur 25C4  
                                             __pintcode 0008  
                                         __pmediumconst 3EA4  
                                           ??_TIMER0_On 000F  
                                           ??_TIMER2_On 000F  
                               __size_of_IRQ_I_MOTEUR_1 0016  
                               __size_of_IRQ_I_MOTEUR_2 0016  
                                           ??_TIMER5_On 000F  
                                             __ptext100 2548  
                                             __ptext101 255E  
                                              ?___lbdiv 000F  
                                             __ptext102 270A  
                                             __ptext103 2680  
                                             __ptext104 247C  
                                             __ptext105 25C4  
                                             __ptext106 2730  
                                              ?___awmod 000F  
                                  ?_EUSART1_RX_T3_LOCAL 0280  
                                              ?___ftdiv 0029  
                                              ?___ftmul 001B  
                                              ?___fttol 0038  
                                              ?___lwdiv 000F  
                                              ?___lwmod 0016  
                                        ?_delay_n_100ms 0001  
                                             _direction 008F  
                              Etat_Intitule@Etat_Number 000F  
                                           __pintcodelo 0018  
                                 __size_ofi2_IRQ_TIMER2 0006  
                         _nb_s_fonctionnement_souhaiter 00A8  
                                              ?_delay_s 0001  
                                              SPI_ISR@i 0007  
                                          ?_Mouvement_X 00FE  
                                          ?_Mouvement_Z 0287  
                                              ?_isdigit 0001  
                                 __size_ofi2_TIMER2_Off 0006  
                                        __size_of_Cycle 0256  
                                  __size_of_Etat_Update 001E  
                                             _hexpowers 3EAF  
                                      ___lwdiv@quotient 0014  
                                         ??i1_Alarme_On 0006  
                                              ?_sprintf 001B  
                                      i2_IRQ_I_MOTEUR_1 255E  
                                      i2_IRQ_I_MOTEUR_2 2548  
                                          i1_TIMER2_Off 2724  
                                       ??_IRQ_Execution 0012  
                                          i1_TIMER5_Off 26E8  
                            __size_of_Detection_Pion_On 0026  
                                        ___wmul@product 0013  
                                              _LATAbits 000F89  
                                              _LATCbits 000F8B  
                                              _LATEbits 000F8D  
                                         ??i2_Alarme_On 0002  
                                           ??_Alarme_On 0010  
                                              _IPR1bits 000F9F  
                                              _PIE1bits 000F9D  
                                              _IPR3bits 000FA5  
                                __end_ofi2_Coupe_Moteur 25D8  
                                              _PIE3bits 000FA3  
                                              i1u503_20 10E8  
                                __size_ofi2_Etat_Update 001E  
                                          i2_IRQ_TIMER2 272A  
                                              i1u495_20 0FDE  
                                              _PIR1bits 000F9E  
                                  __size_of_Init_TIMER0 0020  
                                  __size_of_Init_TIMER2 001A  
                                              i1u499_20 1064  
                                  __size_of_Init_TIMER5 0028  
                                              _PIR3bits 000FA4  
                                              _RCONbits 000FD0  
                                              _SEVTCMPH 000F70  
                                              _SEVTCMPL 000F71  
                                 ??_EUSART1_RX_T3_LOCAL 00FA  
                                   __end_ofi1_TIMER5_On 274E  
                                   __end_of_IRQ_TIMER_0 1E72  
                                   __end_of_IRQ_TIMER_5 1BBA  
                                   __end_ofi2_IRQ_CAPOT 2712  
                                              _SPI_MODE 0278  
                      __end_of_IRQ_PION_CHANGEMENT_ETAT 1FBE  
                                          i2_TIMER2_Off 2730  
                                              _RX1_full 027B  
                                __size_ofi1_Buzzer_Etat 000E  
                                            _ADCON0bits 000FC2  
                                            _ADCON1bits 000FC1  
                                            _ADCON2bits 000FC0  
                                            _ADCON3bits 000F9A  
                                     ___wmul@multiplier 000F  
                            __end_of_Detection_Pion_Off 26FA  
                                              _SPI_full 027A  
                                   _EUSART1_Buffer_Send 1770  
                                         i1_Etat_Update 245E  
                                           ??_Init_Port 000F  
                                      __size_of_IRQ_ADC 01A6  
                                         _moteur_indice 0099  
                                      __size_of_IRQ_PWM 0004  
                           __end_of_Check_List_Moteur_1 1AC0  
                           __end_of_Check_List_Moteur_2 2306  
                                           _INTCON2bits 000FF1  
                                           _INTCON3bits 000FF0  
                                              _Etat_Get 21DE  
                                              _Etat_Log 006A  
                                      __size_of_SPI_ISR 010E  
                                          ??_u_Init_PWM 000F  
                                              _Init_ADC 2402  
                                __size_of_Etat_Intitule 0034  
                                ??_Init_Moteur_Bequille 000F  
                                              _Init_SPI 2378  
                                              _Init_PWM 249A  
                               EUSART1_Buffer_Send@text 000F  
                             Alarme_On@alarme_new_value 0010  
                                     _Patinage_Nb_Essai 009D  
                                  ?_EUSART1_Buffer_Send 000F  
                                  __size_of_Buzzer_Etat 000E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_1 1DC0  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_1 0062  
                    ??_Init_ADC_Single_Shoot_I_Moteur_1 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_1 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_1 1D5E  
              __end_of_Init_ADC_Single_Shoot_I_Moteur_2 1D5E  
             __size_of_Init_ADC_Single_Shoot_I_Moteur_2 0066  
                    ??_Init_ADC_Single_Shoot_I_Moteur_2 000F  
                     ?_Init_ADC_Single_Shoot_I_Moteur_2 0001  
                      _Init_ADC_Single_Shoot_I_Moteur_2 1CF8  
                                   __end_ofi1_Alarme_On 2680  
                                       ?i2_Coupe_Moteur 0001  
                              ?_IRQ_PION_Metal_Apparait 0001  
                                      __size_of_Init_IT 0034  
                                              __Hrparam 0000  
                                              __Lrparam 0000  
                                       ??_delay_n_100ms 0010  
                           __size_of_EUSART1_Erreur_Get 0008  
                                   __end_ofi2_Alarme_On 2690  
                                      __size_of___lbdiv 0034  
                                      __size_of___awmod 0068  
                                      __size_of___ftdiv 00BA  
                                      __size_of___ftmul 00D6  
                                      __size_of___fttol 00BC  
                           __size_of_EUSART1_Initialize 0050  
                                      __size_of___lwdiv 004A  
                                      __size_of___lwmod 003E  
                                              ___ftpack 1AC0  
                                              ___lbtoft 239C  
                            ??_IRQ_PION_Metal_Disparait 0010  
                                      __size_of_delay_s 0026  
                              __end_of_SPI_Check_Buffer 223C  
                                    __end_of_u_Init_PWM 1E1A  
                                        ?i1_Etat_Update 0001  
                         __size_of_EUSART1_Check_Buffer 002C  
                                            sprintf@idx 00F1  
                                            sprintf@val 00F4  
                                   lecture_I_Mot1@Resul 007C  
                                         i2_Etat_Update 247C  
                                   lecture_I_Mot2@Resul 007A  
                                              _delay_1s 2290  
                                      __size_of_isdigit 001C  
                                       ___lwdiv@divisor 0011  
                                       ___lwdiv@counter 0013  
                                              __ptext10 2402  
                                              __ptext11 1F1E  
                                              __ptext20 2736  
                                              __ptext12 26BA  
                                              __ptext21 2630  
                                              __ptext13 0BBE  
                                              __ptext30 1AC0  
                                              __ptext22 1D5E  
                                              __ptext14 2574  
                                              __ptext31 2640  
                                              __ptext23 2306  
                                              __ptext15 18E0  
                                              __ptext40 2506  
                                              __ptext32 273A  
                                              __ptext24 2588  
                                              __ptext16 2620  
                                              __ptext41 1CF8  
                                              __ptext33 198A  
                                              __ptext25 1A34  
                                              __ptext17 22E0  
                                              __ptext50 2352  
                                              __ptext42 26F2  
                                              __ptext34 1DC0  
                                              __ptext26 239C  
                                              __ptext18 1160  
                                              __ptext51 2094  
                                              __ptext43 210A  
                                              __ptext35 232C  
                                              __ptext27 15FA  
                                              __ptext19 26C6  
                                              __ptext60 2718  
                                              __ptext52 2008  
                                              __ptext44 2176  
                                              __ptext36 26D2  
                                              __ptext28 1396  
                                              __ptext61 273E  
                                              __ptext53 2290  
                                              __ptext45 2210  
                                              __ptext37 2712  
                                              __ptext29 16B6  
                                              __ptext70 2660  
                                              __ptext62 24EC  
                                              __ptext54 182A  
                                              __ptext46 223C  
                                              __ptext38 2690  
                                              __ptext71 2440  
                                              __ptext63 26DE  
                                              __ptext55 1ECA  
                                              __ptext47 00D2  
                                              __ptext39 2650  
                                              __ptext80 1BBA  
                                              __ptext72 259C  
                                              __ptext64 2422  
                                              __ptext56 1B4A  
                                              __ptext48 08D8  
                                              __ptext81 2670  
                                              __ptext73 271E  
                                              __ptext65 2742  
                                              __ptext57 1E1A  
                                              __ptext49 24B6  
                                              __ptext90 1288  
                                              __ptext82 245E  
                                              __ptext74 0E14  
                                              __ptext66 269E  
                                              __ptext58 25D8  
                                              __ptext91 1F6E  
                                              __ptext83 25B0  
                                              __ptext75 21AA  
                                              __ptext67 251C  
                                              __ptext59 25EA  
                                              __ptext92 274A  
                                              __ptext84 2724  
                                              __ptext76 21DE  
                                              __ptext68 2532  
                                              __ptext93 26E8  
                                              __ptext85 1E72  
                                              __ptext77 1C2A  
                                              __ptext69 26FA  
                                              __ptext94 26AC  
                                              __ptext86 25FC  
                                              __ptext78 1770  
                                              __ptext95 22B8  
                                              __ptext87 260E  
                                              __ptext96 146C  
                                              __ptext88 2746  
                                              __ptext97 2702  
                                              __ptext89 0FBA  
                                              __ptext99 272A  
                                          _UART_RX_TEXT 01C0  
                           __end_of_EUSART1_IT_ACTIVATE 26C6  
                                          _UART_TX_TEXT 00AD  
                                      __size_of_sprintf 02E6  
                                              _consigne 0098  
                                         i1_Buzzer_Etat 26AC  
                                 ??_EUSART1_Buffer_Send 0010  
                                         __size_of_main 0038  
                                           i1_TIMER5_On 274A  
                                           _IRQ_TIMER_0 1E1A  
                                           _IRQ_TIMER_5 1B4A  
                          __size_of_Detection_Pion_Init 0014  
                                           i2_IRQ_CAPOT 270A  
                              __end_of_Capteur_Capot_On 2650  
                                        _IRQ_I_MOTEUR_1 2532  
                                        _IRQ_I_MOTEUR_2 251C  
                                              int$flags 0051  
                                  _eusart1TxBuffer_Test 0060  
                                         _Consigne_en_A 0049  
                                         _Etat_Intitule 21AA  
                           i1Alarme_On@alarme_new_value 0006  
                                   _EUSART1_Receive_ISR 146C  
                                           _TIMER0_Etat 0088  
                             __size_of_LOW_PRIORITY_IRQ 00B6  
                                        ?i2_Etat_Update 0001  
                                            _INTCONbits 000FF2  
                              _IRQ_PION_CHANGEMENT_ETAT 1F6E  
                                  __size_of_Mouvement_X 0128  
                                  __size_of_Mouvement_Z 00AA  
                                          ?_delay_100ms 0001  
                            __end_of_Mouvement_Bequille 1A34  
                                              isdigit@c 0011  
                                        Init_Variable@i 000F  
                                      _mouvement_option 0090  
                                           i1_Alarme_On 2670  
                                      ??i1_Coupe_Moteur 0005  
                                              intlevel1 0000  
                                              intlevel2 0000  
                                             sprintf@ap 00F2  
                                             sprintf@sp 001B  
                                        ?i1_Buzzer_Etat 0001  
                       __end_of_IRQ_PION_Metal_Apparait 2440  
                                  ?_EUSART1_Receive_ISR 0001  
                              Mouvement_Z@type_consigne 0287  
                                      ___lwmod@dividend 0016  
                                 __end_ofi1_IRQ_TIMER_0 1ECA  
                                 __end_ofi1_IRQ_TIMER_5 1C2A  
                                            _RCSTA1bits 000FAB  
                                           i2_Alarme_On 2680  
                          __end_of_EUSART1_Transmit_ISR 22E0  
                                __end_of_IRQ_I_MOTEUR_1 2548  
                                __end_of_IRQ_I_MOTEUR_2 2532  
                                            _IRQ_TIMER2 2718  
                                   Etat_Get@Etat_Indice 0017  
                                           _PWMCON0bits 000F6F  
                                __size_of_Stop_Moteur_1 0004  
                                   _nb_s_fonctionnement 004B  
                              __end_ofi2_IRQ_I_MOTEUR_1 2574  
                              __end_ofi2_IRQ_I_MOTEUR_2 255E  
                                        ?_Etat_Intitule 0001  
                                            _TIMER0_Off 26D2  
                                            _TIMER2_Off 271E  
                                            _TIMER5_Off 26DE  
                                            _PTCON0bits 000F7F  
                                            _PTCON1bits 000F7E  
                                           _spiRxBuffer 0200  
                                       ??i1_Etat_Update 0005  
                                           _spiTxBuffer 0140  
                                              sprintf@c 00F9  
                                              sprintf@f 001C  
                         __size_of_Init_Input_Capture_0 0022  
                                       ___lwmod@divisor 0018  
                                       ___lwmod@counter 001A  
                           i2Etat_Update@etat_new_value 0001  
                          ??_Check_List_Moteur_Bequille 00FE  
                                 ??_EUSART1_Receive_ISR 0005  
                                           _SPI_RX_TEXT 0100  
                                         ?_Coupe_Moteur 0001  
                                __size_of_Init_Moteur_1 0010  
                                __size_of_Init_Moteur_2 0010  
                                            _SSPCONbits 000FC6  
                                __size_of_Init_Variable 00BC  
                                        delay_n_100ms@i 0011  
                                       ?_IRQ_I_MOTEUR_1 0001  
                                       ?_IRQ_I_MOTEUR_2 0001  
